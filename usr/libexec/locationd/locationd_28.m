uint64_t sub_101307EB4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, void *a6)
{
  unsigned int v9;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  char *v22;
  unsigned char buf[1638];

  if (a3)
  {
    v9 = a3;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v12;
      *(void *)&buf[6] = 0;
      *(void *)buf = 0;
      sub_1010441E4((int8x8_t *)((v11 + (v9 >> 1)) * a4 + a2), (int8x8_t *)buf);
      v14 = *(_DWORD *)buf < *a5;
      if (*(_DWORD *)buf == *a5)
      {
        v15 = a5[1];
        v14 = *(_DWORD *)&buf[4] < v15;
        if (*(_DWORD *)&buf[4] == v15) {
          break;
        }
      }
      v16 = v14;
      v17 = v16 == 0;
      if (v16) {
        v18 = (v9 >> 1) + 1;
      }
      else {
        v18 = 0;
      }
      v11 += v18;
      if (v17) {
        v9 >>= 1;
      }
      else {
        v9 -= (v9 >> 1) + 1;
      }
      v12 = v13 + 1;
      if (!v9)
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    *a6 = *(void *)buf;
    *(void *)((char *)a6 + 6) = *(void *)&buf[6];
    v19 = 1;
  }
  else
  {
    v19 = 0;
    v13 = 0;
  }
LABEL_18:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  v20 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  return v19;
}

BOOL sub_101308134(uint64_t a1, int8x8_t *a2, unsigned int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int8x8_t v22 = 0;
  int v23 = 0;
  if (!a3) {
    goto LABEL_18;
  }
  unsigned int v13 = 0;
  unsigned int v14 = a3;
  do
  {
    unsigned int v15 = v14 >> 1;
    sub_101044414((int8x8_t *)((char *)a2 + (v13 + (v14 >> 1)) * a4), &v22);
    BOOL v16 = v22.i32[0] < *a5;
    if (v22.i32[0] == *a5) {
      BOOL v16 = v22.i32[1] < a5[1];
    }
    if (v16) {
      v14 -= v15 + 1;
    }
    else {
      v14 >>= 1;
    }
    if (v16) {
      unsigned int v17 = v15 + 1;
    }
    else {
      unsigned int v17 = 0;
    }
    v13 += v17;
  }
  while (v14);
  if (v13) {
    BOOL v18 = v13 >= a3;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    sub_101044414((int8x8_t *)((char *)a2 + v13 * a4), &v22);
    *a7 = v23;
    sub_101044414((int8x8_t *)((char *)a2 + (v13 - 1) * a4), &v22);
    BOOL v19 = 1;
    int v20 = v23;
    goto LABEL_25;
  }
  if (v13)
  {
LABEL_18:
    int v20 = 0;
    BOOL v19 = 0;
    *a7 = 0;
    goto LABEL_25;
  }
  sub_101044414(a2, &v22);
  if (v22.i32[0] == *a5)
  {
    BOOL v19 = v22.i32[1] == a5[1];
    if (v22.i32[1] == a5[1]) {
      int v20 = v23;
    }
    else {
      int v20 = 0;
    }
  }
  else
  {
    BOOL v19 = 0;
    int v20 = 0;
  }
  *a7 = v20;
LABEL_25:
  *a6 = v20;
  return v19;
}

uint64_t *sub_1013082A8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_101306660(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1013082E8(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_101308300(uint64_t a1, int **a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v40 = 0;
  int v41 = 0;
  sub_1010445F8(&v40, (void *)(a1 + 328));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a2;
    v8 = a2[1];
    sub_101044800();
    if (v47 >= 0) {
      v10 = __p;
    }
    else {
      v10 = *(unsigned char **)__p;
    }
    int v11 = **a2;
    BOOL v12 = (int)v40 < v11;
    if (v40 == v11) {
      BOOL v12 = SHIDWORD(v40) < (*a2)[1];
    }
    int v13 = v12;
    *(_DWORD *)buf = 134218498;
    *(void *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v8 - v9);
    __int16 v50 = 2080;
    v51 = v10;
    __int16 v52 = 1024;
    int v53 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    v32 = *a2;
    v31 = a2[1];
    sub_101044800();
    if (v43 >= 0) {
      v33 = v42;
    }
    else {
      v33 = (void **)v42[0];
    }
    int v34 = **a2;
    BOOL v35 = (int)v40 < v34;
    if (v40 == v34) {
      BOOL v35 = SHIDWORD(v40) < (*a2)[1];
    }
    int v36 = v35;
    *(_DWORD *)__p = 134218498;
    *(void *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (v31 - v32);
    __int16 v45 = 2080;
    v46 = v33;
    __int16 v47 = 1024;
    int v48 = v36;
    v37 = (char *)_os_log_send_and_compose_impl();
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
  }
  *a4 = 0;
  *a3 = 0;
  unsigned int v15 = *a2;
  unsigned int v14 = a2[1];
  if (v14 == *a2) {
    goto LABEL_26;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - *a2);
  unsigned int v17 = *a2;
  do
  {
    unint64_t v18 = v16 >> 1;
    BOOL v19 = &v17[3 * (v16 >> 1)];
    int v22 = *v19;
    int v20 = v19[1];
    v21 = v19 + 3;
    BOOL v23 = v20 < SHIDWORD(v40);
    BOOL v24 = v22 == v40;
    BOOL v25 = v22 < (int)v40;
    if (v24) {
      BOOL v25 = v23;
    }
    v16 += ~(v16 >> 1);
    if (v25) {
      unsigned int v17 = v21;
    }
    else {
      unint64_t v16 = v18;
    }
  }
  while (v16);
  if (v17 == v15)
  {
LABEL_26:
    *a3 = v15[2];
    *a4 = v15[2] + 1;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_101044800();
      v27 = v52 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v52) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      sub_101044800();
      if (v47 >= 0) {
        v38 = __p;
      }
      else {
        v38 = *(unsigned char **)__p;
      }
      LODWORD(v42[0]) = 136315138;
      *(void **)((char *)v42 + 4) = v38;
      v39 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v39);
      if (v39 != buf) {
        free(v39);
      }
    }
    return 1;
  }
  if (v17 != v14)
  {
    *a3 = *(v17 - 1);
    *a4 = v17[2];
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  v29 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_WORD *)__p = 0;
    v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
    return 0;
  }
  return result;
}

uint64_t sub_101308960(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, void *a6)
{
  if (a3)
  {
    unsigned int v9 = a3;
    int v11 = 0;
    int v12 = 1;
    while (1)
    {
      int v13 = v12;
      *(void *)&buf[6] = 0;
      *(void *)buf = 0;
      sub_1010441E4((int8x8_t *)((v11 + (v9 >> 1)) * a4 + a2), (int8x8_t *)buf);
      BOOL v14 = *(_DWORD *)buf < *a5;
      if (*(_DWORD *)buf == *a5)
      {
        int v15 = a5[1];
        BOOL v14 = *(_DWORD *)&buf[4] < v15;
        if (*(_DWORD *)&buf[4] == v15) {
          break;
        }
      }
      int v16 = v14;
      BOOL v17 = v16 == 0;
      if (v16) {
        int v18 = (v9 >> 1) + 1;
      }
      else {
        int v18 = 0;
      }
      v11 += v18;
      if (v17) {
        v9 >>= 1;
      }
      else {
        v9 -= (v9 >> 1) + 1;
      }
      int v12 = v13 + 1;
      if (!v9)
      {
        uint64_t v19 = 0;
        goto LABEL_18;
      }
    }
    *a6 = *(void *)buf;
    *(void *)((char *)a6 + 6) = *(void *)&buf[6];
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v19 = 0;
    int v13 = 0;
  }
LABEL_18:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  int v20 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  return v19;
}

void sub_101308BE0()
{
}

void sub_101308C34()
{
}

uint64_t sub_101308C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)sub_1004DBB40(a1, a2, a3, a4) = off_10231FCA0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231FCF8);
  }
  v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    BOOL v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload(ctor)\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  *(void *)(a1 + 112) = 0;
  os_activity_scope_leave(&v8);
  return a1;
}

void sub_101308DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  sub_1004DBC04(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_101308DD0(uint64_t a1)
{
  *(void *)a1 = off_10231FCA0;
  v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload(dtor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v5);

  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231FCF8);
  }
  v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    __int16 v11 = "activity";
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload(dtor)\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  os_activity_scope_leave(&v5);
  sub_1004DBC04(a1);
  return a1;
}

void sub_101308F50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101308F60(uint64_t a1)
{
  sub_101308DD0(a1);

  operator delete();
}

id sub_101308F98(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload::download", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231FCF8);
  }
  uint64_t v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    int v19 = 0;
    __int16 v20 = 2082;
    v21 = "";
    __int16 v22 = 2082;
    BOOL v23 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload::download\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 81)) {
    operator new();
  }
  if (!*(void *)(a1 + 104)) {
    *(void *)(a1 + 104) = [[CLOSTransaction alloc] initWithDescription:"CLTileFileDownload"];
  }
  if (*(void *)(a1 + 112))
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_10231FD18);
    }
    __int16 v10 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Dropping uncancelled #TileRemoteDownloader to service new request\"}", buf, 0x12u);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_10231FD18);
      }
    }
    __int16 v11 = qword_1024195F8;
    if (os_signpost_enabled((os_log_t)qword_1024195F8))
    {
      *(_DWORD *)buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      v21 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Dropping uncancelled #TileRemoteDownloader to service new request", "{\"msg%{public}.0s\":\"Dropping uncancelled #TileRemoteDownloader to service new request\"}", buf, 0x12u);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  id v12 = [objc_alloc((Class)CLTileRemoteDownloader) initWithQueue:[*(id *)(a1 + 32) queue] canDownloadOverCellular:*(unsigned __int8 *)(a1 + 80)];
  *(void *)(a1 + 112) = v12;
  double v13 = *a4;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1013093F8;
  v16[3] = &unk_10231FCC0;
  v16[4] = a1;
  id v14 = [v12 downloadAndDecompressFrom:a2 toDecompressedDestination:a3 withTimeout:v16 withCompletionHandler:v13];
  if ((v14 & 1) == 0) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  os_activity_scope_leave(&state);
  return v14;
}

void sub_1013093A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, os_activity_scope_state_s state)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1013093F8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (a4) {
    id v7 = [a4 code];
  }
  else {
    id v7 = (id)sub_1004DD05C(a3);
  }
  *(void *)(v6 + 96) = v7;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231FCF8);
  }
  __int16 v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(v6 + 96);
    v11[0] = 68290051;
    v11[1] = 0;
    __int16 v12 = 2082;
    double v13 = "";
    __int16 v14 = 2113;
    uint64_t v15 = a2;
    __int16 v16 = 1025;
    int v17 = v9;
    __int16 v18 = 2113;
    int v19 = a4;
    __int16 v20 = 2050;
    uint64_t v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TileFileDownload completion\", \"DecompressedFile\":%{private, location:escape_only}@, \"ResultCode\":%{private}d, \"Error\":%{private, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v11, 0x36u);
  }
  (*(void (**)(uint64_t, BOOL, void))(v6 + 64))(v6, *(void *)(v6 + 96) == 0, *(void *)(v6 + 72));
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_101309570(uint64_t a1)
{
  v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload::cancel", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v5);

  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231FCF8);
  }
  v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    __int16 v11 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload::cancel\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  [*(id *)(a1 + 112) cancel];

  *(void *)(a1 + 112) = 0;
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  *(void *)(a1 + 104) = 0;
  os_activity_scope_leave(&v5);
}

void sub_1013096E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1013096F8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101309728(id a1)
{
  qword_1024195F8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

uint64_t sub_101309758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = &off_10231FD48;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 176) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = xmmword_101DB3920;
  *(void *)(a1 + 224) = 0x4014000000000000;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  sub_1000C7F88(buf);
  double v9 = *(double *)(a1 + 208);
  double v23 = 0.0;
  int v10 = sub_1000A699C(*(uint64_t *)buf, "MaxAllowedSpeedForPreciseTT", &v23);
  double v11 = v23;
  if (!v10) {
    double v11 = v9;
  }
  *(double *)(a1 + 208) = v11;
  if (*(void *)v25) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v25);
  }
  sub_1000C7F88(buf);
  double v12 = *(double *)(a1 + 216);
  double v23 = 0.0;
  int v13 = sub_1000A699C(*(uint64_t *)buf, "MaxAllowedSpeedUncForPreciseTT", &v23);
  double v14 = v23;
  if (!v13) {
    double v14 = v12;
  }
  *(double *)(a1 + 216) = v14;
  if (*(void *)v25) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v25);
  }
  sub_1000C7F88(buf);
  double v15 = *(double *)(a1 + 224);
  double v23 = 0.0;
  int v16 = sub_1000A699C(*(uint64_t *)buf, "MaxAllowedAgeOfLocationForSpeedCheck", &v23);
  double v17 = v23;
  if (!v16) {
    double v17 = v15;
  }
  *(double *)(a1 + 224) = v17;
  if (*(void *)v25) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v25);
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  __int16 v18 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 208);
    uint64_t v20 = *(void *)(a1 + 216);
    uint64_t v21 = *(void *)(a1 + 224);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)BOOL v25 = 2082;
    *(void *)&v25[2] = "";
    __int16 v26 = 2050;
    uint64_t v27 = v19;
    __int16 v28 = 2050;
    uint64_t v29 = v20;
    __int16 v30 = 2050;
    uint64_t v31 = v21;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,construct\", \"fMaxAllowedSpeedForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedSpeedUncForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedAgeOfLocationForSpeedCheckDuringTT_s\":\"%{public}.3f\"}", buf, 0x30u);
  }
  return a1;
}

void sub_1013099A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  uint64_t v16 = *(void *)(v12 + 248);
  *(void *)(v12 + 248) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(v12 + 240);
  *(void *)(v12 + 240) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *v14;
  *double v14 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*(void **)(v12 + 48));
  }
  if (*(char *)(v12 + 47) < 0) {
    operator delete(*v13);
  }
  sub_100426880((void *)v12);
  _Unwind_Resume(a1);
}

void *sub_101309A90(void *a1)
{
  *a1 = &off_10231FD48;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24))(__p, a1);
    v3 = (void **)__p[0];
    if (v14 >= 0) {
      v3 = __p;
    }
    uint64_t v4 = a1 + 3;
    if (*((char *)a1 + 47) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)buf = 68289538;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = v3;
    __int16 v21 = 2082;
    __int16 v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,releasing assertion\", \"client\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v5 = a1[31];
  if (v5)
  {
    [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:40];
    [*(id *)(a1[31] + 16) unregister:*(void *)(a1[31] + 8) forNotification:34];
  }
  if (a1[30])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    uint64_t v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLBBTFTA", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLDaemonBBTimeFreqTransferCallbackAssertion::~CLDaemonBBTimeFreqTransferCallbackAssertion()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    AnalyticsSendEventLazy();
    [*(id *)(a1[30] + 16) unregister:*(void *)(a1[30] + 8) forNotification:0];
  }
  uint64_t v7 = a1[29];
  if (v7) {
    [*(id *)(v7 + 16) unregister:*(void *)(v7 + 8) forNotification:37];
  }
  uint64_t v8 = a1[31];
  a1[31] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a1[30];
  a1[30] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a1[29];
  a1[29] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (*((char *)a1 + 71) < 0) {
    operator delete((void *)a1[6]);
  }
  if (*((char *)a1 + 47) < 0) {
    operator delete((void *)a1[3]);
  }
  sub_100426880(a1);
  return a1;
}

void sub_101309E50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

NSDictionary *__cdecl sub_101309E5C(id a1)
{
  return (NSDictionary *)&off_1023977E8;
}

void sub_101309E6C(void *a1)
{
  sub_101309A90(a1);

  operator delete();
}

void sub_101309EA4(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = @"kCLBBTFT_Error";
  uint64_t v7 = a2;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  sub_10130DBCC("kCLConnectionMessageBBTimeFreqTransferAssertError", &v3);
  v2 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnection::sendMessage();
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_101309F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_101309FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      CFStringRef v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v7 + 23) >= 0) {
          uint64_t v8 = (const char *)v7;
        }
        else {
          uint64_t v8 = *(const char **)v7;
        }
        *(_DWORD *)buf = 68289282;
        int v14 = 0;
        __int16 v15 = 2082;
        int v16 = "";
        __int16 v17 = 2082;
        uint64_t v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning,CLBBTFTA,unrecognized message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "kCLConnectionMessageBBTimeFreqTransferAssert", 0x2CuLL)) {
    goto LABEL_7;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  uint64_t v9 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v14 = 0;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 2082;
    uint64_t v18 = "kCLConnectionMessageBBTimeFreqTransferAssert";
    __int16 v19 = 2050;
    uint64_t v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"message\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  uint64_t v10 = *(CLConnectionMessage **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  v12[0] = v10;
  v12[1] = (CLConnectionMessage *)v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10130A1D4(a1, v12);
  if (v11) {
    sub_1000DB0A0((std::__shared_weak_count *)v11);
  }
}

void sub_10130A1BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10130A1D4(uint64_t a1, CLConnectionMessage **a2)
{
  if (!sub_1007438D0())
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    CFStringRef v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      int v34 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,feature not supported\"}", buf, 0x12u);
    }
    sub_101309EA4(a1, @"Feature not supported");
    return;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_4;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_4:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      if (v30 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2082;
      int v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"assertion already taken by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_101309EA4(a1, @"Assertion already taken");
    return;
  }
  sub_100134750(buf, "com.apple.locationd.bbtimefreqtransfer_callback");
  char v7 = sub_10130AFDC(a1, (uint64_t *)buf);
  char v8 = v7;
  if ((SBYTE3(v36) & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_21;
    }
LABEL_28:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    int v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      __int16 v17 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2082;
      int v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFT,not entitled,ignoring\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_101309EA4(a1, @"missing entitlement: com.apple.locationd.bbtimefreqtransfer_callback");
    return;
  }
  operator delete(*(void **)buf);
  if ((v8 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_21:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v10 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  id v11 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
  id v12 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
  if (v11)
  {
    int v13 = v12;
    if (v12)
    {
      if (v10)
      {
        if ([v10 length])
        {
          int v14 = (const std::string::value_type *)[v10 UTF8String];
          __int16 v15 = (void *)(a1 + 24);
          std::string::assign((std::string *)(a1 + 24), v14);
          if ([v11 length])
          {
            sub_100134750(&__str, (char *)[v11 UTF8String]);
            sub_1000B7144(&__str, (uint64_t)buf);
            sub_1000A7FBC((uint64_t)buf, (uint64_t)__p);
            goto LABEL_75;
          }
          if ([v13 length])
          {
            sub_100134750(&__str, (char *)[v13 UTF8String]);
            sub_1000B6F5C(&__str, (uint64_t)buf);
            sub_1000A7FBC((uint64_t)buf, (uint64_t)__p);
LABEL_75:
            __int16 v26 = (void **)(a1 + 48);
            if (*(char *)(a1 + 71) < 0) {
              operator delete(*v26);
            }
            *(_OWORD *)__int16 v26 = *(_OWORD *)__p;
            *(void *)(a1 + 64) = v30;
            HIBYTE(v30) = 0;
            LOBYTE(__p[0]) = 0;
            sub_1000064D0((uint64_t)buf);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            sub_100681630();
          }
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_10231FDC8);
          }
          uint64_t v27 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
            if (v30 >= 0) {
              __int16 v28 = __p;
            }
            else {
              __int16 v28 = (void **)__p[0];
            }
            if (*(char *)(a1 + 47) < 0) {
              __int16 v15 = (void *)*v15;
            }
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v33 = 2082;
            int v34 = "";
            __int16 v35 = 2082;
            int v36 = v28;
            __int16 v37 = 2082;
            v38 = v15;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,no beneficiary,request denined\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
            if (SHIBYTE(v30) < 0) {
              operator delete(__p[0]);
            }
          }
          sub_101309EA4(a1, @"null beneficiary client key");
          if (*(char *)(a1 + 47) < 0)
          {
            **(unsigned char **)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0;
          }
          else
          {
            *(unsigned char *)(a1 + 24) = 0;
            *(unsigned char *)(a1 + 47) = 0;
          }
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_10231FDC8);
          }
          BOOL v24 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
            BOOL v25 = v30 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v33 = 2082;
            int v34 = "";
            __int16 v35 = 2082;
            int v36 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,empty reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (SHIBYTE(v30) < 0) {
              operator delete(__p[0]);
            }
          }
          sub_101309EA4(a1, @"empty reason");
        }
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10231FDC8);
        }
        __int16 v22 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
          double v23 = v30 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v33 = 2082;
          int v34 = "";
          __int16 v35 = 2082;
          int v36 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,missing reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }
        }
        sub_101309EA4(a1, @"missing reason");
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      uint64_t v20 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
        __int16 v21 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        int v34 = "";
        __int16 v35 = 2082;
        int v36 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,missing bundlePath,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }
      }
      sub_101309EA4(a1, @"missing bundlePath");
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    uint64_t v18 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      __int16 v19 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2082;
      int v36 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,missing bundleID,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_101309EA4(a1, @"missing bundleID");
  }
}

void sub_10130AF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10130AFDC(uint64_t a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  int v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
    if (v10 >= 0) {
      CFStringRef v6 = __p;
    }
    else {
      CFStringRef v6 = (void **)__p[0];
    }
    if (*((char *)a2 + 23) >= 0) {
      char v7 = a2;
    }
    else {
      char v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68289794;
    int v12 = 0;
    __int16 v13 = 2082;
    int v14 = "";
    __int16 v15 = 2082;
    int v16 = v6;
    __int16 v17 = 2082;
    uint64_t v18 = v7;
    __int16 v19 = 1026;
    int v20 = isEntitled;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s, \"entitled\":%{public}hhd}", buf, 0x2Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return isEntitled;
}

void sub_10130B15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231FDE8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBBTimeFreqTransferCallbackAssertion::onLocationControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231FDE8);
    }
    CFStringRef v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      int v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonBBTimeFreqTransferCallbackAssertion::onLocationControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_10130D9A8();
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_10130B2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10130B31C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231FDE8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    char v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBBTimeFreqTransferCallbackAssertion::handleMeasurementNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231FDE8);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonBBTimeFreqTransferCallbackAssertion::handleMeasurementNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 37) {
    sub_10130B9E8(a4, a3);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10130B4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10130B500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231FDE8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231FDE8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10130D248(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10130B6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_10130B6D4(id a1)
{
  return (NSDictionary *)&off_102397810;
}

uint64_t sub_10130B6E0(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) < a2)
  {
    double v4 = (double)a2 / 1000000000.0;
    sub_10130DAE0((uint64_t)v15, (double)(unint64_t)v4);
    if (cnnavigation::GPSTimeToJulianTime() || cnnavigation::JulianTimeToGregorianTime()) {
      goto LABEL_10;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    int v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290562;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 1026;
      *(_DWORD *)__int16 v21 = v9;
      *(_WORD *)&v21[4] = 1026;
      *(_DWORD *)&v21[6] = v10;
      LOWORD(v22) = 1026;
      *(_DWORD *)((char *)&v22 + 2) = v11;
      HIWORD(v22) = 1026;
      int v23 = v12;
      __int16 v24 = 1026;
      int v25 = v13;
      __int16 v26 = 2050;
      uint64_t v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,GPSUTCLeapSecond,GregorianTime\", \"year\":%{public}d, \"month\":%{public}d, \"day\":%{public}d, \"hour\":%{public}d, \"minute\":%{public}d, \"second\":\"%{public}f\"}", buf, 0x3Au);
    }
    if (cnnavigation::GregorianTimeToJulianTime() || cnnavigation::JulianTimeToGPSTime())
    {
LABEL_10:
      uint64_t result = 0;
      *(void *)(a1 + 72) = 0;
      return result;
    }
    *(void *)(a1 + 72) = (unint64_t)(((double)0 * 604800.0 + 0.0) * 1000000000.0);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    uint64_t v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2050;
      *(void *)__int16 v21 = a2;
      *(_WORD *)&v21[8] = 2050;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,GPSUTCLeapSecond,nextPotentialLeapSecUpdateTime\", \"currGpsTimeNsec\":%{public}llu, \"fPotentialLeapSecondUpdateTimeGPSNsec\":%{public}llu}", buf, 0x26u);
    }
  }
  return 1;
}

void sub_10130B9E8(uint64_t a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  double v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v47 = 2082;
    *(void *)&v47[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,kNotificationBasebandTimeFreqTransfer\"}", buf, 0x12u);
  }
  if (sub_10130C2D0(a2 + 1360) && sub_10130C334(a2 + 1352))
  {
    float v5 = *(float *)(a2 + 1372);
    float v6 = *(float *)(a2 + 1368);
    double v7 = *(double *)(a2 + 1376);
    float v8 = *(float *)(a2 + 1384);
    double v9 = *(double *)(a2 + 1392);
    goto LABEL_21;
  }
  if (sub_10073CE10())
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      BOOL v11 = (*(void *)(a2 + 1376) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(void *)(a2 + 1392) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && *(float *)(a2 + 1384) > 0.0;
      BOOL v28 = sub_10130C2D0(a2 + 1360);
      uint64_t v29 = *(void *)(a2 + 1400);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v47 = 2082;
      *(void *)&v47[2] = "";
      __int16 v48 = 1026;
      *(_DWORD *)v49 = v11;
      *(_WORD *)&v49[4] = 1026;
      *(_DWORD *)&v49[6] = v28;
      *(_WORD *)&v49[10] = 2050;
      *(void *)&v49[12] = v29;
      uint64_t v22 = "{\"msg%{public}.0s\":\"CLBBTFTA,isMav22andNewerGnss,GNSS measurements not valid\", \"SystemClockFreqValid\":"
            "%{public}hhd, \"SystemClockTimeandFreqValid\":%{public}hhd, \"GPSTimeNs\":%{public}llu}";
      int v23 = v10;
      uint32_t v24 = 40;
      goto LABEL_37;
    }
    return;
  }
  if (!sub_100119964() && (sub_10073C6AC() & 1) == 0 && !sub_10073C870())
  {
    if (!*(void *)(a2 + 1360)
      || (*(void *)(a2 + 1376) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)(a2 + 1392) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || *(float *)(a2 + 1384) <= 0.0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      uint64_t v30 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        BOOL v31 = (*(void *)(a2 + 1376) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (*(void *)(a2 + 1392) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && *(float *)(a2 + 1384) > 0.0;
        uint64_t v43 = *(void *)(a2 + 1360);
        uint64_t v44 = *(void *)(a2 + 1400);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)__int16 v47 = 2082;
        *(void *)&v47[2] = "";
        __int16 v48 = 1026;
        *(_DWORD *)v49 = v31;
        *(_WORD *)&v49[4] = 2050;
        *(void *)&v49[6] = v43;
        *(_WORD *)&v49[14] = 2050;
        *(void *)&v49[16] = v44;
        uint64_t v22 = "{\"msg%{public}.0s\":\"CLBBTFTA,GNSS measurements not valid\", \"SystemClockFreqValid\":%{public}hhd, \"Sy"
              "stemClockMsec\":%{public}llu, \"GPSTimeNs\":%{public}llu}";
        int v23 = v30;
        uint32_t v24 = 44;
        goto LABEL_37;
      }
      return;
    }
    float v5 = 1.0;
    double v7 = 0.0;
    float v6 = 0.0;
    float v8 = 0.0;
LABEL_20:
    double v9 = 0.0;
LABEL_21:
    int v12 = sub_10130C388(a1, a2 + 1352);
    int v13 = *(unsigned __int8 *)(a1 + 168);
    long long v14 = *(_OWORD *)(a2 + 1368);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 1352);
    *(_OWORD *)(a1 + 96) = v14;
    long long v16 = *(_OWORD *)(a2 + 1400);
    long long v15 = *(_OWORD *)(a2 + 1416);
    long long v17 = *(_OWORD *)(a2 + 1384);
    *(void *)(a1 + 160) = *(void *)(a2 + 1432);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 144) = v15;
    *(_OWORD *)(a1 + 112) = v17;
    if (v13)
    {
      if (!v12) {
        return;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 168) = 1;
      if (!v12) {
        return;
      }
    }
    id v25 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v26 = sub_1004BA69C();
    if (*(__int16 *)(a2 + 1416) != -32768)
    {
      int v27 = *(unsigned __int8 *)(a2 + 1418);
      if (*(void *)(a2 + 1424))
      {
        if ((v27 != 2) != (*(__int16 *)(a2 + 1432) != -32768)) {
          goto LABEL_32;
        }
      }
      else if (v27 != 2)
      {
LABEL_32:
        [v25 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(__int16 *)(a2 + 1416)) forKeyedSubscript:@"kCLBBTFT_currentGpsUtcLeapSecond"];
        if (*(unsigned char *)(a2 + 1418) == 2)
        {
          if (*(void *)(a2 + 1424) >= *(void *)(a2 + 1400))
          {
            [v25 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(__int16 *)(a2 + 1432))] forKeyedSubscript:@"kCLBBTFT_upcomingGpsUtcLeapSecond"];
            [v25 setObject:+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)(a2 + 1424) - *(void *)(a2 + 1400)) forKeyedSubscript:@"kCLBBTFT_upcomingGpsUtcLeapSeconUpdateDeltaTimeGPSNsec"];
          }
        }
        else if (!*(unsigned char *)(a2 + 1418) {
               && *(float *)(a2 + 1408) < 1000000.0
        }
               && sub_10130B6E0(a1, *(void *)(a2 + 1400)))
        {
          unint64_t v41 = *(void *)(a1 + 72) - *(void *)(a2 + 1400);
          if (v41 <= 0x773593FF) {
            unint64_t v42 = *(void *)(a1 + 72) - *(void *)(a2 + 1400);
          }
          else {
            unint64_t v42 = (unint64_t)((double)v41 + -2000000000.0);
          }
          [v25 setObject:[+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v42)] forKeyedSubscript:@"kCLBBTFT_possibleGpsUtcLeapSeconUpdateDeltaTimeGPSNsec"];
        }
        goto LABEL_51;
      }
    }
    [v25 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v26) forKeyedSubscript:@"kCLBBTFT_currentGpsUtcLeapSecond"];
LABEL_51:
    v65[0] = &off_1023982A8;
    v64[0] = @"kCLBBTFT_messageVersion";
    v64[1] = @"kCLBBTFT_timestamp";
    v65[1] = +[NSNumber numberWithDouble:*(double *)(a2 + 1352)];
    v64[2] = @"kCLBBTFT_systemRTCMsec";
    v65[2] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 1360)];
    v64[3] = @"kCLBBTFT_systemRTCSubMsec";
    *(float *)&double v32 = v6;
    v65[3] = +[NSNumber numberWithFloat:v32];
    v64[4] = @"kCLBBTFT_systemRTCUncertaintyMsec";
    *(float *)&double v33 = v5;
    v65[4] = +[NSNumber numberWithFloat:v33];
    v64[5] = @"kCLBBTFT_GPSTimeNsec";
    v65[5] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 1400)];
    v64[6] = @"kCLBBTFT_GPSTimeUncertaintyNsec";
    LODWORD(v34) = *(_DWORD *)(a2 + 1408);
    v65[6] = +[NSNumber numberWithFloat:v34];
    v64[7] = @"kCLBBTFT_clockOffsetPPB";
    v65[7] = +[NSNumber numberWithDouble:v7];
    v64[8] = @"kCLBBTFT_clockOffsetUncertaintyPPB";
    *(float *)&double v35 = v8;
    v65[8] = +[NSNumber numberWithFloat:v35];
    v64[9] = @"kCLBBTFT_clockOffsetThermalCorrectionPPB";
    v65[9] = +[NSNumber numberWithDouble:v9];
    v64[10] = @"kCLBBTFT_gpsUtcLeapSecondDictionary";
    v65[10] = v25;
    +[NSDictionary dictionaryWithObjects:v65 forKeys:v64 count:11];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    int v36 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *(void *)(a2 + 1352);
      uint64_t v38 = *(void *)(a2 + 1360);
      uint64_t v39 = *(void *)(a2 + 1400);
      double v40 = *(float *)(a2 + 1408);
      *(_DWORD *)buf = 68291586;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v47 = 2082;
      *(void *)&v47[2] = "";
      __int16 v48 = 2050;
      *(void *)v49 = 0x3FF0000000000000;
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v37;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v38;
      __int16 v50 = 2050;
      double v51 = v6;
      __int16 v52 = 2050;
      double v53 = v5;
      __int16 v54 = 2050;
      uint64_t v55 = v39;
      __int16 v56 = 2050;
      double v57 = v40;
      __int16 v58 = 2050;
      double v59 = v7;
      __int16 v60 = 2050;
      double v61 = v8;
      __int16 v62 = 2050;
      double v63 = v9;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"kCLBBTFT_messageVersion\":\"%{public}.1f\", \"kCLBBTFT_timestamp\":\"%{public}f\", \"kCLBBTFT_systemRTCMsec\":%{public}llu, \"kCLBBTFT_systemRTCSubMsec\":\"%{public}f\", \"kCLBBTFT_systemRTCUncertaintyMsec\":\"%{public}f\", \"kCLBBTFT_GPSTimeNsec\":%{public}llu, \"kCLBBTFT_GPSTimeUncertaintyNsec\":\"%{public}f\", \"kCLBBTFT_clockOffsetPPB\":\"%{public}f\", \"kCLBBTFT_clockOffsetUncertaintyPPB\":\"%{public}f\", \"kCLBBTFT_clockOffsetThermalCorrectionPPB\":\"%{public}f\"}", buf, 0x76u);
    }
    sub_10130DBCC("kCLConnectionMessageBBTimeFreqTransferMeasurement", buf);
    __int16 v45 = *(std::__shared_weak_count **)v47;
    if (*(void *)v47) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v47 + 8), 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v45) {
      sub_1000DB0A0(v45);
    }
    if (*(void *)v47) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v47);
    }
    return;
  }
  if (sub_10130C334(a2 + 1352))
  {
    float v5 = *(float *)(a2 + 1372);
    float v6 = *(float *)(a2 + 1368);
    float v8 = 0.0;
    double v7 = 0.0;
    goto LABEL_20;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  uint64_t v18 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *(void *)(a2 + 1352);
    uint64_t v20 = *(void *)(a2 + 1360);
    uint64_t v21 = *(void *)(a2 + 1400);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v47 = 2082;
    *(void *)&v47[2] = "";
    __int16 v48 = 2050;
    *(void *)v49 = v19;
    *(_WORD *)&v49[8] = 2050;
    *(void *)&v49[10] = v20;
    *(_WORD *)&v49[18] = 2050;
    *(void *)&v49[20] = v21;
    uint64_t v22 = "{\"msg%{public}.0s\":\"CLBBTFTA,GNSS measurements not valid\", \"ReceiptMachContinuousSec\":\"%{public}f\", \""
          "SystemClockMsec\":%{public}llu, \"GPSTimeNs\":%{public}llu}";
    int v23 = v18;
    uint32_t v24 = 48;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v22, buf, v24);
  }
}

void sub_10130C2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10130C2D0(uint64_t a1)
{
  if (*(void *)a1
    && ((float v1 = *(float *)(a1 + 8), v1 >= 0.0) ? (v2 = v1 < 1.0) : (v2 = 0),
        v2
     && *(float *)(a1 + 12) > 0.0
     && (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
     && (*(void *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL))
  {
    return *(float *)(a1 + 24) > 0.0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_10130C334(uint64_t a1)
{
  if (*(void *)(a1 + 8)
    && ((float v1 = *(float *)(a1 + 16), v1 >= 0.0) ? (v2 = v1 < 1.0) : (v2 = 0),
        v2 && *(float *)(a1 + 20) > 0.0 && *(void *)(a1 + 48) && *(float *)(a1 + 56) > 0.0))
  {
    return *(double *)a1 > 0.0;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10130C388(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 168))
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 && ((float v5 = *(float *)(a2 + 16), v5 >= 0.0) ? (v6 = v5 < 1.0) : (v6 = 0), v6))
    {
      double v16 = v5;
      if (*(float *)(a2 + 20) <= 0.0) {
        double v7 = 0.0;
      }
      else {
        double v7 = v16;
      }
    }
    else
    {
      double v7 = 0.0;
    }
    unint64_t v17 = *(void *)(a1 + 88);
    double v77 = 0.0;
    double v18 = 0.0;
    if (v17)
    {
      float v19 = *(float *)(a1 + 96);
      if (v19 >= 0.0 && v19 < 1.0)
      {
        double v21 = v19;
        if (*(float *)(a1 + 100) > 0.0) {
          double v18 = v21;
        }
        else {
          double v18 = 0.0;
        }
      }
    }
    double v22 = *(double *)(a2 + 24);
    if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      if (*(float *)(a2 + 32) <= 0.0) {
        double v22 = 0.0;
      }
      double v77 = v22;
    }
    double v23 = 0.0;
    if ((*(void *)(a1 + 104) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a1 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      if (*(float *)(a1 + 112) > 0.0) {
        double v23 = *(double *)(a1 + 104);
      }
      else {
        double v23 = 0.0;
      }
    }
    BOOL v24 = *(float *)(a2 + 56) * 0.000000001 < 0.00001 && *(float *)(a1 + 136) * 0.000000001 < 0.00001;
    unint64_t v25 = *(void *)(a1 + 128);
    double v26 = *(double *)a2;
    double v27 = *(double *)(a1 + 80);
    unint64_t v28 = *(void *)(a2 + 48);
    sub_1000C7F88(buf);
    v86.__r_.__value_.__s.__data_[0] = 0;
    int v29 = sub_1000D2988(*(uint64_t *)buf, "BBTFTAIgnoreGpsFixCheck", (BOOL *)&v86);
    double v30 = v26 - v27;
    double v31 = (double)v28 * 0.000000001;
    double v32 = (v18 + (double)v17) * 0.001 - (double)v25 * 0.000000001 + v30 * v23 * 0.000000001;
    double v33 = (v7 + (double)v4) * 0.001 - v31;
    double v34 = fabs(v77);
    double v35 = fabs((v77 - v23) / v30);
    double v36 = vabdd_f64(v32, v33);
    if (v86.__r_.__value_.__s.__data_[0]) {
      int v37 = v29;
    }
    else {
      int v37 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    double v76 = v36;
    BOOL v38 = v36 < 0.0003;
    double v39 = sub_10016C458();
    double v40 = *(double *)(a1 + 176);
    BOOL v41 = sub_10130CCD8(a1);
    BOOL v42 = v41;
    double v43 = v39 - v40;
    int v44 = v24 & ~(v34 < 100000.0 && v35 < 50000.0 && v38) & (v30 <= 60.0);
    if (v43 < 5.0) {
      int v45 = 1;
    }
    else {
      int v45 = v37;
    }
    if (v30 > 60.0) {
      int v45 = 0;
    }
    unsigned int v46 = v45 & !v41;
    if (v38 && v35 < 50000.0 && v24) {
      uint64_t v9 = v46;
    }
    else {
      uint64_t v9 = 0;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    __int16 v47 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v48 = (*(void *)(a2 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(void *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && *(float *)(a2 + 32) > 0.0;
      if (!*(unsigned char *)(a1 + 168)) {
        sub_10020D700();
      }
      v49 = *(const char **)(a2 + 8);
      double v50 = *(float *)(a2 + 16);
      double v51 = *(float *)(a2 + 20);
      double v52 = *(double *)(a2 + 48);
      BOOL v53 = (*(void *)(a1 + 104) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(void *)(a1 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && *(float *)(a1 + 112) > 0.0;
      float v54 = *(float *)(a2 + 56);
      uint64_t v55 = *(void *)(a1 + 176);
      *(_DWORD *)buf = 68295426;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v56 = "reject measurement";
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = 0x3FF0000000000000;
      double v57 = v54;
      v90 = "status";
      __int16 v89 = 2082;
      if (v9) {
        __int16 v56 = "accept measurement";
      }
      __int16 v91 = 2050;
      v92 = v49;
      __int16 v93 = 2050;
      double v94 = v50;
      __int16 v95 = 2050;
      double v96 = v51;
      __int16 v97 = 2050;
      double v98 = v52;
      __int16 v99 = 1026;
      *(_DWORD *)v100 = v48;
      *(_WORD *)&v100[4] = 2050;
      *(double *)&v100[6] = v77;
      *(_WORD *)&v100[14] = 1026;
      *(_DWORD *)&v100[16] = v34 < 100000.0;
      *(_WORD *)v101 = 2050;
      *(double *)&v101[2] = v30;
      LOWORD(v102) = 1026;
      *(_DWORD *)((char *)&v102 + 2) = v30 <= 60.0;
      HIWORD(v102) = 1026;
      BOOL v103 = v53;
      __int16 v104 = 2050;
      double v105 = v23;
      __int16 v106 = 1026;
      BOOL v107 = v35 < 50000.0;
      __int16 v108 = 2050;
      double v109 = v32;
      __int16 v110 = 2050;
      double v111 = v33;
      __int16 v112 = 2050;
      double v113 = v32 - v33;
      __int16 v114 = 1026;
      BOOL v115 = v76 < 0.0003;
      __int16 v116 = 2050;
      double v117 = v57;
      __int16 v118 = 1026;
      BOOL v119 = v24;
      __int16 v120 = 2050;
      uint64_t v121 = v55;
      __int16 v122 = 1026;
      BOOL v123 = v43 < 5.0;
      __int16 v124 = 1026;
      int v125 = v37;
      __int16 v126 = 1026;
      BOOL v127 = v42;
      __int16 v128 = 2082;
      v129 = v56;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"kCLBBTFT_messageVersion\":\"%{public}.1f\", \"consistencyCheckForCurrentMeasurement\":%{public, location:escape_only}s, \"kCLBBTFT_systemRTCMsec\":%{public}llu, \"kCLBBTFT_systemRTCSubMsec\":\"%{public}f\", \"kCLBBTFT_systemRTCUncertaintyMsec\":\"%{public}f\", \"kCLBBTFT_GPSTimeNsec\":%{public}llu, \"meas.isFrequencyDriftValid\":%{public}hhd, \"meas.mSystemClockDriftPpb\":\"%{public}.1f\", \"isMaxClockDriftOK\":%{public}hhd, \"timeSinceLastMeasurement_sec\":\"%{public}.3f\", \"isAgeOfLastMeasurementOK\":%{public}hhd, \"prev.isFrequencyDriftValid\":%{public}hhd, \"prev.mSystemClockDriftPpb\":\"%{public}.1f\", \"isClockDriftChangeOK\":%{public}hhd, \"predictedRtcMinusGps_sec\":\"%{public}.9f\", \"measuredRtcMinusGps_sec\":\"%{public}.9f\", \"rtcMinusGPS_predMinusMeas_sec\":\"%{public}.9f\", \"isPredictionErrorOK\":%{public}hhd, \"mGPSTimeUncertainityNs\":\"%{public}.3f\", \"isGpsUncAcceptable\":%{public}hhd, \"fMCTOfLastGpsFixReceived_s\":\"%{public}.3f\", \"areGpsFixesAvailable\":%{public}hhd, \"isBBTFTAIgnoreGpsFixCheck\":%{public}hhd, \"blockPreciseTTDueToSpeed\":%{public}hhd, \"result\":%{public, location:escape_only}s}", buf, 0xE4u);
    }
    if (v44)
    {
      strcpy(v87, "timemark");
      sub_100134750(&v84, "");
      if (v34 >= 100000.0) {
        __int16 v58 = "large-clock-drift ";
      }
      else {
        __int16 v58 = "";
      }
      sub_100134750(v82, v58);
      if ((v83 & 0x80u) == 0) {
        double v59 = v82;
      }
      else {
        double v59 = (void **)v82[0];
      }
      if ((v83 & 0x80u) == 0) {
        std::string::size_type v60 = v83;
      }
      else {
        std::string::size_type v60 = (std::string::size_type)v82[1];
      }
      double v61 = std::string::append(&v84, (const std::string::value_type *)v59, v60);
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if (v35 >= 50000.0) {
        double v63 = "large-clock-drift-change ";
      }
      else {
        double v63 = "";
      }
      sub_100134750(v80, v63);
      if ((v81 & 0x80u) == 0) {
        v64 = v80;
      }
      else {
        v64 = (void **)v80[0];
      }
      if ((v81 & 0x80u) == 0) {
        std::string::size_type v65 = v81;
      }
      else {
        std::string::size_type v65 = (std::string::size_type)v80[1];
      }
      v66 = std::string::append(&v85, (const std::string::value_type *)v64, v65);
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (v76 >= 0.0003) {
        v68 = "large-RTC-To-GPS-change ";
      }
      else {
        v68 = "";
      }
      sub_100134750(__p, v68);
      if ((v79 & 0x80u) == 0) {
        v69 = __p;
      }
      else {
        v69 = (void **)__p[0];
      }
      if ((v79 & 0x80u) == 0) {
        std::string::size_type v70 = v79;
      }
      else {
        std::string::size_type v70 = (std::string::size_type)__p[1];
      }
      v71 = std::string::append(&v86, (const std::string::value_type *)v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = *((void *)&v71->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      if ((char)v79 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if ((char)v81 < 0) {
        operator delete(v80[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v83 < 0) {
        operator delete(v82[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      id v73 = [[objc_msgSend(*(id *)(a1 + 16), "silo", v32 - v33) queue];
      if (buf[23] >= 0) {
        v74 = buf;
      }
      else {
        v74 = *(unsigned char **)buf;
      }
      sub_10187A1C8((uint64_t)v73, (uint64_t)v87, (uint64_t)v74, 1);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    float v8 = qword_102419528;
    uint64_t v9 = 0;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(double *)a2;
      double v11 = *(double *)(a2 + 8);
      double v12 = *(float *)(a2 + 16);
      double v13 = *(float *)(a2 + 20);
      uint64_t v14 = *(void *)(a2 + 48);
      double v15 = *(float *)(a2 + 56);
      *(_DWORD *)buf = 68291586;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = 0x3FF0000000000000;
      __int16 v89 = 2082;
      v90 = "fail";
      __int16 v91 = 2082;
      v92 = "no previous measurement";
      __int16 v93 = 2050;
      double v94 = v10;
      __int16 v95 = 2050;
      double v96 = v11;
      __int16 v97 = 2050;
      double v98 = v12;
      __int16 v99 = 2050;
      *(double *)v100 = v13;
      *(_WORD *)&v100[8] = 2050;
      *(void *)&v100[10] = v14;
      *(_WORD *)&v100[18] = 2050;
      *(double *)v101 = v15;
      *(_WORD *)&v101[8] = 2082;
      v102 = "reject measurement";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"kCLBBTFT_messageVersion\":\"%{public}.1f\", \"consistencyCheckForCurrentMeasurement\":%{public, location:escape_only}s, \"cause\":%{public, location:escape_only}s, \"kCLBBTFT_timestamp\":\"%{public}f\", \"kCLBBTFT_systemRTCMsec\":%{public}llu, \"kCLBBTFT_systemRTCSubMsec\":\"%{public}f\", \"kCLBBTFT_systemRTCUncertaintyMsec\":\"%{public}f\", \"kCLBBTFT_GPSTimeNsec\":%{public}llu, \"kCLBBTFT_GPSTimeUncertaintyNsec\":\"%{public}f\", \"result\":%{public, location:escape_only}s}", buf, 0x76u);
      return 0;
    }
  }
  return v9;
}

void sub_10130CC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10130CCD8(uint64_t a1)
{
  double v2 = *(double *)(a1 + 200);
  double v3 = sub_10016C458();
  double v4 = *(double *)(a1 + 176);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  double v5 = v3 - v4;
  BOOL v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 208);
    uint64_t v8 = *(void *)(a1 + 216);
    uint64_t v9 = *(void *)(a1 + 224);
    uint64_t v11 = *(void *)(a1 + 184);
    uint64_t v10 = *(void *)(a1 + 192);
    int v22 = 68290818;
    int v23 = 0;
    __int16 v24 = 2082;
    unint64_t v25 = "";
    __int16 v26 = 2050;
    uint64_t v27 = v7;
    __int16 v28 = 2050;
    uint64_t v29 = v8;
    __int16 v30 = 2050;
    uint64_t v31 = v9;
    __int16 v32 = 2050;
    uint64_t v33 = v10;
    __int16 v34 = 2050;
    uint64_t v35 = v11;
    __int16 v36 = 2050;
    double v37 = v2;
    __int16 v38 = 2050;
    double v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed\", \"fMaxAllowedSpeedForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedSpeedUncForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedAgeOfLocationForSpeedCheckDuringTT_s\":\"%{public}.3f\", \"curSpeed\":\"%{public}.3f\", \"curSpeedUnc\":\"%{public}.3f\", \"ageOfLastLocation\":\"%{public}.3f\", \"timeSinceLastLocation\":\"%{public}.3f\"}", (uint8_t *)&v22, 0x58u);
  }
  double v12 = *(double *)(a1 + 224);
  if (v2 <= v12 && v5 <= v12)
  {
    double v18 = *(double *)(a1 + 184);
    if (v18 > 0.0 && v18 <= *(double *)(a1 + 216))
    {
      double v20 = *(double *)(a1 + 192);
      if (v20 >= 0.0) {
        return v20 + v18 * -2.0 >= *(double *)(a1 + 208);
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      uint64_t v14 = qword_102419528;
      BOOL v21 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (v21)
      {
        int v22 = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        unint64_t v25 = "";
        unint64_t v17 = "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed,invalid speed\"}";
        goto LABEL_19;
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      uint64_t v14 = qword_102419528;
      BOOL v19 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (v19)
      {
        int v22 = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        unint64_t v25 = "";
        unint64_t v17 = "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed,invalid speed accuracy\"}";
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    uint64_t v14 = qword_102419528;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v15)
    {
      int v22 = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      unint64_t v25 = "";
      unint64_t v17 = "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed,location is not latest\"}";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v22, 0x12u);
      return 0;
    }
  }
  return result;
}

BOOL sub_10130CFF0(float a1, float a2, uint64_t a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  float v7 = *(float *)(a6 + 8);
  float v8 = *(float *)(a6 + 12);
  if (v7 == 0.0 && v8 == 0.0) {
    return 0;
  }
  BOOL v10 = v7 < 0.0 || v7 > 90.0;
  if (v10 || (v8 >= 0.0 ? (BOOL v11 = v8 > 360.0) : (BOOL v11 = 1), v11))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    BOOL v15 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      double v16 = *(float *)(a6 + 8);
      double v17 = *(float *)(a6 + 12);
      *(_DWORD *)buf = 134349312;
      double v20 = v16;
      __int16 v21 = 2050;
      double v22 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLBBTFTA,heatmap,invalid az/el,%{public}f,%{public}f", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231FDC8);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonBBTimeFreqTransferCallbackAssertion::svHeatMapBucketIndices(unsigned int &, unsigned int &, const float, const float, const CLClientSatelliteInfo &) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 0;
    }
  }
  else
  {
    int v12 = vcvtps_s32_f32(v8 / a1);
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = vcvtps_s32_f32(v7 / a2);
    *a4 = v12 - 1;
    if (v13 <= 1) {
      int v14 = 1;
    }
    else {
      int v14 = v13;
    }
    *a5 = v14 - 1;
    return 1;
  }
  return result;
}

void sub_10130D248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  BOOL v6 = v5;
  uint64_t v36 = a4;
  float v7 = *(uint64_t **)(a4 + 680);
  double v8 = 0.0;
  if (!v7 || (v10 = *v7, uint64_t v9 = v7[1], *v7 == v9))
  {
    int v11 = 0;
    int v12 = 0;
    goto LABEL_41;
  }
  int v11 = 0;
  int v12 = 0;
  do
  {
    if (*(_DWORD *)v10 != 5)
    {
      if (*(unsigned char *)(v10 + 24))
      {
        float v13 = *(float *)(v10 + 16);
        if (v13 < *(float *)(v10 + 20)) {
          float v13 = *(float *)(v10 + 20);
        }
        unsigned int v14 = v13 <= 18.0 ? 1 : 2;
        BOOL v15 = v13 <= 25.0 && *(unsigned char *)(v10 + 25) == 0;
        uint64_t v16 = v15 ? v14 : 3;
        int v17 = v12 + 1;
      }
      else
      {
        uint64_t v16 = 0;
        int v17 = v12;
      }
      if (*(float *)(v10 + 8) > 15.0)
      {
        int v12 = v17;
        ++v11;
      }
      unsigned int buf = 0;
      *(_DWORD *)BOOL v41 = 0;
      LODWORD(v5) = sub_10130CFF0(15.0, 15.0, (uint64_t)v5, v41, &buf, v10);
      if (v5)
      {
        uint64_t v18 = buf;
        if (!objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", buf))|| (id v19 = objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)), v20 = *(unsigned int *)v41, !objc_msgSend(v19, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)v41))))
        {
          if (![v6 objectForKeyedSubscript:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18) number]])[v6 setObject:[objc_alloc_init((Class)NSMutableDictionary)] forKeyedSubscript:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18) number]]; {
          __int16 v21 = +[NSNumber numberWithUnsignedInt:v16];
          }
          id v22 = [v6 objectForKeyedSubscript:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)];
          uint64_t v23 = *(unsigned int *)v41;
          goto LABEL_36;
        }
        id v5 = [[[objc_msgSend(objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20))) shortValue];
        if (v5 == 2)
        {
          if (v16 == 3) {
            goto LABEL_35;
          }
        }
        else
        {
          if (v5 == 1)
          {
            if ((v16 & 2) != 2) {
              goto LABEL_37;
            }
LABEL_35:
            __int16 v21 = +[NSNumber numberWithUnsignedInt:v16];
            id v22 = [v6 objectForKeyedSubscript:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)];
            uint64_t v23 = v20;
LABEL_36:
            id v5 = [v22 setObject:v21 forKeyedSubscript:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v23)];
            goto LABEL_37;
          }
          if (!v5 && v16) {
            goto LABEL_35;
          }
        }
      }
    }
LABEL_37:
    v10 += 28;
  }
  while (v10 != v9);
  if (v11 >= 1) {
    double v8 = (float)((float)((float)v12 * 100.0) / (float)v11);
  }
LABEL_41:
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  __int16 v24 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int buf = 134349568;
    *(double *)buf_4 = v8;
    *(_WORD *)&buf_4[8] = 1026;
    *(_DWORD *)&buf_4[10] = v12;
    *(_WORD *)&buf_4[14] = 1026;
    *(_DWORD *)&buf_4[16] = v11;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLBBTFTA,heatmap,GNSS availability percentage,%{public}.1f,trackCountAboveMask,%{public}d,opportunitiesAboveMask,%{public}d", (uint8_t *)&buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231FDC8);
    }
    *(_DWORD *)BOOL v41 = 134349568;
    *(double *)&v41[4] = v8;
    __int16 v42 = 1026;
    *(_DWORD *)double v43 = v12;
    *(_WORD *)&v43[4] = 1026;
    *(_DWORD *)&v43[6] = v11;
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v30);
    if (v30 != (char *)&buf) {
      free(v30);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231FE08);
  }
  unint64_t v25 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v26 = *(void *)(v36 + 4);
    uint64_t v27 = *(void *)(v36 + 12);
    uint64_t v28 = *(void *)(v36 + 20);
    uint64_t v29 = *(void *)(v36 + 184);
    unsigned int buf = 134284289;
    *(void *)buf_4 = v26;
    *(_WORD *)&buf_4[8] = 2049;
    *(void *)&buf_4[10] = v27;
    *(_WORD *)&buf_4[18] = 2050;
    uint64_t v49 = v28;
    __int16 v50 = 2050;
    uint64_t v51 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "CLBBTFTA,latitude,%{private}.3lf,longitude,%{private}.3lf,horAccuracy,%{public}.3lf,timestamp,%{public}.3lf", (uint8_t *)&buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231FE08);
    }
    uint64_t v31 = *(void *)(v36 + 4);
    uint64_t v32 = *(void *)(v36 + 12);
    uint64_t v33 = *(void *)(v36 + 20);
    uint64_t v34 = *(void *)(v36 + 184);
    *(_DWORD *)BOOL v41 = 134284289;
    *(void *)&v41[4] = v31;
    __int16 v42 = 2049;
    *(void *)double v43 = v32;
    *(_WORD *)&v43[8] = 2050;
    uint64_t v44 = v33;
    __int16 v45 = 2050;
    uint64_t v46 = v34;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v35);
    if (v35 != (char *)&buf) {
      free(v35);
    }
  }
  *(double *)(a1 + 176) = sub_10016C458();
  *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(v36 + 44), *(int8x16_t *)(v36 + 44), 8uLL);
  *(double *)(a1 + 200) = sub_100BCE3BC(v36);
  v39[0] = @"kCLGnssHeatMap_timestamp";
  v40[0] = +[NSNumber numberWithDouble:*(double *)(v36 + 504)];
  v40[1] = &off_1023980B8;
  v39[1] = @"kCLGnssHeatMap_elevationBuckets";
  v39[2] = @"kCLGnssHeatMap_numAzimuthBuckets";
  v39[3] = @"kCLGnssHeatMap_data";
  v40[2] = &off_1023945B0;
  v40[3] = v6;
  *(void *)BOOL v41 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:4];
  sub_10130DC30("kCLConnectionMessageGNSSHeatMap", &buf);
  __int16 v38 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(void *)&buf_4[4]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf_4[4] + 8), 1uLL, memory_order_relaxed);
  }
  CLConnection::sendMessage();
  if (v38) {
    sub_1000DB0A0(v38);
  }
  if (*(void *)&buf_4[4]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf_4[4]);
  }
}

void sub_10130D97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  if (a32) {
    sub_1000DB0A0(a32);
  }
  _Unwind_Resume(exception_object);
}

void sub_10130D9A8()
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10231FDC8);
  }
  v0 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    __int16 v2 = 2082;
    double v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,Warning,unexpected onLocationControllerNotification\"}", (uint8_t *)v1, 0x12u);
  }
}

void sub_10130DA80(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10130DAB0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10130DAE0(uint64_t a1, double a2)
{
  if ((*(uint64_t *)&a2 <= -1 || ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&a2 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    cnprint::CNPrinter::Print();
  }
  int v7 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)a1 = v7;
  *(double *)(a1 + 8) = a2 + (double)v7 * -604800.0;
  return a1;
}

void sub_10130DB9C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_10130DBCC@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130DC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10130DC30@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10130DC80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10130E040(uint64_t a1)
{
  __int16 v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_10130E070(uint64_t a1)
{
  __int16 v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_10130E0A0(uint64_t a1)
{
  __int16 v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_10130E0D0@<X0>(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486FC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486FC0))
  {
    uint64_t v7 = qword_10248BEA8;
    double v8 = (std::__shared_weak_count *)unk_10248BEB0;
    if (unk_10248BEB0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BEB0 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = qword_10248C868;
    BOOL v6 = (std::__shared_weak_count *)unk_10248C870;
    if (unk_10248C870) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C870 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100F074F0((uint64_t)&qword_102486F78, &v7, &v5);
    if (v6) {
      sub_1000DB0A0(v6);
    }
    if (v8) {
      sub_1000DB0A0(v8);
    }
    __cxa_atexit((void (*)(void *))sub_10130E280, &qword_102486F78, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486FC0);
  }
  if (qword_102486FC8 != -1) {
    dispatch_once(&qword_102486FC8, &stru_10231FE28);
  }
  uint64_t v2 = unk_102486F80;
  *a1 = qword_102486F78;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = unk_102486F90;
  a1[2] = qword_102486F88;
  a1[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_101312B74((uint64_t)(a1 + 4), (uint64_t)&unk_102486F98);
}

void sub_10130E240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101AAE488(v10);
  _Unwind_Resume(a1);
}

void sub_10130E284(id a1)
{
  __chkstk_darwin(a1);
  uint64_t v519 = qword_10248BEC8;
  v520 = (std::__shared_weak_count *)unk_10248BED0;
  if (unk_10248BED0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BED0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v517 = qword_10248C8D8;
  v518 = (std::__shared_weak_count *)unk_10248C8E0;
  if (unk_10248C8E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C8E0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v519, &v517);
  if (v518) {
    sub_1000DB0A0(v518);
  }
  if (v520) {
    sub_1000DB0A0(v520);
  }
  uint64_t v515 = qword_10248BED8;
  v516 = (std::__shared_weak_count *)unk_10248BEE0;
  if (unk_10248BEE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BEE0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v513 = qword_10248C8E8;
  v514 = (std::__shared_weak_count *)unk_10248C8F0;
  if (unk_10248C8F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C8F0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v515, &v513);
  if (v514) {
    sub_1000DB0A0(v514);
  }
  if (v516) {
    sub_1000DB0A0(v516);
  }
  uint64_t v511 = qword_10248BEE8;
  v512 = (std::__shared_weak_count *)unk_10248BEF0;
  if (unk_10248BEF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BEF0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v509 = qword_10248C8F8;
  v510 = (std::__shared_weak_count *)unk_10248C900;
  if (unk_10248C900) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C900 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v511, &v509);
  if (v510) {
    sub_1000DB0A0(v510);
  }
  if (v512) {
    sub_1000DB0A0(v512);
  }
  uint64_t v507 = qword_10248BEF8;
  v508 = (std::__shared_weak_count *)unk_10248BF00;
  if (unk_10248BF00) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF00 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v505 = qword_10248C908;
  v506 = (std::__shared_weak_count *)unk_10248C910;
  if (unk_10248C910) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C910 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v507, &v505);
  if (v506) {
    sub_1000DB0A0(v506);
  }
  if (v508) {
    sub_1000DB0A0(v508);
  }
  uint64_t v503 = qword_10248BF18;
  v504 = (std::__shared_weak_count *)unk_10248BF20;
  if (unk_10248BF20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v501 = qword_10248C888;
  v502 = (std::__shared_weak_count *)unk_10248C890;
  if (unk_10248C890) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C890 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v503, &v501);
  if (v502) {
    sub_1000DB0A0(v502);
  }
  if (v504) {
    sub_1000DB0A0(v504);
  }
  uint64_t v499 = qword_10248BF28;
  v500 = (std::__shared_weak_count *)unk_10248BF30;
  if (unk_10248BF30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF30 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v497 = qword_10248C898;
  v498 = (std::__shared_weak_count *)unk_10248C8A0;
  if (unk_10248C8A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C8A0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v499, &v497);
  if (v498) {
    sub_1000DB0A0(v498);
  }
  if (v500) {
    sub_1000DB0A0(v500);
  }
  uint64_t v495 = qword_10248BF38;
  v496 = (std::__shared_weak_count *)unk_10248BF40;
  if (unk_10248BF40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF40 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v493 = qword_10248C8A8;
  v494 = (std::__shared_weak_count *)unk_10248C8B0;
  if (unk_10248C8B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C8B0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v495, &v493);
  if (v494) {
    sub_1000DB0A0(v494);
  }
  if (v496) {
    sub_1000DB0A0(v496);
  }
  uint64_t v491 = qword_10248BF48;
  v492 = (std::__shared_weak_count *)unk_10248BF50;
  if (unk_10248BF50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF50 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v489 = qword_10248C8B8;
  v490 = (std::__shared_weak_count *)unk_10248C8C0;
  if (unk_10248C8C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C8C0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v491, &v489);
  if (v490) {
    sub_1000DB0A0(v490);
  }
  if (v492) {
    sub_1000DB0A0(v492);
  }
  uint64_t v487 = qword_10248BF58;
  v488 = (std::__shared_weak_count *)unk_10248BF60;
  if (unk_10248BF60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF60 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v485 = qword_10248C938;
  v486 = (std::__shared_weak_count *)unk_10248C940;
  if (unk_10248C940) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C940 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v487, &v485);
  if (v486) {
    sub_1000DB0A0(v486);
  }
  if (v488) {
    sub_1000DB0A0(v488);
  }
  uint64_t v483 = qword_10248BF68;
  v484 = (std::__shared_weak_count *)unk_10248BF70;
  if (unk_10248BF70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF70 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v481 = qword_10248C948;
  v482 = (std::__shared_weak_count *)unk_10248C950;
  if (unk_10248C950) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C950 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v483, &v481);
  if (v482) {
    sub_1000DB0A0(v482);
  }
  if (v484) {
    sub_1000DB0A0(v484);
  }
  uint64_t v479 = qword_10248BF88;
  v480 = (std::__shared_weak_count *)unk_10248BF90;
  if (unk_10248BF90) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BF90 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v477 = qword_10248C968;
  v478 = (std::__shared_weak_count *)unk_10248C970;
  if (unk_10248C970) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C970 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v479, &v477);
  if (v478) {
    sub_1000DB0A0(v478);
  }
  if (v480) {
    sub_1000DB0A0(v480);
  }
  uint64_t v475 = qword_10248BF98;
  v476 = (std::__shared_weak_count *)unk_10248BFA0;
  if (unk_10248BFA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BFA0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v473 = qword_10248C978;
  v474 = (std::__shared_weak_count *)unk_10248C980;
  if (unk_10248C980) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C980 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v475, &v473);
  if (v474) {
    sub_1000DB0A0(v474);
  }
  if (v476) {
    sub_1000DB0A0(v476);
  }
  uint64_t v471 = qword_10248BFA8;
  v472 = (std::__shared_weak_count *)unk_10248BFB0;
  if (unk_10248BFB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BFB0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v469 = qword_10248C988;
  v470 = (std::__shared_weak_count *)unk_10248C990;
  if (unk_10248C990) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C990 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v471, &v469);
  if (v470) {
    sub_1000DB0A0(v470);
  }
  if (v472) {
    sub_1000DB0A0(v472);
  }
  uint64_t v467 = qword_10248BFB8;
  v468 = (std::__shared_weak_count *)unk_10248BFC0;
  if (unk_10248BFC0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BFC0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v465 = qword_10248C998;
  v466 = (std::__shared_weak_count *)unk_10248C9A0;
  if (unk_10248C9A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C9A0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v467, &v465);
  if (v466) {
    sub_1000DB0A0(v466);
  }
  if (v468) {
    sub_1000DB0A0(v468);
  }
  uint64_t v463 = qword_10248BFC8;
  v464 = (std::__shared_weak_count *)unk_10248BFD0;
  if (unk_10248BFD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BFD0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v461 = qword_10248C9A8;
  v462 = (std::__shared_weak_count *)unk_10248C9B0;
  if (unk_10248C9B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C9B0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v463, &v461);
  if (v462) {
    sub_1000DB0A0(v462);
  }
  if (v464) {
    sub_1000DB0A0(v464);
  }
  uint64_t v459 = qword_10248BFE8;
  v460 = (std::__shared_weak_count *)unk_10248BFF0;
  if (unk_10248BFF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248BFF0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v457 = qword_10248C9C8;
  v458 = (std::__shared_weak_count *)unk_10248C9D0;
  if (unk_10248C9D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C9D0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v459, &v457);
  if (v458) {
    sub_1000DB0A0(v458);
  }
  if (v460) {
    sub_1000DB0A0(v460);
  }
  uint64_t v455 = qword_10248BFF8;
  v456 = (std::__shared_weak_count *)unk_10248C000;
  if (unk_10248C000) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C000 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v453 = qword_10248C9D8;
  v454 = (std::__shared_weak_count *)unk_10248C9E0;
  if (unk_10248C9E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C9E0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v455, &v453);
  if (v454) {
    sub_1000DB0A0(v454);
  }
  if (v456) {
    sub_1000DB0A0(v456);
  }
  uint64_t v451 = qword_10248C008;
  v452 = (std::__shared_weak_count *)unk_10248C010;
  if (unk_10248C010) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C010 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v449 = qword_10248C9E8;
  v450 = (std::__shared_weak_count *)unk_10248C9F0;
  if (unk_10248C9F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C9F0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v451, &v449);
  if (v450) {
    sub_1000DB0A0(v450);
  }
  if (v452) {
    sub_1000DB0A0(v452);
  }
  uint64_t v447 = qword_10248C028;
  v448 = (std::__shared_weak_count *)unk_10248C030;
  if (unk_10248C030) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C030 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v445 = qword_10248CA08;
  v446 = (std::__shared_weak_count *)unk_10248CA10;
  if (unk_10248CA10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v447, &v445);
  if (v446) {
    sub_1000DB0A0(v446);
  }
  if (v448) {
    sub_1000DB0A0(v448);
  }
  uint64_t v443 = qword_10248C038;
  v444 = (std::__shared_weak_count *)unk_10248C040;
  if (unk_10248C040) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C040 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v441 = qword_10248CA18;
  v442 = (std::__shared_weak_count *)unk_10248CA20;
  if (unk_10248CA20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v443, &v441);
  if (v442) {
    sub_1000DB0A0(v442);
  }
  if (v444) {
    sub_1000DB0A0(v444);
  }
  uint64_t v439 = qword_10248C058;
  v440 = (std::__shared_weak_count *)unk_10248C060;
  if (unk_10248C060) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C060 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v437 = qword_10248CA38;
  v438 = (std::__shared_weak_count *)unk_10248CA40;
  if (unk_10248CA40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA40 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v439, &v437);
  if (v438) {
    sub_1000DB0A0(v438);
  }
  if (v440) {
    sub_1000DB0A0(v440);
  }
  uint64_t v435 = qword_10248C068;
  v436 = (std::__shared_weak_count *)unk_10248C070;
  if (unk_10248C070) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C070 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v433 = qword_10248CA48;
  v434 = (std::__shared_weak_count *)unk_10248CA50;
  if (unk_10248CA50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA50 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v435, &v433);
  if (v434) {
    sub_1000DB0A0(v434);
  }
  if (v436) {
    sub_1000DB0A0(v436);
  }
  uint64_t v431 = qword_10248C078;
  v432 = (std::__shared_weak_count *)unk_10248C080;
  if (unk_10248C080) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C080 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v429 = qword_10248CA58;
  v430 = (std::__shared_weak_count *)unk_10248CA60;
  if (unk_10248CA60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA60 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v431, &v429);
  if (v430) {
    sub_1000DB0A0(v430);
  }
  if (v432) {
    sub_1000DB0A0(v432);
  }
  uint64_t v427 = qword_10248C088;
  v428 = (std::__shared_weak_count *)unk_10248C090;
  if (unk_10248C090) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C090 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v425 = qword_10248CA68;
  v426 = (std::__shared_weak_count *)unk_10248CA70;
  if (unk_10248CA70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA70 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v427, &v425);
  if (v426) {
    sub_1000DB0A0(v426);
  }
  if (v428) {
    sub_1000DB0A0(v428);
  }
  uint64_t v423 = qword_10248C098;
  v424 = (std::__shared_weak_count *)unk_10248C0A0;
  if (unk_10248C0A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C0A0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v421 = qword_10248CA78;
  v422 = (std::__shared_weak_count *)unk_10248CA80;
  if (unk_10248CA80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CA80 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v423, &v421);
  if (v422) {
    sub_1000DB0A0(v422);
  }
  if (v424) {
    sub_1000DB0A0(v424);
  }
  uint64_t v419 = qword_10248C0B8;
  v420 = (std::__shared_weak_count *)unk_10248C0C0;
  if (unk_10248C0C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C0C0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v417 = qword_10248CA98;
  v418 = (std::__shared_weak_count *)unk_10248CAA0;
  if (unk_10248CAA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CAA0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v419, &v417);
  if (v418) {
    sub_1000DB0A0(v418);
  }
  if (v420) {
    sub_1000DB0A0(v420);
  }
  uint64_t v415 = qword_10248C0C8;
  v416 = (std::__shared_weak_count *)unk_10248C0D0;
  if (unk_10248C0D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C0D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v413 = qword_10248CAA8;
  v414 = (std::__shared_weak_count *)unk_10248CAB0;
  if (unk_10248CAB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CAB0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v415, &v413);
  if (v414) {
    sub_1000DB0A0(v414);
  }
  if (v416) {
    sub_1000DB0A0(v416);
  }
  uint64_t v411 = qword_10248C0E8;
  v412 = (std::__shared_weak_count *)unk_10248C0F0;
  if (unk_10248C0F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C0F0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v409 = qword_10248CAC8;
  v410 = (std::__shared_weak_count *)unk_10248CAD0;
  if (unk_10248CAD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CAD0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v411, &v409);
  if (v410) {
    sub_1000DB0A0(v410);
  }
  if (v412) {
    sub_1000DB0A0(v412);
  }
  uint64_t v407 = qword_10248C0F8;
  v408 = (std::__shared_weak_count *)unk_10248C100;
  if (unk_10248C100) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C100 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v405 = qword_10248CAD8;
  v406 = (std::__shared_weak_count *)unk_10248CAE0;
  if (unk_10248CAE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CAE0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v407, &v405);
  if (v406) {
    sub_1000DB0A0(v406);
  }
  if (v408) {
    sub_1000DB0A0(v408);
  }
  uint64_t v403 = qword_10248C108;
  v404 = (std::__shared_weak_count *)unk_10248C110;
  if (unk_10248C110) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C110 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v401 = qword_10248CAE8;
  v402 = (std::__shared_weak_count *)unk_10248CAF0;
  if (unk_10248CAF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CAF0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v403, &v401);
  if (v402) {
    sub_1000DB0A0(v402);
  }
  if (v404) {
    sub_1000DB0A0(v404);
  }
  uint64_t v399 = qword_10248C128;
  v400 = (std::__shared_weak_count *)unk_10248C130;
  if (unk_10248C130) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C130 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v397 = qword_10248CB18;
  v398 = (std::__shared_weak_count *)unk_10248CB20;
  if (unk_10248CB20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CB20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v399, &v397);
  if (v398) {
    sub_1000DB0A0(v398);
  }
  if (v400) {
    sub_1000DB0A0(v400);
  }
  uint64_t v395 = qword_10248C138;
  v396 = (std::__shared_weak_count *)unk_10248C140;
  if (unk_10248C140) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C140 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v393 = qword_10248CB78;
  v394 = (std::__shared_weak_count *)unk_10248CB80;
  if (unk_10248CB80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CB80 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v395, &v393);
  if (v394) {
    sub_1000DB0A0(v394);
  }
  if (v396) {
    sub_1000DB0A0(v396);
  }
  uint64_t v391 = qword_10248C148;
  v392 = (std::__shared_weak_count *)unk_10248C150;
  if (unk_10248C150) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C150 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v389 = qword_10248CBE8;
  v390 = (std::__shared_weak_count *)unk_10248CBF0;
  if (unk_10248CBF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CBF0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v391, &v389);
  if (v390) {
    sub_1000DB0A0(v390);
  }
  if (v392) {
    sub_1000DB0A0(v392);
  }
  uint64_t v387 = qword_10248C158;
  v388 = (std::__shared_weak_count *)unk_10248C160;
  if (unk_10248C160) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C160 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v385 = qword_10248CBF8;
  v386 = (std::__shared_weak_count *)unk_10248CC00;
  if (unk_10248CC00) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC00 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v387, &v385);
  if (v386) {
    sub_1000DB0A0(v386);
  }
  if (v388) {
    sub_1000DB0A0(v388);
  }
  uint64_t v383 = qword_10248C168;
  v384 = (std::__shared_weak_count *)unk_10248C170;
  if (unk_10248C170) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C170 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v381 = qword_10248CC18;
  v382 = (std::__shared_weak_count *)unk_10248CC20;
  if (unk_10248CC20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v383, &v381);
  if (v382) {
    sub_1000DB0A0(v382);
  }
  if (v384) {
    sub_1000DB0A0(v384);
  }
  uint64_t v379 = qword_10248C178;
  v380 = (std::__shared_weak_count *)unk_10248C180;
  if (unk_10248C180) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C180 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v377 = qword_10248CB28;
  v378 = (std::__shared_weak_count *)unk_10248CB30;
  if (unk_10248CB30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CB30 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v379, &v377);
  if (v378) {
    sub_1000DB0A0(v378);
  }
  if (v380) {
    sub_1000DB0A0(v380);
  }
  uint64_t v375 = qword_10248C188;
  v376 = (std::__shared_weak_count *)unk_10248C190;
  if (unk_10248C190) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C190 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v373 = qword_10248CB38;
  v374 = (std::__shared_weak_count *)unk_10248CB40;
  if (unk_10248CB40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CB40 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v375, &v373);
  if (v374) {
    sub_1000DB0A0(v374);
  }
  if (v376) {
    sub_1000DB0A0(v376);
  }
  uint64_t v371 = qword_10248C198;
  v372 = (std::__shared_weak_count *)unk_10248C1A0;
  if (unk_10248C1A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C1A0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v369 = qword_10248CB48;
  v370 = (std::__shared_weak_count *)unk_10248CB50;
  if (unk_10248CB50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CB50 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v371, &v369);
  if (v370) {
    sub_1000DB0A0(v370);
  }
  if (v372) {
    sub_1000DB0A0(v372);
  }
  uint64_t v367 = qword_10248C1A8;
  v368 = (std::__shared_weak_count *)unk_10248C1B0;
  if (unk_10248C1B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C1B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v365 = qword_10248CB58;
  v366 = (std::__shared_weak_count *)unk_10248CB60;
  if (unk_10248CB60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CB60 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v367, &v365);
  if (v366) {
    sub_1000DB0A0(v366);
  }
  if (v368) {
    sub_1000DB0A0(v368);
  }
  uint64_t v363 = qword_10248C1C8;
  v364 = (std::__shared_weak_count *)unk_10248C1D0;
  if (unk_10248C1D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C1D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v361 = qword_10248CB98;
  v362 = (std::__shared_weak_count *)unk_10248CBA0;
  if (unk_10248CBA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CBA0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v363, &v361);
  if (v362) {
    sub_1000DB0A0(v362);
  }
  if (v364) {
    sub_1000DB0A0(v364);
  }
  uint64_t v359 = qword_10248C1D8;
  v360 = (std::__shared_weak_count *)unk_10248C1E0;
  if (unk_10248C1E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C1E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v357 = qword_10248CBA8;
  v358 = (std::__shared_weak_count *)unk_10248CBB0;
  if (unk_10248CBB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CBB0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v359, &v357);
  if (v358) {
    sub_1000DB0A0(v358);
  }
  if (v360) {
    sub_1000DB0A0(v360);
  }
  uint64_t v355 = qword_10248C1E8;
  v356 = (std::__shared_weak_count *)unk_10248C1F0;
  if (unk_10248C1F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C1F0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v353 = qword_10248CBB8;
  v354 = (std::__shared_weak_count *)unk_10248CBC0;
  if (unk_10248CBC0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CBC0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v355, &v353);
  if (v354) {
    sub_1000DB0A0(v354);
  }
  if (v356) {
    sub_1000DB0A0(v356);
  }
  uint64_t v351 = qword_10248C1F8;
  v352 = (std::__shared_weak_count *)unk_10248C200;
  if (unk_10248C200) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C200 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v349 = qword_10248CBC8;
  v350 = (std::__shared_weak_count *)unk_10248CBD0;
  if (unk_10248CBD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CBD0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v351, &v349);
  if (v350) {
    sub_1000DB0A0(v350);
  }
  if (v352) {
    sub_1000DB0A0(v352);
  }
  uint64_t v347 = qword_10248C218;
  v348 = (std::__shared_weak_count *)unk_10248C220;
  if (unk_10248C220) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C220 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v345 = qword_10248CC38;
  v346 = (std::__shared_weak_count *)unk_10248CC40;
  if (unk_10248CC40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC40 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v347, &v345);
  if (v346) {
    sub_1000DB0A0(v346);
  }
  if (v348) {
    sub_1000DB0A0(v348);
  }
  uint64_t v343 = qword_10248C228;
  v344 = (std::__shared_weak_count *)unk_10248C230;
  if (unk_10248C230) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C230 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v341 = qword_10248CC48;
  v342 = (std::__shared_weak_count *)unk_10248CC50;
  if (unk_10248CC50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC50 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v343, &v341);
  if (v342) {
    sub_1000DB0A0(v342);
  }
  if (v344) {
    sub_1000DB0A0(v344);
  }
  uint64_t v339 = qword_10248C238;
  v340 = (std::__shared_weak_count *)unk_10248C240;
  if (unk_10248C240) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C240 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v337 = qword_10248CC58;
  v338 = (std::__shared_weak_count *)unk_10248CC60;
  if (unk_10248CC60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC60 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v339, &v337);
  if (v338) {
    sub_1000DB0A0(v338);
  }
  if (v340) {
    sub_1000DB0A0(v340);
  }
  uint64_t v335 = qword_10248C248;
  v336 = (std::__shared_weak_count *)unk_10248C250;
  if (unk_10248C250) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C250 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v333 = qword_10248CC68;
  v334 = (std::__shared_weak_count *)unk_10248CC70;
  if (unk_10248CC70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC70 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v335, &v333);
  if (v334) {
    sub_1000DB0A0(v334);
  }
  if (v336) {
    sub_1000DB0A0(v336);
  }
  uint64_t v331 = qword_10248C258;
  v332 = (std::__shared_weak_count *)unk_10248C260;
  if (unk_10248C260) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C260 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v329 = qword_10248CC78;
  v330 = (std::__shared_weak_count *)unk_10248CC80;
  if (unk_10248CC80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC80 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v331, &v329);
  if (v330) {
    sub_1000DB0A0(v330);
  }
  if (v332) {
    sub_1000DB0A0(v332);
  }
  uint64_t v327 = qword_10248C268;
  v328 = (std::__shared_weak_count *)unk_10248C270;
  if (unk_10248C270) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C270 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v325 = qword_10248CC88;
  v326 = (std::__shared_weak_count *)unk_10248CC90;
  if (unk_10248CC90) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CC90 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v327, &v325);
  if (v326) {
    sub_1000DB0A0(v326);
  }
  if (v328) {
    sub_1000DB0A0(v328);
  }
  uint64_t v323 = qword_10248C278;
  v324 = (std::__shared_weak_count *)unk_10248C280;
  if (unk_10248C280) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C280 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v321 = qword_10248CC98;
  v322 = (std::__shared_weak_count *)unk_10248CCA0;
  if (unk_10248CCA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CCA0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v323, &v321);
  if (v322) {
    sub_1000DB0A0(v322);
  }
  if (v324) {
    sub_1000DB0A0(v324);
  }
  uint64_t v319 = qword_10248C288;
  v320 = (std::__shared_weak_count *)unk_10248C290;
  if (unk_10248C290) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C290 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v317 = qword_10248CCA8;
  v318 = (std::__shared_weak_count *)unk_10248CCB0;
  if (unk_10248CCB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CCB0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v319, &v317);
  if (v318) {
    sub_1000DB0A0(v318);
  }
  if (v320) {
    sub_1000DB0A0(v320);
  }
  uint64_t v315 = qword_10248C298;
  v316 = (std::__shared_weak_count *)unk_10248C2A0;
  if (unk_10248C2A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C2A0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v313 = qword_10248CCB8;
  v314 = (std::__shared_weak_count *)unk_10248CCC0;
  if (unk_10248CCC0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CCC0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v315, &v313);
  if (v314) {
    sub_1000DB0A0(v314);
  }
  if (v316) {
    sub_1000DB0A0(v316);
  }
  uint64_t v311 = qword_10248C2A8;
  v312 = (std::__shared_weak_count *)unk_10248C2B0;
  if (unk_10248C2B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C2B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v309 = qword_10248CCC8;
  v310 = (std::__shared_weak_count *)unk_10248CCD0;
  if (unk_10248CCD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CCD0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v311, &v309);
  if (v310) {
    sub_1000DB0A0(v310);
  }
  if (v312) {
    sub_1000DB0A0(v312);
  }
  uint64_t v307 = qword_10248C2B8;
  v308 = (std::__shared_weak_count *)unk_10248C2C0;
  if (unk_10248C2C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C2C0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v305 = qword_10248CCD8;
  v306 = (std::__shared_weak_count *)unk_10248CCE0;
  if (unk_10248CCE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CCE0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v307, &v305);
  if (v306) {
    sub_1000DB0A0(v306);
  }
  if (v308) {
    sub_1000DB0A0(v308);
  }
  uint64_t v303 = qword_10248C2C8;
  v304 = (std::__shared_weak_count *)unk_10248C2D0;
  if (unk_10248C2D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C2D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v301 = qword_10248CCE8;
  v302 = (std::__shared_weak_count *)unk_10248CCF0;
  if (unk_10248CCF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CCF0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v303, &v301);
  if (v302) {
    sub_1000DB0A0(v302);
  }
  if (v304) {
    sub_1000DB0A0(v304);
  }
  uint64_t v299 = qword_10248C2D8;
  v300 = (std::__shared_weak_count *)unk_10248C2E0;
  if (unk_10248C2E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C2E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v297 = qword_10248CCF8;
  v298 = (std::__shared_weak_count *)unk_10248CD00;
  if (unk_10248CD00) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD00 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v299, &v297);
  if (v298) {
    sub_1000DB0A0(v298);
  }
  if (v300) {
    sub_1000DB0A0(v300);
  }
  uint64_t v295 = qword_10248C2F8;
  v296 = (std::__shared_weak_count *)unk_10248C300;
  if (unk_10248C300) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C300 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v293 = qword_10248CD18;
  v294 = (std::__shared_weak_count *)unk_10248CD20;
  if (unk_10248CD20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v295, &v293);
  if (v294) {
    sub_1000DB0A0(v294);
  }
  if (v296) {
    sub_1000DB0A0(v296);
  }
  uint64_t v291 = qword_10248C308;
  v292 = (std::__shared_weak_count *)unk_10248C310;
  if (unk_10248C310) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C310 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v289 = qword_10248CD28;
  v290 = (std::__shared_weak_count *)unk_10248CD30;
  if (unk_10248CD30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD30 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v291, &v289);
  if (v290) {
    sub_1000DB0A0(v290);
  }
  if (v292) {
    sub_1000DB0A0(v292);
  }
  uint64_t v287 = qword_10248C318;
  v288 = (std::__shared_weak_count *)unk_10248C320;
  if (unk_10248C320) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C320 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v285 = qword_10248CD38;
  v286 = (std::__shared_weak_count *)unk_10248CD40;
  if (unk_10248CD40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD40 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v287, &v285);
  if (v286) {
    sub_1000DB0A0(v286);
  }
  if (v288) {
    sub_1000DB0A0(v288);
  }
  uint64_t v283 = qword_10248C328;
  v284 = (std::__shared_weak_count *)unk_10248C330;
  if (unk_10248C330) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C330 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v281 = qword_10248CD48;
  v282 = (std::__shared_weak_count *)unk_10248CD50;
  if (unk_10248CD50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD50 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v283, &v281);
  if (v282) {
    sub_1000DB0A0(v282);
  }
  if (v284) {
    sub_1000DB0A0(v284);
  }
  uint64_t v279 = qword_10248C348;
  v280 = (std::__shared_weak_count *)unk_10248C350;
  if (unk_10248C350) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C350 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v277 = qword_10248CD68;
  v278 = (std::__shared_weak_count *)unk_10248CD70;
  if (unk_10248CD70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD70 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v279, &v277);
  if (v278) {
    sub_1000DB0A0(v278);
  }
  if (v280) {
    sub_1000DB0A0(v280);
  }
  uint64_t v275 = qword_10248C358;
  v276 = (std::__shared_weak_count *)unk_10248C360;
  if (unk_10248C360) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C360 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v273 = qword_10248CD78;
  v274 = (std::__shared_weak_count *)unk_10248CD80;
  if (unk_10248CD80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD80 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v275, &v273);
  if (v274) {
    sub_1000DB0A0(v274);
  }
  if (v276) {
    sub_1000DB0A0(v276);
  }
  uint64_t v271 = qword_10248C368;
  v272 = (std::__shared_weak_count *)unk_10248C370;
  if (unk_10248C370) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C370 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v269 = qword_10248CD88;
  v270 = (std::__shared_weak_count *)unk_10248CD90;
  if (unk_10248CD90) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CD90 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v271, &v269);
  if (v270) {
    sub_1000DB0A0(v270);
  }
  if (v272) {
    sub_1000DB0A0(v272);
  }
  uint64_t v267 = qword_10248C378;
  v268 = (std::__shared_weak_count *)unk_10248C380;
  if (unk_10248C380) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C380 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v265 = qword_10248CD98;
  v266 = (std::__shared_weak_count *)unk_10248CDA0;
  if (unk_10248CDA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CDA0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v267, &v265);
  if (v266) {
    sub_1000DB0A0(v266);
  }
  if (v268) {
    sub_1000DB0A0(v268);
  }
  uint64_t v263 = qword_10248C388;
  v264 = (std::__shared_weak_count *)unk_10248C390;
  if (unk_10248C390) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C390 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v261 = qword_10248CDA8;
  v262 = (std::__shared_weak_count *)unk_10248CDB0;
  if (unk_10248CDB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CDB0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v263, &v261);
  if (v262) {
    sub_1000DB0A0(v262);
  }
  if (v264) {
    sub_1000DB0A0(v264);
  }
  uint64_t v259 = qword_10248C3A8;
  v260 = (std::__shared_weak_count *)unk_10248C3B0;
  if (unk_10248C3B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C3B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v257 = qword_10248CDC8;
  v258 = (std::__shared_weak_count *)unk_10248CDD0;
  if (unk_10248CDD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CDD0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v259, &v257);
  if (v258) {
    sub_1000DB0A0(v258);
  }
  if (v260) {
    sub_1000DB0A0(v260);
  }
  uint64_t v255 = qword_10248C3B8;
  v256 = (std::__shared_weak_count *)unk_10248C3C0;
  if (unk_10248C3C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C3C0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v253 = qword_10248CDD8;
  v254 = (std::__shared_weak_count *)unk_10248CDE0;
  if (unk_10248CDE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CDE0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v255, &v253);
  if (v254) {
    sub_1000DB0A0(v254);
  }
  if (v256) {
    sub_1000DB0A0(v256);
  }
  uint64_t v251 = qword_10248C3C8;
  v252 = (std::__shared_weak_count *)unk_10248C3D0;
  if (unk_10248C3D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C3D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v249 = qword_10248CDE8;
  v250 = (std::__shared_weak_count *)unk_10248CDF0;
  if (unk_10248CDF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CDF0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v251, &v249);
  if (v250) {
    sub_1000DB0A0(v250);
  }
  if (v252) {
    sub_1000DB0A0(v252);
  }
  uint64_t v247 = qword_10248C3D8;
  v248 = (std::__shared_weak_count *)unk_10248C3E0;
  if (unk_10248C3E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C3E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v245 = qword_10248CDF8;
  v246 = (std::__shared_weak_count *)unk_10248CE00;
  if (unk_10248CE00) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE00 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v247, &v245);
  if (v246) {
    sub_1000DB0A0(v246);
  }
  if (v248) {
    sub_1000DB0A0(v248);
  }
  uint64_t v243 = qword_10248C3E8;
  v244 = (std::__shared_weak_count *)unk_10248C3F0;
  if (unk_10248C3F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C3F0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v241 = qword_10248CE08;
  v242 = (std::__shared_weak_count *)unk_10248CE10;
  if (unk_10248CE10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v243, &v241);
  if (v242) {
    sub_1000DB0A0(v242);
  }
  if (v244) {
    sub_1000DB0A0(v244);
  }
  uint64_t v239 = qword_10248C3F8;
  v240 = (std::__shared_weak_count *)unk_10248C400;
  if (unk_10248C400) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C400 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v237 = qword_10248CE18;
  v238 = (std::__shared_weak_count *)unk_10248CE20;
  if (unk_10248CE20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v239, &v237);
  if (v238) {
    sub_1000DB0A0(v238);
  }
  if (v240) {
    sub_1000DB0A0(v240);
  }
  uint64_t v235 = qword_10248C418;
  v236 = (std::__shared_weak_count *)unk_10248C420;
  if (unk_10248C420) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C420 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v233 = qword_10248CE38;
  v234 = (std::__shared_weak_count *)unk_10248CE40;
  if (unk_10248CE40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE40 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v235, &v233);
  if (v234) {
    sub_1000DB0A0(v234);
  }
  if (v236) {
    sub_1000DB0A0(v236);
  }
  uint64_t v231 = qword_10248C438;
  v232 = (std::__shared_weak_count *)unk_10248C440;
  if (unk_10248C440) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C440 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v229 = qword_10248CE58;
  v230 = (std::__shared_weak_count *)unk_10248CE60;
  if (unk_10248CE60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE60 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v231, &v229);
  if (v230) {
    sub_1000DB0A0(v230);
  }
  if (v232) {
    sub_1000DB0A0(v232);
  }
  uint64_t v227 = qword_10248C448;
  v228 = (std::__shared_weak_count *)unk_10248C450;
  if (unk_10248C450) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C450 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v225 = qword_10248CE68;
  v226 = (std::__shared_weak_count *)unk_10248CE70;
  if (unk_10248CE70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE70 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v227, &v225);
  if (v226) {
    sub_1000DB0A0(v226);
  }
  if (v228) {
    sub_1000DB0A0(v228);
  }
  uint64_t v223 = qword_10248C458;
  v224 = (std::__shared_weak_count *)unk_10248C460;
  if (unk_10248C460) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C460 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v221 = qword_10248CE78;
  v222 = (std::__shared_weak_count *)unk_10248CE80;
  if (unk_10248CE80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE80 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v223, &v221);
  if (v222) {
    sub_1000DB0A0(v222);
  }
  if (v224) {
    sub_1000DB0A0(v224);
  }
  uint64_t v219 = qword_10248C468;
  v220 = (std::__shared_weak_count *)unk_10248C470;
  if (unk_10248C470) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C470 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v217 = qword_10248CE88;
  v218 = (std::__shared_weak_count *)unk_10248CE90;
  if (unk_10248CE90) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CE90 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v219, &v217);
  if (v218) {
    sub_1000DB0A0(v218);
  }
  if (v220) {
    sub_1000DB0A0(v220);
  }
  uint64_t v215 = qword_10248C478;
  v216 = (std::__shared_weak_count *)unk_10248C480;
  if (unk_10248C480) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C480 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v213 = qword_10248CE98;
  v214 = (std::__shared_weak_count *)unk_10248CEA0;
  if (unk_10248CEA0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CEA0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v215, &v213);
  if (v214) {
    sub_1000DB0A0(v214);
  }
  if (v216) {
    sub_1000DB0A0(v216);
  }
  uint64_t v211 = qword_10248C488;
  v212 = (std::__shared_weak_count *)unk_10248C490;
  if (unk_10248C490) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C490 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v209 = qword_10248CEA8;
  v210 = (std::__shared_weak_count *)unk_10248CEB0;
  if (unk_10248CEB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CEB0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v211, &v209);
  if (v210) {
    sub_1000DB0A0(v210);
  }
  if (v212) {
    sub_1000DB0A0(v212);
  }
  uint64_t v207 = qword_10248C4A8;
  v208 = (std::__shared_weak_count *)unk_10248C4B0;
  if (unk_10248C4B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C4B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v205 = qword_10248CEC8;
  v206 = (std::__shared_weak_count *)unk_10248CED0;
  if (unk_10248CED0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CED0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v207, &v205);
  if (v206) {
    sub_1000DB0A0(v206);
  }
  if (v208) {
    sub_1000DB0A0(v208);
  }
  uint64_t v203 = qword_10248C4B8;
  v204 = (std::__shared_weak_count *)unk_10248C4C0;
  if (unk_10248C4C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C4C0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v201 = qword_10248CED8;
  v202 = (std::__shared_weak_count *)unk_10248CEE0;
  if (unk_10248CEE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CEE0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v203, &v201);
  if (v202) {
    sub_1000DB0A0(v202);
  }
  if (v204) {
    sub_1000DB0A0(v204);
  }
  uint64_t v199 = qword_10248C4C8;
  v200 = (std::__shared_weak_count *)unk_10248C4D0;
  if (unk_10248C4D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C4D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v197 = qword_10248CEE8;
  v198 = (std::__shared_weak_count *)unk_10248CEF0;
  if (unk_10248CEF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CEF0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v199, &v197);
  if (v198) {
    sub_1000DB0A0(v198);
  }
  if (v200) {
    sub_1000DB0A0(v200);
  }
  uint64_t v195 = qword_10248C4D8;
  v196 = (std::__shared_weak_count *)unk_10248C4E0;
  if (unk_10248C4E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C4E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v193 = qword_10248CEF8;
  v194 = (std::__shared_weak_count *)unk_10248CF00;
  if (unk_10248CF00) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF00 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v195, &v193);
  if (v194) {
    sub_1000DB0A0(v194);
  }
  if (v196) {
    sub_1000DB0A0(v196);
  }
  uint64_t v191 = qword_10248C4E8;
  v192 = (std::__shared_weak_count *)unk_10248C4F0;
  if (unk_10248C4F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C4F0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v189 = qword_10248CF08;
  v190 = (std::__shared_weak_count *)unk_10248CF10;
  if (unk_10248CF10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v191, &v189);
  if (v190) {
    sub_1000DB0A0(v190);
  }
  if (v192) {
    sub_1000DB0A0(v192);
  }
  uint64_t v187 = qword_10248C4F8;
  v188 = (std::__shared_weak_count *)unk_10248C500;
  if (unk_10248C500) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C500 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v185 = qword_10248CF18;
  v186 = (std::__shared_weak_count *)unk_10248CF20;
  if (unk_10248CF20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v187, &v185);
  if (v186) {
    sub_1000DB0A0(v186);
  }
  if (v188) {
    sub_1000DB0A0(v188);
  }
  uint64_t v183 = qword_10248C518;
  v184 = (std::__shared_weak_count *)unk_10248C520;
  if (unk_10248C520) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C520 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v181 = qword_10248CF38;
  v182 = (std::__shared_weak_count *)unk_10248CF40;
  if (unk_10248CF40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF40 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v183, &v181);
  if (v182) {
    sub_1000DB0A0(v182);
  }
  if (v184) {
    sub_1000DB0A0(v184);
  }
  uint64_t v179 = qword_10248C528;
  v180 = (std::__shared_weak_count *)unk_10248C530;
  if (unk_10248C530) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C530 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v177 = qword_10248CF48;
  v178 = (std::__shared_weak_count *)unk_10248CF50;
  if (unk_10248CF50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF50 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v179, &v177);
  if (v178) {
    sub_1000DB0A0(v178);
  }
  if (v180) {
    sub_1000DB0A0(v180);
  }
  uint64_t v175 = qword_10248C538;
  v176 = (std::__shared_weak_count *)unk_10248C540;
  if (unk_10248C540) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C540 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v173 = qword_10248CF58;
  v174 = (std::__shared_weak_count *)unk_10248CF60;
  if (unk_10248CF60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF60 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v175, &v173);
  if (v174) {
    sub_1000DB0A0(v174);
  }
  if (v176) {
    sub_1000DB0A0(v176);
  }
  uint64_t v171 = qword_10248C548;
  v172 = (std::__shared_weak_count *)unk_10248C550;
  if (unk_10248C550) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C550 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v169 = qword_10248CF68;
  v170 = (std::__shared_weak_count *)unk_10248CF70;
  if (unk_10248CF70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF70 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v171, &v169);
  if (v170) {
    sub_1000DB0A0(v170);
  }
  if (v172) {
    sub_1000DB0A0(v172);
  }
  uint64_t v167 = qword_10248C558;
  v168 = (std::__shared_weak_count *)unk_10248C560;
  if (unk_10248C560) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C560 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v165 = qword_10248CF78;
  v166 = (std::__shared_weak_count *)unk_10248CF80;
  if (unk_10248CF80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF80 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v167, &v165);
  if (v166) {
    sub_1000DB0A0(v166);
  }
  if (v168) {
    sub_1000DB0A0(v168);
  }
  uint64_t v163 = qword_10248C568;
  v164 = (std::__shared_weak_count *)unk_10248C570;
  if (unk_10248C570) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C570 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v161 = qword_10248CF88;
  v162 = (std::__shared_weak_count *)unk_10248CF90;
  if (unk_10248CF90) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CF90 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v163, &v161);
  if (v162) {
    sub_1000DB0A0(v162);
  }
  if (v164) {
    sub_1000DB0A0(v164);
  }
  uint64_t v159 = qword_10248C588;
  v160 = (std::__shared_weak_count *)unk_10248C590;
  if (unk_10248C590) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C590 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v157 = qword_10248CFA8;
  v158 = (std::__shared_weak_count *)unk_10248CFB0;
  if (unk_10248CFB0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CFB0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v159, &v157);
  if (v158) {
    sub_1000DB0A0(v158);
  }
  if (v160) {
    sub_1000DB0A0(v160);
  }
  uint64_t v155 = qword_10248C5A8;
  v156 = (std::__shared_weak_count *)unk_10248C5B0;
  if (unk_10248C5B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C5B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v153 = qword_10248CFC8;
  v154 = (std::__shared_weak_count *)unk_10248CFD0;
  if (unk_10248CFD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CFD0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v155, &v153);
  if (v154) {
    sub_1000DB0A0(v154);
  }
  if (v156) {
    sub_1000DB0A0(v156);
  }
  uint64_t v151 = qword_10248C5B8;
  v152 = (std::__shared_weak_count *)unk_10248C5C0;
  if (unk_10248C5C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C5C0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v149 = qword_10248CFD8;
  v150 = (std::__shared_weak_count *)unk_10248CFE0;
  if (unk_10248CFE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CFE0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v151, &v149);
  if (v150) {
    sub_1000DB0A0(v150);
  }
  if (v152) {
    sub_1000DB0A0(v152);
  }
  uint64_t v147 = qword_10248C5C8;
  v148 = (std::__shared_weak_count *)unk_10248C5D0;
  if (unk_10248C5D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C5D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v145 = qword_10248CFE8;
  v146 = (std::__shared_weak_count *)unk_10248CFF0;
  if (unk_10248CFF0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248CFF0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v147, &v145);
  if (v146) {
    sub_1000DB0A0(v146);
  }
  if (v148) {
    sub_1000DB0A0(v148);
  }
  uint64_t v143 = qword_10248C5D8;
  v144 = (std::__shared_weak_count *)unk_10248C5E0;
  if (unk_10248C5E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C5E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v141 = qword_10248CFF8;
  v142 = (std::__shared_weak_count *)unk_10248D000;
  if (unk_10248D000) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D000 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v143, &v141);
  if (v142) {
    sub_1000DB0A0(v142);
  }
  if (v144) {
    sub_1000DB0A0(v144);
  }
  uint64_t v139 = qword_10248C5E8;
  v140 = (std::__shared_weak_count *)unk_10248C5F0;
  if (unk_10248C5F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C5F0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v137 = qword_10248D008;
  v138 = (std::__shared_weak_count *)unk_10248D010;
  if (unk_10248D010) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D010 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v139, &v137);
  if (v138) {
    sub_1000DB0A0(v138);
  }
  if (v140) {
    sub_1000DB0A0(v140);
  }
  uint64_t v135 = qword_10248C5F8;
  v136 = (std::__shared_weak_count *)unk_10248C600;
  if (unk_10248C600) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C600 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v133 = qword_10248D018;
  v134 = (std::__shared_weak_count *)unk_10248D020;
  if (unk_10248D020) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D020 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v135, &v133);
  if (v134) {
    sub_1000DB0A0(v134);
  }
  if (v136) {
    sub_1000DB0A0(v136);
  }
  uint64_t v131 = qword_10248C618;
  v132 = (std::__shared_weak_count *)unk_10248C620;
  if (unk_10248C620) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C620 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v129 = qword_10248D038;
  v130 = (std::__shared_weak_count *)unk_10248D040;
  if (unk_10248D040) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D040 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v131, &v129);
  if (v130) {
    sub_1000DB0A0(v130);
  }
  if (v132) {
    sub_1000DB0A0(v132);
  }
  uint64_t v127 = qword_10248C628;
  __int16 v128 = (std::__shared_weak_count *)unk_10248C630;
  if (unk_10248C630) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C630 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v125 = qword_10248D048;
  __int16 v126 = (std::__shared_weak_count *)unk_10248D050;
  if (unk_10248D050) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D050 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v127, &v125);
  if (v126) {
    sub_1000DB0A0(v126);
  }
  if (v128) {
    sub_1000DB0A0(v128);
  }
  uint64_t v123 = qword_10248C638;
  __int16 v124 = (std::__shared_weak_count *)unk_10248C640;
  if (unk_10248C640) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C640 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v121 = qword_10248D058;
  __int16 v122 = (std::__shared_weak_count *)unk_10248D060;
  if (unk_10248D060) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D060 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v123, &v121);
  if (v122) {
    sub_1000DB0A0(v122);
  }
  if (v124) {
    sub_1000DB0A0(v124);
  }
  uint64_t v119 = qword_10248C648;
  __int16 v120 = (std::__shared_weak_count *)unk_10248C650;
  if (unk_10248C650) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C650 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v117 = qword_10248D068;
  __int16 v118 = (std::__shared_weak_count *)unk_10248D070;
  if (unk_10248D070) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D070 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v119, &v117);
  if (v118) {
    sub_1000DB0A0(v118);
  }
  if (v120) {
    sub_1000DB0A0(v120);
  }
  uint64_t v115 = qword_10248C658;
  __int16 v116 = (std::__shared_weak_count *)unk_10248C660;
  if (unk_10248C660) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C660 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v113 = qword_10248D078;
  __int16 v114 = (std::__shared_weak_count *)unk_10248D080;
  if (unk_10248D080) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D080 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v115, &v113);
  if (v114) {
    sub_1000DB0A0(v114);
  }
  if (v116) {
    sub_1000DB0A0(v116);
  }
  uint64_t v111 = qword_10248C668;
  __int16 v112 = (std::__shared_weak_count *)unk_10248C670;
  if (unk_10248C670) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C670 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v109 = qword_10248D088;
  __int16 v110 = (std::__shared_weak_count *)unk_10248D090;
  if (unk_10248D090) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D090 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v111, &v109);
  if (v110) {
    sub_1000DB0A0(v110);
  }
  if (v112) {
    sub_1000DB0A0(v112);
  }
  uint64_t v107 = qword_10248C688;
  __int16 v108 = (std::__shared_weak_count *)unk_10248C690;
  if (unk_10248C690) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C690 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v105 = qword_10248D0A8;
  __int16 v106 = (std::__shared_weak_count *)unk_10248D0B0;
  if (unk_10248D0B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D0B0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v107, &v105);
  if (v106) {
    sub_1000DB0A0(v106);
  }
  if (v108) {
    sub_1000DB0A0(v108);
  }
  uint64_t v103 = qword_10248C698;
  __int16 v104 = (std::__shared_weak_count *)unk_10248C6A0;
  if (unk_10248C6A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C6A0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v101 = qword_10248D0B8;
  v102 = (std::__shared_weak_count *)unk_10248D0C0;
  if (unk_10248D0C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D0C0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v103, &v101);
  if (v102) {
    sub_1000DB0A0(v102);
  }
  if (v104) {
    sub_1000DB0A0(v104);
  }
  uint64_t v99 = qword_10248C6A8;
  v100 = (std::__shared_weak_count *)unk_10248C6B0;
  if (unk_10248C6B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C6B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v97 = qword_10248D0C8;
  double v98 = (std::__shared_weak_count *)unk_10248D0D0;
  if (unk_10248D0D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D0D0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v99, &v97);
  if (v98) {
    sub_1000DB0A0(v98);
  }
  if (v100) {
    sub_1000DB0A0(v100);
  }
  uint64_t v95 = qword_10248C6B8;
  double v96 = (std::__shared_weak_count *)unk_10248C6C0;
  if (unk_10248C6C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C6C0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v93 = qword_10248D0D8;
  double v94 = (std::__shared_weak_count *)unk_10248D0E0;
  if (unk_10248D0E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D0E0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v95, &v93);
  if (v94) {
    sub_1000DB0A0(v94);
  }
  if (v96) {
    sub_1000DB0A0(v96);
  }
  uint64_t v91 = qword_10248C6C8;
  v92 = (std::__shared_weak_count *)unk_10248C6D0;
  if (unk_10248C6D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C6D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v89 = qword_10248D0E8;
  v90 = (std::__shared_weak_count *)unk_10248D0F0;
  if (unk_10248D0F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D0F0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v91, &v89);
  if (v90) {
    sub_1000DB0A0(v90);
  }
  if (v92) {
    sub_1000DB0A0(v92);
  }
  uint64_t v87 = qword_10248C6D8;
  v88 = (std::__shared_weak_count *)unk_10248C6E0;
  if (unk_10248C6E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C6E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v85 = qword_10248D0F8;
  std::string v86 = (std::__shared_weak_count *)unk_10248D100;
  if (unk_10248D100) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D100 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v87, &v85);
  if (v86) {
    sub_1000DB0A0(v86);
  }
  if (v88) {
    sub_1000DB0A0(v88);
  }
  uint64_t v83 = qword_10248C6F8;
  std::string v84 = (std::__shared_weak_count *)unk_10248C700;
  if (unk_10248C700) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C700 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v81 = qword_10248D118;
  v82 = (std::__shared_weak_count *)unk_10248D120;
  if (unk_10248D120) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D120 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v83, &v81);
  if (v82) {
    sub_1000DB0A0(v82);
  }
  if (v84) {
    sub_1000DB0A0(v84);
  }
  uint64_t v79 = qword_10248C708;
  v80 = (std::__shared_weak_count *)unk_10248C710;
  if (unk_10248C710) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C710 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = qword_10248D128;
  v78 = (std::__shared_weak_count *)unk_10248D130;
  if (unk_10248D130) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D130 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v79, &v77);
  if (v78) {
    sub_1000DB0A0(v78);
  }
  if (v80) {
    sub_1000DB0A0(v80);
  }
  uint64_t v75 = qword_10248C718;
  double v76 = (std::__shared_weak_count *)unk_10248C720;
  if (unk_10248C720) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C720 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v73 = qword_10248D138;
  v74 = (std::__shared_weak_count *)unk_10248D140;
  if (unk_10248D140) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D140 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v75, &v73);
  if (v74) {
    sub_1000DB0A0(v74);
  }
  if (v76) {
    sub_1000DB0A0(v76);
  }
  uint64_t v71 = qword_10248C738;
  long long v72 = (std::__shared_weak_count *)unk_10248C740;
  if (unk_10248C740) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C740 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = qword_10248D158;
  std::string::size_type v70 = (std::__shared_weak_count *)unk_10248D160;
  if (unk_10248D160) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D160 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v71, &v69);
  if (v70) {
    sub_1000DB0A0(v70);
  }
  if (v72) {
    sub_1000DB0A0(v72);
  }
  uint64_t v67 = qword_10248C748;
  v68 = (std::__shared_weak_count *)unk_10248C750;
  if (unk_10248C750) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C750 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v65 = qword_10248D168;
  v66 = (std::__shared_weak_count *)unk_10248D170;
  if (unk_10248D170) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D170 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v67, &v65);
  if (v66) {
    sub_1000DB0A0(v66);
  }
  if (v68) {
    sub_1000DB0A0(v68);
  }
  uint64_t v63 = qword_10248C758;
  v64 = (std::__shared_weak_count *)unk_10248C760;
  if (unk_10248C760) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C760 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v61 = qword_10248D178;
  long long v62 = (std::__shared_weak_count *)unk_10248D180;
  if (unk_10248D180) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D180 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v63, &v61);
  if (v62) {
    sub_1000DB0A0(v62);
  }
  if (v64) {
    sub_1000DB0A0(v64);
  }
  uint64_t v59 = qword_10248C768;
  std::string::size_type v60 = (std::__shared_weak_count *)unk_10248C770;
  if (unk_10248C770) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C770 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = qword_10248D188;
  __int16 v58 = (std::__shared_weak_count *)unk_10248D190;
  if (unk_10248D190) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D190 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v59, &v57);
  if (v58) {
    sub_1000DB0A0(v58);
  }
  if (v60) {
    sub_1000DB0A0(v60);
  }
  uint64_t v55 = qword_10248C778;
  __int16 v56 = (std::__shared_weak_count *)unk_10248C780;
  if (unk_10248C780) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C780 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = qword_10248D198;
  float v54 = (std::__shared_weak_count *)unk_10248D1A0;
  if (unk_10248D1A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D1A0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v55, &v53);
  if (v54) {
    sub_1000DB0A0(v54);
  }
  if (v56) {
    sub_1000DB0A0(v56);
  }
  uint64_t v51 = qword_10248C788;
  double v52 = (std::__shared_weak_count *)unk_10248C790;
  if (unk_10248C790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C790 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v49 = qword_10248D1A8;
  __int16 v50 = (std::__shared_weak_count *)unk_10248D1B0;
  if (unk_10248D1B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D1B0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v51, &v49);
  if (v50) {
    sub_1000DB0A0(v50);
  }
  if (v52) {
    sub_1000DB0A0(v52);
  }
  uint64_t v47 = qword_10248C798;
  BOOL v48 = (std::__shared_weak_count *)unk_10248C7A0;
  if (unk_10248C7A0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C7A0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = qword_10248D1B8;
  uint64_t v46 = (std::__shared_weak_count *)unk_10248D1C0;
  if (unk_10248D1C0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D1C0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v47, &v45);
  if (v46) {
    sub_1000DB0A0(v46);
  }
  if (v48) {
    sub_1000DB0A0(v48);
  }
  uint64_t v43 = qword_10248C7A8;
  uint64_t v44 = (std::__shared_weak_count *)unk_10248C7B0;
  if (unk_10248C7B0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C7B0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v41 = qword_10248D1C8;
  __int16 v42 = (std::__shared_weak_count *)unk_10248D1D0;
  if (unk_10248D1D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D1D0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v43, &v41);
  if (v42) {
    sub_1000DB0A0(v42);
  }
  if (v44) {
    sub_1000DB0A0(v44);
  }
  uint64_t v39 = qword_10248C7C8;
  double v40 = (std::__shared_weak_count *)unk_10248C7D0;
  if (unk_10248C7D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C7D0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = qword_10248D1E8;
  __int16 v38 = (std::__shared_weak_count *)unk_10248D1F0;
  if (unk_10248D1F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D1F0 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v39, &v37);
  if (v38) {
    sub_1000DB0A0(v38);
  }
  if (v40) {
    sub_1000DB0A0(v40);
  }
  uint64_t v35 = qword_10248C7D8;
  uint64_t v36 = (std::__shared_weak_count *)unk_10248C7E0;
  if (unk_10248C7E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C7E0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = qword_10248D1F8;
  uint64_t v34 = (std::__shared_weak_count *)unk_10248D200;
  if (unk_10248D200) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D200 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v35, &v33);
  if (v34) {
    sub_1000DB0A0(v34);
  }
  if (v36) {
    sub_1000DB0A0(v36);
  }
  uint64_t v31 = qword_10248C7E8;
  uint64_t v32 = (std::__shared_weak_count *)unk_10248C7F0;
  if (unk_10248C7F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C7F0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = qword_10248D208;
  __int16 v30 = (std::__shared_weak_count *)unk_10248D210;
  if (unk_10248D210) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D210 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v31, &v29);
  if (v30) {
    sub_1000DB0A0(v30);
  }
  if (v32) {
    sub_1000DB0A0(v32);
  }
  uint64_t v27 = qword_10248C7F8;
  uint64_t v28 = (std::__shared_weak_count *)unk_10248C800;
  if (unk_10248C800) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C800 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = qword_10248D218;
  uint64_t v26 = (std::__shared_weak_count *)unk_10248D220;
  if (unk_10248D220) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D220 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v27, &v25);
  if (v26) {
    sub_1000DB0A0(v26);
  }
  if (v28) {
    sub_1000DB0A0(v28);
  }
  uint64_t v23 = qword_10248C808;
  __int16 v24 = (std::__shared_weak_count *)unk_10248C810;
  if (unk_10248C810) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C810 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = qword_10248D228;
  id v22 = (std::__shared_weak_count *)unk_10248D230;
  if (unk_10248D230) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D230 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v23, &v21);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v24) {
    sub_1000DB0A0(v24);
  }
  uint64_t v19 = qword_10248C818;
  uint64_t v20 = (std::__shared_weak_count *)unk_10248C820;
  if (unk_10248C820) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C820 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = qword_10248D238;
  uint64_t v18 = (std::__shared_weak_count *)unk_10248D240;
  if (unk_10248D240) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D240 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v19, &v17);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (v20) {
    sub_1000DB0A0(v20);
  }
  uint64_t v15 = qword_10248C828;
  uint64_t v16 = (std::__shared_weak_count *)unk_10248C830;
  if (unk_10248C830) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C830 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = qword_10248D248;
  unsigned int v14 = (std::__shared_weak_count *)unk_10248D250;
  if (unk_10248D250) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D250 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v15, &v13);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v16) {
    sub_1000DB0A0(v16);
  }
  uint64_t v11 = qword_10248C838;
  int v12 = (std::__shared_weak_count *)unk_10248C840;
  if (unk_10248C840) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C840 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = qword_10248D258;
  uint64_t v10 = (std::__shared_weak_count *)unk_10248D260;
  if (unk_10248D260) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D260 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v11, &v9);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v12) {
    sub_1000DB0A0(v12);
  }
  uint64_t v7 = qword_10248C848;
  double v8 = (std::__shared_weak_count *)unk_10248C850;
  if (unk_10248C850) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C850 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = qword_10248D268;
  BOOL v6 = (std::__shared_weak_count *)unk_10248D270;
  if (unk_10248D270) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D270 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v7, &v5);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v3 = qword_10248C858;
  double v4 = (std::__shared_weak_count *)unk_10248C860;
  if (unk_10248C860) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248C860 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v1 = qword_10248D278;
  uint64_t v2 = (std::__shared_weak_count *)unk_10248D280;
  if (unk_10248D280) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_10248D280 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F074F4(&qword_102486F78, &v3, &v1);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_101311CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101312B30(uint64_t a1)
{
  sub_100F09ADC(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

uint64_t sub_101312B74(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    sub_101312BEC(a1, i + 2, i + 2);
  return a1;
}

void sub_101312BD4(_Unwind_Exception *a1)
{
  sub_100F09ADC(v1);
  _Unwind_Resume(a1);
}

void *sub_101312BEC(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_101312E6C(a1, v7, a3, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *uint64_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100F0A570((uint64_t)v22, 0);
  return v11;
}

void sub_101312E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F0A570((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_101312E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  BOOL result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *BOOL result = 0;
  result[1] = a2;
  uint64_t v9 = a3[1];
  result[2] = *a3;
  result[3] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a3[3];
  result[4] = a3[2];
  result[5] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101312EE8()
{
  sub_100134750(qword_10248B440, "UserPlane");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B440, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B458, "SUPL");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B458, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B470, "SuplFlags");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B470, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B488, "SuplHSLPServerAddress");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B488, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B4A0, "SuplCARootCert");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B4A0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B4B8, "SuplUdpPortConfig");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B4B8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B4D0, "EmergencySettings");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B4D0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B4E8, "Location");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B4E8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B500, "EnableCPI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B500, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B518, "EnableCPIDuringEmergencyMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B518, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B530, "EnableEarlyReturn");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B530, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B548, "EnableEarlyReturnDuringEmergencyMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B548, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B560, "AllowOTDOA");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B560, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B578, "AllowOTDOADuringEmergencyMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B578, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B590, "DelayEmergencyUntilCallConnects");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B590, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B5A8, "EmergencyLocation");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B5A8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B5C0, "ControlPlane");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B5C0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B5D8, "EnableMSAssisted");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B5D8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B5F0, "EnableAdditionalAssistedConstellations");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B5F0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B608, "Glonass");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B608, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B620, "Beidou");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B620, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B638, "Galileo");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B638, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B650, "Qzss");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B650, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B668, "Sbas");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B668, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B680, "AML");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B680, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B698, "AugmentedEmergencyAction");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B698, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B6B0, "SMS");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B6B0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B6C8, "Disabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B6C8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B6E0, "SupportsAML");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B6E0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B6F8, "HTTPS");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B6F8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B710, "SMSDestination");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B710, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B728, "Destination");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B728, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B740, "SMSDestinationPort");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B740, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B758, "Binary");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B758, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B770, "DestinationPort");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B770, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B788, "HTTPSAddress");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B788, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B7A0, "FirstFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B7A0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B7B8, "MultipleSmsEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B7B8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B7D0, "MaxFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B7D0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B7E8, "MinFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B7E8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B800, "URL");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B800, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B818, "EED");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B818, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B830, "BinarySMSDisabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B830, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B848, "CDMA");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B848, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B860, "ProvideHELOUnsolicited");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B860, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B878, "MeasurementTimeStampSource");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B878, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B890, "LPPRel13LocationSource");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B890, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B8A8, "LPPRel13WlanMeas");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B8A8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B8C0, "Enabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B8C0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B8D8, "ScanResultConfig");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B8D8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B8F0, "EnableRssi");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B8F0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B908, "PartnerID");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B908, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B920, "ADRCert");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B920, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B938, "RequestsSupported");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B938, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B950, "BaseURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B950, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B968, "BAA");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B968, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B980, "EEDEnabledOnly");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B980, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B998, "CertValidityPeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B998, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B9B0, "NoCertRequestWindow");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B9B0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B9C8, "NoCertRetryWindow");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B9C8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B9E0, "CertAvailableRequestWindowMin");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B9E0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248B9F8, "CertAvailableRequestWindowMax");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248B9F8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BA10, "CertAvailableRetryWindow");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BA10, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BA28, "EED2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BA28, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BA40, "ADREnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BA40, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BA58, "RequestsEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BA58, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BA70, "LISURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BA70, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BA88, "ADRURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BA88, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BAA0, "ControlURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BAA0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BAB8, "FirstLISPOSTDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BAB8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BAD0, "PeriodicLISPOSTDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BAD0, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BAE8, "InitialADRPOSTTimeout");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BAE8, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BB00, "IntermediateCert");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BB00, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BB18, "PartnerInfo");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BB18, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BB30, "DSAEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BB30, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BB48, "UnmaskCrashDetection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BB48, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BB60, "NominalMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BB60, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BB78, "PowerMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BB78, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BB90, "ThermalMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BB90, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BBA8, "CellularMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BBA8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BBC0, "RSRPThreshold");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BBC0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BBD8, "RSRPQueryRate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BBD8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BBF0, "RSRPSamplesToAvg");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BBF0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC08, "ULFreqThreshold");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC08, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC20, "BelowThresholdMitigationParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC20, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC38, "LightParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC38, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC50, "ModerateParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC50, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC68, "HeavyAndGreaterParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC68, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC80, "AllowNewStreamingRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC80, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BC98, "AllowNewMediaRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BC98, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BCB0, "MaxFramerate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BCB0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BCC8, "MaxStreamingBitrate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BCC8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BCE0, "DropStreaming");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BCE0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BCF8, "DelayMedia");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BCF8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BD10, "MediaUploadConfiguration");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BD10, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BD28, "NumInFlightUploads");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BD28, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BD40, "MaxUploadFileSizeMB");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BD40, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BD58, "MaxUploadQuotaMB");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BD58, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BD70, "PreCachedADR");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BD70, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BD88, "DebounceDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BD88, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BDA0, "DebounceGracePeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BDA0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BDB8, "PeriodicDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BDB8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BDD0, "PeriodicGracePeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BDD0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BDE8, "BackoffDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BDE8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BE00, "BackoffGracePeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BE00, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BE18, "ValidityInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BE18, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BE30, "SMSOverNAS");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BE30, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BE48, "SMSDestination");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BE48, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BE60, "EnableForSatellitePLMNs");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BE60, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248BE78, "EnableForMCCOrPLMNs");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248BE78, (void *)&_mh_execute_header);
  sub_100134750(qword_10248BE90, "FirstFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10248BE90, (void *)&_mh_execute_header);
  sub_100134750(__p, "MobileAsset");
  sub_100F03D2C((uint64_t *)__p);
}

void sub_101317C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101317C4C(uint64_t a1, unsigned int a2, const std::string *a3, long long *a4, long long *a5)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  uint64_t v10 = (void *)(a1 + 8);
  uint64_t v11 = (char *)sub_100147F50(a2);
  sub_100134750(v10, v11);
  unint64_t v12 = (_OWORD *)(a1 + 32);
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v13 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
    *(void *)(a1 + 48) = *((void *)&a3->__r_.__value_.__l + 2);
    *unint64_t v12 = v13;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v14 = *a4;
    *(void *)(a1 + 72) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v14;
  }
  *(unsigned char *)(a1 + 80) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 88), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v15 = *a5;
    *(void *)(a1 + 104) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 88) = v15;
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(_OWORD *)(a1 + 112) = xmmword_101D9DED0;
  *(void *)(a1 + 128) = 0x643F000000;
  *(void *)(a1 + 136) = 0x40C5180000000000;
  *(_DWORD *)(a1 + 144) = 1181376512;
  *(void *)(a1 + 156) = 0;
  *(void *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(void *)(a1 + 168) = 0x10000000100;
  *(_WORD *)(a1 + 176) = 256;
  *(unsigned char *)(a1 + 178) = 1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  unint64_t v16 = sub_100147F50(a2);
  sub_100D3B35C(a1 + 232, v16);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  unint64_t v17 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    unint64_t v17 = *(const char **)v12;
  }
  int v18 = mkdir(v17, 0x1C0u);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FE48);
  }
  uint64_t v19 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = a1 + 32;
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v20 = *(void *)v12;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    uint64_t v24 = v20;
    __int16 v25 = 1024;
    int v26 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: creating directory, %s, ret, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FE48);
    }
    id v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSet::CLTilesSet(CLTilesManager_Type::TileType, const std::string &, const std::string &, const std::string &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  sub_10106EF38(a2, a3);
  return a1;
}

void sub_101317FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  uint64_t v19 = *(void *)(v14 + 304);
  *(void *)(v14 + 304) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(v14 + 296);
  *(void *)(v14 + 296) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_10062E6D4(a12);
  sub_1013180A4(v17);
  if (*(char *)(v14 + 111) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v14 + 79) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v14 + 55) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v14 + 31) < 0) {
    operator delete(*a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1013180A4(uint64_t a1)
{
  return a1;
}

void *sub_1013180E4(void *a1)
{
  sub_1013186B4(a1, 0xDuLL);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231FE68);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unsigned int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TilesSet, Initialize CLTilesSetCollection", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231FE68);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection::CLTilesSetCollection()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return a1;
}

void sub_101318284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100D1A044((void ***)va);
  _Unwind_Resume(a1);
}

long long *sub_1013182A4(long long *a1, long long *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  long long v4 = *a2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *a1;
  *a1 = v4;
  long long v8 = v5;
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v3;
  uint64_t v9 = v6;
  uint64_t v10 = (void **)&v8;
  sub_100D1A044(&v10);
  return a1;
}

uint64_t sub_101318304(void *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*(_DWORD *)(*a3 + 4) != a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10231FE88);
    }
    long long v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      unsigned int v9 = *(_DWORD *)(*a3 + 4);
      *(_DWORD *)unsigned int buf = 67109376;
      unsigned int v15 = v9;
      __int16 v16 = 1024;
      unsigned int v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Mismatch of tile type inserting CLTilesSet. fTileType: %d, tileType: %d", buf, 0xEu);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_18:
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesSetCollection::addTilesSet(CLTilesManager_Type::TileType, std::unique_ptr<CLTilesSet>)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
LABEL_21:
    dispatch_once(&qword_102419380, &stru_10231FE88);
    goto LABEL_18;
  }
  if (a2 < 0xD)
  {
    uint64_t v6 = (uint64_t *)(*a1 + 8 * a2);
    *a3 = 0;
    sub_100D0F390(v6, v5);
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231FE88);
  }
  uint64_t v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)unsigned int buf = 67109376;
    unsigned int v15 = a2;
    __int16 v16 = 1024;
    unsigned int v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid TileType value. tileType %d, index: %d", buf, 0xEu);
  }
  BOOL v12 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  return result;
}

void sub_101318624(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101318654(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101318684(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void *sub_1013186B4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_101318720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_10131876C(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  uint64_t v4 = a1 + 8;
  sub_100134750((void *)(a1 + 8), "ff:ff:ff:ff:ff:ff");
  *(int64x2_t *)(a1 + 32) = vdupq_n_s64(0xC076800000000000);
  *(_OWORD *)(a1 + 48) = xmmword_101D51770;
  *(void *)(a1 + 64) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  uint64_t v5 = (void **)(a1 + 88);
  sub_100134750((void *)(a1 + 88), "Unknown");
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(void *)a1 = a2;
  sub_100134750(&v14, (char *)[[objc_msgSend(objc_msgSend(a2, "objectForKey:", @"mac"), "UTF8String");
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  *(_OWORD *)uint64_t v4 = v14;
  *(void *)(v4 + 16) = v15;
  [objc_msgSend(a2, "objectForKey:", @"latitude") doubleValue];
  *(void *)(a1 + 32) = v6;
  [objc_msgSend(a2, "objectForKey:", @"longitude") doubleValue];
  *(void *)(a1 + 40) = v7;
  [objc_msgSend(a2, "objectForKey:", @"altitude") doubleValue];
  *(void *)(a1 + 48) = v8;
  [objc_msgSend(a2, "objectForKey:", @"horizontalAccuracy") doubleValue];
  *(void *)(a1 + 56) = v9;
  [objc_msgSend(a2, "objectForKey:", @"verticalAccuracy") doubleValue];
  *(void *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = [[objc_msgSend(a2, "objectForKey:", @"reach") intValue];
  [objc_msgSend(a2, "objectForKey:", @"stationaryTimeInSeconds") doubleValue];
  *(void *)(a1 + 80) = v11;
  sub_100134750(&v14, (char *)[objc_msgSend(objc_msgSend(a2, "objectForKey:", @"loiType"), "UTF8String") UTF8String]);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = v14;
  *(void *)(a1 + 104) = v15;
  [objc_msgSend(a2, "objectForKey:", @"lastUpdated") doubleValue];
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_10131894C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_10131898C(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 112));
}

uint64_t sub_1013189B8(uint64_t a1)
{
  sub_10010F274((uint64_t)v30);
  int v2 = *(char *)(a1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = a1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  sub_100132EFC(v31, v3, v4);
  uint64_t v5 = sub_100132EFC(v31, (uint64_t)", ", 2);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v7 = sub_100132EFC(v31, (uint64_t)", ", 2);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + 16) = 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v9 = sub_100132EFC(v31, (uint64_t)", alt, ", 7);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 16) = 1;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v11 = sub_100132EFC(v31, (uint64_t)", hacc, ", 8);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 16) = 1;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  long long v13 = sub_100132EFC(v31, (uint64_t)", vacc, ", 8);
  uint64_t v14 = *v13;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 - 24) + 16) = 1;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v15 = sub_100132EFC(v31, (uint64_t)", reach, ", 9);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 16) = 0;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  unsigned int v17 = sub_100132EFC(v31, (uint64_t)", stationaryTime, ", 18);
  uint64_t v18 = *v17;
  *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + 16) = 1;
  *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v19 = sub_100132EFC(v31, (uint64_t)", loiType, ", 11);
  int v20 = *(char *)(a1 + 111);
  if (v20 >= 0) {
    uint64_t v21 = a1 + 88;
  }
  else {
    uint64_t v21 = *(void *)(a1 + 88);
  }
  if (v20 >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a1 + 111);
  }
  else {
    uint64_t v22 = *(void *)(a1 + 96);
  }
  sub_100132EFC(v19, v21, v22);
  uint64_t v23 = sub_100132EFC(v31, (uint64_t)", lastUpdated, ", 15);
  uint64_t v24 = *v23;
  *(uint64_t *)((char *)v23 + *(void *)(*v23 - 24) + 16) = 1;
  *(_DWORD *)((char *)v23 + *(void *)(v24 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v25 = sub_100132EFC(v31, (uint64_t)", age, ", 7);
  uint64_t v26 = *v25;
  *(uint64_t *)((char *)v25 + *(void *)(*v25 - 24) + 16) = 1;
  *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  CFAbsoluteTimeGetCurrent();
  uint64_t v27 = (void *)std::ostream::operator<<();
  sub_100132EFC(v27, (uint64_t)"s", 1);
  std::stringbuf::str();
  *(void *)((char *)v30
  v31[0] = v28;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10131901C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013192CC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v20 = v19 + 1;
        if (v19 == -1 || v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0) {
          goto LABEL_32;
        }
        v16 += 7;
        BOOL v10 = v17++ >= 9;
        if (v10)
        {
          LODWORD(v18) = 0;
          goto LABEL_34;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v18) = 0;
      }
LABEL_34:
      *(_DWORD *)(a1 + 16) = v18;
    }
    else if ((v6 >> 3) == 1)
    {
      unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
      }
      else
      {
        *(unsigned char *)(a2 + v11) = 1;
        uint64_t v15 = 0;
      }
      *(void *)(a1 + 8) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_101319984(id a1)
{
  qword_102487010 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBatchedDeviceMotionServiceSilo"];
}

void sub_101319AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101319F14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_10131A394(id a1)
{
  qword_102419318 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void sub_10131A3C8()
{
}

void *sub_10131A3DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10231FF10;
  result[1] = v3;
  return result;
}

uint64_t sub_10131A424(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231FF10;
  a2[1] = v2;
  return result;
}

id sub_10131A450(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return _[*(id *)(a1 + 8) onBatchedData:a2 N:*a3];
}

uint64_t sub_10131A460(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231FF80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10131A4A0()
{
  return &off_10231FF80;
}

uint64_t sub_10131A4AC()
{
  sub_100134750(qword_102486FD0, "Acc800Fp");
  dword_102486FE8 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102486FD0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_102486FF0, "DmFp");
  dword_102487008 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, &xmmword_102486FF0, (void *)&_mh_execute_header);
}

void sub_10131A554(uint64_t a1, uint64_t a2, long long *a3, int a4, double a5)
{
  *(void *)a1 = off_10231FFA0;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  *(void *)(a1 + 80) = 0;
  *(double *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(CFAbsoluteTime *)(a1 + 88) = CFAbsoluteTimeGetCurrent() + a5;
  sub_1000E9354(a1 + 96);
  operator new();
}

void sub_10131A728()
{
}

void sub_10131A774(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231FFC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    char v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerProactiveLocationRequestMonitor::onTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231FFC0);
    }
    unsigned int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      long long v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerProactiveLocationRequestMonitor::onTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  if (*(void *)(a2 + 24) == a1) {
    sub_10131A950(a2);
  }
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_10131A930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10131A950(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = 0;
  *(CFAbsoluteTime *)(a1 + 88) = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 56);
  *(void *)(a1 + 80) = 0;
  if (*(unsigned char *)(a1 + 72)) {
    *(unsigned char *)(a1 + 72) = 0;
  }
  sub_10131AA4C(a1);
  sub_1001B0AE4(*(void *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 24);
  double v3 = *(double *)(a1 + 88);

  return sub_1001165F8(v2, v3);
}

double sub_10131A9BC(uint64_t a1, double result)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 20);
  if (v3)
  {
    double v4 = *(double *)(a1 + 80);
    double v5 = *(double *)(a1 + 88);
    if (v4 <= v5)
    {
      uint64_t result = v4 + (v5 - v4) / (double)v3;
      *(double *)(a1 + 64) = result;
      *(unsigned char *)(a1 + 72) = 1;
    }
    else
    {
      sub_10131ABC8(a1, OS_LOG_TYPE_ERROR);
      sub_10131A950(a1);
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 0;
  }
  return result;
}

uint64_t sub_10131AA4C(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  sub_1004D2BC4(a1 + 96, "currentRequests", (unsigned int *)(a1 + 20));
  sub_10016332C(v2, "nextResetTime", (const void *)(a1 + 88));
  sub_10016332C(v2, "lastRequestTime", (const void *)(a1 + 80));
  uint64_t v3 = sub_1000A6958();
  double v4 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    double v4 = *(const char **)v4;
  }
  sub_1004D3878(v3, v4, v2);
  double v5 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v5();
}

uint64_t sub_10131AB14(uint64_t a1)
{
  *(void *)a1 = off_10231FFA0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    sub_100998C38(v2);
    operator delete();
  }
  sub_10013F3C4(a1 + 96);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_10131AB90(uint64_t a1)
{
  sub_10131AB14(a1);

  operator delete();
}

void sub_10131ABC8(uint64_t a1, os_log_type_t type)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10231FFE0);
  }
  double v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, type))
  {
    BOOL v5 = sub_10131ADD8(a1);
    unint64_t v6 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v6 = (void *)*v6;
    }
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    uint64_t v7 = *(unsigned int *)(a1 + 20);
    unint64_t v9 = (unint64_t)*(double *)(a1 + 56);
    if (*(unsigned char *)(a1 + 72)) {
      unint64_t v10 = *(void *)(a1 + 64);
    }
    else {
      unint64_t v10 = 0xBFF0000000000000;
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v12 = *(double *)(a1 + 80);
    uint64_t v13 = *(void *)(a1 + 88);
    v14[0] = 68291843;
    v14[1] = 0;
    __int16 v15 = 2082;
    char v16 = "";
    __int16 v17 = 1025;
    BOOL v18 = v5;
    __int16 v19 = 2081;
    unint64_t v20 = v6;
    __int16 v21 = 2049;
    uint64_t v22 = v7;
    __int16 v23 = 2049;
    uint64_t v24 = v8;
    __int16 v25 = 2049;
    uint64_t v26 = (v8 - v7);
    __int16 v27 = 2049;
    unint64_t v28 = v9;
    __int16 v29 = 2049;
    unint64_t v30 = v10;
    __int16 v31 = 2049;
    double v32 = Current - v12;
    __int16 v33 = 2049;
    double v34 = v12;
    __int16 v35 = 2049;
    uint64_t v36 = v13;
    __int16 v37 = 2050;
    uint64_t v38 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, type, "{\"msg%{public}.0s\":\"Proactive Request Monitor Status\", \"isAllowedProactiveRequest\":%{private}hhd, \"identifier\":%{private, location:escape_only}s, \"fCurrentRequests\":%{private}lu, \"fMaxRequests\":%{private}lu, \"remainingRequests\":%{private}lu, \"fResetInterval\":%{private}lu, \"fTimeToWaitUntilForNextRequest\":\"%{private}f\", \"timeSinceLastRequest\":\"%{private}f\", \"fLastRequestTime\":\"%{private}f\", \"fNextResetTime\":\"%{private}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v14, 0x7Cu);
  }
}

BOOL sub_10131AD84(uint64_t a1)
{
  BOOL v2 = sub_10131ADD8(a1);
  if (v2)
  {
    ++*(_DWORD *)(a1 + 20);
    double Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 80) = Current;
    sub_10131A9BC(a1, Current);
    sub_10131AA4C(a1);
  }
  return v2;
}

BOOL sub_10131ADD8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return 1;
  }
  return CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 64) || *(unsigned char *)(a1 + 72) == 0;
}

id sub_10131AE34(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 16) = a2;
  return sub_10131A950(a1);
}

void sub_10131AE3C(uint64_t a1)
{
}

void sub_10131AE44(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10131AE74(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_10131AEA4()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_10131AF20()
{
}

uint64_t sub_10131AF44()
{
  if (qword_102487020 != -1) {
    dispatch_once(&qword_102487020, &stru_102320000);
  }
  return qword_10248D288;
}

void sub_10131AF90(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

double sub_10131AFC8(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320088);
    }
    double v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned int buf = 67240192;
      LODWORD(v15) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320088);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMonitor::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (*a3 <= 0.0) {
      unint64_t v9 = &off_1023945E0;
    }
    else {
      unint64_t v9 = &off_1023945C8;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320088);
    }
    unint64_t v10 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      double v11 = *a3;
      *(_DWORD *)unsigned int buf = 134349314;
      double v15 = v11;
      __int16 v16 = 2114;
      __int16 v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryMonitor] Setting update interval to %{public}f, reportInterval %{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320088);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMonitor::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), @"ReportInterval", v9);
    return *a3;
  }
  return v5;
}

void sub_10131B358()
{
  if (IOHIDEventGetType() == 1)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320088);
    }
    v0 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned int buf = 134349312;
      uint64_t v4 = 0;
      __int16 v5 = 2048;
      uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] invalid message: empty message %{public}p (%zd)", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320088);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryMonitor::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v1);
    if (v1 == (char *)buf) {
      return;
    }
LABEL_19:
    free(v1);
    return;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_102320088);
  }
  BOOL v2 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)unsigned int buf = 67240192;
    LODWORD(v4) = IOHIDEventGetType();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] unexpected event type %{public}u", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320088);
    }
    IOHIDEventGetType();
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryMonitor::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v1);
    if (v1 != (char *)buf) {
      goto LABEL_19;
    }
  }
}

void sub_10131B6CC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, double a4)
{
  if (a3 <= 7)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320088);
    }
    __int16 v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned int buf = 134349312;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = 8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] invalid message: length (%{public}zd) is smaller than header (%{public}zd)", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }
  unint64_t v7 = *((unsigned __int16 *)a2 + 1);
  if (v7 >= a3)
  {
    if (*a2 - 18 > 0xFFFFFFFB)
    {
      if (a2[1] < 0x10u)
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102320088);
        }
        BOOL v18 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
        {
          int v19 = a2[1];
          int v20 = a2[4];
          *(_DWORD *)unsigned int buf = 67240962;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v20;
          *(_WORD *)&buf[14] = 1040;
          *(_DWORD *)&buf[16] = v7 - 8;
          *(_WORD *)&buf[20] = 2098;
          *(void *)&buf[22] = a2 + 8;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[AccessoryMonitor] event type %{public}d, seq %{public}u, payload bytes %{public}.*P", buf, 0x1Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_102320088);
          }
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryMonitor::onMonitorEvent(const uint8_t *const, const size_t, const CFTimeInterval)", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
        }
        uint64_t v33 = 0;
        long long v32 = 0u;
        long long v31 = 0u;
        long long v30 = 0u;
        long long v29 = 0u;
        long long v28 = 0u;
        long long v27 = 0u;
        long long v26 = 0u;
        long long v25 = 0u;
        long long v24 = 0u;
        memset(&buf[8], 0, 32);
        *(double *)unsigned int buf = a4;
        bzero(&buf[8], 0xB1uLL);
        if (a3 >= 0xB1) {
          size_t v21 = 177;
        }
        else {
          size_t v21 = a3;
        }
        memcpy(&buf[8], a2, v21);
        sub_1000E7BA0(a1, 0, (uint64_t)buf, 192);
        return;
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320088);
      }
      uint64_t v13 = qword_1024190E8;
      sub_100103240();
      if (sub_10073E30C()) {
        os_log_type_t v14 = OS_LOG_TYPE_FAULT;
      }
      else {
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      }
      if (os_log_type_enabled(v13, v14))
      {
        int v15 = a2[1];
        *(_DWORD *)unsigned int buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[AccessoryMonitor] invalid message: unknown type (%{public}d), dropping", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1) {
        goto LABEL_39;
      }
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320088);
      }
      unint64_t v10 = qword_1024190E8;
      sub_100103240();
      if (sub_10073E30C()) {
        os_log_type_t v11 = OS_LOG_TYPE_FAULT;
      }
      else {
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
      }
      if (os_log_type_enabled(v10, v11))
      {
        int v12 = *a2;
        *(_DWORD *)unsigned int buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = 17;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[AccessoryMonitor] invalid message: mismatched version (local:%{public}d remote:%{public}d), dropping", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1) {
        goto LABEL_39;
      }
    }
    dispatch_once(&qword_1024190E0, &stru_102320088);
LABEL_39:
    sub_100103240();
    sub_10073E30C();
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryMonitor::onMonitorEvent(const uint8_t *const, const size_t, const CFTimeInterval)", "%s\n", v9);
    if (v9 != buf) {
      goto LABEL_17;
    }
    return;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_102320088);
  }
  uint64_t v8 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)unsigned int buf = 134349312;
    *(void *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] invalid message: length (%{public}zd) is smaller than reported message size (%{public}d)", buf, 0x12u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024190E0 == -1) {
    goto LABEL_16;
  }
LABEL_55:
  dispatch_once(&qword_1024190E0, &stru_102320088);
LABEL_16:
  unint64_t v9 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryMonitor::onMonitorEvent(const uint8_t *const, const size_t, const CFTimeInterval)", "%s\n", v9);
  if (v9 != buf) {
LABEL_17:
  }
    free(v9);
}

void sub_10131BEC0(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_10131BFA0(id a1)
{
  qword_102487030 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSensorRecorderNotifierSilo"];
}

uint64_t sub_10131C060(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10131CD88;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102487050 != -1) {
    dispatch_once(&qword_102487050, block);
  }
  return qword_10248D290;
}

uint64_t sub_10131C310(uint64_t a1)
{
  uint64_t result = sub_10131C33C(*(_DWORD *)(a1 + 32));
  if (result) {
    byte_102487040 = 1;
  }
  return result;
}

uint64_t sub_10131C33C(unsigned int a1)
{
  unint64_t v2 = sub_1000A16E8();
  uint64_t result = sub_10016E644(a1);
  if (result)
  {
    if (a1 == 2)
    {
      if ((v2 & 0x10000000) != 0) {
        return (sub_10074157C() >> 4) & 1;
      }
      else {
        return 0;
      }
    }
    else if (a1 == 1)
    {
      return (~v2 & 0x10040000) == 0;
    }
    else
    {
      return (v2 >> 28) & 1;
    }
  }
  return result;
}

uint64_t sub_10131C434(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v17 = a3;
  if (a3 >= 0x65)
  {
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_102320268);
    }
    uint64_t v4 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned int buf = 67240448;
      unsigned int v23 = a3;
      __int16 v24 = 1026;
      int v25 = 100;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "requested sampling rate of %{public}d is greater than the max allowed of %{public}d", buf, 0xEu);
    }
    uint64_t v5 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      int v18 = 67240448;
      unsigned int v19 = a3;
      __int16 v20 = 1026;
      int v21 = 100;
LABEL_37:
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSensorRecorderNotifier::setSensorSampleRate(CLSensorRecorder_Types::DataType, unsigned int)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
    return v5;
  }
  switch(a2)
  {
    case 2u:
      uint64_t v8 = (unsigned int *)(a1 + 320);
      CFStringRef v9 = @"kPressureSampleRate";
      goto LABEL_16;
    case 1u:
      uint64_t v8 = (unsigned int *)(a1 + 308);
      CFStringRef v9 = @"kGyroSampleRate";
      goto LABEL_16;
    case 0u:
      uint64_t v8 = (unsigned int *)(a1 + 300);
      CFStringRef v9 = @"kAccelSampleRate";
LABEL_16:
      qword_102487058 = (uint64_t)v9;
      if (*v8 != a3)
      {
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_102320268);
        }
        unint64_t v10 = qword_102419118;
        if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unsigned int buf = 67109120;
          unsigned int v23 = a3;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setting desired accel sampling rate to %dhz", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419110 != -1) {
            dispatch_once(&qword_102419110, &stru_102320268);
          }
          int v18 = 67109120;
          unsigned int v19 = a3;
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::setSensorSampleRate(CLSensorRecorder_Types::DataType, unsigned int)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        unsigned int *v8 = a3;
        uint64_t v11 = sub_1000A6958();
        sub_1004D2C30(v11, (const __CFString *)qword_102487058, &v17);
        uint64_t v12 = *(void *)sub_1000A6958();
        (*(void (**)(void))(v12 + 944))();
      }
      uint64_t v5 = 1;
      sub_10131EF78(a1, a2, 1, 129600.0);
      return v5;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102320288);
  }
  uint64_t v13 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unsigned int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Invalid data type.", buf, 2u);
  }
  uint64_t v5 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102320288);
    }
    LOWORD(v18) = 0;
    goto LABEL_37;
  }
  return v5;
}

void sub_10131CD88()
{
}

void sub_10131CDD4()
{
}

void sub_10131CDF8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10131D90C(a1, "CLSensorRecorderNotifier", a2);
  *(void *)uint64_t v3 = off_1023200F8;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(a1 + 184) = [*(id *)(v3 + 40) newTimer];
  *(void *)(a1 + 192) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 200) = [*(id *)(a1 + 40) newTimer];
  id v4 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = v4;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(int64x2_t *)(a1 + 240) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_OWORD *)(a1 + 264) = xmmword_101DB3B10;
  *(_OWORD *)(a1 + 280) = xmmword_101DB3B10;
  *(_OWORD *)(a1 + 296) = xmmword_101DB3B20;
  *(_DWORD *)(a1 + 312) = -1;
  if (sub_100744514()) {
    int v5 = 100;
  }
  else {
    int v5 = 25;
  }
  *(_DWORD *)(a1 + 316) = v5;
  *(_DWORD *)(a1 + 320) = v5;
  *(void *)(a1 + 324) = 0;
  *(void *)(a1 + 329) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  operator new();
}

void sub_10131D6EC(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 352);
  *(void *)(v1 + 352) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v1 + 328);
  *(void *)(v1 + 328) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)(v4 - 184) = v2;
  sub_1001DCABC((void ***)(v4 - 184));
  sub_10131EDF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10131D90C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1023202B8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10131D99C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10131D9B8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  double v6 = a1;
  uint64_t v7 = a4;
  int v8 = a6;
  operator new[]();
}

void sub_10131DB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  if (a26) {
    sub_1000DB0A0(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10131DB28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 100);
  switch(v3)
  {
    case 5:
      sub_1009FF48C(v2[22], a1 + 40);
      id v4 = [objc_alloc((Class)CLSensorRecorderSensorMeta) initWithDataType:2];
      [v4 setDataSize:*(unsigned int *)(a1 + 96)];
      [v4 setTimestamp:*(void *)(a1 + 80)];
      [v4 setStartTime:*(double *)(a1 + 88)];
      unsigned int v17 = +[NSMutableData dataWithCapacity:20];
      +[CLSensorRecorderSensorMetaSerializer serializeMeta:v4 toData:v17];
      uint64_t v18 = *(unsigned int *)(a1 + 56);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      uint64_t v7 = v18 + 20;
      unsigned int v19 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        uint64_t v21 = *(void *)(a1 + 48);
        int v22 = *(_DWORD *)(a1 + 56);
        int v53 = 134349568;
        uint64_t v54 = v20;
        __int16 v55 = 2050;
        uint64_t v56 = v21;
        __int16 v57 = 1026;
        int v58 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Attempting to write pressure. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", (uint8_t *)&v53, 0x1Cu);
      }
      uint64_t v23 = sub_10013D1A0(115, 2);
      if (v23)
      {
        bzero(&v53, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_102320268);
        }
        uint64_t v39 = *(void *)(a1 + 40);
        uint64_t v40 = *(void *)(a1 + 48);
        int v41 = *(_DWORD *)(a1 + 56);
        int v47 = 134349568;
        uint64_t v48 = v39;
        __int16 v49 = 2050;
        uint64_t v50 = v40;
        __int16 v51 = 1026;
        int v52 = v41;
        __int16 v42 = (char *)_os_log_send_and_compose_impl();
        uint64_t v23 = sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v42);
        if (v42 != (char *)&v53) {
          free(v42);
        }
      }
      uint64_t v13 = (char *)&v47 - ((v7 + 15) & 0x3FFFFFFF0);
      __int16 v24 = [(NSMutableData *)v17 bytes];
      int v25 = v24[4];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v24;
      *((_DWORD *)v13 + 4) = v25;
      memcpy(v13 + 20, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 96));
      __int16 v16 = (void *)v2[16];
      break;
    case 2:
      sub_1009FF48C(v2[21], a1 + 40);
      id v4 = [objc_alloc((Class)CLSensorRecorderSensorMeta) initWithDataType:1];
      [v4 setDataSize:*(unsigned int *)(a1 + 96)];
      [v4 setTimestamp:*(void *)(a1 + 80)];
      [v4 setStartTime:*(double *)(a1 + 88)];
      long long v26 = +[NSMutableData dataWithCapacity:20];
      +[CLSensorRecorderSensorMetaSerializer serializeMeta:v4 toData:v26];
      uint64_t v27 = *(unsigned int *)(a1 + 56);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      uint64_t v7 = v27 + 20;
      long long v28 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void *)(a1 + 40);
        uint64_t v30 = *(void *)(a1 + 48);
        int v31 = *(_DWORD *)(a1 + 56);
        int v53 = 134349568;
        uint64_t v54 = v29;
        __int16 v55 = 2050;
        uint64_t v56 = v30;
        __int16 v57 = 1026;
        int v58 = v31;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Attempting to write gyro sample. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", (uint8_t *)&v53, 0x1Cu);
      }
      uint64_t v32 = sub_10013D1A0(115, 2);
      if (v32)
      {
        bzero(&v53, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_102320268);
        }
        uint64_t v43 = *(void *)(a1 + 40);
        uint64_t v44 = *(void *)(a1 + 48);
        int v45 = *(_DWORD *)(a1 + 56);
        int v47 = 134349568;
        uint64_t v48 = v43;
        __int16 v49 = 2050;
        uint64_t v50 = v44;
        __int16 v51 = 1026;
        int v52 = v45;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        uint64_t v32 = sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v46);
        if (v46 != (char *)&v53) {
          free(v46);
        }
      }
      uint64_t v13 = (char *)&v47 - ((v7 + 15) & 0x3FFFFFFF0);
      uint64_t v33 = [(NSMutableData *)v26 bytes];
      int v34 = v33[4];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v33;
      *((_DWORD *)v13 + 4) = v34;
      memcpy(v13 + 20, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 96));
      __int16 v16 = (void *)v2[15];
      break;
    case 1:
      sub_1009FF48C(v2[20], a1 + 40);
      id v4 = [objc_alloc((Class)CLSensorRecorderSensorMeta) initWithDataType:0];
      [v4 setDataSize:*(unsigned int *)(a1 + 96)];
      [v4 setTimestamp:*(void *)(a1 + 80)];
      [v4 setStartTime:*(double *)(a1 + 88)];
      int v5 = +[NSMutableData dataWithCapacity:20];
      +[CLSensorRecorderSensorMetaSerializer serializeMeta:v4 toData:v5];
      uint64_t v6 = *(unsigned int *)(a1 + 56);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      uint64_t v7 = v6 + 20;
      int v8 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(void *)(a1 + 48);
        int v11 = *(_DWORD *)(a1 + 56);
        int v53 = 134349568;
        uint64_t v54 = v9;
        __int16 v55 = 2050;
        uint64_t v56 = v10;
        __int16 v57 = 1026;
        int v58 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Attempting to write accel sample. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", (uint8_t *)&v53, 0x1Cu);
      }
      uint64_t v12 = sub_10013D1A0(115, 2);
      if (v12)
      {
        bzero(&v53, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_102320268);
        }
        uint64_t v35 = *(void *)(a1 + 40);
        uint64_t v36 = *(void *)(a1 + 48);
        int v37 = *(_DWORD *)(a1 + 56);
        int v47 = 134349568;
        uint64_t v48 = v35;
        __int16 v49 = 2050;
        uint64_t v50 = v36;
        __int16 v51 = 1026;
        int v52 = v37;
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        uint64_t v12 = sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v38);
        if (v38 != (char *)&v53) {
          free(v38);
        }
      }
      uint64_t v13 = (char *)&v47 - ((v7 + 15) & 0x3FFFFFFF0);
      os_log_type_t v14 = [(NSMutableData *)v5 bytes];
      int v15 = v14[4];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((_DWORD *)v13 + 4) = v15;
      memcpy(v13 + 20, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 96));
      __int16 v16 = (void *)v2[14];
      break;
    default:
      return;
  }
  [v16 provideSampleBytes:v13 length:v7];
}

uint64_t sub_10131E2FC(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = v2;
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10131E328(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_10131E338(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ([*(id *)(v1 + 120) isMonitoring]) {
    sub_10131C434(v1, 1u, 0x64u);
  }
  if (sub_100082064(*(void *)(v1 + 168) + 72))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100027DC0(v1, 1u);
    if (vabdd_f64(Current, *(double *)(v1 + 248)) > *(double *)(v1 + 264))
    {
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      uint64_t v3 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)unsigned int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Aggregating gyro sensor recorder samples.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_102320268);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      uint64_t v4 = *(void *)(v1 + 272);
      int v5 = operator new(0x18uLL);
      *(void *)unsigned int buf = v5;
      uint64_t v9 = (char *)(v5 + 3);
      void *v5 = v4;
      v5[1] = 0x7FEFFFFFFFFFFFFFLL;
      *((unsigned char *)v5 + 16) = 0;
      int v8 = v5 + 3;
      (*(void (**)(void, uint8_t *))(**(void **)(v1 + 168) + 32))(*(void *)(v1 + 168), buf);
      *(double *)(v1 + 248) = Current;
      if (*(void *)buf)
      {
        int v8 = *(void **)buf;
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_10131E598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10131E5BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ([*(id *)(v1 + 128) isMonitoring])
  {
    if (sub_100744514()) {
      unsigned int v2 = 100;
    }
    else {
      unsigned int v2 = 25;
    }
    sub_10131C434(v1, 2u, v2);
  }
  if (sub_100082064(*(void *)(v1 + 176) + 72))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100027DC0(v1, 2u);
    if (vabdd_f64(Current, *(double *)(v1 + 256)) > *(double *)(v1 + 264))
    {
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      uint64_t v4 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)unsigned int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Aggregating pressure sensor recorder samples.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_102320268);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t v5 = *(void *)(v1 + 272);
      uint64_t v6 = operator new(0x18uLL);
      *(void *)unsigned int buf = v6;
      uint64_t v10 = (char *)(v6 + 3);
      void *v6 = v5;
      v6[1] = 0x7FEFFFFFFFFFFFFFLL;
      *((unsigned char *)v6 + 16) = 0;
      uint64_t v9 = v6 + 3;
      (*(void (**)(void, uint8_t *))(**(void **)(v1 + 176) + 32))(*(void *)(v1 + 176), buf);
      *(double *)(v1 + 256) = Current;
      if (*(void *)buf)
      {
        uint64_t v9 = *(void **)buf;
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_10131E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10131E84C(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320228);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorRecorderNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      os_log_type_t v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorRecorderNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 3)
  {
    *(unsigned char *)(a4 + 336) = *a3;
  }
  else if (!*a2)
  {
    *(unsigned char *)(a4 + 324) = a3[3];
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10131EA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10131EA38(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320228);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorRecorderNotifier::onSysdiagnoseStarted", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorRecorderNotifier::onSysdiagnoseStarted\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  if (*(unsigned char *)(a4 + 336) && *a2 == 9) {
    sub_10131FD20(a4);
  }
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10131EBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10131EC1C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320228);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_10131FFDC((uint64_t *)a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10131EDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10131EDF0(uint64_t a1)
{
  *(void *)a1 = off_1023202B8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10131EE74(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 2:
      uint64_t v4 = a1 + 22;
      return sub_100A00564(*v4, a3, a4);
    case 1:
      uint64_t v4 = a1 + 21;
      return sub_100A00564(*v4, a3, a4);
    case 0:
      uint64_t v4 = a1 + 20;
      return sub_100A00564(*v4, a3, a4);
  }
  return 0;
}

uint64_t sub_10131EEB4(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 2:
      uint64_t v4 = a1 + 22;
      return sub_100A01168(*v4, a3, a4);
    case 1:
      uint64_t v4 = a1 + 21;
      return sub_100A01168(*v4, a3, a4);
    case 0:
      uint64_t v4 = a1 + 20;
      return sub_100A01168(*v4, a3, a4);
  }
  return 0;
}

uint64_t sub_10131EEF4(uint64_t *a1, int a2, double a3, double a4)
{
  switch(a2)
  {
    case 2:
      uint64_t v4 = a1 + 22;
      return sub_100A01AB0(*v4, a3, a4);
    case 1:
      uint64_t v4 = a1 + 21;
      return sub_100A01AB0(*v4, a3, a4);
    case 0:
      uint64_t v4 = a1 + 20;
      return sub_100A01AB0(*v4, a3, a4);
  }
  return 0;
}

uint64_t sub_10131EF30(uint64_t *a1, int a2, void *a3, uint64_t a4)
{
  switch(a2)
  {
    case 2:
      uint64_t v4 = a1 + 22;
      return sub_100A00BF8(*v4, a3, a4);
    case 1:
      uint64_t v4 = a1 + 21;
      return sub_100A00BF8(*v4, a3, a4);
    case 0:
      uint64_t v4 = a1 + 20;
      return sub_100A00BF8(*v4, a3, a4);
  }
  return 0;
}

BOOL sub_10131EF70(uint64_t a1, unsigned int a2, double a3)
{
  return sub_10131EF78(a1, a2, 0, a3);
}

BOOL sub_10131EF78(uint64_t a1, unsigned int a2, int a3, double a4)
{
  BOOL v8 = sub_10016E644(a2);
  if (v8)
  {
    *(double *)&unint64_t v20 = -1.79769313e308;
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_102320268);
    }
    char v9 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v26 = 2050;
      double v27 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Record %{location:CLSensorRecorder_Types::DataType,public}d data for %{public}f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      int v21 = 67240448;
      unsigned int v22 = a2;
      __int16 v23 = 2050;
      double v24 = a4;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::recordSensorData(CLSensorRecorder_Types::DataType, CFTimeInterval, BOOL)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    CFStringRef v10 = @"kPressureBufferSubscription";
    if (a3) {
      CFStringRef v10 = @"kPressureBufferSubscriptionOverride";
    }
    CFStringRef v11 = @"kGyroBufferSubscription";
    if (a3) {
      CFStringRef v11 = @"kGyroBufferSubscriptionOverride";
    }
    CFStringRef v12 = @"kAccelBufferSubscription";
    if (a3) {
      CFStringRef v12 = @"kAccelBufferSubscriptionOverride";
    }
    if (a2) {
      CFStringRef v12 = 0;
    }
    if (a2 != 1) {
      CFStringRef v11 = v12;
    }
    if (a2 == 2) {
      CFStringRef v13 = v10;
    }
    else {
      CFStringRef v13 = v11;
    }
    uint64_t v14 = sub_1000A6958();
    sub_1000A6A10(v14, (uint64_t)v13, &v20);
    if (a4 >= 129600.0) {
      a4 = 129600.0;
    }
    double v15 = *(double *)&v20;
    if (v15 < a4 + CFAbsoluteTimeGetCurrent())
    {
      uint64_t v16 = sub_1000A6958();
      *(double *)unsigned int buf = a4 + CFAbsoluteTimeGetCurrent();
      sub_100163398(v16, v13, buf);
      uint64_t v17 = *(void *)sub_1000A6958();
      (*(void (**)(void))(v17 + 944))();
      sub_100027DC0(a1, a2);
    }
  }
  return v8;
}

uint64_t sub_10131F274(uint64_t a1)
{
  double v3 = __chkstk_darwin(a1);
  double v5 = v4;
  double v6 = v3;
  BOOL v8 = v7;
  if (v2 == 2)
  {
    char v9 = v1 + 22;
  }
  else if (v2 == 1)
  {
    char v9 = v1 + 21;
  }
  else
  {
    if (v2) {
      return 0;
    }
    char v9 = v1 + 20;
  }
  uint64_t v10 = *v9;
  id v11 = objc_alloc_init((Class)NSMutableArray);
  if ((sub_100A01AB0(v10, v6, v5) & 1) == 0)
  {
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_102320268);
    }
    unsigned int v19 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int buf = 134283777;
      double v52 = v6;
      __int16 v53 = 2049;
      double v54 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Error accessing sensor recorder data from %{private}f, %{private}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      *(_DWORD *)uint64_t v46 = 134283777;
      double v47 = v6;
      __int16 v48 = 2049;
      *(double *)__int16 v49 = v5;
      double v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }

    return 0;
  }
  v36[0] = 0;
  v36[1] = buf;
  uint64_t v37 = 147456;
  id obj = v11;
  int v31 = objc_alloc_init(CLSensorRecorderSensorMetaSerializer);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v12 = [v11 countByEnumeratingWithState:&v32 objects:v50 count:16];
  if (v12)
  {
    id v13 = v12;
    int v14 = 0;
    uint64_t v15 = *(void *)v33;
    while (2)
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(void *)v33 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        if (!v36[0]
          || (id v18 = [*(id *)(*((void *)&v32 + 1) + 8 * i) dataIdentifier], v18 != (id)v36[0]))
        {
          ++v14;
          v36[0] = [v17 dataIdentifier];
          LODWORD(v37) = 147456;
          if ((sub_100A00BF8(v10, v36, (uint64_t)[v17 identifier]) & 1) == 0)
          {
            if (qword_102419110 != -1) {
              dispatch_once(&qword_102419110, &stru_102320268);
            }
            int v21 = qword_102419118;
            if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
            {
              id v22 = [v17 dataIdentifier];
              *(_DWORD *)uint64_t v46 = 134283521;
              double v47 = *(double *)&v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Error occurred while retrieving data record %{private}llu", v46, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(v46, 0x65CuLL);
              if (qword_102419110 != -1) {
                dispatch_once(&qword_102419110, &stru_102320268);
              }
              id v23 = [v17 dataIdentifier];
              int v44 = 134283521;
              id v45 = v23;
              double v24 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)", "%s\n", v24);
              if (v24 != (char *)v46) {
                free(v24);
              }
            }
            goto LABEL_36;
          }
        }
        [(CLSensorRecorderSensorMetaSerializer *)v31 writeMeta:v17 toHandle:v8];
        [v8 writeData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &buf[objc_msgSend(v17, "offset")], objc_msgSend(v17, "dataSize"))];
      }
      id v13 = [obj countByEnumeratingWithState:&v32 objects:v50 count:16];
      if (v13) {
        continue;
      }
      break;
    }
  }
  else
  {
    int v14 = 0;
  }
LABEL_36:
  fcntl((int)[v8 fileDescriptor], 50, &v44);
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_102320268);
  }
  int v25 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
  {
    id v26 = [obj count];
    *(_DWORD *)uint64_t v46 = 134218498;
    double v47 = *(double *)&v26;
    __int16 v48 = 1024;
    *(_DWORD *)__int16 v49 = v14;
    *(_WORD *)&v49[4] = 2080;
    *(void *)&v49[6] = &v44;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Wrote %lu meta records across %d data containers to %s", v46, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v46, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_102320268);
    }
    id v28 = [obj count];
    int v38 = 134218498;
    id v39 = v28;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 2080;
    uint64_t v43 = &v44;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)", "%s\n", v29);
    if (v29 != (char *)v46) {
      free(v29);
    }
  }

  return 1;
}

void sub_10131F954(uint64_t a1)
{
  int v2 = (const void *)sub_1000D2E34(0);
  if (v2)
  {
    if (v3)
    {
      int v4 = *(_DWORD *)(a1 + 32);
      switch(v4)
      {
        case 2:
          int v6 = *(_DWORD *)(a1 + 36);
          sub_100592118((uint64_t)v3, v6);
          break;
        case 1:
          int v7 = *(_DWORD *)(a1 + 36);
          sub_100591F38((uint64_t)v3, v7);
          break;
        case 0:
          int v5 = *(_DWORD *)(a1 + 36);
          sub_100591D58((uint64_t)v3, v5);
          break;
      }
    }
  }
}

uint64_t sub_10131FA3C(uint64_t a1)
{
  *(void *)a1 = off_1023200F8;
  sub_10131FC18(a1);

  uint64_t v2 = *(void *)(a1 + 352);
  *(void *)(a1 + 352) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v6 = (void **)(a1 + 216);
  sub_1001DCABC(&v6);
  return sub_10131EDF0(a1);
}

void sub_10131FB64(uint64_t a1)
{
  sub_10131FA3C(a1);

  operator delete();
}

void *sub_10131FB9C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10131FC18(uint64_t a1)
{
  *(unsigned char *)(a1 + 108) = 1;
  [*(id *)(a1 + 184) invalidate];

  *(void *)(a1 + 184) = 0;
  [*(id *)(a1 + 192) invalidate];

  *(void *)(a1 + 192) = 0;
  [*(id *)(a1 + 200) invalidate];

  *(void *)(a1 + 200) = 0;
  [*(id *)(a1 + 208) invalidate];

  *(void *)(a1 + 208) = 0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  *(void *)(a1 + 160) = 0;
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(void *)(a1 + 168) = 0;
  uint64_t result = *(void *)(a1 + 176);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  *(void *)(a1 + 176) = 0;
  return result;
}

void sub_10131FD20(uint64_t a1)
{
  CFAbsoluteTimeGetCurrent();
  uint64_t v2 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  id v3 = objc_alloc_init((Class)NSDateFormatter);
  [v3 setDateFormat:@"yyyyMMdd_HH-mm-ss"];
  id v4 = [v3 stringFromDate:v2];
  sub_1012FAA88((uint64_t)__p);
  if (v10 >= 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  int v6 = +[NSString stringWithFormat:@"%s/CoreMotionDebug_SensorRecorder_%@_accel.dat", v5, v4];
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (![+[NSFileManager defaultManager](NSFileManager, "defaultManager") fileExistsAtPath:v6])[+[NSFileManager defaultManager] createFileAtPath:v6 contents:0 attributes:0]; {
  if (+[NSFileHandle fileHandleForWritingAtPath:v6])
  }
  {
    sub_10131F274(a1);
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102320288);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to dump sensor recorder (accel) to disk because fileHandle is nil.", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102320288);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSensorRecorderNotifier::writeAccelToDiskTriggeredBySysdiagnose()", "%s\n", v8);
      if (v8 != (char *)__p) {
        free(v8);
      }
    }
  }
}

void sub_10131FFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10131FFDC(uint64_t *result, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 6)
  {
    id v3 = result;
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_102320268);
    }
    id v4 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#CacheDelete - onSoftwareUpdateStorageRecovery - Flushing SensorRecorderDB", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_102320268);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_100A003F8(v3[20]);
    sub_100A003F8(v3[21]);
    sub_100A003F8(v3[22]);
    uint64_t v5 = v3[20];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    uint64_t v6 = v3[21];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    uint64_t v7 = v3[22];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    }
    operator new();
  }
  return result;
}

void sub_101320318(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10132038C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        char v9 = (uint64_t *)v4;
      }
      else {
        char v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)unsigned int buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320228);
      }
      char v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v11 = (void *)*v11;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        unsigned int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102320228);
        }
        id v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10132061C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1013206D0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101320718(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101320760(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1013207A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477578);
}

uint64_t sub_1013207D4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int16 v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)unsigned int buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)unsigned int buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1013223B8();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102477579;
        int v39 = v17;
        *(void *)unsigned int buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)unsigned int buf = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)unsigned int buf = &v39;
        long long v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)unsigned int buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)unsigned int buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320228);
  }
  int v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    uint64_t v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    *(_DWORD *)__int16 v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_101320C78(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      double v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320228);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101320EFC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102320228);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)unsigned int buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102320228);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1013212D0(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = *a3;
  uint64_t *v6 = (uint64_t)off_102320418;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_101321384(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101321398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1013213EC(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320228);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)unsigned int buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    int v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = (uint64_t)off_102320418;
    v18[3] = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_101322E68();
  }
  os_activity_scope_leave(&state);
}

void sub_1013219D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101321A1C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)unsigned int buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320228);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320228);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)unsigned int buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320228);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102320228);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)unsigned int buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102320228);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101321FC8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101321FF8()
{
  v0 = sub_10132204C();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorAccelerometer");
  if (v1)
  {
    uint64_t result = *v1;
    qword_102487060 = result;
  }
  else
  {
    uint64_t result = qword_102487060;
  }
  off_102477558[0] = sub_1013220A0;
  return result;
}

void *sub_10132204C()
{
  uint64_t result = (void *)qword_102487068;
  if (!qword_102487068)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/SensorKit.framework/SensorKit", 2);
    qword_102487068 = (uint64_t)result;
    if (!result)
    {
      uint64_t result = dlopen("/System/Library/PrivateFrameworks/SensorKit.framework/SensorKit", 2);
      qword_102487068 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t sub_1013220A0()
{
  return qword_102487060;
}

uint64_t sub_1013220AC()
{
  v0 = sub_10132204C();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorGyroscope");
  if (v1)
  {
    uint64_t result = *v1;
    qword_102487070 = result;
  }
  else
  {
    uint64_t result = qword_102487070;
  }
  off_102477560[0] = sub_101322100;
  return result;
}

uint64_t sub_101322100()
{
  return qword_102487070;
}

uint64_t sub_10132210C()
{
  v0 = sub_10132204C();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorElevationPressure");
  if (v1)
  {
    uint64_t result = *v1;
    qword_102487078 = result;
  }
  else
  {
    uint64_t result = qword_102487078;
  }
  off_102477568[0] = sub_101322160;
  return result;
}

uint64_t sub_101322160()
{
  return qword_102487078;
}

void sub_10132216C(id a1)
{
  qword_102419288 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

Class sub_10132219C()
{
  sub_10132204C();
  Class result = objc_getClass("SRSensorWriter");
  qword_102487080 = (uint64_t)result;
  off_102477570 = sub_1013221DC;
  return result;
}

uint64_t sub_1013221DC()
{
  return qword_102487080;
}

void sub_1013221E8(id a1)
{
  qword_102419118 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_101322218(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101322248(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1013222B0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_1013222D8(_Unwind_Exception *a1)
{
}

void sub_1013222EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101322324(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_101322344(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_101322388(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1013223B8()
{
}

unsigned char *sub_101322464(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10132257C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    int v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_10132255C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_10132257C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_101322618(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1013229A4(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_101322618(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101322D64((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1023203E8);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)unsigned int buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DB3D6BLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1023203E8);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DB3D6BLL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1023203E8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DB3D6BLL & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorRecorderNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1013229A4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023203E8);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB3D6BLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorRecorderNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023203E8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)unsigned int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB3D6BLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1023203E8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_101322D64(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394628))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_101AAE81C();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_101322DEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102320418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101322E0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102320418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101322E68()
{
}

void sub_101322F14(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int16 v49 = v9;
        id v13 = sub_10132257C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v48 = v19;
              sub_101322464(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int16 v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              __int16 v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102320228);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)unsigned int buf = 136446466;
                __int16 v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102320228);
                }
                id v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  id v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                __int16 v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_101323304(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

NSDictionary *sub_101323324()
{
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_1023980D0;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_1023980E8;
  _DWORD v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  v2[2] = &off_102398100;
  v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  v2[3] = &off_102398118;
  v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  v2[4] = &off_102398130;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102398148;
  v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  v2[6] = &off_102398160;
  uint64_t result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_102487028 = (uint64_t)result;
  return result;
}

void sub_101323528(id a1)
{
  qword_102487088 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBTLEBeaconProviderMockSilo"];
}

uint64_t sub_1013235E8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101324EA4;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024870A0 != -1) {
    dispatch_once(&qword_1024870A0, block);
  }
  return qword_102487098;
}

void sub_1013238C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10132395C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013238D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 136;
  uint64_t v4 = sub_1013277F8(a1 + 136, 0, 0, a2);
  uint64_t v5 = *(void *)(a1 + 136);
  *uint64_t v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *(void *)(a1 + 136) = v4;
  ++*(void *)(a1 + 152);
  if (*(unsigned char *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    uint64_t v6 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v6);
  }
}

uint64_t sub_10132395C(uint64_t a1)
{
  *(void *)(a1 + 40) = off_1022B3DE8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101323A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007898E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101323A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 112;
  uint64_t v4 = sub_101327704(a1 + 112, 0, 0, a2);
  uint64_t v5 = *(void *)(a1 + 112);
  *uint64_t v4 = v5;
  v4[1] = v3;
  *(void *)(v5 + 8) = v4;
  *(void *)(a1 + 112) = v4;
  ++*(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    uint64_t v6 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v6);
  }
}

uint64_t sub_101323B24(uint64_t a1, void *a2)
{
  uint64_t v3 = (char *)sub_101326D84(a1, "CLBTLEBeaconProviderMock-Notifier", a2);
  *(void *)uint64_t v3 = off_102320488;
  *(_WORD *)(v3 + 109) = 1;
  *((void *)v3 + 14) = v3 + 112;
  *((void *)v3 + 15) = v3 + 112;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 17) = v3 + 136;
  *((void *)v3 + 18) = v3 + 136;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 20) = v3 + 160;
  *((void *)v3 + 21) = v3 + 160;
  *((void *)v3 + 25) = 0;
  *((void *)v3 + 22) = 0;
  *((void *)v3 + 24) = v3 + 200;
  *((void *)v3 + 26) = 0;
  v6.version = 0;
  v6.info = v3;
  memset(&v6.retain, 0, 56);
  v6.perform = (void (__cdecl *)(void *))sub_101323C6C;
  *(void *)(a1 + 216) = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &v6);
  uint64_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, 0);
  *(void *)(a1 + 184) = v4;
  dispatch_source_set_timer(v4, 0, 0x3B9ACA00uLL, 0);
  return a1;
}

void sub_101323C34(_Unwind_Exception *a1)
{
  sub_101327408(v5, *(char **)(v1 + 200));
  sub_1003B2350(v4);
  sub_101326E38(v3);
  sub_101326F40(v2);
  sub_101326FB4(v1);
  _Unwind_Resume(a1);
}

void sub_101323C6C(uint64_t a1)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023205E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEBeaconProviderMock::onEventSource", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023205E0);
    }
    uint64_t v3 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      BOOL v11 = "";
      __int16 v12 = 2082;
      id v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEBeaconProviderMock::onEventSource\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  id v4 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101326E30;
  v5[3] = &unk_1022A3020;
  v5[4] = a1;
  [v4 sync:v5];
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101323E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101323E80(uint64_t a1)
{
  *(void *)a1 = off_102320488;
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 184));
  dispatch_release(*(dispatch_object_t *)(a1 + 184));
  sub_101323F20(a1);
  id v2 = *(const void **)(a1 + 216);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 216) = 0;
  }
  sub_101327408(a1 + 192, *(char **)(a1 + 200));
  sub_1003B2350((void *)(a1 + 160));
  sub_101326E38((uint64_t *)(a1 + 136));
  sub_101326F40((uint64_t *)(a1 + 112));

  return sub_101326FB4(a1);
}

void sub_101323F20(uint64_t a1)
{
  id v2 = (__CFRunLoop *)sub_1001C2710();
  if (CFRunLoopContainsSource(v2, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes))
  {
    uint64_t v3 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopRemoveSource(v3, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes);
  }
  *(unsigned char *)(a1 + 110) = 0;
}

void sub_101323F78(uint64_t a1)
{
  sub_101323E80(a1);

  operator delete();
}

uint64_t sub_101323FB4(uint64_t a1, uint64_t a2)
{
  id v4 = (uint64_t **)(a1 + 192);
  uint64_t v5 = sub_10078AD94(a1 + 192, a2);
  if ((void *)(a1 + 200) == v5)
  {
    uint64_t v9 = a2;
    uint64_t v5 = sub_10132748C(v4, a2, (uint64_t)&unk_101D0B290, &v9);
    int v6 = 1;
  }
  else
  {
    int v6 = *((_DWORD *)v5 + 18) + 1;
  }
  *((_DWORD *)v5 + 18) = v6;
  if (*(unsigned char *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    char v7 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v7);
  }
  return 1;
}

uint64_t sub_101324050(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 192);
  id v4 = sub_10078AD94(a1 + 192, a2);
  if ((void *)(a1 + 200) != v4)
  {
    int v5 = *((_DWORD *)v4 + 18);
    BOOL v6 = v5 != 0;
    int v7 = v5 - 1;
    if (v7 != 0 && v6) {
      *((_DWORD *)v4 + 18) = v7;
    }
    else {
      sub_1013276A0(v3, (uint64_t)v4);
    }
  }
  return 1;
}

void sub_1013240AC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_101327408(a1 + 192, *(char **)(a1 + 200));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
}

void sub_1013240E0(uint64_t a1, double a2)
{
  id v4 = (double *)operator new(0x18uLL);
  v4[2] = a2;
  uint64_t v5 = *(void *)(a1 + 160);
  *(void *)id v4 = v5;
  *((void *)v4 + 1) = a1 + 160;
  *(void *)(v5 + 8) = v4;
  *(void *)(a1 + 160) = v4;
  ++*(void *)(a1 + 176);
  if (*(unsigned char *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    BOOL v6 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v6);
  }
}

void sub_10132416C(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 184);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1013241F0;
  handler[3] = &unk_1022A3020;
  handler[4] = a1;
  dispatch_source_set_event_handler(v2, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 184));
}

uint64_t sub_1013241F0(uint64_t a1)
{
  return (*(uint64_t (**)(double))(**(void **)(a1 + 32) + 232))(1.0);
}

void sub_10132421C(uint64_t a1)
{
}

void sub_101324224(uint64_t a1)
{
  id v2 = (__CFRunLoop *)sub_1001C2710();
  if (!CFRunLoopContainsSource(v2, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes))
  {
    uint64_t v3 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopAddSource(v3, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes);
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    id v4 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v4);
  }
  *(unsigned char *)(a1 + 110) = 1;
}

void sub_10132428C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 109))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023206E0);
    }
    uint64_t v1 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v2 = *(void *)(a1 + 176);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Attempting to fulfill scan requests,%lu.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023206E0);
      }
      uint64_t v23 = *(void *)(a1 + 176);
      int v30 = 134217984;
      uint64_t v31 = v23;
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v24);
      if (v24 != (char *)&buf) {
        free(v24);
      }
    }
    uint64_t v3 = (void *)a1;
    id v4 = *(uint64_t **)(a1 + 168);
    if (v4 == (uint64_t *)(a1 + 160))
    {
      int v5 = 0;
    }
    else
    {
      int v5 = 0;
      do
      {
        if (v3[16])
        {
          *(void *)&long long buf = &buf;
          *((void *)&buf + 1) = &buf;
          uint64_t v33 = 0;
          uint64_t v34 = off_1022B3DE8;
          long long v35 = 0u;
          long long v36 = 0u;
          int v37 = off_1022B3DE8;
          long long __p = 0u;
          long long v39 = 0u;
          LODWORD(v40) = 1;
          char v41 = 1;
          uint64_t v6 = v3[15];
          if (&buf != (long long *)(v6 + 16)) {
            sub_101327068((uint64_t *)&buf, *(void *)(v6 + 24), v6 + 16);
          }
          int v30 = 0;
          (*(void (**)(uint64_t, int *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v30, &buf, 0, 0xFFFFFFFFLL, 0);
          sub_101324D3C(a1 + 112);
          int v37 = off_1022B3DE8;
          if (SBYTE7(v39) < 0) {
            operator delete((void *)__p);
          }
          uint64_t v34 = off_1022B3DE8;
          if (SBYTE7(v36) < 0) {
            operator delete((void *)v35);
          }
          sub_1007898E8((uint64_t *)&buf);
          uint64_t v3 = (void *)a1;
        }
        uint64_t v7 = *v4;
        int v8 = (uint64_t *)v4[1];
        *(void *)(v7 + 8) = v8;
        *(void *)v4[1] = v7;
        --v3[22];
        operator delete(v4);
        ++v5;
        id v4 = v8;
      }
      while (v8 != (uint64_t *)(a1 + 160));
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023206E0);
    }
    BOOL v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fulfilled scan requests,%d.", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023206E0);
      }
      int v30 = 67109120;
      LODWORD(v31) = v5;
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v25);
      if (v25 != (char *)&buf) {
        free(v25);
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023206E0);
    }
    __int16 v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 208);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Processing events for %lu proximity zones.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023206E0);
      }
      uint64_t v26 = *(void *)(a1 + 208);
      int v30 = 134217984;
      uint64_t v31 = v26;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v27);
      if (v27 != (char *)&buf) {
        free(v27);
      }
    }
    __int16 v14 = *(void **)(a1 + 192);
    if (v14 == (void *)(a1 + 200))
    {
      int v15 = 0;
    }
    else
    {
      int v15 = 0;
      uint64_t v29 = (uint64_t *)(a1 + 136);
      do
      {
        __int16 v16 = *(uint64_t **)(a1 + 144);
        while (v16 != v29)
        {
          if (v14 + 4 == v16 + 2
            || *((_DWORD *)v14 + 17) == *((_DWORD *)v16 + 13)
            && sub_100C84840((uint64_t)(v14 + 4), (uint64_t)(v16 + 2)))
          {
            *(void *)&long long buf = &buf;
            *((void *)&buf + 1) = &buf;
            uint64_t v33 = 0;
            uint64_t v34 = off_1022B3DE8;
            long long v35 = 0u;
            long long v36 = 0u;
            int v37 = off_1022B3DE8;
            long long __p = 0u;
            long long v39 = 0u;
            LODWORD(v40) = 1;
            char v41 = 1;
            std::string::operator=((std::string *)&v35, (const std::string *)v16 + 1);
            *((void *)&v36 + 1) = v16[6];
            std::string::operator=((std::string *)&__p, (const std::string *)(v16 + 8));
            *((void *)&v39 + 1) = v16[11];
            uint64_t v40 = v16[12];
            int v30 = 1;
            (*(void (**)(uint64_t, int *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v30, &buf, 0, 0xFFFFFFFFLL, 0);
            uint64_t v17 = *v16;
            int v18 = (uint64_t *)v16[1];
            *(void *)(v17 + 8) = v18;
            *(void *)v16[1] = v17;
            --*(void *)(a1 + 152);
            sub_101326EAC((uint64_t)(v16 + 2));
            operator delete(v16);
            int v37 = off_1022B3DE8;
            if (SBYTE7(v39) < 0) {
              operator delete((void *)__p);
            }
            uint64_t v34 = off_1022B3DE8;
            if (SBYTE7(v36) < 0) {
              operator delete((void *)v35);
            }
            ++v15;
            sub_1007898E8((uint64_t *)&buf);
            __int16 v16 = v18;
          }
          else
          {
            __int16 v16 = (uint64_t *)v16[1];
          }
        }
        unint64_t v19 = (void *)v14[1];
        if (v19)
        {
          do
          {
            int v20 = v19;
            unint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            int v20 = (void *)v14[2];
            BOOL v21 = *v20 == (void)v14;
            __int16 v14 = v20;
          }
          while (!v21);
        }
        __int16 v14 = v20;
      }
      while (v20 != (void *)(a1 + 200));
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023206E0);
    }
    int v22 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v15;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Processed %d proximity zone events.", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023206E0);
    }
    int v30 = 67109120;
    LODWORD(v31) = v15;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v10);
LABEL_80:
    if (v10 != (char *)&buf) {
      free(v10);
    }
    return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023206E0);
  }
  uint64_t v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Bluetooth is powered off, no events will be processed.", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023206E0);
    }
    LOWORD(v30) = 0;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v10);
    goto LABEL_80;
  }
}

void sub_101324D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_100786268((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101324D3C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *v2;
  *(void *)(v3 + 8) = v2[1];
  *(void *)v2[1] = v3;
  *(void *)(a1 + 16) = v1 - 1;
  sub_1007898E8(v2 + 2);

  operator delete(v2);
}

void *sub_101324D90@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101324E0C(uint64_t a1, _DWORD *a2)
{
  if (*a2 <= 1u) {
    sub_101324224(a1);
  }
  return 1;
}

uint64_t sub_101324E34(uint64_t a1, _DWORD *a2)
{
  if (*a2 <= 1u)
  {
    int v4 = 0;
    if (!sub_1001072EC(a1, &v4, 1))
    {
      int v5 = 1;
      if (!sub_1001072EC(a1, &v5, 1)) {
        sub_101323F20(a1);
      }
    }
  }
  return 1;
}

void sub_101324EA4()
{
}

void sub_101324EF0()
{
}

void sub_101324F14(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023205E0);
      }
      __int16 v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        BOOL v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          BOOL v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        unint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1023205E0);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1013251A4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101325258(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1013252A0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1013252E8(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101325330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477700);
}

BOOL sub_10132535C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          int v28 = (uint64_t *)v24;
        }
        else {
          int v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)long long buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        *(void *)long long buf = buf;
        *(_OWORD *)&uint8_t buf[8] = (unint64_t)buf;
        id v45 = off_1022B3DE8;
        *(_OWORD *)int v46 = 0u;
        long long v47 = 0u;
        __int16 v48 = off_1022B3DE8;
        *(_OWORD *)long long __p = 0u;
        long long v50 = 0u;
        int v51 = 1;
        char v52 = 1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10132873C();
        }
        __int16 v48 = off_1022B3DE8;
        if (SBYTE7(v50) < 0) {
          operator delete(__p[0]);
        }
        id v45 = off_1022B3DE8;
        if (SBYTE7(v47) < 0) {
          operator delete(v46[0]);
        }
        sub_1007898E8((uint64_t *)buf);
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)char v41 = a1 + 64;
        char v29 = byte_102477701;
        int v38 = v16;
        *(void *)long long buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)long long buf = &v38;
        int v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)long long buf = &v38;
        uint64_t v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023205E0);
  }
  __int16 v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023205E0);
    }
    long long v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v36 = (void *)*v36;
    }
    *(_DWORD *)char v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    int v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_10132589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100786268((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1013258BC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023205E0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023205E0);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101325B40(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023205E0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023205E0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  int v30 = buf;
                }
                else {
                  int v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101325F14(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  if (v12 != a3) {
    sub_101327068((uint64_t *)a3, *(void *)(v12 + 8), *(void *)(v8 + 64));
  }
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  *(void *)(a3 + 56) = *(void *)(v12 + 56);
  std::string::operator=((std::string *)(a3 + 72), (const std::string *)(v12 + 72));
  *(void *)(a3 + 96) = *(void *)(v12 + 96);
  *(void *)(a3 + 104) = *(void *)(v12 + 104);
  *(unsigned char *)(a3 + 112) = *(unsigned char *)(v12 + 112);
  return 1;
}

uint64_t sub_101325FD8(uint64_t a1, int *a2, uint64_t a3)
{
  sub_101327F24(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_10132606C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101326084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = (uint64_t)v4;
  v4[1] = (uint64_t)v4;
  v4[2] = 0;
  uint64_t v5 = off_1022B3DE8;
  *(_OWORD *)long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v8 = off_1022B3DE8;
  *(_OWORD *)long long __p = 0u;
  long long v10 = 0u;
  int v11 = 1;
  char v12 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  uint64_t v8 = off_1022B3DE8;
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = off_1022B3DE8;
  if (SBYTE7(v7) < 0) {
    operator delete(v6[0]);
  }
  sub_1007898E8(v4);
}

void sub_101326178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100786268((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10132618C(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023205E0);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_101327F24(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_101327968();
  }
  os_activity_scope_leave(&state);
}

void sub_10132675C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1013267A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023205E0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023205E0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023205E0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023205E0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1023205E0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023205E0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101326D54(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101326D84(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102320610;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101326E14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101326E30(uint64_t a1)
{
}

void sub_101326E38(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_101326EAC((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_101326EAC(uint64_t a1)
{
  *(void *)(a1 + 40) = off_1022B3DE8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void sub_101326F40(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_1007898E8(v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_101326FB4(uint64_t a1)
{
  *(void *)a1 = off_102320610;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101327038(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t *sub_101327068(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  long long v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      std::string::operator=((std::string *)(v6 + 2), (const std::string *)(v4 + 16));
      *((_DWORD *)v6 + 10) = *(_DWORD *)(v4 + 40);
      std::string::operator=((std::string *)(v6 + 7), (const std::string *)(v4 + 56));
      v6[10] = *(void *)(v4 + 80);
      uint64_t v7 = *(void *)(v4 + 88);
      *((_WORD *)v6 + 48) = *(_WORD *)(v4 + 96);
      v6[11] = v7;
      uint64_t v4 = *(void *)(v4 + 8);
      long long v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
  {
    return sub_101327148((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return sub_101327240((uint64_t)a1, v6, a1);
  }
}

uint64_t *sub_101327148(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = sub_1013272C0(a1, 0, 0, (long long *)(a3 + 16));
    int v9 = v8;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        uint64_t v8 = sub_1013272C0(a1, v12, 0, (long long *)(v10 + 16));
        *(void *)(v12 + 8) = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_101327218(void *a1)
{
  __cxa_begin_catch(a1);
  sub_101AAEB34(v1);
  __cxa_rethrow();
}

void sub_10132722C(_Unwind_Exception *a1)
{
}

void *sub_101327240(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      uint64_t v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      sub_10078995C((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void *sub_1013272C0(int a1, uint64_t a2, uint64_t a3, long long *a4)
{
  int v7 = a1 + 16;
  uint64_t v8 = operator new(0x68uLL);
  void *v8 = a2;
  v8[1] = a3;
  sub_101327334(v7, v8 + 2, a4);
  return v8;
}

void sub_101327320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_101327334(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  __dst[4] = off_1022B3DE8;
  BOOL result = __dst + 5;
  if (*((char *)a3 + 63) < 0)
  {
    BOOL result = sub_1000DC48C(result, *((void **)a3 + 5), *((void *)a3 + 6));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 40);
    __dst[7] = *((void *)a3 + 7);
    *(_OWORD *)BOOL result = v7;
  }
  __dst[8] = *((void *)a3 + 8);
  uint64_t v8 = *((void *)a3 + 9);
  *((_WORD *)__dst + 40) = *((_WORD *)a3 + 40);
  __dst[9] = v8;
  return result;
}

void sub_1013273EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101327408(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_101327408(a1, *(void *)a2);
    sub_101327408(a1, *((void *)a2 + 1));
    *((void *)a2 + 4) = off_1022B3DE8;
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

uint64_t *sub_10132748C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_10078B2A8((uint64_t)a1, &v9, a2);
  BOOL result = *v6;
  if (!*v6)
  {
    sub_101327524((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_101327524@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1013275A8((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10132758C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_101327620(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1013275A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022B3DE8;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_101327620(uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((void *)__p + 4) = off_1022B3DE8;
    if (__p[63] < 0) {
      operator delete(*((void **)__p + 5));
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_1013276A0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_1000F0A30(a1, (uint64_t *)a2);
  *(void *)(a2 + 32) = off_1022B3DE8;
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  operator delete((void *)a2);
  return v3;
}

void *sub_101327704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = operator new(0x28uLL);
  void *v7 = a2;
  v7[1] = a3;
  sub_101327764(v7 + 2, a4);
  return v7;
}

void sub_101327750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_101327764(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    long long v5 = sub_1013272C0((int)a1, 0, 0, (long long *)(i + 16));
    uint64_t v6 = *a1;
    void *v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1013277E4(_Unwind_Exception *a1)
{
  sub_1007898E8(v1);
  _Unwind_Resume(a1);
}

void *sub_1013277F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x68uLL);
  void *v8 = a2;
  v8[1] = a3;
  sub_10132786C(v7, v8 + 2, a4);
  return v8;
}

void sub_101327858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10132786C(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = off_1022B3DE8;
  long long v5 = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(void *)(a3 + 24);
    *(_OWORD *)long long v5 = v6;
  }
  a2[4] = *(void *)(a3 + 32);
  a2[5] = off_1022B3DE8;
  uint64_t result = a2 + 6;
  if (*(char *)(a3 + 71) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a3 + 48), *(void *)(a3 + 56));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 48);
    a2[8] = *(void *)(a3 + 64);
    *(_OWORD *)uint64_t result = v8;
  }
  a2[9] = *(void *)(a3 + 72);
  a2[10] = *(void *)(a3 + 80);
  return result;
}

void sub_101327948(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101327968()
{
}

void sub_101327A18()
{
}

void sub_101327A3C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    long long v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int16 v49 = v9;
        id v13 = sub_1013282EC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v48 = v19;
              sub_101327E2C(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int16 v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              __int16 v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023205E0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                __int16 v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023205E0);
                }
                id v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  id v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101327E2C(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1013282EC(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void *sub_101327F24@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x90uLL);
  uint64_t result = sub_101327F80(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101327F6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101327F80(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102320710;
  sub_10132807C((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_101327FC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101327FDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102320710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101327FFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102320710;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101328050(uint64_t a1)
{
  sub_10132819C((uint64_t)&v1, a1 + 24);
}

uint64_t sub_10132807C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_101327764((uint64_t *)a1, a2);
  uint64_t v4[3] = (uint64_t)off_1022B3DE8;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1000DC48C((unsigned char *)v4 + 32, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    v4[6] = *(void *)(a2 + 48);
    *((_OWORD *)v4 + 2) = v5;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = off_1022B3DE8;
  long long v6 = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(v6, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)long long v6 = v7;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

void sub_10132816C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v3;
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  sub_1007898E8((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void sub_10132819C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 64) = off_1022B3DE8;
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  *(void *)(a2 + 24) = off_1022B3DE8;
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }

  sub_1007898E8((uint64_t *)a2);
}

uint64_t sub_101328230(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    *(void *)(v1 + 64) = off_1022B3DE8;
    if (*(char *)(v1 + 95) < 0) {
      operator delete(*(void **)(v1 + 72));
    }
    *(void *)(v1 + 24) = off_1022B3DE8;
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    sub_1007898E8((uint64_t *)v1);
    operator delete();
  }
  return result;
}

id sub_1013282EC(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_10132834C(a1);
}

id sub_10132834C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102320750);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB3EEELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBTLEBeaconProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102320750);
      }
      long long v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB3EEELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102320750);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_10132870C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10132873C()
{
}

void sub_1013287EC()
{
}

uint64_t sub_101328810(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    *(void *)(v1 + 64) = off_1022B3DE8;
    if (*(char *)(v1 + 95) < 0) {
      operator delete(*(void **)(v1 + 72));
    }
    *(void *)(v1 + 24) = off_1022B3DE8;
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    sub_1007898E8((uint64_t *)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_1013288CC(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  sub_101171D90(a1 + 64);
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  if (a2)
  {
    if (a2 < 0x10) {
      return a1;
    }
    sub_101AAED04(&v6);
  }
  else
  {
    sub_101AAEB70(&v5);
  }
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_101328994(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013289B4(uint64_t a1)
{
  double v2 = __chkstk_darwin(a1);
  uint64_t v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v12 = v2;
  uint64_t v13 = v1;
  double v92 = v1[4];
  v1[3] = v92;
  if (*((unsigned char *)v1 + 144))
  {
    v1[16] = v2;
    v1[17] = v3;
    double v14 = v3;
    *((unsigned char *)v1 + 144) = 0;
  }
  else
  {
    double v14 = v1[17];
  }
  double v15 = sub_1011717B4(v14, v3);
  unint64_t v16 = *((void *)v13 + 15);
  double v17 = v15 + v13[17];
  double v18 = 1.0 / (v9 * v9);
  int v19 = (void **)(v13 + 13);
  int v20 = (double *)*((void *)v13 + 14);
  double v21 = 1.0 / (v7 * v7);
  if ((unint64_t)v20 >= v16)
  {
    int v23 = (double *)*v19;
    unint64_t v24 = 0x8E38E38E38E38E39 * (((char *)v20 - (unsigned char *)*v19) >> 3);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0x38E38E38E38E38ELL) {
      sub_1001D7FD4();
    }
    unint64_t v26 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - (void)v23) >> 3);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x1C71C71C71C71C7) {
      unint64_t v27 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      int v28 = (char *)sub_10021D4B8((uint64_t)(v13 + 15), v27);
      int v23 = (double *)*((void *)v13 + 13);
      int v20 = (double *)*((void *)v13 + 14);
    }
    else
    {
      int v28 = 0;
    }
    char v29 = (double *)&v28[72 * v24];
    double *v29 = v12;
    v29[1] = v17;
    v29[2] = v11;
    v29[3] = v9;
    int v30 = &v28[72 * v27];
    v29[4] = v7;
    *((void *)v29 + 5) = v5;
    v29[6] = v18;
    v29[7] = v21;
    v29[8] = 0.0;
    BOOL v22 = v29 + 9;
    if (v20 != v23)
    {
      do
      {
        *(_OWORD *)(v29 - 9) = *(_OWORD *)(v20 - 9);
        long long v31 = *(_OWORD *)(v20 - 7);
        long long v32 = *(_OWORD *)(v20 - 5);
        long long v33 = *(_OWORD *)(v20 - 3);
        *(v29 - 1) = *(v20 - 1);
        *(_OWORD *)(v29 - 3) = v33;
        *(_OWORD *)(v29 - 5) = v32;
        *(_OWORD *)(v29 - 7) = v31;
        v29 -= 9;
        v20 -= 9;
      }
      while (v20 != v23);
      int v23 = (double *)*v19;
    }
    *((void *)v13 + 13) = v29;
    *((void *)v13 + 14) = v22;
    *((void *)v13 + 15) = v30;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *int v20 = v12;
    v20[1] = v17;
    v20[2] = v11;
    v20[3] = v9;
    v20[4] = v7;
    *((void *)v20 + 5) = v5;
    v20[6] = v18;
    v20[7] = v21;
    BOOL v22 = v20 + 9;
    v20[8] = 0.0;
  }
  *((void *)v13 + 14) = v22;
  uint64_t v34 = *(unsigned int *)v13;
  if (0x8E38E38E38E38E39 * (((uint64_t)v22 - *((void *)v13 + 13)) >> 3) != v34)
  {
LABEL_70:
    double v76 = sub_1000F1648(v13 + 8, v13[16], v13[17], v12, v17, v11) * v13[1];
    v13[7] = v76;
    double v77 = v76 + v13[6];
    double v78 = fmax(v13[4], v77);
    v13[4] = v78;
    v13[5] = v78 - v92;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
    uint64_t v79 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v80 = v13[4];
      uint64_t v81 = *((void *)v13 + 5);
      uint64_t v83 = *((void *)v13 + 6);
      uint64_t v82 = *((void *)v13 + 7);
      *(_DWORD *)long long buf = 134350336;
      double v96 = v77;
      __int16 v97 = 2050;
      float64_t v98 = v80;
      __int16 v99 = 2050;
      uint64_t v100 = v81;
      __int16 v101 = 2050;
      uint64_t v102 = v82;
      __int16 v103 = 2050;
      double v104 = v76;
      __int16 v105 = 2050;
      uint64_t v106 = v83;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "GPSODOM,totalD,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,sumDeltaD,%{public}.3lf", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
      uint64_t v85 = *((void *)v13 + 4);
      uint64_t v86 = *((void *)v13 + 5);
      uint64_t v88 = *((void *)v13 + 6);
      uint64_t v87 = *((void *)v13 + 7);
      int v114 = 134350336;
      double v115 = v77;
      __int16 v116 = 2050;
      uint64_t v117 = v85;
      __int16 v118 = 2050;
      uint64_t v119 = v86;
      __int16 v120 = 2050;
      uint64_t v121 = v87;
      __int16 v122 = 2050;
      double v123 = v76;
      __int16 v124 = 2050;
      uint64_t v125 = v88;
      v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::update(double, double, double, double, double, double)", "%s\n", v64);
LABEL_85:
      if (v64 != (char *)buf) {
        free(v64);
      }
    }
    return;
  }
  sub_101145314((uint64_t)&v114, v34, 4u);
  if (!*(_DWORD *)v13)
  {
LABEL_29:
    sub_1011453E0((uint64_t)buf, (uint64_t)&v114);
    sub_1011447FC(buf);
    __int16 v112 = 0;
    long long __p = 0;
    uint64_t v113 = 0;
    double v42 = 0.0;
    if (*(_DWORD *)v13)
    {
      unint64_t v43 = 0;
      double v44 = 0.0;
      do
      {
        sub_101144BE8(":", (uint64_t)&v114, v43, (uint64_t)&v93);
        sub_1011449B8((uint64_t)buf, (uint64_t)&v93);
        double v46 = v45;
        long long v47 = v112;
        if (v112 >= v113)
        {
          __int16 v49 = (char *)__p;
          uint64_t v50 = (v112 - (unsigned char *)__p) >> 3;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v52 = v113 - (unsigned char *)__p;
          if ((v113 - (unsigned char *)__p) >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            double v54 = (char *)sub_1000DA54C((uint64_t)&v113, v53);
            long long v47 = v112;
            __int16 v49 = (char *)__p;
          }
          else
          {
            double v54 = 0;
          }
          __int16 v55 = (double *)&v54[8 * v50];
          *__int16 v55 = v46;
          __int16 v48 = v55 + 1;
          while (v47 != v49)
          {
            uint64_t v56 = *((void *)v47 - 1);
            v47 -= 8;
            *((void *)v55-- - 1) = v56;
          }
          long long __p = v55;
          __int16 v112 = (char *)v48;
          uint64_t v113 = &v54[8 * v53];
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(double *)__int16 v112 = v45;
          __int16 v48 = (double *)(v47 + 8);
        }
        __int16 v112 = (char *)v48;
        uint64_t v57 = *((void *)v13 + 13);
        if (0x8E38E38E38E38E39 * ((*((void *)v13 + 14) - v57) >> 3) <= v43) {
          sub_100273D6C();
        }
        *(double *)(v57 + 72 * v43 + 64) = v46;
        double v44 = v44 + v46;
        ++v43;
        unint64_t v58 = *(unsigned int *)v13;
      }
      while (v43 < v58);
      uint64_t v59 = (double *)__p;
      double v60 = v44 / (double)v58;
      double v61 = 0.0;
      if (__p != v48)
      {
        do
        {
          double v62 = *v59++;
          double v61 = v61 + (v62 - v60) * (v62 - v60);
        }
        while (v59 != v48);
      }
    }
    else
    {
      LODWORD(v58) = 0;
      double v60 = NAN;
      double v61 = 0.0;
    }
    uint64_t v65 = (double *)*((void *)v13 + 13);
    v66 = (double *)*((void *)v13 + 14);
    if (v65 == v66)
    {
      double v73 = NAN;
      double v71 = 0.0;
      double v69 = 0.0;
    }
    else
    {
      double v67 = v60 + sqrt(v61 / (double)(v58 - 1));
      double v68 = 0.0;
      double v69 = 0.0;
      double v70 = 0.0;
      double v71 = 0.0;
      double v42 = 0.0;
      do
      {
        if (v65[8] <= v67)
        {
          double v72 = v65[6];
          double v42 = v42 + *v65 * v72;
          double v71 = v71 + v65[1] * v72;
          double v70 = v70 + v65[2] * v72;
          double v69 = v69 + v72;
          double v68 = v68 + v65[7];
        }
        v65 += 9;
      }
      while (v65 != v66);
      double v73 = v70 / v68;
    }
    double v74 = v42 / v69;
    double v75 = v71 / v69;
    v13[6] = v13[6] + sub_1000F1648(v13 + 8, v13[16], v13[17], v74, v71 / v69, v73) * v13[1];
    v13[7] = 0.0;
    v13[16] = v74;
    v13[17] = v75;
    v13[14] = v13[13];
    if (__p)
    {
      __int16 v112 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_70;
  }
  unint64_t v35 = 0;
  double v36 = *(double *)(*((void *)v13 + 13) + 40);
  float64x2_t v90 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  float64x2_t v91 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
LABEL_23:
  uint64_t v37 = *((void *)v13 + 13);
  if (0x8E38E38E38E38E39 * ((*((void *)v13 + 14) - v37) >> 3) <= v35) {
    sub_100273D6C();
  }
  uint64_t v38 = v37 + 72 * v35;
  uint64_t v39 = *(void *)(v38 + 16);
  double v40 = *(double *)(v38 + 40);
  float64x2_t v93 = vmulq_f64(vdivq_f64(*(float64x2_t *)v38, v91), v90);
  uint64_t v94 = v39;
  __int16 v112 = 0;
  long long __p = 0;
  uint64_t v113 = 0;
  if (cnnavigation::LLAToECEF())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
    std::string v84 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283777;
      double v96 = v93.f64[0];
      __int16 v97 = 2049;
      float64_t v98 = v93.f64[1];
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "GPSODOM, Could not convert LLA Coordinate %{private}.7lf,%{private}.7lf to ECEF", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
      int v107 = 134283777;
      float64_t v108 = v93.f64[0];
      __int16 v109 = 2049;
      float64_t v110 = v93.f64[1];
      uint64_t v89 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometrySubsampler::update(double, double, double, double, double, double)", "%s\n", v89);
      if (v89 != (char *)buf) {
        free(v89);
      }
    }
    sub_101329534((uint64_t)v13);
  }
  else
  {
    *(void *)sub_10004DF44((uint64_t)&v114, v35, 0) = __p;
    *(void *)sub_10004DF44((uint64_t)&v114, v35, 1) = v112;
    *(void *)sub_10004DF44((uint64_t)&v114, v35, 2) = v113;
    int v41 = 0;
    *(double *)sub_10004DF44((uint64_t)&v114, v35, 3) = (v40 - v36) * 1000.0;
    while ((*(void *)sub_10004DF44((uint64_t)&v114, v35, v41) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (++v41 == 4)
      {
        if (++v35 < *(unsigned int *)v13) {
          goto LABEL_23;
        }
        goto LABEL_29;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
    uint64_t v63 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "GPSODOM, Subsampler window point acceptibility check failed.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
      LOWORD(v107) = 0;
      v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometrySubsampler::update(double, double, double, double, double, double)", "%s\n", v64);
      goto LABEL_85;
    }
  }
}

void sub_1013294D4(_Unwind_Exception *a1)
{
}

double sub_101329534(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 134349056;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM,resetting storing distance %{public}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::reset()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(double *)(a1 + 16) = *(double *)(a1 + 24) + *(double *)(a1 + 16);
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_101D1C570;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 1;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  return result;
}

double sub_10132971C(unsigned int *a1, unsigned int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240192;
    unsigned int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM, changing subsampler window size to %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::changeWindowSize", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a2 >= 0x10) {
    sub_101AAEE98();
  }
  if (!a2) {
    sub_101AAF034();
  }
  if (*a1 != a2)
  {
    *a1 = a2;
    return sub_101329534((uint64_t)a1);
  }
  return result;
}

void sub_1013298F8(uint64_t a1, double a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134349056;
    double v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM, changing distance multiplier to %{public}.2f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::changeDistanceMultiplier(double)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(double *)(a1 + 8) != a2)
  {
    *(double *)(a1 + 8) = a2;
    sub_101329534(a1);
  }
}

void sub_101329AC8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101329DA8(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006ABDD0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unsigned int v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6));
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  v8[2] = a2[2];
  v8[3] = v11;
  _OWORD *v8 = v9;
  v8[1] = v10;
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5] + 1;
  a1[5] = v13;
  unint64_t v14 = v12 + v13;
  uint64_t v15 = a1[1];
  unint64_t v16 = (void *)(v15 + 8 * (v14 >> 6));
  uint64_t v17 = *v16 + ((v14 & 0x3F) << 6);
  if (a1[2] == v15) {
    uint64_t v17 = 0;
  }
  if (v17 == *v16) {
    uint64_t v17 = *(v16 - 1) + 4096;
  }
  return v17 - 64;
}

void sub_10132A390(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10132A3C0@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100663690(a1, a2);

  return sub_1006A7010(a3, a1);
}

uint64_t sub_10132A400@<X0>(int64x2_t *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a1[5].i64[1])
  {
    sub_10132A4AC(a1, a2, a3);
  }
  else
  {
    unint64_t v6 = a1[2].i64[1] + a1[2].i64[0] - 1;
    if (*(double *)(*(void *)(a1->i64[1] + 8 * (v6 / 0x11)) + 232 * (v6 % 0x11) + 8) == -1.0) {
      sub_10132AFE8((uint64_t)a1, (long long *)a2, a1);
    }
    else {
      sub_100663690(a1, (long long *)a2);
    }
  }

  return sub_1006A7010(a4, a1);
}

void sub_10132A4AC(int64x2_t *a1, unsigned __int8 *a2, int a3)
{
  unint64_t v6 = a1[2].u64[0];
  uint64_t v7 = a1->i64[1];
  uint64_t v8 = a1[1].i64[0];
  long long v9 = (void *)(v7 + 8 * (v6 / 0x11));
  if (v8 == v7)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = *(void *)(v7 + 8 * (v6 / 0x11)) + 232 * (v6 % 0x11);
    unint64_t v11 = *(void *)(v7 + 8 * ((a1[2].i64[1] + v6) / 0x11)) + 232 * ((a1[2].i64[1] + v6) % 0x11);
    if (v10 != v11)
    {
      while (1)
      {
        long long v12 = *(_OWORD *)v10;
        long long v13 = *(_OWORD *)(v10 + 32);
        long long v101 = *(_OWORD *)(v10 + 16);
        long long v102 = v13;
        *(_OWORD *)long long buf = v12;
        long long v14 = *(_OWORD *)(v10 + 48);
        long long v15 = *(_OWORD *)(v10 + 64);
        long long v16 = *(_OWORD *)(v10 + 96);
        long long v105 = *(_OWORD *)(v10 + 80);
        long long v106 = v16;
        long long v103 = v14;
        long long v104 = v15;
        long long v17 = *(_OWORD *)(v10 + 112);
        long long v18 = *(_OWORD *)(v10 + 128);
        long long v19 = *(_OWORD *)(v10 + 160);
        long long v109 = *(_OWORD *)(v10 + 144);
        long long v110 = v19;
        long long v107 = v17;
        long long v108 = v18;
        long long v20 = *(_OWORD *)(v10 + 176);
        long long v21 = *(_OWORD *)(v10 + 192);
        long long v22 = *(_OWORD *)(v10 + 208);
        uint64_t v114 = *(void *)(v10 + 224);
        long long v112 = v21;
        long long v113 = v22;
        long long v111 = v20;
        if (!uuid_compare((const unsigned __int8 *)&v104, a2 + 64)) {
          break;
        }
        v10 += 232;
        if (v10 - *v9 == 3944)
        {
          unint64_t v23 = v9[1];
          ++v9;
          unint64_t v10 = v23;
        }
        if (v10 == v11)
        {
          unint64_t v10 = v11;
          break;
        }
      }
      uint64_t v7 = a1->i64[1];
      uint64_t v8 = a1[1].i64[0];
    }
  }
  if (v8 == v7)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v24 = a1[2].i64[1] + a1[2].i64[0];
    unint64_t v25 = *(void *)(v7 + 8 * (v24 / 0x11)) + 232 * (v24 % 0x11);
  }
  if (v10 == v25)
  {
    unint64_t v32 = a1[5].u64[0];
    uint64_t v33 = a1[3].i64[1];
    uint64_t v34 = a1[4].i64[0];
    unint64_t v35 = (void *)(v33 + 8 * (v32 / 0x11));
    if (v34 == v33)
    {
      unint64_t v37 = 0;
      double v36 = &a1[5].i64[1];
    }
    else
    {
      double v36 = &a1[5].i64[1];
      unint64_t v37 = *(void *)(v33 + 8 * (v32 / 0x11)) + 232 * (v32 % 0x11);
      unint64_t v38 = *(void *)(v33 + 8 * ((a1[5].i64[1] + v32) / 0x11)) + 232 * ((a1[5].i64[1] + v32) % 0x11);
      if (v37 != v38)
      {
        while (1)
        {
          long long v39 = *(_OWORD *)v37;
          long long v40 = *(_OWORD *)(v37 + 32);
          long long v101 = *(_OWORD *)(v37 + 16);
          long long v102 = v40;
          *(_OWORD *)long long buf = v39;
          long long v41 = *(_OWORD *)(v37 + 48);
          long long v42 = *(_OWORD *)(v37 + 64);
          long long v43 = *(_OWORD *)(v37 + 96);
          long long v105 = *(_OWORD *)(v37 + 80);
          long long v106 = v43;
          long long v103 = v41;
          long long v104 = v42;
          long long v44 = *(_OWORD *)(v37 + 112);
          long long v45 = *(_OWORD *)(v37 + 128);
          long long v46 = *(_OWORD *)(v37 + 160);
          long long v109 = *(_OWORD *)(v37 + 144);
          long long v110 = v46;
          long long v107 = v44;
          long long v108 = v45;
          long long v47 = *(_OWORD *)(v37 + 176);
          long long v48 = *(_OWORD *)(v37 + 192);
          long long v49 = *(_OWORD *)(v37 + 208);
          uint64_t v114 = *(void *)(v37 + 224);
          long long v112 = v48;
          long long v113 = v49;
          long long v111 = v47;
          if (!uuid_compare((const unsigned __int8 *)&v104, a2 + 64)) {
            break;
          }
          v37 += 232;
          if (v37 - *v35 == 3944)
          {
            unint64_t v50 = v35[1];
            ++v35;
            unint64_t v37 = v50;
          }
          if (v37 == v38)
          {
            unint64_t v37 = v38;
            break;
          }
        }
        uint64_t v33 = a1[3].i64[1];
        uint64_t v34 = a1[4].i64[0];
      }
    }
    if (v34 == v33)
    {
      unint64_t v57 = 0;
    }
    else
    {
      unint64_t v56 = a1[5].i64[1] + a1[5].i64[0];
      unint64_t v57 = *(void *)(v33 + 8 * (v56 / 0x11)) + 232 * (v56 % 0x11);
    }
    if (v37 == v57)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023207B0);
      }
      v64 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, client confirmed segment not in current overview or candidates list, deleting all candidates and appending confirmed segment", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023207B0);
        }
        __int16 v99 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesBuilder::addCandidatesToConfirmedOverview(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v99);
        if (v99 != (char *)buf) {
          free(v99);
        }
      }
      sub_100663690((int64x2_t *)a1[3].i64, (long long *)a2);
      if (a3)
      {
        unint64_t v65 = a1[5].i64[1] + a1[5].i64[0] - 1;
        uint64_t v66 = *(void *)(a1[3].i64[1] + 8 * (v65 / 0x11));
        unint64_t v67 = v65 % 0x11;
        unint64_t v68 = a1[2].i64[1] + a1[2].i64[0] - 1;
        *(void *)(*(void *)(a1->i64[1] + 8 * (v68 / 0x11)) + 232 * (v68 % 0x11) + 8) = *(void *)(v66 + 232 * v67);
      }
      else
      {
        unint64_t v89 = a1[2].i64[1] + a1[2].i64[0] - 1;
        uint64_t v90 = *(void *)(*(void *)(a1->i64[1] + 8 * (v89 / 0x11)) + 232 * (v89 % 0x11) + 8);
        unint64_t v91 = a1[5].i64[1] + a1[5].i64[0] - 1;
        uint64_t v66 = *(void *)(a1[3].i64[1] + 8 * (v91 / 0x11));
        unint64_t v67 = v91 % 0x11;
        *(void *)(v66 + 232 * v67) = v90;
      }
      sub_100663690(a1, (long long *)(v66 + 232 * v67));
    }
    else
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023207B0);
      }
      unint64_t v58 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, client confirmed segment in candidates list, removing candidates after confirmed segment", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023207B0);
        }
        float64_t v98 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesBuilder::addCandidatesToConfirmedOverview(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v98);
        if (v98 != (char *)buf) {
          free(v98);
        }
      }
      uint64_t v59 = v37 - *v35;
      uint64_t v60 = 0x34F72C234F72C235 * (v59 >> 3);
      if (v59 < -231)
      {
        unint64_t v69 = 15 - v60;
        double v62 = (char *)&v35[-(v69 / 0x11)];
        uint64_t v63 = (char *)(*(void *)v62 + 232 * (17 * (v69 / 0x11) - v69) + 3712);
      }
      else
      {
        unint64_t v61 = v60 + 1;
        double v62 = (char *)&v35[v61 / 0x11];
        uint64_t v63 = (char *)(*(void *)v62 + 232 * (v61 % 0x11));
      }
      unint64_t v70 = a1[5].i64[0] + a1[5].i64[1];
      uint64_t v71 = a1[3].i64[1];
      double v72 = (char *)(v71 + 8 * (v70 / 0x11));
      if (a1[4].i64[0] == v71) {
        double v73 = 0;
      }
      else {
        double v73 = (char *)(*(void *)v72 + 232 * (v70 % 0x11));
      }
      sub_100171538((int64x2_t *)a1[3].i64, v62, v63, v72, v73);
      uint64_t v75 = a1[2].i64[0];
      uint64_t v74 = a1[2].i64[1];
      uint64_t v76 = a1->i64[1];
      if (a3)
      {
        uint64_t v77 = *(void *)a2;
        *(void *)(*(void *)(v76 + 8 * ((v74 + v75 - 1) / 0x11uLL)) + 232 * ((v74 + v75 - 1) % 0x11uLL) + 8) = *(void *)a2;
        unint64_t v78 = a1[5].i64[1] + a1[5].i64[0] - 1;
        *(void *)(*(void *)(a1[3].i64[1] + 8 * (v78 / 0x11)) + 232 * (v78 % 0x11)) = v77;
      }
      unint64_t v79 = v75 + v74;
      double v80 = (char *)(v76 + 8 * (v79 / 0x11));
      if (a1[1].i64[0] == v76) {
        uint64_t v81 = 0;
      }
      else {
        uint64_t v81 = *(void *)v80 + 232 * (v79 % 0x11);
      }
      unint64_t v82 = a1[5].u64[0];
      uint64_t v83 = a1[3].i64[1];
      if (a1[4].i64[0] == v83)
      {
        std::string v84 = 0;
        uint64_t v87 = 0;
        uint64_t v86 = (char *)(v83 + 8 * ((*v36 + v82) / 0x11));
      }
      else
      {
        std::string v84 = (char *)(*(void *)(v83 + 8 * (v82 / 0x11)) + 232 * (v82 % 0x11));
        unint64_t v85 = *v36 + v82;
        uint64_t v86 = (char *)(v83 + 8 * (v85 / 0x11));
        uint64_t v87 = (char *)(*(void *)v86 + 232 * (v85 % 0x11));
      }
      sub_10132B760(a1, v80, v81, (char *)(v83 + 8 * (v82 / 0x11)), v84, v86, v87);
      unint64_t v88 = a1[2].i64[1] + a1[2].i64[0] - 1;
      *(void *)(*(void *)(a1->i64[1] + 8 * (v88 / 0x11)) + 232 * (v88 % 0x11) + 8) = 0xBFF0000000000000;
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023207B0);
    }
    unint64_t v26 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, client confirmed segment in the current overview, deleting all candidates and removing segments after confirmed segment", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023207B0);
      }
      __int16 v97 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesBuilder::addCandidatesToConfirmedOverview(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v97);
      if (v97 != (char *)buf) {
        free(v97);
      }
    }
    uint64_t v27 = v10 - *v9;
    uint64_t v28 = 0x34F72C234F72C235 * (v27 >> 3);
    if (v27 < -231)
    {
      unint64_t v51 = 15 - v28;
      int v30 = (char *)&v9[-(v51 / 0x11)];
      long long v31 = (char *)(*(void *)v30 + 232 * (17 * (v51 / 0x11) - v51) + 3712);
    }
    else
    {
      unint64_t v29 = v28 + 1;
      int v30 = (char *)&v9[v29 / 0x11];
      long long v31 = (char *)(*(void *)v30 + 232 * (v29 % 0x11));
    }
    unint64_t v52 = a1[2].i64[0] + a1[2].i64[1];
    uint64_t v53 = a1->i64[1];
    double v54 = (char *)(v53 + 8 * (v52 / 0x11));
    if (a1[1].i64[0] == v53) {
      __int16 v55 = 0;
    }
    else {
      __int16 v55 = (char *)(*(void *)v54 + 232 * (v52 % 0x11));
    }
    sub_100171538(a1, v30, v31, v54, v55);
    *(void *)(v10 + 8) = 0xBFF0000000000000;
  }
  double v92 = (void **)a1[3].i64[1];
  uint64_t v93 = a1[4].i64[0];
  a1[5].i64[1] = 0;
  unint64_t v94 = v93 - (void)v92;
  if (v94 >= 0x11)
  {
    do
    {
      operator delete(*v92);
      uint64_t v95 = a1[4].i64[0];
      double v92 = (void **)(a1[3].i64[1] + 8);
      a1[3].i64[1] = (uint64_t)v92;
      unint64_t v94 = v95 - (void)v92;
    }
    while (v94 > 0x10);
  }
  if (v94 >> 3 == 1)
  {
    uint64_t v96 = 8;
  }
  else
  {
    if (v94 >> 3 != 2) {
      return;
    }
    uint64_t v96 = 17;
  }
  a1[5].i64[0] = v96;
}

double sub_10132AFE8(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v3 = a3[5];
  if (v3) {
    *(void *)(*(void *)(a3[1] + 8 * ((v3 + a3[4] - 1) / 0x11uLL)) + 232 * ((v3 + a3[4] - 1) % 0x11uLL) + 8) = *(void *)a2;
  }
  *(void *)&double result = sub_100663690(a3, a2).n128_u64[0];
  return result;
}

uint64_t sub_10132B038@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[5] + a1[4] - 1;
  unint64_t v6 = *(void *)(a1[1] + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  double v8 = *(double *)(v6 + 8);
  uint64_t v7 = (void *)(v6 + 8);
  if (v8 == -1.0) {
    void *v7 = *(void *)a2;
  }
  sub_10132AFE8((uint64_t)a1, a2, a1 + 6);

  return sub_1006A7010(a3, a1);
}

uint64_t sub_10132B0CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (void **)a1[7];
  uint64_t v7 = a1[8];
  a1[11] = 0;
  unint64_t v8 = v7 - (void)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      uint64_t v9 = a1[8];
      unint64_t v6 = (void **)(a1[7] + 8);
      a1[7] = v6;
      unint64_t v8 = v9 - (void)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    uint64_t v10 = 8;
  }
  else
  {
    if (v8 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v10 = 17;
  }
  a1[10] = v10;
LABEL_8:
  unint64_t v11 = a1[4];
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  long long v14 = (void *)(v12 + 8 * (v11 / 0x11));
  if (v13 == v12)
  {
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v15 = *(void *)(v12 + 8 * (v11 / 0x11)) + 232 * (v11 % 0x11);
    unint64_t v16 = *(void *)(v12 + 8 * ((a1[5] + v11) / 0x11)) + 232 * ((a1[5] + v11) % 0x11);
    if (v15 != v16)
    {
      long long v17 = (const unsigned __int8 *)(a2 + 64);
      while (1)
      {
        long long v18 = *(_OWORD *)v15;
        long long v19 = *(_OWORD *)(v15 + 32);
        long long v50 = *(_OWORD *)(v15 + 16);
        long long v51 = v19;
        *(_OWORD *)long long buf = v18;
        long long v20 = *(_OWORD *)(v15 + 48);
        long long v21 = *(_OWORD *)(v15 + 64);
        long long v22 = *(_OWORD *)(v15 + 96);
        v53[1] = *(_OWORD *)(v15 + 80);
        v53[2] = v22;
        long long v52 = v20;
        v53[0] = v21;
        long long v23 = *(_OWORD *)(v15 + 112);
        long long v24 = *(_OWORD *)(v15 + 128);
        long long v25 = *(_OWORD *)(v15 + 160);
        v53[5] = *(_OWORD *)(v15 + 144);
        v53[6] = v25;
        v53[3] = v23;
        v53[4] = v24;
        long long v26 = *(_OWORD *)(v15 + 176);
        long long v27 = *(_OWORD *)(v15 + 192);
        long long v28 = *(_OWORD *)(v15 + 208);
        uint64_t v54 = *(void *)(v15 + 224);
        v53[8] = v27;
        v53[9] = v28;
        v53[7] = v26;
        if (!uuid_compare((const unsigned __int8 *)v53, v17)) {
          break;
        }
        v15 += 232;
        if (v15 - *v14 == 3944)
        {
          unint64_t v29 = v14[1];
          ++v14;
          unint64_t v15 = v29;
        }
        if (v15 == v16)
        {
          unint64_t v15 = v16;
          break;
        }
      }
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[2];
    }
  }
  if (v13 == v12)
  {
    unint64_t v31 = 0;
  }
  else
  {
    unint64_t v30 = a1[5] + a1[4];
    unint64_t v31 = *(void *)(v12 + 8 * (v30 / 0x11)) + 232 * (v30 % 0x11);
  }
  if (v15 == v31)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023207B0);
    }
    long long v39 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLWorkoutSeriesBuilder, cannot reset workout to confirmed workout, candidate not in list", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023207B0);
      }
      long long v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLWorkoutSeriesPredictor_Type::WorkoutList CLWorkoutSeriesBuilder::resetToConfirmedWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023207B0);
    }
    unint64_t v32 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(v15 + 112);
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, reset back to confirmed workout, currentSegment,%ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023207B0);
      }
      long long v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutSeriesPredictor_Type::WorkoutList CLWorkoutSeriesBuilder::resetToConfirmedWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    uint64_t v34 = v15 - *v14;
    uint64_t v35 = 0x34F72C234F72C235 * (v34 >> 3);
    if (v34 < -231)
    {
      unint64_t v41 = 15 - v35;
      unint64_t v37 = (char *)&v14[-(v41 / 0x11)];
      unint64_t v38 = (char *)(*(void *)v37 + 232 * (17 * (v41 / 0x11) - v41) + 3712);
    }
    else
    {
      unint64_t v36 = v35 + 1;
      unint64_t v37 = (char *)&v14[v36 / 0x11];
      unint64_t v38 = (char *)(*(void *)v37 + 232 * (v36 % 0x11));
    }
    unint64_t v42 = a1[4] + a1[5];
    uint64_t v43 = a1[1];
    long long v44 = (char *)(v43 + 8 * (v42 / 0x11));
    if (a1[2] == v43) {
      long long v45 = 0;
    }
    else {
      long long v45 = (char *)(*(void *)v44 + 232 * (v42 % 0x11));
    }
    sub_100171538(a1, v37, v38, v44, v45);
    unint64_t v46 = a1[5] + a1[4] - 1;
    *(void *)(*(void *)(a1[1] + 8 * (v46 / 0x11)) + 232 * (v46 % 0x11) + 8) = 0xBFF0000000000000;
  }
  return sub_1006A7010(a3, a1);
}

uint64_t sub_10132B680@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v5 = a1[5] + a1[4] - 1;
  unint64_t v6 = *(void *)(a1[1] + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  double v8 = *(double *)(v6 + 8);
  uint64_t v7 = (double *)(v6 + 8);
  if (v8 == -1.0) {
    double *v7 = a3;
  }
  uint64_t v9 = (void **)a1[7];
  uint64_t v10 = a1[8];
  a1[11] = 0;
  unint64_t v11 = v10 - (void)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      uint64_t v12 = a1[8];
      uint64_t v9 = (void **)(a1[7] + 8);
      a1[7] = v9;
      unint64_t v11 = v12 - (void)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 8;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v13 = 17;
  }
  a1[10] = v13;
LABEL_10:

  return sub_1006A7010(a2, a1);
}

unint64_t sub_10132B760(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  if (a7 == a5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = 2 * (a6 - a4)
  }
       + ((a6 - a4) >> 3)
       + 0x34F72C234F72C235 * ((uint64_t)&a7[-*(void *)a6] >> 3)
       - 0x34F72C234F72C235 * ((uint64_t)&a5[-*(void *)a4] >> 3);
  return sub_10132B7F0(a1, a2, a3, (unint64_t)a4, a5, (unint64_t)a6, a7, v7);
}

void sub_10132B7C0(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

unint64_t sub_10132B7F0(int64x2_t *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = a1[2].u64[0];
  unint64_t v15 = v14 / 0x11;
  uint64_t v16 = a1->i64[1];
  uint64_t v17 = a1[1].i64[0];
  long long v18 = (char *)(v16 + 8 * (v14 / 0x11));
  if (v17 == v16) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = *(void *)v18 + 232 * (v14 % 0x11);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = 2 * (a2 - v18)
  }
        + ((a2 - v18) >> 3)
        + 0x34F72C234F72C235 * ((a3 - *(void *)a2) >> 3)
        - 0x34F72C234F72C235 * ((uint64_t)(v19 - *(void *)v18) >> 3);
  uint64_t v21 = a1[2].i64[1];
  if (v20 >= v21 - v20)
  {
    uint64_t v24 = 2 * (v17 - v16) + ((v17 - v16) >> 3) - 1;
    if (v17 == v16) {
      uint64_t v24 = 0;
    }
    unint64_t v25 = v14 + v21;
    unint64_t v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_1006A72F0(a1, a8 - v26);
      uint64_t v21 = a1[2].i64[1];
      uint64_t v16 = a1->i64[1];
      uint64_t v17 = a1[1].i64[0];
      unint64_t v25 = a1[2].i64[0] + v21;
    }
    long long v27 = (void *)(v16 + 8 * (v25 / 0x11));
    long long v110 = (char **)a4;
    if (v17 == v16) {
      long long v28 = 0;
    }
    else {
      long long v28 = (char *)(*v27 + 232 * (v25 % 0x11));
    }
    unint64_t v33 = v21 - v20;
    uint64_t v34 = v21 - v20 - v8;
    if (v21 - v20 >= v8)
    {
      long long v109 = (char **)a6;
      uint64_t v35 = v28;
      unint64_t v36 = (void *)(v16 + 8 * (v25 / 0x11));
      unint64_t v37 = (unint64_t)a7;
      if (!v8) {
        goto LABEL_72;
      }
    }
    else
    {
      if (v33 >= v8 >> 1)
      {
        v112.n128_u64[0] = a6;
        v112.n128_u64[1] = (unint64_t)a7;
      }
      else
      {
        v112.n128_u64[0] = (unint64_t)v110;
        v112.n128_u64[1] = (unint64_t)a5;
        uint64_t v34 = v21 - v20;
      }
      sub_1001717C4(&v112, v34);
      unint64_t v37 = v112.n128_u64[1];
      uint64_t v53 = (void *)v112.n128_u64[0];
      long long v109 = (char **)v112.n128_u64[0];
      if ((unsigned char *)v112.n128_u64[1] == a7)
      {
        uint64_t v35 = v28;
        unint64_t v36 = v27;
      }
      else
      {
        unint64_t v54 = v112.n128_u64[1];
        unint64_t v36 = v27;
        uint64_t v35 = v28;
        do
        {
          long long v55 = *(_OWORD *)v54;
          long long v56 = *(_OWORD *)(v54 + 32);
          *((_OWORD *)v35 + 1) = *(_OWORD *)(v54 + 16);
          *((_OWORD *)v35 + 2) = v56;
          *(_OWORD *)uint64_t v35 = v55;
          long long v57 = *(_OWORD *)(v54 + 48);
          long long v58 = *(_OWORD *)(v54 + 64);
          long long v59 = *(_OWORD *)(v54 + 96);
          *((_OWORD *)v35 + 5) = *(_OWORD *)(v54 + 80);
          *((_OWORD *)v35 + 6) = v59;
          *((_OWORD *)v35 + 3) = v57;
          *((_OWORD *)v35 + 4) = v58;
          long long v60 = *(_OWORD *)(v54 + 112);
          long long v61 = *(_OWORD *)(v54 + 128);
          long long v62 = *(_OWORD *)(v54 + 160);
          *((_OWORD *)v35 + 9) = *(_OWORD *)(v54 + 144);
          *((_OWORD *)v35 + 10) = v62;
          *((_OWORD *)v35 + 7) = v60;
          *((_OWORD *)v35 + 8) = v61;
          long long v63 = *(_OWORD *)(v54 + 176);
          long long v64 = *(_OWORD *)(v54 + 192);
          long long v65 = *(_OWORD *)(v54 + 208);
          *((void *)v35 + 28) = *(void *)(v54 + 224);
          *((_OWORD *)v35 + 12) = v64;
          *((_OWORD *)v35 + 13) = v65;
          *((_OWORD *)v35 + 11) = v63;
          v35 += 232;
          if (&v35[-*v36] == (char *)3944)
          {
            uint64_t v66 = (char *)v36[1];
            ++v36;
            uint64_t v35 = v66;
          }
          v54 += 232;
          if (v54 - *v53 == 3944)
          {
            unint64_t v67 = v53[1];
            ++v53;
            unint64_t v54 = v67;
          }
          ++a1[2].i64[1];
        }
        while ((unsigned char *)v54 != a7);
      }
      unint64_t v8 = v33;
      if (!v33) {
        goto LABEL_72;
      }
    }
    long long v107 = (char *)v37;
    v112.n128_u64[0] = (unint64_t)v27;
    v112.n128_u64[1] = (unint64_t)v28;
    sub_1001717C4(&v112, -(uint64_t)v8);
    __n128 v85 = v112;
    if ((char *)v112.n128_u64[1] != v28)
    {
      unint64_t v87 = v112.n128_u64[1];
      uint64_t v86 = (void *)v112.n128_u64[0];
      do
      {
        long long v88 = *(_OWORD *)v87;
        long long v89 = *(_OWORD *)(v87 + 32);
        *((_OWORD *)v35 + 1) = *(_OWORD *)(v87 + 16);
        *((_OWORD *)v35 + 2) = v89;
        *(_OWORD *)uint64_t v35 = v88;
        long long v90 = *(_OWORD *)(v87 + 48);
        long long v91 = *(_OWORD *)(v87 + 64);
        long long v92 = *(_OWORD *)(v87 + 96);
        *((_OWORD *)v35 + 5) = *(_OWORD *)(v87 + 80);
        *((_OWORD *)v35 + 6) = v92;
        *((_OWORD *)v35 + 3) = v90;
        *((_OWORD *)v35 + 4) = v91;
        long long v93 = *(_OWORD *)(v87 + 112);
        long long v94 = *(_OWORD *)(v87 + 128);
        long long v95 = *(_OWORD *)(v87 + 160);
        *((_OWORD *)v35 + 9) = *(_OWORD *)(v87 + 144);
        *((_OWORD *)v35 + 10) = v95;
        *((_OWORD *)v35 + 7) = v93;
        *((_OWORD *)v35 + 8) = v94;
        long long v96 = *(_OWORD *)(v87 + 176);
        long long v97 = *(_OWORD *)(v87 + 192);
        long long v98 = *(_OWORD *)(v87 + 208);
        *((void *)v35 + 28) = *(void *)(v87 + 224);
        *((_OWORD *)v35 + 12) = v97;
        *((_OWORD *)v35 + 13) = v98;
        *((_OWORD *)v35 + 11) = v96;
        v35 += 232;
        if (&v35[-*v36] == (char *)3944)
        {
          __int16 v99 = (char *)v36[1];
          ++v36;
          uint64_t v35 = v99;
        }
        v87 += 232;
        if (v87 - *v86 == 3944)
        {
          unint64_t v100 = v86[1];
          ++v86;
          unint64_t v87 = v100;
        }
        ++a1[2].i64[1];
      }
      while ((char *)v87 != v28);
    }
    if (v8 < v33)
    {
      v112.n128_u64[0] = (unint64_t)v27;
      v112.n128_u64[1] = (unint64_t)v28;
      sub_1001717C4(&v112, -(uint64_t)v33);
      sub_10066560C((char **)v112.n128_u64[0], (char *)v112.n128_u64[1], (char **)v85.n128_u64[0], (char *)v85.n128_u64[1], v27, v28, &v112);
      long long v27 = v113;
      long long v28 = v114;
    }
    sub_10066560C(v110, a5, v109, v107, v27, v28, &v112);
    goto LABEL_72;
  }
  if (a8 > v14)
  {
    sub_10132BE90((void **)a1, a8 - v14);
    unint64_t v14 = a1[2].u64[0];
    uint64_t v16 = a1->i64[1];
    uint64_t v17 = a1[1].i64[0];
    unint64_t v15 = v14 / 0x11;
  }
  long long v22 = (void *)(v16 + 8 * v15);
  if (v17 == v16) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = *v22 + 232 * (v14 % 0x11);
  }
  uint64_t v29 = v8 - v20;
  long long v108 = (unsigned char **)a6;
  if (v8 <= v20)
  {
    long long v111 = (void *)a4;
    unint64_t v30 = v23;
    unint64_t v31 = (void *)(v16 + 8 * v15);
    unint64_t v32 = (unint64_t)a5;
    if (!v8) {
      goto LABEL_72;
    }
    goto LABEL_50;
  }
  if (v20 >= v8 >> 1)
  {
    v112.n128_u64[0] = a4;
    v112.n128_u64[1] = (unint64_t)a5;
  }
  else
  {
    v112.n128_u64[0] = a6;
    v112.n128_u64[1] = (unint64_t)a7;
    uint64_t v29 = -(uint64_t)v20;
  }
  sub_1001717C4(&v112, v29);
  unint64_t v32 = v112.n128_u64[1];
  long long v111 = (void *)v112.n128_u64[0];
  if ((char *)v112.n128_u64[1] == a5)
  {
    unint64_t v30 = v23;
    unint64_t v31 = v22;
  }
  else
  {
    unint64_t v39 = v112.n128_u64[1];
    unint64_t v38 = (void *)v112.n128_u64[0];
    unint64_t v31 = v22;
    unint64_t v30 = v23;
    do
    {
      if (v30 == *v31)
      {
        uint64_t v40 = *--v31;
        unint64_t v30 = v40 + 3944;
      }
      if (v39 == *v38)
      {
        uint64_t v41 = *--v38;
        unint64_t v39 = v41 + 3944;
      }
      v30 -= 232;
      long long v42 = *(_OWORD *)(v39 - 232);
      long long v43 = *(_OWORD *)(v39 - 200);
      *(_OWORD *)(v30 + 16) = *(_OWORD *)(v39 - 216);
      *(_OWORD *)(v30 + 32) = v43;
      *(_OWORD *)unint64_t v30 = v42;
      long long v44 = *(_OWORD *)(v39 - 184);
      long long v45 = *(_OWORD *)(v39 - 168);
      long long v46 = *(_OWORD *)(v39 - 136);
      *(_OWORD *)(v30 + 80) = *(_OWORD *)(v39 - 152);
      *(_OWORD *)(v30 + 96) = v46;
      *(_OWORD *)(v30 + 48) = v44;
      *(_OWORD *)(v30 + 64) = v45;
      long long v47 = *(_OWORD *)(v39 - 120);
      long long v48 = *(_OWORD *)(v39 - 104);
      long long v49 = *(_OWORD *)(v39 - 72);
      *(_OWORD *)(v30 + 144) = *(_OWORD *)(v39 - 88);
      *(_OWORD *)(v30 + 160) = v49;
      *(_OWORD *)(v30 + 112) = v47;
      *(_OWORD *)(v30 + 128) = v48;
      long long v50 = *(_OWORD *)(v39 - 56);
      long long v51 = *(_OWORD *)(v39 - 40);
      long long v52 = *(_OWORD *)(v39 - 24);
      *(void *)(v30 + 224) = *(void *)(v39 - 8);
      *(_OWORD *)(v30 + 192) = v51;
      *(_OWORD *)(v30 + 208) = v52;
      *(_OWORD *)(v30 + 176) = v50;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D1F270);
      v39 -= 232;
    }
    while ((char *)v39 != a5);
  }
  unint64_t v8 = v20;
  if (v20)
  {
LABEL_50:
    long long v106 = (unsigned char *)v32;
    v112.n128_u64[0] = (unint64_t)v22;
    v112.n128_u64[1] = v23;
    sub_1001717C4(&v112, v8);
    __n128 v68 = v112;
    if (v112.n128_u64[1] != v23)
    {
      unint64_t v70 = v112.n128_u64[1];
      unint64_t v69 = (void *)v112.n128_u64[0];
      do
      {
        if (v30 == *v31)
        {
          uint64_t v71 = *--v31;
          unint64_t v30 = v71 + 3944;
        }
        if (v70 == *v69)
        {
          uint64_t v72 = *--v69;
          unint64_t v70 = v72 + 3944;
        }
        v30 -= 232;
        long long v73 = *(_OWORD *)(v70 - 232);
        long long v74 = *(_OWORD *)(v70 - 200);
        *(_OWORD *)(v30 + 16) = *(_OWORD *)(v70 - 216);
        *(_OWORD *)(v30 + 32) = v74;
        *(_OWORD *)unint64_t v30 = v73;
        long long v75 = *(_OWORD *)(v70 - 184);
        long long v76 = *(_OWORD *)(v70 - 168);
        long long v77 = *(_OWORD *)(v70 - 136);
        *(_OWORD *)(v30 + 80) = *(_OWORD *)(v70 - 152);
        *(_OWORD *)(v30 + 96) = v77;
        *(_OWORD *)(v30 + 48) = v75;
        *(_OWORD *)(v30 + 64) = v76;
        long long v78 = *(_OWORD *)(v70 - 120);
        long long v79 = *(_OWORD *)(v70 - 104);
        long long v80 = *(_OWORD *)(v70 - 72);
        *(_OWORD *)(v30 + 144) = *(_OWORD *)(v70 - 88);
        *(_OWORD *)(v30 + 160) = v80;
        *(_OWORD *)(v30 + 112) = v78;
        *(_OWORD *)(v30 + 128) = v79;
        long long v81 = *(_OWORD *)(v70 - 56);
        long long v82 = *(_OWORD *)(v70 - 40);
        long long v83 = *(_OWORD *)(v70 - 24);
        *(void *)(v30 + 224) = *(void *)(v70 - 8);
        *(_OWORD *)(v30 + 192) = v82;
        *(_OWORD *)(v30 + 208) = v83;
        *(_OWORD *)(v30 + 176) = v81;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D1F270);
        v70 -= 232;
      }
      while (v70 != v23);
    }
    if (v8 < v20)
    {
      v112.n128_u64[0] = (unint64_t)v22;
      v112.n128_u64[1] = v23;
      sub_1001717C4(&v112, v20);
      __n128 v84 = v112;
      v112.n128_u64[0] = (unint64_t)v22;
      v112.n128_u64[1] = v23;
      sub_1006657C0(v68.n128_u64[0], (unsigned char *)v68.n128_u64[1], v84.n128_u64[0], (unsigned char *)v84.n128_u64[1], (uint64_t)&v112);
      unint64_t v23 = v112.n128_u64[1];
      long long v22 = (void *)v112.n128_u64[0];
    }
    v112.n128_u64[0] = (unint64_t)v22;
    v112.n128_u64[1] = v23;
    sub_1006657C0(v111, v106, v108, a7, (uint64_t)&v112);
  }
LABEL_72:
  unint64_t v101 = a1[2].u64[0];
  uint64_t v102 = a1->i64[1];
  long long v103 = (void *)(v102 + 8 * (v101 / 0x11));
  if (a1[1].i64[0] == v102) {
    unint64_t v104 = 0;
  }
  else {
    unint64_t v104 = *v103 + 232 * (v101 % 0x11);
  }
  v112.n128_u64[0] = (unint64_t)v103;
  v112.n128_u64[1] = v104;
  sub_1001717C4(&v112, v20);
  return v112.n128_u64[0];
}

void sub_10132BE90(void **a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  if (v4 == v3) {
    unint64_t v5 = a2 + 1;
  }
  else {
    unint64_t v5 = a2;
  }
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 2 * (v4 - v3) + ((v4 - v3) >> 3) - 1;
  }
  if (v5 == 17 * (v5 / 0x11)) {
    unint64_t v7 = v5 / 0x11;
  }
  else {
    unint64_t v7 = v5 / 0x11 + 1;
  }
  uint64_t v8 = (uint64_t)a1[4];
  if (v7 >= (v6 - ((uint64_t)a1[5] + v8)) / 0x11uLL) {
    unint64_t v9 = (v6 - ((uint64_t)a1[5] + v8)) / 0x11uLL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v7 <= (v6 - ((uint64_t)a1[5] + v8)) / 0x11uLL)
  {
    for (a1[4] = (void *)(17 * v9 + v8); v9; --v9)
    {
      long long v18 = (void **)a1[2];
      __p[0] = *(v18 - 1);
      a1[2] = v18 - 1;
      sub_1002D02D8((uint64_t)a1, __p);
    }
  }
  else
  {
    unint64_t v10 = v7 - v9;
    uint64_t v11 = (uint64_t)(a1 + 3);
    uint64_t v12 = (v4 - v3) >> 3;
    uint64_t v13 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v7 - v9 <= (v13 >> 3) - v12)
    {
      if (v10)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v21 = v10;
          do
          {
            __p[0] = operator new(0xF68uLL);
            sub_10017F0B4(a1, __p);
            --v21;
          }
          while (v21);
          v9 += v10;
          uint64_t v8 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0xF68uLL);
            sub_1002D02D8((uint64_t)a1, __p);
            unint64_t v19 = a1[1];
            uint64_t v20 = (unsigned char *)a1[2] - v19 == 8 ? 16 : 17;
            uint64_t v8 = (uint64_t)a1[4] + v20;
            a1[4] = (void *)v8;
            if (!--v10) {
              break;
            }
            if (v19 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v8 + 17 * v9); v9; --v9)
      {
        long long v22 = (void **)a1[2];
        __p[0] = *(v22 - 1);
        a1[2] = v22 - 1;
        sub_1002D02D8((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v14 = v4 == v3;
      uint64_t v15 = 17 * v7;
      if (v13 >> 2 <= v10 + v12) {
        unint64_t v16 = v10 + v12;
      }
      else {
        unint64_t v16 = v13 >> 2;
      }
      unint64_t v69 = a1 + 3;
      if (v16) {
        uint64_t v17 = (char *)sub_1000DA54C(v11, v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v23 = v15 - v14;
      __p[0] = v17;
      __p[1] = v17;
      unint64_t v67 = v17;
      __n128 v68 = &v17[8 * v16];
      do
      {
        long long v65 = operator new(0xF68uLL);
        sub_1000DA434(__p, &v65);
        --v10;
      }
      while (v10);
      uint64_t v24 = (char *)a1[2];
      for (uint64_t i = v67; v9; --v9)
      {
        if (i == v68)
        {
          int64_t v26 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v34 = 1;
            }
            else {
              unint64_t v34 = (i - (char *)__p[0]) >> 2;
            }
            uint64_t v35 = (char *)sub_1000DA54C((uint64_t)v69, v34);
            unint64_t v37 = (uint64_t *)__p[1];
            uint64_t i = &v35[8 * (v34 >> 2)];
            uint64_t v38 = v67 - (char *)__p[1];
            if (v67 != __p[1])
            {
              uint64_t i = &v35[8 * (v34 >> 2) + (v38 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v39 = 8 * (v38 >> 3);
              uint64_t v40 = &v35[8 * (v34 >> 2)];
              do
              {
                uint64_t v41 = *v37++;
                *(void *)uint64_t v40 = v41;
                v40 += 8;
                v39 -= 8;
              }
              while (v39);
            }
            long long v42 = __p[0];
            __p[0] = v35;
            __p[1] = &v35[8 * (v34 >> 2)];
            unint64_t v67 = i;
            __n128 v68 = &v35[8 * v36];
            if (v42)
            {
              operator delete(v42);
              uint64_t i = v67;
            }
          }
          else
          {
            uint64_t v27 = v26 >> 3;
            BOOL v28 = v26 >> 3 < -1;
            uint64_t v29 = (v26 >> 3) + 2;
            if (v28) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = v27 + 1;
            }
            unint64_t v31 = (char *)__p[1] - 8 * (v30 >> 1);
            int64_t v32 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v30 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }
            unint64_t v33 = &i[-8 * (v30 >> 1)];
            uint64_t i = &v31[v32];
            __p[1] = v33;
            unint64_t v67 = &v31[v32];
          }
        }
        *(void *)uint64_t i = *((void *)v24 - 1);
        uint64_t i = v67 + 8;
        v67 += 8;
        uint64_t v24 = (char *)a1[2] - 8;
        a1[2] = v24;
      }
      long long v43 = (char *)a1[1];
      if (v43 == v24)
      {
        long long v43 = v24;
      }
      else
      {
        do
        {
          if (i == v68)
          {
            int64_t v44 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v51 = 1;
              }
              else {
                unint64_t v51 = (i - (char *)__p[0]) >> 2;
              }
              long long v52 = (char *)sub_1000DA54C((uint64_t)v69, v51);
              unint64_t v54 = (uint64_t *)__p[1];
              uint64_t i = &v52[8 * (v51 >> 2)];
              uint64_t v55 = v67 - (char *)__p[1];
              if (v67 != __p[1])
              {
                uint64_t i = &v52[8 * (v51 >> 2) + (v55 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v56 = 8 * (v55 >> 3);
                long long v57 = &v52[8 * (v51 >> 2)];
                do
                {
                  uint64_t v58 = *v54++;
                  *(void *)long long v57 = v58;
                  v57 += 8;
                  v56 -= 8;
                }
                while (v56);
              }
              long long v59 = __p[0];
              __p[0] = v52;
              __p[1] = &v52[8 * (v51 >> 2)];
              unint64_t v67 = i;
              __n128 v68 = &v52[8 * v53];
              if (v59)
              {
                operator delete(v59);
                uint64_t i = v67;
              }
            }
            else
            {
              uint64_t v45 = v44 >> 3;
              BOOL v28 = v44 >> 3 < -1;
              uint64_t v46 = (v44 >> 3) + 2;
              if (v28) {
                uint64_t v47 = v46;
              }
              else {
                uint64_t v47 = v45 + 1;
              }
              long long v48 = (char *)__p[1] - 8 * (v47 >> 1);
              int64_t v49 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v47 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }
              long long v50 = &i[-8 * (v47 >> 1)];
              uint64_t i = &v48[v49];
              __p[1] = v50;
              unint64_t v67 = &v48[v49];
            }
          }
          uint64_t v60 = *(void *)v43;
          v43 += 8;
          *(void *)uint64_t i = v60;
          uint64_t i = v67 + 8;
          v67 += 8;
        }
        while (v43 != a1[2]);
        uint64_t v24 = (char *)a1[1];
      }
      long long v61 = v68;
      long long v62 = (char *)a1[3];
      long long v63 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v61;
      long long v64 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v64;
      __p[1] = v24;
      unint64_t v67 = v43;
      __n128 v68 = v62;
      a1[4] = &v63[v23];
      if (v43 != v24) {
        unint64_t v67 = &v43[(v24 - v43 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v64) {
        operator delete(v64);
      }
    }
  }
}

void sub_10132C30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10132D070(void *a1)
{
  if (![a1 length]) {
    return 0;
  }
  id v8 = 0;
  id v2 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", [a1 dataUsingEncoding:4], 1, &v8);
  if (v8)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1023207D0);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [[objc_msgSend(v8, "localizedDescription") UTF8String];
      *(_DWORD *)long long buf = 136315138;
      id v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#warning: error deserializing app bundle ids, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1023207D0);
      }
      id v5 = [[objc_msgSend(v8, "localizedDescription") UTF8String];
      int v9 = 136315138;
      id v10 = v5;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray *clientIdsFromBundleIdsString(NSString *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v2;
}

void sub_10132D560(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

double sub_10132D590(uint64_t a1)
{
  if (*(double *)(a1 + 8) <= 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    id v12 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,getAge called while MCT not set", buf, 2u);
    }
    double v11 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CFTimeInterval cllcf::LCFusionFusedLocation::getAge() const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    id v2 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = sub_10016BA10();
      *(_DWORD *)long long buf = 1;
      double v4 = sub_10016BA54(v3, buf);
      double v5 = *(double *)(a1 + 8);
      uint64_t v6 = sub_10016BA10();
      *(_DWORD *)long long buf = 1;
      double v7 = sub_10016BA54(v6, buf);
      uint64_t v8 = sub_10016BA10();
      double v9 = sub_10018202C(v8);
      *(_DWORD *)long long buf = 134218496;
      double v18 = v4 - v5;
      __int16 v19 = 2048;
      double v20 = v7;
      __int16 v21 = 2048;
      double v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "FusedLoc,getAge,age,%.3f,now_mct,%.3f,propagation_us,%.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      sub_1005B5034();
      sub_1005B5034();
      uint64_t v14 = sub_10016BA10();
      sub_10018202C(v14);
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval cllcf::LCFusionFusedLocation::getAge() const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v10 = sub_10016BA10();
    *(_DWORD *)long long buf = 1;
    return sub_10016BA54(v10, buf) - *(double *)(a1 + 8);
  }
  return v11;
}

void sub_10132D934(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10132D940(uint64_t result, int a2)
{
  *(unsigned char *)(result + 664) = 1;
  *(_DWORD *)(result + 652) = a2;
  *(_DWORD *)(result + 612) = a2;
  return result;
}

uint64_t sub_10132D954(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + 8 * (v2 / 0x17)) + 176 * (v2 % 0x17) + 24);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;

  return sub_100A31F9C((uint64_t)a1, 1);
}

int64x2_t sub_10132D9FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10132EE00((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x17));
  uint64_t v7 = *v6 + 176 * (v4 % 0x17);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4048;
  }
  *(_OWORD *)(v7 - 176) = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(v7 - 160) = *(void *)(a2 + 16);
  *(void *)(v7 - 152) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(v7 - 144) = off_10232A710;
  long long v9 = *(_OWORD *)(a2 + 40);
  long long v10 = *(_OWORD *)(a2 + 56);
  long long v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 - 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v7 - 104) = v11;
  *(_OWORD *)(v7 - 120) = v10;
  *(_OWORD *)(v7 - 136) = v9;
  long long v12 = *(_OWORD *)(a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 120);
  long long v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v7 - 28) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(v7 - 40) = v14;
  *(_OWORD *)(v7 - 56) = v13;
  *(_OWORD *)(v7 - 72) = v12;
  *(_WORD *)(v7 - 8) = *(_WORD *)(a2 + 168);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void *sub_10132DB24(int64x2_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a1[2].u64[0];
  uint64_t v7 = a1->i64[1];
  uint64_t v8 = a1[1].i64[0];
  long long v9 = (void *)(v7 + 8 * (v6 / 0x17));
  if (v8 == v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *v9 + 176 * (v6 % 0x17);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 23 * (a2 - v9) + 0x2E8BA2E8BA2E8BA3 * ((a3 - *a2) >> 4) - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - *v9) >> 4);
  }
  uint64_t v12 = a1[2].i64[1];
  unint64_t v13 = v12 - v11;
  if (v11 >= v12 - v11)
  {
    if (v8 == v7) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = 23 * ((v8 - v7) >> 3) - 1;
    }
    if (v22 == v12 + v6)
    {
      sub_10132EAE8(a1);
      uint64_t v12 = a1[2].i64[1];
      unint64_t v13 = v12 - v11;
    }
    if (v12 != v11)
    {
      uint64_t v83 = a4;
      unint64_t v35 = a1[2].i64[0] + v12;
      uint64_t v36 = a1->i64[1];
      unint64_t v37 = (void *)(v36 + 8 * (v35 / 0x17));
      uint64_t v38 = *v37;
      unint64_t v39 = *v37 + 176 * (v35 % 0x17);
      if (a1[1].i64[0] == v36) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = v39;
      }
      uint64_t v41 = 0x2E8BA2E8BA2E8BA3 * ((v40 - v38) >> 4);
      if (v40 - v38 < 177)
      {
        unint64_t v67 = 23 - v41;
        long long v43 = &v37[-(v67 / 0x17)];
        unint64_t v44 = *v43 + 176 * (23 * (v67 / 0x17) - v67) + 3872;
      }
      else
      {
        unint64_t v42 = v41 - 1;
        long long v43 = &v37[v42 / 0x17];
        unint64_t v44 = *v43 + 176 * (v42 % 0x17);
      }
      if (v44 == a4)
      {
        uint64_t v83 = v40;
        a4 = v40;
      }
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v44;
      *(_OWORD *)(v40 + 16) = *(_OWORD *)(v44 + 16);
      *(void *)(v44 + 16) = 0;
      *(void *)(v44 + 24) = 0;
      *(void *)(v40 + 32) = off_10232A710;
      long long v68 = *(_OWORD *)(v44 + 40);
      long long v69 = *(_OWORD *)(v44 + 56);
      long long v70 = *(_OWORD *)(v44 + 72);
      *(_OWORD *)(v40 + 88) = *(_OWORD *)(v44 + 88);
      *(_OWORD *)(v40 + 72) = v70;
      *(_OWORD *)(v40 + 56) = v69;
      *(_OWORD *)(v40 + 40) = v68;
      long long v71 = *(_OWORD *)(v44 + 104);
      long long v72 = *(_OWORD *)(v44 + 120);
      long long v73 = *(_OWORD *)(v44 + 136);
      *(_OWORD *)(v40 + 148) = *(_OWORD *)(v44 + 148);
      *(_OWORD *)(v40 + 136) = v73;
      *(_OWORD *)(v40 + 120) = v72;
      *(_OWORD *)(v40 + 104) = v71;
      *(_WORD *)(v40 + 168) = *(_WORD *)(v44 + 168);
      ++a1[2].i64[1];
      if (v13 >= 2)
      {
        __n128 v84 = v37;
        uint64_t v85 = v40;
        sub_100174054(&v84, -(uint64_t)v13);
        unint64_t v37 = sub_10132F2A0((uint64_t)a1, v84, v85, v43, v44, v37, v40, (unint64_t *)&v83);
        uint64_t v40 = v74;
        a4 = v83;
      }
      if (v40 == *v37) {
        uint64_t v40 = *(v37 - 1) + 4048;
      }
      uint64_t v75 = v40 - 176;
      goto LABEL_54;
    }
    unint64_t v23 = a1[2].i64[0] + v11;
    uint64_t v24 = *(void *)(a1->i64[1] + 8 * (v23 / 0x17));
    unint64_t v25 = v23 % 0x17;
    uint64_t v26 = v24 + 176 * v25;
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a4;
    *(void *)(v26 + 16) = *(void *)(a4 + 16);
    uint64_t v27 = *(void *)(a4 + 24);
    *(void *)(v26 + 24) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = v24 + 176 * v25;
    *(void *)(v28 + 32) = off_10232A710;
    long long v29 = *(_OWORD *)(a4 + 40);
    long long v30 = *(_OWORD *)(a4 + 56);
    long long v31 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(v28 + 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(v28 + 72) = v31;
    *(_OWORD *)(v28 + 56) = v30;
    *(_OWORD *)(v28 + 40) = v29;
    long long v32 = *(_OWORD *)(a4 + 104);
    long long v33 = *(_OWORD *)(a4 + 120);
    long long v34 = *(_OWORD *)(a4 + 136);
    *(_OWORD *)(v28 + 148) = *(_OWORD *)(a4 + 148);
    *(_OWORD *)(v28 + 136) = v34;
    *(_OWORD *)(v28 + 120) = v33;
    *(_OWORD *)(v28 + 104) = v32;
    *(_WORD *)(v28 + 168) = *(_WORD *)(a4 + 168);
    ++a1[2].i64[1];
  }
  else
  {
    if (v6)
    {
      if (v11)
      {
LABEL_10:
        uint64_t v83 = a4;
        unint64_t v14 = a1[2].u64[0];
        uint64_t v15 = a1->i64[1];
        unint64_t v16 = (void *)(v15 + 8 * (v14 / 0x17));
        uint64_t v17 = *v16;
        unint64_t v18 = *v16 + 176 * (v14 % 0x17);
        if (a1[1].i64[0] == v15) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v18;
        }
        uint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((v19 - v17) >> 4);
        if (v19 - v17 < 177) {
          unint64_t v21 = v16[-((23 - v20) / 0x17uLL)] + 176 * (23 * ((23 - v20) / 0x17uLL) - (23 - v20)) + 3872;
        }
        else {
          unint64_t v21 = v16[(v20 - 1) / 0x17uLL] + 176 * ((v20 - 1) % 0x17uLL);
        }
        if (v19 == a4)
        {
          uint64_t v83 = v21;
          a4 = v21;
        }
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v19;
        *(_OWORD *)(v21 + 16) = *(_OWORD *)(v19 + 16);
        *(void *)(v19 + 16) = 0;
        *(void *)(v19 + 24) = 0;
        *(void *)(v21 + 32) = off_10232A710;
        long long v56 = *(_OWORD *)(v19 + 40);
        long long v57 = *(_OWORD *)(v19 + 56);
        long long v58 = *(_OWORD *)(v19 + 72);
        *(_OWORD *)(v21 + 88) = *(_OWORD *)(v19 + 88);
        *(_OWORD *)(v21 + 72) = v58;
        *(_OWORD *)(v21 + 56) = v57;
        *(_OWORD *)(v21 + 40) = v56;
        long long v59 = *(_OWORD *)(v19 + 104);
        long long v60 = *(_OWORD *)(v19 + 120);
        long long v61 = *(_OWORD *)(v19 + 136);
        *(_OWORD *)(v21 + 148) = *(_OWORD *)(v19 + 148);
        *(_OWORD *)(v21 + 136) = v61;
        *(_OWORD *)(v21 + 120) = v60;
        *(_OWORD *)(v21 + 104) = v59;
        *(_WORD *)(v21 + 168) = *(_WORD *)(v19 + 168);
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D1F270);
        if (v11 >= 2)
        {
          uint64_t v62 = v19 - *v16;
          uint64_t v63 = 0x2E8BA2E8BA2E8BA3 * (v62 >> 4);
          if (v62 < -175)
          {
            unint64_t v76 = 21 - v63;
            long long v65 = &v16[-(v76 / 0x17)];
            unint64_t v66 = *v65 + 176 * (23 * (v76 / 0x17) - v76) + 3872;
          }
          else
          {
            unint64_t v64 = v63 + 1;
            long long v65 = &v16[v64 / 0x17];
            unint64_t v66 = *v65 + 176 * (v64 % 0x17);
          }
          __n128 v84 = v16;
          uint64_t v85 = v19;
          sub_100174054(&v84, v11);
          sub_10132F11C((uint64_t)a1, v65, v66, v84, v85, v16, v19, (unint64_t *)&v83);
          uint64_t v19 = v77;
          a4 = v83;
        }
        uint64_t v75 = v19;
LABEL_54:
        sub_100028F18(v75, a4);
        goto LABEL_55;
      }
    }
    else
    {
      sub_10132EE00((void **)a1);
      if (v11) {
        goto LABEL_10;
      }
    }
    unint64_t v45 = a1[2].u64[0];
    uint64_t v46 = a1->i64[1];
    uint64_t v47 = (void *)(v46 + 8 * (v45 / 0x17));
    uint64_t v48 = *v47 + 176 * (v45 % 0x17);
    if (a1[1].i64[0] == v46) {
      uint64_t v48 = 0;
    }
    if (v48 == *v47) {
      uint64_t v48 = *(v47 - 1) + 4048;
    }
    *(_OWORD *)(v48 - 176) = *(_OWORD *)a4;
    *(void *)(v48 - 160) = *(void *)(a4 + 16);
    uint64_t v49 = *(void *)(a4 + 24);
    *(void *)(v48 - 152) = v49;
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 16), 1uLL, memory_order_relaxed);
    }
    *(void *)(v48 - 144) = off_10232A710;
    long long v50 = *(_OWORD *)(a4 + 40);
    long long v51 = *(_OWORD *)(a4 + 56);
    long long v52 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(v48 - 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(v48 - 104) = v52;
    *(_OWORD *)(v48 - 120) = v51;
    *(_OWORD *)(v48 - 136) = v50;
    long long v53 = *(_OWORD *)(a4 + 104);
    long long v54 = *(_OWORD *)(a4 + 120);
    long long v55 = *(_OWORD *)(a4 + 136);
    *(_OWORD *)(v48 - 28) = *(_OWORD *)(a4 + 148);
    *(_OWORD *)(v48 - 40) = v55;
    *(_OWORD *)(v48 - 56) = v54;
    *(_OWORD *)(v48 - 72) = v53;
    *(_WORD *)(v48 - 8) = *(_WORD *)(a4 + 168);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D1F270);
  }
LABEL_55:
  unint64_t v78 = a1[2].u64[0];
  uint64_t v79 = a1->i64[1];
  long long v80 = (void *)(v79 + 8 * (v78 / 0x17));
  if (a1[1].i64[0] == v79) {
    unint64_t v81 = 0;
  }
  else {
    unint64_t v81 = *v80 + 176 * (v78 % 0x17);
  }
  __n128 v84 = v80;
  uint64_t v85 = v81;
  sub_100174054(&v84, v11);
  return v84;
}

uint64_t sub_10132E304(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double a6)
{
  unint64_t v87 = off_10232A710;
  long long v11 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)long long v91 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)&v91[16] = v11;
  *(_OWORD *)&v91[32] = *(_OWORD *)(a3 + 104);
  *(_OWORD *)&v91[44] = *(_OWORD *)(a3 + 116);
  long long v12 = *(_OWORD *)(a3 + 24);
  long long v88 = *(_OWORD *)(a3 + 8);
  long long v89 = v12;
  long long v13 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)long long v90 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&v90[16] = v13;
  sub_1000318C0((uint64_t)&v87, (uint64_t)"FusedLoc,IDC Fusion a priori", *(_DWORD *)(a1 + 652));
  *(double *)v18.i64 = *(double *)(a5 + 40) * *(double *)(a5 + 40) * 0.5;
  if (*(double *)v18.i64 >= 1.0) {
    double v19 = 1.0 / *(double *)v18.i64;
  }
  else {
    double v19 = 1.0;
  }
  double v20 = *(double *)(a3 + 40) * *(double *)(a3 + 40) * 0.5;
  if (v20 >= 1.0) {
    double v21 = 1.0 / v20;
  }
  else {
    double v21 = 1.0;
  }
  double v22 = a4[5] * a4[5] * 0.5;
  if (v22 >= 1.0) {
    double v23 = 1.0 / v22;
  }
  else {
    double v23 = 1.0;
  }
  double v24 = v21 - v23;
  if (v23 > v21) {
    double v24 = v23 - v21;
  }
  double v71 = 1.0 / (v19 + v24);
  *(void *)long long v90 = sqrt(v71 + v71);
  double v68 = *(double *)(a3 + 24);
  *(double *)v14.i64 = *(double *)(a3 + 32) * 0.0174532925;
  double v25 = a4[3];
  *(double *)v15.i64 = a4[4] * 0.0174532925;
  double v26 = *(double *)(a5 + 24);
  double v27 = *(double *)(a5 + 32);
  v17.i64[0] = 0x400921FB54442D18;
  int8x16_t v85 = v17;
  if (fabs(*(double *)v14.i64) > 3.14159265)
  {
    v28.f64[0] = NAN;
    v28.f64[1] = NAN;
    int8x16_t v80 = vbslq_s8((int8x16_t)vnegq_f64(v28), v17, v14);
    int8x16_t v76 = v15;
    *(double *)v18.i64 = fmod(*(double *)v14.i64 + *(double *)v80.i64, 6.28318531);
    int8x16_t v15 = v76;
    v14.i64[1] = v80.i64[1];
    int8x16_t v17 = v85;
    *(double *)v14.i64 = *(double *)v18.i64 - *(double *)v80.i64;
  }
  *(double *)v16.i64 = v27 * 0.0174532925;
  int8x16_t v81 = v14;
  if (fabs(*(double *)v15.i64) > *(double *)v17.i64)
  {
    v29.f64[0] = NAN;
    v29.f64[1] = NAN;
    int8x16_t v77 = vbslq_s8((int8x16_t)vnegq_f64(v29), v17, v15);
    int8x16_t v73 = v16;
    *(double *)v18.i64 = fmod(*(double *)v15.i64 + *(double *)v77.i64, 6.28318531);
    int8x16_t v16 = v73;
    v14.i64[1] = v77.i64[1];
    int8x16_t v17 = v85;
    *(double *)v15.i64 = *(double *)v18.i64 - *(double *)v77.i64;
  }
  int8x16_t v78 = v15;
  if (fabs(*(double *)v16.i64) > *(double *)v17.i64)
  {
    v30.f64[0] = NAN;
    v30.f64[1] = NAN;
    int8x16_t v74 = vbslq_s8((int8x16_t)vnegq_f64(v30), v17, v16);
    *(double *)v18.i64 = fmod(*(double *)v16.i64 + *(double *)v74.i64, 6.28318531);
    v14.i64[1] = v74.i64[1];
    int8x16_t v15 = v78;
    int8x16_t v17 = v85;
    *(double *)v16.i64 = *(double *)v18.i64 - *(double *)v74.i64;
  }
  double v31 = *(double *)v81.i64;
  double v32 = fabs(*(double *)v16.i64);
  int8x16_t v75 = v16;
  if (vabdd_f64(*(double *)v81.i64, *(double *)v16.i64) > *(double *)v17.i64)
  {
    if (fabs(*(double *)v81.i64) > *(double *)v17.i64)
    {
      v33.f64[0] = NAN;
      v33.f64[1] = NAN;
      int8x16_t v66 = vbslq_s8((int8x16_t)vnegq_f64(v33), v17, v81);
      *(double *)v18.i64 = fmod(*(double *)v81.i64 + *(double *)v66.i64, 6.28318531);
      int8x16_t v16 = v75;
      int8x16_t v15 = v78;
      int8x16_t v17 = v85;
      v14.i64[1] = v66.i64[1];
      double v31 = *(double *)v18.i64 - *(double *)v66.i64;
    }
    v18.i64[0] = v16.i64[0];
    if (v32 > *(double *)v17.i64)
    {
      v34.f64[0] = NAN;
      v34.f64[1] = NAN;
      int8x16_t v67 = vbslq_s8((int8x16_t)vnegq_f64(v34), v17, v16);
      double v82 = v31;
      *(double *)v18.i64 = fmod(*(double *)v16.i64 + *(double *)v67.i64, 6.28318531);
      int8x16_t v16 = v75;
      int8x16_t v15 = v78;
      double v31 = v82;
      int8x16_t v17 = v85;
      v14.i64[1] = v67.i64[1];
      *(double *)v18.i64 = *(double *)v18.i64 - *(double *)v67.i64;
    }
    double v35 = v31 - *(double *)v18.i64;
    BOOL v36 = v31 - *(double *)v18.i64 > *(double *)v17.i64;
    BOOL v37 = vabdd_f64(v31, *(double *)v18.i64) <= *(double *)v17.i64;
    double v38 = -0.0;
    if (!v37) {
      double v38 = dbl_101D94400[v36];
    }
    double v31 = *(double *)v16.i64 + v35 + v38;
  }
  double v39 = v68 * 0.0174532925;
  double v40 = v25 * 0.0174532925;
  double v41 = v26 * 0.0174532925;
  if (vabdd_f64(*(double *)v15.i64, *(double *)v16.i64) > *(double *)v17.i64)
  {
    double v83 = v31;
    if (fabs(*(double *)v15.i64) > *(double *)v17.i64)
    {
      v42.f64[0] = NAN;
      v42.f64[1] = NAN;
      int8x16_t v69 = vbslq_s8((int8x16_t)vnegq_f64(v42), v17, v15);
      *(double *)v18.i64 = fmod(*(double *)v15.i64 + *(double *)v69.i64, 6.28318531);
      int8x16_t v16 = v75;
      int8x16_t v17 = v85;
      v14.i64[1] = v69.i64[1];
      *(double *)v15.i64 = *(double *)v18.i64 - *(double *)v69.i64;
    }
    v18.i64[0] = v16.i64[0];
    if (v32 > *(double *)v17.i64)
    {
      v43.f64[0] = NAN;
      v43.f64[1] = NAN;
      int8x16_t v70 = vbslq_s8((int8x16_t)vnegq_f64(v43), v17, v16);
      uint64_t v79 = v15.i64[0];
      *(double *)v18.i64 = fmod(*(double *)v16.i64 + *(double *)v70.i64, 6.28318531);
      v16.i64[0] = v75.i64[0];
      v15.i64[0] = v79;
      int8x16_t v17 = v85;
      v14.i64[1] = v70.i64[1];
      *(double *)v18.i64 = *(double *)v18.i64 - *(double *)v70.i64;
    }
    double v44 = *(double *)v15.i64 - *(double *)v18.i64;
    double v45 = dbl_101D94400[*(double *)v15.i64 - *(double *)v18.i64 > *(double *)v17.i64];
    BOOL v37 = vabdd_f64(*(double *)v15.i64, *(double *)v18.i64) <= *(double *)v17.i64;
    double v46 = -0.0;
    if (!v37) {
      double v46 = v45;
    }
    *(double *)v15.i64 = *(double *)v16.i64 + v44 + v46;
    double v31 = v83;
  }
  double v47 = v23 * *(double *)v15.i64;
  double v48 = v19 * v41;
  double v49 = v19 * *(double *)v16.i64;
  double v50 = v23 * v40 - v21 * v39;
  double v51 = v47 - v21 * v31;
  if (v23 <= v21)
  {
    double v50 = v21 * v39 - v23 * v40;
    double v51 = v21 * v31 - v47;
  }
  double v52 = v49 + v51;
  *(double *)v14.i64 = v71 * (v48 + v50);
  if (fabs(*(double *)v14.i64) > *(double *)v17.i64)
  {
    v53.f64[0] = NAN;
    v53.f64[1] = NAN;
    double v84 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v53), v17, v14).i64;
    *(double *)v14.i64 = fmod(*(double *)v14.i64 + v84, 6.28318531) - v84;
  }
  *(double *)v18.i64 = v71 * v52;
  if (*(double *)v14.i64 >= 1.57079633)
  {
    int8x16_t v54 = v85;
    *(double *)v14.i64 = *(double *)v85.i64 - *(double *)v14.i64;
  }
  else
  {
    int8x16_t v54 = v85;
    if (*(double *)v14.i64 < -1.57079633) {
      *(double *)v14.i64 = -3.14159265 - *(double *)v14.i64;
    }
  }
  *(double *)&long long v89 = *(double *)v14.i64 * 57.2957795;
  if (fabs(*(double *)v18.i64) > *(double *)v54.i64)
  {
    v55.f64[0] = NAN;
    v55.f64[1] = NAN;
    double v86 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v55), v54, v18).i64;
    *(double *)v18.i64 = fmod(*(double *)v18.i64 + v86, 6.28318531) - v86;
  }
  *((double *)&v89 + 1) = *(double *)v18.i64 * 57.2957795;
  if (a6 <= 2.0)
  {
    if (*(double *)&v90[16] <= 0.0) {
      *(_OWORD *)&v90[8] = *(_OWORD *)(a5 + 48);
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) & 1) == 0)
    {
      if (*(double *)&v91[16] <= 0.0) {
        *(_OWORD *)&v91[8] = *(_OWORD *)(a5 + 80);
      }
      if (*(double *)&v91[32] <= 0.0) {
        *(_OWORD *)&v91[24] = *(_OWORD *)(a5 + 96);
      }
    }
  }
  double v56 = *(double *)v90;
  if (*(double *)v90 < 2.0) {
    double v56 = 2.0;
  }
  *(double *)long long v90 = v56;
  sub_1000318C0((uint64_t)&v87, (uint64_t)"FusedLoc,IDC Fusion a posteriori", *(_DWORD *)(a1 + 652));
  unint64_t v57 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(void *)(a1 + 32) + a2) % 0x17uLL);
  long long v58 = v88;
  long long v59 = v89;
  long long v60 = *(_OWORD *)v90;
  *(_OWORD *)(v57 + 88) = *(_OWORD *)&v90[16];
  *(_OWORD *)(v57 + 72) = v60;
  *(_OWORD *)(v57 + 56) = v59;
  *(_OWORD *)(v57 + 40) = v58;
  long long v61 = *(_OWORD *)v91;
  long long v62 = *(_OWORD *)&v91[16];
  long long v63 = *(_OWORD *)&v91[32];
  *(_OWORD *)(v57 + 148) = *(_OWORD *)&v91[44];
  *(_OWORD *)(v57 + 136) = v63;
  *(_OWORD *)(v57 + 120) = v62;
  *(_OWORD *)(v57 + 104) = v61;
  unint64_t v64 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(void *)(a1 + 32) + a2) % 0x17uLL);
  *(_WORD *)(v64 + 168) = 1;
  *(_OWORD *)unint64_t v64 = v88;
  return 1;
}

void sub_10132E90C(uint64_t a1, long double a2)
{
  if (a2 >= 0.0)
  {
    *(long double *)(a1 + 632) = a2;
    *(long double *)(a1 + 640) = log(a2);
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    unint64_t v2 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#selection Invalid likelihood passed to set likelihood", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void cllcf::LCFusionLocationHypothesis::setLikelihood(double)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_10132EAAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10132EAB8(id a1)
{
  qword_102419518 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

void sub_10132EAE8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x17;
  unint64_t v4 = v2 - 23;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float64x2_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float64x2_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float64x2_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float64x2_t v53 = operator new(0xFD0uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  float64x2_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10132EDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10132EE00(void **a1)
{
  unint64_t v2 = a1[1];
  BOOL v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 23 * v4 - 1;
  }
  unint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x17)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      long long __p = sub_1000DA54C(v7, v11);
      float64x2_t v43 = (char *)__p;
      double v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      double v41 = operator new(0xFD0uLL);
      sub_1000DA434(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                float64x2_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)float64x2_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              long long __p = v24;
              float64x2_t v43 = &v24[8 * (v23 >> 2)];
              double v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              float64x2_t v43 = v22;
              double v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      BOOL v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      long long __p = v36;
      float64x2_t v43 = v33;
      double v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      double v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 11;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 23;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        double v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        long long __p = operator new(0xFD0uLL);
        sub_10017F0B4(a1, &__p);
        float64x2_t v34 = a1[2];
        long long __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        long long __p = operator new(0xFD0uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 11;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 23;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 23;
    long long __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_10132F0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10132F11C(uint64_t a1, void *a2, unint64_t a3, void *a4, uint64_t a5, uint64_t *a6, uint64_t a7, unint64_t *a8)
{
  int64_t v20 = a2;
  unint64_t v21 = a3;
  if (a3 != a5)
  {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((a5 - *a4) >> 4) + 23 * (a4 - a2) - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3 - *a2) >> 4);
    if (v10 >= 1)
    {
      do
      {
        uint64_t v12 = v21;
        uint64_t v13 = *v20 + 4048;
        uint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - v21) >> 4);
        if (v14 >= v10) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - v21) >> 4);
        }
        if (v14 <= v10) {
          unint64_t v16 = *v20 + 4048;
        }
        else {
          unint64_t v16 = v21 + 176 * v10;
        }
        unint64_t v17 = *a8;
        if (v21 <= *a8 && v17 < v16)
        {
          if (v21 == a7) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = 0xD1745D1745D1745DLL * ((uint64_t)(v21 - *v20) >> 4)
          }
                - 23 * (v20 - a6)
                + 0x2E8BA2E8BA2E8BA3 * ((a7 - *a6) >> 4);
          unint64_t v22 = v20;
          unint64_t v23 = (uint64_t *)v17;
          *a8 = sub_100174054(&v22, v18)[1];
        }
        sub_10132F464(v12, v16, a6, a7, (uint64_t *)&v22);
        a6 = v23;
        a7 = v24;
        v10 -= v15;
        sub_100174054(&v20, v15);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

void *sub_10132F2A0(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4, unint64_t a5, void *a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v21 = a4;
  unint64_t v22 = a5;
  if (a5 != a3)
  {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5 - *a4) >> 4) + 23 * (a4 - a2) - 0x2E8BA2E8BA2E8BA3 * ((a3 - *a2) >> 4);
    if (v10 >= 1)
    {
      do
      {
        uint64_t v12 = v21;
        unint64_t v13 = v22;
        if (v22 == *v21)
        {
          --v21;
          unint64_t v13 = *--v12 + 4048;
        }
        unint64_t v14 = v13 - 176;
        unint64_t v22 = v13 - 176;
        uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 4);
        if (v15 >= v10) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 4);
        }
        if (v15 <= v10) {
          unint64_t v17 = *v12;
        }
        else {
          unint64_t v17 = v13 - 176 * v10;
        }
        unint64_t v18 = *a8;
        if (*a8 < v13 && v17 <= v18)
        {
          if (v14 == a7) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = 23 * (a6 - v12)
          }
                - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v14 - *v12) >> 4)
                + 0x2E8BA2E8BA2E8BA3 * ((a7 - *a6) >> 4);
          unint64_t v23 = v12;
          uint64_t v24 = (void *)v18;
          *a8 = sub_100174054(&v23, v19 - 1)[1];
        }
        sub_10132F628(v17, v13, a6, a7, (uint64_t *)&v23);
        a6 = v24;
        a7 = v25;
        v10 -= v16;
        sub_100174054(&v21, 1 - v16);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

uint64_t sub_10132F464@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a3;
  uint64_t result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - a4 + 4048) >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4) < v10) {
        uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4);
      }
      uint64_t result = sub_10132F538(result, result + 176 * v10, a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4048 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_10132F538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10132F598(a3, v4);
      v4 += 176;
      a3 += 176;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_10132F598(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  long long v9 = *(_OWORD *)(a2 + 104);
  long long v10 = *(_OWORD *)(a2 + 120);
  long long v11 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  return a1;
}

uint64_t sub_10132F628@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((a4 - v9) >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((i - a1) >> 4) < v11) {
        uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((i - a1) >> 4);
      }
      uint64_t v12 = i - 176 * v11;
      uint64_t result = sub_10132F704(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *--v5;
      uint64_t v9 = v15;
      a4 = v15 + 4048;
    }
    a4 = v14;
    if (*v5 + 4048 == v14)
    {
      uint64_t v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_10132F704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 176;
      a3 -= 176;
      sub_10132F598(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void sub_10132F764()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DB3F40;
      v0[3] = unk_101DB3F50;
      v0[4] = xmmword_101DB3F60;
      v0[0] = xmmword_101DB3F20;
      v0[1] = unk_101DB3F30;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10132F844(_Unwind_Exception *a1)
{
}

uint64_t sub_10132FC6C(void *a1, void *a2)
{
  if (!a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDisplayStatus,status,nil", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_42:
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsDisplayStatus(const CTXPCServiceSubscriptionContext *, NSString *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
LABEL_45:
    dispatch_once(&qword_1024193E0, &stru_102320830);
    goto LABEL_42;
  }
  if (!a1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    long long v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDisplayStatus,context,nil", buf, 2u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v8) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  if ((char *)[a1 slotID] - 1 >= (char *)2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v15) = [a1 slotID];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,##cterror,isValidParamsDisplayStatus,InvalidSlot,slot,%d", buf, 8u);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      [a1 slotID];
      goto LABEL_42;
    }
  }
  else
  {
    if (([a2 isEqualToString:@"kCTRegistrationStatusUnknown"] & 1) != 0
      || ([a2 isEqualToString:@"kCTRegistrationStatusDenied"] & 1) != 0
      || ([a2 isEqualToString:@"kCTRegistrationStatusRegisteredHome"] & 1) != 0
      || ([a2 isEqualToString:@"kCTRegistrationStatusRegisteredRoaming"] & 1) != 0
      || ([a2 isEqualToString:@"kCTRegistrationStatusNotRegistered"] & 1) != 0
      || ([a2 isEqualToString:@"kCTRegistrationStatusSearching"] & 1) != 0
      || ([a2 isEqualToString:@"kCTRegistrationStatusEmergencyOnly"] & 1) != 0)
    {
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    uint64_t v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDisplayStatus,InvalidRegStatus,regsitrationStatus,%@", buf, 0xCu);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102320810);
      }
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t sub_1013301AC(void *a1)
{
  if (!a1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    BOOL v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsInHomeCountryStatus,context,nil", buf, 2u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsInHomeCountryStatus(const CTXPCServiceSubscriptionContext *)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return 0;
    }
LABEL_12:
    free(v5);
    return 0;
  }
  if ((char *)[a1 slotID] - 1 < (char *)2) {
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  BOOL v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v9 = [a1 slotID];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsInHomeCountryStatus,InvalidSlot,slot,%d", buf, 8u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    [a1 slotID];
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsInHomeCountryStatus(const CTXPCServiceSubscriptionContext *)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return 0;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1013304C4(void *a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    BOOL v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDataStatus,status,nil", buf, 2u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_18:
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsDataStatus(const CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v8);
      if (v8 == (char *)buf) {
        return 0;
      }
LABEL_19:
      free(v8);
      return 0;
    }
LABEL_31:
    dispatch_once(&qword_1024193E0, &stru_102320830);
    goto LABEL_18;
  }
  if (!a1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    BOOL v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDataStatus,context,nil", buf, 2u);
    }
    BOOL v7 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
  if ((char *)[a1 slotID] - 1 < (char *)2) {
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  unsigned int v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v12 = [a1 slotID];
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDataStatus,InvalidSlot,slot,%d", buf, 8u);
  }
  BOOL v10 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    [a1 slotID];
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsDataStatus(const CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v8);
    if (v8 == (char *)buf) {
      return 0;
    }
    goto LABEL_19;
  }
  return result;
}

id sub_1013308C0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  for (uint64_t i = *(uint64_t ***)(a1 + 16); i; uint64_t i = (uint64_t **)*i)
    sub_100555E50((int *)i[3], v2);
  return v2;
}

id sub_101330914(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  CFStringRef v8 = @"kInHomeCountryKey";
  int v4 = 0;
  BOOL v5 = &v4;
  unsigned int v9 = +[NSNumber numberWithInt:*((unsigned __int8 *)sub_10097F690(a1, &v4, (uint64_t)&unk_101D0B290, &v5) + 20)];
  [v2 setObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    BOOL v5 = &v4;
    CFStringRef v6 = @"kInHomeCountryKey";
    int v4 = 1;
    BOOL v7 = +[NSNumber numberWithInt:*((unsigned __int8 *)sub_10097F690(a1, &v4, (uint64_t)&unk_101D0B290, &v5) + 20)];
    [v2 setObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1) forKey:@"kSlotTwo"];
  }
  return v2;
}

uint64_t sub_101330A88(void *a1, uint64_t a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)[a1 objectForKey:@"kSlotOne"];
  if (v4)
  {
    int v16 = 0;
    sub_10013FA80((int)v15, v4);
    sub_10013E418((uint64_t)v15, @"kInHomeCountryKey", &v16);
    int v5 = v16;
    v17[0] = 0;
    *(void *)long long buf = v17;
    *((unsigned char *)sub_10097F690(a2, v17, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = v5 != 0;
    if (sub_1000FFBA8())
    {
      CFDictionaryRef v6 = (const __CFDictionary *)[a1 objectForKey:@"kSlotTwo"];
      if (!v6)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102320830);
        }
        uint64_t v11 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get In Home Country information for SIM 2", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102320830);
          }
          LOWORD(v17[0]) = 0;
          unint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromInHomeCountryStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, BOOL> &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        uint64_t v8 = 0;
        goto LABEL_6;
      }
      sub_10013FA80((int)buf, v6);
      sub_10013E418((uint64_t)buf, @"kInHomeCountryKey", &v16);
      int v7 = v16;
      int v14 = 1;
      *(void *)unint64_t v17 = &v14;
      *((unsigned char *)sub_10097F690(a2, &v14, (uint64_t)&unk_101D0B290, (_DWORD **)v17) + 20) = v7 != 0;
      sub_10013F3C4(buf);
    }
    uint64_t v8 = 1;
LABEL_6:
    sub_10013F3C4(v15);
    return v8;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  unsigned int v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get In Home Country information for SIM 1", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    v15[0] = 0;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromInHomeCountryStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, BOOL> &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return 0;
}

void sub_101330E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

id sub_101330EB0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  int v7 = &v6;
  BOOL v3 = sub_100980D50(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_10055F300(v3 + 3) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    int v7 = &v6;
    CFDictionaryRef v4 = sub_100980D50(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_10055F300(v4 + 3) forKey:@"kSlotTwo"];
  }
  return v2;
}

BOOL sub_101330F90(void *a1, uint64_t a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)[a1 objectForKey:@"kSlotOne"];
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Registration display status information for SIM 1", (uint8_t *)&buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v15[0]) = 0;
    unsigned int v12 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromRegistrationDisplayStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTRegistrationDisplayStatus> &)", "%s\n", (const char *)v12);
LABEL_27:
    if (v12 != &buf) {
      free(v12);
    }
    return 0;
  }
  sub_10055F2FC(&buf, v4);
  int v14 = 0;
  v15[0] = &v14;
  int v5 = sub_100980D50(a2, &v14, (uint64_t)&unk_101D0B290, v15);
  int v6 = (void **)(v5 + 3);
  if (*((char *)v5 + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)int v6 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  void v5[5] = buf.__r_.__value_.__r.__words[2];
  *((_DWORD *)v5 + 12) = v17;
  if (!sub_1000FFBA8()) {
    return 1;
  }
  CFDictionaryRef v7 = (const __CFDictionary *)[a1 objectForKey:@"kSlotTwo"];
  if (v7)
  {
    sub_10055F2FC(&buf, v7);
    int v14 = 1;
    v15[0] = &v14;
    uint64_t v8 = sub_100980D50(a2, &v14, (uint64_t)&unk_101D0B290, v15);
    unsigned int v9 = (void **)(v8 + 3);
    if (*((char *)v8 + 47) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)unsigned int v9 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v8[5] = buf.__r_.__value_.__r.__words[2];
    *((_DWORD *)v8 + 12) = v17;
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  unint64_t v13 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Registration display status information for SIM 2", (uint8_t *)&buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v15[0]) = 0;
    unsigned int v12 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromRegistrationDisplayStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTRegistrationDisplayStatus> &)", "%s\n", (const char *)v12);
    goto LABEL_27;
  }
  return result;
}

void sub_101331354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10133137C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  CFDictionaryRef v7 = &v6;
  BOOL v3 = (unsigned __int8 *)sub_1007006D0(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_100560750(v3 + 20) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    CFDictionaryRef v7 = &v6;
    CFDictionaryRef v4 = (unsigned __int8 *)sub_1007006D0(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_100560750(v4 + 20) forKey:@"kSlotTwo"];
  }
  return v2;
}

uint64_t sub_10133145C(void *a1, uint64_t a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)[a1 objectForKey:@"kSlotOne"];
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    unint64_t v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Data Status information for SIM 1", buf, 2u);
    }
    uint64_t v9 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v9;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v18[0]) = 0;
LABEL_23:
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromDataStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTDataStatus> &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return 0;
  }
  sub_10056074C((uint64_t)buf, v4);
  int v17 = 0;
  v18[0] = &v17;
  int v5 = sub_1007006D0(a2, &v17, (uint64_t)&unk_101D0B290, v18);
  char v6 = v21;
  long long v7 = v20;
  *(_OWORD *)((char *)v5 + 20) = *(_OWORD *)buf;
  *(_OWORD *)((char *)v5 + 36) = v7;
  *((unsigned char *)v5 + 52) = v6;
  if (!sub_1000FFBA8()) {
    return 1;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)[a1 objectForKey:@"kSlotTwo"];
  if (v8)
  {
    sub_10056074C((uint64_t)buf, v8);
    uint64_t v9 = 1;
    int v17 = 1;
    v18[0] = &v17;
    BOOL v10 = sub_1007006D0(a2, &v17, (uint64_t)&unk_101D0B290, v18);
    char v11 = v21;
    long long v12 = v20;
    *(_OWORD *)((char *)v10 + 20) = *(_OWORD *)buf;
    *(_OWORD *)((char *)v10 + 36) = v12;
    *((unsigned char *)v10 + 52) = v11;
    return v9;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  int v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Data Status information for SIM 2", buf, 2u);
  }
  uint64_t v9 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v18[0]) = 0;
    goto LABEL_23;
  }
  return v9;
}

uint64_t sub_1013317AC(void *a1, uint64_t a2)
{
  if (!a1 || !a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    int v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218240;
      char v11 = a1;
      __int16 v12 = 2048;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,suplInfo,invalid,context,%p,info,%p", buf, 0x16u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isSuplInfoValid(const CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v7);
    if (v7 == (char *)buf) {
      return 0;
    }
LABEL_13:
    free(v7);
    return 0;
  }
  if ((char *)[a1 slotID] - 1 < (char *)2) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102320810);
  }
  CFDictionaryRef v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v11) = [a1 slotID];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,suplInfo,invalidSlot,%d", buf, 8u);
  }
  BOOL v9 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    [a1 slotID];
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isSuplInfoValid(const CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v7);
    if (v7 == (char *)buf) {
      return 0;
    }
    goto LABEL_13;
  }
  return result;
}

CFDictionaryRef sub_101331B00(void *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  LODWORD(keys[0]) = [a1 slotID];
  CFNumberRef v3 = sub_100122110(keys);
  CFNumberRef v4 = v3;
  keys[0] = @"kSlotIdKey";
  keys[1] = @"kSuplKey";
  values[0] = v3;
  values[1] = a2;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_101331BBC(CFDictionaryRef theDict, void *a2, unint64_t *a3)
{
  sub_10013FA80((int)v13, theDict);
  CFDataRef theData = 0;
  unsigned int v11 = 0;
  if (sub_1004D08E4((uint64_t)v13, @"kSlotIdKey", &v11)
    && sub_1004D2028((uint64_t)v13, @"kSuplKey", (CFTypeRef *)&theData))
  {
    BytePtr = (char *)CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    sub_10008AB10(a3, Length);
    sub_100C60C58((uint64_t)a3, (char *)*a3, BytePtr, &BytePtr[Length], Length);
    *a2 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:v11];
    uint64_t v7 = 1;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    CFDictionaryRef v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct couldn't get value for  CTXPCServiceSubscriptionContext or  suplPayload ", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copySuplPayloadfromDictionary(CFDictionaryRef, CTXPCServiceSubscriptionContext **, std::vector<uint8_t> &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    uint64_t v7 = 0;
  }
  sub_10013F3C4(v13);
  return v7;
}

void sub_101331E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

id sub_101331E48(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  uint64_t v7 = &v6;
  CFNumberRef v3 = sub_100981110(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_10055E8DC(v3 + 3) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    uint64_t v7 = &v6;
    CFNumberRef v4 = sub_100981110(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_10055E8DC(v4 + 3) forKey:@"kSlotTwo"];
  }
  return v2;
}

BOOL sub_101331F28(void *a1, uint64_t a2)
{
  id v4 = [a1 objectForKey:@"kSlotOne"];
  if (v4)
  {
    sub_10055E8D8(buf, v4);
    int v20 = 0;
    v21[0] = &v20;
    int v5 = sub_100981110(a2, &v20, (uint64_t)&unk_101D0B290, v21);
    int v6 = (void **)(v5 + 3);
    if (*((char *)v5 + 47) < 0) {
      operator delete(*v6);
    }
    void v5[5] = v23;
    *(_OWORD *)int v6 = *(_OWORD *)buf;
    HIBYTE(v23) = 0;
    buf[0] = 0;
    uint64_t v7 = (void **)(v5 + 6);
    if (*((char *)v5 + 71) < 0) {
      operator delete(*v7);
    }
    v5[8] = v25;
    *(_OWORD *)uint64_t v7 = __p;
    HIBYTE(v25) = 0;
    LOBYTE(__p) = 0;
    CFDictionaryRef v8 = (void **)(v5 + 9);
    if (*((char *)v5 + 95) < 0)
    {
      operator delete(*v8);
      int v12 = SHIBYTE(v25);
      *(_OWORD *)CFDictionaryRef v8 = v26;
      v5[11] = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
      if (v12 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(_OWORD *)CFDictionaryRef v8 = v26;
      v5[11] = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)buf);
    }
    if (!sub_1000FFBA8()) {
      return 1;
    }
    id v13 = [a1 objectForKey:@"kSlotTwo"];
    if (v13)
    {
      sub_10055E8D8(buf, v13);
      int v20 = 1;
      v21[0] = &v20;
      int v14 = sub_100981110(a2, &v20, (uint64_t)&unk_101D0B290, v21);
      uint64_t v15 = (void **)(v14 + 3);
      if (*((char *)v14 + 47) < 0) {
        operator delete(*v15);
      }
      v14[5] = v23;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)buf;
      HIBYTE(v23) = 0;
      buf[0] = 0;
      int v16 = (void **)(v14 + 6);
      if (*((char *)v14 + 71) < 0) {
        operator delete(*v16);
      }
      v14[8] = v25;
      *(_OWORD *)int v16 = __p;
      HIBYTE(v25) = 0;
      LOBYTE(__p) = 0;
      int v17 = (void **)(v14 + 9);
      if (*((char *)v14 + 95) < 0)
      {
        operator delete(*v17);
        int v19 = SHIBYTE(v25);
        *(_OWORD *)int v17 = v26;
        v14[11] = v27;
        HIBYTE(v27) = 0;
        LOBYTE(v26) = 0;
        if (v19 < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        *(_OWORD *)int v17 = v26;
        v14[11] = v27;
        HIBYTE(v27) = 0;
        LOBYTE(v26) = 0;
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)buf);
      }
      return 1;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    unint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 2", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      LOWORD(v21[0]) = 0;
      unsigned int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copySimStatusChangeFromDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTMobileEquipmentInfo> &)", "%s\n", v11);
LABEL_36:
      if (v11 != (char *)buf) {
        free(v11);
      }
      return 0;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    BOOL v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 1", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      LOWORD(v21[0]) = 0;
      unsigned int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copySimStatusChangeFromDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTMobileEquipmentInfo> &)", "%s\n", v11);
      goto LABEL_36;
    }
  }
  return result;
}

void sub_101332420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10055E3CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101332440(void *a1)
{
  if (!a1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    CFNumberRef v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,subscriptionContext,invalid,context,%{private}p", buf, 0xCu);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidSubscriptionContext(const CTXPCServiceSubscriptionContext *)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return 0;
    }
LABEL_12:
    free(v5);
    return 0;
  }
  if ((char *)[a1 slotID] - 1 < (char *)2) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102320810);
  }
  int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v9) = [a1 slotID];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,subscriptionContext,invalidSlot,%d", buf, 8u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    [a1 slotID];
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidSubscriptionContext(const CTXPCServiceSubscriptionContext *)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return 0;
    }
    goto LABEL_12;
  }
  return result;
}

CFDictionaryRef sub_101332770(void *a1)
{
  values = a1;
  keys = @"kSubscriptionKey";
  return CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_1013327EC(CFDictionaryRef theDict, id *a2)
{
  sub_10013FA80((int)v9, theDict);
  CFDictionaryRef v8 = 0;
  uint64_t v3 = sub_1004D01D8((uint64_t)v9, @"kSubscriptionKey", (CFTypeRef *)&v8);
  if (v3)
  {
    id v4 = [v8 copy];
    *a2 = v4;
    [v4 setLabel:[objc_msgSend(objc_msgSend(v8, "label"), "copy") copy]];
    [*a2 setPhoneNumber:[objc_msgSend(objc_msgSend(v8, "phoneNumber"), "copy") copy]];
    [*a2 setUserDataPreferred:[objc_msgSend(objc_msgSend(v8, "userDataPreferred"), "copy") copy]];
    [*a2 setUserDefaultVoice:[objc_msgSend(objc_msgSend(v8, "userDefaultVoice"), "copy") copy]];
    [*a2 setIsSimPresent:[v8 isSimPresent]];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,couldn't get value for kSubscriptionKey", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromSubscriptionContextDictionary(CFDictionaryRef, CTXPCServiceSubscriptionContext **)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  sub_10013F3C4(v9);
  return v3;
}

void sub_101332A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

id sub_101332A84(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  BOOL v7 = &v6;
  uint64_t v3 = (unsigned __int8 *)sub_100980B28(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_1005614BC(v3 + 20) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    BOOL v7 = &v6;
    id v4 = (unsigned __int8 *)sub_100980B28(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_1005614BC(v4 + 20) forKey:@"kSlotTwo"];
  }
  return v2;
}

uint64_t sub_101332B64(void *a1, uint64_t a2)
{
  id v4 = [a1 objectForKey:@"kSlotOne"];
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get subscription context information for SIM 1", buf, 2u);
    }
    uint64_t v7 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v13[0]) = 0;
LABEL_23:
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyFromSubscriptionContextDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTXPCServiceSubscriptionContext> &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
    return 0;
  }
  sub_1005614B8(&v14, v4);
  v13[0] = 0;
  *(void *)std::string buf = v13;
  int v5 = sub_100980B28(a2, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  *((_WORD *)v5 + 10) = v14;
  *((unsigned char *)v5 + 22) = v15;
  if (!sub_1000FFBA8()) {
    return 1;
  }
  id v6 = [a1 objectForKey:@"kSlotTwo"];
  if (v6)
  {
    sub_1005614B8(&v14, v6);
    uint64_t v7 = 1;
    v13[0] = 1;
    *(void *)std::string buf = v13;
    CFDictionaryRef v8 = sub_100980B28(a2, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    *((_WORD *)v8 + 10) = v14;
    *((unsigned char *)v8 + 22) = v15;
    return v7;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  BOOL v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ctcl couldn't get subscription context information for SIM 2", buf, 2u);
  }
  uint64_t v7 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v13[0]) = 0;
    goto LABEL_23;
  }
  return v7;
}

CFDictionaryRef sub_101332EAC(void *a1, char a2, int a3, int a4, int a5)
{
  char v19 = a2;
  LODWORD(keys[0]) = [a1 slotID];
  CFNumberRef v8 = sub_100122110(keys);
  CFNumberRef v9 = v8;
  BOOL v10 = (void *)sub_100007264(&v19);
  id v11 = v10;
  LODWORD(keys[0]) = a3;
  CFNumberRef v12 = sub_1004D3BC0((unsigned int *)keys);
  CFNumberRef v13 = v12;
  LODWORD(keys[0]) = a4;
  CFNumberRef v14 = sub_100122110(keys);
  CFNumberRef v15 = v14;
  LODWORD(keys[0]) = a5;
  CFNumberRef v16 = sub_100122110(keys);
  CFNumberRef v17 = v16;
  keys[0] = @"kSlotIdKey";
  keys[1] = @"kSmsSendSuccessKey";
  keys[2] = @"kSmsMessageIdKey";
  keys[3] = @"kSmsSendErrorKey";
  keys[4] = @"kSmsModemErrorKey";
  values[0] = v8;
  values[1] = v10;
  values[2] = v12;
  values[3] = v14;
  values[4] = v16;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 5, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_101332FF8(CFDictionaryRef theDict, void *a2, BOOL *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  sub_10013FA80((int)v16, theDict);
  unsigned int v15 = 0;
  if (sub_1004D08E4((uint64_t)v16, @"kSlotIdKey", &v15)
    && sub_1000D29FC((uint64_t)v16, @"kSmsSendSuccessKey", a3)
    && sub_1004D08E4((uint64_t)v16, @"kSmsMessageIdKey", a4)
    && sub_10013E418((uint64_t)v16, @"kSmsSendErrorKey", a5)
    && (sub_10013E418((uint64_t)v16, @"kSmsModemErrorKey", a6) & 1) != 0)
  {
    *a2 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:v15];
    uint64_t v11 = 1;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    CFNumberRef v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,couldn't get value from SMS info dictionary", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      CFNumberRef v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromSmsSentDictionary(CFDictionaryRef, CTXPCServiceSubscriptionContext **, BOOL &, uint32_t &, int32_t &, int32_t &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v11 = 0;
  }
  sub_10013F3C4(v16);
  return v11;
}

void sub_101333280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

id sub_1013332A4(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  LODWORD(v9) = 0;
  if (sub_10011853C(a1, (int *)&v9))
  {
    int v8 = 0;
    CFNumberRef v9 = &v8;
    uint64_t v3 = sub_100981438((uint64_t)a1, &v8, (uint64_t)&unk_101D0B290, &v9);
    id v4 = v3 + 3;
    if (*((char *)v3 + 47) < 0) {
      id v4 = (void *)*v4;
    }
    [v2 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4) forKey:@"kPhoneNumberOneKey"];
  }
  LODWORD(v9) = 1;
  if (sub_10011853C(a1, (int *)&v9))
  {
    int v8 = 1;
    CFNumberRef v9 = &v8;
    int v5 = sub_100981438((uint64_t)a1, &v8, (uint64_t)&unk_101D0B290, &v9);
    id v6 = v5 + 3;
    if (*((char *)v5 + 47) < 0) {
      id v6 = (void *)*v6;
    }
    [v2 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6) forKey:@"kPhoneNumberTwoKey"];
  }
  return v2;
}

uint64_t sub_1013333DC(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t v3 = sub_10013FA80((int)v10, theDict);
  memset(&__str, 0, sizeof(__str));
  if (sub_1000A7CF8(v3, @"kPhoneNumberOneKey", &__str))
  {
    LODWORD(v11) = 0;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    id v4 = (std::string *)sub_100981438(a2, (int *)&v11, (uint64_t)&unk_101D0B290, &v8);
    std::string::operator=(v4 + 1, &__str);
  }
  memset(&v8, 0, sizeof(v8));
  if (sub_1000A7CF8((uint64_t)v10, @"kPhoneNumberTwoKey", &v8))
  {
    int v7 = 1;
    uint64_t v11 = &v7;
    int v5 = (std::string *)sub_100981438(a2, &v7, (uint64_t)&unk_101D0B290, &v11);
    std::string::operator=(v5 + 1, &v8);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_10013F3C4(v10);
  return 1;
}

void sub_1013334F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_10013F3C4(v22 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_101333538(CFDictionaryRef theDict, BOOL *a2)
{
  sub_10013FA80((int)v7, theDict);
  uint64_t v3 = sub_1000D29FC((uint64_t)v7, @"kAltAccountConfiguredKey", a2);
  if ((v3 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    id v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#Warning,copyValuesFromAltAccountConfiguredDictionary, couldn't get value for Alternate Account Capability", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102320810);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoreTelephonyUtils::copyValuesFromAltAccountConfiguredDictionary(CFDictionaryRef, BOOL &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  sub_10013F3C4(v7);
  return v3;
}

void sub_101333708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_101333728(int a1)
{
  LODWORD(keys) = a1;
  CFNumberRef v1 = sub_100122110(&keys);
  CFNumberRef v2 = v1;
  values = v1;
  keys = @"kTandemCapabilityKey";
  return CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_1013337C0(CFDictionaryRef theDict, void *a2)
{
  sub_10013FA80((int)v8, theDict);
  unsigned int v7 = 0;
  uint64_t v3 = sub_1004D08E4((uint64_t)v8, @"kTandemCapabilityKey", &v7);
  if (v3)
  {
    *a2 = v7;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    id v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,couldn't get value from tandem capability dictionary", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromTandemCapabilityDictionary(CFDictionaryRef, CTDualSimCapability &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  sub_10013F3C4(v8);
  return v3;
}

void sub_1013339A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

BOOL sub_1013339C0(unint64_t a1)
{
  if (a1 >= 5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    CFNumberRef v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v6 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isTandemCapabilityInvalid,capability,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isTandemCapabilityInfoValid(CTDualSimCapability)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return a1 < 5;
}

void sub_101333B7C(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  memset(&v45, 0, sizeof(v45));
  if (!a1)
  {
    long long v12 = 0uLL;
LABEL_47:
    *a2 = v12;
    a2[1] = v12;
    goto LABEL_97;
  }
  float64x2_t v34 = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  uint64_t v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ctcl,listOfApns:%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    *(_DWORD *)uint64_t v49 = 138412290;
    *(void *)&v49[4] = a1;
    float64x2_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v4 = [a1 countByEnumeratingWithState:&v41 objects:v50 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v42;
    while (2)
    {
      int v6 = 0;
      do
      {
        if (*(void *)v42 != v5) {
          objc_enumerationMutation(a1);
        }
        CFDictionaryRef v7 = *(const __CFDictionary **)(*((void *)&v41 + 1) + 8 * (void)v6);
        uint64_t v40 = 0;
        int v39 = 0;
        sub_10013FA80((int)v38, v7);
        if (sub_10006EF84((uint64_t)v38, "type-mask", (_DWORD *)&v40 + 1))
        {
          if (sub_10006EF84((uint64_t)v38, "AllowedProtocolMask", &v40))
          {
            if (sub_10006EF84((uint64_t)v38, "TechnologyMask", &v39))
            {
              if (sub_1004D1284((uint64_t)v38, "apn", &v45))
              {
                int v8 = HIDWORD(v40);
                if ((v40 & 0x40000100000000) != 0)
                {
                  if ((~v40 & 3) != 0) {
                    unsigned int v9 = (v40 >> 1) & 1;
                  }
                  else {
                    unsigned int v9 = 2;
                  }
                  unsigned int v37 = v9;
                  if ((v39 & 4) != 0)
                  {
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_102320830);
                    }
                    char v21 = qword_1024193E8;
                    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v22 = &v45;
                      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)std::string buf = 136315138;
                      *(void *)&uint8_t buf[4] = v22;
                      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ctcl,returning first UMTS APN:%s", buf, 0xCu);
                    }
                    unsigned int v23 = v37;
                    if (!sub_10013D1A0(115, 2)) {
                      goto LABEL_92;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_102320830);
                    }
                    uint64_t v24 = &v45;
                    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v24 = (std::string *)v45.__r_.__value_.__r.__words[0];
                    }
                    goto LABEL_114;
                  }
                  if (!v39)
                  {
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_102320830);
                    }
                    log = qword_1024193E8;
                    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "kWTUnknown", buf, 2u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024193E0 != -1) {
                        dispatch_once(&qword_1024193E0, &stru_102320830);
                      }
                      *(_WORD *)uint64_t v49 = 0;
                      loga = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", loga);
                      if (loga != buf) {
                        free(loga);
                      }
                    }
                  }
                  if ((v8 & 0x400000) != 0)
                  {
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_102320830);
                    }
                    uint64_t v25 = qword_1024193E8;
                    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                    {
                      long long v26 = &v45;
                      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        long long v26 = (std::string *)v45.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)std::string buf = 136315138;
                      *(void *)&uint8_t buf[4] = v26;
                      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ctcl,returning EL-DC APN:%s", buf, 0xCu);
                    }
                    unsigned int v23 = v37;
                    if (!sub_10013D1A0(115, 2)) {
                      goto LABEL_92;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_102320830);
                    }
                    uint64_t v24 = &v45;
                    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v24 = (std::string *)v45.__r_.__value_.__r.__words[0];
                    }
LABEL_114:
                    *(_DWORD *)uint64_t v49 = 136315138;
                    *(void *)&v49[4] = v24;
                    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v30);
                    if (v30 != buf) {
                      free(v30);
                    }
LABEL_92:
                    *(_DWORD *)float64x2_t v34 = 0;
                    *((_DWORD *)v34 + 1) = v23;
                    uint64_t v27 = (char *)v34 + 8;
                    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_1000DC48C(v27, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v27 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
                      *((void *)v34 + 3) = *((void *)&v45.__r_.__value_.__l + 2);
                    }
                    sub_10013F3C4(v38);
                    goto LABEL_97;
                  }
                  *(_DWORD *)uint64_t v49 = 0;
                  *(_DWORD *)&v49[4] = v37;
                  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
                    sub_1000DC48C(&v49[8], v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
                  }
                  else {
                    *(std::string *)&v49[8] = v45;
                  }
                  *(_DWORD *)std::string buf = HIDWORD(v40);
                  *(void *)&uint8_t buf[8] = *(void *)v49;
                  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v49[8];
                  uint64_t v52 = *(void *)&v49[24];
                  memset(&v49[8], 0, 24);
                  sub_101334978(&v46, (int *)buf);
                  if (SHIBYTE(v52) < 0) {
                    operator delete(*(void **)&buf[16]);
                  }
                  if ((v49[31] & 0x80000000) != 0) {
                    operator delete(*(void **)&v49[8]);
                  }
                }
              }
            }
          }
        }
        sub_10013F3C4(v38);
        int v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v10 = [a1 countByEnumeratingWithState:&v41 objects:v50 count:16];
      id v4 = v10;
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = v46;
  if (v46 != v47)
  {
    while ((*(unsigned char *)v11 & 1) == 0)
    {
      v11 += 40;
      if (v11 == v47) {
        goto LABEL_62;
      }
    }
  }
  if (v11 != v47)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    CFNumberRef v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      CFNumberRef v14 = &v45;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFNumberRef v14 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ctcl,returning I-DC APN:%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      unsigned int v15 = &v45;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v49 = 136315138;
      *(void *)&v49[4] = v15;
      CFNumberRef v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    goto LABEL_71;
  }
LABEL_62:
  if (v46 == v47)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#ctcl,no apns", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      *(_WORD *)uint64_t v49 = 0;
      unint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    long long v12 = 0uLL;
    a2 = v34;
    goto LABEL_47;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  CFNumberRef v17 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v18 = (void *)(v46 + 16);
    if (*(char *)(v46 + 39) < 0) {
      unint64_t v18 = (void *)*v18;
    }
    *(_DWORD *)std::string buf = 134218242;
    *(void *)&uint8_t buf[4] = 0xCCCCCCCCCCCCCCCDLL * ((v47 - v46) >> 3);
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ctcl,returning the first apn from the queue,%lu,%s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    long long v31 = (void *)(v46 + 16);
    if (*(char *)(v46 + 39) < 0) {
      long long v31 = (void *)*v31;
    }
    *(_DWORD *)uint64_t v49 = 134218242;
    *(void *)&v49[4] = 0xCCCCCCCCCCCCCCCDLL * ((v47 - v46) >> 3);
    *(_WORD *)&v49[12] = 2080;
    *(void *)&unsigned char v49[14] = v31;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v32);
    if (v32 != buf) {
      free(v32);
    }
  }
  uint64_t v11 = v46;
LABEL_71:
  *(void *)float64x2_t v34 = *(void *)(v11 + 8);
  char v19 = (char *)v34 + 8;
  if (*(char *)(v11 + 39) < 0)
  {
    sub_1000DC48C(v19, *(void **)(v11 + 16), *(void *)(v11 + 24));
  }
  else
  {
    long long v20 = *(_OWORD *)(v11 + 16);
    *((void *)v34 + 3) = *(void *)(v11 + 32);
    *(_OWORD *)char v19 = v20;
  }
LABEL_97:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = &v46;
  sub_1013356C4((void ***)buf);
}

void sub_1013348D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  a56 = (uint64_t)&a33;
  sub_1013356C4((void ***)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_101334978(uint64_t *a1, int *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_1001D7FD4();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = v4;
    if (v13) {
      CFNumberRef v14 = (char *)sub_1002E5328(v4, v13);
    }
    else {
      CFNumberRef v14 = 0;
    }
    unsigned int v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v13];
    *(void *)unsigned int v15 = *a2;
    *((void *)v15 + 1) = *((void *)a2 + 1);
    long long v16 = *((_OWORD *)a2 + 1);
    *((void *)v15 + 4) = *((void *)a2 + 4);
    *((_OWORD *)v15 + 1) = v16;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 2) = 0;
    v18[2] = v15 + 40;
    sub_101335768(a1, v18);
    uint64_t v9 = a1[1];
    sub_10133590C((uint64_t)v18);
  }
  else
  {
    *(void *)unint64_t v7 = *a2;
    *(void *)(v7 + 8) = *((void *)a2 + 1);
    long long v8 = *((_OWORD *)a2 + 1);
    *(void *)(v7 + 32) = *((void *)a2 + 4);
    *(_OWORD *)(v7 + 16) = v8;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 2) = 0;
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return v9 - 40;
}

void sub_101334AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10133590C((uint64_t)va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_101334AD8(uint64_t a1)
{
  CFStringRef v2 = @"kStewieSupportKey";
  uint64_t v3 = +[NSNumber numberWithBool:a1];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

BOOL sub_101334B5C(void *a1, unsigned char *a2)
{
  id v3 = [a1 valueForKey:@"kStewieSupportKey"];
  id v4 = v3;
  if (v3)
  {
    *a2 = [v3 BOOLValue];
  }
  else if (_os_feature_enabled_impl())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102320850);
    }
    unint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136380675;
      id v9 = [@"kStewieSupportKey" UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,copyValuesFromStewieSupportDictionary,couldn't get value for %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320850);
      }
      [@"kStewieSupportKey" UTF8String];
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromStewieSupportDictionary(NSDictionary *, BOOL &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return v4 != 0;
}

uint64_t sub_101334D68(void *a1, uint64_t a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)[a1 objectForKey:@"kSlotOne"];
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    id v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get IMS Status information for SIM 1", buf, 2u);
    }
    uint64_t v7 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v13[0]) = 0;
LABEL_23:
    unint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromImsRegDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTImsRegStatus> &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
    return 0;
  }
  sub_100560DC4(v14, v4);
  v13[0] = 0;
  *(void *)std::string buf = v13;
  unint64_t v5 = sub_10098170C(a2, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  *((_WORD *)v5 + 10) = *(_WORD *)v14;
  if (!sub_1000FFBA8()) {
    return 1;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)[a1 objectForKey:@"kSlotTwo"];
  if (v6)
  {
    sub_100560DC4(v14, v6);
    uint64_t v7 = 1;
    v13[0] = 1;
    *(void *)std::string buf = v13;
    long long v8 = sub_10098170C(a2, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    *((_WORD *)v8 + 10) = *(_WORD *)v14;
    return v7;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  unint64_t v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ctcl couldn't get IMS Status information for SIM 2", buf, 2u);
  }
  uint64_t v7 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v13[0]) = 0;
    goto LABEL_23;
  }
  return v7;
}

id sub_1013350A0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  uint64_t v7 = &v6;
  id v3 = (unsigned __int8 *)sub_10098170C(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_100560DC8(v3 + 20) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    uint64_t v7 = &v6;
    CFDictionaryRef v4 = (unsigned __int8 *)sub_10098170C(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_100560DC8(v4 + 20) forKey:@"kSlotTwo"];
  }
  return v2;
}

id sub_101335180(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  LODWORD(v5) = 0;
  if (sub_10011853C(a1, (int *)&v5))
  {
    int v4 = 0;
    unint64_t v5 = &v4;
    [v2 setValue:[NSNumber numberWithInt:*((unsigned int *)sub_1000F3C48((uint64_t)a1, &v4, (uint64_t)&unk_101D0B290, &v5) + 5)] forKey:@"kSlotOne"];
  }
  LODWORD(v5) = 1;
  if (sub_10011853C(a1, (int *)&v5))
  {
    int v4 = 1;
    unint64_t v5 = &v4;
    [v2 setValue:[NSNumber numberWithInt:*((unsigned int *)sub_1000F3C48((uint64_t)a1, &v4, (uint64_t)&unk_101D0B290, &v5) + 5)] forKey:@"kSlotTwo"];
  }
  return v2;
}

uint64_t sub_1013352A0(void *a1, uint64_t a2)
{
  if ([a1 valueForKey:@"kSlotOne"])
  {
    unsigned int v4 = [[a1 valueForKey:@"kSlotOne"] intValue];
    int v7 = 0;
    long long v8 = &v7;
    *((_DWORD *)sub_1000F3C48(a2, &v7, (uint64_t)&unk_101D0B290, &v8) + 5) = v4;
  }
  if ([a1 valueForKey:@"kSlotTwo"])
  {
    unsigned int v5 = [[a1 valueForKey:@"kSlotTwo"] intValue];
    int v7 = 1;
    long long v8 = &v7;
    *((_DWORD *)sub_1000F3C48(a2, &v7, (uint64_t)&unk_101D0B290, &v8) + 5) = v5;
  }
  return 1;
}

uint64_t sub_101335390(void *a1)
{
  unsigned __int8 v8 = 0;
  if (a1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    int v2 = 255;
    if ([a1 length] != (id)5)
    {
      int v3 = 0;
      return v3 | (v2 << 8);
    }
    [a1 getBytes:&v8 range:1];
    buf[0] = -1;
    int v3 = v8;
    switch(v8)
    {
      case 1u:
        uint64_t v4 = 2;
        break;
      case 4u:
        uint64_t v4 = 4;
        break;
      case 2u:
        uint64_t v4 = 3;
        break;
      default:
        return v3 | (v2 << 8);
    }
    [a1 getBytes:buf range:v4];
    if ((char)buf[0] > 19)
    {
      switch(buf[0])
      {
        case 20u:
          int v2 = 20;
          break;
        case 50u:
          int v2 = 50;
          break;
        case 100u:
          int v2 = 100;
          break;
      }
    }
    else if ((char)buf[0] == -2)
    {
      int v2 = 254;
    }
    else if (buf[0] == 10)
    {
      int v2 = 10;
    }
    int v3 = v8;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    unsigned int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "onLinkQualityChanged no payload", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102320830);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::pair<CLTelephonyService_Type::LinkStateNotificationType, CLTelephonyService_Type::LQMThreshold> CLCoreTelephonyUtils::extractLinkStateChange(NSData *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v3 = 0;
    int v2 = 255;
  }
  return v3 | (v2 << 8);
}

void sub_101335634(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101335664(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101335694(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1013356C4(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_101335718((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_101335718(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t sub_101335768(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1013357E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1013357E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 40);
      a3 -= 40;
      *(void *)(v7 - 40) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 8);
      long long v9 = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 8) = *(void *)(a3 + 32);
      *(_OWORD *)(v7 - 24) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10133588C((uint64_t)v12);
  return v10;
}

uint64_t sub_10133588C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1013358C4(a1);
  }
  return a1;
}

void sub_1013358C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    v1 += 40;
  }
}

uint64_t sub_10133590C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_101335944(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_101335A4C(id a1)
{
  qword_1024870A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBTLEFenceManagerSilo"];
}

uint64_t sub_101335B0C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101336348;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024870D0 != -1) {
    dispatch_once(&qword_1024870D0, block);
  }
  return qword_1024870C8;
}

void sub_101335D70(id a1)
{
  if ((sub_1001073D0() & 0x100000) != 0) {
    byte_1024870B8 = 1;
  }
}

void sub_101335E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100111F40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101335F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100111F40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101335F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100111F40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101336028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013360D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013361B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1013361CC(uint64_t a1, void *a2)
{
  uint64_t result = (void *)sub_10133620C(a1, "CLBTLEFenceManager-Notifier", a2);
  *uint64_t result = off_1023208C0;
  return result;
}

uint64_t sub_10133620C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102320A88;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10133629C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013362BC(uint64_t a1)
{
  *(void *)a1 = off_102320A88;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_1007E53C4(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101336348()
{
}

void sub_101336394()
{
}

void *sub_1013363B8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

id sub_101336438(uint64_t a1, int a2, void *a3)
{
  id result = sub_10078AB1C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_101336488(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1013364B8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t result = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t result = off_102320B90;
  *(unsigned char *)(result + 41) = 0;
  *(_DWORD *)(result + 44) = -1;
  *(unsigned char *)(result + 48) = 0;
  return result;
}

uint64_t sub_1013364FC(uint64_t a1)
{
  *(void *)a1 = off_102320B90;
  if (*(unsigned char *)(a1 + 41) && sub_100DFD2AC())
  {
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_102320BE0);
    }
    uint64_t v2 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      int v4 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)std::string buf = 138478083;
      uint64_t v9 = v3;
      __int16 v10 = 1026;
      int v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Service client is going away: %{private}@, clientType, %{public}d. Unregistering for suppression.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_102320BE0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLEclipseSubscription::~CLEclipseSubscription()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint64_t v5 = sub_100DFD2AC();
    sub_100DFD86C(v5, 0, *(_DWORD *)(a1 + 44), *(unsigned char *)(a1 + 48));
  }
  sub_100029A7C(a1);
  return a1;
}

void sub_10133671C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10133672C(uint64_t a1)
{
  sub_1013364FC(a1);

  operator delete();
}

void *sub_101336764@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_102320C10;
  v5[1] = sub_10133691C;
  v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageEclipseServiceRequest");
  sub_100BFB8F4((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_102320C10;
  v4[1] = sub_1013371C8;
  v4[2] = 0;
  uint64_t v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageEclipseViewObstructedStateRequest");
  sub_100BFB8F4((uint64_t)v9, (uint64_t)v4);
  sub_1013378C0(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BFBE10(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BFBE10(v4);
  return sub_100BFBE10(v5);
}

void sub_1013368BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_10133763C(v2 + i);
  sub_100BFBE10((uint64_t *)va);
  sub_100BFBE10(va1);
  _Unwind_Resume(a1);
}

void sub_10133691C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_10009C834(a1);
  sub_100134750(buf, "com.apple.locationd.asmanager");
  char v5 = sub_1010A4BAC(a1);
  char v6 = v5;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    uint64_t v8 = CMEclipseServiceEnable;
    if ([Dictionary objectForKey:CMEclipseServiceEnable]
      && (id v9 = [Dictionary objectForKeyedSubscript:v8]) != 0)
    {
      if (sub_100DFD2AC())
      {
        unsigned int v10 = [v9 BOOLValue];
        if ([Dictionary objectForKey:CMViewObstructedStateEnable])
        {
          if (qword_102418FC0 != -1) {
            dispatch_once(&qword_102418FC0, &stru_102320BE0);
          }
          int v11 = qword_102418FC8;
          if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v10;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Incoming view obstructed service request: %{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FC0 != -1) {
              dispatch_once(&qword_102418FC0, &stru_102320BE0);
            }
            int v33 = 67240192;
            *(_DWORD *)float64x2_t v34 = v10;
            long long v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
            if (v26 != buf) {
              free(v26);
            }
          }
        }
        if ([Dictionary objectForKey:v8])
        {
          uint64_t v12 = CMSuppressionManagerClientType;
          if ([Dictionary objectForKey:CMSuppressionManagerClientType]) {
            *(_DWORD *)(a1 + 44) = [[Dictionary objectForKeyedSubscript:v12] intValue];
          }
          uint64_t v13 = CMSuppressionManagerAlwaysOnViewObstructedRequested;
          if ([Dictionary objectForKey:CMSuppressionManagerAlwaysOnViewObstructedRequested]) {
            *(unsigned char *)(a1 + 48) = [Dictionary objectForKeyedSubscript:v13].BOOLValue;
          }
          if (qword_102418FC0 != -1) {
            dispatch_once(&qword_102418FC0, &stru_102320BE0);
          }
          long long v14 = qword_102418FC8;
          if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = *(void *)(a1 + 24);
            int v16 = *(_DWORD *)(a1 + 44);
            int v17 = *(unsigned __int8 *)(a1 + 48);
            *(_DWORD *)std::string buf = 67240963;
            *(_DWORD *)&uint8_t buf[4] = v10;
            *(_WORD *)&uint8_t buf[8] = 2113;
            *(void *)&buf[10] = v15;
            __int16 v44 = 1026;
            int v45 = v16;
            __int16 v46 = 1026;
            int v47 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Incoming eclipse service request: %{public}d, client: %{private}@, clientType: %{public}d, alwaysOnViewObstructed: %{public}d", buf, 0x1Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FC0 != -1) {
              dispatch_once(&qword_102418FC0, &stru_102320BE0);
            }
            uint64_t v27 = *(void *)(a1 + 24);
            int v28 = *(_DWORD *)(a1 + 44);
            int v29 = *(unsigned __int8 *)(a1 + 48);
            int v33 = 67240963;
            *(_DWORD *)float64x2_t v34 = v10;
            *(_WORD *)&v34[4] = 2113;
            *(void *)&v34[6] = v27;
            __int16 v35 = 1026;
            int v36 = v28;
            __int16 v37 = 1026;
            int v38 = v29;
            uint64_t v30 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v30);
            if (v30 != buf) {
              free(v30);
            }
          }
          *(unsigned char *)(a1 + 41) = v10;
          uint64_t v18 = sub_100DFD2AC();
          if (sub_100DFD86C(v18, v10, *(_DWORD *)(a1 + 44), *(unsigned char *)(a1 + 48))) {
            uint64_t v19 = 100;
          }
          else {
            uint64_t v19 = 108;
          }
          uint64_t v31 = CMErrorMessage;
          uint64_t v32 = +[NSNumber numberWithUnsignedInt:v19];
          *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
          sub_101337678(a1);
        }
        sub_10009C834(a1);
        goto LABEL_40;
      }
      uint64_t v39 = CMErrorMessage;
      uint64_t v40 = &off_102394670;
      +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
      CLConnectionMessage::sendReply();
    }
    else
    {
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_102320BE0);
      }
      uint64_t v22 = qword_102418FC8;
      if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FC0 != -1) {
          dispatch_once(&qword_102418FC0, &stru_102320BE0);
        }
        LOWORD(v33) = 0;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
        if (v25 != buf) {
          free(v25);
        }
      }
    }
    sub_10009C834(a1);
    goto LABEL_40;
  }
  if (qword_102418FC0 != -1) {
    dispatch_once(&qword_102418FC0, &stru_102320BE0);
  }
  long long v20 = qword_102418FC8;
  if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = *(void *)(a1 + 24);
    *(_DWORD *)std::string buf = 138477827;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Client %{private}@ is not entitled.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_102320BE0);
    }
    uint64_t v23 = *(void *)(a1 + 24);
    int v33 = 138477827;
    *(void *)float64x2_t v34 = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  uint64_t v41 = CMErrorMessage;
  long long v42 = &off_102394658;
  *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
  sub_101337678(a1);
LABEL_40:
}

void sub_10133715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1013371C8(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_10009C834(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v6 = CMViewObstructedStateEnable;
  if ([Dictionary objectForKey:CMViewObstructedStateEnable]
    && (id v7 = [Dictionary objectForKeyedSubscript:v6]) != 0)
  {
    unsigned int v8 = [v7 BOOLValue];
    if ([Dictionary objectForKey:v6])
    {
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_102320BE0);
      }
      id v9 = qword_102418FC8;
      if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67240192;
        unsigned int v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Incoming view obstructed service request: %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FC0 != -1) {
          dispatch_once(&qword_102418FC0, &stru_102320BE0);
        }
        int v18 = 67240192;
        unsigned int v19 = v8;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEclipseSubscription::handleMessageViewObstructedDebugRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    if (sub_100DFD2AC())
    {
      if ([Dictionary objectForKey:v6])
      {
        uint64_t v10 = sub_100DFD2AC();
        if ((sub_100DFE288(v10, v8) & 1) == 0)
        {
          uint64_t v14 = CMErrorMessage;
          uint64_t v15 = +[NSNumber numberWithUnsignedInt:108];
          +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
          CLConnectionMessage::sendReply();
        }
      }
      sub_10009C834(a1);
    }
    else
    {
      uint64_t v16 = CMErrorMessage;
      int v17 = &off_102394670;
      +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_102320BE0);
    }
    int v11 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_102320BE0);
      }
      LOWORD(v18) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEclipseSubscription::handleMessageViewObstructedDebugRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_1013375FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10133763C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_101337678(uint64_t a1)
{
  sub_10048C758(&off_102320C90, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1013376E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013376FC(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

__n128 sub_10133772C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102320C10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101337778(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102320C10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1013377A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1013377B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1013377F0()
{
}

void sub_1013377FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  char v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  id v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    char v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  id v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_10133789C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013378C0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10133793C(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101337928(_Unwind_Exception *a1)
{
  sub_100BFBE94(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10133793C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  id v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_101337BC0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_101337CB0((uint64_t)v25, 0);
  return i;
}

void sub_101337BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101337CB0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_101337BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_101337C38(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101337C20(_Unwind_Exception *a1)
{
  sub_101337CB0(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_101337C38(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100BFB64C((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101337C94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101337CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BFBF14((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_101337D08()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_101337D84()
{
}

uint64_t sub_101337DA8()
{
  if (qword_1024870D8 != -1) {
    dispatch_once(&qword_1024870D8, &stru_102320C98);
  }
  return qword_10248D298;
}

void sub_101337DF4(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

double sub_101337E2C(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320D20);
    }
    long long v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (*a3 > 0.0)
    {
      (*(void (**)(double))(**(void **)(a1 + 32) + 16))(*a3);
      (*(void (**)(void))(**(void **)(a1 + 32) + 16))();
      *(unsigned char *)(a1 + 30) = 0;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320D20);
    }
    unint64_t v9 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)a3;
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryAccelerometer] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29D64(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

double sub_101338224(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320D20);
    }
    long long v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102320D20);
    }
    unint64_t v9 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      double v10 = *a3;
      *(_DWORD *)std::string buf = 134349056;
      double v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryAccelerometer] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29E04(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_101338550(uint64_t a1, uint64_t a2)
{
  sub_1000E7BA0(a1, 0, a2, 40);
  if (!*(unsigned char *)(a1 + 30))
  {
    *(unsigned char *)(a1 + 30) = 1;
    int v19 = 0;
    sub_100134750(v20, "N/A");
    sub_100134750(v22, "N/A");
    memset(v24, 0, 93);
    if (sub_1012F72FC(a1, &v19))
    {
      memset(v12, 0, 44);
      unint64_t v3 = (__IOHIDServiceClient *)sub_100A291D0(*(void *)(a1 + 32));
      if (sub_10149FE70(v12, v3, @"ARSC", (id)0x2C))
      {
        uint64_t v4 = 0;
        double v5 = &v24[4];
        do
        {
          snprintf(v5, 0x2CuLL, "%02x", *((unsigned __int8 *)v12 + v4++));
          v5 += 2;
        }
        while (v4 != 44);
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      uint64_t v6 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        if (v21 >= 0) {
          uint64_t v7 = v20;
        }
        else {
          uint64_t v7 = (void **)v20[0];
        }
        if (v23 >= 0) {
          unint64_t v8 = v22;
        }
        else {
          unint64_t v8 = (void **)v22[0];
        }
        *(_DWORD *)std::string buf = 67240707;
        int v14 = v19;
        __int16 v15 = 2081;
        float v16 = v7;
        __int16 v17 = 2081;
        BOOL v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102320D20);
        }
        uint8x8_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAccelerometer::onAccelerometerData(const Sample &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_1000E7BA0(a1, 1, (uint64_t)&v19, 152);
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      unint64_t v9 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Service not found!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102320D20);
        }
        LOWORD(v12[0]) = 0;
        double v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryAccelerometer::onAccelerometerData(const Sample &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_1013389E0(_Unwind_Exception *a1)
{
  sub_100703F54(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_101338A20(uint64_t a1)
{
  if (IOHIDEventGetType() == 13)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      uint64_t v2 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] Received shake data, discarding.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102320D20);
        }
        LOWORD(v22) = 0;
        unint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryAccelerometer::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
    }
    else
    {
      IOHIDEventGetFloatValue();
      float v5 = v4;
      float v17 = v5;
      IOHIDEventGetFloatValue();
      float v7 = v6;
      float v18 = v7;
      IOHIDEventGetFloatValue();
      float v9 = v8;
      float v19 = v9;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      double v11 = sub_1000D3D90(TimeStamp);
      double v16 = v11;
      unsigned __int16 IntegerValue = IOHIDEventGetIntegerValue();
      unsigned __int16 v21 = IntegerValue;
      uint64_t v13 = sub_10149F054();
      uint64_t v20 = v13;
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102320D20);
      }
      int v14 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67241472;
        int v35 = IntegerValue;
        __int16 v36 = 2050;
        double v37 = v5;
        __int16 v38 = 2050;
        double v39 = v7;
        __int16 v40 = 2050;
        double v41 = v9;
        __int16 v42 = 2050;
        uint64_t v43 = v13;
        __int16 v44 = 2050;
        double v45 = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x3Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102320D20);
        }
        int v22 = 67241472;
        int v23 = IntegerValue;
        __int16 v24 = 2050;
        double v25 = v5;
        __int16 v26 = 2050;
        double v27 = v7;
        __int16 v28 = 2050;
        double v29 = v9;
        __int16 v30 = 2050;
        uint64_t v31 = v13;
        __int16 v32 = 2050;
        double v33 = v11;
        __int16 v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryAccelerometer::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      sub_101338550(a1, (uint64_t)&v16);
    }
  }
}

void sub_101338E44(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void *sub_101338E74(void *a1, uint64_t *a2, uint64_t *a3)
{
  float v5 = sub_10156C66C(a1, a2);
  void *v5 = off_102320D50;
  *(_OWORD *)(v5 + 15) = 0u;
  *(_OWORD *)(v5 + 13) = 0u;
  *(_OWORD *)(v5 + 11) = 0u;
  v5[18] = 0x4334000042820000;
  v5[19] = 0xFFEFFFFFFFFFFFFFLL;
  *((_DWORD *)v5 + 40) = 0;
  *((_DWORD *)v5 + 42) = 0;
  v5[22] = 0;
  *((_DWORD *)v5 + 46) = 0;
  v5[24] = 0;
  *((_DWORD *)v5 + 50) = 0;
  v5[26] = 0;
  v5[17] = 0x7FF8000000000000;
  *(_OWORD *)(v5 + 3) = 0u;
  *(_OWORD *)(v5 + 5) = 0u;
  *(_OWORD *)(v5 + 7) = 0u;
  *(_OWORD *)((char *)v5 + 68) = 0u;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    double v8 = (std::__shared_weak_count *)a1[16];
    a1[15] = v7;
    a1[16] = v6;
    if (v8) {
      sub_1000DB0A0(v8);
    }
  }
  else
  {
    a1[15] = v7;
    a1[16] = 0;
  }
  return a1;
}

uint64_t sub_101338F44()
{
  return 1;
}

uint64_t sub_101338F4C(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  float v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v13);
  uint64_t v7 = v13;
  uint64_t v6 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  *(_OWORD *)(a1 + 68) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v11;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  return 1;
}

void sub_101339020(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101339038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    sub_100EC8B00(v1);
  }
  return 1;
}

double sub_10133905C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 4);
  if ((v3 - 1) >= 2) {
    double v4 = 1.5;
  }
  else {
    double v4 = (double)v3;
  }
  if (*(unsigned char *)(a3 + 58) && *(unsigned char *)(a3 + 57) && *(unsigned char *)(a3 + 56) && (float v6 = *(float *)(a3 + 8), v6 > 1.0))
  {
    double v8 = (float)(*(float *)(a3 + 12) / (float)(v6 * v6));
    if (*(unsigned char *)(a2 + 16)) {
      double v9 = (float)((float)(*(float *)(a3 + 20) * 0.001) + 5.34)
    }
         + v8 * 0.00800000038
         + v4 * 0.850000024
         + (float)(*(float *)(a2 + 8) * 0.107)
         + (float)(*(float *)a2 * -9.33)
         + (float)(*(float *)(a2 + 4) * 1.52)
         + (float)(*(float *)(a2 + 12) * -0.032);
    else {
      double v9 = NAN;
    }
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    unint64_t v12 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      double v13 = *(float *)(a3 + 20);
      double v14 = *(float *)(a3 + 12);
      int v15 = *(_DWORD *)(a3 + 4);
      double v16 = *(float *)(a2 + 8);
      double v17 = *(float *)a2;
      double v18 = *(float *)(a2 + 4);
      double v19 = *(float *)(a2 + 12);
      int v20 = *(unsigned __int8 *)(a2 + 16);
      *(_DWORD *)std::string buf = 134220544;
      double v24 = v13;
      __int16 v25 = 2048;
      double v26 = v14;
      __int16 v27 = 2048;
      double v28 = v8;
      __int16 v29 = 1024;
      int v30 = v15;
      __int16 v31 = 2048;
      double v32 = v16;
      __int16 v33 = 2048;
      double v34 = v17;
      __int16 v35 = 2048;
      double v36 = v18;
      __int16 v37 = 2048;
      double v38 = v19;
      __int16 v39 = 2048;
      double v40 = v9;
      __int16 v41 = 1024;
      int v42 = v20;
      __int16 v43 = 2048;
      double v44 = v4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "age,%f,weight,%f,bmi,%f,biologicalSex,%d,maxMets,%f,oneMinusFhr,%f,cyclingPowerMets,%f,efficiency,%f,estimatedVo2max,%f,shouldEstimate,%d,biologicalSexCoefficient,%f", buf, 0x68u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102320DB0);
      }
      unsigned __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLCyclingVO2MaxModel::estimateCyclingVO2Max(CLCyclingVO2MaxModel::ModelInputs, CLBodyMetrics) const", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  else
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    long long v10 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Not estimating Cycling VO2Max as User height, weight or age not set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102320DB0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLCyclingVO2MaxModel::estimateCyclingVO2Max(CLCyclingVO2MaxModel::ModelInputs, CLBodyMetrics) const", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    return NAN;
  }
  return v9;
}

float sub_10133955C(double a1, uint64_t a2, void *a3)
{
  if (a1 > 0.0)
  {
    long long __p = 0;
    double v17 = 0;
    uint64_t v18 = 0;
    float v3 = 4.5841;
    if (!*a3) {
      goto LABEL_17;
    }
    int v4 = (*(uint64_t (**)(void, void **, double))(*(void *)*a3 + 8))(*a3, &__p, a1 + -2419200.0);
    if (v4 != 100)
    {
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102320DB0);
      }
      double v14 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v24) = v4;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Maxmets DB inaccesible %d", buf, 8u);
      }
      float v3 = 4.5841;
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102320DB0);
      }
      int v19 = 67109120;
      LODWORD(v20) = v4;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "float CLCyclingVO2MaxModel::getMeanMaxMets(std::shared_ptr<CLMaxMetsRecorderForCycling>, CFAbsoluteTime)", "%s\n", v13);
      goto LABEL_37;
    }
    float v5 = (double *)__p;
    if (__p == v17)
    {
LABEL_17:
      LODWORD(v9) = 0;
    }
    else
    {
      uint64_t v6 = 0;
      float v7 = 0.0;
      do
      {
        float v8 = v5[3];
        float v7 = v7 + v8;
        v5 += 4;
        --v6;
      }
      while (v5 != v17);
      uint64_t v9 = -v6;
      float v3 = v7 / (float)(unint64_t)-v6;
    }
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    unint64_t v12 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      double v24 = v3;
      __int16 v25 = 1024;
      int v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "meanMaxMets,%f,numOfRecords,%d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    int v19 = 134218240;
    double v20 = v3;
    __int16 v21 = 1024;
    int v22 = v9;
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLCyclingVO2MaxModel::getMeanMaxMets(std::shared_ptr<CLMaxMetsRecorderForCycling>, CFAbsoluteTime)", "%s\n", v13);
LABEL_37:
    if (v13 != (char *)buf) {
      free(v13);
    }
LABEL_31:
    if (__p)
    {
      double v17 = __p;
      operator delete(__p);
    }
    return v3;
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102320DB0);
  }
  long long v10 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Maxmets DB query time range is invalid (queryEndTime <= 0)", buf, 2u);
  }
  float v3 = 4.5841;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    LOWORD(__p) = 0;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "float CLCyclingVO2MaxModel::getMeanMaxMets(std::shared_ptr<CLMaxMetsRecorderForCycling>, CFAbsoluteTime)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v3;
}

void sub_101339A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101339A8C(uint64_t a1)
{
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  return 1;
}

uint64_t sub_101339AB0(uint64_t a1, uint64_t a2)
{
  *(float32x2_t *)(a1 + 144) = vcvt_f32_f64(*(float64x2_t *)(a2 + 64));
  float v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    double v8 = *(double *)(v4 + 8);
    ++*(_DWORD *)(a1 + 160);
    *(double *)(a1 + 152) = v8;
    do
    {
      if (sub_1013EFA74(*(void *)(a2 + 32)) && *(double *)(v4 + 8) - v8 < 2700.0)
      {
        if (*(unsigned char *)(a1 + 82))
        {
          ++v7;
          double v9 = sub_1013EF984(*(float *)(v4 + 32), *(float *)(a1 + 36));
          float v10 = *(float *)(v4 + 32);
          if (v10 > 0.0 && v10 <= 1500.0)
          {
            float v11 = v9;
            if (v11 > 3.0 && v11 < 20.0)
            {
              float v12 = *(float *)(v4 + 16);
              if (v12 > 0.0 && *(float *)(v4 + 20) > 0.39)
              {
                float v13 = (*(float *)(a1 + 148) - v12) / (*(float *)(a1 + 148) - *(float *)(a1 + 144));
                float v14 = 1.0 - v13;
                if (v14 > 0.4 && v14 < 1.2 && (float)(v11 / v14) < 20.0)
                {
                  *(float *)(a1 + 168) = *(float *)(a1 + 168) + v11;
                  ++*(void *)(a1 + 176);
                  *(float *)(a1 + 184) = v14 + *(float *)(a1 + 184);
                  ++*(void *)(a1 + 192);
                  *(float *)(a1 + 200) = (float)(v11 / v14) + *(float *)(a1 + 200);
                  ++*(void *)(a1 + 208);
                }
              }
            }
          }
        }
      }
      v4 += 64;
    }
    while (v4 != v5);
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102320DB0);
  }
  int v15 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = (uint64_t)(*(void *)(*(void *)(a2 + 48) + 8) - **(void **)(a2 + 48)) >> 6;
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v20 = v16;
    __int16 v21 = 1024;
    int v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLCyclingVO2MaxModel::processSession, out of %zu samples, %d samples are eligible for processing.", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCyclingVO2MaxModel::processSession(const CLCyclingFTPHistory::Session &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return 1;
}

void sub_101339E44(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v28[0] = *a3;
  v28[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v6 = sub_10133955C(*(double *)(a1 + 152), a1, v28);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  BOOL v7 = *(void *)(a1 + 176) >= 0x65uLL && *(void *)(a1 + 192) >= 0x65uLL && *(void *)(a1 + 208) > 0x64uLL;
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102320DB0);
  }
  double v8 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 176);
    uint64_t v10 = *(void *)(a1 + 192);
    uint64_t v11 = *(void *)(a1 + 208);
    *(_DWORD *)std::string buf = 134218752;
    uint64_t v38 = v9;
    __int16 v39 = 2048;
    uint64_t v40 = v10;
    __int16 v41 = 2048;
    uint64_t v42 = v11;
    __int16 v43 = 1024;
    int v44 = 100;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "fCyclingPowerMetsMean.numberOfSamples, %zu, fOneMinusFhrMean.numberOfSamples, %zu, fEfficiencyMean.numberOfSamples, %zu, minimum required number of valid samples to estimate Vo2max, %d", buf, 0x26u);
  }
  uint64_t v12 = sub_10013D1A0(115, 2);
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102320DB0);
    }
    uint64_t v20 = *(void *)(a1 + 176);
    uint64_t v21 = *(void *)(a1 + 192);
    uint64_t v22 = *(void *)(a1 + 208);
    int v29 = 134218752;
    uint64_t v30 = v20;
    __int16 v31 = 2048;
    uint64_t v32 = v21;
    __int16 v33 = 2048;
    uint64_t v34 = v22;
    __int16 v35 = 1024;
    int v36 = 100;
    int v23 = (char *)_os_log_send_and_compose_impl();
    uint64_t v12 = sub_1004BA5E4("Generic", 1, 0, 2, "const double CLCyclingVO2MaxModel::getVO2MaxEstimate(CLBodyMetrics, std::shared_ptr<CLMaxMetsRecorderForCycling>)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  unint64_t v13 = *(void *)(a1 + 192);
  float v14 = 0.0;
  float v15 = 0.0;
  if (v13) {
    float v15 = *(float *)(a1 + 184) / (float)v13;
  }
  unint64_t v16 = *(void *)(a1 + 176);
  if (v16) {
    float v14 = *(float *)(a1 + 168) / (float)v16;
  }
  unint64_t v17 = *(void *)(a1 + 208);
  if (v17) {
    float v18 = *(float *)(a1 + 200) / (float)v17;
  }
  else {
    float v18 = 0.0;
  }
  *(float *)int v26 = v15;
  *(float *)&v26[1] = v14;
  *(float *)&v26[2] = v6;
  *(float *)&v26[3] = v18;
  BOOL v27 = v7;
  long long v19 = a2[1];
  v24[0] = *a2;
  v24[1] = v19;
  *(_OWORD *)__int16 v25 = a2[2];
  *(_OWORD *)&v25[12] = *(_OWORD *)((char *)a2 + 44);
  sub_10133905C(v12, (uint64_t)v26, (uint64_t)v24);
}

void sub_10133A144(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10133A164(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 40);
  v7[0] = *(_OWORD *)(a1 + 24);
  v7[1] = v2;
  v8[0] = *(_OWORD *)(a1 + 56);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 68);
  float v3 = *(std::__shared_weak_count **)(a1 + 128);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101339E44(a1, v7, v6);
  *(void *)(a1 + 136) = v4;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return 1;
}

void sub_10133A1E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_10133A1FC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 208);
  if (v1) {
    return (float)(*(float *)(a1 + 200) / (float)v1);
  }
  else {
    return 0.0;
  }
}

double sub_10133A220(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

uint64_t sub_10133A228(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

void sub_10133A234(void *a1)
{
  sub_10133A29C(a1);

  operator delete();
}

void sub_10133A26C(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void *sub_10133A29C(void *a1)
{
  *a1 = off_102320D50;
  long long v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  float v3 = (std::__shared_weak_count *)a1[14];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[12];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  *a1 = off_1022FA060;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  return a1;
}

void sub_10133A3D8(id a1)
{
  qword_1024870E0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSpringTrackingNotifierSilo"];
}

uint64_t sub_10133A498(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10133B610;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102487100 != -1) {
    dispatch_once(&qword_102487100, block);
  }
  return qword_10248D2A0;
}

uint64_t sub_10133A704(uint64_t a1)
{
  if (!+[CMActivityAlarmLocal activityAlarmAvailable]) {
    return 109;
  }
  long long v2 = *(void **)(a1 + 208);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 208) = 0;
  }
  float v3 = [CMActivityAlarmLocal alloc];
  double v4 = *(double *)(a1 + 192);
  id v5 = [*(id *)(a1 + 40) queue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10133BB84;
  v11[3] = &unk_1022B7B30;
  v11[4] = a1;
  *(void *)(a1 + 208) = [(CMActivityAlarmLocal *)v3 initWithTrigger:14 duration:v5 onQueue:v11 withHandler:v4];
  if (qword_102419370 != -1) {
    dispatch_once(&qword_102419370, &stru_102320F60);
  }
  float v6 = qword_102419378;
  if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 192);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Started tracking,duration,%.3f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102320F60);
    }
    uint64_t v9 = *(void *)(a1 + 192);
    int v12 = 134217984;
    uint64_t v13 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLSpringTrackingNotifier::startTracking()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return 100;
}

uint64_t sub_10133A990(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 208);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 208) = 0;
  }
  if (qword_102419370 != -1) {
    dispatch_once(&qword_102419370, &stru_102320F60);
  }
  float v3 = qword_102419378;
  if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopped tracking", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102320F60);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLSpringTrackingNotifier::stopTracking()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 100;
}

void sub_10133AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10133AC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return sub_1013405C0(*(uint64_t **)(a1 + 120), a2, (uint64_t)a3);
}

void sub_10133ACC4(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10133AD24(id a1)
{
  if (sub_10010145C()) {
    byte_1024870F0 = 1;
  }
}

void sub_10133AD50(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10133B04C(a1, "CLSpringTrackingNotifier", a2);
  *(void *)uint64_t v3 = off_102320E20;
  *(void *)(a1 + 112) = [*(id *)(v3 + 40) newTimer];
  operator new();
}

void sub_10133AFA8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 216);
  *(void *)(v1 + 216) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1003B278C(v2);
  id v5 = *(std::__shared_weak_count **)(v1 + 128);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_10133B58C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10133B04C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102320F90;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10133B0DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10133B0F8(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    double v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      unint64_t v17 = &v15[24 * v14];
      *(double *)unint64_t v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      uint8_t v16[16] = 0;
      uint64_t v10 = v16 + 24;
      long long v19 = (char *)*a1;
      float v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        float v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023210F8);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023210F8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLSpringTrackerEntry>::setExpirationRule(CFTimeInterval) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10133B3B0(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320F40);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSpringTrackingNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320F40);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSpringTrackingNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10133BC90(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10133B56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10133B58C(uint64_t a1)
{
  *(void *)a1 = off_102320F90;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10133B610()
{
}

void sub_10133B65C()
{
}

uint64_t sub_10133B680(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10133B710;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102487110 != -1) {
    dispatch_once(&qword_102487110, block);
  }
  return byte_102487108;
}

id sub_10133B710(uint64_t a1)
{
  id result = [[objc_msgSend(*(id *)(a1 + 32), "vendor") isServiceEnabled:@"CLSpringTrackingNotifier"];
  byte_102487108 = (char)result;
  return result;
}

uint64_t sub_10133B740(uint64_t a1)
{
  *(void *)a1 = off_102320E20;

  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 208) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v2 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1003B278C(a1 + 136);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_10133B58C(a1);
}

void sub_10133B81C(uint64_t a1)
{
  sub_10133B740(a1);

  operator delete();
}

uint64_t sub_10133B854(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

void sub_10133B860(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (char *)operator new(0x18uLL);
  uint64_t v4 = v2 + 24;
  id v5 = v2 + 24;
  v2[16] = 0;
  *(_OWORD *)uint64_t v2 = xmmword_101DB4350;
  long long __p = v2;
  (*(void (**)(void, void **))(**(void **)(v1 + 120) + 32))(*(void *)(v1 + 120), &__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_10133B8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10133B908(uint64_t a1, uint64_t *a2)
{
  if (qword_102419370 != -1) {
    dispatch_once(&qword_102419370, &stru_102320F60);
  }
  uint64_t v3 = qword_102419378;
  if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[5];
    uint64_t v6 = a2[6];
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "id,%llu,startTime,%lf,eventType,%ld", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102320F60);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSpringTrackingNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.locationd.lorievent", 0, 0, 0);
}

void *sub_10133BB08@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void sub_10133BB84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ([a2 trigger] == 14)
  {
    uint64_t v6 = 0;
    long long v4 = 0u;
    long long v5 = 0u;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v8 = 0;
    sub_10133BC28(v2 + 136, (uint64_t)&v4);
    uint64_t v3 = *(void **)(v2 + 208);
    if (v3)
    {
      [v3 invalidate:v4, v5, v6];

      *(void *)(v2 + 208) = 0;
    }
  }
}

uint64_t sub_10133BC28(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10133DB9C(*(void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 41))
  {
    uint64_t result = sub_100082064(*(void *)(a1 + 24) + 72);
    if (result)
    {
      *(unsigned char *)(a1 + 41) = 1;
      return sub_10133E10C(a1);
    }
  }
  return result;
}

void sub_10133BC90(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (*a3) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = *a4 == 1;
  }
  if (v4 && *(void *)(a1 + 208))
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v11 = 0;
    sub_10133BC28(a1 + 136, (uint64_t)&v7);
    uint64_t v6 = *(void **)(a1 + 208);
    if (v6)
    {
      [v6 invalidate:v7, v8, v9];

      *(void *)(a1 + 208) = 0;
    }
  }
}

void sub_10133BD40(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320F40);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102320F40);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        __int16 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10133BFD0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10133C084(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10133C0CC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10133C114(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10133C15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477830);
}

uint64_t sub_10133C188(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        __int16 v13 = (uint64_t *)v7;
      }
      else {
        __int16 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        uint64_t v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10133ECFC();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102477831;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320F40);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320F40);
    }
    __int16 v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10133C638(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320F40);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      double v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320F40);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10133C8BC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        __int16 v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            __int16 v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102320F40);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102320F40);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10133CC90(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x50uLL);
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_102321168;
  *(_OWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 32);
  *((void *)v6 + 9) = *(void *)(a3 + 48);
  int v11 = *a2;
  BOOL v12 = &v11;
  BOOL v8 = sub_10044715C((uint64_t **)(a1 + 56), &v11, (uint64_t)&unk_101D0B290, &v12);
  int v9 = (std::__shared_weak_count *)v8[9];
  v8[8] = (uint64_t *)(v6 + 24);
  v8[9] = (uint64_t *)v6;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return 1;
}

void sub_10133CD58(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10133CD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10133CDF8(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102320F40);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v23 = 0;
    __int16 v24 = 2082;
    *(void *)__int16 v25 = "";
    *(_WORD *)&v25[8] = 2082;
    *(void *)&unsigned char v25[10] = "activity";
    __int16 v26 = 2082;
    int v27 = v10;
    __int16 v28 = 2050;
    int v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    char v30 = v31;
    memset(v31, 0, sizeof(v31));
    int v32 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v30);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v24, *(void **)&v25[6]);
    if (v32) {
      sub_1000DB0A0(v32);
    }
    sub_1000F5BB0((uint64_t)&v30, v31[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x50uLL);
    long long v19 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)a3;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_102321168;
    *(_OWORD *)(v18 + 40) = v19;
    *(_OWORD *)(v18 + 56) = *(_OWORD *)(a3 + 32);
    *((void *)v18 + 9) = *(void *)(a3 + 48);
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v20) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v20 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v20) {
LABEL_27:
  }
    sub_1000DB0A0(v20);
LABEL_28:
  if (v14[7]) {
    sub_10133F414();
  }
  os_activity_scope_leave(&state);
}

void sub_10133D3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10133D43C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320F40);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320F40);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102320F40);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320F40);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102320F40);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102320F40);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10133D9E8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10133DA18(id a1)
{
  qword_102419378 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

void sub_10133DA48(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10133DAB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10133DAC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10133DAF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10133DB3C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10133DB6C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10133DB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 40);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      int v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 280))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_100ADB118(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023210D8);
        }
        uint64_t v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1023210D8);
          }
          BOOL v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSpringTrackerEntry>::addSuspectRecord(const T &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102321118);
      }
      int v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102321118);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSpringTrackerEntry>::addSuspectRecord(const T &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_10133E6C4(v12, a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023210D8);
    }
    BOOL v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      int v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        int v9 = (void *)*v9;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      __int16 v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      __int16 v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023210D8);
      }
    }
    BOOL v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      int v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      __int16 v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      __int16 v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_10133E0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10133E10C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023210F8);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)int v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023210F8);
      }
      sub_1000D3E50();
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSpringTrackerEntry>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023210F8);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)int v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023210F8);
      }
      sub_1000D3E50();
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSpringTrackerEntry>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_10133EACC(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023210F8);
      }
      int v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_10133EACC(v12, (double **)a1);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)int v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023210F8);
        }
        sub_10133EACC(*(void *)(a1 + 24), (double **)a1);
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSpringTrackerEntry>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    BOOL v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

__n128 sub_10133E6C4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10133E7B4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(__n128 *)unint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_10133E784(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10133E7B4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float64x2_t v53 = operator new(0xFF8uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10133EA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10133EACC(uint64_t a1, double **a2)
{
  BOOL v3 = *a2;
  unint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  uint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023210D8);
    }
    uint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023210D8);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLSpringTrackerEntry>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_10133ECCC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10133ECFC()
{
}

unsigned char *sub_10133EDB8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10133EED0(a4);
    uint64_t v10 = *(void *)a3 + 80;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40);
    BOOL v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_10133EEB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_10133EED0(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_10133EF6C(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_10133F128(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_10133EF6C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_10133F310((uint64_t)&v8, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102321138);
    }
    uint64_t v3 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)std::string buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101DB450FLL & 0x7FFFFFFFFFFFFFFFLL;
    double v4 = v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102321138);
    }
    uint64_t v7 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_DWORD *)std::string buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101DB450FLL & 0x7FFFFFFFFFFFFFFFLL;
    double v4 = v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_10133F128(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102321138);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101DB450FLL & 0x7FFFFFFFFFFFFFFFLL;
      double v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102321138);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101DB450FLL & 0x7FFFFFFFFFFFFFFFLL;
      double v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

id sub_10133F310(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023946D0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)56)
    {
      uint64_t v4 = sub_101AAF6A0();
      return (id)sub_10133F398(v4);
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_10133F398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102321168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10133F3B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102321168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10133F414()
{
}

void sub_10133F4D0(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    os_log_type_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      id v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          __int16 v12 = (uint64_t *)v4;
        }
        else {
          __int16 v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          id v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_10133EED0(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          uint64_t v15 = a1 + 11;
          uint64_t v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                unint64_t v22 = (uint64_t *)v17;
              }
              else {
                unint64_t v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_10133EDB8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  long long v32 = (uint64_t *)v27;
                }
                else {
                  long long v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    uint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    uint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      uint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      uint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102320F40);
              }
              uint64_t v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                unint64_t v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  unint64_t v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102320F40);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_10133F8C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void *sub_10133F8E0(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_10133F9C4((uint64_t)a1, "SleepHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1023211B8;
  a1[9] = off_102321270;
  a1[45] = 0;
  a1[46] = 0;
  sub_101340F3C((uint64_t)a1);
  return a1;
}

void sub_10133F998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10133FE70(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10133F9C4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *__int16 v12 = &off_1022B2C68;
  *(void *)a1 = off_102321410;
  *(void *)(a1 + 72) = off_1023214B8;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102321410;
  *(void *)(a1 + 72) = off_1023214B8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 280) = 12000;
  *(void *)(a1 + 288) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 296));
  *(void *)(a1 + 296) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_10133FDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_10058D17C(v29);
  sub_1011F8AE0(v28);
  *unint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_10133FE68()
{
}

void *sub_10133FE70(void *a1)
{
  *a1 = off_102321410;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1023214B8;
  a1[36] = off_1022B2C20;
  sub_1003BE1F8(a1 + 37);
  sub_10058D17C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_10133FF34(uint64_t a1)
{
  return sub_10133FE70((void *)(a1 - 72));
}

void sub_10133FF3C(void *a1)
{
  sub_10133FE70(a1);

  operator delete();
}

void sub_10133FF74(uint64_t a1)
{
  sub_10133FE70((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_10133FFB0(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_100082064(a1 + 72))
    {
      sub_10002B640(*(void *)(a1 + 80));
      CFAbsoluteTimeGetCurrent();
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SleepHistory WHERE startTime < ?");
    }
  }
  else
  {
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102321320);
    }
    uint64_t v3 = qword_102419378;
    if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Error expiring records.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102321320);
      }
      os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual long CLSpringTrackerRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return -1;
}

void sub_101340258(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101340278(uint64_t a1, uint64_t a2)
{
  return sub_10133FFB0(a1 - 72, a2);
}

uint64_t sub_101340280(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SleepHistory ORDER BY id ASC");
  }
  return result;
}

void sub_1013404DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101340524(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v7, 1);
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v9 = sqlite3_column_int(v8, 2);
  uint64_t result = 0;
  *(void *)(a2 + 48) = v9;
  return result;
}

uint64_t sub_1013405C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (sub_100082064(a1 + 9))
  {
    if (sub_1005F93E8(a1[10]))
    {
      *(void *)uu1 = 0;
      uint64_t v14 = 0;
      sub_100652E3C((uint64_t)a1, uu1);
      if (!uuid_is_null((const unsigned __int8 *)(a2 + 8))
        && !uuid_compare(uu1, (const unsigned __int8 *)(a2 + 8))
        && ((*(unsigned int (**)(uint64_t *, void *))(*a1 + 104))(a1, v15) || v15[0] >= *(void *)a2))
      {
        sub_10014D518(a1[10], (uint64_t)"SELECT * FROM SleepHistory WHERE id >= ? ORDER BY id ASC");
      }
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102321320);
      }
      char v6 = qword_102419378;
      if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Non-existent query record, returning all records.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419370 != -1) {
          dispatch_once(&qword_102419370, &stru_102321320);
        }
        BOOL v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
      return 100;
    }
    else
    {
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102321320);
      }
      int v9 = qword_102419378;
      if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "DB UUID un-initialized", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419370 != -1) {
          dispatch_once(&qword_102419370, &stru_102321320);
        }
        LOWORD(v15[0]) = 0;
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      return 103;
    }
  }
  else
  {
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102321320);
    }
    int v8 = qword_102419378;
    if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "History not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102321320);
      }
      LOWORD(v15[0]) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 109;
  }
}

void sub_101340D94(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101340DDC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM SleepHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_101340E98(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101340ED4(uint64_t a1)
{
  return sub_101340DDC(a1 - 72);
}

void *sub_101340EDC(uint64_t a1, uint64_t a2, const void *a3)
{
  if (a2 && a3)
  {

    *(void *)(a1 + 360) = a2;
    char v6 = *(const void **)(a1 + 368);
    if (v6) {
      _Block_release(v6);
    }
    uint64_t result = _Block_copy(a3);
    *(void *)(a1 + 368) = result;
  }
  else
  {
    uint64_t v8 = sub_101AAF81C();
    return (void *)sub_101340F3C(v8);
  }
  return result;
}

uint64_t sub_101340F3C(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "SleepHistory", (const char **)&off_102321340, (const std::string::value_type **)off_102477838, 0);
  }
  return result;
}

uint64_t sub_101340FA4(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SleepHistory");
  }
  return result;
}

void sub_101341054(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10134106C(uint64_t a1)
{
  return sub_101340FA4(a1 - 72);
}

uint64_t sub_101341074(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM SleepHistory WHERE startTime > ?");
  }
  return result;
}

void sub_101341170(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101341188(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE SleepHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_10134123C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101341254(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO SleepHistory (startTime, eventType) VALUES (?, ?)");
  }
  return result;
}

void sub_101341408(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10134144C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 368);
  long long v2 = *(_OWORD *)(a1 + 72);
  v4[1] = *(_OWORD *)(a1 + 56);
  v4[2] = v2;
  uint64_t v5 = *(void *)(a1 + 88);
  v4[0] = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v4);
}

uint64_t sub_1013414CC()
{
  return 0;
}

uint64_t sub_1013414D4(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SleepHistory ORDER BY startTime DESC LIMIT 1");
  }
  return 2;
}

void sub_1013415C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101341608(void *a1)
{
  long long v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AAF9A8(v2);
    __break(1u);
  }
  int v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = v13;
    }
    else {
      uint64_t v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    char v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v13;
    }
    else {
      uint64_t v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101341AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 - 145) < 0) {
    operator delete(*(void **)(v5 - 168));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101341B40(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_101343AFC(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1023214F8);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      char v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023214F8);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023214F8);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSpringTrackerEntry>::setDatabaseAccessible() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1013422C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1013422F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_101342310(uint64_t a1, long long *a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v39);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023214F8);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023214F8);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 5);
    double v8 = v40;
    double v9 = v7 - v40;
    if (v7 - v40 < 0.0) {
      double v9 = -(v7 - v40);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023214F8);
      }
      int v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 5);
        *(_DWORD *)std::string buf = 134349312;
        double v36 = v40;
        __int16 v37 = 2050;
        uint64_t v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023214F8);
        }
        uint64_t v24 = *((void *)a2 + 5);
        int v31 = 134349312;
        double v32 = v40;
        __int16 v33 = 2050;
        uint64_t v34 = v24;
        unint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 5);
      double v8 = v40;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023214F8);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 5);
          *(_DWORD *)std::string buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1023214F8);
          }
          double v26 = *((double *)a2 + 5);
          int v31 = 134217984;
          double v32 = v26;
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v29 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1023214F8);
        double v17 = v29;
      }
      double v18 = v16 - v17;
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023214F8);
        }
        int v31 = 134217984;
        double v32 = v18;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v39, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  long long v22 = a2[2];
  *(void *)(a1 + 272) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 240) = v21;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_101342B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101342B4C(uint64_t a1)
{
  return sub_101341B40(a1 - 72);
}

void sub_101342B54(id a1)
{
  qword_102419378 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

uint64_t sub_101342B84(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AAFB18(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = v15;
    }
    else {
      double v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_101342FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101343078(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AAFC88(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1013433EC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AAFDF8(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101343718(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AAFF68(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101343A3C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101343A6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_101343AFC(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_101343B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101343B98(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

BOOL sub_101343BC8(char *a1, std::string *a2)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  CFStringRef v3 = sub_1000B73E0(a1);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  CFUUIDRef v5 = CFUUIDCreateFromString(kCFAllocatorDefault, v3);
  CFRelease(v4);
  if (!v5) {
    return 0;
  }
  CFStringRef v6 = CFUUIDCreateString(kCFAllocatorDefault, v5);
  CFRelease(v5);
  if (!v6) {
    return 0;
  }
  BOOL v7 = sub_10013D274(v6, a2);
  CFRelease(v6);
  return v7;
}

BOOL sub_101343C74(char *a1, char *a2)
{
  memset(&__s1, 0, sizeof(__s1));
  memset(&__p, 0, sizeof(__p));
  if (!sub_101343BC8(a1, &__s1))
  {
    BOOL v15 = 0;
    goto LABEL_29;
  }
  if (!sub_101343BC8(a2, &__p))
  {
    BOOL v15 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v4 = __p.__r_.__value_.__l.__size_;
  }
  if (size != v4)
  {
    BOOL v15 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v15 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
    goto LABEL_27;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      int v9 = v10;
      int v12 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_27:
    if ((v5 & 0x80) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  BOOL v15 = 1;
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_28:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_29:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_101343D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101343DC8(uint64_t *a1)
{
  id v2 = objc_alloc((Class)NSString);
  if (*((char *)a1 + 23) >= 0) {
    CFStringRef v3 = a1;
  }
  else {
    CFStringRef v3 = (uint64_t *)*a1;
  }
  id v4 = [v2 initWithUTF8String:v3];
  id v5 = [objc_alloc((Class)NSUUID) initWithUUIDString:v4];

  if (v5) {
  return v5 != 0;
  }
}

uint64_t sub_101343E38(uint64_t a1)
{
  return sub_101343DC8((uint64_t *)(a1 + 8)) & *(unsigned char *)(a1 + 36);
}

uint64_t sub_101343E68(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 48) + 48))(*(void *)(a2 + 48)))
  {
    (*(void (**)(void, unsigned char *, double))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), v7, a3);
    if (v7[208])
    {
      sub_10046B90C(*(void *)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 104), *(double *)(*(void *)(a2 + 8) + 112));
      sub_10134485C(*(void *)(a2 + 96), *(double *)(*(void *)(a2 + 96) + 104), *(double *)(*(void *)(a2 + 96) + 112));
    }
  }
  return nullsub_1536(a1 + 8, a2, a3);
}

uint64_t sub_101343F60(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48))(*(void *)(a3 + 8));
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(**(void **)(a3 + 96) + 48);
    v6.n128_f64[0] = a1;
    return v7(v6);
  }
  return result;
}

void sub_101344000(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 1292);
  float v5 = *(float *)(a1 + 296);
  float v6 = *(float *)(a1 + 1288);
  BOOL v7 = v4 <= 0.05 && v5 < 4.0;
  if (v7 && v6 < 0.4)
  {
    unsigned int v8 = 0;
  }
  else
  {
    unsigned int v8 = 1;
    BOOL v9 = v4 <= 0.05 || v5 < 4.0;
    if (!v9 && v6 >= 0.4)
    {
      if (v6 <= 5.8 && v5 <= 132.0 && v4 < 1.15) {
        unsigned int v8 = 2;
      }
      else {
        unsigned int v8 = 3;
      }
    }
  }
  float v12 = *(double *)(a1 + 560);
  int v13 = sub_1001860C8(a1);
  if (*(double *)(a1 + 600) < *(double *)a1) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  float v15 = *(float *)(a1 + 1368);
  float v16 = *(float *)(a1 + 1372);
  float v17 = *(float *)(a1 + 1376);
  float v18 = *(float *)(a1 + 1380);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 3;
  *(void *)(a2 + 32) = 3;
  double v37 = v12;
  float v19 = (v18 - v12) / (v18 - v17);
  float v20 = v15 * sub_101141BD8(v19, v16);
  *(float *)a2 = v20;
  float v22 = sub_10134457C(v21, (float *)a1);
  if (v23)
  {
    sub_10068D230();
    if (v22 < v24) {
      float v22 = v24;
    }
  }
  float v25 = 12.0;
  if (v22 <= 12.0) {
    float v25 = v22;
  }
  *(float *)(a2 + 4) = v25;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  if (v14)
  {
    switch(v8)
    {
      case 0u:
        if (v12 > 90.0) {
          goto LABEL_34;
        }
        int v26 = 0;
        *(_DWORD *)(a2 + 4) = 1074161254;
        double v27 = 1.0;
        *(float *)&int v28 = 1.6;
        double v29 = 2.0999999;
        float v25 = 2.1;
        break;
      case 1u:
LABEL_34:
        int v26 = 1;
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 1;
        double v27 = 0.0;
        *(float *)&int v28 = 2.1;
        double v29 = 2.0999999;
        break;
      case 2u:
        int v26 = 2;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 2;
        double v27 = 0.5;
        goto LABEL_38;
      case 3u:
        int v26 = 1;
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 1;
        double v27 = 0.0;
LABEL_38:
        *(float *)&int v28 = 4.4021;
        double v29 = 4.40208912;
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    int v26 = 0;
    double v29 = dbl_101DB4640[v8 < 2];
    int v28 = dword_101DB4630[v8 < 2];
    double v27 = 1.0;
  }
  double v30 = v20;
  double v31 = v25;
  float v32 = v27 * v25 + (1.0 - v27) * v30;
  *(float *)(a2 + 20) = v32;
  *(float *)(a2 + 28) = v32;
  float v33 = v32;
  if (v29 > v32)
  {
    float v33 = v29;
    *(float *)(a2 + 20) = v33;
    int v26 = 3;
    *(_DWORD *)(a2 + 24) = 3;
  }
  if (v29 >= v32)
  {
    *(float *)(a2 + 28) = *(float *)&v28;
    *(_DWORD *)(a2 + 32) = 3;
    float v32 = *(float *)&v28;
  }
  *(float *)(a2 + 12) = v25;
  *(_DWORD *)(a2 + 36) = 16;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102321588);
  }
  uint64_t v34 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v35 = *(void *)(a1 + 128);
    *(_DWORD *)std::string buf = 134221056;
    double v39 = v31;
    __int16 v40 = 2048;
    double v41 = v30;
    __int16 v42 = 2048;
    double v43 = v32;
    __int16 v44 = 2048;
    double v45 = v33;
    __int16 v46 = 2048;
    uint64_t v47 = v35;
    __int16 v48 = 1024;
    unsigned int v49 = v8;
    __int16 v50 = 2048;
    double v51 = v27;
    __int16 v52 = 1024;
    int v53 = v26;
    __int16 v54 = 2048;
    double v55 = v4;
    __int16 v56 = 2048;
    double v57 = v5;
    __int16 v58 = 2048;
    double v59 = v37;
    __int16 v60 = 1024;
    int v61 = v14;
    __int16 v62 = 2048;
    double v63 = v6;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Kickboxing,metsWR,%f,metsHR,%f,truthMets,%f,userMets,%f,endTime,%f,motionIntensity,%d,wrWeight,%f,metsSource,%d,accelZ,%f,vm,%f,hr,%f,hrReliability,%d,rotationRate,%f", buf, 0x78u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102321588);
    }
    double v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieKickboxingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
}

float sub_10134457C(uint64_t a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = a2[322];
  float v4 = a2[323];
  float v5 = a2[324];
  float v6 = a2[341];
  float v7 = a2[340] * 100.0;
  *(float *)float v12 = v4;
  *(float *)&v12[1] = v3;
  *(float *)&v12[2] = v3 * v4;
  *(float *)&_OWORD v12[3] = v6;
  *(float *)&v12[4] = v7;
  *(float *)&v12[5] = v5;
  float v8 = 0.27451;
  do
  {
    float v8 = v8 + (float)(*(float *)&v12[v2] * *(float *)&dword_101DB4650[v2]);
    ++v2;
  }
  while (v2 != 6);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102321588);
  }
  BOOL v9 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134219264;
    double v25 = v4;
    __int16 v26 = 2048;
    double v27 = v3;
    __int16 v28 = 2048;
    double v29 = v5;
    __int16 v30 = 2048;
    double v31 = v6;
    __int16 v32 = 2048;
    double v33 = v7;
    __int16 v34 = 2048;
    double v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "iz,%f,w,%f,hw,%f,weight,%f,height,%f,wr,%f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102321588);
    }
    v12[6] = 134219264;
    double v13 = v4;
    __int16 v14 = 2048;
    double v15 = v3;
    __int16 v16 = 2048;
    double v17 = v5;
    __int16 v18 = 2048;
    double v19 = v6;
    __int16 v20 = 2048;
    double v21 = v7;
    __int16 v22 = 2048;
    double v23 = v8;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLCalorieKickboxingModel::computeWRRegression(const CLNatalieModelInput &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v8;
}

void sub_10134482C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_10134485C(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

void sub_1013448FC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_101326D84(a1, "CLBTLEBeaconProviderConcrete-Notifier", a2);
  *(void *)uint64_t v3 = off_1023215B8;
  sub_1005131D0((pthread_cond_t **)(v3 + 112));
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_100EBBEB0(a1 + 160, (uint64_t)"BTLEBeaconProvider", a1, 10.3);
  *(_DWORD *)(a1 + 208) = 0;
  sub_100103240();
  uint64_t v4 = sub_1001073D0();
  *(void *)(a1 + 216) = 0x408C200000000000;
  *(unsigned char *)(a1 + 212) = (v4 & 0x200000) != 0;
  *(unsigned char *)(a1 + 224) = 1;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 248;
  *(void *)(a1 + 256) = a1 + 248;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = -1;
  sub_1000C7F88(&buf);
  int v5 = sub_1000D2988(buf, "BeaconFenceBestEffortScheduleEnabled", (BOOL *)(a1 + 224));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v5)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    float v6 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 224);
      LODWORD(buf) = 67174657;
      DWORD1(buf) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Overriding BeaconFenceBestEffortScheduleEnabled,%{private}d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(id<CLIntersiloUniverse>)", "%s\n", v11);
      if (v11 != (char *)&buf) {
        free(v11);
      }
    }
  }
  sub_1000C7F88(&buf);
  int v8 = sub_1000A699C(buf, "BeaconFenceBestEffortInterval", (void *)(a1 + 216));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v8)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    BOOL v9 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 216);
      LODWORD(buf) = 134283521;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      float v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(id<CLIntersiloUniverse>)", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
  }
  sub_10060F068();
}

void sub_101344FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_101327408(v28, *v30);
  sub_1007898E8(a12);
  sub_100EBBF9C(a13);
  uint64_t v32 = *v29;
  uint64_t *v29 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  sub_100513250(v27);
  sub_101326FB4(v26);
  _Unwind_Resume(a1);
}

void sub_1013450FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102321778);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEBeaconProviderConcrete::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102321778);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEBeaconProviderConcrete::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_1013490EC(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013452B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013452D0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102321778);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEBeaconProviderConcrete::onZoneDetectionTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102321778);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEBeaconProviderConcrete::onZoneDetectionTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_101348F4C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_101345474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101345494(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v8 = 2082;
    *(void *)&_OWORD v8[2] = "";
    *(_WORD *)&v8[10] = 2050;
    *(void *)&v8[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Bluetooth power changed\", \"BT power\":%{public}ld}", buf, 0x1Cu);
  }
  *(void *)long long buf = buf;
  *(void *)int v8 = buf;
  *(void *)&v8[8] = 0;
  *(void *)&uint8_t v8[16] = off_1022B3DE8;
  *(_OWORD *)__int16 v9 = 0u;
  long long v10 = 0u;
  __int16 v11 = off_1022B3DE8;
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  int v14 = 1;
  char v15 = 1;
  if (a2 == 1)
  {
    sub_1013456BC(v3, 0);
    char v5 = 1;
  }
  else
  {
    *(void *)(v3 + 232) = 0;
    sub_1001B0AE4(*(void *)(v3 + 152));
    char v5 = 0;
  }
  *(unsigned char *)(v3 + 128) = v5;
  char v15 = v5;
  int v6 = 2;
  (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, &v6, buf, 1, 0xFFFFFFFFLL, 0);
  __int16 v11 = off_1022B3DE8;
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&uint8_t v8[16] = off_1022B3DE8;
  if (SBYTE7(v10) < 0) {
    operator delete(v9[0]);
  }
  sub_1007898E8((uint64_t *)buf);
}

void sub_1013456A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100786268((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013456BC(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(int *)(a1 + 208) >= 1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      double v5 = Current;
      if (a2 != 2 || vabdd_f64(Current, *(double *)(a1 + 240)) >= 15.0)
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        int v6 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
        {
          int v7 = *(_DWORD *)(a1 + 208);
          uint64_t v8 = *(void *)(a1 + 288);
          *(_DWORD *)long long buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = v7;
          __int16 v14 = 2050;
          uint64_t v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Detecting state transitions for BE zones\", \"numZones\":%{public}d, \"totalZones\":%{public}lu}", buf, 0x22u);
        }
        sub_100134750(__p, "BestEffortScan");
        if (*(int *)(a1 + 168) <= 0)
        {
          if (SHIBYTE(v12) < 0)
          {
            sub_1000DC48C(buf, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            *(_OWORD *)long long buf = *(_OWORD *)__p;
            *(void *)&uint8_t buf[16] = v12;
          }
          sub_100EBBFD8(a1 + 160, (uint64_t *)buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
        sub_10134879C(a1);
        *(double *)(a1 + 240) = v5;
        __int16 v9 = *(void **)(a1 + 40);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_10134A6EC;
        v10[3] = &unk_1022A3020;
        v10[4] = a1;
        [v9 afterInterval:v10 async:6.29999995];
        sub_10134A680(a1, a2 == 3);
      }
    }
  }
}

void sub_1013458EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101345928(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2)
  {

    *(void *)(a1 + 312) = 0;
  }
  sub_1000E9354(v27);
  sub_1000C7F88(buf);
  BOOL v3 = sub_100012960(*(uint64_t *)&buf[0], "BeaconAdvertiserData", v27);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (!v3) {
    goto LABEL_56;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Read iBeacon Advertiser data", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  memset(&__p, 0, sizeof(__p));
  unsigned int v24 = -1;
  unsigned int v25 = -1;
  if (!sub_1004D1284((uint64_t)v27, "UUID", &__p))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    __int16 v14 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Can't enable beacon advertising as requested, no uuid", (uint8_t *)buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_43;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    LOWORD(v28) = 0;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v15);
    goto LABEL_68;
  }
  sub_10006EF84((uint64_t)v27, "major", &v25);
  sub_10006EF84((uint64_t)v27, "minor", &v24);
  *(_DWORD *)(a1 + 320) = -1;
  sub_10006EF84((uint64_t)v27, "power", (_DWORD *)(a1 + 320));
  id v5 = objc_alloc((Class)NSUUID);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  id v7 = [v5 initWithUUIDString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p)];
  if (v7)
  {
    if ((v25 & 0x80000000) == 0)
    {
      id v8 = objc_alloc((Class)NSNumber);
      id v9 = [v8 initWithInt:v25];
      if (v9) {
        goto LABEL_24;
      }
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      long long v10 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0]) = 67174657;
        DWORD1(buf[0]) = v25;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "problem with major ID generation %{private}d", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        int v28 = 67174657;
        LODWORD(v29) = v25;
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
    id v9 = 0;
LABEL_24:
    if ((v24 & 0x80000000) == 0)
    {
      id v11 = objc_alloc((Class)NSNumber);
      id v12 = [v11 initWithInt:v24];
      if (v12)
      {
        if (v9)
        {
          id v13 = [objc_alloc((Class)CLBeaconRegion) initWithProximityUUID:v7 major:(unsigned __int16)[v9 shortValue] minor:(unsigned __int16)[v12 shortValue] identifier:@"com.apple.locationd.demo"];
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      uint64_t v18 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0]) = 67174657;
        DWORD1(buf[0]) = v24;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "problem with minor ID generation %{private}d", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        int v28 = 67174657;
        LODWORD(v29) = v24;
        double v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    if (v9)
    {
      id v13 = [objc_alloc((Class)CLBeaconRegion) initWithProximityUUID:v7 major:(unsigned __int16)[v9 shortValue] identifier:@"com.apple.locationd.demo"];
      id v12 = 0;
      goto LABEL_54;
    }
    id v12 = 0;
LABEL_53:
    id v13 = [objc_alloc((Class)CLBeaconRegion) initWithProximityUUID:v7 identifier:@"com.apple.locationd.demo"];
LABEL_54:
    *(void *)(a1 + 312) = v13;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_56:
    if (*(void *)(a1 + 312)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
    }
    return sub_10013F3C4(v27);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  __int16 v16 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    __int16 v17 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf[0]) = 136380675;
    *(void *)((char *)buf + 4) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "problem with UUID generation %{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    double v21 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v28 = 136380675;
    double v29 = v21;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v15);
LABEL_68:
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
LABEL_43:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_10013F3C4(v27);
}

void sub_101346240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1013462A4(uint64_t a1)
{
  *(void *)a1 = off_1023215B8;
  sub_10134638C(a1);
  sub_101327408(a1 + 272, *(char **)(a1 + 280));
  sub_1007898E8((uint64_t *)(a1 + 248));
  sub_100EBBF9C(a1 + 160);
  uint64_t v2 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_100513250((pthread_cond_t **)(a1 + 112));

  return sub_101326FB4(a1);
}

void sub_101346354(uint64_t a1)
{
  sub_1013462A4(a1);

  operator delete();
}

void sub_10134638C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2)
  {
    sub_1001B0AE4(v2);
    uint64_t v3 = *(void *)(a1 + 152);
    if (v3)
    {
      sub_100998C38(v3);
      operator delete();
    }
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
  dispatch_release(*(dispatch_object_t *)(a1 + 136));
  id v5 = *(void **)(a1 + 120);
  if (v5)
  {

    *(void *)(a1 + 120) = 0;
  }
  if (*(int *)(a1 + 168) >= 1)
  {
    sub_100EBC6AC(a1 + 160);
  }
}

uint64_t sub_101346458(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    sub_10048B578(a2);
    id v5 = v41[15] >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136380675;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Adding zone,%{private}s", buf, 0xCu);
    if ((v41[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    sub_10048B578(a2);
    if (v37 >= 0) {
      unsigned int v25 = buf;
    }
    else {
      unsigned int v25 = *(unsigned char **)buf;
    }
    int v38 = 136380675;
    double v39 = v25;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    if (v37 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v26);
    if (v26 != (char *)&__p) {
      free(v26);
    }
  }
  uint64_t v6 = sub_101343E38(a2);
  if (v6)
  {
    id v7 = sub_10078AD94(a1 + 272, a2);
    id v8 = v7;
    if ((void *)(a1 + 280) == v7)
    {
      int v15 = *(unsigned __int8 *)(a1 + 212);
      std::string __p = (void *)a2;
      __int16 v16 = sub_10134BB30((uint64_t **)(a1 + 272), a2, (uint64_t)&unk_101D0B290, (uint64_t *)&__p);
      *(_WORD *)((char *)v16 + 73) = 0;
      v16[10] = 0;
      v16[11] = 0x100000001;
      uint64_t v17 = qword_102419390;
      *((unsigned char *)v16 + 72) = v15 ^ 1;
      if (v15 != 1)
      {
        if (v17 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        uint64_t v18 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
        {
          std::string __p = (void *)68289026;
          *(_WORD *)double v41 = 2082;
          *(void *)&v41[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Device doesn't support background monitoring, performing BE zone detection\"}", (uint8_t *)&__p, 0x12u);
        }
        ++*(_DWORD *)(a1 + 208);
        sub_1013456BC(a1, 1);
      }
      else
      {
        if (v17 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        double v19 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
        {
          sub_10048B578(a2);
          __int16 v20 = v41[15] >= 0 ? &__p : (void **)__p;
          *(_DWORD *)long long buf = 136380675;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "iB: Registering zone,%{private}s, with Bluetooth", buf, 0xCu);
          if ((v41[15] & 0x80000000) != 0) {
            operator delete(__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          sub_10048B578(a2);
          if (v37 >= 0) {
            int v28 = buf;
          }
          else {
            int v28 = *(unsigned char **)buf;
          }
          int v38 = 136380675;
          double v39 = v28;
          double v29 = (char *)_os_log_send_and_compose_impl();
          if (v37 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v29);
          if (v29 != (char *)&__p) {
            free(v29);
          }
        }
        double v21 = sub_101346D3C(a2);
        std::string __p = (void *)a2;
        *((unsigned char *)sub_10134BB30((uint64_t **)(a1 + 272), a2, (uint64_t)&unk_101D0B290, (uint64_t *)&__p) + 73) = 1;
        __int16 v22 = *(void **)(a1 + 120);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_101346E70;
        v35[3] = &unk_1023216D0;
        v35[4] = a1;
        [v22 startTrackingZone:v21 forStates:3 transitionHandler:v35];

        std::string __p = off_1022B3DE8;
        if (*(char *)(a2 + 31) < 0)
        {
          sub_1000DC48C(v41, *(void **)(a2 + 8), *(void *)(a2 + 16));
        }
        else
        {
          *(_OWORD *)double v41 = *(_OWORD *)(a2 + 8);
          *(void *)&v41[16] = *(void *)(a2 + 24);
        }
        uint64_t v23 = *(void *)(a2 + 32);
        *(void *)&v41[24] = v23;
        unsigned int v24 = *(void **)(a1 + 40);
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3321888768;
        id v30[2] = sub_101347BE0;
        v30[3] = &unk_1023216F0;
        v30[4] = a1;
        double v31 = off_1022B3DE8;
        if ((v41[23] & 0x80000000) != 0)
        {
          sub_1000DC48C(&v32, *(void **)v41, *(unint64_t *)&v41[8]);
          uint64_t v23 = *(void *)&v41[24];
        }
        else
        {
          long long v32 = *(_OWORD *)v41;
          uint64_t v33 = *(void *)&v41[16];
        }
        uint64_t v34 = v23;
        [v24 afterInterval:v30 async:8.0];
        double v31 = off_1022B3DE8;
        if (SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        std::string __p = off_1022B3DE8;
        if ((v41[23] & 0x80000000) != 0)
        {
          id v12 = *(void **)v41;
          goto LABEL_51;
        }
      }
    }
    else
    {
      ++*((_DWORD *)v7 + 23);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      id v9 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
      {
        sub_10048B578((uint64_t)(v8 + 4));
        long long v10 = v37 >= 0 ? buf : *(unsigned char **)buf;
        int v11 = *((_DWORD *)v8 + 23);
        std::string __p = (void *)68289539;
        *(_WORD *)double v41 = 2082;
        *(void *)&v41[2] = "";
        *(_WORD *)&v41[10] = 2081;
        *(void *)&unsigned char v41[12] = v10;
        *(_WORD *)&v41[20] = 1026;
        *(_DWORD *)&v41[22] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Zone already registered\", \"zone\":%{private, location:escape_only}s, \"refCount\":%{public}d}", (uint8_t *)&__p, 0x22u);
        if (v37 < 0)
        {
          id v12 = *(void **)buf;
LABEL_51:
          operator delete(v12);
        }
      }
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    id v13 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Invalid region definition for zone monitoring", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      *(_WORD *)long long buf = 0;
      double v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v27);
      if (v27 != (char *)&__p) {
        free(v27);
      }
    }
  }
  return v6;
}

void sub_101346CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CLWPZone *sub_101346D3C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2)
  {
    id v4 = objc_alloc((Class)NSUUID);
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v5 = a1 + 8;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    id v3 = [v4 initWithUUIDString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5)];
    int v2 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    id v3 = 0;
  }
  if ((v2 & 2) != 0)
  {
    id v6 = [objc_alloc((Class)NSNumber) initWithUnsignedShort:*(unsigned __int16 *)(a1 + 32)];
    if ((*(_DWORD *)(a1 + 36) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_11:
    id v7 = 0;
    goto LABEL_12;
  }
  id v6 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  id v7 = [objc_alloc((Class)NSNumber) initWithUnsignedShort:*(unsigned __int16 *)(a1 + 34)];
LABEL_12:
  id v8 = -[CLWPZone initWithProximityUUID:major:minor:identifier:]([CLWPZone alloc], "initWithProximityUUID:major:minor:identifier:", v3, v6, v7, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@.%@.%@", [v3 UUIDString], v6, v7));

  return v8;
}

void sub_101346E70(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = *(_DWORD **)(a1 + 32);
  double v41 = off_1022B3DE8;
  *(_OWORD *)__int16 v42 = 0u;
  long long v43 = 0u;
  if (sub_101349874([a2 proximityUUID], objc_msgSend(a2, "major"), objc_msgSend(a2, "minor"), (uint64_t)&v41))
  {
    if (a5)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      long long v10 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = [[objc_msgSend(a5, "description") UTF8String];
        id v12 = [[[a2 description] UTF8String];
        *(_DWORD *)long long buf = 136380931;
        *(void *)double v59 = v11;
        *(_WORD *)&v59[8] = 2081;
        *(void *)&v59[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning An error,%{private}s, was encountered when tracking zone,%{private}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        id v34 = [[objc_msgSend(a5, "description") UTF8String];
        id v35 = [objc_msgSend(a2, "description") UTF8String];
        *(_DWORD *)__int16 v48 = 136380931;
        *(void *)&v48[4] = v34;
        *(_WORD *)&v48[12] = 2081;
        *(void *)&v48[14] = v35;
        double v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
      id v13 = sub_10078AD94((uint64_t)(v9 + 68), (uint64_t)&v41);
      __int16 v14 = v13;
      if (v9 + 70 != (_DWORD *)v13 && !*((unsigned char *)v13 + 72))
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        int v15 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
        {
          id v16 = [[objc_msgSend(a2, "description") UTF8String];
          *(_DWORD *)long long buf = 136380675;
          *(void *)double v59 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "iB: Unable to background monitor zone,%{private}s, performing best effort detection", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          id v37 = [[objc_msgSend(a2, "description") UTF8String];
          *(_DWORD *)__int16 v48 = 136380675;
          *(void *)&v48[4] = v37;
          int v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        *((_WORD *)v14 + 36) = 1;
        ++v9[52];
        sub_1013456BC((uint64_t)v9, 1);
      }
      goto LABEL_59;
    }
    *(void *)__int16 v48 = v48;
    *(void *)&v48[8] = v48;
    *(void *)&v48[16] = 0;
    unsigned int v49 = off_1022B3DE8;
    long long v50 = 0u;
    long long v51 = 0u;
    __int16 v52 = off_1022B3DE8;
    long long __p = 0u;
    long long v54 = 0u;
    int v55 = 1;
    char v57 = 1;
    std::string::operator=((std::string *)&v50, (const std::string *)v42);
    *((void *)&v51 + 1) = *((void *)&v43 + 1);
    if (a3 != 1)
    {
      if (a3 == 2) {
        int v21 = 4;
      }
      else {
        int v21 = 1;
      }
      int v55 = v21;
      goto LABEL_33;
    }
    int v55 = 2;
    if (!a4) {
      goto LABEL_33;
    }
    *(void *)__int16 v46 = off_1022B3DE8;
    *(_OWORD *)&v46[8] = 0u;
    long long v47 = 0u;
    if (sub_101349874([a4 proximityUUID], objc_msgSend(a4, "major"), objc_msgSend(a4, "minor"), (uint64_t)v46))
    {
      std::string::operator=((std::string *)&__p, (const std::string *)&v46[8]);
      *((void *)&v54 + 1) = *((void *)&v47 + 1);
      goto LABEL_70;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    long long v32 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      id v33 = [[objc_msgSend(a4, "description") UTF8String];
      *(_DWORD *)long long buf = 136380675;
      *(void *)double v59 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Unable to convert entry beacon,%{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      id v39 = [[objc_msgSend(a4, "description") UTF8String];
      int v44 = 136380675;
      id v45 = v39;
      __int16 v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    if (WORD4(v54))
    {
      sub_101AB03C8(buf);
    }
    else if (WORD5(v54))
    {
      sub_101AB0250(buf);
    }
    else
    {
      if (!HIDWORD(v54))
      {
LABEL_70:
        *(void *)__int16 v46 = off_1022B3DE8;
        if (SBYTE7(v47) < 0) {
          operator delete(*(void **)&v46[8]);
        }
LABEL_33:
        __int16 v22 = sub_10078AD94((uint64_t)(v9 + 68), (uint64_t)&v49);
        if (v9 + 70 == (_DWORD *)v22)
        {
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          double v29 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
          {
            id v30 = [[objc_msgSend(a2, "description") UTF8String];
            *(_DWORD *)long long buf = 136380675;
            *(void *)double v59 = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "iB: Could not find a match to zone tracker zone, %{private}s", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_54;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          id v31 = [[objc_msgSend(a2, "description") UTF8String];
          *(_DWORD *)__int16 v46 = 136380675;
          *(void *)&uint8_t v46[4] = v31;
          int v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v28);
        }
        else
        {
          if (*((_DWORD *)v22 + 22) != v55)
          {
            *((_DWORD *)v22 + 22) = v55;
            int v56 = sub_101347B7C((uint64_t)v9);
            *(_DWORD *)long long buf = 1;
            (*(void (**)(_DWORD *, uint8_t *, unsigned char *, void, uint64_t, void))(*(void *)v9 + 152))(v9, buf, v48, 0, 0xFFFFFFFFLL, 0);
LABEL_54:
            __int16 v52 = off_1022B3DE8;
            if (SBYTE7(v54) < 0) {
              operator delete((void *)__p);
            }
            unsigned int v49 = off_1022B3DE8;
            if (SBYTE7(v51) < 0) {
              operator delete((void *)v50);
            }
            sub_1007898E8((uint64_t *)v48);
            goto LABEL_59;
          }
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          uint64_t v23 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
          {
            int v24 = v55;
            id v25 = [[objc_msgSend(a2, "description") UTF8String];
            *(_DWORD *)long long buf = 67174915;
            *(_DWORD *)double v59 = v24;
            *(_WORD *)&v59[4] = 2081;
            *(void *)&v59[6] = v25;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "iB: Zone did not change state, %{private}d, %{private}s", buf, 0x12u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_54;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          int v26 = v55;
          id v27 = [[objc_msgSend(a2, "description") UTF8String];
          *(_DWORD *)__int16 v46 = 67174915;
          *(_DWORD *)&uint8_t v46[4] = v26;
          *(_WORD *)&v46[8] = 2081;
          *(void *)&v46[10] = v27;
          int v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v28);
        }
        if (v28 != (char *)buf) {
          free(v28);
        }
        goto LABEL_54;
      }
      sub_101AB00D8(buf);
    }
    abort_report_np();
    __break(1u);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  uint64_t v17 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    id v18 = [[objc_msgSend(a2, "description") UTF8String];
    *(_DWORD *)long long buf = 136380675;
    *(void *)double v59 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unable to convert zone,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    id v19 = [[objc_msgSend(a2, "description") UTF8String];
    *(_DWORD *)__int16 v48 = 136380675;
    *(void *)&v48[4] = v19;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
LABEL_59:
  double v41 = off_1022B3DE8;
  if (SBYTE7(v43) < 0) {
    operator delete(v42[0]);
  }
}

void sub_101347AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_100786268((uint64_t)&a33);
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101347B7C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 272);
  int v2 = (void *)(a1 + 280);
  if (v1 == (void *)(a1 + 280)) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    id v4 = (void *)v1[1];
    uint64_t v5 = v1;
    if (v4)
    {
      do
      {
        id v6 = v4;
        id v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        id v6 = (void *)v5[2];
        BOOL v7 = *v6 == (void)v5;
        uint64_t v5 = v6;
      }
      while (!v7);
    }
    uint64_t result = result + *((unsigned __int8 *)v1 + 73);
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void sub_101347BE0(const std::string *a1)
{
  uint64_t size = a1[1].__r_.__value_.__l.__size_;
  uint64_t v3 = (uint64_t)&a1[1].__r_.__value_.__r.__words[2];
  id v4 = sub_10078AD94(size + 272, (uint64_t)&a1[1].__r_.__value_.__r.__words[2]);
  if ((void *)(size + 280) == v4)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    id v8 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      sub_10048B578(v3);
      if (v13 >= 0) {
        id v9 = __p;
      }
      else {
        id v9 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v15 = 2082;
      *(void *)&v15[2] = "";
      *(_WORD *)&v15[10] = 2081;
      *(void *)&_WORD v15[12] = v9;
      long long v10 = "{\"msg%{public}.0s\":\"iB: Zone removed before the region entry timeout expired\", \"zone\":%{private, locat"
            "ion:escape_only}s}";
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, buf, 0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v5 = v4;
    if (*((_DWORD *)v4 + 22) == 1)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      id v6 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
      {
        sub_10048B578((uint64_t)&a1[1].__r_.__value_.__r.__words[2]);
        BOOL v7 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v15 = 2082;
        *(void *)&v15[2] = "";
        *(_WORD *)&v15[10] = 2081;
        *(void *)&_WORD v15[12] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Zone was not seen and will be marked as exited\", \"zone\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      *((_DWORD *)v5 + 22) = 4;
      *(void *)long long buf = buf;
      *(void *)int v15 = buf;
      *(void *)&void v15[8] = 0;
      *(void *)&unsigned char v15[16] = off_1022B3DE8;
      *(_OWORD *)id v16 = 0u;
      long long v17 = 0u;
      id v18 = off_1022B3DE8;
      *(_OWORD *)id v19 = 0u;
      long long v20 = 0u;
      int v21 = 1;
      char v23 = 1;
      std::string::operator=((std::string *)v16, a1 + 2);
      *((void *)&v17 + 1) = a1[3].__r_.__value_.__l.__data_;
      int v21 = 4;
      int v22 = sub_101347B7C(size);
      LODWORD(__p[0]) = 1;
      (*(void (**)(uint64_t, void **, uint8_t *, void, uint64_t, void))(*(void *)size + 152))(size, __p, buf, 0, 0xFFFFFFFFLL, 0);
      id v18 = off_1022B3DE8;
      if (SBYTE7(v20) < 0) {
        operator delete(v19[0]);
      }
      *(void *)&unsigned char v15[16] = off_1022B3DE8;
      if (SBYTE7(v17) < 0) {
        operator delete(v16[0]);
      }
      sub_1007898E8((uint64_t *)buf);
      return;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    id v8 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      sub_10048B578(v3);
      if (v13 >= 0) {
        id v11 = __p;
      }
      else {
        id v11 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v15 = 2082;
      *(void *)&v15[2] = "";
      *(_WORD *)&v15[10] = 2081;
      *(void *)&_WORD v15[12] = v11;
      long long v10 = "{\"msg%{public}.0s\":\"iB: State for zone was already determined\", \"zone\":%{private, location:escape_only}s}";
      goto LABEL_30;
    }
  }
}

void sub_101347FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100786268((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_101347FD0(void *a1, uint64_t a2)
{
  a1[5] = off_1022B3DE8;
  uint64_t result = a1 + 6;
  if (*(char *)(a2 + 71) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    result[2] = *(void *)(a2 + 64);
    *(_OWORD *)uint64_t result = v5;
  }
  a1[9] = *(void *)(a2 + 72);
  return result;
}

void sub_101348048(uint64_t a1)
{
  *(void *)(a1 + 40) = off_1022B3DE8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

BOOL sub_10134807C(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    sub_10048B578(a2);
    long long v5 = SBYTE3(v36) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136380675;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing zone,%{private}s", buf, 0xCu);
    if (SBYTE3(v36) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    sub_10048B578(a2);
    if (v29 >= 0) {
      int v26 = buf;
    }
    else {
      int v26 = *(unsigned char **)buf;
    }
    int v30 = 136380675;
    id v31 = v26;
    id v27 = (char *)_os_log_send_and_compose_impl();
    if (v29 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::removeProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v27);
    if (v27 != (char *)&__p) {
      free(v27);
    }
  }
  id v6 = sub_10078AD94(a1 + 272, a2);
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = a1 + 280;
  if ((void *)(a1 + 280) == v6)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    long long v17 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      sub_10048B578(a2);
      id v18 = SBYTE3(v36) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)long long buf = 136380675;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Unable to remove zone,%{private}s, it wasn't found.", buf, 0xCu);
      if (SBYTE3(v36) < 0) {
        operator delete(__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      sub_10048B578(a2);
      if (v29 >= 0) {
        id v19 = buf;
      }
      else {
        id v19 = *(unsigned char **)buf;
      }
      int v30 = 136380675;
      id v31 = v19;
      long long v20 = (char *)_os_log_send_and_compose_impl();
      if (v29 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::removeProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v20);
      if (v20 != (char *)&__p) {
        free(v20);
      }
    }
  }
  else
  {
    int v9 = *((_DWORD *)v6 + 23);
    BOOL v10 = v9 != 0;
    int v11 = v9 - 1;
    if (v11 == 0 || !v10)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      id v12 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
      {
        sub_10048B578(a2);
        char v13 = v29 >= 0 ? buf : *(unsigned char **)buf;
        long long __p = (void *)68289283;
        __int16 v33 = 2082;
        id v34 = "";
        __int16 v35 = 2081;
        double v36 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Unregistering zone with Bluetooth, last client\", \"zone\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if (v29 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (*(unsigned char *)(v7 + 72))
      {
        int v14 = *(_DWORD *)(a1 + 208);
        BOOL v15 = __OFSUB__(v14--, 1);
        *(_DWORD *)(a1 + 208) = v14;
        if ((v14 < 0) ^ v15 | (v14 == 0))
        {
          *(void *)(a1 + 232) = 0;
          sub_1001B0AE4(*(void *)(a1 + 152));
        }
        BOOL v16 = *(unsigned char *)(v7 + 73) == 0;
        sub_1013276A0((uint64_t **)(a1 + 272), v7);
        if (v16) {
          return v8 != v7;
        }
      }
      else
      {
        sub_1013276A0((uint64_t **)(a1 + 272), v7);
      }
      int v24 = sub_101346D3C(a2);
      [*(id *)(a1 + 120) stopTrackingZone:v24];

      return v8 != v7;
    }
    *((_DWORD *)v6 + 23) = v11;
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    int v21 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      sub_10048B578(a2);
      int v22 = v29 >= 0 ? buf : *(unsigned char **)buf;
      int v23 = *(_DWORD *)(v7 + 92);
      long long __p = (void *)68289539;
      __int16 v33 = 2082;
      id v34 = "";
      __int16 v35 = 2081;
      double v36 = v22;
      __int16 v37 = 1026;
      int v38 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Decremented zone reference count, still clients\", \"zone\":%{private, location:escape_only}s, \"refCount\":%{public}d}", (uint8_t *)&__p, 0x22u);
      if (v29 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  return v8 != v7;
}

id sub_101348670(uint64_t a1)
{
  [*(id *)(a1 + 120) stopTrackingZones];
  sub_101327408(a1 + 272, *(char **)(a1 + 280));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 232) = 0;
  id result = sub_1001B0AE4(*(void *)(a1 + 152));
  *(_DWORD *)(a1 + 208) = 0;
  return result;
}

id sub_1013486C0(void *a1, double a2)
{
  (*(void (**)(void *))(*a1 + 240))(a1);
  id v4 = (void *)a1[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_101348770;
  void v6[3] = &unk_1022A3020;
  v6[4] = a1;
  return [v4 afterInterval:v6 async:a2];
}

uint64_t sub_101348770(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 248))();
}

void sub_10134879C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 132);
  if (v2 <= 0)
  {
    *(_DWORD *)(a1 + 132) = 1;
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    int v11 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(a1 + 132);
      uint64_t v14 = *(void *)(a1 + 232);
      uint64_t v13 = *(void *)(a1 + 240);
      *(_DWORD *)long long buf = 67240705;
      int v33 = v12;
      __int16 v34 = 2049;
      uint64_t v35 = v13;
      __int16 v36 = 2049;
      uint64_t v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "iB: Resuming scan, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v20 = *(_DWORD *)(a1 + 132);
      uint64_t v22 = *(void *)(a1 + 232);
      uint64_t v21 = *(void *)(a1 + 240);
      int v26 = 67240705;
      int v27 = v20;
      __int16 v28 = 2049;
      uint64_t v29 = v21;
      __int16 v30 = 2049;
      uint64_t v31 = v22;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    sub_100103240();
    if (sub_10010145C()) {
      uint64_t v15 = 2;
    }
    else {
      uint64_t v15 = 1;
    }
    BOOL v16 = *(void **)(a1 + 120);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_101349324;
    void v25[3] = &unk_102321720;
    v25[4] = a1;
    [v16 startScanForBeaconTypes:v15 updateHandler:v25];
    long long v17 = *(NSObject **)(a1 + 136);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101349984;
    handler[3] = &unk_1022A3020;
    handler[4] = a1;
    dispatch_source_set_event_handler(v17, handler);
    id v18 = *(NSObject **)(a1 + 136);
    dispatch_time_t v19 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v18, v19, 0x3B9ACA00uLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 136));
  }
  else
  {
    *(_DWORD *)(a1 + 132) = v2 + 1;
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    uint64_t v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(a1 + 132);
      uint64_t v6 = *(void *)(a1 + 232);
      uint64_t v5 = *(void *)(a1 + 240);
      *(_DWORD *)long long buf = 67240705;
      int v33 = v4;
      __int16 v34 = 2049;
      uint64_t v35 = v5;
      __int16 v36 = 2049;
      uint64_t v37 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: Scan is already resumed, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v7 = *(_DWORD *)(a1 + 132);
      uint64_t v9 = *(void *)(a1 + 232);
      uint64_t v8 = *(void *)(a1 + 240);
      int v26 = 67240705;
      int v27 = v7;
      __int16 v28 = 2049;
      uint64_t v29 = v8;
      __int16 v30 = 2049;
      uint64_t v31 = v9;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_101348C14(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 132);
  uint64_t v3 = qword_102419390;
  BOOL v4 = __OFSUB__(v2--, 1);
  *(_DWORD *)(a1 + 132) = v2;
  if ((v2 < 0) ^ v4 | (v2 == 0))
  {
    if (v3 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    uint64_t v5 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)long long buf = 67240192;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: Suspending scan, reference count,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStopScan()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_1013499C0(a1);
    sub_10134A1F4(a1);
    sub_10134A4C8(a1);
    dispatch_suspend(*(dispatch_object_t *)(a1 + 136));
    [*(id *)(a1 + 120) stopScan];
  }
  else
  {
    if (v3 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    int v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)long long buf = 67240192;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Scan is already suspended, reference count,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStopScan()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_101348F4C(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  int v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Zone detection timer woke up", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::onZoneDetectionTimer(CLPersistentTimer *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1013456BC(a1, 3);
}

void sub_1013490EC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 3)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    BOOL v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Received a wake event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1013456BC(a1, 2);
  }
}

void *sub_101349298@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101349314()
{
  return 1;
}

uint64_t sub_10134931C()
{
  return 1;
}

void sub_101349324(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned __int8 v6 = [[a2 objectForKey:@"typeMask"] integerValue];
  if (a3)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    int v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v21 = (std::string *)[objc_msgSend(a3, "description") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "An error,%{public}s, was received for a scan", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)[objc_msgSend(objc_msgSend(a3, "description"), "UTF8String") UTF8String];
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else if ((v6 & 3) != 0)
  {
    memset(&v15, 0, sizeof(v15));
    int v16 = 0;
    long long v17 = off_1022B3DE8;
    *(_OWORD *)long long __p = 0u;
    memset(v19, 0, 26);
    if ([a2 objectForKey:@"beaconID"]) {
      std::string::assign(&v15, (const std::string::value_type *)[objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectForKey:", @"beaconID"), "UUIDString"), "UTF8String"]);
    }
    if (sub_101349874([a2 objectForKey:@"proximityUUID"], objc_msgSend(a2, "objectForKey:", @"major"), objc_msgSend(a2, "objectForKey:", @"minor"), (uint64_t)&v17))
    {
      LOWORD(v16) = (unsigned __int16)[objc_msgSend(objc_msgSend(a2, "objectForKey:", @"rssi"), "shortValue");
      HIWORD(v16) = (unsigned __int16)[objc_msgSend(a2, "objectForKey:", @"tx") shortValue];
      if ([a2 objectForKey:@"discovered"])
      {
        [objc_msgSend(a2, "objectForKey:", @"discovered") timeIntervalSinceReferenceDate];
        *(void *)&v19[1] = v8;
      }
      WORD4(v19[1]) = (unsigned __int16)[[a2 objectForKey:@"channel"] shortValue];
      uint64_t v9 = sub_1013272C0((int)v5 + 248, 0, 0, (long long *)&v15);
      v9[1] = v5 + 248;
      uint64_t v10 = *(void *)(v5 + 248);
      void *v9 = v10;
      *(void *)(v10 + 8) = v9;
      *(void *)(v5 + 248) = v9;
      ++*(void *)(v5 + 264);
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v11 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        int v12 = &v15;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136380675;
        uint64_t v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unable to convert advertisement region from bridge to native for device,%{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()_block_invoke", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    long long v17 = off_1022B3DE8;
    if (SBYTE7(v19[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_101349854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101349920((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101349874(void *a1, void *a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 36) = 0;
  uint64_t v7 = a1 != 0;
  if (a1)
  {
    *(_DWORD *)(a4 + 36) = 1;
    std::string::assign((std::string *)(a4 + 8), (const std::string::value_type *)[objc_msgSend(objc_msgSend(a1, "UUIDString"), "UTF8String") UTF8String]);
  }
  if (a2)
  {
    *(_DWORD *)(a4 + 36) |= 2u;
    *(_WORD *)(a4 + 32) = (unsigned __int16)[a2 unsignedShortValue];
    if (!a3) {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 1;
    if (!a3) {
      return v7;
    }
  }
  if (a2) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a4 + 36) |= 4u;
  *(_WORD *)(a4 + 34) = (unsigned __int16)[a3 unsignedShortValue];
  return v7;
}

uint64_t sub_101349920(uint64_t a1)
{
  *(void *)(a1 + 32) = off_1022B3DE8;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_101349984(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1013499C0(v1);

  sub_10134A1F4(v1);
}

void sub_1013499C0(uint64_t a1)
{
  double v2 = sub_1000D3E50();
  if (*(int *)(a1 + 208) >= 1)
  {
    uint64_t v3 = *(void **)(a1 + 272);
    if (v3 != (void *)(a1 + 280))
    {
      double v4 = v2;
      do
      {
        if (*((unsigned char *)v3 + 72))
        {
          long long v25 = 0u;
          long long v26 = 0u;
          for (uint64_t i = *(void *)(a1 + 256); i != a1 + 248; uint64_t i = *(void *)(i + 8))
          {
            if (sub_100C84840((uint64_t)(v3 + 4), i + 48))
            {
              std::string::operator=((std::string *)&v25, (const std::string *)(i + 56));
              *((void *)&v26 + 1) = *(void *)(i + 80);
              unsigned __int8 v6 = (int *)(v3 + 11);
              if (*((_DWORD *)v3 + 22) == 2)
              {
LABEL_29:
                if (*((unsigned char *)v3 + 74))
                {
                  *((unsigned char *)v3 + 74) = 0;
                  v3[10] = 0;
                }
                goto LABEL_56;
              }
              int v13 = 2;
              if (!*((unsigned char *)v3 + 74)) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }
          }
          unsigned __int8 v6 = (int *)(v3 + 11);
          if (*((_DWORD *)v3 + 22) == 4) {
            goto LABEL_29;
          }
          if (*((unsigned char *)v3 + 74))
          {
            if (v4 - *((double *)v3 + 10) >= 5.0)
            {
              int v13 = 4;
LABEL_43:
              *((unsigned char *)v3 + 74) = 0;
              v3[10] = 0;
LABEL_44:
              int *v6 = v13;
              if (qword_102419390 != -1) {
                dispatch_once(&qword_102419390, &stru_102321758);
              }
              int v16 = qword_102419398;
              if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
              {
                sub_10048B578((uint64_t)(v3 + 4));
                long long v17 = __p;
                if (v32 < 0) {
                  long long v17 = *(unsigned char **)__p;
                }
                int v18 = *v6;
                uint64_t v19 = *(void *)(a1 + 288);
                *(_DWORD *)long long buf = 68289795;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&unsigned char buf[18] = 2081;
                *(void *)&buf[20] = v17;
                *(_WORD *)&unsigned char buf[28] = 1025;
                *(_DWORD *)&buf[30] = v18;
                *(_WORD *)&buf[34] = 2050;
                *(void *)&buf[36] = v19;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: BE zone state transition\", \"zone\":%{private, location:escape_only}s, \"state\":%{private}d, \"totalZones\":%{public}lu}", buf, 0x2Cu);
                if (SHIBYTE(v32) < 0) {
                  operator delete(*(void **)__p);
                }
              }
              *(void *)long long buf = buf;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0;
              *(void *)&unsigned char buf[24] = off_1022B3DE8;
              *(_OWORD *)&unsigned char buf[32] = 0u;
              long long v37 = 0u;
              int v38 = off_1022B3DE8;
              long long v39 = 0u;
              long long v40 = 0u;
              int v41 = 1;
              char v43 = 1;
              std::string::operator=((std::string *)&buf[32], (const std::string *)(v3 + 5));
              *((void *)&v37 + 1) = v3[8];
              std::string::operator=((std::string *)&v39, (const std::string *)&v25);
              *((void *)&v40 + 1) = *((void *)&v26 + 1);
              int v41 = *v6;
              int v42 = sub_101347B7C(a1);
              *(_DWORD *)long long __p = 1;
              (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
              int v38 = off_1022B3DE8;
              if (SBYTE7(v40) < 0) {
                operator delete((void *)v39);
              }
              *(void *)&unsigned char buf[24] = off_1022B3DE8;
              if (SBYTE7(v37) < 0) {
                operator delete(*(void **)&buf[32]);
              }
              sub_1007898E8((uint64_t *)buf);
              goto LABEL_56;
            }
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_102321758);
            }
            uint64_t v7 = qword_102419398;
            if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
            {
              sub_10048B578((uint64_t)(v3 + 4));
              uint64_t v8 = __p;
              if (v32 < 0) {
                uint64_t v8 = *(unsigned char **)__p;
              }
              uint64_t v9 = v3[10];
              *(_DWORD *)long long buf = 136381443;
              *(void *)&uint8_t buf[4] = v8;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 2049;
              *(double *)&unsigned char buf[24] = v4;
              *(_WORD *)&unsigned char buf[32] = 2049;
              *(void *)&buf[34] = 0x4014000000000000;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Best effort zone,%{private}s, firstExit,%{private}f, now,%{private}f, has not reached exitThreshold,%{private}f", buf, 0x2Au);
              if (SHIBYTE(v32) < 0) {
                operator delete(*(void **)__p);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419390 != -1) {
                dispatch_once(&qword_102419390, &stru_102321758);
              }
              sub_10048B578((uint64_t)(v3 + 4));
              uint64_t v10 = v27;
              if (v28 < 0) {
                uint64_t v10 = (void **)v27[0];
              }
              uint64_t v11 = v3[10];
              *(_DWORD *)long long __p = 136381443;
              *(void *)&__p[4] = v10;
              __int16 v30 = 2049;
              uint64_t v31 = v11;
              __int16 v32 = 2049;
              double v33 = v4;
              __int16 v34 = 2049;
              uint64_t v35 = 0x4014000000000000;
              int v12 = (char *)_os_log_send_and_compose_impl();
              if (v28 < 0) {
                operator delete(v27[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedPerformZoneDetectionWithCache()", "%s\n", v12);
              if (v12 != buf) {
                free(v12);
              }
            }
          }
          else
          {
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_102321758);
            }
            uint64_t v14 = qword_102419398;
            if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
            {
              sub_10048B578((uint64_t)(v3 + 4));
              std::string v15 = buf;
              if (buf[23] < 0) {
                std::string v15 = *(unsigned char **)buf;
              }
              *(_DWORD *)long long __p = 136380675;
              *(void *)&__p[4] = v15;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "iB: Best effort zone,%{private}s, subject to exit", __p, 0xCu);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419390 != -1) {
                dispatch_once(&qword_102419390, &stru_102321758);
              }
              sub_10048B578((uint64_t)(v3 + 4));
              int v23 = __p;
              if (v32 < 0) {
                int v23 = *(unsigned char **)__p;
              }
              LODWORD(v27[0]) = 136380675;
              *(void **)((char *)v27 + 4) = v23;
              int v24 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v32) < 0) {
                operator delete(*(void **)__p);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedPerformZoneDetectionWithCache()", "%s\n", v24);
              if (v24 != buf) {
                free(v24);
              }
            }
            *((unsigned char *)v3 + 74) = 1;
            *((double *)v3 + 10) = v4;
          }
LABEL_56:
          if (SBYTE7(v26) < 0) {
            operator delete((void *)v25);
          }
        }
        int v20 = (void *)v3[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            int v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (void *)v3[2];
            BOOL v22 = *v21 == (void)v3;
            uint64_t v3 = v21;
          }
          while (!v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != (void *)(a1 + 280));
    }
  }
}

void sub_10134A198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10134A1F4(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  double v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 264);
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Posting notification with proximity devices,%{public}lu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    uint64_t v4 = *(void *)(a1 + 264);
    int v6 = 134349056;
    uint64_t v7 = v4;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedPostAndClearScanCache()", "%s\n", v5);
    if (v5 != (char *)&buf) {
      free(v5);
    }
  }
  *(void *)&long long buf = &buf;
  *((void *)&buf + 1) = &buf;
  uint64_t v9 = 0;
  uint64_t v10 = off_1022B3DE8;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  int v13 = off_1022B3DE8;
  *(_OWORD *)long long __p = 0u;
  long long v15 = 0u;
  int v16 = 1;
  char v17 = 1;
  if (&buf != (long long *)(a1 + 248)) {
    sub_101327068((uint64_t *)&buf, *(void *)(a1 + 256), a1 + 248);
  }
  int v6 = 0;
  (*(void (**)(uint64_t, int *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, &buf, 0, 0xFFFFFFFFLL, 0);
  sub_1007898E8((uint64_t *)(a1 + 248));
  int v13 = off_1022B3DE8;
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = off_1022B3DE8;
  if (SBYTE7(v12) < 0) {
    operator delete(v11[0]);
  }
  sub_1007898E8((uint64_t *)&buf);
}

void sub_10134A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100786268((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10134A4C8(uint64_t a1)
{
  if (*(int *)(a1 + 208) >= 1)
  {
    uint64_t v1 = *(void **)(a1 + 272);
    double v2 = (void *)(a1 + 280);
    if (v1 != (void *)(a1 + 280))
    {
      do
      {
        if (*((unsigned char *)v1 + 72) && *((unsigned char *)v1 + 74))
        {
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102321758);
          }
          uint64_t v3 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
          {
            sub_10048B578((uint64_t)(v1 + 4));
            p_p = &__p;
            if (v9 < 0) {
              p_p = __p;
            }
            *(_DWORD *)long long buf = 68289283;
            int v11 = 0;
            __int16 v12 = 2082;
            int v13 = "";
            __int16 v14 = 2081;
            long long v15 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Resetting best effort zone exit state\", \"zone\":%{private, location:escape_only}s}", buf, 0x1Cu);
            if (v9 < 0) {
              operator delete(__p);
            }
          }
          *((unsigned char *)v1 + 74) = 0;
          v1[10] = 0;
        }
        uint64_t v5 = (void *)v1[1];
        if (v5)
        {
          do
          {
            int v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            int v6 = (void *)v1[2];
            BOOL v7 = *v6 == (void)v1;
            uint64_t v1 = v6;
          }
          while (!v7);
        }
        uint64_t v1 = v6;
      }
      while (v6 != v2);
    }
  }
}

void sub_10134A680(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 224))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v5 = Current;
    if ((a2 & 1) != 0 || vabdd_f64(Current, *(double *)(a1 + 232)) >= 120.0)
    {
      sub_1001165F8(*(void *)(a1 + 152), Current + *(double *)(a1 + 216));
      *(double *)(a1 + 232) = v5;
    }
  }
}

BOOL sub_10134A6EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_101348C14(v1);

  return sub_100EBC6AC(v1 + 160);
}

uint64_t sub_10134AD58(uint64_t a1, void *a2, int a3)
{
  int v11 = a3;
  double v5 = *(void **)(a1 + 312);
  if (v5)
  {

    *(void *)(a1 + 312) = 0;
  }
  if (a2)
  {
    sub_1000E9354(v10);
    sub_1001074FC((uint64_t)v10, "UUID", (uint64_t)[[objc_msgSend(objc_msgSend(a2, "proximityUUID"), "UUIDString") UUIDString]);
    if ([a2 major])
    {
      *(_DWORD *)long long buf = [objc_msgSend(a2, "major") intValue];
      sub_1000EA838((uint64_t)v10, "major", buf);
    }
    if ([a2 minor])
    {
      *(_DWORD *)long long buf = [objc_msgSend(a2, "minor") intValue];
      sub_1000EA838((uint64_t)v10, "minor", buf);
    }
    *(_DWORD *)(a1 + 320) = -1;
    if (v11 != -1)
    {
      sub_1000EA838((uint64_t)v10, "power", &v11);
      *(_DWORD *)(a1 + 320) = v11;
    }
    sub_1000C7F88(buf);
    sub_1004D3878(*(uint64_t *)buf, "BeaconAdvertiserData", (uint64_t)v10);
    if (*(void *)v13) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v13);
    }
    sub_1000C7F88(buf);
    sub_10051F604(*(uint64_t *)buf);
    if (*(void *)v13) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v13);
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    int v6 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      id v7 = [[objc_msgSend(a2, "description") UTF8String];
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v13 = 2082;
      *(void *)&v13[2] = "";
      __int16 v14 = 2081;
      id v15 = v7;
      __int16 v16 = 1026;
      int v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Storing beacon advertisement data\", \"beacon\":%{private, location:escape_only}s, \"power\":%{public}d}", buf, 0x22u);
    }
    *(void *)(a1 + 312) = [a2 copy];
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
    sub_10013F3C4(v10);
  }
  else
  {
    sub_1000C7F88(buf);
    sub_1004CF7DC(*(uint64_t *)buf, "BeaconAdvertiserData", 0xFFFFFFFFLL);
    if (*(void *)v13) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v13);
    }
    sub_1000C7F88(buf);
    sub_10051F604(*(uint64_t *)buf);
    if (*(void *)v13) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v13);
    }
    *(_DWORD *)(a1 + 320) = -1;
    (*(void (**)(uint64_t))(*(void *)a1 + 272))(a1);
    return 1;
  }
  return v8;
}

void sub_10134B04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10134B0AC(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  double v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: shutdown beacons and peripheral manager\"}", (uint8_t *)v4, 0x12u);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    [v3 stopAdvertising];

    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
  }
}

uint64_t sub_10134B1AC(uint64_t a1)
{
  if (!*(void *)(a1 + 312))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    id v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Start advertising called when we have no region", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 272))(a1);
    return 0;
  }
  id v2 = *(id *)(a1 + 296);
  if (v2
    || (*(void *)(a1 + 304) = -[CLPeripheralManagerDelegate initWithSilo:provider:]([CLPeripheralManagerDelegate alloc], "initWithSilo:provider:", *(void *)(a1 + 40), a1), id v2 = objc_msgSend(objc_alloc((Class)CBPeripheralManager), "initWithDelegate:queue:", *(void *)(a1 + 304), objc_msgSend(*(id *)(a1 + 40), "queue")), (*(void *)(a1 + 296) = v2) != 0))
  {
    if ([v2 state] != (id)5)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      char v9 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = [*(id *)(a1 + 296) state];
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)long long v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning BT state not yet powered %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        [*(id *)(a1 + 296) state];
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      return 1;
    }
    if ([*(id *)(a1 + 296) isAdvertising])
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      uint64_t v3 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: Stopping previous advertising", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102321758);
        }
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      [*(id *)(a1 + 296) stopAdvertising];
    }
    if (*(_DWORD *)(a1 + 320) == -1)
    {
      id v4 = 0;
    }
    else
    {
      id v4 = [objc_alloc((Class)NSNumber) initWithInt:*(unsigned int *)(a1 + 320)];
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      __int16 v5 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
      {
        int v6 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)long long v26 = 0;
        *(_WORD *)&_DWORD v26[4] = 2082;
        *(void *)&v26[6] = "";
        __int16 v27 = 1026;
        LODWORD(v28) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Setting beacon power\", \"power\":%{public}d}", buf, 0x18u);
      }
    }
    id v12 = [*(id *)(a1 + 312) peripheralDataWithMeasuredPower:v4];

    if (v12)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v13 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
      {
        id v14 = [[objc_msgSend(*(id *)(a1 + 312), "description") UTF8String];
        int v15 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)long long buf = 68289539;
        *(_DWORD *)long long v26 = 0;
        *(_WORD *)&_DWORD v26[4] = 2082;
        *(void *)&v26[6] = "";
        __int16 v27 = 2081;
        id v28 = v14;
        __int16 v29 = 1026;
        int v30 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Starting beacon advertising\", \"beacon\":%{private, location:escape_only}s, \"power\":%{public}d}", buf, 0x22u);
      }
      [*(id *)(a1 + 296) startAdvertising:v12];
      return 1;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    __int16 v16 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      id v17 = [[objc_msgSend(*(id *)(a1 + 312), "description") UTF8String];
      int v18 = *(_DWORD *)(a1 + 320);
      *(_DWORD *)long long buf = 136380931;
      *(void *)long long v26 = v17;
      *(_WORD *)&v26[8] = 1026;
      *(_DWORD *)&v26[10] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Error starting beacon advertising %{private}s, power %{public}d", buf, 0x12u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      [objc_msgSend(*(id *)(a1 + 312), "description") UTF8String];
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v20);
      if (v20 == (char *)buf) {
        return 0;
      }
      goto LABEL_59;
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
    uint64_t v21 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Can't allocate peripheral manager", buf, 2u);
    }
    BOOL v22 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v22)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321758);
      }
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v20);
      if (v20 == (char *)buf) {
        return 0;
      }
LABEL_59:
      free(v20);
      return 0;
    }
  }
  return result;
}

void sub_10134BAD0(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10134BB00(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t *sub_10134BB30(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = (uint64_t **)sub_10078B2A8((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10134BBC8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_10134BBC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10134BC4C((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10134BC30(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_101327620(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10134BC4C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022B3DE8;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 42) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1;
  return a1;
}

BOOL sub_10134BCE4()
{
  uint64_t v1 = qword_102419398;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_10134BD04()
{
  id v2 = *(NSObject **)(v0 + 920);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

id sub_10134C154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    sub_101AB06C4();
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    sub_101AB0540();
  }
  int v6 = *(void **)(a1 + 32);

  return [v6 setValue:a3 forHTTPHeaderField:a2];
}

void sub_10134CE8C(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

unsigned char *sub_10134CEBC(unsigned char *a1)
{
  sub_101510BFC((uint64_t)a1);
  *(void *)(v2 + 256) = 0;
  sub_100103240();
  if (sub_10010145C())
  {
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    int v3 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnGnssMeasurement", &v26) ^ 1;
    if (v26) {
      LOBYTE(v3) = 1;
    }
    a1[256] = v3;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    int v4 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnMotionActivity", &v26) ^ 1;
    if (v26) {
      LOBYTE(v4) = 1;
    }
    a1[257] = v4;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    int v5 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnAlsEvidence", &v26) ^ 1;
    if (v26) {
      LOBYTE(v5) = 1;
    }
    a1[263] = v5;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v6 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnCMGpsModelOutput", &v26);
    if (v26) {
      char v7 = v6;
    }
    else {
      char v7 = 0;
    }
    a1[260] = v7;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v8 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnCMWifiModelOutput", &v26);
    if (v26) {
      char v9 = v8;
    }
    else {
      char v9 = 0;
    }
    a1[261] = v9;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v10 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnCMAlsModelOutput", &v26);
    if (v26) {
      char v11 = v10;
    }
    else {
      char v11 = 0;
    }
    a1[262] = v11;
  }
  else
  {
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    int v12 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnGnssMeasurement", &v26) ^ 1;
    if (v26) {
      LOBYTE(v12) = 1;
    }
    a1[256] = v12;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    int v13 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnMotionActivity", &v26) ^ 1;
    if (v26) {
      LOBYTE(v13) = 1;
    }
    a1[257] = v13;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    int v14 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnAlsEvidence", &v26) ^ 1;
    if (v26) {
      LOBYTE(v14) = 1;
    }
    a1[263] = v14;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v15 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnCMGpsModelOutput", &v26);
    if (v26) {
      char v16 = v15;
    }
    else {
      char v16 = 0;
    }
    a1[260] = v16;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v17 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnCMWifiModelOutput", &v26);
    if (v26) {
      char v18 = v17;
    }
    else {
      char v18 = 0;
    }
    a1[261] = v18;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v19 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnCMAlsModelOutput", &v26);
    if (v26) {
      char v20 = v19;
    }
    else {
      char v20 = 0;
    }
    a1[262] = v20;
    if (v25) {
      sub_1000DB0A0(v25);
    }
    sub_1000C7F88(&v24);
    BOOL v26 = 0;
    char v21 = sub_1000D2988(v24, "CLOutdoorEstimatorKeepOnGnssAvailability", &v26);
    if (v26) {
      char v22 = v21;
    }
    else {
      char v22 = 0;
    }
    a1[258] = v22;
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  return a1;
}

void sub_10134D24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_101510CB0(v11);
  _Unwind_Resume(a1);
}

void sub_10134D2E0(uint64_t a1, int *a2)
{
}

void sub_10134D2EC(uint64_t a1, uint64_t a2, double a3)
{
  if (*(unsigned char *)(a1 + 256))
  {
    unint64_t v32 = 0;
    double v33 = 0.0;
    int v34 = 0;
    double v35 = 0.0;
    int v36 = 0;
    long long __p = 0;
    uint64_t v31 = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v3 != v4)
    {
      int v7 = 0;
      char v8 = 0;
      do
      {
        double v9 = *(float *)(v3 + 16);
        if (fabs(v9) >= 2.22044605e-16)
        {
          if ((unint64_t)v8 >= v32)
          {
            uint64_t v11 = __p;
            uint64_t v12 = v8 - __p;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v14 = v32 - (void)__p;
            if ((uint64_t)(v32 - (void)__p) >> 2 > v13) {
              unint64_t v13 = v14 >> 2;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v13;
            }
            if (v15)
            {
              unint64_t v15 = (unint64_t)sub_1000DA54C((uint64_t)&v32, v15);
              uint64_t v17 = v16;
              uint64_t v11 = __p;
              char v8 = v31;
            }
            else
            {
              uint64_t v17 = 0;
            }
            char v18 = (double *)(v15 + 8 * v12);
            *char v18 = v9;
            char v10 = v18 + 1;
            while (v8 != v11)
            {
              uint64_t v19 = *((void *)v8-- - 1);
              *((void *)v18-- - 1) = v19;
            }
            long long __p = v18;
            unint64_t v32 = v15 + 8 * v17;
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            double *v8 = v9;
            char v10 = v8 + 1;
          }
          uint64_t v31 = v10;
          if (*(float *)(v3 + 8) >= 0.5) {
            int v36 = ++v7;
          }
          char v8 = v10;
        }
        v3 += 28;
      }
      while (v3 != v4);
      if (__p != v8)
      {
        sub_10017345C(__p, v8, (uint64_t)buf, 126 - 2 * __clz(v8 - __p), 1);
        double v33 = a3;
        int v34 = 3;
        sub_100103240();
        if (sub_10010145C())
        {
          double v20 = *__p;
        }
        else
        {
          int v23 = __p;
          unint64_t v24 = v31 - __p;
          double v25 = 0.0;
          if (v24 >= 8) {
            unint64_t v24 = 8;
          }
          if (v24)
          {
            unint64_t v26 = v24;
            do
            {
              double v27 = *v23++;
              double v25 = v25 + v27;
              --v26;
            }
            while (v26);
          }
          double v20 = v25 / (double)v24;
        }
        double v35 = v20;
        sub_101511400(a1, &v33);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_1023217E0);
        }
        id v28 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134284033;
          double v44 = v35;
          __int16 v45 = 1025;
          int v46 = v36;
          __int16 v47 = 2048;
          double v48 = a3;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedGnssMeasurement,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevationMask,%{private}d,currentTime,%f", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194F0 != -1) {
            dispatch_once(&qword_1024194F0, &stru_1023217E0);
          }
          int v37 = 134284033;
          double v38 = v35;
          __int16 v39 = 1025;
          int v40 = v36;
          __int16 v41 = 2048;
          double v42 = a3;
          __int16 v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedGnssMeasurement(const CLOutdoorGnssLeechLocation &, const CFAbsoluteTime)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        char v8 = __p;
      }
      if (v8) {
        operator delete(v8);
      }
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    char v21 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffGnssMeasurement", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_1023217E0);
      }
      LOWORD(v33) = 0;
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedGnssMeasurement(const CLOutdoorGnssLeechLocation &, const CFAbsoluteTime)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
}

void sub_10134D810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10134D840(uint64_t a1, _DWORD *a2, double a3)
{
  if (*(unsigned char *)(a1 + 259))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    int v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,feedMapMatchingRouteHint", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_1023217E0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedMapMatchingRouteHint(const CLMapsRouteHintData &, const CFAbsoluteTime)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    double v6 = sub_10016C458();
    if (!sub_100178D5C((uint64_t)a2, v6, 6.0))
    {
      v7.i64[0] = *(void *)a2;
      int32x4_t v8 = vzip1q_s32(v7, v7);
      v8.i32[2] = *(void *)a2;
      int16x8_t v9 = (int16x8_t)vceqq_s32(v8, (int32x4_t)xmmword_101DB46C0);
      *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
      unsigned __int32 v15 = vmovn_s16(v9).u32[0];
      BOOL v16 = v7.i32[1] == 0;
      char v17 = (*a2 == 0) & ~sub_100178D5C((uint64_t)a2, v6, 6.0);
      char v18 = (*a2 == 1) & ~sub_100178D5C((uint64_t)a2, v6, 6.0);
      char v19 = (*a2 == 3) & ~sub_100178D5C((uint64_t)a2, v6, 6.0);
      BOOL v20 = sub_100178CCC(a2, v6);
      *(double *)long long buf = a3;
      int v14 = 4;
      sub_1015151D8();
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    char v10 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffMapMatchingRouteHint", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_1023217E0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedMapMatchingRouteHint(const CLMapsRouteHintData &, const CFAbsoluteTime)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_10134DC00(uint64_t a1, long long *a2, double a3)
{
  if (*(unsigned char *)(a1 + 261))
  {
    long long v9 = *a2;
    double v7 = a3;
    int v8 = 7;
    sub_101514460(a1, &v7);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    uint64_t v4 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134283777;
      uint64_t v15 = *((void *)&v9 + 1);
      __int16 v16 = 2048;
      double v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedCMWifiModelOutput,wifiModelOutputEvidence,%{private}f,currentTime,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_1023217E0);
      }
      int v10 = 134283777;
      uint64_t v11 = *((void *)&v9 + 1);
      __int16 v12 = 2048;
      double v13 = a3;
LABEL_19:
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedCMWifiModelOutput(const CLOutdoorEstimator_Type::CMWiFiModelOutput &, const CFAbsoluteTime)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    int v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMWifiModelOutput", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_1023217E0);
      }
      LOWORD(v7) = 0;
      goto LABEL_19;
    }
  }
}

void sub_10134DEC4(uint64_t a1, uint64_t a2, double a3)
{
  if (*(unsigned char *)(a1 + 263))
  {
    sub_1015125D4(a1, (double *)a2);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    int v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      int v8 = *(unsigned __int8 *)(a2 + 32);
      uint64_t v9 = *(void *)(a2 + 40);
      *(_DWORD *)long long buf = 134284545;
      uint64_t v13 = v6;
      __int16 v14 = 2049;
      uint64_t v15 = v7;
      __int16 v16 = 1025;
      int v17 = v8;
      __int16 v18 = 1025;
      int v19 = v9;
      __int16 v20 = 2048;
      double v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedAlsEvidence,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}d,currentTime,%f", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1)
      {
LABEL_16:
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedAlsEvidence(const CLOutdoorEstimator_Type::AlsEvidence &, const CFAbsoluteTime)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023217E0);
    }
    int v10 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffAlsEvidence", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

void sub_10134E1CC(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

BOOL sub_10134E1FC()
{
  HIDWORD(v0) = -1030792151 * rand() + 85899344;
  LODWORD(v0) = HIDWORD(v0);
  return (v0 >> 2) < 0x28F5C29;
}

uint64_t sub_10134E23C(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v16[0] = @"numAssociatedApCentroids";
  v17[0] = +[NSNumber numberWithUnsignedLong:a4];
  v16[1] = @"averageCentroidAgeInHours";
  LODWORD(v8) = llround(a1);
  v17[1] = +[NSNumber numberWithInt:v8];
  v16[2] = @"oldestCentroidAgeInHours";
  LODWORD(v9) = llround(a2);
  v17[2] = +[NSNumber numberWithInt:v9];
  v16[3] = @"isAssociated";
  v17[3] = +[NSNumber numberWithBool:a5];
  int v10 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:4];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102321800);
  }
  uint64_t v11 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Submitting CoreAnalytics event for the associated AP centroid database, %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102321800);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApCentroidDatabaseAnalytics::submitMetrics(const size_t, const double, const double, const BOOL)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_10134E4E0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10134E4E8(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

BOOL sub_10134E518(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v7 = *(void *)(a1 + 248);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road", (uint8_t *)buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
LABEL_56:
    }
      dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_54;
  }
  *(_DWORD *)(a1 + 520) = 1;
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 160);
  *(void *)(a1 + 392) = v3;
  *(void *)(a1 + 400) = v4;
  double v5 = *(float *)(a1 + 144);
  *(double *)(a1 + 408) = v5;
  *(void *)(a1 + 528) = v3;
  *(void *)(a1 + 536) = v4;
  *(double *)(a1 + 544) = v5;
  *(void *)(a1 + 360) = *(void *)(v2 + 20);
  if (*(char *)(v2 + 71) < 0) {
    sub_1000DC48C(buf, *(void **)(v2 + 48), *(void *)(v2 + 56));
  }
  else {
    buf[0] = *(std::string *)(v2 + 48);
  }
  std::string::operator=((std::string *)(a1 + 368), buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(void *)(a1 + 120);
  *(void *)(a1 + 352) = *(void *)v8;
  *(unsigned char *)(a1 + 601) = *(unsigned char *)(v8 + 19);
  LOBYTE(v8) = *(unsigned char *)(v8 + 18);
  uint64_t v9 = *(void *)(a1 + 168);
  float v10 = *(double *)(a1 + 176);
  *(float *)(a1 + 416) = v10;
  *(unsigned char *)(a1 + 602) = v8;
  *(void *)(a1 + 512) = v9;
  for (uint64_t i = *(void *)(a1 + 208); i != *(void *)(a1 + 216); i += 72)
  {
    if (*(_DWORD *)(i + 64) == 1)
    {
      *(void *)(a1 + 472) = *(void *)(i + 16);
      *(void *)(a1 + 480) = *(void *)(i + 56);
      if (*(unsigned char *)(a1 + 712)) {
        *(void *)(a1 + 408) = *(void *)(a1 + 344);
      }
      *(unsigned char *)(a1 + 505) = *(unsigned char *)(a1 + 745);
      uint64_t v32 = 0;
      double v33 = 0.0;
      sub_101172040((double *)(a1 + 672), &v33, (double *)&v32, *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 312), *(float *)(a1 + 144), *(double *)(a1 + 296), *(double *)(a1 + 304));
      uint64_t v16 = *(void *)(a1 + 120);
      BOOL v14 = v16 != 0;
      if (v16)
      {
        uint64_t v17 = *(int *)(v16 + 20);
        double v18 = 0.5;
        double v19 = 1.0;
        if (v17 == 9 || (int v20 = *(_DWORD *)(v16 + 72), v20 == 6))
        {
          double v21 = 1.0;
        }
        else
        {
          double v21 = 1.0;
          if (v20 != 255)
          {
            double v22 = *(double *)(v16 + 96);
            if (v22 < 0.000001)
            {
              double v22 = 1.0;
              if ((v17 & 0xFFFFFFFE) != 8)
              {
                int v23 = *(unsigned __int8 *)(v16 + 16);
                if (v17 > 7)
                {
                  double v22 = dbl_101D1C3C0[v23 == 0];
                }
                else
                {
                  if (v23) {
                    unint64_t v24 = (double *)&unk_101DB4740;
                  }
                  else {
                    unint64_t v24 = (double *)&unk_101DB4780;
                  }
                  double v22 = v24[v17];
                }
              }
            }
            double v21 = v22 + 1.0;
            double v18 = v22 * 0.5 + 1.0;
          }
        }
        *(double *)(a1 + 664) = v21;
        if (v33 >= 0.0) {
          double v19 = -1.0;
        }
        double v29 = v33 + v19 * v18;
        *(void *)(a1 + 488) = v32;
        *(double *)(a1 + 496) = v29;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        double v25 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          std::string::size_type v26 = *(void *)(a1 + 248);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to determine roadWidth when filling crumb", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v27 = *(void *)(a1 + 248);
          int v34 = 134349056;
          uint64_t v35 = v27;
          id v28 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "%s\n", (const char *)v28);
          if (v28 != buf) {
            free(v28);
          }
        }
      }
      return v14;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  __int16 v12 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v13 = *(void *)(a1 + 248);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,RawGPSScore not available", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_56;
    }
LABEL_54:
    uint64_t v30 = *(void *)(a1 + 248);
    int v34 = 134349056;
    uint64_t v35 = v30;
    uint64_t v31 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "%s\n", (const char *)v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  return 0;
}

void sub_10134EB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10134EB80(uint64_t *a1, double *a2, double *a3, int a4)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    *a2 = 0.0;
    double v9 = 0.0;
    goto LABEL_12;
  }
  uint64_t v5 = *(int *)(v4 + 20);
  if (v5 == 9 || ((v6 = *(_DWORD *)(v4 + 72), v6 != 255) ? (BOOL v7 = v6 == 6) : (BOOL v7 = 1), v7))
  {
    double v8 = dbl_101DADDE0[*(unsigned char *)(v4 + 16) == 0];
    if (a4) {
      double v8 = 1.0;
    }
    *a2 = v8;
    double v9 = v8 * 0.5;
    goto LABEL_12;
  }
  double v11 = *(double *)(v4 + 96);
  *a2 = v11;
  if (v11 < 0.000001)
  {
    if ((v5 & 0xFFFFFFFE) == 8)
    {
      double v11 = dbl_101D1C3C0[*(unsigned char *)(v4 + 16) == 0];
      if (a4) {
        double v11 = 1.0;
      }
      goto LABEL_27;
    }
    if (*(unsigned char *)(v4 + 16))
    {
      if (v5 >= 8)
      {
        double v11 = 5.55000019;
        goto LABEL_27;
      }
      __int16 v12 = (double *)&unk_101DB4740;
    }
    else
    {
      if (v5 >= 8)
      {
        double v11 = 7.4000001;
        goto LABEL_27;
      }
      __int16 v12 = (double *)&unk_101DB4780;
    }
    double v11 = v12[v5];
LABEL_27:
    *a2 = v11;
  }
  *a3 = v11 * 0.5;
  if (!a4) {
    return v4 != 0;
  }
  *a2 = *a2 + 1.0;
  double v9 = *a3 + 1.0;
LABEL_12:
  *a3 = v9;
  return v4 != 0;
}

void sub_10134ECAC(double *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a2 + 504);
  if (*(unsigned char *)(a2 + 504))
  {
    if (!*(unsigned char *)(a3 + 504))
    {
      *a1 = 0.0;
      a1[1] = 0.0;
      a1[2] = 1.0;
    }
  }
  else if (*(unsigned char *)(a3 + 504))
  {
    *(_OWORD *)a1 = xmmword_101D82650;
    a1[2] = 0.0;
  }
  double v6 = *(double *)(a2 + 264);
  double v7 = -0.1;
  if (v6 >= 0.0)
  {
    double v8 = *(double *)(a3 + 264);
    if (v8 >= 0.0) {
      double v7 = vabdd_f64(v6, v8) * 0.1;
    }
  }
  if (v5) {
    BOOL v9 = *(unsigned char *)(a2 + 505) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    double v10 = v7;
  }
  else {
    double v10 = -v7;
  }
  double v11 = *a1;
  double v12 = a1[1] + v10;
  if (v9) {
    double v7 = -v7;
  }
  double v13 = fmin(fmax(a1[2] + v7, 0.0), 1.0);
  double v14 = fmin(fmax(v12, 0.0), 1.0);
  a1[1] = v14;
  a1[2] = v13;
  double v15 = v13 * *(double *)(a2 + 296) + v14 * *(double *)(a2 + 392);
  double v16 = v13 * *(double *)(a2 + 304) + v14 * *(double *)(a2 + 400);
  *a1 = v11 + 1.0;
  *(double *)(a2 + 392) = v15;
  *(double *)(a2 + 400) = v16;
  *(double *)(a2 + 568) = v15;
  *(double *)(a2 + 576) = v16;
  *(_DWORD *)(a2 + 520) = 3;
  if (v13 >= 1.0)
  {
    int v17 = 0;
  }
  else
  {
    if (v14 < 1.0) {
      goto LABEL_23;
    }
    int v17 = 1;
  }
  *(_DWORD *)(a2 + 520) = v17;
LABEL_23:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v18 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a2 + 248);
    uint64_t v21 = *((void *)a1 + 1);
    uint64_t v20 = *((void *)a1 + 2);
    double v22 = *a1;
    int v23 = *(_DWORD *)(a2 + 520);
    *(_DWORD *)long long buf = 134350080;
    uint64_t v26 = v19;
    __int16 v27 = 2050;
    uint64_t v28 = v20;
    __int16 v29 = 2050;
    uint64_t v30 = v21;
    __int16 v31 = 2050;
    double v32 = v22;
    __int16 v33 = 1026;
    int v34 = v23;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,fRawWeight,%{public}.2lf,fSnapWeight,%{public}.2lf,fTimeInMode,%{public}.2lf,snapType,%{public}d", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    unint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::MMPartialMatcher::getPartialMatchedSolution(MMSnapData &, const MMSnapData &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
}

BOOL sub_10134EFC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (*(void *)a2)
  {
    if (!a1[136])
    {
      uint64_t v5 = *(void *)(a2 + 8);
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      a1[136] = v3;
      double v6 = (std::__shared_weak_count *)a1[137];
      a1[137] = v5;
      if (v6) {
        sub_1000DB0A0(v6);
      }
    }
    unint64_t v7 = a1[134];
    if (v7 >= a1[135])
    {
      uint64_t v8 = sub_1011E03D4(a1 + 133, a2);
    }
    else
    {
      sub_1011E04FC((uint64_t)(a1 + 135), a1[134], a2);
      uint64_t v8 = v7 + 112;
      a1[134] = v7 + 112;
    }
    a1[134] = v8;
    double v12 = *(double *)(a2 + 48);
    if (v12 < *((double *)a1 + 129)) {
      *((double *)a1 + 129) = v12;
    }
    if (v12 > *((double *)a1 + 20)) {
      *((double *)a1 + 20) = v12;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    BOOL v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      double v10 = *(double *)a1;
      *(_DWORD *)long long buf = 134349056;
      double v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, null road when trying to add particles into candidate", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidate::addParticle(const CLParticleMapMatcherCommon::Particle &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return v3 != 0;
}

void sub_10134F220(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1072) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_10134F22C(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 1072);
  uint64_t v3 = *(void *)(a1 + 1064);
  if (v2 != v3)
  {
    uint64_t v6 = *(void *)(a1 + 1088);
    sub_10039C4B4((void *)v6);
    if (*(double *)(v6 + 40) <= 0.0)
    {
      double v14 = 0.0;
      double v16 = 1.0;
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 1072);
      uint64_t v8 = *(void *)(a1 + 1064);
      double v9 = 0.0;
      if (v7 != v8)
      {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 4);
        double v11 = 0.0;
        do
        {
          double v11 = v11 + *(double *)(v8 + 48);
          v8 += 112;
        }
        while (v8 != v7);
        double v9 = v11 / (double)(unint64_t)v10;
      }
      uint64_t v12 = *(void *)(a1 + 1088);
      sub_10039C4B4((void *)v12);
      double v13 = a2 / *(double *)(v12 + 40);
      if (v13 > 1.0) {
        double v13 = 1.0;
      }
      if (v9 - v13 >= 0.0) {
        double v14 = v9 - v13;
      }
      else {
        double v14 = 0.0;
      }
      double v15 = v9 + v13;
      if (v15 <= 1.0) {
        double v16 = v15;
      }
      else {
        double v16 = 1.0;
      }
    }
    int v17 = *(uint64_t **)(a1 + 1064);
    double v18 = *(uint64_t **)(a1 + 1072);
    if (v17 == v18)
    {
      uint64_t v27 = *(void *)(a1 + 1064);
    }
    else
    {
      do
      {
        double v19 = *((double *)v17 + 6);
        if (v19 >= v14 && v19 <= v16)
        {
          ++*(_DWORD *)(a1 + 120);
          if (*((double *)v17 + 7) > *(double *)(a1 + 64))
          {
            double v22 = *(double *)v17;
            uint64_t v21 = v17[1];
            if (v21) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
            }
            int v23 = *(std::__shared_weak_count **)(a1 + 16);
            *(double *)(a1 + 8) = v22;
            *(void *)(a1 + 16) = v21;
            if (v23) {
              sub_1000DB0A0(v23);
            }
            long long v24 = *((_OWORD *)v17 + 1);
            long long v25 = *((_OWORD *)v17 + 2);
            *(void *)(a1 + 56) = v17[6];
            *(_OWORD *)(a1 + 24) = v24;
            *(_OWORD *)(a1 + 40) = v25;
            long long v26 = *(_OWORD *)(v17 + 7);
            *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v17 + 65);
            *(_OWORD *)(a1 + 64) = v26;
            if (v17 != (uint64_t *)(a1 + 8)) {
              sub_1010003E4((char *)(a1 + 96), (char *)v17[11], v17[12], 0x8E38E38E38E38E39 * ((v17[12] - v17[11]) >> 3));
            }
          }
        }
        v17 += 14;
      }
      while (v17 != v18);
      uint64_t v27 = *(void *)(a1 + 1072);
      int v17 = *(uint64_t **)(a1 + 1064);
    }
    *(_DWORD *)(a1 + 124) = -1227133513 * ((unint64_t)(v27 - (void)v17) >> 4);
  }
  return v2 != v3;
}

BOOL sub_10134F43C(uint64_t a1, int *a2)
{
  BOOL v2 = *(unsigned char *)(a1 + 152) == 0;
  if (*(unsigned char *)(a1 + 152)) {
    BOOL v3 = *(unsigned char *)(a1 + 153) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return v2;
  }
  if (*(_DWORD *)(a1 + 124) == *(_DWORD *)(a1 + 1104))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 176);
      int v8 = *(_DWORD *)(a1 + 124);
      int v9 = *(_DWORD *)(a1 + 1104);
      int v10 = *a2;
      *(_DWORD *)long long buf = 134349824;
      uint64_t v66 = v7;
      __int16 v67 = 1026;
      *(_DWORD *)double v68 = v8;
      *(_WORD *)&v68[4] = 1026;
      *(_DWORD *)&v68[6] = v9;
      LOWORD(v69) = 1026;
      *(_DWORD *)((char *)&v69 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,ambiguityCase,combined,%{public}d,secondBestCombined,%{public}d,sigEnv,%{public}d", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 1044) <= (signed int)(-1227133513 * ((*(void *)(a1 + 1072) - *(void *)(a1 + 1064)) >> 4)))
  {
    if (*(double *)(a1 + 360) <= 0.0) {
      return 0;
    }
    double v21 = *(double *)(a1 + 272);
    if (v21 < 0.0 || (*a2 - 1) > 1) {
      return 0;
    }
    double v22 = *(double *)(a1 + 768);
    double v23 = *(double *)(a1 + 336);
    double v24 = fmod(v22 - v23, 360.0);
    if (v24 < 0.0) {
      double v24 = v24 + 360.0;
    }
    if (v24 > 180.0) {
      double v24 = v24 + -360.0;
    }
    if (v24 > 75.0)
    {
      sub_100142F58(v23 + v24 * 0.5);
      double v26 = v25;
      double v27 = fmod(*(double *)(a1 + 272) - v25, 360.0);
      if (v27 < 0.0) {
        double v27 = v27 + 360.0;
      }
      if (v27 <= 180.0) {
        double v28 = v27;
      }
      else {
        double v28 = v27 + -360.0;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v29 = fabs(v28);
      uint64_t v30 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = *(void *)(a1 + 176);
        uint64_t v32 = *(void *)(a1 + 272);
        uint64_t v33 = *(void *)(a1 + 336);
        uint64_t v34 = *(void *)(a1 + 768);
        *(_DWORD *)long long buf = 134350592;
        uint64_t v66 = v31;
        __int16 v67 = 2050;
        *(void *)double v68 = v32;
        *(_WORD *)&v68[8] = 2050;
        uint64_t v69 = v33;
        __int16 v70 = 2050;
        uint64_t v71 = v34;
        __int16 v72 = 2050;
        *(double *)int8x16_t v73 = v26;
        *(_WORD *)&v73[8] = 2050;
        *(double *)int8x16_t v74 = v29;
        *(_WORD *)&v74[8] = 1026;
        *(_DWORD *)&v74[10] = v29 < 10.0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,approxCourseOfTurningRoad,%{public}.2lf,turningCourseDiff,%{public}.2lf,outgoingCondition,%{public}d", buf, 0x44u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        unint64_t v64 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v64);
        if (v64 != (char *)buf) {
          free(v64);
        }
      }
      if (v29 < 10.0) {
        return 1;
      }
      double v21 = *(double *)(a1 + 272);
      double v22 = *(double *)(a1 + 768);
      double v23 = *(double *)(a1 + 336);
    }
    double v35 = fmod(v21 - v22, 360.0);
    if (v35 < 0.0) {
      double v35 = v35 + 360.0;
    }
    if (v35 > 180.0) {
      double v35 = v35 + -360.0;
    }
    double v36 = fabs(v35);
    double v37 = fmod(v21 - v23, 360.0);
    if (v37 < 0.0) {
      double v37 = v37 + 360.0;
    }
    if (v37 > 180.0) {
      double v37 = v37 + -360.0;
    }
    double v38 = fabs(v37);
    BOOL v39 = v38 >= 15.0 && v36 < 15.0;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v40 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = *(void *)(a1 + 176);
      uint64_t v42 = *(void *)(a1 + 272);
      uint64_t v43 = *(void *)(a1 + 336);
      uint64_t v44 = *(void *)(a1 + 768);
      int v45 = *a2;
      *(_DWORD *)long long buf = 134350848;
      uint64_t v66 = v41;
      __int16 v67 = 2050;
      *(void *)double v68 = v42;
      *(_WORD *)&v68[8] = 2050;
      uint64_t v69 = v43;
      __int16 v70 = 2050;
      uint64_t v71 = v44;
      __int16 v72 = 1026;
      *(_DWORD *)int8x16_t v73 = v36 < 15.0;
      *(_WORD *)&v73[4] = 1026;
      *(_DWORD *)&v73[6] = v38 < 15.0;
      *(_WORD *)int8x16_t v74 = 1026;
      *(_DWORD *)&v74[2] = v45;
      *(_WORD *)&v74[6] = 1026;
      *(_DWORD *)&v74[8] = v39;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,isCrumbCourseAlignedWithOutgoing,%{public}d,isCrumbCourseAlignedWithIncoming,%{public}d,sigEnv,%{public}d,outgoingCondition,%{public}d", buf, 0x42u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v63);
      if (v63 != (char *)buf) {
        free(v63);
      }
    }
    return v39;
  }
  double v12 = *(double *)(a1 + 336);
  double v13 = *(double *)(a1 + 768);
  double v14 = fmod(v12 - v13, 360.0);
  if (v14 < 0.0) {
    double v14 = v14 + 360.0;
  }
  if (v14 > 180.0) {
    double v14 = v14 + -360.0;
  }
  double v15 = fabs(v14);
  double v16 = *(double *)(a1 + 360);
  if (v16 <= 0.0 || (double v17 = *(double *)(a1 + 272), v17 < 0.0))
  {
    BOOL v18 = 0;
    goto LABEL_23;
  }
  double v46 = fmod(v17 - v13, 360.0);
  if (v46 < 0.0) {
    double v46 = v46 + 360.0;
  }
  if (v46 > 180.0) {
    double v46 = v46 + -360.0;
  }
  double v47 = fabs(v46);
  BOOL v48 = *(double *)(a1 + 1048) >= 7.5;
  BOOL v18 = v47 < 25.0;
  if (v47 < 25.0) {
    BOOL v48 = 1;
  }
  if (v48 && v15 >= 45.0 && v47 >= 25.0)
  {
    if (v16 < 20.0)
    {
      double v50 = fmod(v17 - v12, 360.0);
      BOOL v18 = 0;
      if (v50 < 0.0) {
        double v50 = v50 + 360.0;
      }
      if (v50 > 180.0) {
        double v50 = v50 + -360.0;
      }
      if (fabs(v50) < 10.0)
      {
        int v20 = 1;
        goto LABEL_88;
      }
      goto LABEL_23;
    }
    BOOL v18 = 0;
  }
  if (!v48)
  {
LABEL_87:
    int v20 = 0;
    goto LABEL_88;
  }
LABEL_23:
  if (*(double *)(a1 + 352) > 0.0)
  {
    double v19 = *(double *)(a1 + 264);
    if (v19 >= 0.0 && v19 < 0.001) {
      goto LABEL_87;
    }
  }
  int v20 = 0;
  if (!*(unsigned char *)(a1 + 396))
  {
LABEL_98:
    BOOL v2 = 1;
    goto LABEL_99;
  }
LABEL_88:
  if (*(double *)(a1 + 264) == 0.0 && !*(unsigned char *)(a1 + 396) && (v16 <= 0.0 || *(double *)(a1 + 272) < 0.0))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    long long v51 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v52 = *(void *)(a1 + 176);
      *(_DWORD *)long long buf = 134349056;
      uint64_t v66 = v52;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      __int16 v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
    }
    goto LABEL_98;
  }
  BOOL v2 = 0;
LABEL_99:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v53 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v54 = *(void *)(a1 + 176);
    uint64_t v55 = *(void *)(a1 + 336);
    uint64_t v56 = *(void *)(a1 + 768);
    uint64_t v57 = *(void *)(a1 + 272);
    uint64_t v58 = *(void *)(a1 + 1048);
    uint64_t v59 = *(void *)(a1 + 360);
    *(_DWORD *)long long buf = 134351360;
    uint64_t v66 = v54;
    __int16 v67 = 2050;
    *(void *)double v68 = v55;
    *(_WORD *)&v68[8] = 2050;
    uint64_t v69 = v56;
    __int16 v70 = 2050;
    uint64_t v71 = v57;
    __int16 v72 = 2050;
    *(void *)int8x16_t v73 = v58;
    *(_WORD *)&v73[8] = 1026;
    *(_DWORD *)int8x16_t v74 = v2;
    *(_WORD *)&v74[4] = 2050;
    *(void *)&v74[6] = v59;
    __int16 v75 = 1026;
    BOOL v76 = v15 >= 45.0;
    __int16 v77 = 1026;
    BOOL v78 = v18;
    __int16 v79 = 1026;
    int v80 = v20;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d", buf, 0x56u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v61 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v61);
    if (v61 != (char *)buf) {
      free(v61);
    }
  }
  return v2;
}

uint64_t sub_101350128(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *((void *)a3 + 1);
  if (!*a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v80 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_78;
      }
      goto LABEL_125;
    }
    return 0;
  }
  if (!*(void *)(a1 + 24))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v82 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, zero candidates,assessCandidates", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_78:
        *(_DWORD *)long long v105 = 134349056;
        *(void *)&v105[4] = v3;
        int8x16_t v81 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v81);
LABEL_102:
        if (v81 != buf) {
          free(v81);
        }
        return 0;
      }
LABEL_125:
      dispatch_once(&qword_102419430, &stru_1023218C0);
      goto LABEL_78;
    }
    return 0;
  }
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = 1;
  long long v91 = (void *)(a1 + 16);
  if (v4 != (void *)(a1 + 16))
  {
    long long v97 = (uint64_t **)(a1 + 8);
    __src = (char *)a3 + 152;
    std::string __str = (std::string *)(a3 + 8);
    while (sub_10134F22C((uint64_t)(v4 + 7), 40.0))
    {
      long long v7 = *a3;
      long long v8 = a3[1];
      long long v9 = a3[3];
      *((_OWORD *)v4 + 16) = a3[2];
      *((_OWORD *)v4 + 17) = v9;
      *((_OWORD *)v4 + 14) = v7;
      *((_OWORD *)v4 + 15) = v8;
      long long v10 = a3[4];
      long long v11 = a3[5];
      long long v12 = a3[7];
      *((_OWORD *)v4 + 20) = a3[6];
      *((_OWORD *)v4 + 21) = v12;
      *((_OWORD *)v4 + 18) = v10;
      *((_OWORD *)v4 + 19) = v11;
      std::string::operator=((std::string *)(v4 + 44), __str);
      memcpy(v4 + 47, __src, 0x118uLL);
      uint64_t v13 = v4[141];
      uint64_t v14 = v4[140];
      if (v13 == v14)
      {
        double v17 = 0.0;
      }
      else
      {
        uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v14) >> 4);
        double v16 = 0.0;
        do
        {
          double v16 = v16 + *(double *)(v14 + 48);
          v14 += 112;
        }
        while (v14 != v13);
        double v17 = v16 / (double)(unint64_t)v15;
      }
      double v104 = v17;
      if (!sub_101188D84(*a2, (uint64_t)(v4 + 28), (double **)v4 + 143, *((unsigned char *)v4 + 48), &v104, 1))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        double v84 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining mean road position", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          *(_DWORD *)long long v105 = 134349056;
          *(void *)&v105[4] = v3;
          int8x16_t v81 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v81);
          goto LABEL_102;
        }
        return 0;
      }
      double v18 = *((double *)v4 + 136);
      if (*((unsigned char *)v4 + 48)) {
        double v19 = 1.0 - v18;
      }
      else {
        double v19 = *((double *)v4 + 136);
      }
      uint64_t v20 = v4[143];
      sub_10039C4B4((void *)v20);
      double v21 = v19 * *(double *)(v20 + 40);
      uint64_t v101 = (uint64_t)&v101;
      uint64_t v102 = &v101;
      uint64_t v103 = 0;
      if (v21 <= 40.0)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t *, void *, void, uint64_t, double, double))(*(void *)*a2 + 72))(*a2, &v101, v4 + 143, *((unsigned __int8 *)v4 + 48), 1, v18, v21 + 1.0) & 1) == 0)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          unint64_t v87 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134349056;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsConnected returned false, searching for connected candidates", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            *(_DWORD *)long long v105 = 134349056;
            *(void *)&v105[4] = v3;
            double v86 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v86);
LABEL_123:
            if (v86 != buf) {
              free(v86);
            }
          }
LABEL_117:
          sub_1011BF5D0(&v101);
          return 0;
        }
        double v22 = v102;
        if (v102 != &v101)
        {
          int v96 = 0;
          int v23 = 0;
          long long v89 = v4 + 23;
          long long v90 = v4 + 146;
          long long v92 = v4 + 82;
          while (1)
          {
            double v24 = (std::__shared_weak_count *)v22[5];
            uint64_t v99 = v22[4];
            unint64_t v100 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_100FFD4D0(v105, &v99, *((unsigned __int8 *)v22 + 24));
            if (v100) {
              sub_1000DB0A0(v100);
            }
            if (!sub_100FFD530((uint64_t)v105, (uint64_t)(v4 + 4)))
            {
              BOOL v25 = v4[4] != *(void *)v105 || *((unsigned __int8 *)v4 + 48) == v105[16];
              if (v25) {
                ++v23;
              }
              if (sub_1011DFA10((uint64_t)v97, (uint64_t)v105))
              {
                *(void *)long long buf = v105;
                double v26 = sub_1013700DC(v97, (uint64_t)v105, (uint64_t)&unk_101D0B290, (long long **)buf);
                uint64_t v27 = v26[143];
                sub_10039C4B4((void *)v27);
                double v28 = (double **)(v26 + 143);
                if (*(double *)(v27 + 40) >= 40.0)
                {
                  uint64_t v31 = *v28;
                  sub_10039C4B4(*v28);
                  double v30 = 1.0 - 40.0 / v31[5];
                  if (v105[16])
                  {
                    double v30 = 0.0;
                    double v29 = 40.0 / v31[5];
                  }
                  else
                  {
                    double v29 = 1.0;
                  }
                }
                else
                {
                  double v29 = 1.0;
                  double v30 = 0.0;
                }
                uint64_t v32 = v26[140];
                uint64_t v33 = v26[141];
                if (v32 != v33)
                {
                  int v34 = 0;
                  double v35 = 0.0;
                  do
                  {
                    double v36 = *(double *)(v32 + 48);
                    int v37 = v36 >= v30 && v36 <= v29;
                    if (v36 < v30 || v36 > v29) {
                      double v36 = -0.0;
                    }
                    double v35 = v35 + v36;
                    v34 += v37;
                    v32 += 112;
                  }
                  while (v32 != v33);
                  if (v34)
                  {
                    ++*((_DWORD *)v4 + 274);
                    *((unsigned char *)v4 + 209) = 1;
                    int v38 = v34 - 1227133513 * ((v4[141] - v4[140]) >> 4);
                    if (v38 <= v96)
                    {
                      if (v38 == v96 || v38 > *((_DWORD *)v4 + 290))
                      {
                        _OWORD *v90 = *(_OWORD *)v105;
                        *((unsigned char *)v4 + 1184) = v105[16];
                        *((_DWORD *)v4 + 290) = v38;
                      }
                      int v38 = v96;
                    }
                    else
                    {
                      double v39 = v35 / (double)v34;
                      double v98 = v39;
                      _OWORD *v90 = *v89;
                      *((unsigned char *)v4 + 1184) = *((unsigned char *)v4 + 200);
                      *long long v89 = *(_OWORD *)v105;
                      int v40 = v105[16];
                      *((unsigned char *)v4 + 200) = v105[16];
                      *((_DWORD *)v4 + 275) = v34;
                      *((_DWORD *)v4 + 290) = *((_DWORD *)v4 + 45);
                      *((_DWORD *)v4 + 45) = v38;
                      *((double *)v4 + 139) = v39;
                      uint64_t v41 = *v28;
                      sub_10039C4B4(*v28);
                      double v42 = 1.0 - v39;
                      if (v40) {
                        double v42 = v39;
                      }
                      *((double *)v4 + 138) = v42 * v41[5];
                      long long v43 = a3[7];
                      long long v45 = a3[4];
                      long long v44 = a3[5];
                      *((_OWORD *)v4 + 47) = a3[6];
                      *((_OWORD *)v4 + 48) = v43;
                      *((_OWORD *)v4 + 45) = v45;
                      *((_OWORD *)v4 + 46) = v44;
                      long long v46 = *a3;
                      long long v47 = a3[1];
                      long long v48 = a3[3];
                      *((_OWORD *)v4 + 43) = a3[2];
                      *((_OWORD *)v4 + 44) = v48;
                      _OWORD *v92 = v46;
                      *((_OWORD *)v4 + 42) = v47;
                      std::string::operator=((std::string *)(v4 + 98), __str);
                      memcpy(v4 + 101, __src, 0x118uLL);
                      if (!sub_101188D84(*a2, (uint64_t)v92, v28, v105[16], &v98, 1))
                      {
                        if (qword_102419430 != -1) {
                          dispatch_once(&qword_102419430, &stru_1023218C0);
                        }
                        int8x16_t v85 = qword_102419438;
                        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)long long buf = 134349056;
                          *(void *)&uint8_t buf[4] = v3;
                          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419430 != -1) {
                            dispatch_once(&qword_102419430, &stru_1023218C0);
                          }
                          int v132 = 134349056;
                          uint64_t v133 = v3;
                          double v86 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v86);
                          goto LABEL_123;
                        }
                        goto LABEL_117;
                      }
                    }
                    int v96 = v38;
                  }
                }
              }
            }
            double v22 = (uint64_t *)v22[1];
            if (v22 == &v101) {
              goto LABEL_56;
            }
          }
        }
      }
      int v23 = 0;
      int v96 = 0;
LABEL_56:
      *((unsigned char *)v4 + 208) = v23 > 1;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v50 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v51 = v4[4];
        int v52 = *((unsigned __int8 *)v4 + 48);
        uint64_t v53 = v4[15];
        int v54 = *((unsigned __int8 *)v4 + 209);
        int v55 = *((unsigned __int8 *)v4 + 208);
        uint64_t v56 = v4[23];
        int v57 = *((unsigned __int8 *)v4 + 200);
        uint64_t v58 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[141] - v4[140]) >> 4);
        int v59 = *((_DWORD *)v4 + 275);
        int v61 = *((_DWORD *)v4 + 44);
        int v60 = *((_DWORD *)v4 + 45);
        int v62 = *((_DWORD *)v4 + 290);
        uint64_t v63 = v4[146];
        *(_DWORD *)long long buf = 134352641;
        *(void *)&uint8_t buf[4] = v3;
        __int16 v135 = 2049;
        uint64_t v136 = v51;
        __int16 v137 = 1026;
        int v138 = v52;
        __int16 v139 = 1026;
        int v140 = v61;
        __int16 v141 = 2050;
        uint64_t v142 = v53;
        __int16 v143 = 1026;
        int v144 = v54;
        __int16 v145 = 1026;
        int v146 = v55;
        __int16 v147 = 2049;
        uint64_t v148 = v56;
        __int16 v149 = 1026;
        int v150 = v57;
        __int16 v151 = 2050;
        uint64_t v152 = v58;
        __int16 v153 = 1026;
        int v154 = v59;
        __int16 v155 = 1026;
        int v156 = v60;
        __int16 v157 = 1026;
        int v158 = v96;
        __int16 v159 = 1026;
        int v160 = v62;
        __int16 v161 = 2049;
        uint64_t v162 = v63;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{public}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{public}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{public}d,secondCombinedWith,%{private}llu", buf, 0x74u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v66 = v4[4];
        int v67 = *((unsigned __int8 *)v4 + 48);
        uint64_t v68 = v4[15];
        int v69 = *((unsigned __int8 *)v4 + 209);
        int v70 = *((unsigned __int8 *)v4 + 208);
        uint64_t v71 = v4[23];
        int v72 = *((unsigned __int8 *)v4 + 200);
        uint64_t v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[141] - v4[140]) >> 4);
        int v74 = *((_DWORD *)v4 + 275);
        int v76 = *((_DWORD *)v4 + 44);
        int v75 = *((_DWORD *)v4 + 45);
        int v77 = *((_DWORD *)v4 + 290);
        uint64_t v78 = v4[146];
        *(_DWORD *)long long v105 = 134352641;
        *(void *)&v105[4] = v3;
        *(_WORD *)&v105[12] = 2049;
        *(void *)&v105[14] = v66;
        __int16 v106 = 1026;
        int v107 = v67;
        __int16 v108 = 1026;
        int v109 = v76;
        __int16 v110 = 2050;
        uint64_t v111 = v68;
        __int16 v112 = 1026;
        int v113 = v69;
        __int16 v114 = 1026;
        int v115 = v70;
        __int16 v116 = 2049;
        uint64_t v117 = v71;
        __int16 v118 = 1026;
        int v119 = v72;
        __int16 v120 = 2050;
        uint64_t v121 = v73;
        __int16 v122 = 1026;
        int v123 = v74;
        __int16 v124 = 1026;
        int v125 = v75;
        __int16 v126 = 1026;
        int v127 = v96;
        __int16 v128 = 1026;
        int v129 = v77;
        __int16 v130 = 2049;
        uint64_t v131 = v78;
        __int16 v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v79);
        if (v79 != buf) {
          free(v79);
        }
      }
      sub_1011BF5D0(&v101);
      unint64_t v64 = (void *)v4[1];
      if (v64)
      {
        do
        {
          long long v65 = v64;
          unint64_t v64 = (void *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          long long v65 = (void *)v4[2];
          BOOL v25 = *v65 == (void)v4;
          uint64_t v4 = v65;
        }
        while (!v25);
      }
      uint64_t v4 = v65;
      if (v65 == v91) {
        return 1;
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v83 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to determine best particle", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)long long v105 = 134349056;
      *(void *)&v105[4] = v3;
      int8x16_t v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v81);
      goto LABEL_102;
    }
    return 0;
  }
  return v5;
}

void sub_101351134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t sub_101351194(uint64_t *a1)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((sub_101351770(a1, (uint64_t)&v29, &v28) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    long long v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *a1;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v43 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly unable to find candidates,getSolutionCandidate", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v12 = *a1;
    int v30 = 134349056;
    uint64_t v31 = v12;
    goto LABEL_38;
  }
  uint64_t v2 = v29;
  if (!v29 || !*(void *)(v29 + 8))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *a1;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v43 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly, best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v16 = *a1;
    int v30 = 134349056;
    uint64_t v31 = v16;
LABEL_38:
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return 0;
  }
  uint64_t v3 = v28;
  if (v28)
  {
    if (*(void *)(v28 + 8))
    {
      sub_1011C9EF0((uint64_t *)(v29 + 8), (uint64_t)v26);
      sub_1011C9EF0((uint64_t *)(v3 + 8), (uint64_t)v24);
      if (v24[0] == v26[0]
        && v25 != v27
        && *(unsigned char *)(v3 + 153)
        && *(unsigned char *)(v2 + 153)
        && *(_DWORD *)(v3 + 124) == *(_DWORD *)(v2 + 124)
        && sub_100FFD530(v3 + 128, (uint64_t)v26)
        && sub_100FFD530(v2 + 128, (uint64_t)v24)
        && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 1072) - *(void *)(v3 + 1064)) >> 4) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v2 + 1072) - *(void *)(v2 + 1064)) >> 4)))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v4 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v5 = *a1;
          int v6 = -1227133513 * ((*(void *)(v2 + 1072) - *(void *)(v2 + 1064)) >> 4);
          int v7 = -1227133513 * ((*(void *)(v3 + 1072) - *(void *)(v3 + 1064)) >> 4);
          int v8 = *(_DWORD *)(v2 + 124);
          int v9 = *(_DWORD *)(v3 + 124);
          *(_DWORD *)long long buf = 134350336;
          uint64_t v43 = v5;
          __int16 v44 = 2050;
          uint64_t v45 = v26[0];
          __int16 v46 = 1026;
          int v47 = v6;
          __int16 v48 = 1026;
          int v49 = v7;
          __int16 v50 = 1026;
          int v51 = v8;
          __int16 v52 = 1026;
          int v53 = v9;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,overrode bestCandidate with alternate,roadID,%{public}lld,bestIncoming,%{public}d,altBestIncoming,%{public}d,bestCombined,%{public}d,altBestCombined,%{public}d", buf, 0x2Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v18 = *a1;
          int v19 = -1227133513 * ((*(void *)(v2 + 1072) - *(void *)(v2 + 1064)) >> 4);
          int v20 = -1227133513 * ((*(void *)(v3 + 1072) - *(void *)(v3 + 1064)) >> 4);
          int v21 = *(_DWORD *)(v2 + 124);
          int v22 = *(_DWORD *)(v3 + 124);
          int v30 = 134350336;
          uint64_t v31 = v18;
          __int16 v32 = 2050;
          uint64_t v33 = v26[0];
          __int16 v34 = 1026;
          int v35 = v19;
          __int16 v36 = 1026;
          int v37 = v20;
          __int16 v38 = 1026;
          int v39 = v21;
          __int16 v40 = 1026;
          int v41 = v22;
          int v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        return v3;
      }
    }
  }
  return v2;
}

void *sub_101351770(uint64_t *a1, uint64_t a2, void *a3)
{
  if (a1[3])
  {
    uint64_t result = sub_1013519F8(a1);
    *(void *)a2 = result;
    if (!result) {
      return result;
    }
    if (result[1])
    {
      *a3 = 0;
      int v7 = (uint64_t *)a1[1];
      if (v7 != a1 + 2)
      {
        int v8 = 0;
        do
        {
          sub_1011C9EF0((uint64_t *)(*(void *)a2 + 8), (uint64_t)buf);
          if (!sub_100FFD530((uint64_t)(v7 + 4), (uint64_t)buf))
          {
            int v9 = *((_DWORD *)v7 + 45);
            if (v9 > v8)
            {
              *a3 = v7 + 7;
              int v8 = v9;
            }
          }
          long long v10 = (uint64_t *)v7[1];
          if (v10)
          {
            do
            {
              uint64_t v11 = v10;
              long long v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              uint64_t v11 = (uint64_t *)v7[2];
              BOOL v12 = *v11 == (void)v7;
              int v7 = v11;
            }
            while (!v12);
          }
          int v7 = v11;
        }
        while (v11 != a1 + 2);
      }
      return (void *)(*(void *)a2 != 0);
    }
    return 0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v13 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *a1;
    *(_DWORD *)long long buf = 134349056;
    uint64_t v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getAlternateBestCandidate", buf, 0xCu);
  }
  BOOL v15 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v15)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::getBestAndAlternateBestCandidate(const MMCandidate *&, const MMCandidate *&) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return 0;
  }
  return result;
}

void *sub_1013519F8(uint64_t *a1)
{
  if (!a1[3])
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *a1;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getBestCandidate", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const MMCandidate *const CLParticleMM::MMCandidateVector::getBestCandidate() const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 0;
  }
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v3 = a1 + 2;
  if (v2 == a1 + 2) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = 0;
  do
  {
    if (*((_DWORD *)v2 + 45) > v5)
    {
      int v5 = *((_DWORD *)v2 + 45);
      uint64_t result = v2 + 7;
    }
    int v6 = (uint64_t *)v2[1];
    if (v6)
    {
      do
      {
        int v7 = v6;
        int v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        int v7 = (uint64_t *)v2[2];
        BOOL v8 = *v7 == (void)v2;
        uint64_t v2 = v7;
      }
      while (!v8);
    }
    uint64_t v2 = v7;
  }
  while (v7 != v3);
  return result;
}

double sub_101351C20(uint64_t *a1)
{
  if (a1[3])
  {
    uint64_t v2 = sub_101351194(a1);
    double v3 = 0.0;
    if (v2)
    {
      uint64_t v4 = (uint64_t *)(v2 + 8);
      if (*(void *)(v2 + 8))
      {
        int v5 = (uint64_t *)a1[1];
        if (v5 != a1 + 2)
        {
          do
          {
            sub_1011C9EF0(v4, (uint64_t)buf);
            BOOL v6 = sub_100FFD530((uint64_t)(v5 + 4), (uint64_t)buf);
            double v7 = *((double *)v5 + 15);
            if (v7 <= v3) {
              double v7 = v3;
            }
            if (!v6) {
              double v3 = v7;
            }
            BOOL v8 = (uint64_t *)v5[1];
            if (v8)
            {
              do
              {
                int v9 = v8;
                BOOL v8 = (uint64_t *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                int v9 = (uint64_t *)v5[2];
                BOOL v10 = *v9 == (void)v5;
                int v5 = v9;
              }
              while (!v10);
            }
            int v5 = v9;
          }
          while (v9 != a1 + 2);
        }
      }
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *a1;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getSecondBestCandidate", buf, 0xCu);
    }
    double v3 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "double CLParticleMM::MMCandidateVector::getBestParticleScoreForAlternateCandidate() const", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  return v3;
}

uint64_t sub_101351E84(double *a1, uint64_t *a2, double a3)
{
  sub_10135227C((uint64_t)a1);
  uint64_t v5 = *a2;
  uint64_t v18 = a2[1];
  if (*a2 == v18)
  {
LABEL_22:
    *a1 = a3;
    return 1;
  }
  BOOL v6 = (uint64_t **)(a1 + 1);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v17 = _Q0;
  while (1)
  {
    uint64_t v93 = *(void *)v5;
    uint64_t v12 = *(std::__shared_weak_count **)(v5 + 8);
    long long v94 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100FFD4D0(v95, &v93, *(unsigned __int8 *)(v5 + 20));
    if (v94) {
      sub_1000DB0A0(v94);
    }
    if (!sub_1011DFA10((uint64_t)v6, (uint64_t)v95)) {
      break;
    }
    v19[0] = (long long *)v95;
    uint64_t v13 = sub_1013700DC(v6, (uint64_t)v95, (uint64_t)&unk_101D0B290, v19);
    if (!sub_10134EFC8(v13 + 7, v5)) {
      return 0;
    }
LABEL_21:
    v5 += 112;
    if (v5 == v18) {
      goto LABEL_22;
    }
  }
  v19[0] = (long long *)0xBFF0000000000000;
  v19[1] = 0;
  int v20 = 0;
  int v21 = 0;
  __int16 v22 = 1;
  int v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  char v27 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  char v31 = 1;
  __int16 v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  long long v36 = v17;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0xBFF0000000000000;
  uint64_t v51 = 0;
  int v52 = 0;
  memset(&v49[32], 0, 32);
  __int16 v50 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  memset(v56, 0, 27);
  memset(&v56[32], 0, 48);
  long long v48 = 0u;
  memset(v49, 0, 30);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  unint64_t v58 = 0xBFF0000000000000;
  uint64_t v57 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0xBFF0000000000000;
  unint64_t v62 = 0xBFF0000000000000;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v65 = 0xBFF0000000000000;
  uint64_t v77 = 0;
  int v78 = 0;
  __int16 v76 = 0;
  memset(&v75[32], 0, 32);
  long long v81 = 0u;
  memset(v82, 0, 27);
  long long v79 = 0u;
  long long v80 = 0u;
  memset(&v82[32], 0, 48);
  long long v74 = 0u;
  memset(v75, 0, 30);
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v83 = 0;
  long long v84 = xmmword_101D82640;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  int v88 = 0;
  long long v87 = 0u;
  long long v85 = 0u;
  memset(v86, 0, sizeof(v86));
  char v91 = 1;
  int v92 = -1;
  if (sub_10134EFC8((uint64_t *)v19, v5))
  {
    v19[0] = *(long long **)&a3;
    v96[0] = (long long *)v95;
    uint64_t v14 = sub_1013700DC(v6, (uint64_t)v95, (uint64_t)&unk_101D0B290, v96);
    sub_101352300((uint64_t)(v14 + 7), (uint64_t)v19);
    if (*((void *)&v87 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v87 + 1));
    }
    v96[0] = (long long *)&v86[8];
    sub_10082B830((void ***)v96);
    if (SHIBYTE(v71) < 0) {
      operator delete(*((void **)&v70 + 1));
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(*((void **)&v44 + 1));
    }
    if ((void)v28)
    {
      *((void *)&v28 + 1) = v28;
      operator delete((void *)v28);
    }
    if (v20) {
      sub_1000DB0A0(v20);
    }
    goto LABEL_21;
  }
  if (*((void *)&v87 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v87 + 1));
  }
  v96[0] = (long long *)&v86[8];
  sub_10082B830((void ***)v96);
  if (SHIBYTE(v71) < 0) {
    operator delete(*((void **)&v70 + 1));
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(*((void **)&v44 + 1));
  }
  if ((void)v28)
  {
    *((void *)&v28 + 1) = v28;
    operator delete((void *)v28);
  }
  if (v20) {
    sub_1000DB0A0(v20);
  }
  return 0;
}

void sub_101352254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  long long v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    sub_1000DB0A0(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_10135227C(uint64_t a1)
{
  BOOL v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = &v6;
  uint64_t v1 = (void *)(a1 + 16);
  uint64_t v2 = (void *)(a1 + 8);
  sub_10136F520(a1 + 8, *(void **)(a1 + 16));
  double v3 = v6;
  *(v1 - 1) = &v6;
  *uint64_t v1 = v3;
  uint64_t v4 = v7;
  v1[1] = v7;
  if (v4)
  {
    v3[2] = v1;
    uint64_t v5 = &v6;
    BOOL v6 = 0;
    uint64_t v7 = 0;
    double v3 = 0;
  }
  else
  {
    void *v2 = v1;
  }
  sub_10136F520((uint64_t)&v5, v3);
}

uint64_t sub_101352300(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 64) = v9;
  if (a1 != a2) {
    sub_1010003E4((char *)(a1 + 96), *(char **)(a2 + 96), *(void *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  long long v11 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  long long v12 = *(_OWORD *)(a2 + 248);
  long long v13 = *(_OWORD *)(a2 + 264);
  long long v14 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v13;
  *(_OWORD *)(a1 + 280) = v14;
  *(_OWORD *)(a1 + 248) = v12;
  long long v15 = *(_OWORD *)(a2 + 168);
  long long v16 = *(_OWORD *)(a2 + 184);
  long long v17 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v17;
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x118uLL);
  long long v18 = *(_OWORD *)(a2 + 648);
  long long v20 = *(_OWORD *)(a2 + 600);
  long long v19 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v18;
  *(_OWORD *)(a1 + 600) = v20;
  *(_OWORD *)(a1 + 616) = v19;
  long long v21 = *(_OWORD *)(a2 + 712);
  long long v23 = *(_OWORD *)(a2 + 664);
  long long v22 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v21;
  *(_OWORD *)(a1 + 664) = v23;
  *(_OWORD *)(a1 + 680) = v22;
  std::string::operator=((std::string *)(a1 + 728), (const std::string *)(a2 + 728));
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x118uLL);
  long long v24 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v24;
  if (a1 != a2) {
    sub_10137033C((uint64_t *)(a1 + 1064), *(uint64_t **)(a2 + 1064), *(uint64_t **)(a2 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 4));
  }
  uint64_t v25 = *(void *)(a2 + 1088);
  uint64_t v26 = *(void *)(a2 + 1096);
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1088) = v25;
  char v27 = *(std::__shared_weak_count **)(a1 + 1096);
  *(void *)(a1 + 1096) = v26;
  if (v27) {
    sub_1000DB0A0(v27);
  }
  long long v28 = *(_OWORD *)(a2 + 1104);
  long long v29 = *(_OWORD *)(a2 + 1120);
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1120) = v29;
  *(_OWORD *)(a1 + 1104) = v28;
  return a1;
}

uint64_t sub_1013524EC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1096);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  BOOL v6 = (void **)(a1 + 1064);
  sub_10082B830(&v6);
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  double v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_101352570(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(unsigned char *)(a2 + 80) = 0;
  double v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    double v5 = 0.0;
    do
    {
      double v6 = *((double *)v3 + 7);
      if (v6 > v5)
      {
        double v8 = *(double *)v3;
        uint64_t v7 = v3[1];
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        long long v9 = *(std::__shared_weak_count **)(a2 + 8);
        *(double *)a2 = v8;
        *(void *)(a2 + 8) = v7;
        if (v9) {
          sub_1000DB0A0(v9);
        }
        long long v10 = *((_OWORD *)v3 + 1);
        long long v11 = *((_OWORD *)v3 + 2);
        *(void *)(a2 + 48) = v3[6];
        *(_OWORD *)(a2 + 16) = v10;
        *(_OWORD *)(a2 + 32) = v11;
        long long v12 = *(_OWORD *)(v3 + 7);
        *(_OWORD *)(a2 + 65) = *(_OWORD *)((char *)v3 + 65);
        *(_OWORD *)(a2 + 56) = v12;
        if (v3 != (uint64_t *)a2) {
          sub_1010003E4((char *)(a2 + 88), (char *)v3[11], v3[12], 0x8E38E38E38E38E39 * ((v3[12] - v3[11]) >> 3));
        }
        double v5 = v6;
      }
      v3 += 14;
    }
    while (v3 != v4);
  }
}

void sub_10135269C(_Unwind_Exception *a1)
{
  sub_100FFFC10(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013526B0(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v17 = a1[1];
    long long v11 = (void *)v17;
    return -1227133513 * ((unint64_t)(v4 - v3) >> 4)
         + 1227133513 * (((unint64_t)v11 - v17) >> 4);
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  do
  {
    if (!*(void *)v9)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v13 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        double v20 = a3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle road is null while eliminateParticlesWithRoadKey", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "int CLParticleMM::MMParticleVector::eliminateParticlesWithRoadKey(const CFAbsoluteTime, const CLParticleMapMatcherCommon::RoadKey)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1013705BC((uint64_t)buf, (long long *)(v9 + 112), (long long *)a1[1], v9);
      long long v11 = v14;
      for (uint64_t i = (void *)a1[1]; i != v11; sub_10082B8C8(v8, i))
        i -= 14;
      goto LABEL_16;
    }
    sub_1011C9EF0((uint64_t *)v9, (uint64_t)buf);
    if (sub_100FFD530((uint64_t)buf, a2))
    {
      sub_1013705BC((uint64_t)buf, (long long *)(v9 + 112), (long long *)a1[1], v9);
      long long v11 = v10;
      for (j = (void *)a1[1]; j != v11; sub_10082B8C8(v8, j))
        j -= 14;
LABEL_16:
      a1[1] = (uint64_t)v11;
      continue;
    }
    v9 += 112;
    long long v11 = (void *)a1[1];
  }
  while ((void *)v9 != v11);
  uint64_t v17 = *a1;
  return -1227133513 * ((unint64_t)(v4 - v3) >> 4)
       + 1227133513 * (((unint64_t)v11 - v17) >> 4);
}

BOOL sub_101352988(uint64_t *a1, double a2)
{
  uint64_t v3 = (double *)*a1;
  uint64_t v4 = (double *)a1[1];
  if ((double *)*a1 == v4)
  {
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    do
    {
      v3[7] = 0.0;
      v3[8] = 0.0;
      v3[9] = 0.0;
      uint64_t v7 = *((void *)v3 + 11);
      uint64_t v8 = *((void *)v3 + 12);
      double v9 = 0.0;
      if (v7 != v8)
      {
        double v10 = 0.0;
        do
        {
          if (*(_DWORD *)(v7 + 64) != 2)
          {
            double v11 = *(double *)(v7 + 24);
            double v12 = *(double *)v7 * v11;
            if (v9 > 0.0)
            {
              double v13 = log(v9);
              long double v14 = log(v12);
              double v12 = exp(v13 + v14);
            }
            v3[7] = v12;
            double v10 = v10 + *(double *)(v7 + 16) * v11;
            v3[9] = v10;
            double v9 = v12;
          }
          v7 += 72;
        }
        while (v7 != v8);
      }
      double v6 = v6 + v9;
      v3 += 14;
    }
    while (v3 != v4);
    if (v6 > 0.0)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = a1[1];
      if (*a1 != v16)
      {
        uint64_t v17 = *a1;
        do
        {
          *(double *)(v17 + 64) = *(double *)(v17 + 56) / v6;
          v17 += 112;
        }
        while (v17 != v16);
        if (v15 != v16)
        {
          double v18 = 0.0;
          do
          {
            sub_101352D10(v15);
            uint64_t v19 = *(void *)(v15 + 88);
            uint64_t v20 = *(void *)(v15 + 96);
            if (v19 == v20) {
              goto LABEL_26;
            }
            double v21 = 0.0;
            double v22 = 0.0;
            do
            {
              if (*(_DWORD *)(v19 + 64) == 2)
              {
                double v23 = *(double *)(v19 + 24);
                double v22 = v22 + *(double *)v19 * v23;
                double v21 = v21 + *(double *)(v19 + 16) * v23;
              }
              v19 += 72;
            }
            while (v19 != v20);
            if (v22 <= 0.0)
            {
LABEL_26:
              double v22 = *(double *)(v15 + 56);
            }
            else
            {
              long double v24 = *(double *)(v15 + 56);
              if (v24 > 0.0)
              {
                double v25 = log(v24);
                long double v26 = log(v22);
                double v22 = exp(v26 + v25);
              }
              *(double *)(v15 + 56) = v22;
              *(double *)(v15 + 72) = v21 + *(double *)(v15 + 72);
            }
            double v18 = v18 + v22;
            v15 += 112;
          }
          while (v15 != v16);
          if (v18 > 0.0)
          {
            uint64_t v27 = *a1;
            uint64_t v28 = a1[1];
            while (v27 != v28)
            {
              *(double *)(v27 + 64) = *(double *)(v27 + 56) / v18;
              v27 += 112;
            }
            return 1;
          }
        }
      }
      return 0;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v29 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349312;
    double v33 = a2;
    __int16 v34 = 2050;
    double v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to normalizeLikelihoods, negative/zero totalScore after regular update,%{public}.8lf", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    char v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoods(const CFAbsoluteTime, BOOL)", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
    return 0;
  }
  return result;
}

uint64_t sub_101352D10(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 88);
  uint64_t v2 = *(void *)(result + 96);
  if (v1 != v2)
  {
    double v3 = 0.0;
    uint64_t v4 = *(void *)(result + 88);
    do
    {
      double v5 = *(double *)(v4 + 24);
      if (*(_DWORD *)(v4 + 64) != 2) {
        double v5 = -0.0;
      }
      double v3 = v3 + v5;
      v4 += 72;
    }
    while (v4 != v2);
    BOOL v6 = (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    BOOL v7 = ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v3 >= 0.0)
    {
      BOOL v7 = 0;
      BOOL v6 = 0;
    }
    if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
      BOOL v6 = 1;
    }
    int v8 = (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v6;
    if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
      int v8 = 1;
    }
    if (((v8 | v7) & 1) == 0)
    {
      while (v1 != v2)
      {
        if (*(_DWORD *)(v1 + 64) == 2) {
          *(double *)(v1 + 24) = *(double *)(v1 + 24) / v3;
        }
        v1 += 72;
      }
    }
  }
  return result;
}

BOOL sub_101352DD0(uint64_t *a1, double a2)
{
  double v5 = a1 + 3;
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = (uint64_t)v4;
    operator delete(v4);
  }
  uint64_t *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  sub_10031FC98((void **)v5, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4));
  a1[7] = 0xBFF0000000000000;
  if (!sub_101352988(a1, a2))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    long double v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v28 = a2;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to computeLikelihoods", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_40:
      long double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return 0;
    }
LABEL_44:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_40;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7)
  {
    double v10 = 0.0;
  }
  else
  {
    int v8 = a1 + 5;
    double v9 = (float *)a1[4];
    double v10 = 0.0;
    double v11 = 0.0;
    do
    {
      double v12 = *(double *)(v6 + 64);
      double v11 = v11 + v12;
      float v13 = v11;
      if ((unint64_t)v9 >= *v8)
      {
        uint64_t v15 = (float *)*v5;
        uint64_t v16 = ((uint64_t)v9 - *v5) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v18 = *v8 - (void)v15;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)sub_10017EA34((uint64_t)(a1 + 5), v19);
          uint64_t v15 = (float *)a1[3];
          double v9 = (float *)a1[4];
        }
        else
        {
          uint64_t v20 = 0;
        }
        double v21 = (float *)&v20[4 * v16];
        float *v21 = v13;
        long double v14 = v21 + 1;
        while (v9 != v15)
        {
          int v22 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        a1[3] = (uint64_t)v21;
        a1[4] = (uint64_t)v14;
        a1[5] = (uint64_t)&v20[4 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        float *v9 = v13;
        long double v14 = v9 + 1;
      }
      double v10 = v10 + v12 * v12;
      a1[4] = (uint64_t)v14;
      v6 += 112;
      double v9 = v14;
    }
    while (v6 != v7);
    if (v10 > 0.0)
    {
      *((double *)a1 + 7) = 1.0 / v10;
      return 1;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v25 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349312;
    double v28 = a2;
    __int16 v29 = 2050;
    double v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,invalid Neffsum,%{public}.3lf", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }
  return result;
}

uint64_t sub_101353268(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - *(void *)a1;
  if (v4 == *(void *)a1) {
    return 1;
  }
  if (sub_101352DD0((uint64_t *)a1, a4))
  {
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 4);
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    *(_DWORD *)long long buf = 0;
    sub_100D0C2C0(&__p, v10, buf);
    unint64_t v13 = 0x9249249249249249 * ((v11 - v12) >> 4) + a2;
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v15 = random();
        uint64_t v16 = *(float **)(a1 + 24);
        unint64_t v17 = *(float **)(a1 + 32);
        if (v17 != v16)
        {
          unint64_t v18 = v17 - v16;
          unint64_t v17 = *(float **)(a1 + 24);
          do
          {
            unint64_t v19 = v18 >> 1;
            uint64_t v20 = &v17[v18 >> 1];
            float v22 = *v20;
            double v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (v22 < (float)((float)v15 * 4.6566e-10)) {
              unint64_t v17 = v21;
            }
            else {
              unint64_t v18 = v19;
            }
          }
          while (v18);
        }
        ++*(_DWORD *)(__p + (((char *)v17 - (char *)v16) << 30 >> 30));
      }
    }
    uint64_t v24 = *(void *)a1;
    uint64_t v23 = *(void *)(a1 + 8);
    if (*(void *)a1 != v23)
    {
      unint64_t v25 = 0;
      uint64_t v26 = __p;
      do
      {
        if (v25 >= (*((void *)&__p + 1) - v26) >> 2) {
          break;
        }
        if (*(int *)(v26 + 4 * v25) >= 1)
        {
          int v27 = 0;
          unint64_t v28 = a3[1];
          do
          {
            if (v28 >= a3[2])
            {
              unint64_t v28 = sub_1011E03D4(a3, v24);
            }
            else
            {
              sub_1011E04FC((uint64_t)(a3 + 2), v28, v24);
              v28 += 112;
              a3[1] = v28;
            }
            a3[1] = v28;
            ++v27;
            uint64_t v26 = __p;
          }
          while (v27 < *(_DWORD *)(__p + 4 * v25));
          uint64_t v23 = *(void *)(a1 + 8);
        }
        v24 += 112;
        ++v25;
      }
      while (v24 != v23);
    }
    unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4);
    BOOL v30 = v29 > a2;
    BOOL v31 = v29 <= a2;
    if (v30)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      unint64_t v39 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349312;
        double v44 = a4;
        __int16 v45 = 1026;
        LODWORD(v46) = v29;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected number of particles after resampling,%{public}d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_44;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "%s\n", v37);
    }
    else
    {
      uint64_t v32 = *(void *)a1;
      *(void *)a1 = *a3;
      *a3 = v32;
      uint64_t v33 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = a3[1];
      a3[1] = v33;
      uint64_t v34 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = a3[2];
      a3[2] = v34;
      *(unsigned char *)(a1 + 48) = 1;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v35 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v36 = *(void *)(a1 + 56);
        *(_DWORD *)long long buf = 134349312;
        double v44 = a4;
        __int16 v45 = 2050;
        uint64_t v46 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Resampled,Neff,%{public}lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_44;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "%s\n", v37);
    }
    if (v37 != (char *)buf) {
      free(v37);
    }
LABEL_44:
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    return v31;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v38 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349056;
    double v44 = a4;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute likelihoods and csw vector", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    LODWORD(__p) = 134349056;
    *(double *)((char *)&__p + 4) = a4;
    long long v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  return 0;
}

void sub_1013538F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101353934(double *a1, uint64_t a2, double *a3, uint64_t a4)
{
  if (*(void *)a3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)long long buf = 0;
    v27[0] = 0.0;
    sub_101172040(a1, (double *)buf, v27, a3[4], a3[5], *(double *)(a2 + 96), *((float *)a3 + 6), *(double *)(a2 + 80), *(double *)(a2 + 88));
    double v8 = *a3;
    BOOL v9 = *(void *)a3 != 0;
    if (*(void *)a3)
    {
      uint64_t v10 = *(int *)(*(void *)&v8 + 20);
      double v11 = 0.5;
      if (v10 != 9)
      {
        int v12 = *(_DWORD *)(*(void *)&v8 + 72);
        if (v12 != 6 && v12 != 255)
        {
          double v13 = *(double *)(*(void *)&v8 + 96);
          if (v13 < 0.000001)
          {
            double v13 = 1.0;
            if ((v10 & 0xFFFFFFFE) != 8)
            {
              int v14 = *(unsigned __int8 *)(*(void *)&v8 + 16);
              if (v10 > 7)
              {
                double v13 = dbl_101D1C3C0[v14 == 0];
              }
              else
              {
                if (v14) {
                  uint64_t v15 = (double *)&unk_101DB4740;
                }
                else {
                  uint64_t v15 = (double *)&unk_101DB4780;
                }
                double v13 = v15[v10];
              }
            }
          }
          double v11 = v13 * 0.5 + 1.0;
        }
      }
      double v20 = a3[4];
      double v21 = a3[5];
      double v25 = v21;
      double v26 = v20;
      if (*(double *)buf < 0.0) {
        double v11 = -v11;
      }
      sub_10005B780(a1, &v26, &v25, v20, v21, *(double *)(a2 + 96), *((float *)a3 + 6), v11);
      sub_1000F17A8(a1, (double *)(a4 + 40), (double *)(a4 + 32), (double *)(a4 + 48), v26, v25, *(double *)(a2 + 96), *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
      if (*(unsigned char *)(a2 + 40))
      {
        double v22 = *(double *)(a2 + 104);
        if (v22 >= 0.0 && *(double *)(a2 + 120) > 0.0)
        {
          double v23 = fmod(v22 - *((float *)a3 + 6), 360.0);
          if (v23 < 0.0) {
            double v23 = v23 + 360.0;
          }
          if (v23 > 180.0) {
            double v23 = v23 + -360.0;
          }
          *(double *)(a4 + 56) = fabs(v23);
        }
      }
      sub_10053B11C(a2, a4);
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a2 + 200);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,NULL road when computing score", buf, 0xCu);
    }
    BOOL v9 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v18 = *(void *)(a2 + 200);
      LODWORD(v27[0]) = 134349056;
      *(void *)((char *)v27 + 4) = v18;
      unint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::calculateScoreAndVarFactor(const CLParticleMapMatcherCommon::CLMMMeasurementData &, const CLMapGeometry::DistanceQueryResult &, CLMapDataUtil::MapMatcherScore &)", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
      return 0;
    }
  }
  return v9;
}

BOOL sub_101353CB8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == v3) {
    return 0;
  }
  while (1)
  {
    long long v31 = 0uLL;
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0x3FF0000000000000;
    long long v33 = 0u;
    long long v34 = 0u;
    LODWORD(v35) = 0;
    BOOL result = sub_101353934((double *)a1, a3, (double *)v3, (uint64_t)&v31);
    if (!result) {
      break;
    }
    LODWORD(v35) = a2;
    *((void *)&v32 + 1) = *(void *)(a3 + 128);
    unint64_t v9 = *(void *)(v3 + 104);
    unint64_t v10 = *(void *)(v3 + 96);
    if (v10 >= v9)
    {
      uint64_t v15 = *(void *)(v3 + 88);
      unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v15) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x38E38E38E38E38ELL) {
        sub_1001D7FD4();
      }
      unint64_t v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v15) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x1C71C71C71C71C7) {
        unint64_t v19 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        double v20 = (char *)sub_10021D4B8(v3 + 104, v19);
      }
      else {
        double v20 = 0;
      }
      double v21 = &v20[72 * v16];
      *(_OWORD *)double v21 = v31;
      long long v22 = v32;
      long long v23 = v33;
      long long v24 = v34;
      *((void *)v21 + 8) = v35;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      *((_OWORD *)v21 + 1) = v22;
      double v26 = *(char **)(v3 + 88);
      double v25 = *(char **)(v3 + 96);
      int v27 = v21;
      if (v25 != v26)
      {
        do
        {
          *(_OWORD *)(v27 - 72) = *(_OWORD *)(v25 - 72);
          long long v28 = *(_OWORD *)(v25 - 56);
          long long v29 = *(_OWORD *)(v25 - 40);
          long long v30 = *(_OWORD *)(v25 - 24);
          *((_DWORD *)v27 - 2) = *((_DWORD *)v25 - 2);
          *(_OWORD *)(v27 - 24) = v30;
          *(_OWORD *)(v27 - 40) = v29;
          *(_OWORD *)(v27 - 56) = v28;
          v27 -= 72;
          v25 -= 72;
        }
        while (v25 != v26);
        double v25 = *(char **)(v3 + 88);
      }
      int v14 = v21 + 72;
      *(void *)(v3 + 88) = v27;
      *(void *)(v3 + 96) = v21 + 72;
      *(void *)(v3 + 104) = &v20[72 * v19];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v10 = v31;
      long long v11 = v32;
      long long v12 = v33;
      long long v13 = v34;
      *(void *)(v10 + 64) = v35;
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)(v10 + 16) = v11;
      int v14 = (char *)(v10 + 72);
    }
    *(void *)(v3 + 96) = v14;
    sub_1011DECAC((double *)v3);
    v3 += 112;
    if (v3 == v4) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_101353EDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v3 = *(double *)(a1 + 384);
  if (*a2)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    unint64_t v46 = 0;
    sub_1011CD4FC(&v44, 0x60uLL);
    if (*(double *)(a3 + 264) <= 0.0)
    {
      uint64_t v15 = *(uint64_t **)(a1 + 40);
      int v11 = 96;
      if (&v44 != (uint64_t *)(a1 + 40))
      {
        unint64_t v16 = *(uint64_t **)(a1 + 48);
        unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (((char *)v16 - (char *)v15) >> 4);
        if (v17 <= 0x5F) {
          sub_10137033C(&v44, v15, v16, v17);
        }
      }
LABEL_47:
      if (sub_101353268(a1 + 40, v11, &v44, v3))
      {
        if (sub_101351E84((double *)(a1 + 104), (uint64_t *)(a1 + 40), v3))
        {
          uint64_t v26 = *a2;
          int v27 = (std::__shared_weak_count *)a2[1];
          v43[0] = v26;
          v43[1] = (uint64_t)v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v28 = sub_101350128(a1 + 104, v43, (long long *)(a1 + 376));
          if (v27) {
            sub_1000DB0A0(v27);
          }
          if (v28)
          {
            if (sub_101354B18(a1, a3))
            {
              uint64_t v14 = 1;
LABEL_83:
              *(void *)long long buf = &v44;
              sub_10082B830((void ***)buf);
              return v14;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            long long v33 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134349056;
              *(double *)&uint8_t buf[4] = v3;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution failed", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2))
            {
LABEL_82:
              uint64_t v14 = 0;
              goto LABEL_83;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 == -1) {
              goto LABEL_100;
            }
          }
          else
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            long long v32 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134349056;
              *(double *)&uint8_t buf[4] = v3;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,assessCandidates failed", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_82;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 == -1) {
              goto LABEL_100;
            }
          }
          dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_100:
          int v47 = 134349056;
          double v48 = v3;
          long long v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v30);
LABEL_101:
          if (v30 != buf) {
            free(v30);
          }
          goto LABEL_82;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v31 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate update failed", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_82;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_62:
          int v47 = 134349056;
          double v48 = v3;
          long long v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v30);
          goto LABEL_101;
        }
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v29 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,resample failed", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_82;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_62;
        }
      }
      dispatch_once(&qword_102419430, &stru_1023218C0);
      goto LABEL_62;
    }
    if (*(unsigned char *)(a1 + 604)) {
      goto LABEL_4;
    }
    if (*(double *)(a1 + 560) <= 0.0)
    {
      int v11 = 96;
      int v12 = 10;
    }
    else
    {
      double v18 = *(double *)(a1 + 472);
      int v11 = 96;
      int v12 = 10;
      if (v18 >= 0.0 && v18 < 0.001)
      {
        if (*(double *)(a3 + 424) <= 0.0)
        {
          if (*(unsigned char *)(a3 + 468))
          {
LABEL_4:
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            uint64_t v7 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v8 = *(void *)(a1 + 384);
              uint64_t v9 = *(void *)(a1 + 472);
              int v10 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)long long buf = 134349568;
              *(void *)&uint8_t buf[4] = v8;
              __int16 v54 = 2050;
              uint64_t v55 = v9;
              __int16 v56 = 1026;
              int v57 = v10;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              double v36 = *(double *)(a1 + 384);
              uint64_t v37 = *(void *)(a1 + 472);
              int v38 = *(unsigned __int8 *)(a1 + 604);
              int v47 = 134349568;
              double v48 = v36;
              __int16 v49 = 2050;
              uint64_t v50 = v37;
              __int16 v51 = 1026;
              int v52 = v38;
              unint64_t v39 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v39);
              if (v39 != buf) {
                free(v39);
              }
            }
            int v11 = 48;
            int v12 = 5;
          }
        }
        else
        {
          double v19 = *(double *)(a3 + 336);
          if (v19 < 0.001 && v19 >= 0.0 || *(unsigned char *)(a3 + 468) != 0) {
            goto LABEL_4;
          }
        }
      }
    }
    if (*(unsigned char *)(a3 + 504)
      && *(unsigned char *)(a3 + 232)
      && *(void *)(a3 + 120)
      && *(unsigned __int8 *)(a3 + 761) == *(unsigned __int8 *)(a1 + 897))
    {
      unint64_t v22 = v45;
      do
      {
        if (v22 >= v46)
        {
          unint64_t v22 = sub_1011E03D4(&v44, a3 + 120);
        }
        else
        {
          sub_1011E04FC((uint64_t)&v46, v22, a3 + 120);
          v22 += 112;
        }
        unint64_t v45 = v22;
        --v12;
      }
      while (v12);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v23 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *(void *)(a1 + 384);
        uint64_t v25 = *(void *)(a3 + 176);
        *(_DWORD *)long long buf = 134349312;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v54 = 2050;
        uint64_t v55 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        double v40 = *(double *)(a1 + 384);
        uint64_t v41 = *(void *)(a3 + 176);
        int v47 = 134349312;
        double v48 = v40;
        __int16 v49 = 2050;
        uint64_t v50 = v41;
        long long v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
    }
    goto LABEL_47;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v13 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349056;
    *(double *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v47 = 134349056;
    double v48 = v3;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  return 0;
}

void sub_101354AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a14;
  sub_10082B830(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_101354B18(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 384);
  if (*(void *)(a1 + 48) == *(void *)(a1 + 40))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle count,0", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_246;
    }
    goto LABEL_319;
  }
  if (!*(void *)(a1 + 128))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,candidate count,0", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_246;
    }
    goto LABEL_319;
  }
  uint64_t v5 = sub_101351194((uint64_t *)(a1 + 104));
  if (!v5)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,bestCandidate is nullptr", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_246;
    }
    goto LABEL_319;
  }
  uint64_t v6 = v5;
  if (*(int *)(v5 + 124) <= 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particles in candidate,0", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_246;
    }
    goto LABEL_319;
  }
  __int16 v145 = (uint64_t *)(v5 + 8);
  if (!*(void *)(v5 + 8))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    long long v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road in best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_246:
      *(_DWORD *)uint64_t v189 = 134349056;
      *(double *)&v189[4] = v2;
      int v113 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v113);
      if (v113 != buf) {
        free(v113);
      }
      return 0;
    }
LABEL_319:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_246;
  }
  if (*(void *)(a1 + 864))
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 872);
    *(_OWORD *)(a1 + 864) = 0u;
    if (v7) {
      sub_1000DB0A0(v7);
    }
    *(unsigned char *)(a1 + 880) = 0;
  }
  char v165 = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v162 = 0u;
  unint64_t v166 = 0xBFF0000000000000;
  if (&v162 != (long long *)(v6 + 1064)) {
    sub_10137033C((uint64_t *)&v162, *(uint64_t **)(v6 + 1064), *(uint64_t **)(v6 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v6 + 1072) - *(void *)(v6 + 1064)) >> 4));
  }
  if (*(unsigned char *)(v6 + 153))
  {
    if (*(void *)(a2 + 120) && *(unsigned char *)(a2 + 504))
    {
      sub_1011C9EF0((uint64_t *)(a2 + 120), (uint64_t)buf);
      BOOL v8 = sub_100FFD530((uint64_t)buf, v6 + 128);
    }
    else
    {
      BOOL v8 = 0;
    }
    if (sub_1011DFA10(a1 + 112, v6 + 128) && (v8 || sub_10134F43C(v6, (int *)(a1 + 792))))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      unint64_t v16 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        *(double *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v8;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution,using outgoing particles,previous,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        *(_DWORD *)uint64_t v189 = 134349312;
        *(double *)&v189[4] = v2;
        *(_WORD *)&v189[12] = 1026;
        *(_DWORD *)&v189[14] = v8;
        __int16 v124 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v124);
        if (v124 != buf) {
          free(v124);
        }
      }
      *(unsigned char *)(a1 + 896) = 1;
      *(void *)long long buf = v6 + 128;
      unint64_t v17 = sub_1013700DC((uint64_t **)(a1 + 112), v6 + 128, (uint64_t)&unk_101D0B290, (long long **)buf);
      sub_101370654((uint64_t *)&v162, *((uint64_t *)&v162 + 1), (uint64_t *)v17[140], v17[141], 0x6DB6DB6DB6DB6DB7 * ((v17[141] - v17[140]) >> 4));
    }
  }
  if (*((void *)&v162 + 1) == (void)v162)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    unint64_t v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,solutionParticleVector has zero particles", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)uint64_t v189 = 134349056;
      *(double *)&v189[4] = v2;
      uint64_t v121 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v121);
      if (v121 != buf) {
        free(v121);
      }
    }
    uint64_t v14 = 0;
    goto LABEL_221;
  }
  long long v18 = *(_OWORD *)(v6 + 248);
  long long v192 = *(_OWORD *)(v6 + 232);
  long long v193 = v18;
  long long v19 = *(_OWORD *)(v6 + 184);
  *(_OWORD *)uint64_t v189 = *(_OWORD *)(v6 + 168);
  *(_OWORD *)&v189[16] = v19;
  long long v20 = *(_OWORD *)(v6 + 216);
  long long v190 = *(_OWORD *)(v6 + 200);
  long long v191 = v20;
  long long v21 = *(_OWORD *)(v6 + 280);
  long long v194 = *(_OWORD *)(v6 + 264);
  long long v195 = v21;
  if (*(char *)(v6 + 319) < 0)
  {
    sub_1000DC48C(&v196, *(void **)(v6 + 296), *(void *)(v6 + 304));
  }
  else
  {
    long long v196 = *(_OWORD *)(v6 + 296);
    uint64_t v197 = *(void *)(v6 + 312);
  }
  memcpy(v198, (const void *)(v6 + 320), sizeof(v198));
  double v23 = *(double *)(v6 + 360);
  BOOL v24 = v23 < 19.0 && v23 > 0.0;
  if (v24)
  {
    v198[5] = 0x4033000000000000;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v25 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void *)(v6 + 360);
      *(_DWORD *)long long buf = 134349568;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = 0x4033000000000000;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,deweightCourse,courseUnc,%{public}.1lf,deweightUnc,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v122 = *(void *)(v6 + 360);
      LODWORD(v173[0]) = 134349568;
      *(double *)((char *)v173 + 4) = v2;
      WORD2(v173[1]) = 2050;
      *(uint64_t *)((char *)&v173[1] + 6) = v122;
      HIWORD(v173[2]) = 2050;
      *(void *)v174 = 0x4033000000000000;
      int v123 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v123);
      if (v123 != buf) {
        free(v123);
      }
    }
  }
  if (sub_10039D05C(*(void *)(v6 + 8), 0, *(double *)(v6 + 56), 7.5)) {
    goto LABEL_81;
  }
  if ((*(_DWORD *)(*v145 + 20) & 0xFFFFFFFE) != 8) {
    goto LABEL_100;
  }
  if (*(void *)(a2 + 120)
    && ((sub_1011C9EF0(v145, (uint64_t)buf),
         sub_1011C9EF0((uint64_t *)(a2 + 120), (uint64_t)v173),
         sub_100FFD530((uint64_t)buf, (uint64_t)v173))
     || *(unsigned char *)(a1 + 896)
     && (sub_1011C9EF0((uint64_t *)(a2 + 120), (uint64_t)&v154), sub_100FFD530(v6 + 128, (uint64_t)&v154))))
  {
    int v34 = 1;
    BOOL v35 = sub_10039D05C(*(void *)(v6 + 8), 1, *(double *)(v6 + 56), 3.75);
  }
  else
  {
    int v34 = 0;
    BOOL v35 = 0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v36 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349568;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v35;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v34;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidateCourse,particleIsOnSegmentsThatHasSmallCurves,%{public}d,particleInOnSameRoadAsPriorSnap,%{public}d", buf, 0x18u);
  }
  int v37 = v34 & v35;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    LODWORD(v173[0]) = 134349568;
    *(double *)((char *)v173 + 4) = v2;
    WORD2(v173[1]) = 1026;
    *(_DWORD *)((char *)&v173[1] + 6) = v35;
    WORD1(v173[2]) = 1026;
    HIDWORD(v173[2]) = v34;
    int v125 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v125);
    if (v125 != buf) {
      free(v125);
    }
    if (v37) {
      goto LABEL_81;
    }
LABEL_100:
    char v33 = 0;
    if (!v24) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  if (!v37) {
    goto LABEL_100;
  }
LABEL_81:
  *((void *)&v194 + 1) = 0xBFF0000000000000;
  v198[5] = 0xBFF0000000000000;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v27 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    char v28 = *(double **)(v6 + 1088);
    double v29 = *v28;
    double v30 = *(double *)(v6 + 56);
    sub_10039C4B4(v28);
    double v31 = v28[5];
    int v32 = sub_10039CF68(*(uint64_t **)(v6 + 1088));
    *(_DWORD *)long long buf = 134349825;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&buf[14] = v29;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&unsigned char buf[24] = v30 * v31;
    *(_WORD *)&unsigned char buf[32] = 1026;
    *(_DWORD *)&buf[34] = v32;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Particle is on a curved section of road,%{private}lld,projection,%{public}.2lf,deweightCourse,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v115 = *(void *)(v6 + 1088);
    uint64_t v116 = *(void *)v115;
    double v117 = *(double *)(v6 + 56);
    sub_10039C4B4((void *)v115);
    double v118 = *(double *)(v115 + 40);
    int v119 = sub_10039CF68(*(uint64_t **)(v6 + 1088));
    LODWORD(v173[0]) = 134349825;
    *(double *)((char *)v173 + 4) = v2;
    WORD2(v173[1]) = 2049;
    *(uint64_t *)((char *)&v173[1] + 6) = v116;
    HIWORD(v173[2]) = 2050;
    *(double *)v174 = v117 * v118;
    *(_WORD *)&v174[8] = 1026;
    *(_DWORD *)&v174[10] = v119;
    __int16 v120 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v120);
    if (v120 != buf) {
      free(v120);
    }
  }
  char v33 = 1;
LABEL_101:
  memset(buf, 0, 24);
  *(_OWORD *)&unsigned char buf[24] = xmmword_101D1C320;
  unsigned char buf[40] = 0;
  *(_OWORD *)&unsigned char buf[48] = 0u;
  long long v200 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v201 = _Q0;
  long long v202 = _Q0;
  long long v203 = _Q0;
  long long v204 = _Q0;
  unint64_t v205 = 0xBFF0000000000000;
  char v206 = 0;
  long long v207 = _Q0;
  long long v208 = _Q0;
  long long v209 = _Q0;
  sub_101357970((uint64_t)buf, (uint64_t)v189, 0, 1.0);
  long long v43 = (double *)*((void *)&v162 + 1);
  for (uint64_t i = (double *)v162; i != v43; i += 14)
  {
    memset(v173, 0, sizeof(v173));
    *(void *)v174 = 0x3FF0000000000000;
    *(_OWORD *)&v174[8] = 0u;
    long long v175 = 0u;
    LODWORD(v176) = 0;
    sub_101353934((double *)a1, (uint64_t)buf, i, (uint64_t)v173);
    LODWORD(v176) = 1;
    *(void *)v174 = 0x3FF0000000000000;
    sub_1013579C4(i, (uint64_t)v173);
    sub_1011DECAC(i);
  }
LABEL_103:
  sub_101352988((uint64_t *)&v162, v2);
  sub_101352570((uint64_t **)&v162, (uint64_t)&v154);
  if ((v33 & 1) == 0)
  {
    if (v154)
    {
      if (*(unsigned char *)(a2 + 504))
      {
        if (*(void *)(a2 + 120))
        {
          sub_1011C9EF0((uint64_t *)(a2 + 120), (uint64_t)buf);
          sub_1011C9EF0((uint64_t *)&v154, (uint64_t)v173);
          if (sub_100FFD530((uint64_t)buf, (uint64_t)v173))
          {
            double v67 = v158;
            double v68 = *(double *)(a2 + 168);
            long long v69 = v154;
            sub_10039C4B4(v154);
            double v70 = v69[5];
            double v71 = *(double *)(a1 + 856);
            sub_101357B8C((uint64_t)v186, (uint64_t)&v162);
            double v72 = (v67 - v68) * v70;
            double v73 = v71 * 5.0;
            if (v72 <= v73)
            {
LABEL_230:
              sub_101357C9C((uint64_t)v186);
              goto LABEL_104;
            }
            memset(v173, 0, sizeof(v173));
            *(_OWORD *)v174 = xmmword_101D1C320;
            v174[16] = 0;
            long long v175 = 0u;
            long long v176 = 0u;
            __asm { FMOV            V0.2D, #-1.0 }
            long long v177 = _Q0;
            long long v178 = _Q0;
            long long v179 = _Q0;
            long long v180 = _Q0;
            unint64_t v181 = 0xBFF0000000000000;
            char v182 = 0;
            long long v183 = _Q0;
            long long v184 = _Q0;
            long long v185 = _Q0;
            sub_101357970((uint64_t)v173, (uint64_t)v189, 0, 1.0);
            *((void *)&v178 + 1) = 0xBFF0000000000000;
            *((void *)&v179 + 1) = 0xBFF0000000000000;
            int v75 = *(double **)v186;
            for (j = *(double **)&v186[8]; v75 != j; v75 += 14)
            {
              memset(buf, 0, 24);
              *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
              memset(&buf[32], 0, 32);
              LODWORD(v200) = 0;
              sub_101353934((double *)a1, (uint64_t)v173, v75, (uint64_t)buf);
              LODWORD(v200) = 1;
              *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
              sub_1013579C4(v75, (uint64_t)buf);
              sub_1011DECAC(v75);
            }
            sub_101352570((uint64_t **)v186, (uint64_t)&v147);
            uint64_t v77 = v147;
            if (v147)
            {
              double v78 = *(double *)&v152;
              double v79 = *(double *)(a2 + 168);
              sub_10039C4B4(v147);
              double v80 = (v78 - v79) * *((double *)v77 + 5);
              if (v80 >= v73) {
                goto LABEL_229;
              }
              sub_101357C28((uint64_t)&v162, (uint64_t)v186);
              sub_1011C9F64((uint64_t)&v154, (uint64_t *)&v147);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              long long v81 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 134349568;
                *(double *)&uint8_t buf[4] = v2;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(double *)&buf[14] = v72;
                *(_WORD *)&buf[22] = 2050;
                *(double *)&unsigned char buf[24] = v80;
                _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newChangeInDistance,%{public}.2lf", buf, 0x20u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_229;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v167 = 134349568;
              double v168 = v2;
              __int16 v169 = 2050;
              double v170 = v72;
              __int16 v171 = 2050;
              double v172 = v80;
              double v82 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v82);
            }
            else
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v109 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 134349056;
                *(double *)&uint8_t buf[4] = v2;
                _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1", buf, 0xCu);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_229;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v167 = 134349056;
              double v168 = v2;
              double v82 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v82);
            }
            if (v82 != buf) {
              free(v82);
            }
LABEL_229:
            sub_100FFFC10(&v147);
            goto LABEL_230;
          }
        }
      }
    }
  }
LABEL_104:
  if (!*(unsigned char *)(a2 + 504)
    || !*(unsigned char *)(v6 + 152)
    || !*(unsigned char *)(v6 + 153)
    || !v154
    || !*v145
    || !*(void *)(a2 + 120)
    || (sub_1011C9EF0((uint64_t *)(a2 + 120), (uint64_t)buf),
        sub_1011C9EF0((uint64_t *)&v154, (uint64_t)v173),
        sub_100FFD530((uint64_t)buf, (uint64_t)v173))
    || (sub_1011C9EF0((uint64_t *)&v154, (uint64_t)&v147), !sub_100FFD530((uint64_t)&v147, v6 + 128))
    || (sub_1011C9EF0(v145, (uint64_t)v186),
        sub_1011C9EF0((uint64_t *)(a2 + 120), (uint64_t)&v167),
        !sub_100FFD530((uint64_t)v186, (uint64_t)&v167))
    || sub_101357CE4((uint64_t)&v154, (double *)a1, a2 + 120) <= *(double *)(a1 + 856) * 5.0)
  {
    BOOL v144 = 0;
    goto LABEL_133;
  }
  sub_101357B8C((uint64_t)&v147, (uint64_t)&v162);
  sub_1011C9EF0((uint64_t *)&v154, (uint64_t)v146);
  int v45 = sub_1013526B0((uint64_t *)&v147, (uint64_t)v146, v2);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  unint64_t v46 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v45;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    LODWORD(v173[0]) = 134349312;
    *(double *)((char *)v173 + 4) = v2;
    WORD2(v173[1]) = 1026;
    *(_DWORD *)((char *)&v173[1] + 6) = v45;
    int v140 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v140);
    if (v140 != buf) {
      free(v140);
    }
  }
  if (v148 == v147)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    __int16 v110 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349312;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v45;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      LODWORD(v173[0]) = 134349312;
      *(double *)((char *)v173 + 4) = v2;
      WORD2(v173[1]) = 1026;
      *(_DWORD *)((char *)&v173[1] + 6) = v45;
      __int16 v141 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v141);
      if (v141 != buf) {
        free(v141);
      }
    }
    BOOL v144 = 0;
    goto LABEL_257;
  }
  sub_101352570(&v147, (uint64_t)v173);
  if (!v173[0])
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v111 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_255;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    *(_DWORD *)v186 = 134349056;
    *(double *)&v186[4] = v2;
    __int16 v112 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v112);
    goto LABEL_323;
  }
  double v47 = sub_101357CE4((uint64_t)v173, (double *)a1, a2 + 120);
  if (*(double *)(a1 + 472) < 0.75) {
    goto LABEL_123;
  }
  double v48 = *(double *)(a1 + 856);
  if (v47 > v48 * 0.8) {
    goto LABEL_123;
  }
  if (v47 < v48 && !*(unsigned char *)(a1 + 897))
  {
    double v126 = *(double *)(a1 + 480);
    double v127 = *(float *)v174;
    double v128 = *((float *)&v156 + 2);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v129 = vabdd_f64(v126, v127);
    double v130 = vabdd_f64(v126, v128);
    uint64_t v131 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349568;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v129;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v130;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDiffWithPreviousParticle,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)v186 = 134349568;
      *(double *)&v186[4] = v2;
      *(_WORD *)&v186[12] = 2050;
      *(double *)&v186[14] = v129;
      __int16 v187 = 2050;
      double v188 = v130;
      uint64_t v142 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v142);
      if (v142 != buf) {
        free(v142);
      }
    }
    if (v129 < 35.0 && v130 > 60.0)
    {
LABEL_123:
      double v49 = vabdd_f64(*(double *)(a1 + 480), *((float *)&v156 + 2));
      BOOL v144 = v49 < 30.0;
      sub_1011C9F64((uint64_t)&v154, v173);
      sub_101357C28((uint64_t)&v162, (uint64_t)&v147);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v50 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        *(double *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v49 < 30.0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        *(_DWORD *)v186 = 134349312;
        *(double *)&v186[4] = v2;
        *(_WORD *)&v186[12] = 1026;
        *(_DWORD *)&v186[14] = v49 < 30.0;
        __int16 v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v51);
        if (v51 != buf) {
          free(v51);
        }
      }
      goto LABEL_256;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  __int16 v114 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v45;
    _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    *(_DWORD *)v186 = 134349312;
    *(double *)&v186[4] = v2;
    *(_WORD *)&v186[12] = 1026;
    *(_DWORD *)&v186[14] = v45;
    __int16 v112 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v112);
LABEL_323:
    if (v112 != buf) {
      free(v112);
    }
  }
LABEL_255:
  BOOL v144 = 0;
LABEL_256:
  sub_100FFFC10(v173);
LABEL_257:
  sub_101357C9C((uint64_t)&v147);
LABEL_133:
  int v52 = v154;
  long long v53 = v155;
  if (v155) {
    atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v54 = (double **)(a1 + 256);
  uint64_t v55 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = v52;
  *(void *)(a1 + 264) = v53;
  if (v55) {
    sub_1000DB0A0(v55);
  }
  long long v56 = v157;
  *(_OWORD *)(a1 + 272) = v156;
  *(_OWORD *)(a1 + 288) = v56;
  *(double *)(a1 + 304) = v158;
  *(_OWORD *)(a1 + 312) = v159[0];
  *(_OWORD *)(a1 + 321) = *(_OWORD *)((char *)v159 + 9);
  if (v54 != &v154) {
    sub_1010003E4((char *)(a1 + 344), (char *)__p, (uint64_t)v161, 0x8E38E38E38E38E39 * ((v161 - (unsigned char *)__p) >> 3));
  }
  *(unsigned char *)(a1 + 882) = 1;
  char v57 = *(unsigned char *)(v6 + 152);
  if (v57)
  {
    char v57 = *(unsigned char *)(v6 + 153);
    if (v57) {
      char v57 = *(_DWORD *)(v6 + 1044) > (int)(-1227133513 * ((*(void *)(v6 + 1072) - *(void *)(v6 + 1064)) >> 4));
    }
  }
  *(unsigned char *)(a1 + 368) = v57;
  if (!*(void *)(a1 + 256))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v89 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road is nullptr", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_214;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    LODWORD(v173[0]) = 134349056;
    *(double *)((char *)v173 + 4) = v2;
    uint64_t v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v90);
    goto LABEL_290;
  }
  unint64_t v58 = (_OWORD *)(a1 + 376);
  __int16 v143 = (double *)(a1 + 312);
  if (*(unsigned char *)(a1 + 896)
    && (sub_1011C9EF0((uint64_t *)(a1 + 256), (uint64_t)buf),
        uint64_t v59 = (uint64_t *)(v6 + 128),
        sub_100FFD530(v6 + 128, (uint64_t)buf)))
  {
    long long v60 = *(_OWORD *)(v6 + 600);
    long long v61 = *(_OWORD *)(v6 + 616);
    long long v62 = *(_OWORD *)(v6 + 648);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 632);
    *(_OWORD *)(a1 + 424) = v62;
    *unint64_t v58 = v60;
    *(_OWORD *)(a1 + 392) = v61;
    long long v63 = *(_OWORD *)(v6 + 664);
    long long v64 = *(_OWORD *)(v6 + 680);
    long long v65 = *(_OWORD *)(v6 + 712);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 696);
    *(_OWORD *)(a1 + 488) = v65;
    *(_OWORD *)(a1 + 440) = v63;
    *(_OWORD *)(a1 + 456) = v64;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 728));
    long long v66 = (uint64_t **)(a1 + 864);
    memcpy((void *)(a1 + 528), (const void *)(v6 + 752), 0x118uLL);
    if (*(void *)(v6 + 8))
    {
      sub_100F0805C((void *)(a1 + 864), v145);
      *(unsigned char *)(a1 + 880) = *(unsigned char *)(v6 + 28);
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      char v91 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(double *)&uint8_t buf[4] = v2;
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        LODWORD(v173[0]) = 134349056;
        *(double *)((char *)v173 + 4) = v2;
        __int16 v139 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v139);
        if (v139 != buf) {
          free(v139);
        }
      }
    }
    if (*v66)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v92 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v93 = **v66;
        uint64_t v94 = *v59;
        uint64_t v95 = *(void *)v143;
        *(_DWORD *)long long buf = 134349825;
        *(double *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&buf[14] = v93;
        *(_WORD *)&buf[22] = 2049;
        *(void *)&unsigned char buf[24] = v94;
        *(_WORD *)&unsigned char buf[32] = 2050;
        *(void *)&buf[34] = v95;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld,score,%{public}.8lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v135 = **v66;
        uint64_t v136 = *v59;
        uint64_t v137 = *(void *)v143;
        LODWORD(v173[0]) = 134349825;
        *(double *)((char *)v173 + 4) = v2;
        WORD2(v173[1]) = 2049;
        *(uint64_t *)((char *)&v173[1] + 6) = v135;
        HIWORD(v173[2]) = 2049;
        *(void *)v174 = v136;
        *(_WORD *)&v174[8] = 2050;
        *(void *)&v174[10] = v137;
        int v138 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v138);
        if (v138 != buf) {
          free(v138);
        }
      }
    }
  }
  else
  {
    long long v83 = *(_OWORD *)(v6 + 168);
    long long v84 = *(_OWORD *)(v6 + 184);
    long long v85 = *(_OWORD *)(v6 + 216);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 200);
    *(_OWORD *)(a1 + 424) = v85;
    *unint64_t v58 = v83;
    *(_OWORD *)(a1 + 392) = v84;
    long long v86 = *(_OWORD *)(v6 + 232);
    long long v87 = *(_OWORD *)(v6 + 248);
    long long v88 = *(_OWORD *)(v6 + 280);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 264);
    *(_OWORD *)(a1 + 488) = v88;
    *(_OWORD *)(a1 + 440) = v86;
    *(_OWORD *)(a1 + 456) = v87;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 296));
    memcpy((void *)(a1 + 528), (const void *)(v6 + 320), 0x118uLL);
  }
  *(unsigned char *)(a1 + 881) = 0;
  long long v96 = 0uLL;
  memset(buf, 0, 53);
  long long v97 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (v97)
  {
    sub_1000DB0A0(v97);
    long long v96 = 0uLL;
  }
  uint64_t v99 = (void *)(a1 + 224);
  double v98 = *(void **)(a1 + 224);
  *(_DWORD *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 1;
  *(_OWORD *)(a1 + 157) = v96;
  *(_OWORD *)(a1 + 173) = v96;
  *(_DWORD *)(a1 + 188) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)&buf[28];
  *(_OWORD *)(a1 + 201) = *(_OWORD *)&buf[37];
  if (v98)
  {
    *(void *)(a1 + 232) = v98;
    operator delete(v98);
    *uint64_t v99 = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
  *uint64_t v99 = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 848) = sub_101357D10(a1, (double *)a2) ^ 1;
  *(void *)(a1 + 888) = *(void *)(a1 + 96);
  memset(v173, 0, sizeof(v173));
  *(_OWORD *)v174 = xmmword_101D1C320;
  v174[16] = 0;
  long long v175 = 0u;
  long long v176 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v177 = _Q0;
  long long v178 = _Q0;
  long long v179 = _Q0;
  long long v180 = _Q0;
  unint64_t v181 = 0xBFF0000000000000;
  char v182 = 0;
  long long v183 = _Q0;
  long long v184 = _Q0;
  long long v185 = _Q0;
  sub_101357970((uint64_t)v173, a1 + 376, *(unsigned __int8 *)(a1 + 904), 1.0);
  if (v144)
  {
    *((void *)&v178 + 1) = 0xBFF0000000000000;
    *((void *)&v179 + 1) = 0xBFF0000000000000;
  }
  __int16 v147 = 0;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  uint64_t v150 = 0x3FF0000000000000;
  long long v151 = 0u;
  long long v152 = 0u;
  int v153 = 0;
  if (!sub_101353934((double *)a1, (uint64_t)v173, (double *)(a1 + 256), (uint64_t)&v147))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v107 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to calculate score", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_214;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_289;
    }
    goto LABEL_330;
  }
  int v153 = 1;
  uint64_t v150 = 0x3FF0000000000000;
  sub_1013579C4((void *)(a1 + 256), (uint64_t)&v147);
  sub_1011DECAC((double *)(a1 + 256));
  if (sub_10134E518(a1 + 136))
  {
    *(_DWORD *)(a1 + 556) = 0;
    double v101 = sub_101351C20((uint64_t *)(a1 + 104));
    if (v101 > 0.0)
    {
      double v102 = *(double *)(a1 + 312) / v101;
      if (v102 > 1000000.0) {
        double v102 = 1000000.0;
      }
      float v103 = v102;
      *(float *)(a1 + 556) = v103;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v104 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v105 = *(void *)*v54;
      uint64_t v106 = *(void *)v143;
      *(_DWORD *)long long buf = 134349569;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&buf[14] = v105;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v106;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,bestParticleRoadID,%{private}lld,score,%{public}.8lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v132 = *(void *)*v54;
      double v133 = *v143;
      *(_DWORD *)v186 = 134349569;
      *(double *)&v186[4] = v2;
      *(_WORD *)&v186[12] = 2049;
      *(void *)&v186[14] = v132;
      __int16 v187 = 2050;
      double v188 = v133;
      v134 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v134);
      if (v134 != buf) {
        free(v134);
      }
    }
    uint64_t v14 = 1;
    goto LABEL_215;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  __int16 v108 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349056;
    *(double *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to fill crumb", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_289:
      *(_DWORD *)v186 = 134349056;
      *(double *)&v186[4] = v2;
      uint64_t v90 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v90);
LABEL_290:
      if (v90 != buf) {
        free(v90);
      }
      goto LABEL_214;
    }
LABEL_330:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_289;
  }
LABEL_214:
  uint64_t v14 = 0;
LABEL_215:
  if (__p)
  {
    __int16 v161 = __p;
    operator delete(__p);
  }
  if (v155) {
    sub_1000DB0A0(v155);
  }
  if (SHIBYTE(v197) < 0) {
    operator delete((void *)v196);
  }
LABEL_221:
  if (*((void *)&v163 + 1))
  {
    *(void *)&long long v164 = *((void *)&v163 + 1);
    operator delete(*((void **)&v163 + 1));
  }
  *(void *)long long buf = &v162;
  sub_10082B830((void ***)buf);
  return v14;
}

void sub_10135780C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  sub_101357C9C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_101357970(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 72);
  *(void *)(a1 + 104) = v5;
  uint64_t v8 = *(void *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 192);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v7;
  *(double *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = v8;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 228);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 176) = *(void *)(a2 + 216);
  *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(a2 + 16), *(int8x16_t *)(a2 + 16), 8uLL);
  *(void *)(a1 + 200) = *(void *)(a2 + 8);
  sub_10053A610(a1, a2, a3);
}

void sub_1013579C4(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[11];
  unint64_t v4 = a1[12];
  uint64_t v6 = (void **)(a1 + 11);
  if (v5 == v4)
  {
LABEL_5:
    uint64_t v8 = (uint64_t)(a1 + 13);
    unint64_t v9 = a1[13];
    if (v4 >= v9)
    {
      unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v5) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0x38E38E38E38E38ELL) {
        sub_1001D7FD4();
      }
      unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v5) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x1C71C71C71C71C7) {
        unint64_t v17 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        long long v18 = (char *)sub_10021D4B8(v8, v17);
      }
      else {
        long long v18 = 0;
      }
      unint64_t v22 = &v18[72 * v14];
      double v23 = &v18[72 * v17];
      *(_OWORD *)unint64_t v22 = *(_OWORD *)a2;
      long long v24 = *(_OWORD *)(a2 + 16);
      long long v25 = *(_OWORD *)(a2 + 32);
      long long v26 = *(_OWORD *)(a2 + 48);
      *((void *)v22 + 8) = *(void *)(a2 + 64);
      *((_OWORD *)v22 + 2) = v25;
      *((_OWORD *)v22 + 3) = v26;
      *((_OWORD *)v22 + 1) = v24;
      long long v13 = v22 + 72;
      char v28 = (char *)a1[11];
      int v27 = (char *)a1[12];
      if (v27 != v28)
      {
        do
        {
          *(_OWORD *)(v22 - 72) = *(_OWORD *)(v27 - 72);
          long long v29 = *(_OWORD *)(v27 - 56);
          long long v30 = *(_OWORD *)(v27 - 40);
          long long v31 = *(_OWORD *)(v27 - 24);
          *((_DWORD *)v22 - 2) = *((_DWORD *)v27 - 2);
          *(_OWORD *)(v22 - 24) = v31;
          *(_OWORD *)(v22 - 40) = v30;
          *(_OWORD *)(v22 - 56) = v29;
          v22 -= 72;
          v27 -= 72;
        }
        while (v27 != v28);
        int v27 = (char *)*v6;
      }
      a1[11] = v22;
      a1[12] = v13;
      a1[13] = v23;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      long long v12 = *(_OWORD *)(a2 + 48);
      *(void *)(v4 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 16) = v10;
      long long v13 = (char *)(v4 + 72);
    }
    a1[12] = v13;
  }
  else
  {
    uint64_t v7 = a1[11];
    while (*(_DWORD *)(v7 + 64) != *(_DWORD *)(a2 + 64))
    {
      v7 += 72;
      if (v7 == v4) {
        goto LABEL_5;
      }
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    long long v19 = *(_OWORD *)(a2 + 16);
    long long v20 = *(_OWORD *)(a2 + 32);
    long long v21 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 32) = v20;
    *(_OWORD *)(v7 + 48) = v21;
    *(_OWORD *)(v7 + 16) = v19;
  }
}

uint64_t sub_101357B8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10136F5FC((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10010F834((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_101357C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10082B830((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101357C28(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10137033C((uint64_t *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    sub_1000FB43C((char *)(a1 + 24), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t sub_101357C9C(uint64_t a1)
{
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)a1;
  sub_10082B830(&v4);
  return a1;
}

long double sub_101357CE4(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(void *)a3 && *(void *)a1) {
    return sub_1000F1648(a2, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a3 + 32), *(double *)(a3 + 40), 0.0);
  }
  else {
    return -1.0;
  }
}

uint64_t sub_101357D10(uint64_t a1, double *a2)
{
  if (!*(unsigned char *)(a1 + 368) || *(double *)(a1 + 568) <= 0.0 || *(double *)(a1 + 480) < 0.0) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 384);
  if (*(unsigned char *)(a1 + 276)) {
    double v7 = 1.0 - *(double *)(a1 + 304);
  }
  else {
    double v7 = *(double *)(a1 + 304);
  }
  uint64_t v8 = *(void *)(a1 + 256);
  sub_10039C4B4((void *)v8);
  double v9 = *(double *)(v8 + 40);
  long double v10 = sub_1000F1648((double *)a1, *(double *)(a1 + 432), *(double *)(a1 + 440), a2[37], a2[38], *(double *)(a1 + 448));
  double v11 = a2[68];
  double v12 = *(double *)(a1 + 480);
  double v13 = -1.0;
  if (v11 >= 0.0)
  {
    double v14 = fmod(v12 - v11, 360.0);
    if (v14 < 0.0) {
      double v14 = v14 + 360.0;
    }
    if (v14 > 180.0) {
      double v14 = v14 + -360.0;
    }
    double v13 = fabs(v14);
  }
  double v15 = v7 * v9;
  double v16 = fmod(v12 - *(float *)(a1 + 280), 360.0);
  if (v16 < 0.0) {
    double v16 = v16 + 360.0;
  }
  if (v16 > 180.0) {
    double v16 = v16 + -360.0;
  }
  double v17 = fabs(v16);
  double v18 = *(double *)(a1 + 568);
  if (v18 > 0.0 && v18 < 45.0 && v17 > 30.0)
  {
    BOOL v19 = 0;
LABEL_26:
    uint64_t v3 = 1;
    if (v15 >= 0.0 && v15 < 35.0 && !v19)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v21 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        uint64_t v26 = v6;
        __int16 v27 = 2050;
        double v28 = v15;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not snapping course,reason,distanceToIntersection,%{public}.1lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      uint64_t v3 = 0;
    }
    goto LABEL_35;
  }
  double v20 = a2[54];
  uint64_t v3 = 1;
  if (v20 > 0.0 && v20 < 45.0)
  {
    BOOL v19 = v13 <= 30.0;
    goto LABEL_26;
  }
LABEL_35:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  unint64_t v22 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134350080;
    uint64_t v26 = v6;
    __int16 v27 = 2050;
    double v28 = v15;
    __int16 v29 = 2050;
    long double v30 = v10;
    __int16 v31 = 2050;
    double v32 = v17;
    __int16 v33 = 2050;
    double v34 = v13;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{public}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  return v3;
}

uint64_t sub_1013581FC(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1022CB118;
  *(_DWORD *)(a1 + 8) = 257;
  *(unsigned char *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_101D234D0;
  sub_101171D90(a1 + 168);
  *(void *)(a1 + 208) = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 216) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 240) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v11 = _Q0;
  *(_OWORD *)(a1 + 224) = _Q0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  sub_1013584EC(a1 + 264);
  *(unsigned char *)(a1 + 1032) = 0;
  *(void *)(a1 + 1040) = a1 + 1040;
  *(void *)(a1 + 1048) = a1 + 1040;
  *(void *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_WORD *)(a1 + 1108) = 1;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(unsigned char *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  sub_1011DEEB4(a1 + 1216);
  *(_DWORD *)(a1 + 1752) = -1;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1776) = 0;
  *(void *)(a1 + 1784) = a1 + 1784;
  *(void *)(a1 + 1792) = a1 + 1784;
  *(void *)(a1 + 1800) = 0;
  *(void *)(a1 + 1808) = a1 + 1808;
  *(void *)(a1 + 1816) = a1 + 1808;
  *(void *)(a1 + 1824) = 0;
  *(void *)(a1 + 1832) = 0x600000006;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 1848) = 0;
  *(void *)(a1 + 1864) = 0xBFF0000000000000;
  *(void *)(a1 + 1872) = 0xBFF0000000000000;
  *(void *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1952) = v11;
  *(_DWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(void *)(a1 + 2112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2120) = 180;
  *(_DWORD *)(a1 + 2144) = 0;
  *(void *)(a1 + 2128) = 0;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  sub_101358650(a1);
  return a1;
}

void sub_1013583F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double v20 = *(void **)(v14 + 2176);
  if (v20)
  {
    *(void *)(v14 + 2184) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void *)(v14 + 2088);
  *(void *)(v14 + 2088) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *v19;
  *BOOL v19 = 0;
  if (v22) {
    sub_10082B694((uint64_t)v19, v22);
  }
  sub_10082B6F0((void ***)&a14);
  sub_10082B6F0((void ***)&a14);
  sub_10082B790((void ***)&a14);
  double v23 = *v15;
  if (*v15)
  {
    *(void *)(v14 + 1848) = v23;
    operator delete(v23);
  }
  sub_10017FF2C(v18);
  sub_10017FF2C(v17);
  if (*(char *)(v14 + 1431) < 0) {
    operator delete(*(void **)(v14 + 1408));
  }
  sub_1011C75B0((void *)(v14 + 1064));
  sub_1003B2350(v16);
  sub_101358940(a10);
  sub_10082B830((void ***)&a14);
  long long v24 = *(std::__shared_weak_count **)(v14 + 216);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1013584EC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 256) = _Q1;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0xBFF0000000000000;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 587) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 454) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0xBFF0000000000000;
  sub_101171D90(a1 + 672);
  *(unsigned char *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 743) = 0;
  *(void *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 759) = 0;
  return a1;
}

void sub_101358624(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 391) < 0) {
    operator delete(*(void **)(v1 + 368));
  }
  sub_101AB0848(v3, (void *)v1, v2);
  _Unwind_Resume(a1);
}

double sub_101358650(uint64_t a1)
{
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  sub_10137006C((void *)(a1 + 240));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  memset(v7, 0, 24);
  *(void *)uint64_t v6 = v7;
  sub_10082B830((void ***)v6);
  bzero(v7, 0x300uLL);
  sub_1013584EC((uint64_t)v7);
  sub_10136136C(a1 + 264, v7);
  if (v15) {
    sub_1000DB0A0(v15);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v11)
  {
    double v12 = v11;
    operator delete(v11);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v8)
  {
    double v9 = v8;
    operator delete(v8);
  }
  if (*((void *)&v7[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v7[0] + 1));
  }
  *(unsigned char *)(a1 + 1032) = 0;
  sub_1003B2350((void *)(a1 + 1040));
  *(_DWORD *)(a1 + 1208) = 0;
  *(_OWORD *)&v6[7] = 0uLL;
  memset((char *)v7 + 4, 0, 49);
  *(unsigned char *)(a1 + 1064) = 0;
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1065) = *(_OWORD *)v6;
  double v2 = *(std::__shared_weak_count **)(a1 + 1096);
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1096) = 0;
  if (v2) {
    sub_1000DB0A0(v2);
  }
  *(_DWORD *)(a1 + 1104) = 0;
  *(_WORD *)(a1 + 1108) = 1;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1116) = v7[0];
  *(_OWORD *)(a1 + 1128) = *(long long *)((char *)v7 + 12);
  *(_OWORD *)(a1 + 1144) = *(long long *)((char *)&v7[1] + 12);
  *(_OWORD *)(a1 + 1153) = *(long long *)((char *)&v7[2] + 5);
  uint64_t v3 = *(void **)(a1 + 1176);
  if (v3)
  {
    *(void *)(a1 + 1184) = v3;
    operator delete(v3);
  }
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 0;
  *(void *)(a1 + 1192) = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1257) = 0u;
  sub_101000548(a1 + 1280);
  *(_DWORD *)(a1 + 1752) = -1;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1776) = 0;
  *(void *)&v7[0] = v7;
  *((void *)&v7[0] + 1) = v7;
  *(void *)&v7[1] = 0;
  sub_101370BDC((uint64_t *)(a1 + 1784), v7);
  sub_10017FF2C((uint64_t *)v7);
  *(void *)&v7[0] = v7;
  *((void *)&v7[0] + 1) = v7;
  *(void *)&v7[1] = 0;
  sub_101370BDC((uint64_t *)(a1 + 1808), v7);
  sub_10017FF2C((uint64_t *)v7);
  *(void *)(a1 + 1832) = 0x600000006;
  uint64_t v4 = *(void **)(a1 + 1840);
  if (v4)
  {
    *(void *)(a1 + 1848) = v4;
    operator delete(v4);
  }
  *(void *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(void *)(a1 + 1864) = 0xBFF0000000000000;
  *(void *)(a1 + 1872) = 0xBFF0000000000000;
  sub_10082B7E4((uint64_t *)(a1 + 1880));
  sub_1011E0990((uint64_t *)(a1 + 1904));
  *(void *)(a1 + 1920) = 0;
  *(_OWORD *)(a1 + 1904) = 0u;
  memset(v7, 0, 24);
  *(void *)uint64_t v6 = v7;
  sub_10082B6F0((void ***)v6);
  sub_1011E0990((uint64_t *)(a1 + 1928));
  *(void *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  memset(v7, 0, 24);
  *(void *)uint64_t v6 = v7;
  sub_10082B6F0((void ***)v6);
  *(_DWORD *)(a1 + 2072) = 0;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 1968) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2048) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2037) = 0;
  *(void *)(a1 + 2056) = 0xBFF0000000000000;
  *(void *)(a1 + 2064) = 0xBFF0000000000000;
  return result;
}

uint64_t sub_101358940(uint64_t a1)
{
  double v2 = *(std::__shared_weak_count **)(a1 + 736);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

void sub_1013589B8(uint64_t a1, char a2, char a3, int a4)
{
  if (a2)
  {
    memset(&v11, 0, sizeof(v11));
    int v12 = 0;
    uint64_t v13 = 0x3FE0000000000000;
    __int16 v14 = 0;
    long long v15 = xmmword_101D474D0;
    __int16 v16 = 1;
    long long v17 = xmmword_101D474E0;
    __int16 v18 = 1;
    int v19 = 0;
    double v7 = "CLPedestrianMMBuildingGeometry";
    uint64_t v8 = *(void *)(a1 + 208);
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 104))(v8)) {
      double v7 = "CLPedestrianMMBuildingGeometryCycling";
    }
    std::string::assign(&v11, v7);
    int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 16))(*(void *)(a1 + 208));
    HIBYTE(v14) = a3;
    LOBYTE(v14) = 1;
    *(double *)&long long v15 = (double)a4;
    __int16 v18 = 256;
    int v19 = 1;
    sub_100103240();
    if (sub_10010145C()) {
      goto LABEL_12;
    }
    sub_1000C7F88(buf);
    LOBYTE(v20) = 0;
    int v9 = sub_1000D2988(*(uint64_t *)buf, "UseMapsBuildingTileStyleBasic", (BOOL *)&v20);
    int v10 = (_BYTE)v20 ? v9 : 0;
    if (v22) {
      sub_1000DB0A0(v22);
    }
    if (v10) {
LABEL_12:
    }
      int v19 = 0;
    operator new();
  }
  operator new();
}

void sub_101358DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101358E6C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  a1[246] = (uint64_t *)0xBFF0000000000000;
  *((_DWORD *)a1 + 512) = 0;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 251) = 0u;
  *(_OWORD *)(a1 + 253) = 0u;
  *(uint64_t **)((char *)a1 + 2037) = 0;
  a1[257] = (uint64_t *)0xBFF0000000000000;
  a1[258] = (uint64_t *)0xBFF0000000000000;
  uint64_t v6 = a1[26];
  uint64_t v5 = (std::__shared_weak_count *)a1[27];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349056;
      uint64_t v82 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v50 = *(void *)(a2 + 8);
      int v58 = 134349056;
      uint64_t v59 = v50;
      std::string v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v11);
      goto LABEL_115;
    }
    goto LABEL_20;
  }
  sub_10118856C((uint64_t)v6);
  v6[1] = *(void *)(a2 + 8);
  (*(void (**)(uint64_t *))(*v6 + 96))(v6);
  sub_1013E5BF0(a2);
  double v7 = 0.0;
  if (*((double *)a1 + 64) > 0.0)
  {
    double v8 = *(double *)(a2 + 24);
    if (v8 < 0.0 || (double v9 = *((double *)a1 + 66), v9 < 0.0))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v10 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v82 = v4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute timeDiff", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v58 = 134349056;
        uint64_t v59 = v4;
        std::string v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v11);
LABEL_115:
        if (v11 != (char *)buf) {
          free(v11);
        }
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    if (v8 - v9 == 0.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v15 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v82 = v4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching, time betwen updates is 0.0", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v58 = 134349056;
        uint64_t v59 = v4;
        std::string v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v11);
        goto LABEL_115;
      }
LABEL_20:
      uint64_t v14 = 0;
      if (!v5) {
        return v14;
      }
      goto LABEL_49;
    }
    double v7 = vabdd_f64(v8, v9);
    if (v7 > 5.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      __int16 v16 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        uint64_t v82 = v4;
        __int16 v83 = 2050;
        *(double *)long long v84 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v58 = 134349312;
        uint64_t v59 = v4;
        __int16 v60 = 2050;
        double v61 = v7;
        long long v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
      sub_101358650((uint64_t)a1);
      a1[267] = 0;
      a1[266] = 0;
      *((_DWORD *)a1 + 536) = 0;
      a1[269] = 0;
      a1[271] = 0;
      a1[270] = 0;
    }
  }
  double v17 = sub_1013E5BF0(a2);
  if (((uint64_t (*)(uint64_t **, uint64_t, uint64_t **, double))(*a1)[6])(a1, a2, a1 + 33, v17))
  {
    uint64_t v18 = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[7])(a1, a2);
    (*(void (**)(uint64_t *, uint64_t))(*v6 + 32))(v6, v18);
    (*(void (**)(uint64_t *, uint64_t, double))(*v6 + 48))(v6, a2, 450.0);
    ((void (*)(uint64_t **, uint64_t, uint64_t **))(*a1)[4])(a1, a2, a1 + 33);
    sub_10135A2CC((uint64_t)a1, a2);
    sub_101171D90((uint64_t)&v58);
    char v63 = 0;
    memset(v62, 0, sizeof(v62));
    __asm { FMOV            V0.2D, #-1.0 }
    long long v64 = _Q0;
    v66[0] = 0;
    v66[1] = 0;
    long long v65 = v66;
    sub_1013584EC((uint64_t)v67);
    char v80 = 0;
    char v57 = (uint64_t *)(a1 + 30);
    if (sub_10135A458((uint64_t)a1, a1 + 30, (uint64_t)(a1 + 33), a2, 1, 0, (uint64_t)&v58)) {
      goto LABEL_63;
    }
    sub_10135AEA0(a1, a1 + 30, (uint64_t)(a1 + 33), (uint64_t)&v58, a2);
    sub_10135B6A4((uint64_t)a1, a1 + 30, (uint64_t)(a1 + 33), (uint64_t)&v58, a2);
    if (((uint64_t (*)(uint64_t **, int *, uint64_t **))(*a1)[9])(a1, &v58, a1 + 33))
    {
      if (((uint64_t (*)(uint64_t **, int *))(*a1)[2])(a1, &v58))
      {
        int v24 = 0;
        goto LABEL_64;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v28 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v82 = v4;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_63:
        int v24 = 1;
LABEL_64:
        BOOL v29 = sub_100178D5C((uint64_t)(a1 + 229), *((double *)&v69 + 1), 6.0);
        BOOL v30 = v29;
        if (v29)
        {
          if ((v24 & 1) == 0)
          {
            int v31 = sub_10135D238((uint64_t)a1, (uint64_t)&v58, (uint64_t)(a1 + 33));
            int v32 = v31;
            if (v31)
            {
              double v33 = 1.0;
              if (*((double *)a1 + 64) > 0.0) {
                double v33 = v7;
              }
              *((double *)a1 + 275) = *((double *)a1 + 275) + v33;
              char v78 = 1;
              v77[2] = *((void *)&v74 + 1);
            }
            else
            {
              a1[275] = 0;
            }
            BYTE1(v77[14]) = v31;
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            double v34 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              BOOL v35 = a1[275];
              *(_DWORD *)long long buf = 134349568;
              uint64_t v82 = v4;
              __int16 v83 = 1026;
              *(_DWORD *)long long v84 = v32;
              *(_WORD *)&v84[4] = 2050;
              *(void *)&v84[6] = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              long long v53 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v53);
              if (v53 != (char *)buf) {
                free(v53);
              }
            }
          }
          sub_10134ECAC((double *)a1 + 262, (uint64_t)v67, (uint64_t)(a1 + 33));
        }
        if ((v24 & 1) == 0)
        {
          uint64_t v36 = ((uint64_t (*)(uint64_t **, int *, uint64_t **))(*a1)[10])(a1, &v58, a1 + 33);
          if (!v36) {
            goto LABEL_86;
          }
        }
        int v38 = a1[30];
        int v37 = a1[31];
        sub_101358650((uint64_t)a1);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        unint64_t v39 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349312;
          uint64_t v82 = v4;
          __int16 v83 = 1026;
          *(_DWORD *)long long v84 = v38 != v37;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          int v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
        }
        sub_10136F7BC((uint64_t)v62);
        sub_10136F830((uint64_t)&v58);
        long long v40 = *(_OWORD *)(a2 + 80);
        long long v72 = *(_OWORD *)(a2 + 64);
        long long v73 = v40;
        long long v41 = *(_OWORD *)(a2 + 112);
        long long v74 = *(_OWORD *)(a2 + 96);
        long long v75 = v41;
        long long v42 = *(_OWORD *)(a2 + 16);
        long long v68 = *(_OWORD *)a2;
        long long v69 = v42;
        long long v43 = *(_OWORD *)(a2 + 48);
        long long v70 = *(_OWORD *)(a2 + 32);
        long long v71 = v43;
        std::string::operator=(&v76, (const std::string *)(a2 + 128));
        uint64_t v36 = (uint64_t)memcpy(v77, (const void *)(a2 + 152), sizeof(v77));
        if (v38 == v37) {
          goto LABEL_86;
        }
        uint64_t v36 = ((uint64_t (*)(uint64_t **, int *))(*a1)[3])(a1, &v58);
        if ((v36 & 1) == 0)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v49 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134349056;
            uint64_t v82 = v4;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to re-initialize filter", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            __int16 v54 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v54);
            if (v54 != (char *)buf) {
              free(v54);
            }
          }
          uint64_t v14 = 0;
        }
        else
        {
LABEL_86:
          sub_10135F090(v36, (uint64_t)&v58, a1 + 130);
          sub_10135F15C((uint64_t)a1, (uint64_t)&v58, (uint64_t)(a1 + 33), (uint64_t)(a1 + 133));
          if (!v30) {
            sub_10135F528((uint64_t)a1, (uint64_t)&v58);
          }
          if (LOBYTE(v77[14]))
          {
            double v44 = *((double *)&v69 + 1);
            a1[29] = (uint64_t *)*((void *)&v69 + 1);
            if (*((unsigned char *)a1 + 10))
            {
              if (!v79
                && (LODWORD(v77[33]) <= 6 && ((0x58u >> SLOBYTE(v77[33])) & 1) != 0 && *((unsigned char *)a1 + 11)
                 || !sub_100178D5C((uint64_t)(a1 + 229), v44, 6.0)))
              {
                ((void (*)(uint64_t **, int *, uint64_t **))(*a1)[12])(a1, &v58, a1 + 33);
              }
            }
          }
          if (v57 != (uint64_t *)v62) {
            sub_10137033C(v57, *(uint64_t **)&v62[0], *((uint64_t **)&v62[0] + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v62[0] + 1) - *(void *)&v62[0]) >> 4));
          }
          sub_10135F86C((uint64_t)(a1 + 33), v67);
          long long v45 = v73;
          *(_OWORD *)(a2 + 64) = v72;
          *(_OWORD *)(a2 + 80) = v45;
          long long v46 = v75;
          *(_OWORD *)(a2 + 96) = v74;
          *(_OWORD *)(a2 + 112) = v46;
          long long v47 = v69;
          *(_OWORD *)a2 = v68;
          *(_OWORD *)(a2 + 16) = v47;
          long long v48 = v71;
          *(_OWORD *)(a2 + 32) = v70;
          *(_OWORD *)(a2 + 48) = v48;
          std::string::operator=((std::string *)(a2 + 128), &v76);
          memcpy((void *)(a2 + 152), v77, 0x118uLL);
          if (*(unsigned char *)(a2 + 264) && *(unsigned char *)(a2 + 265) && *(_DWORD *)(a2 + 280) == 3 && !*((unsigned char *)a1 + 12)) {
            *(unsigned char *)(a2 + 265) = 0;
          }
          uint64_t v14 = v24 ^ 1u;
        }
        sub_10136F8D4((uint64_t)&v58);
        if (!v5) {
          return v14;
        }
LABEL_49:
        sub_1000DB0A0(v5);
        return v14;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_134:
        uint64_t v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v55);
        if (v55 != (char *)buf) {
          free(v55);
        }
        goto LABEL_63;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      __int16 v27 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v82 = v4;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, assessMatch failed", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_63;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_134;
      }
    }
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_134;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v25 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349056;
    uint64_t v82 = v4;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v58 = 134349056;
    uint64_t v59 = v4;
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  uint64_t v14 = 1;
  if (v5) {
    goto LABEL_49;
  }
  return v14;
}

void sub_10135A230(_Unwind_Exception *a1)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10135A2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1880);
  sub_10082B7E4((uint64_t *)(a1 + 1880));
  if (!*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 208);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 216);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    int v10 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v10 = 0;
  }
  uint64_t v9 = v5;
  BOOL v7 = sub_1011DAFF0(a2, &v9, (double *)(a1 + 168), (void *)(a1 + 1832), v4, 0, 100.0);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v7;
}

void sub_10135A388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10135A3AC(uint64_t a1)
{
  sub_101171D90(a1);
  *(_OWORD *)(v2 + 40) = 0u;
  *(unsigned char *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(void *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 96) = _Q0;
  *(void *)(v2 + 112) = v2 + 120;
  *(void *)(v2 + 128) = 0;
  sub_1013584EC(v2 + 136);
  *(unsigned char *)(a1 + 904) = 0;
  return a1;
}

void sub_10135A420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  sub_10136F520(v4, *(void **)(v2 + 120));
  uint64_t v6 = *(void **)(v2 + 64);
  if (v6)
  {
    *(void *)(v2 + 72) = v6;
    operator delete(v6);
  }
  sub_10082B830((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10135A458(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a1 + 208);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 216);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v14)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a4 + 8);
      *(_DWORD *)long long buf = 134349056;
      uint64_t v47 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, prepareSolution", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_59;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v25 = *(void *)(a4 + 8);
    int v42 = 134349056;
    uint64_t v43 = v25;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v26);
LABEL_76:
    if (v26 != (char *)buf) {
      free(v26);
    }
    goto LABEL_59;
  }
  uint64_t v15 = *(void *)(a4 + 8);
  if ((uint64_t **)(a7 + 40) != a2) {
    sub_10137033C((uint64_t *)(a7 + 40), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 4));
  }
  long long v16 = *(_OWORD *)a4;
  long long v17 = *(_OWORD *)(a4 + 16);
  long long v18 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a7 + 408) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a7 + 424) = v18;
  *(_OWORD *)(a7 + 376) = v16;
  *(_OWORD *)(a7 + 392) = v17;
  long long v19 = *(_OWORD *)(a4 + 64);
  long long v20 = *(_OWORD *)(a4 + 80);
  long long v21 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a7 + 472) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a7 + 488) = v21;
  *(_OWORD *)(a7 + 440) = v19;
  *(_OWORD *)(a7 + 456) = v20;
  std::string::operator=((std::string *)(a7 + 504), (const std::string *)(a4 + 128));
  memcpy((void *)(a7 + 528), (const void *)(a4 + 152), 0x118uLL);
  if (*(void *)(a7 + 48) == *(void *)(a7 + 40)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a7) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v34 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v47 = v15;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to initialize filter", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_59;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v42 = 134349056;
    uint64_t v43 = v15;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v26);
    goto LABEL_76;
  }
  sub_10136F980((uint64_t)&v42, a4, *(unsigned __int8 *)(a1 + 1032), 1.0);
  *(unsigned char *)(a7 + 904) = *(unsigned char *)(a1 + 1032);
  if (a6)
  {
    unint64_t v44 = 0xBFF0000000000000;
    unint64_t v45 = 0xBFF0000000000000;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a4, a7, a3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    __int16 v27 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v47 = v15;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prediction failed", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_63;
    }
LABEL_78:
    dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_63:
    int v40 = 134349056;
    uint64_t v41 = v15;
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
    goto LABEL_33;
  }
  if (sub_101353CB8(a7, 1, (uint64_t)&v42))
  {
    char v22 = 0;
    goto LABEL_34;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v28 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349056;
    uint64_t v47 = v15;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, update failed", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_63;
    }
    goto LABEL_78;
  }
LABEL_33:
  char v22 = 1;
LABEL_34:
  *(unsigned char *)(a7 + 897) = 0;
  if (a5)
  {
    int v29 = sub_10135FA2C(a1, a7);
    *(unsigned char *)(a7 + 897) = v29;
    if (v29)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      BOOL v30 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v47 = v15;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,using route hints", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v40 = 134349056;
        uint64_t v41 = v15;
        int v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
    }
  }
  if (v22)
  {
LABEL_52:
    uint64_t v33 = 1;
    if (!v13) {
      return v33;
    }
    goto LABEL_60;
  }
  v39[0] = v14;
  v39[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v31 = sub_101353EDC(a7, v39, a3);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if ((v31 & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v32 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v47 = v15;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prepareCandidates failed", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v40 = 134349056;
      uint64_t v41 = v15;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    goto LABEL_52;
  }
LABEL_59:
  uint64_t v33 = 0;
  if (v13) {
LABEL_60:
  }
    sub_1000DB0A0(v13);
  return v33;
}

void sub_10135AE50(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10135AEA0(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1[26];
  if (v6)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 104))(v6)
      && *(unsigned char *)(a4 + 897) != 0
      && a1[239] != a1[238]
      && *(unsigned char *)(a4 + 882) != 0)
    {
      if (*(void *)(a4 + 256))
      {
        if (*(unsigned char *)(a3 + 504))
        {
          uint64_t v13 = a3 + 120;
          if (*(void *)(a3 + 120))
          {
            double v14 = *(double *)(a5 + 192);
            if (v14 > 25.0 || v14 <= 0.0 || *(double *)(a5 + 104) < 0.0)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              long long v19 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v20 = *(void *)(a5 + 8);
                double v21 = *(double *)(a5 + 192);
                *(_DWORD *)long long buf = 134349312;
                uint64_t v58 = v20;
                __int16 v59 = 2050;
                long double v60 = v21;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,checkForUserDeviationFromRoute skipped,courseUnc,%{public}.2lf", buf, 0x16u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                uint64_t v22 = *(void *)(a5 + 8);
                uint64_t v23 = *(void *)(a5 + 192);
                int v46 = 134349312;
                uint64_t v47 = v22;
                __int16 v48 = 2050;
                uint64_t v49 = v23;
                uint64_t v24 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v24);
                if (v24 != (char *)buf) {
                  free(v24);
                }
              }
            }
            else
            {
              uint64_t v15 = *(void *)(a5 + 8);
              sub_10135A3AC((uint64_t)&v46);
              char v16 = sub_10135A458((uint64_t)a1, a2, a3, a5, 0, 0, (uint64_t)&v46);
              if (v56) {
                char v17 = v16;
              }
              else {
                char v17 = 1;
              }
              if ((v17 & 1) == 0 && v50)
              {
                for (uint64_t i = *(void *)(a4 + 344); i != *(void *)(a4 + 352); i += 72)
                {
                  if (*(_DWORD *)(i + 64) == 1) {
                    goto LABEL_37;
                  }
                }
                uint64_t i = 0;
LABEL_37:
                uint64_t v25 = v54;
                if (v54 != v55)
                {
                  while (*(_DWORD *)(v25 + 64) != 1)
                  {
                    v25 += 72;
                    if (v25 == v55) {
                      goto LABEL_62;
                    }
                  }
                  if (i)
                  {
                    double v26 = *(double *)i;
                    if (*(double *)i > 0.0)
                    {
                      double v27 = *(double *)v25;
                      double v28 = (double *)(a1 + 21);
                      long double v29 = sub_101357CE4(a4 + 256, v28, v13);
                      long double v30 = sub_101357CE4((uint64_t)&v50, v28, v13);
                      double v31 = v27 / v26;
                      double v32 = fmod(*(double *)(a5 + 104) - v51, 360.0);
                      if (v32 < 0.0) {
                        double v32 = v32 + 360.0;
                      }
                      if (v32 > 180.0) {
                        double v32 = v32 + -360.0;
                      }
                      if (qword_102419430 != -1)
                      {
                        double v43 = v32;
                        dispatch_once(&qword_102419430, &stru_1023218C0);
                        double v32 = v43;
                      }
                      double v33 = fabs(v31);
                      double v34 = fabs(v32);
                      BOOL v35 = qword_102419438;
                      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v36 = *(void *)(a4 + 288);
                        uint64_t v37 = *(void *)(a4 + 296);
                        double v38 = *(float *)(a4 + 280);
                        uint64_t v39 = **(void **)(a4 + 256);
                        uint64_t v40 = *v50;
                        *(_DWORD *)long long buf = 134352129;
                        uint64_t v58 = v15;
                        __int16 v59 = 2050;
                        long double v60 = v29;
                        __int16 v61 = 2050;
                        long double v62 = v30;
                        __int16 v63 = 2050;
                        double v64 = v34;
                        __int16 v65 = 2050;
                        double v66 = v33;
                        __int16 v67 = 2049;
                        uint64_t v68 = v36;
                        __int16 v69 = 2049;
                        uint64_t v70 = v37;
                        __int16 v71 = 2050;
                        double v72 = v38;
                        __int16 v73 = 2049;
                        uint64_t v74 = v39;
                        __int16 v75 = 2049;
                        uint64_t v76 = v52;
                        __int16 v77 = 2049;
                        uint64_t v78 = v53;
                        __int16 v79 = 2050;
                        double v80 = v51;
                        __int16 v81 = 2049;
                        uint64_t v82 = v40;
                        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf,courseDiffNewAndRawSolution,%{public}.2lf,factor,%{public}.5lf,bestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld,newBestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld", buf, 0x84u);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419430 != -1) {
                          dispatch_once(&qword_102419430, &stru_1023218C0);
                        }
                        unint64_t v44 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v44);
                        if (v44 != (char *)buf) {
                          free(v44);
                        }
                      }
                      if (v34 < 25.0 && v33 >= 2.0)
                      {
                        if (qword_102419430 != -1) {
                          dispatch_once(&qword_102419430, &stru_1023218C0);
                        }
                        int v42 = qword_102419438;
                        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)long long buf = 134349568;
                          uint64_t v58 = v15;
                          __int16 v59 = 2050;
                          long double v60 = v33;
                          __int16 v61 = 2050;
                          long double v62 = v34;
                          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints,local,factor,%{public}.5lf,courseDiffNewAndRawSolution,%{public}.2lf", buf, 0x20u);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419430 != -1) {
                            dispatch_once(&qword_102419430, &stru_1023218C0);
                          }
                          unint64_t v45 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v45);
                          if (v45 != (char *)buf) {
                            free(v45);
                          }
                        }
                        sub_10135FB04(a4, (long long *)&v46);
                      }
                    }
                  }
                }
              }
LABEL_62:
              sub_10136F8D4((uint64_t)&v46);
            }
          }
        }
      }
    }
  }
}

void sub_10135B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_10135B6A4(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a4 + 882)) {
    BOOL v5 = *(unsigned char *)(a3 + 504) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return;
  }
  uint64_t v7 = a3 + 120;
  if (!*(void *)(a3 + 120)) {
    return;
  }
  uint64_t v12 = *(void *)(a1 + 208);
  if (v12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 104))(v12)) {
      double v13 = 6.0;
    }
    else {
      double v13 = 10.0;
    }
  }
  else
  {
    double v13 = 10.0;
  }
  double v14 = *(double *)(a5 + 24);
  double v15 = -1.0;
  if (v14 >= 0.0)
  {
    double v16 = *(double *)(a3 + 264);
    double v17 = vabdd_f64(v14, v16);
    if (v16 >= 0.0) {
      double v15 = v17;
    }
    else {
      double v15 = -1.0;
    }
  }
  uint64_t v18 = *(void *)(a5 + 8);
  double v19 = sub_101357CE4(a4 + 256, (double *)(a1 + 168), v7);
  double v20 = *(double *)(a4 + 856) * 0.2;
  if (v20 < 0.1) {
    double v20 = 0.1;
  }
  if (v20 > 0.4) {
    double v20 = 0.4;
  }
  if (v19 < v20) {
    return;
  }
  if (sub_100178D5C(a1 + 1832, *(double *)(a4 + 400), 6.0))
  {
    double v21 = *(double *)(a4 + 856) * 3.0;
    BOOL v22 = v19 <= v21 || *(void *)(a4 + 256) == 0;
    if (!v22 && !*(unsigned char *)(a4 + 881))
    {
      float v23 = *(float *)(a3 + 144);
      double v24 = fmod((float)(v23 - *(float *)(a4 + 280)), 360.0);
      if (v24 < 0.0) {
        double v24 = v24 + 360.0;
      }
      if (v24 <= 180.0) {
        double v25 = v24;
      }
      else {
        double v25 = v24 + -360.0;
      }
      uint64_t v92 = 0;
      double v93 = 0.0;
      sub_101172040((double *)(a1 + 168), &v93, (double *)&v92, *(double *)(a4 + 288), *(double *)(a4 + 296), 0.0, v23, *(double *)(a3 + 152), *(double *)(a3 + 160));
      double v26 = fabs(v25);
      double v27 = *(double *)(a1 + 2200);
      if (v27 <= 5.0)
      {
        if (v27 >= 10.0)
        {
          BOOL v28 = 1;
          goto LABEL_40;
        }
      }
      else
      {
        BOOL v28 = 1;
        if (v27 >= 10.0 || fabs(*(double *)(a4 + 616)) < 7.0)
        {
LABEL_40:
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          long double v29 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v30 = *(void *)(a1 + 2200);
            double v31 = fabs(*(double *)(a4 + 616));
            uint64_t v32 = *(void *)(a4 + 288);
            uint64_t v33 = *(void *)(a4 + 296);
            *(_DWORD *)long long buf = 134350849;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)&buf[14] = v28;
            *(_WORD *)&unsigned char buf[18] = 2050;
            *(void *)&buf[20] = v30;
            *(_WORD *)&unsigned char buf[28] = 2050;
            *(double *)&buf[30] = v31;
            *(_WORD *)&buf[38] = 2050;
            *(double *)&unsigned char buf[40] = v26;
            *(_WORD *)&unsigned char buf[48] = 2050;
            *(double *)&buf[50] = v93;
            *(_WORD *)&buf[58] = 2049;
            *(void *)&buf[60] = v32;
            __int16 v122 = 2049;
            uint64_t v123 = v33;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,shouldNotPropagateFromLastSnap,%{public}d,consecutiveAmbiguityEpochCount,%{public}.1lf,deltaAz,%{public}.2lf,courseDiffWithPriorSolution,%{public}.2lf,acrossTrack,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf", buf, 0x4Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            uint64_t v80 = *(void *)(a1 + 2200);
            double v81 = fabs(*(double *)(a4 + 616));
            uint64_t v82 = *(void *)(a4 + 288);
            uint64_t v83 = *(void *)(a4 + 296);
            *(_DWORD *)uint64_t v94 = 134350849;
            *(void *)&v94[4] = v18;
            __int16 v95 = 1026;
            *(_DWORD *)long long v96 = v28;
            *(_WORD *)&v96[4] = 2050;
            *(void *)&v96[6] = v80;
            *(_WORD *)&v96[14] = 2050;
            *(double *)&v96[16] = v81;
            *(_WORD *)&v96[24] = 2050;
            double v97 = v26;
            *(_WORD *)double v98 = 2050;
            *(double *)&v98[2] = v93;
            __int16 v99 = 2049;
            uint64_t v100 = v82;
            __int16 v101 = 2049;
            uint64_t v102 = v83;
            long long v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v84);
            if (v84 != buf) {
              free(v84);
            }
          }
          if (!v28)
          {
            sub_100FFFA78((uint64_t)v94, v7);
            uint64_t v56 = *(void *)(a1 + 208);
            char v57 = *(std::__shared_weak_count **)(a1 + 216);
            if (v57) {
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v58 = &qword_102419000;
            if (v56)
            {
              int v109 = 0;
              *(void *)long long buf = buf;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&uint8_t buf[16] = 0;
              (*(void (**)(uint64_t, unsigned char *, unsigned char *, int *, double, double))(*(void *)v56 + 56))(v56, v94, buf, &v109, *(double *)v98, *(double *)(a4 + 856));
              sub_10017FF2C((uint64_t *)buf);
            }
            if (*(void *)v94)
            {
              uint64_t v59 = v18;
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              long double v60 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v61 = *(void *)(a4 + 288);
                uint64_t v62 = *(void *)(a4 + 296);
                *(_DWORD *)long long buf = 134350337;
                *(void *)&uint8_t buf[4] = v18;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(double *)&buf[14] = v19;
                *(_WORD *)&buf[22] = 2049;
                *(void *)&unsigned char buf[24] = v61;
                *(_WORD *)&unsigned char buf[32] = 2049;
                *(void *)&buf[34] = v62;
                *(_WORD *)&buf[42] = 2049;
                *(void *)&buf[44] = *(void *)&v96[18];
                *(_WORD *)&buf[52] = 2049;
                *(double *)&buf[54] = v97;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replaced with previous propagated solution,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf,newLL,%{private}.7lf,%{private}.7lf", buf, 0x3Eu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                double v87 = *(double *)(a4 + 288);
                uint64_t v88 = *(void *)(a4 + 296);
                int v109 = 134350337;
                uint64_t v110 = v18;
                __int16 v111 = 2050;
                double v112 = v19;
                __int16 v113 = 2049;
                double v114 = v87;
                __int16 v115 = 2049;
                uint64_t v116 = v88;
                __int16 v117 = 2049;
                uint64_t v118 = *(void *)&v96[18];
                __int16 v119 = 2049;
                double v120 = v97;
                uint64_t v89 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v89);
                if (v89 != buf) {
                  free(v89);
                }
                uint64_t v59 = v18;
                uint64_t v58 = &qword_102419000;
              }
              sub_100FFFA78((uint64_t)&v109, a4 + 256);
              sub_1011C9F64(a4 + 256, (uint64_t *)v94);
              if (sub_10134E518(a4 + 136))
              {
                *(unsigned char *)(a4 + 881) = 1;
                *(unsigned char *)(a4 + 848) = 1;
              }
              else
              {
                sub_1011C9F64(a4 + 256, (uint64_t *)&v109);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                uint64_t v76 = v58[135];
                if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 134349056;
                  *(void *)&uint8_t buf[4] = v59;
                  _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as unable to fillCrumb", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1023218C0);
                  }
                  int v107 = 134349056;
                  uint64_t v108 = v18;
                  char v91 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v91);
                  if (v91 != buf) {
                    free(v91);
                  }
                }
              }
              sub_100FFFC10(&v109);
            }
            else
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              uint64_t v74 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 134349056;
                *(void *)&uint8_t buf[4] = v18;
                _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as returned particle has invalid road", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                int v109 = 134349056;
                uint64_t v110 = v18;
                __int16 v75 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v75);
                if (v75 != buf) {
                  free(v75);
                }
              }
            }
            if (v57) {
              sub_1000DB0A0(v57);
            }
            sub_100FFFC10(v94);
            return;
          }
          goto LABEL_46;
        }
      }
      BOOL v28 = fabs(v93) < v21 && v26 < 30.0;
      goto LABEL_40;
    }
  }
LABEL_46:
  if (v19 < 0.0 || v15 > 3.0 || v19 < 15.0 || v19 < v13 * *(double *)(a4 + 856)) {
    return;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v34 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    *(_DWORD *)uint64_t v94 = 134349312;
    *(void *)&v94[4] = v18;
    __int16 v95 = 2050;
    *(double *)long long v96 = v19;
    __int16 v77 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v77);
    if (v77 != buf) {
      free(v77);
    }
  }
  sub_10135A3AC((uint64_t)v94);
  char v35 = sub_10135A458(a1, a2, a3, a5, 1, 1, (uint64_t)v94);
  if (v106) {
    char v36 = v35;
  }
  else {
    char v36 = 1;
  }
  if ((v36 & 1) == 0)
  {
    double v46 = sub_101357CE4((uint64_t)v103, (double *)(a1 + 168), v7);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v47 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349568;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v46;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v109 = 134349568;
      uint64_t v110 = v18;
      __int16 v111 = 2050;
      double v112 = v19;
      __int16 v113 = 2050;
      double v114 = v46;
      uint64_t v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v78);
      if (v78 != buf) {
        free(v78);
      }
    }
    if (v46 < v19 * 0.6)
    {
      sub_10135FB04(a4, (long long *)v94);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v55 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_173;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_225;
      }
      goto LABEL_234;
    }
    if (vabdd_f64(v46, v19) < 2.0)
    {
      sub_1011C9EF0((uint64_t *)(a4 + 256), (uint64_t)buf);
      sub_1011C9EF0(v103, (uint64_t)&v109);
      if (!sub_100FFD530((uint64_t)buf, (uint64_t)&v109))
      {
        float v48 = *(float *)(a3 + 144);
        double v49 = fmod((float)(v48 - *(float *)(a4 + 280)), 360.0);
        if (v49 < 0.0) {
          double v49 = v49 + 360.0;
        }
        if (v49 > 180.0) {
          double v49 = v49 + -360.0;
        }
        double v50 = fabs(v49);
        double v51 = fmod((float)(v48 - v104), 360.0);
        if (v51 < 0.0) {
          double v51 = v51 + 360.0;
        }
        if (v51 > 180.0) {
          double v51 = v51 + -360.0;
        }
        if (v50 > 60.0 && fabs(v51) < 10.0)
        {
          sub_10135FB04(a4, (long long *)v94);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v52 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134349056;
            *(void *)&uint8_t buf[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            int v109 = 134349056;
            uint64_t v110 = v18;
            uint64_t v53 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v53);
            if (v53 != buf) {
              free(v53);
            }
          }
        }
      }
    }
  }
  sub_10136F8D4((uint64_t)v94);
  if (*(unsigned char *)(a4 + 897))
  {
    uint64_t v37 = *(double **)(a1 + 1904);
    double v38 = *(double **)(a1 + 1912);
    if (v37 == v38)
    {
      double v40 = -1.0;
      double v39 = -1.0;
    }
    else
    {
      double v39 = -1.0;
      double v40 = -1.0;
      do
      {
        double v41 = sub_1000F1648((double *)(a1 + 168), *(double *)(a3 + 152), *(double *)(a3 + 160), v37[10], v37[11], 0.0);
        if (v41 < v39 || v39 < 0.0) {
          double v39 = v41;
        }
        double v43 = fmod(v37[13] - *(float *)(a3 + 144), 360.0);
        if (v43 < 0.0) {
          double v43 = v43 + 360.0;
        }
        if (v43 > 180.0) {
          double v43 = v43 + -360.0;
        }
        double v44 = fabs(v43);
        if (v44 < v40 || v40 < 0.0) {
          double v40 = v44;
        }
        v37 += 33;
      }
      while (v37 != v38);
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    __int16 v63 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349568;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v40;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v39;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,distanceDiffBetweenPriorSolution,%{public}.2lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)uint64_t v94 = 134349568;
      *(void *)&v94[4] = v18;
      __int16 v95 = 2050;
      *(double *)long long v96 = v40;
      *(_WORD *)&v96[8] = 2050;
      *(double *)&v96[10] = v39;
      __int16 v79 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v79);
      if (v79 != buf) {
        free(v79);
      }
    }
    if (v40 >= 30.0 || (v39 >= 4.0 ? (BOOL v64 = v39 < *(double *)(a4 + 856) + *(double *)(a4 + 856)) : (BOOL v64 = 1), !v64))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      __int16 v67 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v19;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        *(_DWORD *)uint64_t v94 = 134349312;
        *(void *)&v94[4] = v18;
        __int16 v95 = 2050;
        *(double *)long long v96 = v19;
        long long v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v85);
        if (v85 != buf) {
          free(v85);
        }
      }
      sub_10135A3AC((uint64_t)v94);
      char v68 = sub_10135A458(a1, a2, a3, a5, 0, 1, (uint64_t)v94);
      if (v106) {
        char v69 = v68;
      }
      else {
        char v69 = 1;
      }
      uint64_t v70 = v18;
      if (v69) {
        goto LABEL_173;
      }
      double v71 = sub_101357CE4((uint64_t)v103, (double *)(a1 + 168), v7);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v72 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349568;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v71;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v109 = 134349568;
        uint64_t v110 = v18;
        __int16 v111 = 2050;
        double v112 = v19;
        __int16 v113 = 2050;
        double v114 = v71;
        long long v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
        uint64_t v70 = v18;
      }
      if (v71 >= v105 * 1.5 || v71 <= v105 * 0.1) {
        goto LABEL_173;
      }
      sub_10135FB04(a4, (long long *)v94);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      __int16 v73 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v70;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_173;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_225:
        int v109 = 134349056;
        uint64_t v110 = v18;
        uint64_t v90 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v90);
        if (v90 != buf) {
          free(v90);
        }
LABEL_173:
        sub_10136F8D4((uint64_t)v94);
        return;
      }
LABEL_234:
      dispatch_once(&qword_102419430, &stru_1023218C0);
      goto LABEL_225;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    __int16 v65 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_150;
      }
      goto LABEL_233;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v54 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_150:
        *(_DWORD *)uint64_t v94 = 134349056;
        *(void *)&v94[4] = v18;
        double v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v66);
        if (v66 != buf) {
          free(v66);
        }
        return;
      }
LABEL_233:
      dispatch_once(&qword_102419430, &stru_1023218C0);
      goto LABEL_150;
    }
  }
}

void sub_10135D1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10136F8D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10135D238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 48) == *(void *)(a2 + 40)) {
    return 0;
  }
  double v4 = *(double *)(a2 + 384);
  if (*(unsigned char *)(a2 + 881))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    BOOL v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous check,already ambiguous", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_220;
    }
LABEL_255:
    dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_220:
    *(_DWORD *)__int16 v161 = 134349056;
    *(double *)&v161[4] = v4;
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v55);
LABEL_221:
    if (v55 != buf) {
      free(v55);
    }
    return 1;
  }
  int v9 = *(_DWORD *)(a2 + 792) - 2;
  double v10 = 10.0;
  if (v9 <= 4) {
    double v10 = dbl_101DB4718[v9];
  }
  double v11 = *(double *)(a2 + 456) + *(double *)(a2 + 456);
  if (v11 >= v10) {
    double v11 = v10;
  }
  if (v11 >= 7.0) {
    double v12 = v11;
  }
  else {
    double v12 = 7.0;
  }
  double v13 = fabs(*(double *)(a2 + 632));
  if (*(unsigned char *)(a2 + 882))
  {
    sub_10076AE78((char *)(a1 + 2120), *(double *)(a2 + 608));
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(a1 + 2144);
      uint64_t v16 = *(void *)(a2 + 608);
      uint64_t v17 = *(void *)(a1 + 2152);
      uint64_t v18 = *(double **)(a1 + 2184);
      double v19 = *(double **)(a1 + 2176);
      unint64_t v20 = v18 - v19;
      double v21 = 0.0;
      if (v18 == v19)
      {
        double v32 = 0.0;
        double v33 = 0.0;
      }
      else
      {
        BOOL v22 = *(double **)(a1 + 2176);
        do
        {
          double v23 = *v22++;
          double v21 = v21 + v23;
        }
        while (v22 != v18);
        uint64_t v24 = 60;
        if (v20 < 0x3C) {
          uint64_t v24 = v20;
        }
        double v25 = 0.0;
        double v26 = 0.0;
        if (v24)
        {
          double v27 = *(double **)(a1 + 2176);
          do
          {
            double v28 = *v27++;
            double v26 = v26 + v28;
            --v24;
          }
          while (v24);
        }
        double v29 = (double)v20;
        uint64_t v30 = 30;
        if (v20 < 0x1E) {
          uint64_t v30 = v20;
        }
        if (v30)
        {
          double v25 = 0.0;
          do
          {
            double v31 = *v19++;
            double v25 = v25 + v31;
            --v30;
          }
          while (v30);
        }
        double v32 = v21 / v29;
        double v21 = v26 / v29;
        double v33 = v25 / v29;
      }
      int v34 = *(unsigned __int8 *)(a2 + 640);
      double v35 = fabs(*(double *)(a2 + 616));
      BOOL v36 = *(void *)(a1 + 2088) != 0;
      BOOL v37 = *(void *)(a1 + 2080) != 0;
      *(_DWORD *)long long buf = 134352384;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v15;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v16;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v17;
      *(_WORD *)&buf[38] = 2050;
      *(double *)&unsigned char buf[40] = v32;
      *(_WORD *)&unsigned char buf[48] = 2050;
      *(void *)&buf[50] = v20;
      *(_WORD *)&buf[58] = 2050;
      *(double *)long long v178 = v21;
      *(_WORD *)&v178[8] = 2050;
      *(double *)long long v179 = v33;
      *(_WORD *)&v179[8] = 1026;
      int v180 = v34;
      __int16 v181 = 2050;
      double v182 = v35;
      __int16 v183 = 2050;
      double v184 = v13;
      __int16 v185 = 2050;
      double v186 = v12;
      __int16 v187 = 1026;
      BOOL v188 = v36;
      __int16 v189 = 1026;
      BOOL v190 = v37;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,AverageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf,avfBuffer,%{public}.4lf,avfBufferCnt,%{public}zu,avfBuffer60,%{public}.4lf,avfBuffer30,%{public}.4lf,isUsable,%{public}d,deltaAz,%{public}.2lf,fabsAT,%{public}.2lf,threshold,%{public}.2lf,usingAPI,%{public}d,usingBuffer,%{public}d", buf, 0x7Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v129 = *(_DWORD *)(a1 + 2144);
      uint64_t v130 = *(void *)(a2 + 608);
      uint64_t v131 = *(void *)(a1 + 2152);
      uint64_t v132 = *(double **)(a1 + 2184);
      double v133 = *(double **)(a1 + 2176);
      unint64_t v134 = v132 - v133;
      double v135 = 0.0;
      if (v132 == v133)
      {
        double v146 = 0.0;
        double v147 = 0.0;
      }
      else
      {
        uint64_t v136 = *(double **)(a1 + 2176);
        do
        {
          double v137 = *v136++;
          double v135 = v135 + v137;
        }
        while (v136 != v132);
        uint64_t v138 = 60;
        if (v134 < 0x3C) {
          uint64_t v138 = v134;
        }
        double v139 = 0.0;
        double v140 = 0.0;
        if (v138)
        {
          __int16 v141 = *(double **)(a1 + 2176);
          do
          {
            double v142 = *v141++;
            double v140 = v140 + v142;
            --v138;
          }
          while (v138);
        }
        double v143 = (double)v134;
        uint64_t v144 = 30;
        if (v134 < 0x1E) {
          uint64_t v144 = v134;
        }
        if (v144)
        {
          double v139 = 0.0;
          do
          {
            double v145 = *v133++;
            double v139 = v139 + v145;
            --v144;
          }
          while (v144);
        }
        double v146 = v135 / v143;
        double v135 = v140 / v143;
        double v147 = v139 / v143;
      }
      int v148 = *(unsigned __int8 *)(a2 + 640);
      double v149 = fabs(*(double *)(a2 + 616));
      BOOL v150 = *(void *)(a1 + 2088) != 0;
      BOOL v151 = *(void *)(a1 + 2080) != 0;
      *(_DWORD *)__int16 v161 = 134352384;
      *(double *)&v161[4] = v4;
      __int16 v162 = 1026;
      *(_DWORD *)long long v163 = v129;
      *(_WORD *)&v163[4] = 2050;
      *(void *)&v163[6] = v130;
      *(_WORD *)&v163[14] = 2050;
      *(void *)&v163[16] = v131;
      *(_WORD *)&v163[24] = 2050;
      *(double *)&v163[26] = v146;
      *(_WORD *)&v163[34] = 2050;
      *(void *)&v163[36] = v134;
      *(_WORD *)&v163[44] = 2050;
      *(double *)long long v164 = v135;
      *(_WORD *)&v164[8] = 2050;
      *(double *)char v165 = v147;
      *(_WORD *)&v165[8] = 1026;
      int v166 = v148;
      __int16 v167 = 2050;
      double v168 = v149;
      __int16 v169 = 2050;
      double v170 = v13;
      __int16 v171 = 2050;
      double v172 = v12;
      __int16 v173 = 1026;
      BOOL v174 = v150;
      __int16 v175 = 1026;
      BOOL v176 = v151;
      long long v152 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v152);
      if (v152 != buf) {
        free(v152);
      }
    }
  }
  if (!*(void *)(a1 + 2088) && !*(void *)(a1 + 2080)) {
    return 0;
  }
  if (!sub_100178D5C(a1 + 1832, *(double *)(a2 + 400), 6.0))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v39 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,routeHintsAvailable,1", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_243;
    }
    goto LABEL_256;
  }
  if (!*(unsigned char *)(a2 + 640))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v40 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,isSnapUsable,0", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_243;
    }
    goto LABEL_256;
  }
  if (sub_1004BABDC(*(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 528), *(double *)(a2 + 536), 0.0000001))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v38 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,sameAsRawGPS,1", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_243;
    }
LABEL_256:
    dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_243:
    *(_DWORD *)__int16 v161 = 134349056;
    *(double *)&v161[4] = v4;
    double v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v50);
LABEL_244:
    if (v50 != buf) {
      free(v50);
    }
    return 0;
  }
  if (sub_101362868(a1, a2, a3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v42 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,isHarshDigitizationCaseAtTurns,1", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_220;
    }
    goto LABEL_255;
  }
  if (v13 <= v12)
  {
    double v51 = *(double *)(a1 + 2200);
    if (v51 > 3.0 && v51 < 20.0 && *(unsigned char *)(a3 + 505) && v13 > v12 * 0.85)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v52 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v53 = *(void *)(a1 + 2200);
        *(_DWORD *)long long buf = 134349824;
        *(double *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v12 * 0.85;
        *(_WORD *)&unsigned char buf[32] = 2050;
        *(void *)&buf[34] = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1, previous solution was ambiguous and AT,%{public}.1lf,is over scaled threshold,%{public}.1lf,consecutiveAmbCnt,%{public}1lf", buf, 0x2Au);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v54 = *(void *)(a1 + 2200);
      *(_DWORD *)__int16 v161 = 134349824;
      *(double *)&v161[4] = v4;
      __int16 v162 = 2050;
      *(double *)long long v163 = v13;
      *(_WORD *)&v163[8] = 2050;
      *(double *)&v163[10] = v12 * 0.85;
      *(_WORD *)&v163[18] = 2050;
      *(void *)&v163[20] = v54;
      uint64_t v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v55);
      goto LABEL_221;
    }
    if (!*(unsigned char *)(a2 + 640)) {
      goto LABEL_129;
    }
    long double v60 = *(double **)(a1 + 2184);
    uint64_t v61 = *(double **)(a1 + 2176);
    if (v60 == v61) {
      goto LABEL_129;
    }
    uint64_t v62 = v60 - v61;
    double v63 = 0.0;
    do
    {
      double v64 = *v61++;
      double v63 = v63 + v64;
    }
    while (v61 != v60);
    if (v63 / (double)(unint64_t)v62 <= 1.2)
    {
LABEL_129:
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      char v69 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349568;
        *(double *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v12;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,lowAcrossTrack,%{public}.1lf,threshold,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)__int16 v161 = 134349568;
      *(double *)&v161[4] = v4;
      __int16 v162 = 2050;
      *(double *)long long v163 = v13;
      *(_WORD *)&v163[8] = 2050;
      *(double *)&v163[10] = v12;
      double v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v50);
      goto LABEL_244;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    __int16 v65 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v66 = *(_DWORD *)(a1 + 2144);
      uint64_t v67 = *(void *)(a2 + 608);
      uint64_t v68 = *(void *)(a1 + 2152);
      *(_DWORD *)long long buf = 134349824;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v66;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v67;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v68;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,averageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v153 = *(_DWORD *)(a1 + 2144);
      uint64_t v154 = *(void *)(a2 + 608);
      uint64_t v155 = *(void *)(a1 + 2152);
      *(_DWORD *)__int16 v161 = 134349824;
      *(double *)&v161[4] = v4;
      __int16 v162 = 1026;
      *(_DWORD *)long long v163 = v153;
      *(_WORD *)&v163[4] = 2050;
      *(void *)&v163[6] = v154;
      *(_WORD *)&v163[14] = 2050;
      *(void *)&v163[16] = v155;
      long long v156 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v156);
      if (v156 != buf) {
        free(v156);
      }
    }
    uint64_t v6 = 1;
    if (!*(unsigned char *)(a3 + 504) || *(unsigned char *)(a3 + 505)) {
      return v6;
    }
  }
  if (*(double *)(a2 + 568) > 0.0)
  {
    double v43 = *(double *)(a2 + 480);
    if (v43 >= 0.0)
    {
      double v44 = fmod(*(double *)(a2 + 680) - v43, 360.0);
      if (v44 < 0.0) {
        double v44 = v44 + 360.0;
      }
      if (v44 > 180.0) {
        double v44 = v44 + -360.0;
      }
      if ((!*(unsigned char *)(a3 + 505) || *(double *)(a1 + 2200) < 5.0) && *(double *)(a2 + 456) < 10.0)
      {
        double v45 = fabs(v44);
        if (v45 < 18.0 && v13 <= v12 * 1.5)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v47 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v48 = *(void *)(a2 + 456);
            *(_DWORD *)long long buf = 134350080;
            *(double *)&uint8_t buf[4] = v4;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&buf[14] = v45;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&unsigned char buf[24] = v13;
            *(_WORD *)&unsigned char buf[32] = 2050;
            *(void *)&buf[34] = v48;
            *(_WORD *)&buf[42] = 2050;
            *(double *)&buf[44] = v12 * 1.5;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,overridden based on course matching,%{public}.2lf,AT,%{public}.2lf,hunc,%{public}.2lf,threshold,%{public}.2lf", buf, 0x34u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v49 = *(void *)(a2 + 456);
          *(_DWORD *)__int16 v161 = 134350080;
          *(double *)&v161[4] = v4;
          __int16 v162 = 2050;
          *(double *)long long v163 = v45;
          *(_WORD *)&v163[8] = 2050;
          *(double *)&v163[10] = v13;
          *(_WORD *)&v163[18] = 2050;
          *(void *)&v163[20] = v49;
          *(_WORD *)&v163[28] = 2050;
          *(double *)&v163[30] = v12 * 1.5;
          double v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v50);
          goto LABEL_244;
        }
      }
    }
  }
  uint64_t v56 = *(void *)(a2 + 256);
  if (v56 && (*(unsigned char *)(a1 + 12) || (*(_DWORD *)(v56 + 20) & 0xFFFFFFFE) == 8))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    char v57 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v58 = *(_DWORD *)(*(void *)(a2 + 256) + 20);
      *(_DWORD *)long long buf = 134349312;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,skipping building checks for unknown roads,%{public}d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v59 = *(_DWORD *)(*(void *)(a2 + 256) + 20);
    *(_DWORD *)__int16 v161 = 134349312;
    *(double *)&v161[4] = v4;
    __int16 v162 = 1026;
    *(_DWORD *)long long v163 = v59;
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v55);
    goto LABEL_221;
  }
  if (*(double *)(a2 + 456) + 30.0 <= 45.0) {
    double v70 = *(double *)(a2 + 456) + 30.0;
  }
  else {
    double v70 = 45.0;
  }
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  double v71 = *(double **)(a1 + 2080);
  if (v71)
  {
    memset(buf, 0, 24);
    sub_100D284CC(v71, (uint64_t *)buf, *(double *)(a2 + 432), *(double *)(a2 + 440), v70);
    sub_101370F84(&v158, v158, *(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 6);
    sub_100D27EB0(*(void *)(a1 + 2080), 0, 1, v4, *(CLLocationDegrees *)(a2 + 432), *(CLLocationDegrees *)(a2 + 440), *(double *)(*(void *)(a1 + 2080) + 176));
    *(void *)__int16 v161 = buf;
    sub_101370EE0((void ***)v161);
  }
  else
  {
    sub_100ECCEEC(*(void *)(a1 + 2088), &v158, a2 + 376, v70);
  }
  uint64_t v72 = v158;
  uint64_t v73 = v159;
  if ((unint64_t)(v159 - v158) < 0x80)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v74 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349312;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = (unint64_t)(v159 - v158) >> 6;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,fewerThan2Buildings,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)__int16 v161 = 134349312;
      *(double *)&v161[4] = v4;
      __int16 v162 = 1026;
      *(_DWORD *)long long v163 = (unint64_t)(v159 - v158) >> 6;
      __int16 v75 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v75);
      goto LABEL_249;
    }
    goto LABEL_207;
  }
  if (v158 == v159)
  {
    int v76 = 0;
    int v77 = 0;
    goto LABEL_202;
  }
  double v157 = v13;
  int v76 = 0;
  int v77 = 0;
  do
  {
    __int16 v79 = *(void **)(v72 + 8);
    uint64_t v78 = *(void **)(v72 + 16);
    long double v80 = -1.0;
    if (v79 != v78)
    {
      double v81 = 0.0;
      double v82 = 0.0;
      double v83 = 0.0;
      do
      {
        long double v84 = *(double *)v79;
        long double v85 = *((double *)v79 + 1);
        v79 += 2;
        double v86 = atan2(v84, v85);
        if (v86 < 0.0) {
          double v86 = v86 + 6.28318531;
        }
        __double2 v87 = __sincos_stret(v86);
        double v81 = v81 + v87.__cosval;
        double v82 = v82 + v87.__sinval;
        double v83 = v83 + 1.0;
      }
      while (v79 != v78);
      if (v83 > 0.0)
      {
        long double v88 = atan2(v82 / v83, v81 / v83);
        sub_100142F58(v88 * 57.2957795);
        long double v80 = v89;
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v90 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v91 = *(void *)(a2 + 432);
      uint64_t v92 = *(void *)(a2 + 440);
      uint64_t v93 = *(void *)(a2 + 480);
      *(_DWORD *)long long buf = 134351105;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = (unint64_t)(v159 - v158) >> 6;
      *(_WORD *)&unsigned char buf[18] = 2049;
      *(void *)&buf[20] = v91;
      *(_WORD *)&unsigned char buf[28] = 2049;
      *(void *)&buf[30] = v92;
      *(_WORD *)&buf[38] = 2050;
      *(void *)&unsigned char buf[40] = v93;
      *(_WORD *)&unsigned char buf[48] = 1026;
      *(_DWORD *)&buf[50] = v77;
      *(_WORD *)&buf[54] = 1026;
      *(_DWORD *)&buf[56] = v76;
      *(_WORD *)long long v178 = 2050;
      *(double *)&v178[2] = v70;
      *(_WORD *)long long v179 = 2050;
      *(long double *)&v179[2] = v80;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,-1,buildingCount,%{public}d,latitude,%{private}.7lf,longitude,%{private}.7lf,course,%{public}.2lf,rightSideCount,%{public}d,leftSideCount,%{public}d,searchDistance,%{public}.2lf,averageBuildingDirection,%{public}.2lf", buf, 0x50u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v122 = *(void *)(a2 + 432);
      uint64_t v123 = *(void *)(a2 + 440);
      uint64_t v124 = *(void *)(a2 + 480);
      *(_DWORD *)__int16 v161 = 134351105;
      *(double *)&v161[4] = v4;
      __int16 v162 = 1026;
      *(_DWORD *)long long v163 = (unint64_t)(v159 - v158) >> 6;
      *(_WORD *)&v163[4] = 2049;
      *(void *)&v163[6] = v122;
      *(_WORD *)&v163[14] = 2049;
      *(void *)&v163[16] = v123;
      *(_WORD *)&v163[24] = 2050;
      *(void *)&v163[26] = v124;
      *(_WORD *)&v163[34] = 1026;
      *(_DWORD *)&v163[36] = v77;
      *(_WORD *)&v163[40] = 1026;
      *(_DWORD *)&v163[42] = v76;
      *(_WORD *)long long v164 = 2050;
      *(double *)&v164[2] = v70;
      *(_WORD *)char v165 = 2050;
      *(long double *)&v165[2] = v80;
      int v125 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v125);
      if (v125 != buf) {
        free(v125);
      }
    }
    long double v94 = *(double *)(a2 + 480);
    sub_100142F58(v80);
    double v96 = v95;
    sub_100142F58(v94);
    double v98 = v97;
    sub_100142F58(v94 + 90.0);
    if (v98 >= v99)
    {
      int v100 = 1;
      if (v98 <= v96 || v96 <= v99) {
        goto LABEL_179;
      }
    }
    else if (v98 <= v96 && v96 <= v99)
    {
      int v100 = 1;
      goto LABEL_179;
    }
    double v101 = *(double *)(a2 + 480);
    sub_100142F58(v80);
    double v103 = v102;
    sub_100142F58(v101 + 90.0);
    double v105 = v104;
    sub_100142F58(v101 + 180.0);
    BOOL v107 = v105 <= v103;
    if (v103 <= v106) {
      BOOL v107 = 1;
    }
    BOOL v108 = v105 <= v103;
    if (v103 > v106) {
      BOOL v108 = 0;
    }
    if (v105 < v106) {
      int v100 = v108;
    }
    else {
      int v100 = v107;
    }
LABEL_179:
    double v109 = *(double *)(a2 + 480);
    sub_100142F58(v80);
    double v111 = v110;
    sub_100142F58(v109 + 180.0);
    double v113 = v112;
    sub_100142F58(v109 + 270.0);
    if (v113 >= v114)
    {
      int v115 = 1;
      if (v113 <= v111 || v111 <= v114) {
        goto LABEL_191;
      }
    }
    else if (v113 <= v111 && v111 <= v114)
    {
      int v115 = 1;
      goto LABEL_191;
    }
    long double v116 = *(double *)(a2 + 480);
    sub_100142F58(v80);
    double v118 = v117;
    sub_100142F58(v116 + 270.0);
    double v120 = v119;
    sub_100142F58(v116);
    if (v120 >= v121)
    {
      int v115 = v120 <= v118;
      if (v118 <= v121) {
        int v115 = 1;
      }
    }
    else
    {
      int v115 = v120 <= v118;
      if (v118 > v121) {
        int v115 = 0;
      }
    }
LABEL_191:
    v77 += v100;
    v76 += v115;
    v72 += 64;
  }
  while (v72 != v73);
  if (v77 && v76)
  {
    int v126 = *(_DWORD *)(a2 + 792);
    if (v126 == 3)
    {
      uint64_t v6 = 0;
      goto LABEL_208;
    }
    uint64_t v6 = 0;
    if (v126 != 4 && v157 > v12 + v12)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v128 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134350080;
        *(double *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v77;
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = v76;
        *(_WORD *)&unsigned char buf[24] = 2050;
        *(double *)&buf[26] = v157;
        *(_WORD *)&buf[34] = 2050;
        *(double *)&buf[36] = v12 + v12;
        _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingOnBothSides but AT too high,rightCount,%{public}d,leftCount,%{public}d,AT,%{public}.1lf,threshold,%{public}.1lf", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        *(_DWORD *)__int16 v161 = 134350080;
        *(double *)&v161[4] = v4;
        __int16 v162 = 1026;
        *(_DWORD *)long long v163 = v77;
        *(_WORD *)&v163[4] = 1026;
        *(_DWORD *)&v163[6] = v76;
        *(_WORD *)&v163[10] = 2050;
        *(double *)&v163[12] = v157;
        *(_WORD *)&v163[20] = 2050;
        *(double *)&v163[22] = v12 + v12;
        __int16 v75 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v75);
        goto LABEL_249;
      }
      goto LABEL_207;
    }
    goto LABEL_208;
  }
LABEL_202:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v127 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349568;
    *(double *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v77;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v76;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    *(_DWORD *)__int16 v161 = 134349568;
    *(double *)&v161[4] = v4;
    __int16 v162 = 1026;
    *(_DWORD *)long long v163 = v77;
    *(_WORD *)&v163[4] = 1026;
    *(_DWORD *)&v163[6] = v76;
    __int16 v75 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v75);
LABEL_249:
    if (v75 != buf) {
      free(v75);
    }
  }
LABEL_207:
  uint64_t v6 = 1;
LABEL_208:
  *(void *)long long buf = &v158;
  sub_101370EE0((void ***)buf);
  return v6;
}

void sub_10135F024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a20;
  sub_101370EE0(&a39);
  _Unwind_Resume(a1);
}

void sub_10135F090(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (*(unsigned char *)(a2 + 882))
  {
    uint64_t v3 = *(uint64_t **)(a2 + 256);
    if (v3)
    {
      uint64_t v5 = *v3;
      int v6 = *(unsigned __int8 *)(a2 + 276);
      double v8 = a3[1];
      uint64_t v7 = a3[2];
      if (!v7 || v5 != v8[2] || v6 != *((unsigned __int8 *)v8 + 24))
      {
        int v9 = operator new(0x20uLL);
        v9[1] = v8;
        v9[2] = v5;
        *((unsigned char *)v9 + 24) = v6;
        void *v9 = a3;
        uint64_t *v8 = (uint64_t)v9;
        a3[1] = v9;
        a3[2] = (uint64_t *)((char *)v7 + 1);
        if ((int)v7 + 1 >= 51)
        {
          double v10 = *a3;
          uint64_t v11 = **a3;
          *(void *)(v11 + 8) = (*a3)[1];
          *(void *)v10[1] = v11;
          a3[2] = v7;
          operator delete(v10);
        }
      }
    }
  }
}

void sub_10135F15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a3 + 746)) {
    BOOL v5 = *(void *)(a3 + 120) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    if (!*(unsigned char *)(a2 + 882))
    {
LABEL_22:
      if (*(unsigned char *)a4)
      {
        if (!*(unsigned char *)(a2 + 882)
          || (long double v16 = sub_1000F1648((double *)(a1 + 168), *(double *)(a4 + 56), *(double *)(a4 + 64), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448)), *(long double *)(a4 + 8) = v16, v16 > 450.0))
        {
          *(unsigned char *)a4 = 0;
        }
      }
      return;
    }
    if (*(void *)(a2 + 256))
    {
      if (*(unsigned char *)(a3 + 746))
      {
        sub_1000F1648((double *)(a1 + 168), *(double *)(a3 + 152), *(double *)(a3 + 160), *(double *)(a2 + 288), *(double *)(a2 + 296), *(double *)(a2 + 448));
        uint64_t v9 = *(void *)(a3 + 128);
        *(void *)&long long buf = *(void *)(a3 + 120);
        *((void *)&buf + 1) = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        long long v10 = *(_OWORD *)(a3 + 152);
        long long v24 = *(_OWORD *)(a3 + 136);
        long long v25 = v10;
        uint64_t v26 = *(void *)(a3 + 168);
        v27[0] = *(_OWORD *)(a3 + 176);
        *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)(a3 + 185);
        double v29 = 0;
        uint64_t v30 = 0;
        uint64_t v11 = *(const void **)(a3 + 208);
        uint64_t v12 = *(void *)(a3 + 216);
        long long __p = 0;
        sub_101000368(&__p, v11, v12, 0x8E38E38E38E38E39 * ((v12 - (uint64_t)v11) >> 3));
        int v21 = 0;
        if (sub_101360174((uint64_t *)a1, (uint64_t *)&buf, &v21))
        {
          *(unsigned char *)a4 = 1;
          *(_DWORD *)(a4 + 136) = v21;
          long long v13 = buf;
          if (*((void *)&buf + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
          }
          double v14 = *(std::__shared_weak_count **)(a4 + 32);
          *(_OWORD *)(a4 + 24) = v13;
          if (v14) {
            sub_1000DB0A0(v14);
          }
          long long v15 = v25;
          *(_OWORD *)(a4 + 40) = v24;
          *(_OWORD *)(a4 + 56) = v15;
          *(void *)(a4 + 72) = v26;
          *(_OWORD *)(a4 + 80) = v27[0];
          *(_OWORD *)(a4 + 89) = *(_OWORD *)((char *)v27 + 9);
          if ((long long *)(a4 + 24) != &buf) {
            sub_1010003E4((char *)(a4 + 112), (char *)__p, (uint64_t)v29, 0x8E38E38E38E38E39 * ((v29 - (unsigned char *)__p) >> 3));
          }
          *(void *)(a4 + 16) = *(void *)(a3 + 248);
        }
        if (__p)
        {
          double v29 = __p;
          operator delete(__p);
        }
        if (*((void *)&buf + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
        }
      }
      goto LABEL_22;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v17 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = *(void *)(a2 + 384);
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, prior or current snap is valid but bestparticle road is null", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v19 = *(void *)(a2 + 384);
    int v21 = 134349056;
    uint64_t v22 = v19;
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::updateIntersectionInfo(const MMFilterData &, const MMSnapData &, CLParticleMapMatcherCommon::IntersectionInfo &)", "%s\n", v20);
    if (v20 != (char *)&buf) {
      free(v20);
    }
  }
}

void sub_10135F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10135F528(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 640)) {
    BOOL v2 = *(unsigned char *)(a2 + 641) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  double v6 = *(double *)(a2 + 456);
  if (v6 < 400.0 && v6 > 0.0)
  {
    if (*(unsigned char *)(a2 + 368) && !*(unsigned char *)(a2 + 896)) {
      return 0;
    }
    double v7 = sub_1000F1648((double *)(a1 + 168), *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 528), *(double *)(a2 + 536), 0.0);
    double v8 = v7 / *(double *)(a2 + 456);
    if (v8 > 1.5)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a2 + 384);
        uint64_t v11 = *(void *)(a2 + 432);
        uint64_t v12 = *(void *)(a2 + 440);
        uint64_t v13 = *(void *)(a2 + 480);
        uint64_t v14 = *(void *)(a2 + 528);
        uint64_t v15 = *(void *)(a2 + 536);
        uint64_t v16 = *(void *)(a2 + 544);
        uint64_t v17 = *(void *)(a2 + 448);
        uint64_t v18 = *(void *)(a2 + 456);
        *(_DWORD *)long long buf = 134351617;
        uint64_t v22 = v10;
        __int16 v23 = 2049;
        uint64_t v24 = v11;
        __int16 v25 = 2049;
        uint64_t v26 = v12;
        __int16 v27 = 2050;
        uint64_t v28 = v17;
        __int16 v29 = 2050;
        uint64_t v30 = v13;
        __int16 v31 = 2049;
        uint64_t v32 = v14;
        __int16 v33 = 2049;
        uint64_t v34 = v15;
        __int16 v35 = 2050;
        uint64_t v36 = v16;
        __int16 v37 = 2050;
        double v38 = v7;
        __int16 v39 = 2050;
        uint64_t v40 = v18;
        __int16 v41 = 2050;
        double v42 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        unint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::modifyHorizontalUncertainty(MMFilterData &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      double v19 = v7 * 1.05;
      if (v7 * 1.05 > 400.0) {
        double v19 = 400.0;
      }
      *(double *)(a2 + 456) = v19;
    }
    return 1;
  }
  return result;
}

uint64_t sub_10135F86C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  double v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  long long v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 56) = v9;
  if ((uint64_t *)a1 != a2) {
    sub_1010003E4((char *)(a1 + 88), (char *)a2[11], a2[12], 0x8E38E38E38E38E39 * ((a2[12] - a2[11]) >> 3));
  }
  *(void *)(a1 + 112) = a2[14];
  uint64_t v11 = a2[15];
  uint64_t v10 = a2[16];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 128) = v10;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  long long v13 = *(_OWORD *)(a2 + 17);
  long long v14 = *(_OWORD *)(a2 + 19);
  *(void *)(a1 + 168) = a2[21];
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  long long v15 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)((char *)a2 + 185);
  *(_OWORD *)(a1 + 176) = v15;
  if ((uint64_t *)a1 != a2) {
    sub_1010003E4((char *)(a1 + 208), (char *)a2[26], a2[27], 0x8E38E38E38E38E39 * ((a2[27] - a2[26]) >> 3));
  }
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  long long v16 = *((_OWORD *)a2 + 15);
  long long v17 = *((_OWORD *)a2 + 16);
  long long v18 = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 288) = v18;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 256) = v17;
  long long v19 = *((_OWORD *)a2 + 19);
  long long v20 = *((_OWORD *)a2 + 20);
  long long v21 = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 352) = v21;
  *(_OWORD *)(a1 + 304) = v19;
  *(_OWORD *)(a1 + 320) = v20;
  std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a2 + 46));
  memcpy((void *)(a1 + 392), a2 + 49, 0x118uLL);
  long long v22 = *((_OWORD *)a2 + 42);
  long long v23 = *((_OWORD *)a2 + 43);
  long long v24 = *((_OWORD *)a2 + 44);
  *(void *)(a1 + 720) = a2[90];
  *(_OWORD *)(a1 + 688) = v23;
  *(_OWORD *)(a1 + 704) = v24;
  *(_OWORD *)(a1 + 672) = v22;
  uint64_t v25 = a2[91];
  uint64_t v26 = a2[92];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 728) = v25;
  __int16 v27 = *(std::__shared_weak_count **)(a1 + 736);
  *(void *)(a1 + 736) = v26;
  if (v27) {
    sub_1000DB0A0(v27);
  }
  long long v28 = *(_OWORD *)(a2 + 93);
  *(_DWORD *)(a1 + 759) = *(_DWORD *)((char *)a2 + 759);
  *(_OWORD *)(a1 + 744) = v28;
  return a1;
}

uint64_t sub_10135FA2C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 9))
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1))
    {
      LOBYTE(v6) = 0;
LABEL_10:
      sub_10082B744((uint64_t *)(a1 + 1904));
      return v6 & 1;
    }
    uint64_t v4 = *(void *)(a1 + 1904);
    uint64_t v5 = *(void *)(a1 + 1912);
    if (v4 != v5)
    {
      int v6 = 0;
      while (vabdd_f64(*(double *)(v4 + 184), *(double *)(a2 + 400)) <= 0.01)
      {
        v6 |= sub_101353CB8(a2, 2, v4);
        v4 += 264;
        if (v4 == v5) {
          return v6 & 1;
        }
      }
      goto LABEL_10;
    }
  }
  LOBYTE(v6) = 0;
  return v6 & 1;
}

uint64_t sub_10135FB04(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if ((long long *)a1 == a2)
  {
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
  }
  else
  {
    sub_10137033C((uint64_t *)(a1 + 40), *((uint64_t **)a2 + 5), *((uint64_t **)a2 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 4));
    sub_1000FB43C((char *)(a1 + 64), *((char **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2);
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    sub_10136F9E8((uint64_t **)(a1 + 112), *((void **)a2 + 14), (void *)a2 + 15);
  }
  sub_10135F86C(a1 + 136, (uint64_t *)a2 + 17);
  *(unsigned char *)(a1 + 904) = *((unsigned char *)a2 + 904);
  return a1;
}

double sub_10135FBC8(uint64_t a1, uint64_t a2, double *a3)
{
  double v4 = *(double *)(a2 + 24);
  if (v4 < 0.0 || (double v5 = a3[33], v5 < 0.0))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349312;
      uint64_t v25 = v7;
      __int16 v26 = 2050;
      unint64_t v27 = 0xBFF0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    double v8 = 0.0;
    if (!sub_10013D1A0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    long long v23 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "%s\n");
LABEL_51:
    if (v23 != buf) {
      free(v23);
    }
    return v8;
  }
  double v10 = vabdd_f64(v4, v5);
  double v11 = -1.0;
  double v12 = -1.0;
  if (*(double *)(a2 + 184) > 0.0)
  {
    double v13 = *(double *)(a2 + 96);
    if (v13 >= 0.0)
    {
      if (v10 >= 2.2 || a3[53] <= 0.0)
      {
        double v12 = *(double *)(a2 + 96);
      }
      else
      {
        double v14 = a3[42];
        BOOL v15 = v14 < 0.0;
        double v16 = (v13 + v14) * 0.5;
        if (v15) {
          double v12 = *(double *)(a2 + 96);
        }
        else {
          double v12 = v16;
        }
      }
    }
  }
  if (v12 < 0.0) {
    double v17 = 0.0;
  }
  else {
    double v17 = v10 * v12;
  }
  if (v10 >= 2.2)
  {
    double v8 = v17;
  }
  else
  {
    double v8 = v17;
    if (a3[40] > 0.0)
    {
      double v11 = sub_1000F1648((double *)(a1 + 168), *(double *)(a2 + 56), *(double *)(a2 + 64), a3[37], a3[38], *(double *)(a2 + 72));
      if (v11 > 300.0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v18 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = *(void *)(a2 + 8);
          *(_DWORD *)long long buf = 134349568;
          uint64_t v25 = v19;
          __int16 v26 = 2050;
          unint64_t v27 = *(void *)&v11;
          __int16 v28 = 2050;
          double v29 = v10;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,CLMMPED,%{public}.1lf,Position jump,%{public}.1lf,dT,%{public}.1lf", buf, 0x20u);
        }
        double v8 = -1.0;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_47;
          }
          goto LABEL_53;
        }
        return v8;
      }
      if (v12 <= 0.0 || v11 < 0.0 || *(unsigned char *)(a2 + 228))
      {
        if (*(unsigned char *)(a2 + 228)) {
          double v20 = v17;
        }
        else {
          double v20 = v11;
        }
        if (v11 >= 0.0) {
          double v8 = v20;
        }
        else {
          double v8 = v17;
        }
      }
      else
      {
        double v8 = (v17 + v11) * 0.5;
      }
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v21 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void *)(a2 + 8);
    *(_DWORD *)long long buf = 134349824;
    uint64_t v25 = v22;
    __int16 v26 = 2050;
    unint64_t v27 = *(void *)&v8;
    __int16 v28 = 2050;
    double v29 = v17;
    __int16 v30 = 2050;
    double v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,predictionAndUpdate, distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_47:
      long long v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "%s\n");
      goto LABEL_51;
    }
LABEL_53:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_47;
  }
  return v8;
}

uint64_t sub_101360174(uint64_t *a1, uint64_t *a2, int *a3)
{
  LODWORD(v23) = 0;
  BYTE5(v23) = 0;
  DWORD2(v23) = 0;
  long long v24 = 0uLL;
  uint64_t v6 = *a2;
  double v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v6;
  uint64_t v22 = v5;
  uint64_t v7 = *a1;
  uint64_t v8 = a2[6];
  BYTE4(v23) = *((unsigned char *)a2 + 20);
  uint64_t v25 = v8;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  v18[2] = 0;
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  v17[2] = 0;
  *a3 = 0;
  unsigned int v9 = (*(uint64_t (**)(uint64_t *, uint64_t *, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(v7 + 88))(a1, &v21, a3, v18, v17, &v20, &v19);
  if (*a3 > 1) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    uint64_t v12 = v21;
    double v11 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v13 = (std::__shared_weak_count *)a2[1];
    *a2 = v12;
    a2[1] = (uint64_t)v11;
    if (v13) {
      sub_1000DB0A0(v13);
    }
    long long v14 = v24;
    *((_OWORD *)a2 + 1) = v23;
    *((_OWORD *)a2 + 2) = v14;
    a2[6] = v25;
    uint64_t v15 = v19;
    a2[4] = v20;
    a2[5] = v15;
  }
  sub_10017FF2C(v17);
  sub_10017FF2C(v18);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  return v10;
}

void sub_1013602A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_1000DB0A0(a19);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1013602CC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, double *a5, double *a6, double a7)
{
  double v14 = a5[1];
  uint64_t v21 = *(void *)&v14;
  if ((sub_101360660(a1, (double *)a4, v14, a7) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      double v17 = a2;
      if (*((char *)a2 + 23) < 0) {
        double v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v29 = *(void *)&v14;
      __int16 v30 = 2082;
      double v31 = v17;
      __int16 v32 = 2050;
      double v33 = a7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,failed,%{public}s,moveDistance,%{public}.1lf", buf, 0x20u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    int v22 = 134349570;
    uint64_t v23 = *(void *)&v14;
    __int16 v24 = 2082;
    uint64_t v25 = a2;
    __int16 v26 = 2050;
    double v27 = a7;
LABEL_29:
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticleAndCheckDivergence(const std::string, const std::string, CLParticleMapMatcherCommon::Particle &, const double, const CLMapCrumb &, double &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    return 0;
  }
  if (sub_101360E84(&v21, a5, (double *)(a1 + 168), a6, *(double *)(a4 + 32), *(double *)(a4 + 40), *(float *)(a4 + 24)))
  {
    return 1;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v18 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = a3;
    if (*((char *)a3 + 23) < 0) {
      uint64_t v19 = (uint64_t *)*a3;
    }
    *(_DWORD *)long long buf = 134349314;
    uint64_t v29 = v21;
    __int16 v30 = 2082;
    double v31 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,%{public}s,location or course diverged", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    int v22 = 134349314;
    uint64_t v23 = v21;
    __int16 v24 = 2082;
    uint64_t v25 = a3;
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_101360660(uint64_t a1, double *a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 208);
  unsigned int v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, moveParticle", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  if (((*(uint64_t (**)(uint64_t, double *, uint64_t, double))(*(void *)v8 + 88))(v8, a2, a1 + 1040, a4) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      double v13 = **(void ***)a2;
      double v14 = (void *)*((void *)a2 + 6);
      int v15 = *((unsigned __int8 *)a2 + 20);
      *(_DWORD *)long long buf = 134350081;
      double v25 = a3;
      __int16 v26 = 2049;
      double v27 = v13;
      __int16 v28 = 2050;
      uint64_t v29 = v14;
      __int16 v30 = 1026;
      int v31 = v15;
      __int16 v32 = 2050;
      double v33 = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,moveOnRoad returned false,roadID,%{private}lld,projection,%{public}.3lf,fwd,%{public}d,moveDistance,%{public}.2lf", buf, 0x30u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v16);
    goto LABEL_50;
  }
  if (!*(void *)a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,null road", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  if (sub_1000EF668(a2[4], a2[5]))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,unexpected particle with snapLat == snapLon == 0", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  double v18 = a2[6];
  if (v18 >= 0.0 && v18 <= 1.0)
  {
    uint64_t v19 = 1;
    goto LABEL_45;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v20 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = (void *)*((void *)a2 + 6);
    int v22 = **(void ***)a2;
    *(_DWORD *)long long buf = 134349569;
    double v25 = a3;
    __int16 v26 = 2050;
    double v27 = v21;
    __int16 v28 = 2049;
    uint64_t v29 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,invalidProjection,%{public}.3lf,roadID,%{private}lld", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_49:
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v16);
LABEL_50:
      if (v16 != (char *)buf) {
        free(v16);
      }
      goto LABEL_44;
    }
LABEL_52:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_49;
  }
LABEL_44:
  uint64_t v19 = 0;
LABEL_45:
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return v19;
}

void sub_101360E58(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101360E84(uint64_t *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v13 = a2[38];
  double v14 = fmod(v13 - a7, 360.0);
  if (v14 < 0.0) {
    double v14 = v14 + 360.0;
  }
  if (v14 > 180.0) {
    double v14 = v14 + -360.0;
  }
  double v15 = fabs(v14);
  if (v15 <= 8.0)
  {
    if (v15 > *a4)
    {
      *a4 = v15;
      double v13 = a2[38];
    }
    double v27 = 0.0;
    double v28 = 0.0;
    sub_101172040(a3, &v28, &v27, a2[36], a2[37], a2[9], v13, a5, a6);
    if (fabs(v28) <= 5.0)
    {
      if (fabs(v27) <= 45.0) {
        return 1;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v23 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *a1;
        *(_DWORD *)long long buf = 134349056;
        uint64_t v32 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, along track too large, not suitable DOT assistance", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v25 = *a1;
        int v29 = 134349056;
        uint64_t v30 = v25;
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v20 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *a1;
        *(_DWORD *)long long buf = 134349056;
        uint64_t v32 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, across track too large, not suitable DOT assistance", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v22 = *a1;
        int v29 = 134349056;
        uint64_t v30 = v22;
        goto LABEL_34;
      }
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *a1;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, no DOT, course is not aligned", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v19 = *a1;
      int v29 = 134349056;
      uint64_t v30 = v19;
LABEL_34:
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::checkDivergence(const CFAbsoluteTime &, double, double, double, const CLMapCrumb &, CLDistanceCalc &, double &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_101361304(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 1968) <= 0.0
    || *(double *)(a1 + 2056) <= 0.0
    || *(double *)(a1 + 2064) <= 0.0
    || !*(_DWORD *)(a1 + 2048))
  {
    return 0;
  }
  long long v2 = *(_OWORD *)(a1 + 1968);
  long long v3 = *(_OWORD *)(a1 + 2000);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 1984);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  long long v4 = *(_OWORD *)(a1 + 2016);
  long long v5 = *(_OWORD *)(a1 + 2032);
  long long v6 = *(_OWORD *)(a1 + 2048);
  *(void *)(a2 + 96) = *(void *)(a1 + 2064);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return 1;
}

uint64_t sub_10136136C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v6 = a2[1];
  long long v7 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  long long v8 = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 65) = *(long long *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 56) = v8;
  sub_1000F4EBC(a1 + 88, (__n128 *)((char *)a2 + 88));
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  long long v9 = *(long long *)((char *)a2 + 120);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v9;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(long long *)((char *)a2 + 136);
  long long v12 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  long long v13 = a2[11];
  *(_OWORD *)(a1 + 185) = *(long long *)((char *)a2 + 185);
  *(_OWORD *)(a1 + 176) = v13;
  sub_1000F4EBC(a1 + 208, (__n128 *)a2 + 13);
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  long long v14 = a2[15];
  long long v15 = a2[16];
  long long v16 = a2[18];
  *(_OWORD *)(a1 + 272) = a2[17];
  *(_OWORD *)(a1 + 288) = v16;
  *(_OWORD *)(a1 + 240) = v14;
  *(_OWORD *)(a1 + 256) = v15;
  long long v17 = a2[19];
  long long v18 = a2[20];
  long long v19 = a2[22];
  *(_OWORD *)(a1 + 336) = a2[21];
  *(_OWORD *)(a1 + 352) = v19;
  *(_OWORD *)(a1 + 304) = v17;
  *(_OWORD *)(a1 + 320) = v18;
  uint64_t v20 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v20);
  }
  long long v21 = a2[23];
  *(void *)(a1 + 384) = *((void *)a2 + 48);
  *(_OWORD *)uint64_t v20 = v21;
  *((unsigned char *)a2 + 391) = 0;
  *((unsigned char *)a2 + 368) = 0;
  memcpy((void *)(a1 + 392), (char *)a2 + 392, 0x118uLL);
  long long v23 = a2[43];
  long long v22 = a2[44];
  long long v24 = a2[42];
  *(void *)(a1 + 720) = *((void *)a2 + 90);
  *(_OWORD *)(a1 + 688) = v23;
  *(_OWORD *)(a1 + 704) = v22;
  *(_OWORD *)(a1 + 672) = v24;
  long long v25 = *(long long *)((char *)a2 + 728);
  *(long long *)((char *)a2 + 728) = 0u;
  __int16 v26 = *(std::__shared_weak_count **)(a1 + 736);
  *(_OWORD *)(a1 + 728) = v25;
  if (v26) {
    sub_1000DB0A0(v26);
  }
  long long v27 = *(long long *)((char *)a2 + 744);
  *(_DWORD *)(a1 + 759) = *(_DWORD *)((char *)a2 + 759);
  *(_OWORD *)(a1 + 744) = v27;
  return a1;
}

double *sub_1013614EC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 1832) = *(void *)a2;
  if (a1 + 1832 != a2) {
    sub_1008A9A00((char *)(a1 + 1840), *(char **)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  *(_OWORD *)(a1 + 1864) = *(_OWORD *)(a2 + 32);
  double v4 = *(double *)(a1 + 1872);

  return sub_1010002FC((double *)(a1 + 1952), v4);
}

double sub_101361568(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v3 = -1.0;
  if (*(unsigned char *)(a3 + 264))
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      int v29 = 0;
      char v31 = 0;
      int v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      long long v6 = (std::__shared_weak_count *)a2[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = v5;
      double v28 = v6;
      uint64_t v7 = *a1;
      uint64_t v8 = a2[6];
      char v30 = *((unsigned char *)a2 + 20);
      uint64_t v35 = v8;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      v24[0] = (uint64_t)v24;
      v24[1] = (uint64_t)v24;
      void v24[2] = 0;
      uint64_t v21 = (uint64_t)&v21;
      long long v22 = &v21;
      uint64_t v23 = 0;
      int v20 = 0;
      int v9 = (*(uint64_t (**)(uint64_t *, uint64_t *, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(v7 + 88))(a1, &v27, &v20, v24, &v21, &v26, &v25);
      if (v20 > 0) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 == 1)
      {
        int v11 = *((unsigned __int8 *)a2 + 20);
        double v12 = *((double *)a2 + 6);
        uint64_t v13 = *a2;
        sub_10039C4B4((void *)v13);
        double v14 = 1.0 - v12;
        if (!v11) {
          double v14 = v12;
        }
        double v3 = v14 * *(double *)(v13 + 40);
        for (uint64_t i = v22; i != &v21; uint64_t i = (uint64_t *)i[1])
        {
          uint64_t v17 = i[2];
          long long v16 = (std::__shared_weak_count *)i[3];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_10039C4B4((void *)v17);
          double v18 = *(double *)(v17 + 40);
          if (v16) {
            sub_1000DB0A0(v16);
          }
          double v3 = v3 + v18;
        }
      }
      sub_10017FF2C(&v21);
      sub_10017FF2C(v24);
      if (v28) {
        sub_1000DB0A0(v28);
      }
    }
  }
  return v3;
}

void sub_1013616FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_1000DB0A0(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10136173C(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v5 = (uint64_t)*a2;
  if (!*a2) {
    return 0;
  }
  double v10 = *((unsigned char *)a2 + 20) ? 1.0 - *((double *)a2 + 6) : *((double *)a2 + 6);
  sub_10039C4B4(*a2);
  if (v10 * *(double *)(v5 + 40) > 18.0)
  {
    double v11 = *((unsigned char *)a2 + 20) ? *((double *)a2 + 6) : 1.0 - *((double *)a2 + 6);
    uint64_t v12 = (uint64_t)*a2;
    sub_10039C4B4(*a2);
    if (v11 * *(double *)(v12 + 40) > 36.0) {
      return 0;
    }
  }
  double v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v35 = (uint64_t)*a2;
  uint64_t v36 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = *((_OWORD *)a2 + 2);
  long long v37 = *((_OWORD *)a2 + 1);
  long long v38 = v15;
  long long v16 = a2[6];
  v40[0] = *(_OWORD *)(a2 + 7);
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)a2 + 65);
  __int16 v39 = v16;
  long long __p = 0;
  double v42 = 0;
  uint64_t v17 = a2[11];
  uint64_t v18 = (uint64_t)a2[12];
  uint64_t v43 = 0;
  sub_101000368(&__p, v17, v18, 0x8E38E38E38E38E39 * ((v18 - (uint64_t)v17) >> 3));
  char v19 = sub_1013619BC(a1, (uint64_t)&v35, a3, 1, a5);
  if (__p)
  {
    double v42 = __p;
    operator delete(__p);
  }
  if (v36) {
    sub_1000DB0A0(v36);
  }
  if (v19) {
    return 1;
  }
  uint64_t v34 = 0x4051800000000000;
  int v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v25 = (uint64_t)*a2;
  uint64_t v26 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = *((_OWORD *)a2 + 2);
  long long v27 = *((_OWORD *)a2 + 1);
  long long v28 = v21;
  int v29 = a2[6];
  v30[0] = *(_OWORD *)(a2 + 7);
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)a2 + 65);
  int v32 = 0;
  uint64_t v33 = 0;
  long long v22 = a2[11];
  uint64_t v23 = (uint64_t)a2[12];
  char v31 = 0;
  sub_101000368(&v31, v22, v23, 0x8E38E38E38E38E39 * ((v23 - (uint64_t)v22) >> 3));
  uint64_t v13 = sub_1013619BC(a1, (uint64_t)&v25, a3, 0, (double *)&v34);
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
  return v13;
}

void sub_101361978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100FFFC10((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013619BC(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, double *a5)
{
  if (!*(void *)a2) {
    return 0;
  }
  BOOL v10 = *(unsigned char *)(a2 + 20) == 0;
  if (a4) {
    double v11 = "next";
  }
  else {
    double v11 = "prior";
  }
  if (a4) {
    BOOL v10 = *(unsigned char *)(a2 + 20) != 0;
  }
  *(unsigned char *)(a2 + 20) = v10;
  double v12 = sub_101361568(a1, (uint64_t *)a2, a3);
  double v13 = *(double *)(a3 + 96);
  sub_100134750(v38, v11);
  double v14 = *(double *)(a3 + 8);
  if (v12 < 0.0)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    *(void *)double v46 = *(void *)a2;
    *(void *)&v46[8] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    long long v16 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 16);
    long long v47 = v16;
    uint64_t v48 = *(void *)(a2 + 48);
    v49[0] = *(_OWORD *)(a2 + 56);
    *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)(a2 + 65);
    double v51 = 0;
    uint64_t v52 = 0;
    uint64_t v17 = *(const void **)(a2 + 88);
    uint64_t v18 = *(void *)(a2 + 96);
    long long __p = 0;
    sub_101000368(&__p, v17, v18, 0x8E38E38E38E38E39 * ((v18 - (uint64_t)v17) >> 3));
    if (sub_101360660((uint64_t)a1, (double *)v46, v14, 24.0))
    {
      double v19 = fmod(*(float *)&v46[24] - *(double *)(a3 + 104), 360.0);
      if (v19 < 0.0) {
        double v19 = v19 + 360.0;
      }
      if (v19 > 180.0) {
        double v19 = v19 + -360.0;
      }
      if (fabs(v19) <= 8.0)
      {
        if (__p)
        {
          double v51 = __p;
          operator delete(__p);
        }
        if (*(void *)&v46[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&v46[8]);
        }
        uint64_t v24 = 0;
        goto LABEL_60;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v20 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        long long v21 = v38;
        if (v39 < 0) {
          long long v21 = (void **)v38[0];
        }
        *(_DWORD *)long long buf = 134349314;
        double v54 = v14;
        __int16 v55 = 2082;
        uint64_t v56 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT, too close to a %{public}s road with large direction change", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v22 = v38;
      if (v39 < 0) {
        long long v22 = (void **)v38[0];
      }
      int v40 = 134349314;
      double v41 = v14;
      __int16 v42 = 2082;
      uint64_t v43 = v22;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "%s\n", v23);
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v34 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = v38;
        if (v39 < 0) {
          uint64_t v35 = (void **)v38[0];
        }
        *(_DWORD *)long long buf = 134349570;
        double v54 = v14;
        __int16 v55 = 2082;
        uint64_t v56 = v35;
        __int16 v57 = 2050;
        uint64_t v58 = 0x4038000000000000;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle failed for %{public}s particle,distance,%{public}.1lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v37 = v38;
      if (v39 < 0) {
        long long v37 = (void **)v38[0];
      }
      int v40 = 134349570;
      double v41 = v14;
      __int16 v42 = 2082;
      uint64_t v43 = v37;
      __int16 v44 = 2050;
      uint64_t v45 = 0x4038000000000000;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "%s\n", v23);
    }
    if (v23 != (char *)buf) {
      free(v23);
    }
LABEL_55:
    if (__p)
    {
      double v51 = __p;
      operator delete(__p);
    }
    if (*(void *)&v46[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&v46[8]);
    }
    goto LABEL_59;
  }
  double v25 = fabs(v13);
  if (v13 < 0.0) {
    double v25 = 3.0;
  }
  double v26 = v12 - v25;
  double v27 = 36.0;
  if (a4) {
    double v27 = 18.0;
  }
  if (v26 >= v27)
  {
    uint64_t v24 = 0;
    *a5 = v12 + -1.0;
    goto LABEL_60;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v28 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v29 = v38;
    if (v39 < 0) {
      int v29 = (void **)v38[0];
    }
    uint64_t v30 = *(void *)(a3 + 96);
    *(_DWORD *)long long buf = 134349826;
    double v54 = v14;
    __int16 v55 = 2082;
    uint64_t v56 = v29;
    __int16 v57 = 2050;
    uint64_t v58 = *(void *)&v26;
    __int16 v59 = 2050;
    uint64_t v60 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT,too close to %{public}s intersection,dist,%{public}.2lf,speed,%{public}.2lf", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    char v31 = v38;
    if (v39 < 0) {
      char v31 = (void **)v38[0];
    }
    uint64_t v32 = *(void *)(a3 + 96);
    *(_DWORD *)double v46 = 134349826;
    *(double *)&uint8_t v46[4] = v14;
    *(_WORD *)&v46[12] = 2082;
    *(void *)&v46[14] = v31;
    *(_WORD *)&v46[22] = 2050;
    *(double *)&unsigned char v46[24] = v26;
    LOWORD(v47) = 2050;
    *(void *)((char *)&v47 + 2) = v32;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
LABEL_59:
  uint64_t v24 = 1;
LABEL_60:
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  return v24;
}

void sub_101362104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101362158(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 208);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 216);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, getRoadsAtIntersection", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0))
    {
LABEL_21:
      uint64_t v11 = 0;
      if (!v5) {
        return v11;
      }
LABEL_22:
      sub_1000DB0A0(v5);
      return v11;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_25:
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::getRoadsAtIntersection(const CFAbsoluteTime, const CLMapGeometry::DistanceQueryResult &, CLMapGeometry::ConnectedQueryResultList &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      goto LABEL_21;
    }
LABEL_27:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_25;
  }
  double v7 = *a2;
  if (!*(void *)a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,null road, getRoadsAtIntersection", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  int v8 = *((unsigned __int8 *)a2 + 20);
  double v9 = a2[6];
  sub_10039C4B4(*(void **)a2);
  double v10 = 1.0 - v9;
  if (!v8) {
    double v10 = v9;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, double *, BOOL, void, double, double))(*(void *)v6 + 72))(v6, a3, a2, v8 != 0, 0, v9, v10 * *(double *)(*(void *)&v7 + 40) + 5.0);
  if (v5) {
    goto LABEL_22;
  }
  return v11;
}

void sub_1013624CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013624EC(void *a1, double *a2, unsigned __int8 a3, uint64_t *a4, double a5)
{
  if (*a1)
  {
    int v31 = 0;
    char v33 = 0;
    int v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v9 = *(void *)a2;
    int v8 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)long long buf = v9;
    uint64_t v30 = v8;
    double v10 = a2[6];
    unsigned __int8 v32 = a3;
    double v37 = v10;
    int v11 = 30;
    while (1)
    {
      int v12 = v32;
      double v13 = v37;
      uint64_t v14 = *(void *)buf;
      sub_10039C4B4(*(void **)buf);
      double v15 = 1.0 - v13;
      if (!v12) {
        double v15 = v13;
      }
      double v16 = v15 * *(double *)(v14 + 40);
      if (v16 > a5)
      {
LABEL_22:
        uint64_t v19 = 1;
        goto LABEL_32;
      }
      a5 = a5 - v16;
      if (v32) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      sub_1011BF5D0(a4);
      if (v32) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      double v37 = v18;
      uint64_t v26 = (uint64_t)&v26;
      double v27 = &v26;
      unint64_t v28 = 0;
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t *, uint8_t *, double, double))(*(void *)*a1 + 72))(*a1, &v26, buf, v17, a5);
      if ((v19 & 1) == 0) {
        goto LABEL_31;
      }
      if (v28 >= 2) {
        break;
      }
      if (v28 != 1) {
        goto LABEL_31;
      }
      uint64_t v21 = v27[4];
      int v20 = (std::__shared_weak_count *)v27[5];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v22 = v30;
      *(void *)long long buf = v21;
      uint64_t v30 = v20;
      if (v22) {
        sub_1000DB0A0(v22);
      }
      unsigned __int8 v32 = *((unsigned char *)v27 + 24);
      double v37 = *((double *)v27 + 6);
      sub_1011BF5D0(&v26);
      if (!--v11) {
        goto LABEL_22;
      }
    }
    if (&v26 != a4) {
      sub_101370C18(a4, (uint64_t)v27, (uint64_t)&v26);
    }
LABEL_31:
    sub_1011BF5D0(&v26);
LABEL_32:
    if (v30) {
      sub_1000DB0A0(v30);
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, findMultiOutboundIntersection", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      LOWORD(v26) = 0;
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::findMultiOutboundIntersection(CLMapGeometryPtr, const CLMapGeometry::DistanceQueryResult &, BOOL, double, CLMapGeometry::ConnectedQueryResultList &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    return 0;
  }
  return v19;
}

void sub_101362834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_101362868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 384);
  *(unsigned char *)(a2 + 898) = 0;
  double v7 = fmod(*(double *)(a2 + 480) - *(float *)(a2 + 280), 360.0);
  if (v7 < 0.0) {
    double v7 = v7 + 360.0;
  }
  if (v7 > 180.0) {
    double v7 = v7 + -360.0;
  }
  if ((*(_DWORD *)(a2 + 792) - 1) < 2)
  {
    double v8 = fabs(v7);
    if (v8 <= 15.0 || fabs(*(double *)(a2 + 632)) < 1.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a2 + 632);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v77 = v6;
        __int16 v78 = 2050;
        double v79 = v8;
        __int16 v80 = 2050;
        *(void *)double v81 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,courseDiff,%{public}.3lf,acrossTrack,%{public}.3lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v38 = *(void *)(a2 + 632);
      int v56 = 134349568;
      uint64_t v57 = v6;
      __int16 v58 = 2050;
      double v59 = v8;
      __int16 v60 = 2050;
      *(void *)uint64_t v61 = v38;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v21);
LABEL_84:
      if (v21 != (char *)buf) {
        free(v21);
      }
      return 0;
    }
    if (!*(void *)(a2 + 256))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v20 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v77 = v6;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid road pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v56 = 134349056;
      uint64_t v57 = v6;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v21);
      goto LABEL_84;
    }
    uint64_t v16 = *(void *)(a1 + 208);
    double v15 = *(std::__shared_weak_count **)(a1 + 216);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v16)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v22 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        uint64_t v77 = v6;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v56 = 134349056;
        uint64_t v57 = v6;
        char v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      BOOL v11 = 0;
      goto LABEL_75;
    }
    double v17 = fmin(fmax(*(double *)(*(void *)(a2 + 256) + 96) + *(double *)(*(void *)(a2 + 256) + 96), 15.0), 45.0);
    v54[0] = (uint64_t)v54;
    v54[1] = (uint64_t)v54;
    unint64_t v55 = 0;
    v53[0] = v16;
    v53[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v18 = sub_1013624EC(v53, (double *)(a2 + 256), *(unsigned char *)(a2 + 276), v54, v17 + 0.5);
    char v19 = v18;
    if (v15)
    {
      sub_1000DB0A0(v15);
      if (v19)
      {
        uint64_t v50 = (uint64_t)&v50;
        double v51 = &v50;
        unint64_t v52 = 0;
        uint64_t v48 = v16;
        uint64_t v49 = v15;
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_46:
        char v23 = sub_1013624EC(&v48, (double *)(a2 + 256), *(unsigned char *)(a2 + 276) == 0, &v50, v17 + 0.5);
        if (v15) {
          sub_1000DB0A0(v15);
        }
        if (v23)
        {
          unint64_t v24 = v55;
          unint64_t v25 = v52;
          if (v55 > 1
            || v52 > 1
            || *(unsigned char *)(a3 + 762)
            && (v27 = *(void *)(a3 + 120), uint64_t v26 = (uint64_t *)(a3 + 120), v27)
            && (sub_1011C9EF0((uint64_t *)(a2 + 256), (uint64_t)buf),
                sub_1011C9EF0(v26, (uint64_t)&v56),
                sub_100FFD530((uint64_t)buf, (uint64_t)&v56)))
          {
            *(unsigned char *)(a2 + 898) = 1;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          unint64_t v28 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            int v29 = *(double **)(a2 + 256);
            double v30 = *v29;
            uint64_t v31 = *((void *)v29 + 12);
            uint64_t v32 = *(void *)(a2 + 632);
            int v33 = *(unsigned __int8 *)(a2 + 898);
            *(_DWORD *)long long buf = 134351617;
            uint64_t v77 = v6;
            __int16 v78 = 2049;
            double v79 = v30;
            __int16 v80 = 1026;
            *(_DWORD *)double v81 = v24 > 1;
            *(_WORD *)&v81[4] = 1026;
            *(_DWORD *)&v81[6] = v25 > 1;
            __int16 v82 = 2050;
            unint64_t v83 = v55;
            __int16 v84 = 2050;
            unint64_t v85 = v52;
            __int16 v86 = 2050;
            double v87 = v17;
            __int16 v88 = 2050;
            uint64_t v89 = v31;
            __int16 v90 = 2050;
            double v91 = v8;
            __int16 v92 = 2050;
            uint64_t v93 = v32;
            __int16 v94 = 1026;
            int v95 = v33;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck,road,%{private}lld,isApproachingMulti,%{public}d,justCrossedMulti,%{public}d,nextList,%{public}lu,priorList,%{public}lu,threshold,%{public}.1lf,roadWidth,%{public}.1lf,courseDiff,%{public}.3lf,AT,%{public}.3lf,harshAmb,%{public}d", buf, 0x64u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            __int16 v42 = *(double **)(a2 + 256);
            double v43 = *v42;
            uint64_t v44 = *((void *)v42 + 12);
            uint64_t v45 = *(void *)(a2 + 632);
            int v46 = *(unsigned __int8 *)(a2 + 898);
            int v56 = 134351617;
            uint64_t v57 = v6;
            __int16 v58 = 2049;
            double v59 = v43;
            __int16 v60 = 1026;
            *(_DWORD *)uint64_t v61 = v24 > 1;
            *(_WORD *)&v61[4] = 1026;
            *(_DWORD *)&v61[6] = v25 > 1;
            __int16 v62 = 2050;
            unint64_t v63 = v55;
            __int16 v64 = 2050;
            unint64_t v65 = v52;
            __int16 v66 = 2050;
            double v67 = v17;
            __int16 v68 = 2050;
            uint64_t v69 = v44;
            __int16 v70 = 2050;
            double v71 = v8;
            __int16 v72 = 2050;
            uint64_t v73 = v45;
            __int16 v74 = 1026;
            int v75 = v46;
            long long v47 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v47);
            if (v47 != (char *)buf) {
              free(v47);
            }
          }
          BOOL v11 = *(unsigned char *)(a2 + 898) != 0;
        }
        else
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v35 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134349056;
            uint64_t v77 = v6;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for prior connected candidates", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            int v56 = 134349056;
            uint64_t v57 = v6;
            double v41 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v41);
            if (v41 != (char *)buf) {
              free(v41);
            }
          }
          BOOL v11 = 0;
        }
        sub_1011BF5D0(&v50);
LABEL_74:
        sub_1011BF5D0(v54);
LABEL_75:
        if (v15) {
          sub_1000DB0A0(v15);
        }
        return v11;
      }
    }
    else if (v18)
    {
      uint64_t v50 = (uint64_t)&v50;
      double v51 = &v50;
      unint64_t v52 = 0;
      uint64_t v48 = v16;
      uint64_t v49 = 0;
      goto LABEL_46;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v34 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v77 = v6;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for next connected candidates", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v56 = 134349056;
      uint64_t v57 = v6;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    BOOL v11 = 0;
    goto LABEL_74;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v12 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(_DWORD *)(a2 + 792);
    *(_DWORD *)long long buf = 134349312;
    uint64_t v77 = v6;
    __int16 v78 = 1026;
    LODWORD(v79) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,signalEnv,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v36 = *(_DWORD *)(a2 + 792);
    int v56 = 134349312;
    uint64_t v57 = v6;
    __int16 v58 = 1026;
    LODWORD(v59) = v36;
    double v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  return *(unsigned char *)(a2 + 898) != 0;
}

void sub_101363578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_1011BF5D0((uint64_t *)va);
  sub_1011BF5D0((uint64_t *)va1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1013635FC(void *a1, void *a2)
{
  double v3 = (double *)(a2 + 5);
  uint64_t v2 = a2[5];
  a1[28] = a2[50];
  uint64_t v4 = a2[48];
  if (a2[6] == v2)
  {
    sub_10137006C(a2 + 5);
    double *v3 = 0.0;
    v3[1] = 0.0;
    v3[2] = 0.0;
    uint64_t v54 = 0;
    long long buf = 0uLL;
    *(void *)&long long v44 = &buf;
    sub_10082B830((void ***)&v44);
    v9.n128_f64[0] = sub_1013E5B64(v3 + 42);
    uint64_t v39 = (uint64_t)&v39;
    int v40 = &v39;
    uint64_t v41 = 0;
    uint64_t v10 = (_DWORD *)a1[26];
    uint64_t v11 = (std::__shared_weak_count *)a1[27];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v10)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      unint64_t v28 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, initialize", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_90;
      }
      double v37 = v11;
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_104;
      }
      goto LABEL_113;
    }
    v9.n128_f64[0] = v9.n128_f64[0] * 4.0;
    if (v9.n128_f64[0] < 75.0) {
      v9.n128_f64[0] = 75.0;
    }
    if (v9.n128_f64[0] > 250.0) {
      v9.n128_f64[0] = 250.0;
    }
    v10[9] = 0;
    if ((*(uint64_t (**)(_DWORD *, uint64_t *, void *, uint64_t, __n128))(*(void *)v10 + 64))(v10, &v39, (void *)v3 + 42, 1, v9))
    {
      if (v41)
      {
        double v37 = v11;
        uint64_t v12 = v40;
        if (v40 != &v39)
        {
          uint64_t v38 = (uint64_t)(a2 + 7);
          while (1)
          {
            LODWORD(v45) = 0;
            long long v44 = 0uLL;
            WORD2(v45) = 1;
            DWORD2(v45) = 0;
            double v51 = 0;
            uint64_t v52 = 0;
            long long __p = 0;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            char v49 = 0;
            uint64_t v14 = v12[2];
            uint64_t v13 = v12[3];
            if (v13)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
              double v15 = (std::__shared_weak_count *)*((void *)&v44 + 1);
              *(void *)&long long v44 = v14;
              *((void *)&v44 + 1) = v13;
              if (v15)
              {
                sub_1000DB0A0(v15);
                uint64_t v14 = v44;
              }
            }
            else
            {
              long long v44 = (unint64_t)v12[2];
            }
            long long v16 = *((_OWORD *)v12 + 3);
            long long v45 = *((_OWORD *)v12 + 2);
            long long v46 = v16;
            *(void *)&long long v47 = v12[8];
            if (v14) {
              break;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            char v19 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 134349056;
              *(void *)((char *)&buf + 4) = v4;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, NULL road at initialization", (uint8_t *)&buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v42 = 134349056;
              uint64_t v43 = v4;
              int v20 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v20);
              if (v20 != (char *)&buf) {
                free(v20);
              }
            }
LABEL_48:
            if (__p)
            {
              double v51 = __p;
              operator delete(__p);
            }
            if (*((void *)&v44 + 1)) {
              sub_1000DB0A0(*((std::__shared_weak_count **)&v44 + 1));
            }
            if (!v14) {
              goto LABEL_107;
            }
            uint64_t v12 = (uint64_t *)v12[1];
            if (v12 == &v39) {
              goto LABEL_70;
            }
          }
          unint64_t v17 = a2[6];
          if (v17 >= a2[7])
          {
            uint64_t v18 = sub_1011E03D4((uint64_t *)v3, (uint64_t)&v44);
          }
          else
          {
            sub_1011E04FC(v38, a2[6], (uint64_t)&v44);
            uint64_t v18 = v17 + 112;
            a2[6] = v17 + 112;
          }
          a2[6] = v18;
          uint64_t v21 = a1[26];
          if (!v21)
          {
LABEL_44:
            BYTE4(v45) ^= 1u;
            *((float *)&v45 + 2) = *((float *)&v45 + 2) + 180.0;
            sub_100142F58(*((float *)&v45 + 2));
            *(float *)&double v25 = v25;
            DWORD2(v45) = LODWORD(v25);
            unint64_t v26 = a2[6];
            if (v26 >= a2[7])
            {
              uint64_t v27 = sub_1011E03D4((uint64_t *)v3, (uint64_t)&v44);
            }
            else
            {
              sub_1011E04FC(v38, a2[6], (uint64_t)&v44);
              uint64_t v27 = v26 + 112;
              a2[6] = v26 + 112;
            }
            a2[6] = v27;
            goto LABEL_48;
          }
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v21 + 104))(v21)) {
            goto LABEL_41;
          }
          int v22 = *(_DWORD *)(v44 + 88);
          if (v22 == 3)
          {
            BOOL v23 = 1;
            goto LABEL_42;
          }
          if (v22) {
LABEL_41:
          }
            BOOL v23 = 0;
          else {
            BOOL v23 = *(unsigned __int8 *)(v44 + 80) != 0;
          }
LABEL_42:
          uint64_t v24 = a1[26];
          if (v24 && (v23 | (*(unsigned int (**)(uint64_t))(*(void *)v24 + 104))(v24) ^ 1) != 1) {
            goto LABEL_48;
          }
          goto LABEL_44;
        }
LABEL_70:
        if (a2[6] != a2[5])
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v31 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 134349056;
            *(void *)((char *)&buf + 4) = v4;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter initialized", (uint8_t *)&buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2))
          {
            uint64_t v6 = 1;
            if (!v11) {
              goto LABEL_92;
            }
            goto LABEL_91;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          LODWORD(v44) = 134349056;
          *(void *)((char *)&v44 + 4) = v4;
          int v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v36);
          if (v36 != (char *)&buf) {
            free(v36);
          }
          uint64_t v6 = 1;
          goto LABEL_108;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134349056;
          *(void *)((char *)&buf + 4) = v4;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0))
        {
LABEL_90:
          uint64_t v6 = 0;
          if (!v11)
          {
LABEL_92:
            sub_10017FF2C(&v39);
            return v6;
          }
LABEL_91:
          sub_1000DB0A0(v11);
          goto LABEL_92;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_104;
        }
LABEL_113:
        dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_104:
        LODWORD(v44) = 134349056;
        *(void *)((char *)&v44 + 4) = v4;
        double v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v30);
        goto LABEL_105;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v32 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 134349056;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned 0 roads", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_90;
      }
      double v37 = v11;
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_69:
        LODWORD(v44) = 134349056;
        *(void *)((char *)&v44 + 4) = v4;
        double v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v30);
LABEL_105:
        if (v30 != (char *)&buf) {
          free(v30);
        }
LABEL_107:
        uint64_t v6 = 0;
LABEL_108:
        uint64_t v11 = v37;
        if (!v37) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v29 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 134349056;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned false", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_90;
      }
      double v37 = v11;
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_69;
      }
    }
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_69;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v5 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,initialized called on already initialized filter", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    LODWORD(v44) = 134349056;
    *(void *)((char *)&v44 + 4) = v4;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v35);
    if (v35 != (char *)&buf) {
      free(v35);
    }
  }
  return 0;
}

void sub_10136429C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a5) {
    sub_1000DB0A0(a5);
  }
  sub_10017FF2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_101364308(uint64_t a1, double *a2, uint64_t a3, __n128 a4)
{
  double v5 = a2[12];
  a4.n128_u64[0] = *(void *)(a1 + 24);
  if (a4.n128_f64[0] >= 0.0) {
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(a1 + 208);
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8);
    a4.n128_u64[0] = 0.75;
    if (v9) {
      a4.n128_f64[0] = 2.5;
    }
  }
  else
  {
    a4.n128_u64[0] = 0.75;
  }
  if (a2[3] - *(double *)(a1 + 232) < 900.0)
  {
    uint64_t v10 = *(void *)(a1 + 208);
    if (v10)
    {
      int v11 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v10 + 104))(v10, a4);
      a4.n128_u64[0] = 0.375;
      if (v11) {
        a4.n128_f64[0] = 1.25;
      }
    }
    else
    {
      a4.n128_u64[0] = 0.375;
    }
  }
  if (a2[23] > 0.0 && a2[12] >= 0.0
    || *(double *)(a3 + 424) <= 0.0
    || (double v12 = *(double *)(a3 + 336), v12 < 0.0)
    || (double v13 = a2[3], v13 >= 0.0) && (v14 = *(double *)(a3 + 264), v14 >= 0.0) && vabdd_f64(v13, v14) > 2.2)
  {
LABEL_20:
    double v12 = v5;
  }
  return v12 > a4.n128_f64[0] || *(unsigned char *)(a3 + 504) != 0;
}

BOOL sub_101364464(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v4 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)long long buf = 134349312;
    uint64_t v9 = v5;
    __int16 v10 = 1026;
    int v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallUseNetwork(const CLMapCrumb &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v3 != 0;
}

void sub_10136463C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a2 + 104);
  if (v6 > 0.0 && *(double *)(a2 + 192) <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 104);
      uint64_t v10 = *(void *)(a2 + 192);
      *(_DWORD *)long long buf = 134349568;
      uint64_t v76 = v8;
      __int16 v77 = 2050;
      uint64_t v78 = v9;
      __int16 v79 = 2050;
      uint64_t v80 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,course invalidated as courseUnc was invalid,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v51 = *(void *)(a2 + 8);
      uint64_t v52 = *(void *)(a2 + 104);
      uint64_t v53 = *(void *)(a2 + 192);
      int v69 = 134349568;
      uint64_t v70 = v51;
      __int16 v71 = 2050;
      uint64_t v72 = v52;
      __int16 v73 = 2050;
      uint64_t v74 = v53;
      uint64_t v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v54);
      if (v54 != (char *)buf) {
        free(v54);
      }
    }
    *(void *)(a2 + 104) = 0xBFF0000000000000;
    *(void *)(a2 + 192) = 0xBFF0000000000000;
    double v6 = -1.0;
  }
  double v11 = *(double *)(a3 + 264);
  if (v11 <= 0.0) {
    return;
  }
  double v12 = *(double *)(a2 + 24);
  BOOL v13 = v12 < 0.0 || v11 < 0.0;
  double v14 = vabdd_f64(v12, v11);
  if (v13) {
    double v15 = -1.0;
  }
  else {
    double v15 = v14;
  }
  v17 = *(double *)(a2 + 184) > 0.0 && (double v16 = *(double *)(a2 + 96), v16 >= 0.0) && v16 < 0.001
     || *(unsigned char *)(a2 + 228) != 0;
  double v18 = *(double *)(a2 + 192);
  BOOL v19 = v18 <= 0.0;
  if (v6 < 0.0) {
    BOOL v19 = 1;
  }
  if (v17 && v19 && v15 < 2.2)
  {
    double v20 = *(double *)(a3 + 432);
    if (v20 < 90.0 && v20 > 0.0)
    {
      double v21 = *(double *)(a3 + 344);
      if (v21 >= 0.0)
      {
        *(double *)(a2 + 104) = v21;
        *(double *)(a2 + 192) = v20;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        int v22 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(void *)(a2 + 8);
          uint64_t v24 = *(void *)(a2 + 104);
          uint64_t v25 = *(void *)(a2 + 192);
          *(_DWORD *)long long buf = 134349568;
          uint64_t v76 = v23;
          __int16 v77 = 2050;
          uint64_t v78 = v24;
          __int16 v79 = 2050;
          uint64_t v80 = v25;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,invalidCourseInfoUpdatedUsingPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_61;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_97;
        }
LABEL_106:
        dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_97:
        uint64_t v55 = *(void *)(a2 + 8);
        uint64_t v56 = *(void *)(a2 + 104);
        uint64_t v57 = *(void *)(a2 + 192);
        int v69 = 134349568;
        uint64_t v70 = v55;
        __int16 v71 = 2050;
        uint64_t v72 = v56;
        __int16 v73 = 2050;
        uint64_t v74 = v57;
        __int16 v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v58);
        if (v58 != (char *)buf) {
          free(v58);
        }
        goto LABEL_61;
      }
    }
  }
  if (v18 > 179.9 && v6 >= 0.0)
  {
    if (v15 >= 2.2
      || (double v26 = *(double *)(a3 + 432), v26 >= 90.0)
      || v26 <= 0.0
      || *(double *)(a3 + 344) < 0.0
      || !*(unsigned char *)(a3 + 504)
      || !*(void *)(a3 + 120))
    {
      *(void *)(a2 + 104) = 0xBFF0000000000000;
      *(void *)(a2 + 192) = 0xBFF0000000000000;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v33 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v34 = *(void *)(a2 + 8);
        uint64_t v35 = *(void *)(a2 + 104);
        uint64_t v36 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v76 = v34;
        __int16 v77 = 2050;
        uint64_t v78 = v35;
        __int16 v79 = 2050;
        uint64_t v80 = v36;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_61;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_97;
      }
      goto LABEL_106;
    }
    v67[0] = (uint64_t)v67;
    v67[1] = (uint64_t)v67;
    unint64_t v68 = 0;
    sub_101362158(a1, (double *)(a3 + 120), (uint64_t)v67);
    double v27 = *(double *)(a3 + 168);
    BOOL v28 = v27 >= 0.07 && v27 <= 0.93;
    if (v28 || v68 < 2)
    {
      *(void *)(a2 + 104) = *(void *)(a3 + 344);
      double v46 = *(double *)(a3 + 432);
      if (v46 < 29.9) {
        double v46 = 29.9;
      }
      *(double *)(a2 + 192) = v46;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      long long v47 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v48 = *(void *)(a2 + 8);
        uint64_t v49 = *(void *)(a2 + 104);
        uint64_t v50 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v76 = v48;
        __int16 v77 = 2050;
        uint64_t v78 = v49;
        __int16 v79 = 2050;
        uint64_t v80 = v50;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,highCourseUncDataReplacedWithPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_91;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_104;
      }
    }
    else
    {
      *(void *)(a2 + 104) = 0xBFF0000000000000;
      *(void *)(a2 + 192) = 0xBFF0000000000000;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v29 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *(void *)(a2 + 8);
        uint64_t v31 = *(void *)(a2 + 104);
        uint64_t v32 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v76 = v30;
        __int16 v77 = 2050;
        uint64_t v78 = v31;
        __int16 v79 = 2050;
        uint64_t v80 = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,particle near multioutbound intersection,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_91;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_104:
        uint64_t v63 = *(void *)(a2 + 8);
        uint64_t v64 = *(void *)(a2 + 104);
        uint64_t v65 = *(void *)(a2 + 192);
        int v69 = 134349568;
        uint64_t v70 = v63;
        __int16 v71 = 2050;
        uint64_t v72 = v64;
        __int16 v73 = 2050;
        uint64_t v74 = v65;
        __int16 v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v66);
        if (v66 != (char *)buf) {
          free(v66);
        }
LABEL_91:
        sub_1011BF5D0(v67);
        goto LABEL_61;
      }
    }
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_104;
  }
LABEL_61:
  double v37 = *(double *)(a2 + 192);
  double v38 = *(double *)(a2 + 104);
  if (v37 > 0.0 && v38 >= 0.0)
  {
    if (v37 < 13.0)
    {
      *(void *)(a2 + 192) = 0x402A000000000000;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v39 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = *(void *)(a2 + 8);
        uint64_t v41 = *(void *)(a2 + 104);
        uint64_t v42 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v76 = v40;
        __int16 v77 = 2050;
        uint64_t v78 = v41;
        __int16 v79 = 2050;
        uint64_t v80 = v42;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v59 = *(void *)(a2 + 8);
        uint64_t v60 = *(void *)(a2 + 104);
        uint64_t v61 = *(void *)(a2 + 192);
        int v69 = 134349568;
        uint64_t v70 = v59;
        __int16 v71 = 2050;
        uint64_t v72 = v60;
        __int16 v73 = 2050;
        uint64_t v74 = v61;
        __int16 v62 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v62);
        if (v62 != (char *)buf) {
          free(v62);
        }
      }
    }
    double v37 = *(double *)(a2 + 192);
    double v38 = *(double *)(a2 + 104);
  }
  if (v37 <= 0.0) {
    goto LABEL_81;
  }
  if (v38 < 0.0) {
    goto LABEL_81;
  }
  if (*(double *)(a3 + 432) <= 0.0) {
    goto LABEL_81;
  }
  double v43 = *(double *)(a3 + 344);
  if (v43 < 0.0 || v15 >= 2.2) {
    goto LABEL_81;
  }
  double v44 = fmod(v38 - v43, 360.0);
  if (v44 < 0.0) {
    double v44 = v44 + 360.0;
  }
  if (v44 > 180.0) {
    double v44 = v44 + -360.0;
  }
  double v45 = fabs(v44);
  if (!*(unsigned char *)(a1 + 1032))
  {
    *(unsigned char *)(a1 + 1032) = v45 > 14.0;
    return;
  }
  if (v45 < 8.0) {
LABEL_81:
  }
    *(unsigned char *)(a1 + 1032) = 0;
}

void sub_10136526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1011BF5D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_101365294(uint64_t a1, uint64_t a2, double *a3)
{
  double v4 = *(double *)(a2 + 24);
  if (v4 >= 0.0 && (double v5 = a3[33], v5 >= 0.0))
  {
    double v9 = (v4 - v5) * (v4 - v5);
    double v10 = *(double *)(a2 + 184);
    double v11 = 0.0;
    if (v10 <= 0.0 || (v12 = *(double *)(a2 + 96), v12 < 0.0) || (double v13 = a3[53], v13 <= 0.0))
    {
      double v15 = 0.0;
    }
    else
    {
      double v14 = a3[42];
      double v15 = 0.0;
      if (v14 >= 0.0)
      {
        double v11 = v9 * ((v13 * v13 + v10 * v10) * 0.25);
        double v15 = v9 * ((v12 + v14) * 0.5 * ((v12 + v14) * 0.5 * 0.25));
      }
    }
    return sqrt(v9 * 3.0 + v11 + v15);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349312;
      uint64_t v18 = v7;
      __int16 v19 = 2050;
      unint64_t v20 = 0xBFF0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual double CLParticleMM::CLPedestrianMapMatcherFilter::getProcessNoise(const CLMapCrumb &, const MMSnapData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0.0;
  }
}

uint64_t sub_101365528(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  if (!*(unsigned char *)(a3 + 504)) {
    return 0;
  }
  if (*(void *)(a3 + 120))
  {
    int v9 = 0;
    double v10 = (long long *)(a3 + 136);
    double v11 = (_OWORD *)(a3 + 176);
    uint64_t v24 = (uint64_t)(a2 + 7);
    uint64_t v25 = a2 + 5;
    while (1)
    {
      double v12 = *(std::__shared_weak_count **)(a3 + 128);
      uint64_t v27 = *(void *)(a3 + 120);
      BOOL v28 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(a3 + 152);
      long long v29 = *v10;
      long long v30 = v13;
      uint64_t v31 = *(void *)(a3 + 168);
      v32[0] = *v11;
      *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)(a3 + 185);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      double v14 = *(const void **)(a3 + 208);
      uint64_t v15 = *(void *)(a3 + 216);
      long long __p = 0;
      sub_101000368(&__p, v14, v15, 0x8E38E38E38E38E39 * ((v15 - (uint64_t)v14) >> 3));
      if (byte_102476978)
      {
        byte_102476978 = 0;
        float v16 = *(float *)&dword_10247697C;
      }
      else
      {
        do
        {
          float v17 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v18 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v19 = (float)(v18 * v18) + (float)(v17 * v17);
        }
        while (v19 >= 1.0);
        float v16 = 0.0;
        if (v19 != 0.0)
        {
          float v20 = sqrtf((float)(logf((float)(v18 * v18) + (float)(v17 * v17)) * -2.0) / v19);
          *(float *)&dword_10247697C = v18 * v20;
          byte_102476978 = 1;
          float v16 = v17 * v20;
        }
      }
      if ((sub_101360660(a1, (double *)&v27, a4, v16 * a5 + 0.0) & 1) == 0) {
        break;
      }
      unint64_t v21 = a2[6];
      if (v21 >= a2[7])
      {
        uint64_t v22 = sub_1011E03D4(v25, (uint64_t)&v27);
      }
      else
      {
        sub_1011E04FC(v24, a2[6], (uint64_t)&v27);
        uint64_t v22 = v21 + 112;
        a2[6] = v21 + 112;
      }
      a2[6] = v22;
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
      if (v28) {
        sub_1000DB0A0(v28);
      }
      if (++v9 == 12) {
        return 12;
      }
    }
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    if (v28) {
      sub_1000DB0A0(v28);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_1013657B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v4 + 48) = v5;
  sub_100FFFC10((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013657E8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (!*(unsigned char *)(a3 + 746)) {
    return 0;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  double v10 = (long long *)(a3 + 136);
  double v11 = (_OWORD *)(a3 + 176);
  uint64_t v26 = a2 + 56;
  uint64_t v27 = (uint64_t *)(a2 + 40);
  while (1)
  {
    double v12 = *(std::__shared_weak_count **)(a3 + 128);
    uint64_t v30 = *(void *)(a3 + 120);
    uint64_t v31 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v13 = v10[1];
    long long v32 = *v10;
    long long v33 = v13;
    uint64_t v34 = *((void *)v10 + 4);
    v35[0] = *v11;
    *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v11 + 9);
    double v37 = 0;
    uint64_t v38 = 0;
    double v14 = *(const void **)(a3 + 208);
    uint64_t v15 = *(void *)(a3 + 216);
    long long __p = 0;
    sub_101000368(&__p, v14, v15, 0x8E38E38E38E38E39 * ((v15 - (uint64_t)v14) >> 3));
    if (v30)
    {
      BYTE4(v32) ^= 1u;
      *((float *)&v32 + 2) = *((float *)&v32 + 2) + 180.0;
      sub_100142F58(*((float *)&v32 + 2));
      *(float *)&double v16 = v16;
      DWORD2(v32) = LODWORD(v16);
      if (byte_102476978)
      {
        byte_102476978 = 0;
        float v17 = *(float *)&dword_10247697C;
      }
      else
      {
        do
        {
          float v18 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v20 = (float)(v19 * v19) + (float)(v18 * v18);
        }
        while (v20 >= 1.0);
        float v17 = 0.0;
        if (v20 != 0.0)
        {
          float v21 = sqrtf((float)(logf((float)(v19 * v19) + (float)(v18 * v18)) * -2.0) / v20);
          *(float *)&dword_10247697C = v19 * v21;
          byte_102476978 = 1;
          float v17 = v18 * v21;
        }
      }
      if (sub_101360660(a1, (double *)&v30, *(double *)(a2 + 384), v17 * a4 + a5))
      {
        unint64_t v22 = *(void *)(a2 + 48);
        if (v22 >= *(void *)(a2 + 56))
        {
          uint64_t v23 = sub_1011E03D4(v27, (uint64_t)&v30);
        }
        else
        {
          sub_1011E04FC(v26, *(void *)(a2 + 48), (uint64_t)&v30);
          uint64_t v23 = v22 + 112;
          *(void *)(a2 + 48) = v22 + 112;
        }
        int v24 = 0;
        *(void *)(a2 + 48) = v23;
        uint64_t v8 = (v8 + 1);
      }
      else
      {
        int v24 = 1;
      }
    }
    else
    {
      int v24 = 4;
    }
    if (__p)
    {
      double v37 = __p;
      operator delete(__p);
    }
    if (v31) {
      sub_1000DB0A0(v31);
    }
    if ((v24 | 4) != 4) {
      break;
    }
    if (++v9 == 3) {
      return v8;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_101365AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v6 + 48) = v7;
  sub_100FFFC10((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101365AE4(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 745)) {
    BOOL v3 = *(void *)a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  uint64_t v7 = a2 + 5;
  uint64_t v8 = a2 + 7;
  unint64_t v9 = a2[6];
  int v10 = 4;
  do
  {
    if (v9 >= *v8)
    {
      unint64_t v9 = sub_1011E03D4(v7, a3);
    }
    else
    {
      sub_1011E04FC((uint64_t)v8, v9, a3);
      v9 += 112;
      a2[6] = v9;
    }
    a2[6] = v9;
    --v10;
  }
  while (v10);
  return 4;
}

void sub_101365B8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_101365B94(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  if (*(unsigned char *)(a1 + 1064)) {
    BOOL v5 = *(unsigned char *)(a3 + 504) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  double v10 = sub_1000F1648((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a1 + 1120), *(double *)(a1 + 1128), *(double *)(a3 + 312));
  if (*(int *)(a1 + 1200) < 1) {
    return 0;
  }
  int v11 = 0;
  uint64_t v12 = 0;
  double v13 = v10 + a5 + 0.0;
  if (v13 <= 0.0) {
    double v14 = 0.1;
  }
  else {
    double v14 = v13;
  }
  while (2)
  {
    int v24 = v11;
    int v15 = 4;
    do
    {
      double v16 = *(std::__shared_weak_count **)(a1 + 1096);
      uint64_t v25 = *(void **)(a1 + 1088);
      uint64_t v26 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v17 = *(_OWORD *)(a1 + 1120);
      long long v27 = *(_OWORD *)(a1 + 1104);
      long long v28 = v17;
      uint64_t v29 = *(void *)(a1 + 1136);
      v30[0] = *(_OWORD *)(a1 + 1144);
      *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a1 + 1153);
      long long v32 = 0;
      uint64_t v33 = 0;
      float v18 = *(const void **)(a1 + 1176);
      uint64_t v19 = *(void *)(a1 + 1184);
      long long __p = 0;
      sub_101000368(&__p, v18, v19, 0x8E38E38E38E38E39 * ((v19 - (uint64_t)v18) >> 3));
      if (v25)
      {
        if (sub_101360660(a1, (double *)&v25, a4, v14))
        {
          if (**(void **)(a1 + 1088) == *v25 && *(unsigned __int8 *)(a1 + 1108) != BYTE4(v27))
          {
            int v22 = 0;
          }
          else
          {
            unint64_t v20 = a2[6];
            if (v20 >= a2[7])
            {
              uint64_t v21 = sub_1011E03D4(a2 + 5, (uint64_t)&v25);
            }
            else
            {
              sub_1011E04FC((uint64_t)(a2 + 7), a2[6], (uint64_t)&v25);
              uint64_t v21 = v20 + 112;
              a2[6] = v20 + 112;
            }
            int v22 = 0;
            a2[6] = v21;
            uint64_t v12 = (v12 + 1);
          }
        }
        else
        {
          int v22 = 1;
        }
      }
      else
      {
        int v22 = 7;
      }
      if (__p)
      {
        long long v32 = __p;
        operator delete(__p);
      }
      if (v26) {
        sub_1000DB0A0(v26);
      }
      if (v22 != 7 && v22) {
        return 0xFFFFFFFFLL;
      }
      --v15;
    }
    while (v15);
    int v11 = v24 + 1;
    if (v24 + 1 < *(_DWORD *)(a1 + 1200)) {
      continue;
    }
    break;
  }
  return v12;
}

void sub_101365DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100FFFC10((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101365E1C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  if (!*(unsigned char *)(a3 + 504)) {
    return 0;
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  char v53 = 0;
  int v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v6 = *(void *)(a3 + 120);
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 128);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v49 = v6;
    uint64_t v50 = v7;
  }
  else
  {
    uint64_t v49 = *(void *)(a3 + 120);
    uint64_t v50 = 0;
  }
  char v52 = *(unsigned char *)(a3 + 140);
  uint64_t v57 = *(void *)(a3 + 168);
  if (!v6)
  {
    uint64_t v8 = 0xFFFFFFFFLL;
    if (!v7) {
      return v8;
    }
    goto LABEL_55;
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  int v46 = 0;
  double v43 = (__n128 *)&v43;
  double v44 = &v43;
  uint64_t v45 = 0;
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v41 = &v40;
  uint64_t v42 = 0;
  sub_10136628C(a1, &v49, &v46, &v40, &v43, &v48, &v47, 80.0);
  if ((uint64_t *)(a1 + 1808) != &v40) {
    sub_1010B545C((uint64_t *)(a1 + 1808), (uint64_t)v41, (uint64_t)&v40);
  }
  if ((__n128 **)(a1 + 1784) != &v43) {
    sub_1010B545C((uint64_t *)(a1 + 1784), (uint64_t)v44, (uint64_t)&v43);
  }
  uint64_t v26 = a2 + 5;
  uint64_t v9 = (uint64_t)v44;
  if (v44 != &v43)
  {
    uint64_t v8 = 0;
LABEL_13:
    int v10 = 6;
    while (1)
    {
      int v30 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      __int16 v31 = 1;
      int v32 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      long long __p = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      char v36 = 0;
      uint64_t v12 = *(void *)(v9 + 16);
      int v11 = *(std::__shared_weak_count **)(v9 + 24);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        double v13 = v29;
        uint64_t v28 = v12;
        uint64_t v29 = v11;
        if (v13) {
          sub_1000DB0A0(v13);
        }
      }
      else
      {
        uint64_t v28 = *(void *)(v9 + 16);
        uint64_t v29 = 0;
      }
      *(void *)&long long v34 = *(void *)(v9 + 40);
      LOBYTE(v31) = *(unsigned char *)(v9 + 32);
      char v14 = sub_101360660(a1, (double *)&v28, a4, (double)(((int)v8 + 1) % 6) * 3.5);
      if (v14)
      {
        unint64_t v15 = a2[6];
        if (v15 >= a2[7])
        {
          uint64_t v16 = sub_1011E03D4(v26, (uint64_t)&v28);
        }
        else
        {
          sub_1011E04FC((uint64_t)(a2 + 7), a2[6], (uint64_t)&v28);
          uint64_t v16 = v15 + 112;
          a2[6] = v15 + 112;
        }
        a2[6] = v16;
        uint64_t v8 = (v8 + 1);
      }
      if (__p)
      {
        uint64_t v38 = __p;
        operator delete(__p);
      }
      if (v29) {
        sub_1000DB0A0(v29);
      }
      if ((v14 & 1) == 0) {
        goto LABEL_53;
      }
      if (!--v10)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if ((__n128 **)v9 != &v43) {
          goto LABEL_13;
        }
        goto LABEL_34;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_34:
  uint64_t v17 = (uint64_t)v41;
  if (v41 != &v40)
  {
LABEL_35:
    int v18 = 6;
    while (1)
    {
      int v30 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      __int16 v31 = 1;
      int v32 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      long long __p = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      char v36 = 0;
      uint64_t v20 = *(void *)(v17 + 16);
      uint64_t v19 = *(std::__shared_weak_count **)(v17 + 24);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = v29;
        uint64_t v28 = v20;
        uint64_t v29 = v19;
        if (v21) {
          sub_1000DB0A0(v21);
        }
      }
      else
      {
        uint64_t v28 = *(void *)(v17 + 16);
        uint64_t v29 = 0;
      }
      *(void *)&long long v34 = *(void *)(v17 + 40);
      LOBYTE(v31) = *(unsigned char *)(v17 + 32);
      char v22 = sub_101360660(a1, (double *)&v28, a4, (double)(((int)v8 + 1) % 6) * 3.5);
      if (v22)
      {
        unint64_t v23 = a2[6];
        if (v23 >= a2[7])
        {
          uint64_t v24 = sub_1011E03D4(v26, (uint64_t)&v28);
        }
        else
        {
          sub_1011E04FC((uint64_t)(a2 + 7), a2[6], (uint64_t)&v28);
          uint64_t v24 = v23 + 112;
          a2[6] = v23 + 112;
        }
        a2[6] = v24;
        uint64_t v8 = (v8 + 1);
      }
      if (__p)
      {
        uint64_t v38 = __p;
        operator delete(__p);
      }
      if (v29) {
        sub_1000DB0A0(v29);
      }
      if ((v22 & 1) == 0) {
        break;
      }
      if (!--v18)
      {
        uint64_t v17 = *(void *)(v17 + 8);
        if ((uint64_t *)v17 != &v40) {
          goto LABEL_35;
        }
        goto LABEL_54;
      }
    }
LABEL_53:
    uint64_t v8 = 0xFFFFFFFFLL;
  }
LABEL_54:
  sub_10017FF2C(&v40);
  sub_10017FF2C((uint64_t *)&v43);
  uint64_t v7 = v50;
  if (v50) {
LABEL_55:
  }
    sub_1000DB0A0(v7);
  return v8;
}

void sub_101366238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + 48) = v30;
  sub_100FFFC10(&a12);
  sub_10017FF2C(&a26);
  sub_10017FF2C(&a29);
  long long v33 = *(std::__shared_weak_count **)(v31 - 152);
  if (v33) {
    sub_1000DB0A0(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10136628C(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4, __n128 **a5, void *a6, void *a7, double a8)
{
  uint64_t v15 = *(void *)(a1 + 208);
  char v14 = *(std::__shared_weak_count **)(a1 + 216);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v37 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, multiOutboundHelper", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      LOWORD(v45) = 0;
      double v43 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::multiOutboundHelper(CLMapGeometry::DistanceQueryResult &, int &, double, CLMapGeometry::IntersectionQueryResultList &, CLMapGeometry::IntersectionQueryResultList &, double &, double &) const", "%s\n", (const char *)v43);
      if (v43 != &buf) {
        free(v43);
      }
    }
    uint64_t v21 = 0;
LABEL_40:
    if (!v14) {
      return v21;
    }
LABEL_41:
    sub_1000DB0A0(v14);
    return v21;
  }
  *a6 = 0;
  *a7 = 0;
  *a3 = 0;
  int v16 = *((unsigned __int8 *)a2 + 20);
  double v17 = *((double *)a2 + 6);
  double v18 = *(double *)a2;
  sub_10039C4B4((void *)*a2);
  double v19 = 1.0 - v17;
  if (!v16) {
    double v19 = v17;
  }
  double v20 = v19 * *(double *)(*(void *)&v18 + 40);
  uint64_t v21 = 1;
  if (v20 > a8) {
    goto LABEL_40;
  }
  double v22 = a8 - v20;
  if (*((unsigned char *)a2 + 20)) {
    double v23 = 1.0;
  }
  else {
    double v23 = 0.0;
  }
  int v24 = 30;
  while (1)
  {
    sub_10017FF2C(a4);
    *a3 = 0;
    int v25 = *((unsigned __int8 *)a2 + 20);
    long long v27 = *(void **)(*a2 + 136);
    uint64_t v26 = *(void **)(*a2 + 144);
    if (*((unsigned char *)a2 + 20))
    {
      if (v26 == v27)
      {
        *a6 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        *a6 = *(v26 - 2);
        uint64_t v28 = *(v26 - 1);
      }
      double v29 = 1.0;
    }
    else if (v26 == v27)
    {
      *a6 = 0;
      double v29 = 0.0;
      uint64_t v28 = 0;
    }
    else
    {
      *a6 = *v27;
      uint64_t v28 = v27[1];
      double v29 = 0.0;
    }
    *a7 = v28;
    *((double *)a2 + 6) = v29;
    uint64_t v45 = (uint64_t)&v45;
    int v46 = &v45;
    unint64_t v47 = 0;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, BOOL, void, double, double))(*(void *)v15 + 72))(v15, &v45, a2, v25 != 0, 0, v23, v22);
    if ((v21 & 1) == 0) {
      break;
    }
    if (v47 >= 2)
    {
      __n128 buf = 0uLL;
      char v51 = 0;
      uint64_t v39 = v46;
      if (v46 != &v45)
      {
        do
        {
          char v49 = *((unsigned char *)v39 + 24);
          uint64_t v50 = v39[6];
          unint64_t v41 = v39[4];
          unint64_t v40 = v39[5];
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = (std::__shared_weak_count *)buf.n128_u64[1];
          buf.n128_u64[0] = v41;
          buf.n128_u64[1] = v40;
          if (v42) {
            sub_1000DB0A0(v42);
          }
          char v51 = 1;
          sub_1010B1704((__n128 **)a4, &buf);
          ++*a3;
          uint64_t v39 = (uint64_t *)v39[1];
        }
        while (v39 != &v45);
        if (buf.n128_u64[1]) {
          sub_1000DB0A0((std::__shared_weak_count *)buf.n128_u64[1]);
        }
      }
      break;
    }
    if (v47 != 1) {
      break;
    }
    __n128 buf = 0uLL;
    char v51 = 0;
    char v49 = *((unsigned char *)v46 + 24);
    uint64_t v50 = v46[6];
    unint64_t v31 = v46[4];
    unint64_t v30 = v46[5];
    if (v30)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      int v32 = (std::__shared_weak_count *)buf.n128_u64[1];
      buf.n128_u64[0] = v31;
      buf.n128_u64[1] = v30;
      if (v32) {
        sub_1000DB0A0(v32);
      }
    }
    else
    {
      __n128 buf = (__n128)(unint64_t)v46[4];
    }
    char v51 = 1;
    sub_1010B1704(a5, &buf);
    uint64_t v34 = v46[4];
    uint64_t v33 = v46[5];
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    long long v35 = (std::__shared_weak_count *)a2[1];
    *a2 = v34;
    a2[1] = v33;
    if (v35) {
      sub_1000DB0A0(v35);
    }
    char v36 = v46;
    *((unsigned char *)a2 + 20) = *((unsigned char *)v46 + 24);
    a2[6] = v36[6];
    if (buf.n128_u64[1]) {
      sub_1000DB0A0((std::__shared_weak_count *)buf.n128_u64[1]);
    }
    sub_1011BF5D0(&v45);
    if (!--v24)
    {
      uint64_t v21 = 1;
      goto LABEL_52;
    }
  }
  sub_1011BF5D0(&v45);
LABEL_52:
  if (v14) {
    goto LABEL_41;
  }
  return v21;
}

void sub_101366708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    sub_1000DB0A0(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101366758(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  if (*(void *)(a1 + 1880) == *(void *)(a1 + 1888)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 384);
  if (sub_100178D5C(a1 + 1832, *(double *)(a2 + 400), 2.5)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 1880);
  uint64_t v27 = *(void *)(a1 + 1888);
  if (v5 == v27) {
    return 0;
  }
  uint64_t v26 = v4;
  uint64_t v6 = 0;
  uint64_t v29 = a1;
  while (2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 8);
    unint64_t v31 = *(uint64_t **)v5;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v30 = *(_DWORD *)(v5 + 16);
    int v35 = *(unsigned __int8 *)(v5 + 20);
    __int16 v36 = *(_WORD *)(v5 + 21);
    char v37 = *(unsigned char *)(v5 + 23);
    float v32 = *(float *)(v5 + 24);
    unsigned int v8 = *(_DWORD *)(v5 + 28);
    unint64_t v33 = *(void *)(v5 + 40);
    uint64_t v34 = *(void *)(v5 + 32);
    char v9 = 1;
    uint64_t v28 = v5;
    uint64_t v10 = *(void *)(v5 + 48);
    do
    {
      char v11 = v9;
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      LODWORD(v39) = 0;
      double v44 = 0;
      uint64_t v45 = 0;
      double v43 = 0;
      memset(v40, 0, sizeof(v40));
      long long v41 = 0u;
      char v42 = 0;
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
        *(void *)__n128 buf = v31;
        *(void *)&uint8_t buf[8] = v7;
        if (v12) {
          sub_1000DB0A0(v12);
        }
      }
      else
      {
        *(void *)__n128 buf = v31;
        *(void *)&uint8_t buf[8] = 0;
      }
      *(_DWORD *)&uint8_t buf[16] = v30;
      buf[20] = v35;
      *(_WORD *)&buf[21] = v36;
      buf[23] = v37;
      unint64_t v39 = __PAIR64__(v8, LODWORD(v32));
      v40[0] = v34;
      v40[1] = v33;
      _OWORD v40[2] = v10;
      if (byte_102476978)
      {
        byte_102476978 = 0;
        float v13 = *(float *)&dword_10247697C;
      }
      else
      {
        do
        {
          float v14 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v15 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v16 = (float)(v15 * v15) + (float)(v14 * v14);
        }
        while (v16 >= 1.0);
        float v13 = 0.0;
        if (v16 != 0.0)
        {
          float v17 = sqrtf((float)(logf((float)(v15 * v15) + (float)(v14 * v14)) * -2.0) / v16);
          *(float *)&dword_10247697C = v15 * v17;
          byte_102476978 = 1;
          float v13 = v14 * v17;
        }
      }
      char v18 = sub_101360660(v29, (double *)buf, *(double *)(a2 + 384), v13);
      if (v18)
      {
        int v19 = v6;
        unint64_t v20 = *(void *)(a2 + 48);
        if (v20 >= *(void *)(a2 + 56))
        {
          uint64_t v21 = sub_1011E03D4((uint64_t *)(a2 + 40), (uint64_t)buf);
        }
        else
        {
          sub_1011E04FC(a2 + 56, *(void *)(a2 + 48), (uint64_t)buf);
          uint64_t v21 = v20 + 112;
          *(void *)(a2 + 48) = v20 + 112;
        }
        *(void *)(a2 + 48) = v21;
        uint64_t v6 = (v19 + 1);
      }
      if (v43)
      {
        double v44 = v43;
        operator delete(v43);
      }
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v18 & 1) == 0)
      {
        if (v7) {
          sub_1000DB0A0(v7);
        }
        return 0xFFFFFFFFLL;
      }
      char v9 = 0;
    }
    while ((v11 & 1) != 0);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *v31;
      *(_DWORD *)__n128 buf = 134350337;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&buf[14] = v34;
      *(_WORD *)&buf[22] = 2049;
      unint64_t v39 = v33;
      LOWORD(v40[0]) = 2050;
      *(double *)((char *)v40 + 2) = v32;
      WORD1(v40[1]) = 2049;
      *(void *)((char *)&v40[1] + 4) = v23;
      WORD2(v40[2]) = 1026;
      *(_DWORD *)((char *)&v40[2] + 6) = v35;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHint,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLParticleMM::CLPedestrianMapMatcherFilter::addRouteHintParticles(MMFilterData &, const MMSnapData &)", "%s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
    if (v7) {
      sub_1000DB0A0(v7);
    }
    uint64_t v5 = v28 + 56;
    if (v28 + 56 != v27) {
      continue;
    }
    break;
  }
  return v6;
}

void sub_101366CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33) {
    sub_1000DB0A0(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101366D10(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  if (a4[33] <= 0.0) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 208);
  char v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    __int16 v36 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, predict", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    double v44 = v9;
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_55;
    }
    goto LABEL_64;
  }
  double v46 = *(double *)(a2 + 8);
  double v11 = sub_10135FBC8(a1, a2, a4);
  double v12 = v11;
  if (v11 < 0.0) {
    goto LABEL_44;
  }
  *(double *)(a3 + 856) = v11;
  if (*(void *)(a3 + 48) == *(void *)(a3 + 40))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    char v37 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134349056;
      double v48 = v46;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,predict called with 0 particles", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    double v44 = v9;
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_55:
      long long v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
LABEL_57:
      uint64_t v35 = 0;
      goto LABEL_58;
    }
LABEL_64:
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_55;
  }
  uint64_t v43 = *(void *)(a3 + 48) - *(void *)(a3 + 40);
  double v44 = v9;
  double v45 = sub_101365294(v10, a2, a4);
  float v13 = *(double **)(a3 + 40);
  float v14 = *(double **)(a3 + 48);
  if (v13 != v14)
  {
    int v15 = 0;
    do
    {
      if (byte_102476978)
      {
        byte_102476978 = 0;
        float v16 = *(float *)&dword_10247697C;
      }
      else
      {
        do
        {
          float v17 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v18 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v19 = (float)(v18 * v18) + (float)(v17 * v17);
        }
        while (v19 >= 1.0);
        float v16 = 0.0;
        if (v19 != 0.0)
        {
          float v20 = sqrtf((float)(logf((float)(v18 * v18) + (float)(v17 * v17)) * -2.0) / v19);
          *(float *)&dword_10247697C = v18 * v20;
          byte_102476978 = 1;
          float v16 = v17 * v20;
        }
      }
      double v21 = v16;
      double v22 = v45 * v21;
      double v23 = fabs(v21);
      if ((-252645135 * v15) <= 0xF0F0F0F) {
        double v22 = v23 * 34.0;
      }
      double v24 = v23 * 8.0;
      if ((-1171354717 * v15) > 0x1745D174 || v45 >= 8.0) {
        double v24 = v22;
      }
      if ((sub_101360660(a1, v13, v46, v12 + v24) & 1) == 0) {
        goto LABEL_57;
      }
      ++v15;
      v13 += 14;
    }
    while (v13 != v14);
  }
  int v26 = sub_101365B94(a1, (uint64_t *)a3, (uint64_t)a4, v46, v12);
  if (v26 == -1
    || (int v27 = sub_101365E1C(a1, (uint64_t *)a3, (uint64_t)a4, v46), v27 == -1)
    || (int v28 = sub_101365528(a1, (uint64_t *)a3, (uint64_t)a4, v46, v45), v28 == -1)
    || (uint64_t v29 = sub_1013657E8(a1, a3, (uint64_t)a4, v45, v12), v30 = v29, v29 == -1)
    || (int v31 = sub_101365AE4(v29, (void *)a3, (uint64_t)a4), v32 = sub_101366758(a1, a3), v32 == -1))
  {
LABEL_44:
    uint64_t v35 = 0;
    goto LABEL_45;
  }
  unint64_t v33 = *(void **)(a3 + 40);
  uint64_t v34 = *(void **)(a3 + 48);
  while (v33 != v34)
  {
    v33[7] = 0;
    v33[8] = 0;
    v33[9] = 0;
    v33[12] = v33[11];
    v33 += 14;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  unint64_t v39 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v40 = -1227133513 * ((*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 4);
    *(_DWORD *)__n128 buf = 134351104;
    double v48 = v46;
    __int16 v49 = 1026;
    int v50 = v40;
    __int16 v51 = 2050;
    uint64_t v52 = 0x6DB6DB6DB6DB6DB7 * (v43 >> 4);
    __int16 v53 = 1026;
    int v54 = v26;
    __int16 v55 = 1026;
    int v56 = v27;
    __int16 v57 = 1026;
    int v58 = v28;
    __int16 v59 = 1026;
    int v60 = v30;
    __int16 v61 = 1026;
    int v62 = v31;
    __int16 v63 = 1026;
    int v64 = v32;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDirection,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d", buf, 0x40u);
  }
  char v9 = v44;
  if (!sub_10013D1A0(115, 2))
  {
    uint64_t v35 = 1;
    goto LABEL_45;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  char v42 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "%s\n", v42);
  if (v42 != (char *)buf) {
    free(v42);
  }
  uint64_t v35 = 1;
LABEL_58:
  char v9 = v44;
LABEL_45:
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return v35;
}

void sub_10136750C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101367564(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a1 + 238;
  uint64_t v7 = a1[239];
  uint64_t v8 = a1[238];
  if (v7 != v8) {
    sub_1011E07EC(a1 + 241, v8, v7, 0xF83E0F83E0F83E1 * ((v7 - v8) >> 3));
  }
  sub_10082B744(v6);
  if (!*((unsigned char *)v5 + 9)) {
    return 0;
  }
  if (v5[235] == v5[236]) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 384);
  if (sub_100178D5C((uint64_t)(v5 + 229), *(double *)(a2 + 400), 2.5)
    || !sub_1010002E8((double *)v5 + 244, *((double *)v5 + 234), 60.0))
  {
    return 0;
  }
  uint64_t v192 = a3;
  uint64_t v10 = (std::__shared_weak_count *)v5[27];
  uint64_t v200 = v5[26];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v200)
  {
    long long v195 = v6;
    long long v208 = 0;
    long long v209 = 0;
    unint64_t v210 = 0;
    v198 = v5;
    long long v191 = v10;
    if (!*(unsigned char *)(a3 + 504)) {
      goto LABEL_18;
    }
    sub_1011C9EF0((uint64_t *)(a3 + 120), (uint64_t)v207);
    double v11 = (__n128 *)v5[235];
    if (v11 == (__n128 *)v5[236]) {
      goto LABEL_18;
    }
    while (1)
    {
      unint64_t v205 = v11->n128_u64[0];
      double v12 = (std::__shared_weak_count *)v11->n128_u64[1];
      char v206 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100FFD4D0(buf, &v205, v11[1].n128_u8[4]);
      BOOL v13 = sub_100FFD530((uint64_t)v207, (uint64_t)buf);
      if (v206) {
        sub_1000DB0A0(v206);
      }
      if (v13) {
        break;
      }
      double v11 = (__n128 *)((char *)v11 + 56);
      if (v11 == (__n128 *)v5[236]) {
        goto LABEL_18;
      }
    }
    double v65 = *(double *)(a2 + 400);
    double v66 = -1.0;
    if (v65 >= 0.0)
    {
      double v67 = *(double *)(a3 + 264);
      double v68 = vabdd_f64(v65, v67);
      if (v67 >= 0.0) {
        double v66 = v68;
      }
      else {
        double v66 = -1.0;
      }
    }
    double v69 = fmax(*(double *)(a2 + 856), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
    if (v69 <= v66 * 6.0) {
      double v70 = v69;
    }
    else {
      double v70 = v66 * 6.0;
    }
    sub_100FFFA78((uint64_t)v237, a3 + 120);
    long long v202 = (__n128 *)&v202;
    long long v203 = &v202;
    for (i = 0; v11 != (__n128 *)v5[236]; double v11 = (__n128 *)((char *)v11 + 56))
      sub_1010AFE78(&v202, v11);
    int v201 = 0;
    if (((*(uint64_t (**)(uint64_t, unsigned char *, __n128 **, int *, double, double))(*(void *)v200 + 56))(v200, v237, &v202, &v201, *(double *)&v238[16], v70) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v115 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_184;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)uint64_t v225 = 134349056;
      *(void *)&v225[4] = v9;
      long double v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v116);
      goto LABEL_320;
    }
    if (i <= v201)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v117 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349568;
        *(void *)&uint8_t buf[4] = v9;
        __int16 v244 = 1026;
        *(_DWORD *)uint64_t v245 = v201;
        *(_WORD *)&v245[4] = 2050;
        *(void *)&v245[6] = i;
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_184;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)uint64_t v225 = 134349568;
      *(void *)&v225[4] = v9;
      *(_WORD *)&v225[12] = 1026;
      *(_DWORD *)&v225[14] = v201;
      *(_WORD *)&v225[18] = 2050;
      *(void *)&v225[20] = i;
      long double v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v116);
      goto LABEL_320;
    }
    double v71 = *(float *)&v237[24];
    double v72 = 5.0;
    if (*(double *)&v238[16] <= 0.97 && *(double *)&v238[16] >= 0.03)
    {
      if (*(double *)(a2 + 568) <= 0.0 || (double v73 = *(double *)(a2 + 480), v73 < 0.0))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        double v118 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__n128 buf = 134349312;
          *(void *)&uint8_t buf[4] = v9;
          __int16 v244 = 2050;
          *(void *)uint64_t v245 = 0x403E000000000000;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
        }
        double v72 = 30.0;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          *(_DWORD *)uint64_t v225 = 134349312;
          *(void *)&v225[4] = v9;
          *(_WORD *)&v225[12] = 2050;
          *(void *)&v225[14] = 0x403E000000000000;
          BOOL v190 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v190);
          if (v190 != buf) {
            free(v190);
          }
        }
      }
      else
      {
        double v74 = fmod(v73 - v71, 360.0);
        if (v74 < 0.0) {
          double v74 = v74 + 360.0;
        }
        if (v74 > 180.0) {
          double v74 = v74 + -360.0;
        }
        double v75 = fabs(v74);
        int v76 = *((_DWORD *)v5 + 518);
        if (v75 >= 135.0)
        {
          *((_DWORD *)v5 + 518) = v76 + 1;
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          long long v163 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v164 = *(void *)(a2 + 480);
            int v165 = *((_DWORD *)v5 + 518);
            *(_DWORD *)__n128 buf = 134349824;
            *(void *)&uint8_t buf[4] = v9;
            __int16 v244 = 2050;
            *(double *)uint64_t v245 = v71;
            *(_WORD *)&v245[8] = 2050;
            *(void *)&v245[10] = v164;
            *(_WORD *)&v245[18] = 1026;
            *(_DWORD *)&v245[20] = v165;
            _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_184;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_265;
          }
          goto LABEL_333;
        }
        if (v75 > 60.0 && v76 >= 1)
        {
          *((_DWORD *)v5 + 518) = v76 + 1;
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          __int16 v183 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v184 = *(void *)(a2 + 480);
            int v185 = *((_DWORD *)v5 + 518);
            *(_DWORD *)__n128 buf = 134349824;
            *(void *)&uint8_t buf[4] = v9;
            __int16 v244 = 2050;
            *(double *)uint64_t v245 = v71;
            *(_WORD *)&v245[8] = 2050;
            *(void *)&v245[10] = v184;
            *(_WORD *)&v245[18] = 1026;
            *(_DWORD *)&v245[20] = v185;
            _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_184;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_265;
          }
LABEL_333:
          dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_265:
          uint64_t v166 = *(void *)(a2 + 480);
          int v167 = *((_DWORD *)v5 + 518);
          *(_DWORD *)uint64_t v225 = 134349824;
          *(void *)&v225[4] = v9;
          *(_WORD *)&v225[12] = 2050;
          *(double *)&v225[14] = v71;
          *(_WORD *)&v225[22] = 2050;
          *(void *)&v225[24] = v166;
          *(_WORD *)&v225[32] = 1026;
          *(_DWORD *)&v225[34] = v167;
          long double v116 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v116);
LABEL_320:
          if (v116 != buf) {
            free(v116);
          }
LABEL_184:
          sub_10017FF2C((uint64_t *)&v202);
          sub_100FFFC10(v237);
          goto LABEL_185;
        }
        if (v75 > 80.0)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v78 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v79 = *(void *)(a2 + 480);
            *(_DWORD *)__n128 buf = 134349568;
            *(void *)&uint8_t buf[4] = v9;
            __int16 v244 = 2050;
            *(double *)uint64_t v245 = v71;
            *(_WORD *)&v245[8] = 2050;
            *(void *)&v245[10] = v79;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            uint64_t v80 = *(void *)(a2 + 480);
            *(_DWORD *)uint64_t v225 = 134349568;
            *(void *)&v225[4] = v9;
            *(_WORD *)&v225[12] = 2050;
            *(double *)&v225[14] = v71;
            *(_WORD *)&v225[22] = 2050;
            *(void *)&v225[24] = v80;
            double v81 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v81);
            if (v81 != buf) {
              free(v81);
            }
          }
          goto LABEL_298;
        }
      }
      int v119 = v237[20];
      double v120 = *(double *)&v238[16];
      uint64_t v121 = *(void *)v237;
      sub_10039C4B4(*(void **)v237);
      double v122 = 1.0 - v120;
      if (!v119) {
        double v122 = v120;
      }
      if (v122 * *(double *)(v121 + 40) >= 15.0) {
        goto LABEL_278;
      }
    }
    if (*(double *)(a2 + 568) <= 0.0) {
      goto LABEL_278;
    }
    double v123 = *(double *)(a2 + 480);
    if (v123 < 0.0) {
      goto LABEL_278;
    }
    double v199 = v72;
    double v124 = fmod(v123 - v71, 360.0);
    if (v124 < 0.0) {
      double v124 = v124 + 360.0;
    }
    if (v124 > 180.0) {
      double v124 = v124 + -360.0;
    }
    double v197 = fabs(v124);
    if (v197 <= 50.0)
    {
LABEL_277:
      double v72 = v199;
      goto LABEL_278;
    }
    int v125 = (__n128 *)&v237[16];
    uint64_t v126 = 2;
    double v127 = &qword_102419000;
    double v128 = &qword_102419000;
    int v129 = 1;
    while (1)
    {
      unint64_t v130 = v201 + (uint64_t)v129;
      if (i > v130)
      {
        uint64_t v131 = (__n128 *)v203;
        if ((v130 & 0x80000000) != 0)
        {
          uint64_t v133 = v201 + (uint64_t)v129;
          do
          {
            uint64_t v131 = (__n128 *)v131->n128_u64[0];
            _CF = __CFADD__(v133++, 1);
          }
          while (!_CF);
        }
        else if (v130)
        {
          unint64_t v132 = v126 + v201;
          do
          {
            uint64_t v131 = (__n128 *)v131->n128_u64[1];
            --v132;
          }
          while (v132 > 1);
        }
        if (v131 == (__n128 *)&v202 || (unint64_t v134 = v131[1].n128_u64[0]) == 0)
        {
          if (v127[134] != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v5 = v198;
          double v72 = v199;
          double v168 = v128[135];
          if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 134349056;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected,routeHints,moving on to next route road,nullptr", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (v127[134] != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            *(_DWORD *)uint64_t v225 = 134349056;
            *(void *)&v225[4] = v9;
            __int16 v169 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v169);
            if (v169 != buf) {
              free(v169);
            }
            uint64_t v10 = v191;
LABEL_276:
            uint64_t v5 = v198;
            goto LABEL_277;
          }
LABEL_278:
          uint64_t v170 = *(void *)v238;
          uint64_t v171 = *(void *)&v238[8];
          double v172 = v203;
          uint64_t v173 = v201;
          if (v201 < 0)
          {
            do
            {
              double v172 = (__n128 **)*v172;
              _CF = __CFADD__(v173++, 1);
            }
            while (!_CF);
          }
          else if (v201)
          {
            unint64_t v174 = v201 + 1;
            do
            {
              double v172 = (__n128 **)v172[1];
              --v174;
            }
            while (v174 > 1);
          }
          double v175 = sub_1000F1648((double *)v5 + 21, *(double *)v238, *(double *)&v238[8], *((double *)v172 + 6), *((double *)v172 + 7), 0.0);
          memset(v225, 0, 24);
          *(_OWORD *)&v225[24] = xmmword_101D1C320;
          v225[40] = 0;
          *(_OWORD *)&v225[48] = 0u;
          *(_OWORD *)v226 = 0u;
          __asm { FMOV            V1.2D, #-1.0 }
          long long v230 = _Q1;
          *(void *)&v231[0] = 0xBFF0000000000000;
          double v232 = 0.0;
          uint64_t v233 = 0;
          LODWORD(v234) = 0;
          WORD2(v234) = 1;
          DWORD2(v234) = 0;
          uint64_t v236 = 0;
          long long v235 = 0uLL;
          *(void *)&v226[16] = v170;
          *(void *)&v226[24] = v171;
          *(void *)&long long v227 = *(void *)(a2 + 448);
          *((double *)&v227 + 1) = v71;
          if (v175 < 8.0) {
            double v175 = 8.0;
          }
          *(double *)v228 = v175;
          *((double *)v228 + 1) = v72;
          *(void *)&v228[1] = 0x3FF0000000000000;
          uint64_t v177 = *(void *)(a2 + 560);
          *((void *)&v228[1] + 1) = *(void *)(a2 + 472);
          *(void *)&long long v229 = v177;
          BYTE8(v229) = *(unsigned char *)(a2 + 604);
          *(int8x16_t *)((char *)v231 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
          *((void *)&v231[1] + 1) = *(void *)(a2 + 384);
          sub_1011DEAFC((uint64_t)v225, 0);
          double v179 = *(double *)v237;
          long long v178 = *(std::__shared_weak_count **)&v237[8];
          if (*(void *)&v237[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v237[8] + 8), 1uLL, memory_order_relaxed);
          }
          int v180 = v233;
          double v232 = v179;
          uint64_t v233 = v178;
          if (v180) {
            sub_1000DB0A0(v180);
          }
          long long v234 = *(_OWORD *)&v237[16];
          long long v235 = *(_OWORD *)v238;
          uint64_t v236 = *(void *)&v238[16];
          sub_1011DEC0C((uint64_t *)&v208, (uint64_t)v225);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          __int16 v181 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v182 = 0xF83E0F83E0F83E1 * ((uint64_t)(v5[239] - v5[238]) >> 3);
            *(_DWORD *)__n128 buf = 134350593;
            *(void *)&uint8_t buf[4] = v9;
            __int16 v244 = 2049;
            *(void *)uint64_t v245 = *(void *)&v226[16];
            *(_WORD *)&v245[8] = 2049;
            *(void *)&v245[10] = *(void *)&v226[24];
            *(_WORD *)&v245[18] = 2050;
            *(void *)&v245[20] = *((void *)&v227 + 1);
            __int16 v246 = 2050;
            double v247 = *(double *)v228;
            __int16 v248 = 2050;
            double v249 = *((double *)v228 + 1);
            __int16 v250 = 2050;
            double v251 = *(double *)&v182;
            _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            uint64_t v188 = 0xF83E0F83E0F83E1 * ((uint64_t)(v198[239] - v198[238]) >> 3);
            int v211 = 134350593;
            uint64_t v212 = v9;
            __int16 v213 = 2049;
            uint64_t v214 = *(void *)&v226[16];
            __int16 v215 = 2049;
            uint64_t v216 = *(void *)&v226[24];
            __int16 v217 = 2050;
            uint64_t v218 = *((void *)&v227 + 1);
            __int16 v219 = 2050;
            uint64_t v220 = *(void *)&v228[0];
            __int16 v221 = 2050;
            uint64_t v222 = *((void *)&v228[0] + 1);
            __int16 v223 = 2050;
            uint64_t v224 = v188;
            __int16 v189 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v189);
            if (v189 != buf) {
              free(v189);
            }
            uint64_t v10 = v191;
            uint64_t v5 = v198;
          }
          if (v233) {
            sub_1000DB0A0(v233);
          }
LABEL_298:
          sub_10017FF2C((uint64_t *)&v202);
          sub_100FFFC10(v237);
LABEL_18:
          uint64_t v14 = (uint64_t)v208;
          int v15 = v209;
          if (v209 != v208) {
            goto LABEL_122;
          }
          float v16 = (double *)v5[235];
          if (v16 == (double *)v5[236]) {
            goto LABEL_120;
          }
          float v17 = (uint64_t *)v5[236];
          int v18 = 0;
          __asm { FMOV            V0.2D, #-1.0 }
          long long v193 = _Q0;
          uint64_t v23 = v192;
          do
          {
            double v24 = sub_1000F1648((double *)v5 + 21, v16[4], v16[5], *(double *)(a2 + 408), *(double *)(a2 + 416), 0.0);
            memset(v225, 0, 24);
            *(_OWORD *)&v225[24] = xmmword_101D1C320;
            v225[40] = 0;
            *(_OWORD *)&v225[48] = 0u;
            *(_OWORD *)v226 = 0u;
            long long v230 = v193;
            *(void *)&v231[0] = 0xBFF0000000000000;
            LODWORD(v234) = 0;
            double v232 = 0.0;
            uint64_t v233 = 0;
            WORD2(v234) = 1;
            DWORD2(v234) = 0;
            uint64_t v236 = 0;
            long long v235 = 0uLL;
            *(_OWORD *)&v226[16] = *((_OWORD *)v16 + 2);
            *(void *)&long long v227 = *(void *)(a2 + 448);
            if (v24 < 8.0) {
              double v24 = 8.0;
            }
            *((double *)&v227 + 1) = *((float *)v16 + 6);
            *(double *)v228 = v24;
            *(_OWORD *)((char *)v228 + 8) = xmmword_101D234D0;
            uint64_t v25 = *(void *)(a2 + 560);
            *((void *)&v228[1] + 1) = *(void *)(a2 + 472);
            *(void *)&long long v229 = v25;
            BYTE8(v229) = *(unsigned char *)(a2 + 604);
            *(int8x16_t *)((char *)v231 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
            *((void *)&v231[1] + 1) = *(void *)(a2 + 384);
            sub_1011DEAFC((uint64_t)v225, 0);
            *(double *)&v228[1] = 1.0 / *((double *)v228 + 1);
            double v27 = *v16;
            int v26 = (std::__shared_weak_count *)*((void *)v16 + 1);
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v28 = v233;
            double v232 = v27;
            uint64_t v233 = v26;
            if (v28) {
              sub_1000DB0A0(v28);
            }
            long long v29 = *((_OWORD *)v16 + 1);
            long long v30 = *((_OWORD *)v16 + 2);
            uint64_t v236 = *((void *)v16 + 6);
            long long v234 = v29;
            long long v235 = v30;
            if (*(double *)(a2 + 568) <= 0.0 || (double v31 = *(double *)(a2 + 480), v31 < 0.0))
            {
              if (!*(unsigned char *)(v23 + 746)) {
                goto LABEL_40;
              }
              double v31 = *(double *)(v23 + 408);
              if (v31 < 0.0) {
                goto LABEL_40;
              }
            }
            double v32 = fmod(v31 - *((double *)&v227 + 1), 360.0);
            if (v32 < 0.0) {
              double v32 = v32 + 360.0;
            }
            double v33 = v32 + -360.0;
            if (v32 <= 180.0) {
              double v33 = v32;
            }
            if ((double v34 = fabs(v33), v34 < 135.0)
              && (v34 <= 60.0 || *((int *)v198 + 518) <= 0)
              && (v34 <= 80.0 || (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v198[236] - v198[235]) >> 3)) < 2))
            {
              if (v33 == 0.0) {
                double v39 = *(double *)&v228[1];
              }
              else {
                double v39 = 1.0 / v34;
              }
              *(double *)&v228[1] = v39;
              sub_1011DEAFC((uint64_t)v225, 0);
              int v40 = (double *)v209;
              if ((unint64_t)v209 >= v210)
              {
                uint64_t v53 = sub_1011E0C88((uint64_t *)&v208, (uint64_t)v225);
              }
              else
              {
                *long long v209 = *(_OWORD *)v225;
                long long v41 = *(_OWORD *)&v225[16];
                long long v42 = *(_OWORD *)&v225[32];
                long long v43 = *(_OWORD *)v226;
                *((_OWORD *)v40 + 3) = *(_OWORD *)&v225[48];
                *((_OWORD *)v40 + 4) = v43;
                *((_OWORD *)v40 + 1) = v41;
                *((_OWORD *)v40 + 2) = v42;
                long long v44 = *(_OWORD *)&v226[16];
                long long v45 = v227;
                long long v46 = v228[1];
                *((_OWORD *)v40 + 7) = v228[0];
                *((_OWORD *)v40 + 8) = v46;
                *((_OWORD *)v40 + 5) = v44;
                *((_OWORD *)v40 + 6) = v45;
                long long v47 = v229;
                long long v48 = v230;
                long long v49 = v231[1];
                *((_OWORD *)v40 + 11) = v231[0];
                *((_OWORD *)v40 + 12) = v49;
                *((_OWORD *)v40 + 9) = v47;
                *((_OWORD *)v40 + 10) = v48;
                v40[26] = v232;
                int v50 = v233;
                *((void *)v40 + 27) = v233;
                if (v50) {
                  atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                long long v51 = v234;
                long long v52 = v235;
                *((void *)v40 + 32) = v236;
                *((_OWORD *)v40 + 14) = v51;
                *((_OWORD *)v40 + 15) = v52;
                uint64_t v53 = (uint64_t)(v40 + 33);
              }
              long long v209 = (_OWORD *)v53;
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v54 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v55 = 0xF83E0F83E0F83E1 * ((uint64_t)(v198[239] - v198[238]) >> 3);
                *(_DWORD *)__n128 buf = 134350849;
                *(void *)&uint8_t buf[4] = v9;
                __int16 v244 = 2049;
                *(void *)uint64_t v245 = *(void *)&v226[16];
                *(_WORD *)&v245[8] = 2049;
                *(void *)&v245[10] = *(void *)&v226[24];
                *(_WORD *)&v245[18] = 2050;
                *(void *)&v245[20] = *((void *)&v227 + 1);
                __int16 v246 = 2050;
                double v247 = *(double *)v228;
                __int16 v248 = 2050;
                double v249 = *((double *)v228 + 1);
                __int16 v250 = 2050;
                double v251 = *(double *)&v55;
                __int16 v252 = 2050;
                double v253 = *(double *)&v228[1];
                _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                uint64_t v56 = 0xF83E0F83E0F83E1 * ((uint64_t)(v198[239] - v198[238]) >> 3);
                *(_DWORD *)uint64_t v237 = 134350849;
                *(void *)&v237[4] = v9;
                *(_WORD *)&v237[12] = 2049;
                *(void *)&v237[14] = *(void *)&v226[16];
                *(_WORD *)&v237[22] = 2049;
                *(void *)&v237[24] = *(void *)&v226[24];
                *(_WORD *)v238 = 2050;
                *(void *)&v238[2] = *((void *)&v227 + 1);
                *(_WORD *)&v238[10] = 2050;
                *(void *)&v238[12] = *(void *)&v228[0];
                *(_WORD *)&v238[20] = 2050;
                *(void *)&v238[22] = *((void *)&v228[0] + 1);
                __int16 v239 = 2050;
                uint64_t v240 = v56;
                __int16 v241 = 2050;
                uint64_t v242 = *(void *)&v228[1];
                __int16 v57 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v57);
                if (v57 != buf) {
                  free(v57);
                }
                uint64_t v23 = v192;
              }
            }
            else
            {
LABEL_40:
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              uint64_t v35 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                double v36 = *((float *)v16 + 6);
                uint64_t v37 = *(void *)(a2 + 480);
                int v38 = *((_DWORD *)v198 + 518);
                *(_DWORD *)__n128 buf = 134349824;
                *(void *)&uint8_t buf[4] = v9;
                __int16 v244 = 2050;
                *(double *)uint64_t v245 = v36;
                *(_WORD *)&v245[8] = 2050;
                *(void *)&v245[10] = v37;
                *(_WORD *)&v245[18] = 1026;
                *(_DWORD *)&v245[20] = v38;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
              }
              ++v18;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                double v58 = *((float *)v16 + 6);
                uint64_t v59 = *(void *)(a2 + 480);
                int v60 = *((_DWORD *)v198 + 518);
                *(_DWORD *)uint64_t v237 = 134349824;
                *(void *)&v237[4] = v9;
                *(_WORD *)&v237[12] = 2050;
                *(double *)&v237[14] = v58;
                *(_WORD *)&v237[22] = 2050;
                *(void *)&v237[24] = v59;
                *(_WORD *)v238 = 1026;
                *(_DWORD *)&v238[2] = v60;
                __int16 v61 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v61);
                if (v61 != buf) {
                  free(v61);
                }
              }
            }
            if (v233) {
              sub_1000DB0A0(v233);
            }
            v16 += 7;
          }
          while (v16 != (double *)v17);
          uint64_t v5 = v198;
          if (v18 <= 0)
          {
LABEL_120:
            uint64_t v14 = (uint64_t)v208;
            int v15 = v209;
          }
          else
          {
            uint64_t v14 = (uint64_t)v208;
            int v15 = v209;
            if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v198[236] - v198[235]) >> 3) == v18)
            {
              uint64_t v10 = v191;
              if (v209 == v208)
              {
                uint64_t v62 = 0;
                ++*((_DWORD *)v198 + 518);
                goto LABEL_186;
              }
LABEL_122:
              if (v15 == (_OWORD *)v14)
              {
LABEL_185:
                uint64_t v62 = 0;
              }
              else
              {
                __int16 v82 = (double *)(v5 + 21);
                *((_DWORD *)v5 + 518) = 0;
                double v83 = -1.0;
                double v84 = 0.0;
                double v85 = -1.0;
                long long v196 = v15;
                do
                {
                  __int16 v86 = (double *)v5[241];
                  double v87 = (double *)v5[242];
                  if (v86 == v87) {
                    goto LABEL_148;
                  }
                  BOOL v88 = 1;
                  do
                  {
                    double v89 = vabdd_f64(v86[23], *(double *)(v14 + 184));
                    if (v83 < 0.0) {
                      double v83 = v89;
                    }
                    double v90 = sub_1000F1648(v82, *(double *)(v14 + 80), *(double *)(v14 + 88), v86[10], v86[11], 0.0);
                    if (v90 < v85 || v85 < 0.0) {
                      double v85 = v90;
                    }
                    if (v90 < 0.001)
                    {
                      BOOL v92 = *(double *)(v14 + 256) >= 0.2;
                      *(void *)uint64_t v237 = v237;
                      *(void *)&v237[8] = v237;
                      *(void *)&v237[16] = 0;
                      if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, BOOL, void))(*(void *)v200 + 72))(v200, v237, v14 + 208, v92, 0))
                      {
                        unint64_t v93 = *(void *)&v237[16];
                        BOOL v88 = *(void *)&v237[16] > 1uLL;
                        if (qword_102419430 != -1) {
                          dispatch_once(&qword_102419430, &stru_1023218C0);
                        }
                        __int16 v94 = qword_102419438;
                        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)__n128 buf = 134349568;
                          *(void *)&uint8_t buf[4] = v9;
                          __int16 v244 = 1026;
                          *(_DWORD *)uint64_t v245 = v93 > 1;
                          *(_WORD *)&v245[4] = 2050;
                          *(void *)&v245[6] = *(void *)&v237[16];
                          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419430 != -1) {
                            dispatch_once(&qword_102419430, &stru_1023218C0);
                          }
                          *(_DWORD *)uint64_t v225 = 134349568;
                          *(void *)&v225[4] = v9;
                          *(_WORD *)&v225[12] = 1026;
                          *(_DWORD *)&v225[14] = v93 > 1;
                          *(_WORD *)&v225[18] = 2050;
                          *(void *)&v225[20] = *(void *)&v237[16];
                          int v95 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v95);
                          if (v95 != buf) {
                            free(v95);
                          }
                        }
                      }
                      sub_1011BF5D0((uint64_t *)v237);
                    }
                    v86 += 33;
                  }
                  while (v86 != v87);
                  int v15 = v196;
                  if (v88)
                  {
LABEL_148:
                    double v96 = *(double *)(v14 + 128);
                    uint64_t v5 = v198;
                    unint64_t v97 = v198[239];
                    if (v97 >= v198[240])
                    {
                      uint64_t v110 = sub_1011E0C88(v195, v14);
                    }
                    else
                    {
                      *(_OWORD *)unint64_t v97 = *(_OWORD *)v14;
                      long long v98 = *(_OWORD *)(v14 + 16);
                      long long v99 = *(_OWORD *)(v14 + 32);
                      long long v100 = *(_OWORD *)(v14 + 64);
                      *(_OWORD *)(v97 + 48) = *(_OWORD *)(v14 + 48);
                      *(_OWORD *)(v97 + 64) = v100;
                      *(_OWORD *)(v97 + 16) = v98;
                      *(_OWORD *)(v97 + 32) = v99;
                      long long v101 = *(_OWORD *)(v14 + 80);
                      long long v102 = *(_OWORD *)(v14 + 96);
                      long long v103 = *(_OWORD *)(v14 + 128);
                      *(_OWORD *)(v97 + 112) = *(_OWORD *)(v14 + 112);
                      *(_OWORD *)(v97 + 128) = v103;
                      *(_OWORD *)(v97 + 80) = v101;
                      *(_OWORD *)(v97 + 96) = v102;
                      long long v104 = *(_OWORD *)(v14 + 144);
                      long long v105 = *(_OWORD *)(v14 + 160);
                      long long v106 = *(_OWORD *)(v14 + 192);
                      *(_OWORD *)(v97 + 176) = *(_OWORD *)(v14 + 176);
                      *(_OWORD *)(v97 + 192) = v106;
                      *(_OWORD *)(v97 + 144) = v104;
                      *(_OWORD *)(v97 + 160) = v105;
                      *(void *)(v97 + 208) = *(void *)(v14 + 208);
                      uint64_t v107 = *(void *)(v14 + 216);
                      *(void *)(v97 + 216) = v107;
                      if (v107) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
                      }
                      long long v108 = *(_OWORD *)(v14 + 224);
                      long long v109 = *(_OWORD *)(v14 + 240);
                      *(void *)(v97 + 256) = *(void *)(v14 + 256);
                      *(_OWORD *)(v97 + 224) = v108;
                      *(_OWORD *)(v97 + 240) = v109;
                      uint64_t v110 = v97 + 264;
                    }
                    double v84 = v84 + v96;
                    v198[239] = v110;
                  }
                  else
                  {
                    uint64_t v5 = v198;
                  }
                  v14 += 264;
                }
                while ((_OWORD *)v14 != v15);
                if (v85 >= 0.0 && v83 > 0.0 && v83 < 5.0 && v85 > v83 * 6.0)
                {
                  uint64_t v10 = v191;
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1023218C0);
                  }
                  double v111 = v195;
                  double v112 = qword_102419438;
                  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)__n128 buf = 134349312;
                    *(void *)&uint8_t buf[4] = v9;
                    __int16 v244 = 2050;
                    *(double *)uint64_t v245 = v85;
                    _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_1023218C0);
                    }
                    *(_DWORD *)uint64_t v225 = 134349312;
                    *(void *)&v225[4] = v9;
                    *(_WORD *)&v225[12] = 2050;
                    *(double *)&v225[14] = v85;
                    __int16 v187 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v187);
                    if (v187 != buf) {
                      free(v187);
                    }
                    uint64_t v10 = v191;
                    double v111 = v195;
                  }
                  sub_10082B744(v111);
                  goto LABEL_185;
                }
                uint64_t v10 = v191;
                if (v84 > 0.0)
                {
                  uint64_t v113 = v5[238];
                  uint64_t v114 = v5[239];
                  while (v113 != v114)
                  {
                    *(double *)(v113 + 128) = *(double *)(v113 + 128) / v84;
                    v113 += 264;
                  }
                }
                uint64_t v62 = 1;
              }
LABEL_186:
              *(void *)__n128 buf = &v208;
              sub_10082B6F0((void ***)buf);
              if (v10) {
LABEL_187:
              }
                sub_1000DB0A0(v10);
              return v62;
            }
          }
          uint64_t v10 = v191;
          goto LABEL_122;
        }
        double v135 = fmod(v131[2].n128_f32[2] - v71, 360.0);
        if (v135 < 0.0) {
          double v135 = v135 + 360.0;
        }
        if (v135 <= 180.0) {
          double v136 = v135;
        }
        else {
          double v136 = v135 + -360.0;
        }
        if (v136 >= 10.0 || (sub_10039C4B4((void *)v134), *(double *)(v134 + 40) >= 7.0))
        {
          sub_100142F58(v71 + v136 * 0.5);
          double v146 = v145;
          double v147 = *(double *)(a2 + 480);
          double v148 = fmod(v147 - v131[2].n128_f32[2], 360.0);
          if (v148 < 0.0) {
            double v148 = v148 + 360.0;
          }
          if (v148 > 180.0) {
            double v148 = v148 + -360.0;
          }
          double v149 = fabs(v148);
          double v150 = fmod(v147 - v146, 360.0);
          if (v150 < 0.0) {
            double v150 = v150 + 360.0;
          }
          if (v150 > 180.0) {
            double v150 = v150 + -360.0;
          }
          double v151 = fabs(v150);
          if (v149 < 25.0 || v151 < 15.0)
          {
            if (v127[134] != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            long long v152 = v128[135];
            if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v153 = *(void *)(a2 + 480);
              double v154 = v131[2].n128_f32[2];
              *(_DWORD *)__n128 buf = 134350848;
              *(void *)&uint8_t buf[4] = v9;
              __int16 v244 = 2050;
              *(void *)uint64_t v245 = v153;
              *(_WORD *)&v245[8] = 2050;
              *(double *)&v245[10] = v154;
              *(_WORD *)&v245[18] = 2050;
              *(double *)&v245[20] = v71;
              __int16 v246 = 2050;
              double v247 = v149;
              __int16 v248 = 2050;
              double v249 = v146;
              __int16 v250 = 2050;
              double v251 = v151;
              __int16 v252 = 2050;
              double v253 = v197;
              _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,crumb close to intersection and gpsCourse,%{public}.1lf,is matching with next road on route,%{public}.1lf,course,%{public}.1lf,nextCourseDiff,%{public}.1lf,approxCourseOfTurningRoad,%{public}.1lf,turningCourseDiff,%{public}.1lf,courseDiff,%{public}.1lf", buf, 0x52u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v127[134] != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              uint64_t v160 = *(void *)(a2 + 480);
              double v161 = v131[2].n128_f32[2];
              *(_DWORD *)uint64_t v225 = 134350848;
              *(void *)&v225[4] = v9;
              *(_WORD *)&v225[12] = 2050;
              *(void *)&v225[14] = v160;
              *(_WORD *)&v225[22] = 2050;
              *(double *)&v225[24] = v161;
              *(_WORD *)&v225[32] = 2050;
              *(double *)&v225[34] = v71;
              *(_WORD *)&v225[42] = 2050;
              *(double *)&v225[44] = v149;
              *(_WORD *)&v225[52] = 2050;
              *(double *)&v225[54] = v146;
              *(_WORD *)&v225[62] = 2050;
              *(double *)v226 = v151;
              *(_WORD *)&v226[8] = 2050;
              *(double *)&v226[10] = v197;
              __int16 v162 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v162);
              if (v162 != buf) {
                free(v162);
              }
              uint64_t v10 = v191;
              double v127 = &qword_102419000;
            }
            unint64_t v156 = v131[1].n128_u64[0];
            unint64_t v155 = v131[1].n128_u64[1];
            if (v155) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v155 + 8), 1uLL, memory_order_relaxed);
            }
            double v157 = *(std::__shared_weak_count **)&v237[8];
            *(void *)uint64_t v237 = v156;
            *(void *)&v237[8] = v155;
            if (v157) {
              sub_1000DB0A0(v157);
            }
            __n128 v158 = v131[2];
            __n128 v159 = v131[3];
            v125[2].n128_u64[0] = v131[4].n128_u64[0];
            *int v125 = v158;
            v125[1] = v159;
            double v71 = v131[2].n128_f32[2];
            int v201 = v130;
          }
        }
        else
        {
          if (v127[134] != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v137 = v128[135];
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v138 = v128;
            double v139 = v125;
            double v140 = (void *)v131[1].n128_u64[0];
            sub_10039C4B4(v140);
            uint64_t v141 = v140[5];
            *(_DWORD *)__n128 buf = 134349824;
            *(void *)&uint8_t buf[4] = v9;
            __int16 v244 = 1026;
            *(_DWORD *)uint64_t v245 = v130;
            *(_WORD *)&v245[4] = 2050;
            *(double *)&v245[6] = v136;
            *(_WORD *)&v245[14] = 2050;
            *(void *)&v245[16] = v141;
            _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,moving on to next route road,nextRouteRoadIndex,%{public}d,angleBetweenTwoRoads,%{public}.2lf,length,%{public}.2lf", buf, 0x26u);
            uint64_t v10 = v191;
            int v125 = v139;
            double v128 = v138;
            double v127 = &qword_102419000;
          }
          if (sub_10013D1A0(115, 2))
          {
            long long v194 = v125;
            bzero(buf, 0x65CuLL);
            if (v127[134] != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            double v142 = (void *)v131[1].n128_u64[0];
            sub_10039C4B4(v142);
            uint64_t v143 = v142[5];
            *(_DWORD *)uint64_t v225 = 134349824;
            *(void *)&v225[4] = v9;
            *(_WORD *)&v225[12] = 1026;
            *(_DWORD *)&v225[14] = v130;
            *(_WORD *)&v225[18] = 2050;
            *(double *)&v225[20] = v136;
            *(_WORD *)&v225[28] = 2050;
            *(void *)&v225[30] = v143;
            uint64_t v144 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v144);
            if (v144 != buf) {
              free(v144);
            }
            uint64_t v10 = v191;
            int v125 = v194;
            double v127 = &qword_102419000;
          }
        }
      }
      ++v129;
      ++v126;
      if (v129 == 3) {
        goto LABEL_276;
      }
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v64 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, generateRouteHint", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    *(_DWORD *)uint64_t v225 = 134349056;
    *(void *)&v225[4] = v9;
    double v186 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v186);
    if (v186 != buf) {
      free(v186);
    }
    uint64_t v62 = 0;
    if (v10) {
      goto LABEL_187;
    }
  }
  else
  {
    uint64_t v62 = 0;
    if (v10) {
      goto LABEL_187;
    }
  }
  return v62;
}

void sub_101369BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  STACK[0x300] = (unint64_t)&a44;
  sub_10082B6F0((void ***)&STACK[0x300]);
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(a1);
}

BOOL sub_101369D10(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v8 = *(void *)(a2 + 248);
  *a4 = 0;
  uint64_t v10 = *(void *)(a1 + 208);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v26 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      *(_DWORD *)long long __p = 134349056;
      *(void *)&__p[4] = v8;
      double v140 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v140);
      if (v140 != buf) {
        free(v140);
      }
    }
    BOOL v27 = 0;
    if (v9) {
      goto LABEL_147;
    }
    return v27;
  }
  BOOL v11 = sub_100178D5C(a1 + 1832, *(double *)(a2 + 264), 6.0);
  if (!v11 || (v12 = (void **)(a2 + 120), (uint64_t v13 = *(void *)(a2 + 120)) == 0))
  {
    BOOL v172 = 0;
    BOOL v25 = 0;
    goto LABEL_47;
  }
  double v14 = 15.0;
  double v15 = 25.0;
  if (*(unsigned char *)(a1 + 12))
  {
    double v15 = 15.0;
    double v14 = 5.0;
  }
  if (*(double *)(v13 + 96) * 1.5 >= 0.0) {
    double v14 = *(double *)(v13 + 96) * 1.5;
  }
  if (v15 >= v14) {
    double v16 = v14;
  }
  else {
    double v16 = v15;
  }
  int v17 = *(unsigned __int8 *)(a2 + 140);
  double v18 = *(double *)(a2 + 168);
  sub_10039C4B4(*(void **)(a2 + 120));
  double v19 = 1.0 - v18;
  if (!v17) {
    double v19 = v18;
  }
  int v20 = *(unsigned __int8 *)(a2 + 140);
  double v21 = *(double *)(a2 + 168);
  if (v19 * *(double *)(v13 + 40) < v16) {
    goto LABEL_28;
  }
  double v22 = 1.0 - v21;
  if (*(unsigned char *)(a2 + 140)) {
    double v22 = *(double *)(a2 + 168);
  }
  if (v22 >= 0.99)
  {
LABEL_28:
    uint64_t v28 = (uint64_t)*v12;
    sub_10039C4B4(*v12);
    double v29 = 1.0 - v21;
    if (!v20) {
      double v29 = v21;
    }
    double v30 = v29 * *(double *)(v28 + 40);
    *(void *)__n128 buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    if (!(*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, void, uint64_t, double, double))(*(void *)v10 + 72))(v10, buf, a2 + 120, *(unsigned __int8 *)(a2 + 140), 1, *(double *)(a2 + 168), v30 + 1.0))goto LABEL_35; {
    if (*(void *)&buf[16])
    }
    {
      if (*(void *)&buf[16] != 1
        || **v12 != *(void *)(*(void *)&buf[8] + 16)
        || (int v31 = *(unsigned __int8 *)(a2 + 140), v31 == *(unsigned __int8 *)(*(void *)&buf[8] + 24)))
      {
LABEL_35:
        BOOL v23 = 0;
        int v24 = 0;
LABEL_40:
        sub_1011BF5D0((uint64_t *)buf);
        goto LABEL_41;
      }
      double v32 = *(double *)(a2 + 168);
    }
    else
    {
      double v32 = *(double *)(a2 + 168);
      int v31 = *(unsigned __int8 *)(a2 + 140);
    }
    if (!v31) {
      double v32 = 1.0 - v32;
    }
    BOOL v23 = v32 >= 0.99;
    int v24 = 1;
    goto LABEL_40;
  }
  BOOL v23 = 0;
  int v24 = 0;
LABEL_41:
  BOOL v172 = v23;
  if (*(unsigned char *)(a1 + 12))
  {
    int v33 = *(unsigned __int8 *)(a2 + 140);
    double v34 = *(double *)(a2 + 168);
    uint64_t v35 = *(void *)(a2 + 120);
    sub_10039C4B4((void *)v35);
    double v36 = 1.0 - v34;
    if (!v33) {
      double v36 = v34;
    }
    if (v36 * *(double *)(v35 + 40) < v16)
    {
      int v24 = 1;
      *a4 = 1;
    }
  }
  BOOL v25 = v24 != 0;
LABEL_47:
  *a4 = v25;
  double v37 = *(double *)(a2 + 480);
  if (*(unsigned char *)(a2 + 760)) {
    BOOL v38 = 1;
  }
  else {
    BOOL v38 = *(unsigned char *)(a2 + 232) == 0;
  }
  int v39 = !v38;
  double v40 = fabs(*(double *)(a3 + 480));
  if (*(unsigned char *)(a3 + 504)) {
    double v41 = v40;
  }
  else {
    double v41 = -1.0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v42 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v43 = *(void *)(a2 + 248);
    uint64_t v44 = *(void *)(a2 + 472);
    uint64_t v45 = *(void *)(a2 + 496);
    BOOL v46 = *a4;
    *(_DWORD *)__n128 buf = 134350592;
    *(void *)&uint8_t buf[4] = v43;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&buf[14] = v37;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&unsigned char buf[24] = v41;
    *(_WORD *)&unsigned char buf[32] = 1026;
    *(_DWORD *)__int16 v189 = v39;
    *(_WORD *)&v189[4] = 2050;
    *(void *)&v189[6] = v44;
    *(_WORD *)&v189[14] = 2050;
    *(void *)&v189[16] = v45;
    *(_WORD *)&v189[24] = 1026;
    *(_DWORD *)&v189[26] = v46;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evaluateMatch,oldOffRoadCount,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf,atIntersection,%{public}d,varFactor,%{public}.2lf,acrossTrack,%{public}.2lf,isAmbiguous,%{public}d", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v132 = *(void *)(a2 + 248);
    uint64_t v133 = *(void *)(a2 + 472);
    uint64_t v134 = *(void *)(a2 + 496);
    BOOL v135 = *a4;
    *(_DWORD *)long long __p = 134350592;
    *(void *)&__p[4] = v132;
    *(_WORD *)&unsigned char __p[12] = 2050;
    *(double *)&__p[14] = v37;
    *(_WORD *)&__p[22] = 2050;
    *(double *)&__p[24] = v41;
    *(_WORD *)&__p[32] = 1026;
    *(_DWORD *)BOOL v176 = v39;
    *(_WORD *)&v176[4] = 2050;
    *(void *)&v176[6] = v133;
    *(_WORD *)&v176[14] = 2050;
    *(void *)&v176[16] = v134;
    *(_WORD *)&v176[24] = 1026;
    *(_DWORD *)&v176[26] = v135;
    double v136 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v136);
    if (v136 != buf) {
      free(v136);
    }
  }
  int v47 = (int)*(double *)(a2 + 472);
  if (v37 < 25.0) {
    int v48 = 1;
  }
  else {
    int v48 = v39;
  }
  if (v48 == 1)
  {
    char v49 = 0;
    int v50 = 0;
    switch(v47)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_69;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_70;
      case 14:
        goto LABEL_71;
      case 15:
      case 16:
        goto LABEL_67;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_68;
      default:
        goto LABEL_72;
    }
  }
  else
  {
    char v49 = 0;
    int v50 = 0;
    switch(v47)
    {
      case 0:
      case 1:
      case 2:
LABEL_69:
        char v49 = 0;
        int v50 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
LABEL_70:
        char v49 = 1;
        int v50 = 1;
        break;
      case 11:
      case 12:
LABEL_71:
        int v50 = 2;
        goto LABEL_73;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_67:
        int v50 = 3;
        goto LABEL_73;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_68:
        int v50 = 4;
        goto LABEL_73;
      default:
LABEL_72:
        int v50 = 10;
LABEL_73:
        char v49 = 1;
        break;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  long long v51 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v52 = *(void *)(a2 + 248);
    int v53 = *(_DWORD *)(a1 + 1208);
    *(_DWORD *)__n128 buf = 134349568;
    *(void *)&uint8_t buf[4] = v52;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v53;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v53 + v50;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v137 = *(void *)(a2 + 248);
    int v138 = *(_DWORD *)(a1 + 1208);
    *(_DWORD *)long long __p = 134349568;
    *(void *)&__p[4] = v137;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v138;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v138 + v50;
    double v139 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v139);
    if (v139 != buf) {
      free(v139);
    }
  }
  *(_DWORD *)(a1 + 1208) = (*(_DWORD *)(a1 + 1208) + v50) & ~((*(_DWORD *)(a1 + 1208) + v50) >> 31);
  double v54 = *(double *)(a2 + 432);
  if (v54 > 0.0 && *(double *)(a2 + 344) >= 0.0)
  {
    if (*(double *)(a2 + 424) <= 0.0
      || ((double v55 = *(double *)(a2 + 336), v55 < 0.001) ? (v56 = v55 < 0.0) : (v56 = 1), v56))
    {
      if (!*(unsigned char *)(a2 + 468) && fabs(*(double *)(a2 + 496)) > 25.0)
      {
        if (v39)
        {
          if (v37 <= 67.5) {
            goto LABEL_113;
          }
          if (v54 >= 20.0)
          {
            int v57 = 4;
LABEL_107:
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            uint64_t v59 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v60 = *(void *)(a2 + 248);
              int v61 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__n128 buf = 134349568;
              *(void *)&uint8_t buf[4] = v60;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)&buf[14] = v61;
              *(_WORD *)&unsigned char buf[18] = 1026;
              *(_DWORD *)&buf[20] = v61 + v57;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              uint64_t v163 = *(void *)(a2 + 248);
              int v164 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)long long __p = 134349568;
              *(void *)&__p[4] = v163;
              *(_WORD *)&unsigned char __p[12] = 1026;
              *(_DWORD *)&__p[14] = v164;
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = v164 + v57;
              int v165 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v165);
              if (v165 != buf) {
                free(v165);
              }
            }
            *(_DWORD *)(a1 + 1208) += v57;
            char v49 = 1;
            goto LABEL_113;
          }
          goto LABEL_100;
        }
        if (v54 >= 20.0)
        {
          if (v37 > 67.5) {
            goto LABEL_100;
          }
          if (v37 > 45.0) {
            goto LABEL_103;
          }
          double v58 = 30.0;
        }
        else
        {
          if (v37 > 67.5)
          {
            int v57 = 18;
            goto LABEL_107;
          }
          if (v37 > 45.0)
          {
LABEL_100:
            int v57 = 6;
            goto LABEL_107;
          }
          if (v37 > 30.0)
          {
LABEL_103:
            int v57 = 2;
            goto LABEL_107;
          }
          double v58 = 20.0;
        }
        if (v37 <= v58) {
          goto LABEL_113;
        }
        int v57 = 1;
        goto LABEL_107;
      }
    }
  }
LABEL_113:
  double v62 = sub_1013E5B64((double *)(a2 + 240));
  if (v62 >= 10.0) {
    double v63 = v62;
  }
  else {
    double v63 = 10.0;
  }
  if (v63 >= 50.0) {
    char v64 = 1;
  }
  else {
    char v64 = v49;
  }
  if ((v64 & 1) == 0)
  {
    if (fabs(*(double *)(a2 + 496)) <= 75.0 && fabs(*(double *)(a2 + 488)) <= 150.0)
    {
      char v49 = 0;
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v65 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v66 = *(void *)(a2 + 248);
        int v67 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)__n128 buf = 134349568;
        *(void *)&uint8_t buf[4] = v66;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v67;
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = v67 + 1;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v143 = *(void *)(a2 + 248);
        int v144 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)long long __p = 134349568;
        *(void *)&__p[4] = v143;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v144;
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = v144 + 1;
        double v145 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v145);
        if (v145 != buf) {
          free(v145);
        }
      }
      ++*(_DWORD *)(a1 + 1208);
      char v49 = 1;
    }
  }
  if (*(unsigned char *)(a2 + 601)) {
    int v68 = v39;
  }
  else {
    int v68 = 1;
  }
  double v69 = 40000.0;
  if (v68) {
    double v69 = 10000.0;
  }
  if (*(unsigned char *)(a3 + 601)) {
    BOOL v70 = *(unsigned char *)(a3 + 504) == 0;
  }
  else {
    BOOL v70 = 1;
  }
  if (v70) {
    double v71 = 10000.0;
  }
  else {
    double v71 = v69;
  }
  double v72 = *(double *)(a2 + 496) * *(double *)(a2 + 496) + *(double *)(a2 + 488) * *(double *)(a2 + 488);
  if (v72 <= v71)
  {
    double v76 = *(double *)(a2 + 336);
    if (v76 < 0.0 || *(double *)(a2 + 424) <= 0.0) {
      double v78 = *(double *)(a2 + 336);
    }
    else {
      double v78 = (v76 + *(double *)(a3 + 336)) * 0.5;
    }
    double v79 = *(double *)(a2 + 264);
    double v80 = -1.0;
    if (v79 >= 0.0)
    {
      double v81 = *(double *)(a3 + 264);
      if (v81 >= 0.0) {
        double v80 = vabdd_f64(v79, v81);
      }
    }
    if (*(unsigned char *)(a3 + 504))
    {
      if (*(unsigned char *)(a1 + 1212))
      {
        if (*(double *)(a2 + 472) > 13.0)
        {
          double v82 = v78 * v80;
          double v83 = sub_1000F1648((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 392), *(double *)(a2 + 400), *(double *)(a2 + 312))- v82;
          if (v83 > 100.0)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            double v84 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v85 = *(void *)(a2 + 248);
              int v86 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__n128 buf = 134350080;
              *(void *)&uint8_t buf[4] = v85;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&buf[14] = v83;
              *(_WORD *)&buf[22] = 2050;
              *(double *)&unsigned char buf[24] = v82;
              *(_WORD *)&unsigned char buf[32] = 1026;
              *(_DWORD *)__int16 v189 = v86;
              *(_WORD *)&v189[4] = 1026;
              *(_DWORD *)&v189[6] = v86 + 18;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,jumpDistanceCheck,%{public}.1lf,expectedDistanceTravelled,%{public}.1lf,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x2Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              uint64_t v149 = *(void *)(a2 + 248);
              int v150 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)long long __p = 134350080;
              *(void *)&__p[4] = v149;
              *(_WORD *)&unsigned char __p[12] = 2050;
              *(double *)&__p[14] = v83;
              *(_WORD *)&__p[22] = 2050;
              *(double *)&__p[24] = v82;
              *(_WORD *)&__p[32] = 1026;
              *(_DWORD *)BOOL v176 = v150;
              *(_WORD *)&v176[4] = 1026;
              *(_DWORD *)&v176[6] = v150 + 18;
              double v151 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v151);
              if (v151 != buf) {
                free(v151);
              }
            }
            *(_DWORD *)(a1 + 1208) += 18;
            char v49 = 1;
          }
        }
      }
    }
    if (v172 && v11)
    {
      double v87 = *(unsigned char *)(a2 + 140) ? *(double *)(a2 + 168) : 1.0 - *(double *)(a2 + 168);
      if (v87 >= 0.99)
      {
        *(_DWORD *)(a1 + 1208) += (int)(v87 * 10.0);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        BOOL v88 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v89 = *(void *)(a2 + 248);
          int v90 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)__n128 buf = 134349824;
          *(void *)&uint8_t buf[4] = v89;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v90;
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(double *)&buf[20] = v87;
          *(_WORD *)&unsigned char buf[28] = 1026;
          *(_DWORD *)&buf[30] = (int)(v87 * 10.0);
          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evalauteMatch,offRoadCount,%{public}d,projection,%{public}.2lf,delta,%{public}d", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v146 = *(void *)(a2 + 248);
          int v147 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)long long __p = 134349824;
          *(void *)&__p[4] = v146;
          *(_WORD *)&unsigned char __p[12] = 1026;
          *(_DWORD *)&__p[14] = v147;
          *(_WORD *)&__p[18] = 2050;
          *(double *)&__p[20] = v87;
          *(_WORD *)&__p[28] = 1026;
          *(_DWORD *)&__p[30] = (int)(v87 * 10.0);
          double v148 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v148);
          if (v148 != buf) {
            free(v148);
          }
          char v49 = 1;
        }
        else
        {
          char v49 = 1;
        }
      }
    }
    if (*(unsigned char *)(a1 + 1212))
    {
      double v91 = *(double *)(a2 + 472);
      if (v91 > 70.0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        BOOL v92 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v93 = *(void *)(a2 + 248);
          uint64_t v94 = *(void *)(a2 + 472);
          *(_DWORD *)__n128 buf = 134349568;
          *(void *)&uint8_t buf[4] = v93;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v94;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&unsigned char buf[24] = 0x4051800000000000;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_208;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v95 = *(void *)(a2 + 248);
        uint64_t v96 = *(void *)(a2 + 472);
        *(_DWORD *)long long __p = 134349568;
        *(void *)&__p[4] = v95;
        *(_WORD *)&unsigned char __p[12] = 2050;
        *(void *)&__p[14] = v96;
        *(_WORD *)&__p[22] = 2050;
        *(void *)&__p[24] = 0x4051800000000000;
        unint64_t v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v97);
LABEL_313:
        if (v97 != buf) {
          free(v97);
        }
LABEL_208:
        *(unsigned char *)(a1 + 1212) = 0;
        goto LABEL_248;
      }
      if (*(int *)(a1 + 1208) >= 18)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v104 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v105 = *(void *)(a2 + 248);
          int v106 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)__n128 buf = 134349568;
          *(void *)&uint8_t buf[4] = v105;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v106;
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = 18;
          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,offRoadCount,%{public}d,threshold,%{public}d", buf, 0x18u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_208;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v161 = *(void *)(a2 + 248);
        int v162 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)long long __p = 134349568;
        *(void *)&__p[4] = v161;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v162;
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 18;
        unint64_t v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v97);
        goto LABEL_313;
      }
      if (v91 >= 6.5) {
        char v107 = 1;
      }
      else {
        char v107 = v49;
      }
      if ((v107 & 1) == 0)
      {
        *(_DWORD *)(a1 + 1208) = 0;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v108 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v109 = *(void *)(a2 + 248);
          int v110 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)__n128 buf = 134349312;
          *(void *)&uint8_t buf[4] = v109;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v110;
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reseting offRoadCount,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v111 = *(void *)(a2 + 248);
          int v112 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)long long __p = 134349312;
          *(void *)&__p[4] = v111;
          *(_WORD *)&unsigned char __p[12] = 1026;
          *(_DWORD *)&__p[14] = v112;
          uint64_t v113 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v113);
          if (v113 != buf) {
            free(v113);
          }
        }
      }
LABEL_248:
      BOOL v27 = *(unsigned char *)(a1 + 1212) != 0;
      if (!v9) {
        return v27;
      }
      goto LABEL_147;
    }
    if (v49) {
      goto LABEL_248;
    }
    double v98 = 13.5;
    if (*(unsigned char *)(a2 + 588)) {
      double v98 = 7.5;
    }
    if (v62 > 7.5) {
      double v99 = 20.0;
    }
    else {
      double v99 = v98;
    }
    double v100 = 30.0;
    if (v11)
    {
      if (*(_DWORD *)(a2 + 360) == 9)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        long long v101 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v102 = *(void *)(a2 + 248);
          int v103 = *(_DWORD *)(a2 + 360);
          if (*(char *)(a2 + 391) < 0)
          {
            sub_1000DC48C(__p, *(void **)(a2 + 368), *(void *)(a2 + 376));
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)(a2 + 368);
            *(void *)&__p[16] = *(void *)(a2 + 384);
          }
          int v115 = __p;
          if (__p[23] < 0) {
            int v115 = *(unsigned char **)__p;
          }
          *(_DWORD *)__n128 buf = 134349570;
          *(void *)&uint8_t buf[4] = v102;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v103;
          *(_WORD *)&unsigned char buf[18] = 2082;
          *(void *)&buf[20] = v115;
          _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping,shouldStartSnappingOnfrc,frc,%{public}d,name,%{public}s,using tighter-threshold", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        double v99 = 5.0;
        double v100 = 8.0;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v168 = *(void *)(a2 + 248);
          int v169 = *(_DWORD *)(a2 + 360);
          if (*(char *)(a2 + 391) < 0)
          {
            sub_1000DC48C(__dst, *(void **)(a2 + 368), *(void *)(a2 + 376));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(a2 + 368);
            uint64_t v174 = *(void *)(a2 + 384);
          }
          uint64_t v170 = __dst;
          if (v174 < 0) {
            uint64_t v170 = (void **)__dst[0];
          }
          *(_DWORD *)long long __p = 134349570;
          *(void *)&__p[4] = v168;
          *(_WORD *)&unsigned char __p[12] = 1026;
          *(_DWORD *)&__p[14] = v169;
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v170;
          uint64_t v171 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v174) < 0) {
            operator delete(__dst[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v171);
          if (v171 != buf) {
            free(v171);
          }
        }
      }
      else
      {
        int v114 = *(_DWORD *)(a2 + 656);
        if (v114 != 3)
        {
          double v100 = v114 == 4 ? 30.0 : 18.0;
          if (v114 != 4) {
            double v99 = 6.0;
          }
        }
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    long double v116 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v117 = *(void *)(a2 + 248);
      uint64_t v118 = *(void *)(a2 + 496);
      uint64_t v119 = *(void *)(a2 + 472);
      uint64_t v120 = *(void *)(a3 + 472);
      uint64_t v121 = *(void *)(a2 + 336);
      uint64_t v122 = *(void *)(a2 + 344);
      uint64_t v123 = *(void *)(a3 + 336);
      uint64_t v124 = *(void *)(a3 + 344);
      *(_DWORD *)__n128 buf = 134351872;
      *(void *)&uint8_t buf[4] = v117;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v72;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v118;
      *(_WORD *)&unsigned char buf[32] = 2050;
      *(double *)__int16 v189 = v63;
      *(_WORD *)&v189[8] = 2050;
      *(void *)&v189[10] = v119;
      *(_WORD *)&v189[18] = 2048;
      *(void *)&v189[20] = v120;
      *(_WORD *)&v189[28] = 2050;
      uint64_t v190 = v121;
      __int16 v191 = 2050;
      uint64_t v192 = v123;
      __int16 v193 = 2050;
      uint64_t v194 = v122;
      __int16 v195 = 2050;
      uint64_t v196 = v124;
      __int16 v197 = 2050;
      double v198 = v37;
      __int16 v199 = 2050;
      double v200 = v41;
      _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping criteria,distance2,%{public}.1lf,acrossTrack,%{public}.2lf,drms,%{public}.1lf,currentVF,%{public}.3lf,prioVF{public},%.3lf,curSpeed,%{public}.2lf,priorSpeed,%{public}.2lf,curCourse,%{public}.2lf,priorCourse,%{public}.2lf,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf", buf, 0x7Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v152 = *(void *)(a2 + 248);
      uint64_t v153 = *(void *)(a2 + 496);
      uint64_t v154 = *(void *)(a2 + 472);
      uint64_t v155 = *(void *)(a3 + 472);
      uint64_t v156 = *(void *)(a2 + 336);
      uint64_t v157 = *(void *)(a2 + 344);
      uint64_t v158 = *(void *)(a3 + 336);
      uint64_t v159 = *(void *)(a3 + 344);
      *(_DWORD *)long long __p = 134351872;
      *(void *)&__p[4] = v152;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(double *)&__p[14] = v72;
      *(_WORD *)&__p[22] = 2050;
      *(void *)&__p[24] = v153;
      *(_WORD *)&__p[32] = 2050;
      *(double *)BOOL v176 = v63;
      *(_WORD *)&v176[8] = 2050;
      *(void *)&v176[10] = v154;
      *(_WORD *)&v176[18] = 2048;
      *(void *)&v176[20] = v155;
      *(_WORD *)&v176[28] = 2050;
      uint64_t v177 = v156;
      __int16 v178 = 2050;
      uint64_t v179 = v158;
      __int16 v180 = 2050;
      uint64_t v181 = v157;
      __int16 v182 = 2050;
      uint64_t v183 = v159;
      __int16 v184 = 2050;
      double v185 = v37;
      __int16 v186 = 2050;
      double v187 = v41;
      uint64_t v160 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v160);
      if (v160 != buf) {
        free(v160);
      }
    }
    if (*(unsigned char *)(a2 + 505)) {
      goto LABEL_241;
    }
    if (v72 >= 400.0) {
      goto LABEL_241;
    }
    if (*(unsigned char *)(a3 + 505)) {
      goto LABEL_241;
    }
    if (fabs(*(double *)(a2 + 496)) >= v99) {
      goto LABEL_241;
    }
    if (v63 >= 101.0) {
      goto LABEL_241;
    }
    double v127 = *(double *)(a2 + 472);
    if (v127 >= 3.0) {
      goto LABEL_241;
    }
    double v128 = *(double *)(a3 + 472);
    if (v128 >= 3.0
      || *(double *)(a2 + 336) <= 0.25
      || *(double *)(a3 + 336) <= 0.25
      || *(double *)(a2 + 344) < 0.0
      || *(double *)(a3 + 344) < 0.0
      || v37 >= v100
      || v41 >= v100)
    {
      goto LABEL_241;
    }
    double v129 = *(double *)(a2 + 432);
    if (v129 >= 20.0 || v129 <= 0.0)
    {
      float v130 = *(float *)(a2 + 420);
      float v131 = 3.0;
    }
    else
    {
      if (v37 >= 40.0) {
        goto LABEL_241;
      }
      float v130 = *(float *)(a2 + 420);
      float v131 = 2.5;
    }
    if (v130 > v131 || v127 < 1.0 && v128 < 1.0 && (v130 == 0.0 || v130 > 1.1))
    {
      *(unsigned char *)(a1 + 1212) = 1;
LABEL_242:
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      int v125 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v126 = *(void *)(a2 + 248);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v126;
        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v166 = *(void *)(a2 + 248);
        *(_DWORD *)long long __p = 134349056;
        *(void *)&__p[4] = v166;
        int v167 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v167);
        if (v167 != buf) {
          free(v167);
        }
      }
      *(_DWORD *)(a1 + 1208) = 0;
      goto LABEL_248;
    }
LABEL_241:
    if (!*(unsigned char *)(a1 + 1212)) {
      goto LABEL_248;
    }
    goto LABEL_242;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  double v73 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v74 = *(void *)(a2 + 248);
    *(_DWORD *)__n128 buf = 134349568;
    *(void *)&uint8_t buf[4] = v74;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = sqrt(v71);
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)&unsigned char buf[24] = v39;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v141 = *(void *)(a2 + 248);
    *(_DWORD *)long long __p = 134349568;
    *(void *)&__p[4] = v141;
    *(_WORD *)&unsigned char __p[12] = 2050;
    *(void *)&__p[14] = sqrt(v71);
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)&__p[24] = v39;
    double v142 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v142);
    if (v142 != buf) {
      free(v142);
    }
  }
  BOOL v27 = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  if (v9) {
LABEL_147:
  }
    sub_1000DB0A0(v9);
  return v27;
}

void sub_10136BCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (v31) {
    sub_1000DB0A0(v31);
  }
  _Unwind_Resume(exception_object);
}

double sub_10136BE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 48) != *(void *)(a2 + 40))
  {
    uint64_t v4 = (uint64_t *)a1;
    BOOL v9 = 0;
    BOOL v5 = sub_101369D10(a1, a2 + 136, a3, &v9);
    *(unsigned char *)(a2 + 640) = v5;
    *(unsigned char *)(a2 + 881) = (*(unsigned __int8 *)(a2 + 881) | v9) != 0;
    v4 += 152;
    sub_100FFFC50((uint64_t)v4, (long long *)(a2 + 376));
    if (sub_100FFFEA8(v4, 0))
    {
      *(unsigned char *)(a2 + 640) = 0;
    }
    else if (v5)
    {
      return result;
    }
    *(_DWORD *)(a2 + 656) = 0;
    double result = *(double *)(a2 + 432);
    uint64_t v7 = *(void *)(a2 + 440);
    *(double *)(a2 + 528) = result;
    *(void *)(a2 + 536) = v7;
    uint64_t v8 = *(void *)(a2 + 480);
    *(void *)(a2 + 544) = v8;
    *(double *)(a2 + 664) = result;
    *(void *)(a2 + 672) = v7;
    *(void *)(a2 + 680) = v8;
  }
  return result;
}

uint64_t sub_10136BF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 640))
  {
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1760) = 0u;
    if (sub_1000EF668(*(double *)(a2 + 528), *(double *)(a2 + 536)))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v6 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v29 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,snap coordinate is null island", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_56:
        BOOL v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
        return 1;
      }
LABEL_58:
      dispatch_once(&qword_102419430, &stru_1023218C0);
      goto LABEL_56;
    }
    if (sub_10136C770(a1, a2, a3))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      BOOL v11 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v29 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,solution hopping detected", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_56;
      }
      goto LABEL_58;
    }
    return 0;
  }
  if (*(double *)(a2 + 608) > 70.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a2 + 384);
      double v10 = *(double *)(a2 + 608);
      *(_DWORD *)__n128 buf = 134349568;
      uint64_t v29 = v9;
      __int16 v30 = 2050;
      double v31 = v10;
      __int16 v32 = 2050;
      uint64_t v33 = 0x4051800000000000;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 1752);
  if ((v13 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 1752) = v13 + 1;
    if (v13 >= 0x1E)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v14 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349312;
        uint64_t v29 = v15;
        __int16 v30 = 1026;
        LODWORD(v31) = 30;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding as unable to match,max,%{public}d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_56;
      }
      goto LABEL_58;
    }
  }
  if (!*(unsigned char *)(a3 + 746)) {
    return 0;
  }
  *(double *)(a1 + 1760) = *(double *)(a2 + 856) + *(double *)(a1 + 1760);
  double v16 = sub_1000F1648((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448))+ *(double *)(a1 + 1768);
  *(double *)(a1 + 1768) = v16;
  double v17 = *(double *)(a1 + 1760);
  if (v17 <= 80.0) {
    return 0;
  }
  if (v16 < 0.001)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a2 + 384);
      double v20 = *(double *)(a1 + 1768);
      *(_DWORD *)__n128 buf = 134349312;
      uint64_t v29 = v19;
      __int16 v30 = 2050;
      double v31 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,accumulated snap distance is ~0, %{public}.3lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  double v23 = v17 / v16;
  BOOL v21 = v17 / v16 > 5.0;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v24 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void *)(a2 + 384);
    *(_DWORD *)__n128 buf = 134349312;
    uint64_t v29 = v25;
    __int16 v30 = 2050;
    double v31 = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to stuck at dead-end while observations move away, ratioDist, %{public}.3lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return v21;
}

BOOL sub_10136C770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 882)) {
    BOOL v6 = *(unsigned char *)(a3 + 746) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6
    && *(void *)(a3 + 120)
    && *(void *)(a2 + 256)
    && (sub_1011C9EF0((uint64_t *)(a3 + 120), (uint64_t)buf),
        sub_1011C9EF0((uint64_t *)(a2 + 256), (uint64_t)&v88),
        sub_100FFD530((uint64_t)buf, (uint64_t)&v88)))
  {
    ++*(_DWORD *)(a1 + 1776);
  }
  else
  {
    *(_DWORD *)(a1 + 1776) = 0;
  }
  if (*(unsigned char *)(a2 + 640)) {
    BOOL v7 = *(unsigned char *)(a3 + 504) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(a2 + 488);
  if (v8 == *(void *)(a3 + 352)) {
    goto LABEL_20;
  }
  double v9 = fmod(*(double *)(a2 + 680) - *(double *)(a3 + 544), 360.0);
  if (v9 < 0.0) {
    double v9 = v9 + 360.0;
  }
  if (v9 > 180.0) {
    double v9 = v9 + -360.0;
  }
  if (fabs(v9) < 45.0)
  {
LABEL_20:
    sub_10017FF2C((uint64_t *)(a1 + 1808));
    BOOL v10 = 0;
    BOOL v11 = (uint64_t *)(a1 + 1784);
    goto LABEL_21;
  }
  if (*(void *)(a1 + 1800) || (uint64_t v15 = *(void *)(a1 + 1816), v15 == a1 + 1808))
  {
    BOOL v13 = 0;
  }
  else
  {
    do
    {
      BOOL v13 = v8 == **(void **)(v15 + 16);
      if (v8 == **(void **)(v15 + 16)) {
        break;
      }
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while (v15 != a1 + 1808);
  }
  for (uint64_t i = *(void *)(a1 + 1792); i != a1 + 1784; uint64_t i = *(void *)(i + 8))
  {
    if (v8 == **(void **)(i + 16)) {
      goto LABEL_29;
    }
  }
  if (v13)
  {
LABEL_29:
    BOOL v10 = 0;
    goto LABEL_99;
  }
  double v16 = *(uint64_t **)(a2 + 256);
  double v17 = &qword_102419000;
  if (v16)
  {
    double v18 = *(uint64_t **)(a3 + 120);
    if (v18)
    {
      uint64_t v19 = *(std::__shared_weak_count **)(a2 + 264);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        double v18 = *(uint64_t **)(a3 + 120);
      }
      double v20 = *(std::__shared_weak_count **)(a3 + 128);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v21 = (double *)v16[17];
      double v22 = 0.0;
      double v23 = 0.0;
      double v24 = 0.0;
      if ((double *)v16[18] != v21)
      {
        double v23 = *v21;
        double v24 = v21[1];
      }
      uint64_t v25 = (double *)v18[17];
      double v26 = 0.0;
      if ((double *)v18[18] != v25)
      {
        double v22 = *v25;
        double v26 = v25[1];
      }
      if (sub_1004BABDC(v23, v24, v22, v26, 0.0000001)) {
        goto LABEL_60;
      }
      BOOL v27 = (double *)v16[17];
      double v28 = 0.0;
      double v29 = 0.0;
      double v30 = 0.0;
      if ((double *)v16[18] != v27)
      {
        double v29 = *v27;
        double v30 = v27[1];
      }
      uint64_t v31 = v18[18];
      double v32 = 0.0;
      if (v31 != v18[17])
      {
        double v28 = *(double *)(v31 - 16);
        double v32 = *(double *)(v31 - 8);
      }
      if (sub_1004BABDC(v29, v30, v28, v32, 0.0000001)) {
        goto LABEL_60;
      }
      uint64_t v33 = v16[18];
      double v34 = 0.0;
      double v35 = 0.0;
      double v36 = 0.0;
      if (v33 != v16[17])
      {
        double v35 = *(double *)(v33 - 16);
        double v36 = *(double *)(v33 - 8);
      }
      double v37 = (double *)v18[17];
      double v38 = 0.0;
      if ((double *)v18[18] != v37)
      {
        double v34 = *v37;
        double v38 = v37[1];
      }
      if (sub_1004BABDC(v35, v36, v34, v38, 0.0000001)) {
        goto LABEL_60;
      }
      uint64_t v39 = v16[18];
      double v40 = 0.0;
      double v41 = 0.0;
      double v42 = 0.0;
      if (v39 != v16[17])
      {
        double v41 = *(double *)(v39 - 16);
        double v42 = *(double *)(v39 - 8);
      }
      uint64_t v43 = v18[18];
      double v44 = 0.0;
      if (v43 != v18[17])
      {
        double v40 = *(double *)(v43 - 16);
        double v44 = *(double *)(v43 - 8);
      }
      if (sub_1004BABDC(v41, v42, v40, v44, 0.0000001)) {
LABEL_60:
      }
        int v45 = 1;
      else {
        int v45 = 0;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      BOOL v46 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v47 = *(void *)(a2 + 384);
        uint64_t v48 = *v16;
        uint64_t v49 = *v18;
        *(_DWORD *)__n128 buf = 134349825;
        uint64_t v95 = v47;
        __int16 v96 = 1026;
        *(_DWORD *)unint64_t v97 = v45;
        *(_WORD *)&v97[4] = 2049;
        *(void *)&v97[6] = v48;
        *(_WORD *)&v97[14] = 2049;
        *(void *)&v97[16] = v49;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,connecting roads,%{public}d, current road %{private}lld,prior road %{private}lld", buf, 0x26u);
      }
      double v17 = &qword_102419000;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        uint64_t v79 = *(void *)(a2 + 384);
        uint64_t v80 = *v16;
        uint64_t v81 = *v18;
        int v88 = 134349825;
        uint64_t v89 = v79;
        __int16 v90 = 1026;
        *(_DWORD *)double v91 = v45;
        *(_WORD *)&v91[4] = 2049;
        *(void *)&v91[6] = v80;
        *(_WORD *)&v91[14] = 2049;
        *(void *)&v91[16] = v81;
        double v82 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "%s\n", v82);
        if (v82 != (char *)buf) {
          free(v82);
        }
        double v17 = &qword_102419000;
        if (!v20)
        {
LABEL_68:
          if (v19) {
            sub_1000DB0A0(v19);
          }
          if (v45) {
            goto LABEL_29;
          }
          goto LABEL_71;
        }
      }
      else if (!v20)
      {
        goto LABEL_68;
      }
      sub_1000DB0A0(v20);
      goto LABEL_68;
    }
  }
LABEL_71:
  int v50 = *(uint64_t **)(a3 + 120);
  if (!v50) {
    goto LABEL_91;
  }
  uint64_t v51 = *(void *)(a2 + 864);
  if (!v51) {
    goto LABEL_91;
  }
  uint64_t v52 = *(std::__shared_weak_count **)(a3 + 128);
  if (v52)
  {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v51 = *(void *)(a2 + 864);
  }
  uint64_t v55 = v51 + 136;
  int v53 = *(long long **)(v51 + 136);
  double v54 = *(long long **)(v55 + 8);
  long long v56 = 0uLL;
  long long v57 = 0uLL;
  if (v54 != v53)
  {
    if (*(unsigned char *)(a2 + 880)) {
      long long v57 = *v53;
    }
    else {
      long long v57 = *(v54 - 1);
    }
  }
  uint64_t v59 = (long long *)v50[17];
  double v58 = (long long *)v50[18];
  if (v58 != v59)
  {
    if (*(unsigned char *)(a3 + 140)) {
      long long v56 = *(v58 - 1);
    }
    else {
      long long v56 = *v59;
    }
  }
  BOOL v60 = sub_1004BABDC(*(double *)&v57, *((double *)&v57 + 1), *(double *)&v56, *((double *)&v56 + 1), 0.0000001);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v61 = v17;
  double v62 = v17[135];
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v63 = *(void *)(a2 + 384);
    uint64_t v64 = *v50;
    uint64_t v65 = **(void **)(a2 + 864);
    uint64_t v66 = **(void **)(a2 + 256);
    *(_DWORD *)__n128 buf = 134349825;
    uint64_t v95 = v63;
    __int16 v96 = 2049;
    *(void *)unint64_t v97 = v64;
    *(_WORD *)&v97[8] = 2049;
    *(void *)&v97[10] = v65;
    *(_WORD *)&v97[18] = 2049;
    *(void *)&v97[20] = v66;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,prior road, %{private}lld, connected to the incoming road, %{private}lld, of the current solution road, %{private}lld", buf, 0x2Au);
  }
  double v17 = v61;
  if (!sub_10013D1A0(115, 2))
  {
    if (!v52) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  uint64_t v83 = *(void *)(a2 + 384);
  uint64_t v84 = *v50;
  uint64_t v85 = **(void **)(a2 + 864);
  uint64_t v86 = **(void **)(a2 + 256);
  int v88 = 134349825;
  uint64_t v89 = v83;
  __int16 v90 = 2049;
  *(void *)double v91 = v84;
  *(_WORD *)&v91[8] = 2049;
  *(void *)&v91[10] = v85;
  *(_WORD *)&v91[18] = 2049;
  *(void *)&v91[20] = v86;
  double v87 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "%s\n", v87);
  if (v87 != (char *)buf) {
    free(v87);
  }
  double v17 = v61;
  if (v52) {
LABEL_89:
  }
    sub_1000DB0A0(v52);
LABEL_90:
  if (v60) {
    goto LABEL_29;
  }
LABEL_91:
  BOOL v10 = sub_1000F1648((double *)(a1 + 168), *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448)) > 35.0|| *(_DWORD *)(a1 + 1776) > 15;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023218C0);
  }
  int v67 = v17[135];
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v68 = *(void *)(a2 + 384);
    uint64_t v69 = *(void *)(a3 + 544);
    uint64_t v70 = *(void *)(a2 + 680);
    uint64_t v71 = *(void *)(a2 + 488);
    uint64_t v72 = *(void *)(a3 + 352);
    *(_DWORD *)__n128 buf = 134350081;
    uint64_t v95 = v68;
    __int16 v96 = 2050;
    *(void *)unint64_t v97 = v69;
    *(_WORD *)&v97[8] = 2050;
    *(void *)&v97[10] = v70;
    *(_WORD *)&v97[18] = 2049;
    *(void *)&v97[20] = v71;
    __int16 v98 = 2049;
    uint64_t v99 = v72;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping between roads detected,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    uint64_t v73 = *(void *)(a2 + 384);
    uint64_t v74 = *(void *)(a3 + 544);
    uint64_t v75 = *(void *)(a2 + 680);
    uint64_t v76 = *(void *)(a2 + 488);
    uint64_t v77 = *(void *)(a3 + 352);
    int v88 = 134350081;
    uint64_t v89 = v73;
    __int16 v90 = 2050;
    *(void *)double v91 = v74;
    *(_WORD *)&v91[8] = 2050;
    *(void *)&v91[10] = v75;
    *(_WORD *)&v91[18] = 2049;
    *(void *)&v91[20] = v76;
    __int16 v92 = 2049;
    uint64_t v93 = v77;
    double v78 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "%s\n", v78);
    if (v78 != (char *)buf) {
      free(v78);
    }
  }
LABEL_99:
  sub_10017FF2C((uint64_t *)(a1 + 1784));
  BOOL v11 = (uint64_t *)(a1 + 1808);
LABEL_21:
  sub_10017FF2C(v11);
  return v10;
}

void sub_10136D0D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10136D110(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 48) == *(void *)(a2 + 40))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023218C0);
    }
    double v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      double v15 = *(double *)(a2 + 384);
      *(_DWORD *)__n128 buf = 134349056;
      double v57 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    BOOL v6 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v16 = *(double *)(a2 + 384);
      int v48 = 134349056;
      double v49 = v16;
      goto LABEL_37;
    }
  }
  else
  {
    *(void *)(a2 + 696) = 0;
    *(void *)(a2 + 688) = 0;
    if (*(unsigned char *)(a2 + 640))
    {
      if (*(void *)(a2 + 256))
      {
        uint64_t v46 = 0;
        double v47 = 0.0;
        uint64_t v4 = (double *)(a1 + 168);
        sub_101172040((double *)(a1 + 168), &v47, (double *)&v46, *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448), *(double *)(a2 + 680), *(double *)(a2 + 432), *(double *)(a2 + 440));
        uint64_t v5 = *(void *)(a2 + 256);
        BOOL v6 = v5 != 0;
        if (v5)
        {
          uint64_t v7 = *(int *)(v5 + 20);
          double v8 = 0.5;
          double v9 = 1.0;
          if (v7 != 9)
          {
            int v10 = *(_DWORD *)(v5 + 72);
            if (v10 != 6 && v10 != 255)
            {
              double v11 = *(double *)(v5 + 96);
              if (v11 < 0.000001)
              {
                double v11 = 1.0;
                if ((v7 & 0xFFFFFFFE) != 8)
                {
                  int v12 = *(unsigned __int8 *)(v5 + 16);
                  if (v7 > 7)
                  {
                    double v11 = dbl_101D1C3C0[v12 == 0];
                  }
                  else
                  {
                    if (v12) {
                      BOOL v13 = (double *)&unk_101DB4740;
                    }
                    else {
                      BOOL v13 = (double *)&unk_101DB4780;
                    }
                    double v11 = v13[v7];
                  }
                }
              }
              double v9 = v11 + 1.0;
              double v8 = v11 * 0.5 + 1.0;
            }
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v23 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            double v24 = *(double *)(a2 + 384);
            uint64_t v25 = *(void *)(a2 + 256);
            int v26 = *(_DWORD *)(v25 + 20);
            LODWORD(v25) = *(unsigned __int8 *)(v25 + 16);
            *(_DWORD *)__n128 buf = 134350080;
            double v57 = v24;
            __int16 v58 = 1026;
            *(_DWORD *)uint64_t v59 = v26;
            *(_WORD *)&v59[4] = 1026;
            *(_DWORD *)&v59[6] = v25;
            __int16 v60 = 2050;
            double v61 = v9;
            __int16 v62 = 2050;
            double v63 = v47;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            double v38 = *(double *)(a2 + 384);
            uint64_t v39 = *(void *)(a2 + 256);
            int v40 = *(_DWORD *)(v39 + 20);
            LODWORD(v39) = *(unsigned __int8 *)(v39 + 16);
            int v48 = 134350080;
            double v49 = v38;
            __int16 v50 = 1026;
            *(_DWORD *)uint64_t v51 = v40;
            *(_WORD *)&v51[4] = 1026;
            *(_DWORD *)&v51[6] = v39;
            __int16 v52 = 2050;
            double v53 = v9;
            __int16 v54 = 2050;
            double v55 = v47;
            double v41 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v41);
            if (v41 != (char *)buf) {
              free(v41);
            }
          }
          if (v9 >= 0.000001)
          {
            uint64_t v27 = *(void *)(a2 + 528);
            uint64_t v44 = *(void *)(a2 + 536);
            uint64_t v45 = v27;
            if (sub_100178D5C(a1 + 1832, *(double *)(a2 + 400), 6.0))
            {
              uint64_t v28 = *(void *)(a2 + 256);
              if (!v28 || (*(_DWORD *)(v28 + 20) & 0xFFFFFFFE) != 8)
              {
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1023218C0);
                }
                double v29 = qword_102419438;
                if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                {
                  double v30 = v9 + *(double *)(a1 + 16);
                  *(_DWORD *)__n128 buf = 134349312;
                  double v57 = v9;
                  __int16 v58 = 2050;
                  *(double *)uint64_t v59 = v30;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,Road width inflated from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1023218C0);
                  }
                  double v42 = v9 + *(double *)(a1 + 16);
                  int v48 = 134349312;
                  double v49 = v9;
                  __int16 v50 = 2050;
                  *(double *)uint64_t v51 = v42;
                  uint64_t v43 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v43);
                  if (v43 != (char *)buf) {
                    free(v43);
                  }
                }
                double v8 = v8 + *(double *)(a1 + 16) * 0.5;
              }
            }
            double v31 = fabs(v47);
            if (v31 >= v8)
            {
              if (v47 >= 0.0) {
                double v34 = -(v31 - v8);
              }
              else {
                double v34 = v31 - v8;
              }
              sub_10005B780(v4, (double *)&v45, (double *)&v44, *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 448), *(double *)(a2 + 680), v34);
              *(_DWORD *)(a2 + 656) = 2;
              uint64_t v33 = v44;
              uint64_t v32 = v45;
              *(void *)(a2 + 688) = v45;
              *(void *)(a2 + 696) = v33;
            }
            else
            {
              uint64_t v32 = *(void *)(a2 + 432);
              uint64_t v33 = *(void *)(a2 + 440);
            }
            *(void *)(a2 + 528) = v32;
            *(void *)(a2 + 536) = v33;
          }
        }
        return v6;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v19 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        double v20 = *(double *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        double v57 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
      }
      BOOL v6 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        double v21 = *(double *)(a2 + 384);
        int v48 = 134349056;
        double v49 = v21;
LABEL_37:
        double v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v17 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *(double *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        double v57 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023218C0);
        }
        double v36 = *(double *)(a2 + 384);
        int v48 = 134349056;
        double v49 = v36;
        double v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      return 1;
    }
  }
  return v6;
}

uint64_t sub_10136DA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(void *)(a1 + 1968) = 0xBFF0000000000000;
  *(void *)(a1 + 2056) = 0xBFF0000000000000;
  *(void *)(a1 + 2064) = 0xBFF0000000000000;
  *(void *)uint64_t v94 = 0xBFF0000000000000;
  uint64_t v4 = a1 + 1968;
  *(_DWORD *)(a1 + 2048) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2037) = 0;
  *(_DWORD *)uint64_t v95 = 0;
  memset(&v94[8], 0, 69);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v95[8] = _Q0;
  if (*(double *)(a3 + 248) > 0.0)
  {
    BOOL v13 = (void *)(a2 + 256);
    uint64_t v14 = *(void *)(a2 + 384);
    uint64_t v93 = v14;
    double v15 = *(double *)(a2 + 400);
    double v16 = -1.0;
    if (v15 >= 0.0)
    {
      double v17 = *(double *)(a3 + 264);
      _NF = v17 < 0.0;
      double v16 = vabdd_f64(v15, v17);
      if (_NF) {
        double v16 = -1.0;
      }
    }
    if (*v13)
    {
      if (v16 > 0.0)
      {
        if (v16 > 1.5)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v18 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,timeDiff too large,DOT", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_77;
          }
LABEL_170:
          dispatch_once(&qword_102419430, &stru_1023218C0);
LABEL_77:
          int v96 = 134349056;
          uint64_t v97 = v93;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v31);
          goto LABEL_110;
        }
        if (!*(unsigned char *)(a2 + 640) || *(unsigned char *)(a2 + 641))
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v24 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, currentCrumb invalid", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        if (!*(unsigned char *)(a3 + 504) || *(unsigned char *)(a3 + 505))
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v25 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb invalid", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        double v22 = *(double *)(a1 + 2272);
        if (v22 > 0.0 && vabdd_f64(v15, v22 + -1.0) < 0.9)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v23 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,feedback interval check", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        if (*(unsigned char *)(a1 + 1064) && *(double *)(a1 + 1072) < 36.0)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          int v26 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            int v27 = *(unsigned __int8 *)(a1 + 1064);
            uint64_t v28 = *(void *)(a1 + 1072);
            *(_DWORD *)__n128 buf = 134349568;
            uint64_t v135 = v14;
            __int16 v136 = 1026;
            *(_DWORD *)uint64_t v137 = v27;
            *(_WORD *)&v137[4] = 2050;
            *(void *)&v137[6] = v28;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, too close to prior intersection,transitiondetected,%{public}d,dist,%{public}.2lf", buf, 0x1Cu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          int v29 = *(unsigned __int8 *)(a1 + 1064);
          uint64_t v30 = *(void *)(a1 + 1072);
          int v96 = 134349568;
          uint64_t v97 = v93;
          __int16 v98 = 1026;
          *(_DWORD *)uint64_t v99 = v29;
          *(_WORD *)&v99[4] = 2050;
          *(void *)&v99[6] = v30;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v31);
          goto LABEL_110;
        }
        double v32 = fmod(*(double *)(a2 + 544) - *(double *)(a2 + 680), 360.0);
        if (v32 < 0.0) {
          double v32 = v32 + 360.0;
        }
        if (v32 > 180.0) {
          double v32 = v32 + -360.0;
        }
        if (fabs(v32) > 1.0)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          uint64_t v33 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, course not aligned to full snap", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        double v92 = -1.0;
        if (!sub_101360E84(&v93, (double *)(a2 + 376), (double *)(a1 + 168), &v92, *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a3 + 544)))
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v41 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v93;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb location or course diverged", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          int v96 = 134349056;
          uint64_t v97 = v93;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v31);
          goto LABEL_110;
        }
        double v91 = 70.0;
        sub_100FFFA78((uint64_t)v90, (uint64_t)v13);
        char v34 = sub_10136173C((uint64_t *)a1, v90, a2 + 376, 0, &v91);
        sub_100FFFC10(v90);
        if (v34) {
          return 0;
        }
        sub_100FFFA78((uint64_t)&v87, (uint64_t)v13);
        sub_100134750(v85, "lookBehindParticle");
        sub_100134750(__p, "currentCrumb");
        BOOL v35 = sub_1013602CC(a1, (uint64_t *)v85, (uint64_t *)__p, (uint64_t)&v87, (double *)(a2 + 376), &v92, -15.0);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v86 < 0) {
          operator delete(v85[0]);
        }
        if (v35)
        {
          sub_100134750(v81, "Start");
          BOOL v36 = sub_1013E7730(a2 + 376, (double *)(a1 + 168), (uint64_t *)v81, (double *)&v94[8], (double *)&v94[16], v88, v89);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          if (v36)
          {
            double v37 = sub_1000F1648((double *)(a1 + 168), *(double *)(a2 + 288), *(double *)(a2 + 296), v88, v89, *(double *)(a2 + 448));
            sub_100FFFA78((uint64_t)v78, (uint64_t)v13);
            double v38 = *(double *)(a2 + 472);
            if (v38 >= 0.0)
            {
              double v40 = fabs(v38);
            }
            else
            {
              uint64_t v39 = *(void *)(a1 + 208);
              if (v39)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 104))(v39)) {
                  double v40 = 8.32;
                }
                else {
                  double v40 = 3.0;
                }
              }
              else
              {
                double v40 = 3.0;
              }
            }
            double v43 = v91;
            double v44 = v91 - v40;
            if (v91 - v40 >= 18.0)
            {
              sub_100134750(v76, "predictedParticle");
              sub_100134750(v74, "currentCrumb");
              BOOL v47 = sub_1013602CC(a1, (uint64_t *)v76, (uint64_t *)v74, (uint64_t)v78, (double *)(a2 + 376), &v92, v40);
              if (v75 < 0) {
                operator delete(v74[0]);
              }
              if (v77 < 0) {
                operator delete(v76[0]);
              }
              if (!v47) {
                goto LABEL_157;
              }
              *(_OWORD *)&v94[24] = v80;
              unint64_t v73 = 0xBFF0000000000000;
              sub_10134EB80(v78, (double *)&v94[64], (double *)&v73, 1);
              double v48 = fmax(*(double *)&v94[64], 15.0);
              if (v43 > v48 + 1.0)
              {
                sub_100FFFA78((uint64_t)v72, (uint64_t)v13);
                if (v43 - v48 >= v40 + 15.0) {
                  double v49 = v40 + 15.0;
                }
                else {
                  double v49 = v43 - v48;
                }
                sub_100134750(v70, "lookAheadParticle");
                sub_100134750(v68, "currentCrumb");
                BOOL v50 = sub_1013602CC(a1, (uint64_t *)v70, (uint64_t *)v68, (uint64_t)v72, (double *)(a2 + 376), &v92, v49);
                if (v69 < 0) {
                  operator delete(v68[0]);
                }
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
                if (!v50) {
                  goto LABEL_160;
                }
                double v51 = fmin(v37, 15.0);
                double v52 = v92;
                if (v92 < 3.0) {
                  double v52 = 3.0;
                }
                *(double *)&v94[40] = v51 + v49;
                *(double *)&v94[56] = v52;
                sub_100134750(v66, "Predicted");
                BOOL v53 = sub_1013E7730(a2 + 376, (double *)(a1 + 168), (uint64_t *)v66, (double *)&v94[24], (double *)&v94[32], *(double *)&v94[24], *(double *)&v94[32]);
                if (v67 < 0) {
                  operator delete(v66[0]);
                }
                if (v53)
                {
                  double v54 = *(double *)(a2 + 384) + 1.0;
                  *(double *)&v94[48] = v79;
                  *(double *)uint64_t v94 = v54;
                  __asm { FMOV            V1.2D, #1.0 }
                  *(float64x2_t *)&v95[8] = vaddq_f64(*(float64x2_t *)(a2 + 392), _Q1);
                  v94[73] = 0;
                  v94[74] = *(unsigned char *)(v78[0] + 17);
                  v94[72] = *(unsigned char *)(v78[0] + 18);
                  v94[75] = *(unsigned char *)(v78[0] + 19);
                  v94[76] = *(_DWORD *)(a2 + 496) == 0;
                  *(_DWORD *)uint64_t v95 = 2;
                  uint64_t v56 = *(void *)(a1 + 208);
                  if (v56 && (*(unsigned int (**)(uint64_t))(*(void *)v56 + 104))(v56)) {
                    *(_DWORD *)uint64_t v95 = 3;
                  }
                  long long v57 = *(_OWORD *)v95;
                  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v94[64];
                  *(_OWORD *)(v4 + 80) = v57;
                  *(void *)(v4 + 96) = *(void *)&v95[16];
                  long long v58 = *(_OWORD *)&v94[16];
                  *(_OWORD *)uint64_t v4 = *(_OWORD *)v94;
                  *(_OWORD *)(v4 + 16) = v58;
                  long long v59 = *(_OWORD *)&v94[48];
                  *(_OWORD *)(v4 + 32) = *(_OWORD *)&v94[32];
                  *(_OWORD *)(v4 + 48) = v59;
                  *(void *)(a1 + 2272) = *(void *)&v95[16];
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1023218C0);
                  }
                  __int16 v60 = qword_102419438;
                  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v61 = *(void *)(a2 + 472);
                    *(_DWORD *)__n128 buf = 134353921;
                    uint64_t v135 = v93;
                    __int16 v136 = 2050;
                    *(void *)uint64_t v137 = *(void *)v94;
                    *(_WORD *)&v137[8] = 2049;
                    *(void *)&v137[10] = *(void *)&v94[24];
                    __int16 v138 = 2049;
                    uint64_t v139 = *(void *)&v94[32];
                    __int16 v140 = 2050;
                    uint64_t v141 = *(void *)&v94[48];
                    __int16 v142 = 2050;
                    uint64_t v143 = *(void *)&v94[56];
                    __int16 v144 = 2050;
                    uint64_t v145 = *(void *)&v94[64];
                    __int16 v146 = 2049;
                    uint64_t v147 = *(void *)&v94[8];
                    __int16 v148 = 2049;
                    uint64_t v149 = *(void *)&v94[16];
                    __int16 v150 = 2050;
                    uint64_t v151 = *(void *)&v94[40];
                    __int16 v152 = 2050;
                    uint64_t v153 = v61;
                    __int16 v154 = 1026;
                    int v155 = v94[73];
                    __int16 v156 = 1026;
                    int v157 = v94[74];
                    __int16 v158 = 1026;
                    int v159 = v94[72];
                    __int16 v160 = 1026;
                    int v161 = v94[75];
                    __int16 v162 = 2050;
                    double v163 = v48;
                    __int16 v164 = 1026;
                    int v165 = v94[76];
                    __int16 v166 = 2050;
                    uint64_t v167 = *(void *)&v95[16];
                    __int16 v168 = 2050;
                    double v169 = v51;
                    __int16 v170 = 1026;
                    int v171 = *(_DWORD *)v95;
                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContTime,%{public}.3lf,lookBehindDist,%{public}.2lf,type,%{public}d", buf, 0xB2u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_1023218C0);
                    }
                    uint64_t v64 = *(void *)(a2 + 472);
                    int v96 = 134353921;
                    uint64_t v97 = v93;
                    __int16 v98 = 2050;
                    *(void *)uint64_t v99 = *(void *)v94;
                    *(_WORD *)&v99[8] = 2049;
                    *(void *)&v99[10] = *(void *)&v94[24];
                    __int16 v100 = 2049;
                    uint64_t v101 = *(void *)&v94[32];
                    __int16 v102 = 2050;
                    uint64_t v103 = *(void *)&v94[48];
                    __int16 v104 = 2050;
                    uint64_t v105 = *(void *)&v94[56];
                    __int16 v106 = 2050;
                    uint64_t v107 = *(void *)&v94[64];
                    __int16 v108 = 2049;
                    uint64_t v109 = *(void *)&v94[8];
                    __int16 v110 = 2049;
                    uint64_t v111 = *(void *)&v94[16];
                    __int16 v112 = 2050;
                    uint64_t v113 = *(void *)&v94[40];
                    __int16 v114 = 2050;
                    uint64_t v115 = v64;
                    __int16 v116 = 1026;
                    int v117 = v94[73];
                    __int16 v118 = 1026;
                    int v119 = v94[74];
                    __int16 v120 = 1026;
                    int v121 = v94[72];
                    __int16 v122 = 1026;
                    int v123 = v94[75];
                    __int16 v124 = 2050;
                    double v125 = v48;
                    __int16 v126 = 1026;
                    int v127 = v94[76];
                    __int16 v128 = 2050;
                    uint64_t v129 = *(void *)&v95[16];
                    __int16 v130 = 2050;
                    double v131 = v51;
                    __int16 v132 = 1026;
                    int v133 = *(_DWORD *)v95;
                    uint64_t v65 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v65);
                    if (v65 != (char *)buf) {
                      free(v65);
                    }
                  }
                  uint64_t v3 = 1;
                }
                else
                {
LABEL_160:
                  uint64_t v3 = 0;
                }
                sub_100FFFC10(v72);
                goto LABEL_158;
              }
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              __int16 v62 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__n128 buf = 134349056;
                uint64_t v135 = v93;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, current particle within the stopDistanceFromIntersection", buf, 0xCu);
              }
              if (!sub_10013D1A0(115, 2))
              {
LABEL_157:
                uint64_t v3 = 0;
LABEL_158:
                sub_100FFFC10(v78);
                goto LABEL_159;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v96 = 134349056;
              uint64_t v97 = v93;
              uint64_t v46 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v46);
            }
            else
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              uint64_t v45 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__n128 buf = 134349312;
                uint64_t v135 = v93;
                __int16 v136 = 2050;
                *(double *)uint64_t v137 = v44;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, predicted point is too close to intersection,dist,%{public}.2lf", buf, 0x16u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_157;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1023218C0);
              }
              int v96 = 134349312;
              uint64_t v97 = v93;
              __int16 v98 = 2050;
              *(double *)uint64_t v99 = v44;
              uint64_t v46 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v46);
            }
            if (v46 != (char *)buf) {
              free(v46);
            }
            goto LABEL_157;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1023218C0);
          }
          double v42 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v93;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1023218C0);
            }
            int v96 = 134349056;
            uint64_t v97 = v93;
            double v63 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v63);
            if (v63 != (char *)buf) {
              free(v63);
            }
          }
        }
        uint64_t v3 = 0;
LABEL_159:
        sub_100FFFC10(&v87);
        return v3;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      double v20 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v135 = v14;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid timeDiff,DOT", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_109:
        int v96 = 134349056;
        uint64_t v97 = v93;
        double v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v31);
LABEL_110:
        if (v31 != (char *)buf) {
          free(v31);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023218C0);
      }
      uint64_t v19 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v135 = v14;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road,DOT", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_109;
      }
    }
    dispatch_once(&qword_102419430, &stru_1023218C0);
    goto LABEL_109;
  }
  return v3;
}

void sub_10136F330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_100FFFC10(&a21);
  sub_100FFFC10(&a42);
  sub_100FFFC10(&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_10136F454(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(void *)(a1 + 2256) = v2;
    operator delete(v2);
  }

  return sub_10082B4FC(a1);
}

void sub_10136F498(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(void *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  sub_10082B4FC(a1);

  operator delete();
}

void sub_10136F4F0(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10136F520(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10136F520(a1, *a2);
    sub_10136F520(a1, a2[1]);
    sub_10136F57C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10136F57C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1120);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v5 = (void **)(a1 + 1088);
  sub_10082B830(&v5);
  if (*(char *)(a1 + 775) < 0) {
    operator delete(*(void **)(a1 + 752));
  }
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void *sub_10136F5FC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_100420644(result, a4);
    double result = (void *)sub_10136F684((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10136F664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10082B830(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10136F684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1011E04FC(a1, v4, v6);
      v6 += 112;
      uint64_t v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10136F730((uint64_t)v9);
  return v4;
}

void sub_10136F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10136F730(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10136F768((uint64_t *)a1);
  }
  return a1;
}

void sub_10136F768(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v1 = (void **)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)*v2;
  if (*v1 != (void *)*v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 14;
      sub_10082B8C8(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10136F7BC(uint64_t a1)
{
  *(unsigned char *)(a1 + 48) = 0;
  sub_10137006C((void *)a1);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = (void **)v3;
  sub_10082B830(&v4);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
}

void sub_10136F830(uint64_t a1)
{
  sub_10135227C(a1 + 104);
  bzero(v2, 0x300uLL);
  sub_1013584EC((uint64_t)v2);
  sub_10136136C(a1 + 136, v2);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3)
  {
    uint64_t v4 = v3;
    operator delete(v3);
  }
  if (*((void *)&v2[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v2[0] + 1));
  }
}

uint64_t sub_10136F8D4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 872);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  uint64_t v3 = *(void **)(a1 + 344);
  if (v3)
  {
    *(void *)(a1 + 352) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 264);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(void *)(a1 + 232) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 144);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_10136F520(a1 + 112, *(void **)(a1 + 120));
  uint64_t v7 = *(void **)(a1 + 64);
  if (v7)
  {
    *(void *)(a1 + 72) = v7;
    operator delete(v7);
  }
  char v9 = (void **)(a1 + 40);
  sub_10082B830(&v9);
  return a1;
}

uint64_t sub_10136F980(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101D1C320;
  *(unsigned char *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_OWORD *)(a1 + 112) = _Q1;
  *(_OWORD *)(a1 + 128) = _Q1;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = _Q1;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_OWORD *)(a1 + 192) = _Q1;
  sub_101357970(a1, a2, a3, a4);
  return a1;
}

uint64_t **sub_10136F9E8(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    _OWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      double v8 = (uint64_t *)v6[1];
    }
    else {
      double v8 = v6;
    }
    double v15 = result;
    double v16 = v8;
    double v17 = v8;
    if (v8)
    {
      double v16 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          long long v10 = *((_OWORD *)v9 + 2);
          *((unsigned char *)v8 + 48) = *((unsigned char *)v9 + 48);
          *((_OWORD *)v8 + 2) = v10;
          sub_101352300((uint64_t)(v8 + 7), (uint64_t)(v9 + 7));
          sub_10136FB60(v5, v17);
          double v8 = v16;
          double v17 = v16;
          if (v16) {
            double v16 = sub_1002FABD8((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v12);
          }
          if (!v8) {
            break;
          }
          char v9 = a2;
        }
        while (a2 != a3);
      }
    }
    double result = (uint64_t **)sub_10136FBE8((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)sub_10136FC40((uint64_t)v5, (uint64_t)(a2 + 4));
      BOOL v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10136FB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10136FBE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10136FB60(uint64_t **a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!sub_100FFD56C((uint64_t)(a2 + 4), (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t v6 = v5 + 1;
  }
  else
  {
    uint64_t v6 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v5, v6, a2);
  return a2;
}

uint64_t sub_10136FBE8(uint64_t a1)
{
  sub_10136F520(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10136F520(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_10136FC40(uint64_t a1, uint64_t a2)
{
  sub_10136FD04(a1, a2, (uint64_t)v9);
  uint64_t v4 = (uint64_t **)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = v9[0] + 4;
    do
    {
      while (1)
      {
        uint64_t v4 = (uint64_t **)v3;
        if (!sub_100FFD56C((uint64_t)v5, (uint64_t)(v3 + 4))) {
          break;
        }
        uint64_t v3 = *v4;
        uint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      uint64_t v3 = v4[1];
    }
    while (v3);
    uint64_t v6 = v4 + 1;
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000EDF90((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  sub_101370014((uint64_t)v9, 0);
  return v7;
}

void sub_10136FCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101370014((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10136FD04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x4B0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  void v6[2] = *(_OWORD *)a2;
  *((void *)v6 + 6) = *(void *)(a2 + 16);
  uint64_t result = sub_10136FD80((uint64_t)v6 + 56, a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10136FD68(_Unwind_Exception *a1)
{
  sub_101370014(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10136FD80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 73);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 73) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_101000368((void *)(a1 + 96), *(const void **)(a2 + 96), *(void *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  long long v9 = *(_OWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  long long v11 = *(_OWORD *)(a2 + 248);
  long long v12 = *(_OWORD *)(a2 + 264);
  long long v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v11;
  long long v14 = *(_OWORD *)(a2 + 168);
  long long v15 = *(_OWORD *)(a2 + 184);
  long long v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  if (*(char *)(a2 + 319) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 296), *(void **)(a2 + 296), *(void *)(a2 + 304));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v17;
  }
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x118uLL);
  long long v18 = *(_OWORD *)(a2 + 600);
  long long v19 = *(_OWORD *)(a2 + 616);
  long long v20 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v20;
  *(_OWORD *)(a1 + 600) = v18;
  *(_OWORD *)(a1 + 616) = v19;
  long long v21 = *(_OWORD *)(a2 + 664);
  long long v22 = *(_OWORD *)(a2 + 680);
  long long v23 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v23;
  *(_OWORD *)(a1 + 664) = v21;
  *(_OWORD *)(a1 + 680) = v22;
  if (*(char *)(a2 + 751) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 728), *(void **)(a2 + 728), *(void *)(a2 + 736));
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 728);
    *(void *)(a1 + 744) = *(void *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = v24;
  }
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x118uLL);
  long long v25 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v25;
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  sub_10136F5FC((void *)(a1 + 1064), *(void *)(a2 + 1064), *(void *)(a2 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 4));
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  uint64_t v26 = *(void *)(a2 + 1096);
  *(void *)(a1 + 1096) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  long long v27 = *(_OWORD *)(a2 + 1104);
  long long v28 = *(_OWORD *)(a2 + 1120);
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1120) = v28;
  *(_OWORD *)(a1 + 1104) = v27;
  return a1;
}

void sub_10136FFBC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 319) < 0) {
    operator delete(*v3);
  }
  sub_100FFFC10(v2);
  _Unwind_Resume(a1);
}

void sub_101370014(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10136F57C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10137006C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 14;
        sub_10082B8C8((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_1013700DC(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)sub_1011DFB10((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    sub_101370188((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_101370014((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_101370188@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x4B0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1013701F4((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1013701DC(_Unwind_Exception *a1)
{
  sub_101370014(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1013701F4(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  bzero((void *)(a1 + 48), 0x460uLL);
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 1;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 539) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 406) = 0u;
  *(void *)(a1 + 616) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = _Q1;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 971) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 838) = 0u;
  *(void *)(a1 + 1048) = 0xBFF0000000000000;
  *(void *)(a1 + 1056) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(unsigned char *)(a1 + 1152) = 1;
  *(_DWORD *)(a1 + 1160) = -1;
  return a1;
}

void sub_10137033C(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) < a4)
  {
    sub_10137006C(a1);
    if (a4 > 0x249249249249249) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100420644(a1, v11);
    uint64_t v12 = sub_10136F684(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 4) < a4)
  {
    long long v13 = &a2[2 * ((a1[1] - v9) >> 4)];
    sub_1013704E0((uint64_t)&v17, a2, v13, v9);
    uint64_t v12 = sub_10136F684(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_1013704E0((uint64_t)&v18, a2, a3, v9);
  long long v15 = v14;
  long long v16 = (void *)a1[1];
  if (v16 != v14)
  {
    do
    {
      v16 -= 14;
      sub_10082B8C8(v8, v16);
    }
    while (v16 != v15);
  }
  a1[1] = (uint64_t)v15;
}

void sub_1013704D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1013704D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_1013704E0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  long long v6 = a2 + 12;
  do
  {
    uint64_t v8 = *(v6 - 12);
    uint64_t v7 = *(v6 - 11);
    uint64_t v9 = v6 - 12;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = *(std::__shared_weak_count **)(a4 + 8);
    *(void *)a4 = v8;
    *(void *)(a4 + 8) = v7;
    if (v10) {
      sub_1000DB0A0(v10);
    }
    long long v11 = *((_OWORD *)v6 - 5);
    long long v12 = *((_OWORD *)v6 - 4);
    *(void *)(a4 + 48) = *(v6 - 6);
    *(_OWORD *)(a4 + 16) = v11;
    *(_OWORD *)(a4 + 32) = v12;
    long long v13 = *(_OWORD *)(v6 - 5);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)((char *)v6 - 31);
    *(_OWORD *)(a4 + 56) = v13;
    if ((uint64_t *)a4 != v9) {
      sub_1010003E4((char *)(a4 + 88), (char *)*(v6 - 1), *v6, 0x8E38E38E38E38E39 * ((*v6 - *(v6 - 1)) >> 3));
    }
    a4 += 112;
    v6 += 14;
  }
  while (v9 + 14 != v5);
  return v5;
}

long long *sub_1013705BC(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_1000DB0A0(v8);
      }
      long long v9 = v5[1];
      long long v10 = v5[2];
      *(void *)(a4 + 48) = *((void *)v5 + 6);
      *(_OWORD *)(a4 + 16) = v9;
      *(_OWORD *)(a4 + 32) = v10;
      long long v11 = *(long long *)((char *)v5 + 56);
      *(_OWORD *)(a4 + 65) = *(long long *)((char *)v5 + 65);
      *(_OWORD *)(a4 + 56) = v11;
      sub_1000F4EBC(a4 + 88, (__n128 *)((char *)v5 + 88));
      a4 += 112;
      v5 += 7;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_101370654(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    long long v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 4) >= a5)
      {
        long long v21 = &a3[14 * a5];
      }
      else
      {
        long long v21 = &a3[2 * ((uint64_t)(v12 - a2) >> 4)];
        a1[1] = sub_1013709C8(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_101370868((uint64_t)a1, v5, v12, v5 + 112 * a5);
      sub_1013704E0((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x249249249249249) {
        sub_1001D7FD4();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 4);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x124924924924924) {
        unint64_t v18 = 0x249249249249249;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        long long v19 = (char *)sub_100227C5C(v9, v18);
      }
      else {
        long long v19 = 0;
      }
      long long v22 = &v19[112 * v15];
      v26[0] = v19;
      v26[1] = v22;
      long long v27 = v22;
      long long v28 = &v19[112 * v18];
      uint64_t v23 = 112 * a5;
      long long v24 = &v22[112 * a5];
      do
      {
        sub_1011E04FC(v29, (uint64_t)v22, (uint64_t)v7);
        v22 += 112;
        v7 += 14;
        v23 -= 112;
      }
      while (v23);
      long long v27 = v24;
      uint64_t v5 = sub_101370914(a1, v26, v5);
      sub_1011E0770(v26);
    }
  }
  return v5;
}

void sub_10137083C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_101370868(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      long long v10 = *(_OWORD *)(v9 + 16);
      long long v11 = *(_OWORD *)(v9 + 32);
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(_OWORD *)(v8 + 16) = v10;
      *(_OWORD *)(v8 + 32) = v11;
      long long v12 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 65) = *(_OWORD *)(v9 + 65);
      *(_OWORD *)(v8 + 56) = v12;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      *(void *)(v8 + 104) = *(void *)(v9 + 104);
      *(void *)(v9 + 88) = 0;
      *(void *)(v9 + 96) = 0;
      *(void *)(v9 + 104) = 0;
      v8 += 112;
      v9 += 112;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_101370A74((uint64_t)&v14, a2, v7, v6);
}

uint64_t sub_101370914(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1011E0614((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_101370B20(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1013709C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1011E04FC(a1, v4, v6);
      v6 += 112;
      uint64_t v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10136F730((uint64_t)v9);
  return v4;
}

void sub_101370A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101370A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v8 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      uint64_t v11 = *(std::__shared_weak_count **)(a4 + v7 - 104);
      *(_OWORD *)(a4 + v7 - 112) = v10;
      if (v11) {
        sub_1000DB0A0(v11);
      }
      long long v12 = *(_OWORD *)(v8 - 96);
      long long v13 = *(_OWORD *)(v8 - 80);
      *(void *)(v9 - 64) = *(void *)(v8 - 64);
      *(_OWORD *)(v9 - 96) = v12;
      *(_OWORD *)(v9 - 80) = v13;
      long long v14 = *(_OWORD *)(v8 - 56);
      *(_OWORD *)(v9 - 47) = *(_OWORD *)(v8 - 47);
      *(_OWORD *)(v9 - 56) = v14;
      sub_1000F4EBC(v9 - 24, (__n128 *)(v8 - 24));
      v7 -= 112;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_101370B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(v4 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(v4 + 16) = v5;
      *(_OWORD *)(v4 + 32) = v6;
      long long v7 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v4 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(v4 + 56) = v7;
      *(void *)(v4 + 96) = 0;
      *(void *)(v4 + 104) = 0;
      *(void *)(v4 + 88) = 0;
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
      *(void *)(v4 + 104) = *(void *)(a2 + 104);
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      v4 += 112;
      a2 += 112;
    }
    while (a2 != a3);
    uint64_t v12 = v4;
  }
  char v10 = 1;
  sub_10136F730((uint64_t)v9);
  return v4;
}

uint64_t sub_101370BDC(uint64_t *a1, void *a2)
{
  return sub_1010698D4((uint64_t)a1, a1, a2);
}

uint64_t *sub_101370C18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (a2 != a3 && (uint64_t *)v6 != a1)
  {
    do
    {
      uint64_t v7 = *(void *)(v4 + 16);
      *(_WORD *)(v6 + 24) = *(_WORD *)(v4 + 24);
      *(void *)(v6 + 16) = v7;
      uint64_t v9 = *(void *)(v4 + 32);
      uint64_t v8 = *(void *)(v4 + 40);
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      char v10 = *(std::__shared_weak_count **)(v6 + 40);
      *(void *)(v6 + 32) = v9;
      *(void *)(v6 + 40) = v8;
      if (v10) {
        sub_1000DB0A0(v10);
      }
      *(void *)(v6 + 48) = *(void *)(v4 + 48);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v4 != a3 && (uint64_t *)v6 != a1);
  }
  if ((uint64_t *)v6 == a1)
  {
    return sub_101370D0C((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return sub_101370E5C((uint64_t)a1, (void *)v6, a1);
  }
}

uint64_t *sub_101370D0C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x38uLL);
    uint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v10 = *(void *)(a3 + 16);
    *((_WORD *)v8 + 12) = *(_WORD *)(a3 + 24);
    _OWORD v8[2] = v10;
    uint64_t v11 = *(void *)(a3 + 40);
    v8[4] = *(void *)(a3 + 32);
    v8[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    v8[6] = *(void *)(a3 + 48);
    uint64_t v12 = *(void *)(a3 + 8);
    if (v12 == a4)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 1;
      long long v14 = v8;
      do
      {
        uint64_t v8 = operator new(0x38uLL);
        void *v8 = v14;
        v8[1] = 0;
        uint64_t v15 = *(void *)(v12 + 16);
        *((_WORD *)v8 + 12) = *(_WORD *)(v12 + 24);
        _OWORD v8[2] = v15;
        uint64_t v16 = *(void *)(v12 + 40);
        v8[4] = *(void *)(v12 + 32);
        v8[5] = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        v8[6] = *(void *)(v12 + 48);
        v14[1] = v8;
        ++v13;
        uint64_t v12 = *(void *)(v12 + 8);
        long long v14 = v8;
      }
      while (v12 != a4);
    }
    uint64_t v17 = *a2;
    *(void *)(v17 + 8) = v9;
    void *v9 = v17;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v13;
    return v9;
  }
  return a2;
}

void sub_101370E34(void *a1)
{
  __cxa_begin_catch(a1);
  sub_101AB08BC(v1);
  __cxa_rethrow();
}

void sub_101370E48(_Unwind_Exception *a1)
{
}

void *sub_101370E5C(uint64_t a1, void *__p, void *a3)
{
  if (__p != a3)
  {
    uint64_t v4 = __p;
    uint64_t v6 = *a3;
    uint64_t v7 = *__p;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      uint64_t v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      uint64_t v9 = (std::__shared_weak_count *)v4[5];
      if (v9) {
        sub_1000DB0A0(v9);
      }
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void sub_101370EE0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_101370F34((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void sub_101370F34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    uint64_t v4 = *(void **)(i - 56);
    if (v4)
    {
      *(void *)(i - 48) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_101370F84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 6)
    {
      uint64_t v19 = v12 - a2;
      uint64_t v20 = (uint64_t)(v12 - a2) >> 6;
      if (v20 >= a5)
      {
        uint64_t v21 = a3 + (a5 << 6);
      }
      else
      {
        uint64_t v21 = a3 + (v20 << 6);
        a1[1] = sub_10137127C(v9, v21, a4, *(void *)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_101371130((uint64_t)a1, v5, v12, v5 + (a5 << 6));
      sub_101371434((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 6);
      if (v14 >> 58) {
        sub_1001D7FD4();
      }
      uint64_t v15 = (a2 - v13) >> 6;
      uint64_t v16 = v10 - v13;
      if (v16 >> 5 > v14) {
        unint64_t v14 = v16 >> 5;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v29 = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_10017EAF0(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t)&v18[64 * v15];
      v26[0] = v18;
      v26[1] = v22;
      uint64_t v27 = v22;
      long long v28 = &v18[64 * v17];
      uint64_t v23 = a5 << 6;
      uint64_t v24 = v22 + (a5 << 6);
      do
      {
        sub_100D2E588(v29, v22, v7);
        v22 += 64;
        v7 += 64;
        v23 -= 64;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = sub_1013711C8(a1, v26, v5);
      sub_100D2E838((uint64_t)v26);
    }
  }
  return v5;
}

void sub_101371104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_101371130(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(void *)(v8 + 24) = *(void *)(v9 + 24);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      v8 += 64;
      v9 += 64;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1013713A8((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_1013711C8(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100D2E6EC((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10137163C(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10137127C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100D2E588(a1, v4, v6);
      v6 += 64;
      uint64_t v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_101371328((uint64_t)v9);
  return v4;
}

void sub_101371314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101371328(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_101371360(a1);
  }
  return a1;
}

void sub_101371360(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    long long v3 = *(void **)(v1 - 56);
    if (v3)
    {
      *(void *)(v1 - 48) = v3;
      operator delete(v3);
    }
    v1 -= 64;
  }
}

uint64_t sub_1013713A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      *(void *)(a4 + v7 - 64) = *(void *)(a3 + v7 - 64);
      sub_1000F4EBC(a4 + v7 - 56, (__n128 *)(a3 + v7 - 56));
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + v7 - 16);
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_101371434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 16;
  do
  {
    uint64_t v7 = v6 - 16;
    *(void *)a4 = *(void *)(v6 - 16);
    if (a4 != v6 - 16) {
      sub_1013714C8((void *)(a4 + 8), *(void **)(v6 - 8), *(void **)v6, (uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 4);
    }
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v6 + 32);
    a4 += 64;
    v6 += 64;
  }
  while (v7 + 64 != v5);
  return v5;
}

char *sub_1013714C8(void *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    unint64_t v17 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v17;
    unint64_t v18 = (v17 - result) >> 4;
    if (v18 >= a4)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        long long v25 = result;
        do
        {
          long long v26 = *(_OWORD *)v6;
          v6 += 2;
          *(_OWORD *)long long v25 = v26;
          v25 += 16;
          v24 += 16;
        }
        while (v6 != a3);
      }
      uint64_t v16 = (char *)(v24 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v19 = &a2[2 * v18];
      if (v12 != result)
      {
        uint64_t v20 = 16 * v18;
        do
        {
          long long v21 = *(_OWORD *)v6;
          v6 += 2;
          *(_OWORD *)uint64_t result = v21;
          result += 16;
          v20 -= 16;
        }
        while (v20);
      }
      uint64_t v22 = v12;
      if (v19 != a3)
      {
        uint64_t v23 = v12;
        do
        {
          *(void *)uint64_t v23 = *v19;
          *((void *)v23 + 1) = v19[1];
          v22 += 16;
          v19 += 2;
          v23 += 16;
        }
        while (v19 != a3);
      }
      uint64_t v16 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10022F168(a1, v11);
    unint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        *(void *)uint64_t v15 = *v6;
        *((void *)v15 + 1) = v6[1];
        v15 += 16;
        v6 += 2;
      }
      while (v6 != a3);
    }
    uint64_t v16 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v16[(void)v12];
  return result;
}

uint64_t sub_10137163C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100D2E588(a1, v4, v6);
      v6 += 64;
      uint64_t v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_101371328((uint64_t)v9);
  return v4;
}

void sub_1013716D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1013716E8(void *result, uint64_t a2)
{
  *uint64_t result = off_1023218F0;
  result[1] = a2;
  return result;
}

uint64_t sub_101371708(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestPressures", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101371764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_101371898(void *a1, int a2)
{
  *a1 = 0;
  if (a2) {
    operator new();
  }
  operator new();
}

void sub_10137196C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013719CC(void *a1)
{
}

uint64_t *sub_1013719D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_101371A28(void *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X3>, void *a4@<X8>, double a5@<D0>)
{
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    sub_101372914(a4, (v6 - *a2) >> 3);
    char v75 = a1;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v87);
    uint64_t v11 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = (void *)(v11 + v13);
        if (&v93 != sub_100529674((uint64_t)&v92, (void *)(v11 + v13)))
        {
          uint64_t v16 = sub_1005294BC((uint64_t)&v92, v15);
          uint64_t v17 = *a4 + v12;
          if (*(unsigned char *)(v17 + 20))
          {
            uint64_t v18 = *(void *)v16;
            *(_WORD *)(v17 + 8) = *(_WORD *)(v16 + 8);
            *(void *)uint64_t v17 = v18;
            *(void *)(v17 + 12) = *(void *)(v16 + 12);
          }
          else
          {
            long long v19 = *(_OWORD *)v16;
            *(_DWORD *)(v17 + 16) = *(_DWORD *)(v16 + 16);
            *(_OWORD *)uint64_t v17 = v19;
            *(unsigned char *)(v17 + 20) = 1;
          }
        }
        ++v14;
        uint64_t v11 = *a2;
        v13 += 8;
        v12 += 24;
      }
      while (v14 < (a2[1] - *a2) >> 3);
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102321930);
    }
    uint64_t v20 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v21 = (unint64_t)(a2[1] - *a2) >> 3;
      *(_DWORD *)__n128 buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v21;
      __int16 v103 = 1026;
      int v104 = v94;
      __int16 v105 = 1026;
      int v106 = v91;
      __int16 v107 = 1026;
      int v108 = v89;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#wifitilecentroids, read cache, %{public}d, in_tiles, %{public}d, not_in_tiles, %{public}d, not_found, %{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1) {
        goto LABEL_101;
      }
      goto LABEL_116;
    }
    while (1)
    {
      long long __p = 0;
      __int16 v100 = 0;
      v101[0] = 0;
      char v84 = 0;
      uint64_t v85 = 0;
      char v86 = 0;
      uint64_t v22 = *a2;
      if (a2[1] == *a2) {
        break;
      }
      unint64_t v74 = a3;
      a3 = 0;
      do
      {
        uint64_t v23 = (void *)(v22 + 8 * a3);
        if (&v88 != sub_100529674((uint64_t)&v87, v23))
        {
          uint64_t v24 = v100;
          if ((unint64_t)v100 >= v101[0])
          {
            long long v26 = (char *)__p;
            uint64_t v27 = (v100 - (unsigned char *)__p) >> 3;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v29 = v101[0] - (void)__p;
            if ((uint64_t)(v101[0] - (void)__p) >> 2 > v28) {
              unint64_t v28 = v29 >> 2;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              double v31 = (char *)sub_1000DA54C((uint64_t)v101, v30);
              long long v26 = (char *)__p;
              uint64_t v24 = v100;
            }
            else
            {
              double v31 = 0;
            }
            double v32 = &v31[8 * v27];
            *(void *)double v32 = *v23;
            long long v25 = v32 + 8;
            while (v24 != v26)
            {
              uint64_t v33 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v32 - 1) = v33;
              v32 -= 8;
            }
            long long __p = v32;
            __int16 v100 = v25;
            v101[0] = &v31[8 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(void *)__int16 v100 = *v23;
            long long v25 = v24 + 8;
          }
          __int16 v100 = v25;
          char v34 = v85;
          if (v85 >= v86)
          {
            BOOL v36 = (char *)v84;
            uint64_t v37 = (v85 - (unsigned char *)v84) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v39 = v86 - (unsigned char *)v84;
            if ((v86 - (unsigned char *)v84) >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              double v41 = (char *)sub_10017EA34((uint64_t)&v86, v40);
              BOOL v36 = (char *)v84;
              char v34 = v85;
            }
            else
            {
              double v41 = 0;
            }
            double v42 = &v41[4 * v37];
            *(_DWORD *)double v42 = a3;
            BOOL v35 = v42 + 4;
            while (v34 != v36)
            {
              int v43 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            char v84 = v42;
            uint64_t v85 = v35;
            char v86 = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v85 = a3;
            BOOL v35 = v34 + 4;
          }
          uint64_t v85 = v35;
        }
        ++a3;
        uint64_t v22 = *a2;
      }
      while (a3 < (a2[1] - *a2) >> 3);
      if (__p == v100) {
        break;
      }
      (*(void (**)(void **__return_ptr, double))(*(void *)v74 + 16))(&v82, a5);
      double v44 = (char *)v82;
      if (0xAAAAAAAAAAAAAAABLL * ((v83 - (unsigned char *)v82) >> 3) == (v100 - (unsigned char *)__p) >> 3)
      {
        float v79 = 0;
        long long v80 = 0;
        uint64_t v81 = 0;
        char v77 = 0;
        uint64_t v78 = 0;
        uint64_t v76 = (uint64_t *)&v77;
        if (v83 != v82)
        {
          unint64_t v45 = 0;
          do
          {
            uint64_t v46 = (char *)__p + 8 * v45;
            BOOL v47 = &v44[24 * v45];
            if (v47[20])
            {
              uint64_t v48 = *a4 + 24 * *((int *)v84 + v45);
              if (*(unsigned __int8 *)(v48 + 20) == v47[20])
              {
                uint64_t v49 = *(void *)v47;
                *(_WORD *)(v48 + 8) = *((_WORD *)v47 + 4);
                *(void *)uint64_t v48 = v49;
                *(void *)(v48 + 12) = *(void *)(v47 + 12);
              }
              else if (*(unsigned char *)(v48 + 20))
              {
                *(unsigned char *)(v48 + 20) = 0;
              }
              else
              {
                long long v58 = *(_OWORD *)v47;
                *(_DWORD *)(v48 + 16) = *((_DWORD *)v47 + 4);
                *(_OWORD *)uint64_t v48 = v58;
                *(unsigned char *)(v48 + 20) = 1;
              }
              *(void *)__n128 buf = v46;
              long long v59 = sub_101372990(&v76, v46, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
              uint64_t v60 = *(void *)v47;
              v59[24] = *((_WORD *)v47 + 4);
              *((void *)v59 + 5) = v60;
              *(void *)(v59 + 26) = *(void *)(v47 + 12);
            }
            else
            {
              BOOL v50 = v80;
              if (v80 >= v81)
              {
                double v52 = (char *)v79;
                uint64_t v53 = (v80 - (unsigned char *)v79) >> 3;
                unint64_t v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 61) {
                  sub_1001D7FD4();
                }
                uint64_t v55 = v81 - (unsigned char *)v79;
                if ((v81 - (unsigned char *)v79) >> 2 > v54) {
                  unint64_t v54 = v55 >> 2;
                }
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v56 = v54;
                }
                if (v56)
                {
                  long long v57 = (char *)sub_1000DA54C((uint64_t)&v81, v56);
                  double v52 = (char *)v79;
                  BOOL v50 = v80;
                }
                else
                {
                  long long v57 = 0;
                }
                uint64_t v61 = &v57[8 * v53];
                *(void *)uint64_t v61 = *v46;
                double v51 = v61 + 8;
                while (v50 != v52)
                {
                  uint64_t v62 = *((void *)v50 - 1);
                  v50 -= 8;
                  *((void *)v61 - 1) = v62;
                  v61 -= 8;
                }
                float v79 = v61;
                long long v80 = v51;
                uint64_t v81 = &v57[8 * v56];
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                *(void *)long long v80 = *v46;
                double v51 = v50 + 8;
              }
              long long v80 = v51;
            }
            ++v45;
            double v44 = (char *)v82;
          }
          while (v45 < 0xAAAAAAAAAAAAAAABLL * ((v83 - (unsigned char *)v82) >> 3));
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102321930);
        }
        double v63 = v75;
        uint64_t v64 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__n128 buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = (unint64_t)(v100 - (unsigned char *)__p) >> 3;
          __int16 v103 = 1026;
          int v104 = v78;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "#wifitilecentroids, search tiles, searched, %{public}d, found, %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102321930);
          }
          int v95 = 67240448;
          int v96 = (unint64_t)(v100 - (unsigned char *)__p) >> 3;
          __int16 v97 = 1026;
          int v98 = v78;
          uint64_t v70 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiTileCacheLogic::findCentroids(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, const CLIWifiTileSearchDelegate *) const", "%s\n", v70);
          if (v70 != (char *)buf) {
            free(v70);
          }
          double v63 = v75;
        }
        (*(void (**)(void, void **))(*(void *)*v63 + 24))(*v63, &v79);
        (*(void (**)(void, uint64_t **))(*(void *)*v63 + 32))(*v63, &v76);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102321930);
        }
        uint64_t v65 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          int v66 = (*(uint64_t (**)(void))(*(void *)*v63 + 48))();
          int v67 = (*(uint64_t (**)(void))(*(void *)*v63 + 56))();
          *(_DWORD *)__n128 buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = v66;
          __int16 v103 = 1026;
          int v104 = v67;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "#wifitilecentroids, write to cache, new size, %{public}du / %{public}du", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102321930);
          }
          int v71 = (*(uint64_t (**)(void))(*(void *)*v75 + 48))();
          int v72 = (*(uint64_t (**)(void))(*(void *)*v75 + 56))();
          int v95 = 67240448;
          int v96 = v71;
          __int16 v97 = 1026;
          int v98 = v72;
          unint64_t v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiTileCacheLogic::findCentroids(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, const CLIWifiTileSearchDelegate *) const", "%s\n", v73);
          if (v73 != (char *)buf) {
            free(v73);
          }
        }
        sub_1000F5BB0((uint64_t)&v76, v77);
        if (v79)
        {
          long long v80 = (char *)v79;
          operator delete(v79);
        }
        if (v82)
        {
          uint64_t v83 = v82;
          operator delete(v82);
        }
        break;
      }
      sub_101AB08FC();
      abort_report_np();
      __break(1u);
LABEL_116:
      dispatch_once(&qword_1024193B0, &stru_102321930);
LABEL_101:
      unint64_t v68 = (unint64_t)(a2[1] - *a2) >> 3;
      LODWORD(__p) = 67240960;
      HIDWORD(__p) = v68;
      LOWORD(v100) = 1026;
      *(_DWORD *)((char *)&v100 + 2) = v94;
      HIWORD(v100) = 1026;
      LODWORD(v101[0]) = v91;
      WORD2(v101[0]) = 1026;
      *(_DWORD *)((char *)v101 + 6) = v89;
      char v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiTileCacheLogic::findCentroids(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, const CLIWifiTileSearchDelegate *) const", "%s\n", v69);
      if (v69 != (char *)buf) {
        free(v69);
      }
    }
    if (v84)
    {
      uint64_t v85 = (char *)v84;
      operator delete(v84);
    }
    if (__p)
    {
      __int16 v100 = (char *)__p;
      operator delete(__p);
    }
    sub_1000F5BB0((uint64_t)&v92, v93);
    sub_1000F5BB0((uint64_t)v90, v90[1]);
    sub_1000F5BB0((uint64_t)&v87, v88);
  }
}

void sub_101372614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  sub_1000F5BB0((uint64_t)&a16, a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  sub_1013726E0(&a28);
  double v42 = *(void **)v40;
  if (*(void *)v40)
  {
    *(void *)(v40 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

void **sub_1013726E0(void **a1)
{
  return a1;
}

uint64_t sub_101372728(uint64_t a1)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102321930);
  }
  uint64_t v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#wifitilecentroids, clear cache", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102321930);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTileCacheLogic::clear()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(void))(**(void **)a1 + 40))();
}

void sub_1013728E4(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void *sub_101372914(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000DA584(a1, a2);
    uint64_t v4 = (unsigned char *)a1[1];
    uint64_t v5 = &v4[24 * a2];
    do
    {
      *uint64_t v4 = 0;
      v4[20] = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_101372974(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_101372990(uint64_t **a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (void **)sub_1005295E0((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = **a4;
    v7[24] = 0;
    *((void *)v7 + 4) = v9;
    *((void *)v7 + 5) = 0;
    *((_DWORD *)v7 + 13) = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1000EDF90(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_10137342C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_101373454(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:@"WPPuckCompany"]) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 1uLL;
  }
  id result = [a2 isEqualToString:@"WPPuckBeaconNoRanging"];
  if (result) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 2uLL;
  }
  return result;
}

id sub_1013739B4(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [objc_msgSend(a2, "advertisementData") isEqualToData:*(void *)(a1 + 32)];
  if (a3 && result)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7 == 1)
    {
      if ([a2 major])
      {
        id v8 = [[[a2 major] integerValue];
        if (v8 != [*(id *)(a1 + 40) integerValue]) {
          sub_101AB0C48();
        }
      }
      if ([a2 minor])
      {
        id v9 = [[[a2 minor] integerValue];
        if (v9 != [*(id *)(a1 + 48) integerValue]) {
          sub_101AB0AC4();
        }
      }
      char v10 = -[CLWPZone initWithProximityUUID:major:minor:identifier:]([CLWPZone alloc], "initWithProximityUUID:major:minor:identifier:", [a2 proximityUUID], *(void *)(a1 + 40), *(void *)(a1 + 48), [a2 identifier]);
      uint64_t v7 = *(void *)(a1 + 56);
    }
    else
    {
      char v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, void *, uint64_t, CLWPZone *, void))(a3 + 16);
    return (id)v11(a3, a2, v7, v10, 0);
  }
  return result;
}

id sub_10137405C(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1013740D0;
  _OWORD v5[3] = &unk_1023219C8;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  void v5[4] = a2;
  void v5[5] = v3;
  return [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

id sub_1013740D0(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [objc_msgSend(a2, "advertisementData") isEqualToData:*(void *)(a1 + 32)];
  if (a3 && result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *, void, void, uint64_t))(a3 + 16);
    uint64_t v8 = *(void *)(a1 + 40);
    return (id)v7(a3, a2, 0, 0, v8);
  }
  return result;
}

void sub_1013742A4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

BOOL sub_1013742D4()
{
  uint64_t v1 = qword_102419398;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

id sub_1013742FC(uint64_t a1, void *a2)
{
  return _[a2 onWakeGesture:a1];
}

void sub_10137434C(id a1)
{
  if (sub_10010145C()) {
    byte_102487118 = 1;
  }
}

void sub_101374480()
{
}

void sub_1013747FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nullsub_41(va, a2);
  _Unwind_Resume(a1);
}

void sub_1013748B8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1013748E8(uint64_t a1)
{
  sub_10010F274((uint64_t)v18);
  uint64_t v2 = v19[0];
  *(_DWORD *)((char *)&v19[1] + *(void *)(v19[0] - 24)) |= 4u;
  *(void *)((char *)&v19[2] + *(void *)(v2 - 24)) = 3;
  sub_100132EFC(v19, (uint64_t)"time,", 5);
  uint64_t v3 = (void *)std::ostream::operator<<();
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 16) = 0;
  sub_100132EFC(v3, (uint64_t)",type,", 6);
  uint64_t v4 = (void *)std::ostream::operator<<();
  *(void *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 0;
  sub_100132EFC(v4, (uint64_t)",stepType,", 10);
  uint64_t v5 = (void *)std::ostream::operator<<();
  *(void *)((char *)v5 + *(void *)(*v5 - 24) + 16) = 0;
  sub_100132EFC(v5, (uint64_t)",count,", 7);
  std::ostream::operator<<();
  uint64_t v6 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v6 != i; v6 += 40)
  {
    *(void *)((char *)&v19[2] + *(void *)(v19[0] - 24)) = 0;
    sub_100132EFC(v19, (uint64_t)",id,", 4);
    uint64_t v8 = (void *)std::ostream::operator<<();
    *(void *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 7;
    sub_100132EFC(v8, (uint64_t)",startLL,", 9);
    id v9 = (void *)std::ostream::operator<<();
    sub_100132EFC(v9, (uint64_t)",", 1);
    char v10 = (void *)std::ostream::operator<<();
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 16) = 7;
    sub_100132EFC(v10, (uint64_t)",endLL,", 7);
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_100132EFC(v11, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102321A70);
  }
  uint64_t v12 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    uint64_t v13 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__n128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM,RouteHints,%s", buf, 0xCu);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102321A70);
    }
    std::stringbuf::str();
    if (v22 >= 0) {
      uint64_t v16 = buf;
    }
    else {
      uint64_t v16 = *(unsigned char **)buf;
    }
    int v23 = 136315138;
    uint64_t v24 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapsRouteHintData::debugOutput() const", "%s\n", v17);
    if (v17 != (char *)__p) {
      free(v17);
    }
  }
  *(void *)((char *)v18
  v19[0] = v14;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101374E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101374E9C(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = -1;
  while (1)
  {
    uint64_t v4 = a1[1];
    int v5 = -1 - 858993459 * ((unint64_t)(a1[2] - v4) >> 3);
    if (++v3 >= v5) {
      break;
    }
    uint64_t v6 = (double *)(v4 + v2);
    BOOL v7 = sub_1004BABDC(*(double *)(v4 + v2 + 24), *(double *)(v4 + v2 + 32), *(double *)(v4 + v2 + 48), *(double *)(v4 + v2 + 56), 0.0000001)|| sub_1004BABDC(v6[3], v6[4], v6[8], v6[9], 0.0000001);
    BOOL v8 = sub_1004BABDC(v6[1], v6[2], v6[6], v6[7], 0.0000001)
      || sub_1004BABDC(v6[1], v6[2], *(double *)(v4 + v2 + 64), *(double *)(v4 + v2 + 72), 0.0000001);
    v2 += 40;
    if (!v7 && !v8)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102321A70);
      }
      id v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = a1[4];
        *(_DWORD *)__n128 buf = 134217984;
        uint64_t v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102321A70);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::isConnectivityGood() const", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      return v3 >= v5;
    }
  }
  return v3 >= v5;
}

uint64_t sub_10137511C(void *a1)
{
  long long __p = 0;
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if ((int)(-858993459 * ((unint64_t)(v1 - v2) >> 3)) < 2)
  {
    BOOL v50 = 0;
LABEL_45:
    BOOL v51 = v2 == v1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)uint64_t v62 = a1 + 1;
    while (1)
    {
      uint64_t v6 = (long long *)(v2 + 40 * v5);
      if (__p == v4)
      {
        if ((unint64_t)v4 >= v65)
        {
          unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(v65 - (void)v4) >> 3);
          if (v10 <= 1) {
            unint64_t v10 = 1;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (void)v4) >> 3) >= 0x333333333333333) {
            unint64_t v11 = 0x666666666666666;
          }
          else {
            unint64_t v11 = v10;
          }
          uint64_t v13 = sub_1002E5328((uint64_t)&v65, v11);
          uint64_t v14 = (char *)__p;
          uint64_t v15 = v64;
          long long v16 = *v6;
          long long v17 = v6[1];
          v13[4] = *((void *)v6 + 4);
          *(_OWORD *)uint64_t v13 = v16;
          *((_OWORD *)v13 + 1) = v17;
          if (v15 == v14)
          {
            unint64_t v21 = v13;
          }
          else
          {
            uint64_t v18 = v13;
            do
            {
              long long v19 = *(_OWORD *)(v15 - 40);
              long long v20 = *(_OWORD *)(v15 - 24);
              unint64_t v21 = v18 - 5;
              *(v18 - 1) = *((void *)v15 - 1);
              *(_OWORD *)(v18 - 3) = v20;
              *(_OWORD *)(v18 - 5) = v19;
              v15 -= 40;
              v18 -= 5;
            }
            while (v15 != v14);
          }
          id v9 = (char *)(v13 + 5);
          long long __p = v21;
          uint64_t v64 = (char *)(v13 + 5);
          unint64_t v65 = (unint64_t)&v13[5 * v12];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          long long v7 = *v6;
          long long v8 = v6[1];
          void v4[4] = *((void *)v6 + 4);
          *(_OWORD *)uint64_t v4 = v7;
          *((_OWORD *)v4 + 1) = v8;
          id v9 = (char *)(v4 + 5);
        }
        uint64_t v64 = v9;
      }
      uint64_t v22 = v5 + 1;
      uint64_t v23 = v2 + 40 * v5;
      double v25 = *(double *)(v23 + 24);
      uint64_t v24 = (double *)(v23 + 24);
      double v26 = v25;
      uint64_t v27 = v2 + 40 * (v5 + 1);
      double v29 = *(double *)(v27 + 8);
      unint64_t v28 = (double *)(v27 + 8);
      BOOL v30 = sub_1004BABDC(v26, v24[1], v29, v28[1], 0.0000001)
         || sub_1004BABDC(*v24, v24[1], *(double *)(v2 + 40 * v22 + 24), *(double *)(v2 + 40 * v22 + 32), 0.0000001);
      uint64_t v31 = v2 + 40 * v5;
      double v33 = *(double *)(v31 + 8);
      double v32 = (double *)(v31 + 8);
      if (!sub_1004BABDC(v33, v32[1], *v28, v28[1], 0.0000001)
        && ((v30 | sub_1004BABDC(*v32, v32[1], *(double *)(v2 + 40 * v22 + 24), *(double *)(v2 + 40 * v22 + 32), 0.0000001)) & 1) == 0)
      {
        break;
      }
      char v34 = (long long *)((char *)v6 + 40);
      BOOL v35 = v64;
      if ((unint64_t)v64 >= v65)
      {
        unint64_t v38 = __p;
        unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - (unsigned char *)__p) >> 3);
        unint64_t v40 = v39 + 1;
        if (v39 + 1 > 0x666666666666666) {
          sub_1001D7FD4();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (void)__p) >> 3) > v40) {
          unint64_t v40 = 0x999999999999999ALL * ((uint64_t)(v65 - (void)__p) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (void)__p) >> 3) >= 0x333333333333333) {
          unint64_t v41 = 0x666666666666666;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41)
        {
          double v42 = (char *)sub_1002E5328((uint64_t)&v65, v41);
          unint64_t v38 = __p;
          BOOL v35 = v64;
        }
        else
        {
          double v42 = 0;
        }
        int v43 = &v42[8 * ((v64 - (unsigned char *)__p) >> 3)];
        long long v44 = *v34;
        long long v45 = *(long long *)((char *)v6 + 56);
        *((void *)v43 + 4) = *((void *)v6 + 9);
        *(_OWORD *)int v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        if (v35 == v38)
        {
          uint64_t v49 = &v42[40 * v39];
        }
        else
        {
          uint64_t v46 = &v42[40 * v39];
          do
          {
            long long v47 = *(_OWORD *)((char *)v35 - 40);
            long long v48 = *(_OWORD *)((char *)v35 - 24);
            uint64_t v49 = v46 - 40;
            *((void *)v46 - 1) = *((void *)v35 - 1);
            *(_OWORD *)(v46 - 24) = v48;
            *(_OWORD *)(v46 - 40) = v47;
            BOOL v35 = (_OWORD *)((char *)v35 - 40);
            v46 -= 40;
          }
          while (v35 != v38);
        }
        uint64_t v4 = v43 + 40;
        long long __p = v49;
        uint64_t v64 = v43 + 40;
        unint64_t v65 = (unint64_t)&v42[40 * v41];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        long long v36 = *v34;
        long long v37 = *(long long *)((char *)v6 + 56);
        *((void *)v64 + 4) = *((void *)v6 + 9);
        *BOOL v35 = v36;
        v35[1] = v37;
        uint64_t v4 = (void *)v35 + 5;
      }
      uint64_t v64 = (char *)v4;
      uint64_t v2 = a1[1];
      uint64_t v1 = a1[2];
      uint64_t v5 = v22;
      if (v22 >= (int)(-1 - 858993459 * ((unint64_t)(v1 - v2) >> 3)))
      {
        BOOL v50 = (char *)__p;
        goto LABEL_45;
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102321A70);
    }
    unint64_t v54 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v55 = a1[4];
      unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      *(_DWORD *)__n128 buf = 134218496;
      uint64_t v73 = v55;
      __int16 v74 = 2048;
      unint64_t v75 = v56;
      __int16 v76 = 2048;
      unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - (unsigned char *)__p) >> 3);
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections,changing segments from %lu,to,%lu", buf, 0x20u);
    }
    BOOL v57 = sub_10013D1A0(115, 2);
    long long v58 = *(char **)v62;
    if (v57)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102321A70);
      }
      uint64_t v59 = a1[4];
      unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      int v66 = 134218496;
      uint64_t v67 = v59;
      __int16 v68 = 2048;
      unint64_t v69 = v60;
      __int16 v70 = 2048;
      unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - (unsigned char *)__p) >> 3);
      uint64_t v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::getConnectedRouteSegments() const", "%s\n", v61);
      if (v61 != (char *)buf) {
        free(v61);
      }
      long long v58 = *(char **)v62;
    }
    if (v58 != (char *)&__p) {
      sub_1008A9A00(v58, (char *)__p, (uint64_t)v64, 0xCCCCCCCCCCCCCCCDLL * ((v64 - (unsigned char *)__p) >> 3));
    }
    BOOL v50 = (char *)__p;
    BOOL v51 = v64 == __p;
  }
  uint64_t v52 = !v51;
  if (v50)
  {
    uint64_t v64 = v50;
    operator delete(v50);
  }
  return v52;
}

void sub_1013756D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101375700(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

double sub_101375730(uint64_t a1, double a2)
{
  *(double *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  return result;
}

void sub_10137574C(uint64_t a1)
{
}

void sub_101375754(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
  long long v7 = (void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(double *)a1 > 0.0)
  {
    sub_101375A6C(a1, a3);
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v9 != v10)
    {
      uint64_t v11 = 0;
      while (1)
      {
        if (vabdd_f64(a3, *(double *)(v9 + 56)) <= *(double *)a1)
        {
          *(void *)__n128 buf = *(void *)v9;
          uint64_t v12 = (double *)sub_10058A478(v7, buf);
          if (!v12) {
            goto LABEL_8;
          }
          if (*(double *)(v9 + 56) >= v12[10]) {
            break;
          }
        }
LABEL_9:
        v9 += 88;
        if (v9 == v10) {
          goto LABEL_16;
        }
      }
      sub_101375F48(v7, (uint64_t *)v12);
LABEL_8:
      *(void *)__n128 buf = *(void *)v9;
      sub_100FED428((uint64_t)v7, buf, buf, v9);
      ++v11;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  sub_100FED85C(a1 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(uint64_t **)(a2 + 16);
  if ((uint64_t *)v13 == v14)
  {
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  uint64_t v15 = (uint64_t *)v13;
  do
  {
    uint64_t v16 = *v15;
    v15 += 11;
    *(void *)__n128 buf = v16;
    sub_100FED428((uint64_t)v7, buf, buf, v13);
    ++v11;
    uint64_t v13 = (uint64_t)v15;
  }
  while (v15 != v14);
LABEL_16:
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102321A90);
  }
  long long v17 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    *(_DWORD *)__n128 buf = 134349824;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v21 = 2050;
    uint64_t v22 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 3);
    __int16 v23 = 2050;
    uint64_t v24 = v11;
    __int16 v25 = 2050;
    uint64_t v26 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Adding scanned,pre,%{public}zu,input,%{public}zu,updated,%{public}zu,result,%{public}zu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102321A90);
    }
    long long v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanAggregator::addScanResult(const CFAbsoluteTime, const CLWifiService_Type::ScanResult &)", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
}

void sub_101375A6C(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  for (i = *(void *)(a1 + 32); v3; uint64_t v3 = *(void *)v3)
  {
    while (vabdd_f64(a2, *(double *)(v3 + 80)) > *(double *)a1)
    {
      uint64_t v3 = sub_101375F48((void *)(a1 + 8), (uint64_t *)v3);
      if (!v3) {
        goto LABEL_6;
      }
    }
  }
LABEL_6:
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102321A90);
  }
  uint64_t v6 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)__n128 buf = 134349312;
    uint64_t v10 = i;
    __int16 v11 = 2050;
    uint64_t v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Scrubbing done,pre,%{public}zu,post,%{public}zu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102321A90);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanAggregator::pruneAggregatedResults(const CFAbsoluteTime)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_101375C80(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  if (*(double *)a1 > 0.0) {
    sub_101375A6C(a1, a3);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v8 = *(double **)(a1 + 24);
  if (v8)
  {
    unint64_t v9 = 0;
    do
    {
      double v10 = vabdd_f64(a3, v8[10]);
      if (a4 <= 0.0 || v10 <= a4)
      {
        uint64_t v12 = (uint64_t)(v8 + 3);
        if (v9 >= a2[2])
        {
          unint64_t v9 = sub_1001F8D14(a2, v12);
        }
        else
        {
          sub_1001F8C88((uint64_t)a2, v12);
          v9 += 88;
        }
        a2[1] = v9;
      }
      uint64_t v8 = *(double **)v8;
    }
    while (v8);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102321A90);
  }
  uint64_t v13 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)__n128 buf = 134349056;
    uint64_t v17 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Returning %{public}zu APs", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102321A90);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLWifiService_Type::AccessPoint> CLWifiScanAggregator::getScannedAccessPoints(const CFAbsoluteTime, const CFTimeInterval)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_101375EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

void sub_101375F18(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_101375F48(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  long long __p = 0;
  if (v3) {
    sub_1001F7F34((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_101376044(id a1)
{
  qword_102487560 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLGpsAssistantSilo"];
}

uint64_t sub_101376104(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1013770FC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102487570 != -1) {
    dispatch_once(&qword_102487570, block);
  }
  return qword_10248D2A8;
}

void sub_101376360(unsigned __int8 *a1, double *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 44);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 == v4)
  {
    double v17 = 0.0;
    double v18 = 0.0;
    double v16 = *(double *)(a3 + 24) + *(double *)(a3 + 8 * v5 + 48);
    int v9 = a1[352];
    a1[352] = sub_10153C8B8((uint64_t)(a1 + 112), a2, &v16, &v18, &v17);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102321C58);
    }
    double v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = a1[352];
      double v12 = *a2;
      *(_DWORD *)__n128 buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(double *)&buf[10] = v17;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(double *)&buf[20] = v18;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(double *)&buf[30] = v12;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&unsigned char buf[40] = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "STARK,SpeedTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102321C58);
      }
      int v13 = a1[352];
      double v14 = *a2;
      v19[0] = 67110144;
      v19[1] = v13;
      __int16 v20 = 2048;
      double v21 = v17;
      __int16 v22 = 2048;
      double v23 = v18;
      __int16 v24 = 2048;
      double v25 = v14;
      __int16 v26 = 2048;
      double v27 = v16;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsAssistant::setVehicleSpeedAssistance(const double &, const CLNmeaSCD &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    if (a1[352])
    {
      if (v17 < 0.08)
      {
        *(_DWORD *)__n128 buf = 2;
        if (sub_1001072EC((uint64_t)a1, (int *)buf, 1))
        {
          memcpy(buf, (const void *)a3, 0x350uLL);
          if (v9 != a1[352]) {
            *(_DWORD *)&unsigned char buf[40] = 1;
          }
          *(double *)&unsigned char buf[24] = v18 + *(double *)&buf[24];
          v19[0] = 2;
          (*(void (**)(unsigned __int8 *, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v19, buf, 1, 0xFFFFFFFFLL, 0);
        }
      }
    }
  }
}

void sub_1013766B0(uint64_t a1, double *a2, double *a3)
{
  int v3 = *((_DWORD *)a3 + 2);
  BOOL v4 = __OFSUB__(v3, 1);
  uint64_t v5 = (v3 - 1);
  if ((int)v5 < 0 == v4)
  {
    double v16 = 0.0;
    double v17 = 0.0;
    double v15 = *a3 + a3[4 * v5 + 3];
    int v9 = sub_10153C8B8(a1 + 360, a2, &v15, &v17, &v16);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102321C58);
    }
    double v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v11 = *a2;
      *(_DWORD *)__n128 buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(double *)&buf[10] = v16;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(double *)&buf[20] = v17;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(double *)&buf[30] = v11;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&unsigned char buf[40] = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "STARK,GyroTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102321C58);
      }
      double v13 = *a2;
      v18[0] = 67110144;
      v18[1] = v9;
      __int16 v19 = 2048;
      double v20 = v16;
      __int16 v21 = 2048;
      double v22 = v17;
      __int16 v23 = 2048;
      double v24 = v13;
      __int16 v25 = 2048;
      double v26 = v15;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsAssistant::setVehicleGyroAssistance(const double &, const CLNmeaGCD &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (v16 < 0.08) {
      int v12 = v9;
    }
    else {
      int v12 = 0;
    }
    if (v12 == 1)
    {
      *(_DWORD *)__n128 buf = 3;
      if (sub_1001072EC(a1, (int *)buf, 1))
      {
        memcpy(buf, a3, 0x658uLL);
        *(double *)__n128 buf = v17 + *(double *)buf;
        v18[0] = 3;
        (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v18, buf, 1, 0xFFFFFFFFLL, 0);
      }
    }
  }
}

uint64_t sub_1013769D8(uint64_t a1, uint64_t a2)
{
  LODWORD(v9[0]) = 0;
  uint64_t result = sub_1001072EC(a1, (int *)v9, 1);
  if (result)
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    v9[4] = *(_OWORD *)(a2 + 64);
    v9[5] = v5;
    uint64_t v10 = *(void *)(a2 + 96);
    long long v6 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    v9[2] = *(_OWORD *)(a2 + 32);
    void v9[3] = v7;
    int v8 = 0;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v8, v9, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101376AB8(uint64_t a1, _OWORD *a2)
{
  LODWORD(v7[0]) = 1;
  uint64_t result = sub_1001072EC(a1, (int *)v7, 1);
  if (result)
  {
    long long v5 = a2[1];
    v7[0] = *a2;
    v7[1] = v5;
    _OWORD v7[2] = a2[2];
    int v6 = 1;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101376B8C(uint64_t a1, _OWORD *a2)
{
  LODWORD(v7[0]) = 4;
  uint64_t result = sub_1001072EC(a1, (int *)v7, 1);
  if (result)
  {
    long long v5 = a2[1];
    v7[0] = *a2;
    v7[1] = v5;
    _OWORD v7[2] = a2[2];
    int v6 = 4;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101376C60(uint64_t a1, uint64_t a2)
{
  LODWORD(v9[0]) = 5;
  uint64_t result = sub_1001072EC(a1, (int *)v9, 1);
  if (result)
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    v9[4] = *(_OWORD *)(a2 + 64);
    v9[5] = v5;
    _OWORD v9[6] = *(_OWORD *)(a2 + 96);
    uint64_t v10 = *(void *)(a2 + 112);
    long long v6 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    v9[2] = *(_OWORD *)(a2 + 32);
    void v9[3] = v7;
    int v8 = 5;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v8, v9, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_101376D14(uint64_t a1, void *a2)
{
  int v3 = (void *)sub_101376DFC(a1, "CLGpsAssistant", a2);
  void *v3 = off_102321AE0;
  uint64_t v5 = 0x4000000000000000;
  uint64_t v6 = 20;
  sub_10153C784((uint64_t)(v3 + 14), &qword_101DB4868, (int *)&v6, 1, (double *)&v5);
  *(unsigned char *)(a1 + 352) = 0;
  uint64_t v5 = 0x4000000000000000;
  uint64_t v6 = 20;
  sub_10153C784(a1 + 360, &qword_101DB4870, (int *)&v6, 1, (double *)&v5);
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = a1 + 608;
  return a1;
}

void sub_101376DD8(_Unwind_Exception *a1)
{
  sub_101376EA8(v2);
  sub_101376F28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101376DFC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102321C88;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101376E8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101376EA8(uint64_t a1)
{
  *(void *)(a1 + 144) = off_1022B2000;
  sub_1000F5BB0(a1 + 208, *(void **)(a1 + 216));
  sub_10041F48C((void *)(a1 + 160));
  *(void *)(a1 + 56) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 88));
  return a1;
}

uint64_t sub_101376F28(uint64_t a1)
{
  *(void *)a1 = off_102321C88;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101376FAC(uint64_t a1)
{
  *(void *)a1 = off_102321AE0;
  sub_1000F5BB0(a1 + 600, *(void **)(a1 + 608));
  *(void *)(a1 + 504) = off_1022B2000;
  sub_1000F5BB0(a1 + 568, *(void **)(a1 + 576));
  sub_10041F48C((void *)(a1 + 520));
  *(void *)(a1 + 416) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 448));
  *(void *)(a1 + 256) = off_1022B2000;
  sub_1000F5BB0(a1 + 320, *(void **)(a1 + 328));
  sub_10041F48C((void *)(a1 + 272));
  *(void *)(a1 + 168) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 200));

  return sub_101376F28(a1);
}

void sub_1013770C4(uint64_t a1)
{
  sub_101376FAC(a1);

  operator delete();
}

void sub_1013770FC()
{
}

void sub_101377148()
{
}

void *sub_10137716C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1013771E8(uint64_t a1)
{
  return 1;
}

id sub_101377204(uint64_t a1)
{
  id v2 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLLocationController"];
  int v4 = 0;
  [v2 setGpsAssistantHasClients:sub_1001072EC(a1, &v4, 1) != 0 forNotification:0];
  int v4 = 1;
  [v2 setGpsAssistantHasClients:sub_1001072EC(a1, &v4, 1) != 0 forNotification:1];
  int v4 = 5;
  [v2 setGpsAssistantHasClients:sub_1001072EC(a1, &v4, 1) != 0 forNotification:5];
  int v4 = 4;
  return [v2 setGpsAssistantHasClients:sub_1001072EC(a1, &v4, 1) != 0 forNotification:4];
}

uint64_t sub_1013772F8(uint64_t a1)
{
  return 1;
}

void sub_101377314()
{
}

void sub_1013773D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10137740C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102321DD8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1013774F0(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)__n128 buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102321C38);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v11 = (void *)*v11;
        }
        *(_DWORD *)__n128 buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102321C38);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        double v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::removeClient(int) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101377780(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101377834(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10137787C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1013778C4(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10137790C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477A90);
}

uint64_t sub_101377938(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)double v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)__n128 buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        bzero(buf, 0x658uLL);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10137A22C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102477A91;
        int v39 = v17;
        *(void *)__n128 buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)__n128 buf = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)__n128 buf = &v39;
        char v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)__n128 buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)__n128 buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102321C38);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)__n128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102321C38);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)double v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    unint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_101377DE4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102321C38);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)__n128 buf = 136446466;
      double v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102321C38);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101378068(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102321C38);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)__n128 buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102321C38);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                unint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10137843C(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  memcpy(__dst, v11, 0x658uLL);
  return 1;
}

uint64_t sub_1013784B0(uint64_t a1, int *a2, const void *a3)
{
  int v6 = (uint64_t *)operator new(0x670uLL);
  v6[1] = 0;
  void v6[2] = 0;
  uint64_t *v6 = (uint64_t)off_102321D68;
  memcpy(v6 + 3, a3, 0x658uLL);
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_101378574(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101378588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  bzero(v9, 0x658uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v9, a3, a4, 0);
}

void sub_101378614(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102321C38);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)__n128 buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    double v29 = v30;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x670uLL);
    v18[1] = 0;
    _DWORD v18[2] = 0;
    *BOOL v18 = (uint64_t)off_102321D68;
    memcpy(v18 + 3, a3, 0x658uLL);
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1013792E4();
  }
  os_activity_scope_leave(&state);
}

void sub_101378C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101378C4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102321C38);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)__n128 buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102321C38);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102321C38);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)__n128 buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102321C38);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102321C38);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)__n128 buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102321C38);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1013791FC(uint64_t a1)
{
  sub_10137A1BC(a1);

  operator delete();
}

id sub_101379234(uint64_t a1, int a2, void *a3)
{
  id result = sub_10137991C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_101379284(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1013792B4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1013792E4()
{
}

void sub_101379398(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_10137991C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_101379788(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102321C38);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)__n128 buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102321C38);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                BOOL v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101379788(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10137991C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_101379880(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102321D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013798A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102321D68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013798FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_10137991C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1013799B8(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_101379D44(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1013799B8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_10137A104((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102321DA8);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DB49AALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102321DA8);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DB49AALL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102321DA8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DB49AALL & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGpsAssistant_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_101379D44(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102321DA8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB49AALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGpsAssistant_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102321DA8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__n128 buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB49AALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102321DA8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_10137A104(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394700))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1624) {
      sub_101AB0F60();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_10137A18C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10137A1BC(uint64_t a1)
{
  *(void *)a1 = &off_102321DD8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10137A22C()
{
}

uint64_t sub_10137A2E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_10137A300()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DB4830;
      v0[3] = unk_101DB4840;
      v0[4] = xmmword_101DB4850;
      v0[0] = xmmword_101DB4810;
      v0[1] = unk_101DB4820;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10137A3E0(_Unwind_Exception *a1)
{
}

uint64_t sub_10137A3F8()
{
  sub_100134750(qword_102487128, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487128, (void *)&_mh_execute_header);
  sub_100134750(qword_102487140, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487140, (void *)&_mh_execute_header);
  sub_100134750(qword_102487158, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487158, (void *)&_mh_execute_header);
  sub_100134750(qword_102487170, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487170, (void *)&_mh_execute_header);
  sub_100134750(qword_102487188, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487188, (void *)&_mh_execute_header);
  sub_100134750(qword_1024871A0, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024871A0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024871B8, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024871B8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024871D0, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024871D0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024871E8, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024871E8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487200, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487200, (void *)&_mh_execute_header);
  sub_100134750(qword_102487218, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487218, (void *)&_mh_execute_header);
  sub_100134750(qword_102487230, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487230, (void *)&_mh_execute_header);
  sub_100134750(qword_102487248, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487248, (void *)&_mh_execute_header);
  sub_100134750(qword_102487260, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487260, (void *)&_mh_execute_header);
  sub_100134750(qword_102487278, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487278, (void *)&_mh_execute_header);
  sub_100134750(qword_102487290, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487290, (void *)&_mh_execute_header);
  sub_100134750(qword_1024872A8, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024872A8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024872C0, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024872C0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024872D8, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024872D8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024872F0, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024872F0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487308, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487308, (void *)&_mh_execute_header);
  sub_100134750(qword_102487320, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487320, (void *)&_mh_execute_header);
  sub_100134750(qword_102487338, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487338, (void *)&_mh_execute_header);
  sub_100134750(qword_102487350, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487350, (void *)&_mh_execute_header);
  sub_100134750(qword_102487368, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487368, (void *)&_mh_execute_header);
  sub_100134750(qword_102487380, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487380, (void *)&_mh_execute_header);
  sub_100134750(qword_102487398, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487398, (void *)&_mh_execute_header);
  sub_100134750(qword_1024873B0, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024873B0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024873C8, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024873C8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024873E0, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024873E0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024873F8, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024873F8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487410, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487410, (void *)&_mh_execute_header);
  sub_100134750(qword_102487428, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487428, (void *)&_mh_execute_header);
  sub_100134750(qword_102487440, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487440, (void *)&_mh_execute_header);
  sub_100134750(qword_102487458, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487458, (void *)&_mh_execute_header);
  sub_100134750(qword_102487470, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487470, (void *)&_mh_execute_header);
  sub_100134750(qword_102487488, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487488, (void *)&_mh_execute_header);
  sub_100134750(qword_1024874A0, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024874A0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024874B8, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024874B8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024874D0, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024874D0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024874E8, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024874E8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487500, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487500, (void *)&_mh_execute_header);
  sub_100134750(qword_102487518, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487518, (void *)&_mh_execute_header);
  sub_100134750(qword_102487530, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487530, (void *)&_mh_execute_header);
  sub_100134750(qword_102487548, "NumDaysLookbackForWorkouts");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487548, (void *)&_mh_execute_header);
}

BOOL sub_10137AE08()
{
  BOOL result = sub_100C60EC0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_10137AE54()
{
}

uint64_t sub_10137AE78()
{
  if (qword_102487578 != -1) {
    dispatch_once(&qword_102487578, &stru_102321DF0);
  }
  return qword_10248D2B0;
}

uint64_t sub_10137AEC0(uint64_t a1)
{
  sub_100513074(a1, "CLActivityAlarmConcentrator", 1, 1);
  for (uint64_t i = 0; i != 672; i += 24)
  {
    uint64_t v3 = a1 + i;
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(a1 + i + 16) = a1 + i + 24;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10137AF78;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_async(global_queue, block);
  return a1;
}

uint64_t sub_10137AF78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1000D2E34(0);
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472;
  int v6 = sub_10137B018;
  char v7 = &unk_102321E10;
  uint64_t v8 = v1;
  return (*(uint64_t (**)(void))(*(void *)(v2 + 40) + 16))();
}

double sub_10137B018(uint64_t a1, unsigned int a2, int a3, double a4)
{
  return sub_10137B020(*(void *)(a1 + 32), a2, a3, a4);
}

double sub_10137B020(uint64_t a1, unsigned int a2, int a3, double a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (a2 < 0x1C)
  {
    uint64_t v11 = a1 + 24 * a2;
    uint64_t v14 = *(void **)(v11 + 16);
    uint64_t v12 = v11 + 16;
    unint64_t v13 = v14;
    if (v14 != (void *)(v12 + 8))
    {
      if (a3) {
        id v15 = @"Wake";
      }
      else {
        id v15 = @"Fire";
      }
      do
      {
        [(id)v13[4] duration];
        if (v16 > a4) {
          break;
        }
        [(id)v13[4] setActivityDuration:a4];
        sub_10137B4D4((uint64_t)[(id)v13[4] fire], (void *)v13[4], v15);
        uint64_t v17 = (void *)v13[1];
        __int16 v18 = v13;
        if (v17)
        {
          do
          {
            unint64_t v19 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            unint64_t v19 = (void *)v18[2];
            BOOL v20 = *v19 == (void)v18;
            __int16 v18 = v19;
          }
          while (!v20);
        }

        sub_1000F0A30((uint64_t **)v12, v13);
        operator delete(v13);
        unint64_t v13 = v19;
      }
      while (v19 != (void *)(v12 + 8));
    }
    if (*(void *)(v12 + 16))
    {
      [*(id *)(*(void *)v12 + 32) duration];
      double v9 = v21;
    }
    else
    {
      double v9 = -1.0;
    }
  }
  else
  {
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_102321E30);
    }
    uint64_t v8 = qword_102419028;
    if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 67109120;
      unsigned int v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Invalid trigger.trigger,%u", buf, 8u);
    }
    double v9 = -1.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321E30);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSTimeInterval CLActivityAlarmConcentrator::alarmHandler(CMActivityAlarmTrigger, NSTimeInterval, BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v9;
}

void sub_10137B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10137B35C(char *result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    v13[1] = result;
    (*(void (**)(char *))(*(void *)result + 16))(result);
    __int16 v14 = 256;
    uint64_t v4 = (uint64_t)[a2 trigger];
    id v5 = (id)v4;
    int v6 = &v3[24 * v4];
    char v7 = (uint64_t **)(v6 + 16);
    if (*((void *)v6 + 4))
    {
      [a2 duration];
      double v9 = v8;
      uint64_t v4 = (uint64_t)[(id)(*v7)[4] duration];
      BOOL v11 = v9 < v10;
    }
    else
    {
      BOOL v11 = 1;
    }
    sub_10137B4D4(v4, a2, @"Add");
    v13[0] = a2;
    sub_10137BDDC(v7, v13, (uint64_t *)v13);
    if (v11)
    {
      uint64_t v12 = sub_1000D2E34(0);
      [a2 duration];
      (*(void (**)(uint64_t, id))(*(void *)(v12 + 40) + 24))(v12 + 40, v5);
    }
    return (char *)(*(uint64_t (**)(char *))(*(void *)v3 + 24))(v3);
  }
  return result;
}

void sub_10137B4B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10137B4D4(uint64_t a1, void *a2, void *a3)
{
  if (qword_102419020 != -1) {
    dispatch_once(&qword_102419020, &stru_102321E30);
  }
  id v5 = qword_102419028;
  if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [[[a2 bundleId] UTF8String];
    id v7 = [[objc_msgSend(a2, "executable") UTF8String];
    uint64_t v8 = [a2 trigger];
    [a2 duration];
    int v10 = (int)v9;
    id v11 = [a3 UTF8String];
    [a2 activityDuration];
    uint64_t buf = 68290563;
    __int16 v25 = 2082;
    int v26 = "";
    __int16 v27 = 2081;
    id v28 = v6;
    __int16 v29 = 2081;
    id v30 = v7;
    __int16 v31 = 2049;
    uint64_t v32 = v8;
    __int16 v33 = 1025;
    int v34 = v10;
    __int16 v35 = 2081;
    id v36 = v11;
    __int16 v37 = 1025;
    int v38 = (int)v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ActivityAlarm\", \"BundleID\":%{private, location:escape_only}s, \"Executable\":%{private, location:escape_only}s, \"AlarmTrigger\":%{private}lu, \"AlarmDuration\":%{private}d, \"Action\":%{private, location:escape_only}s, \"ActivityDuration\":%{private}d}", (uint8_t *)&buf, 0x46u);
  }
  uint64_t result = sub_1000FC450();
  if (result)
  {
    uint64_t v14 = sub_1000E9354(&buf);
    sub_1000EA8A4(v14, "Action", (uint64_t)a3);
    id v15 = sub_10137BCBC(a2);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v16 = [(NSDictionary *)v15 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v20 != v17) {
            objc_enumerationMutation(v15);
          }
          [(NSDictionary *)v15 objectForKey:*(void *)(*((void *)&v19 + 1) + 8 * i)];
          sub_1004D258C((uint64_t)&buf);
        }
        id v16 = [(NSDictionary *)v15 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v16);
    }
    sub_1000FC45C((uint64_t)&buf, (uint64_t)"MotionActivityAlarm");
    return sub_10013F3C4(&buf);
  }
  return result;
}

void sub_10137B73C(_Unwind_Exception *a1)
{
  sub_10013F3C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_10137B768(uint64_t result, void *a2)
{
  unint64_t v13 = a2;
  if (a2)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 16))(result);
    id v4 = [a2 trigger];
    id v5 = (uint64_t **)(v3 + 24 * v4 + 16);
    id v6 = sub_10137BF64((uint64_t)v5, &v13);
    id v7 = v6;
    if ((uint64_t *)(v3 + 24 * v4 + 24) == v6)
    {
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321E30);
      }
      int v10 = qword_102419028;
      if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Removing an alarm which has not been added.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419020 != -1) {
          dispatch_once(&qword_102419020, &stru_102321E30);
        }
        id v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAlarmConcentrator::removeAlarm(CMActivityAlarmLocal *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    else
    {
      uint64_t v8 = *v5;
      sub_10137B4D4((uint64_t)v6, (void *)v6[4], @"Remove");

      sub_1000F0A30(v5, v7);
      operator delete(v7);
      if (*(void *)(v3 + 24 * v4 + 32))
      {
        if (v8 == v7)
        {
          uint64_t v9 = sub_1000D2E34(0);
          [(id)(*v5)[4] duration];
          (*(void (**)(uint64_t, id))(*(void *)(v9 + 40) + 24))(v9 + 40, v4);
        }
      }
      else
      {
        uint64_t v12 = sub_1000D2E34(0);
        (*(void (**)(void))(*(void *)(v12 + 40) + 32))();
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  return result;
}

void sub_10137BA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10137BA80(void *a1)
{
  (*(void (**)(void *))(*a1 + 16))(a1);
  uint64_t v2 = 0;
  uint64_t v3 = sub_1000D2E34(0) + 40;
  id v4 = a1 + 4;
  do
  {
    if (*v4)
    {
      [*(id *)(*(v4 - 2) + 32) duration];
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v2);
    }
    ++v2;
    v4 += 3;
  }
  while (v2 != 28);
  return (*(uint64_t (**)(void *))(*a1 + 24))(a1);
}

void sub_10137BB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10137BB88(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  id v2 = objc_alloc_init((Class)NSMutableArray);
  for (uint64_t i = 0; i != 28; ++i)
  {
    uint64_t v4 = a1 + 24 * i;
    id v5 = *(void **)(v4 + 16);
    id v6 = (void *)(v4 + 24);
    if (v5 != (void *)(v4 + 24))
    {
      do
      {
        [v2 addObject:sub_10137BCBC((void *)v5[4])];
        id v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            id v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            id v5 = v8;
          }
          while (!v9);
        }
        id v5 = v8;
      }
      while (v8 != v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v2;
}

void sub_10137BCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10137BCBC(void *a1)
{
  v3[0] = @"BundleID";
  v4[0] = [a1 bundleId];
  v3[1] = @"Executable";
  v4[1] = [a1 executable];
  v3[2] = @"AlarmTrigger";
  _DWORD v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 trigger]);
  void v3[3] = @"AlarmDuration";
  [a1 duration];
  _OWORD v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

void sub_10137BDAC(id a1)
{
  qword_102419028 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

uint64_t *sub_10137BDDC(uint64_t **a1, id *a2, uint64_t *a3)
{
  id v5 = (uint64_t **)sub_10137BE60((uint64_t)a1, &v9, a2);
  id v6 = *v5;
  if (!*v5)
  {
    id v7 = v5;
    id v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    sub_1000EDF90(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_10137BE60(uint64_t a1, void *a2, id *a3)
{
  id v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        id v7 = v4;
        id v8 = *a3;
        id v9 = (id)v4[4];
        [*a3 duration];
        double v11 = v10;
        [v9 duration];
        if (v11 >= v12)
        {
          [v8 duration];
          double v14 = v13;
          [v9 duration];
          if (v8 >= v9 || v14 != v15) {
            break;
          }
        }
        uint64_t v4 = (void *)*v7;
        id v5 = v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
      id v17 = (id)v7[4];
      id v18 = *a3;
      [v17 duration];
      double v20 = v19;
      [v18 duration];
      if (v20 >= v21)
      {
        [v17 duration];
        double v23 = v22;
        [v18 duration];
        if (v17 >= v18 || v23 != v24) {
          break;
        }
      }
      id v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    id v7 = (void *)(a1 + 8);
  }
LABEL_15:
  *a2 = v7;
  return v5;
}

void *sub_10137BF64(uint64_t a1, void **a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = sub_10137BFFC(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  id v5 = v4;
  id v6 = *a2;
  id v7 = (void *)v4[4];
  [v6 duration];
  double v9 = v8;
  [v7 duration];
  if (v9 < v10) {
    return v3;
  }
  [v6 duration];
  double v12 = v11;
  [v7 duration];
  if (v6 < v7 && v12 == v13) {
    return v3;
  }
  return v5;
}

void *sub_10137BFFC(uint64_t a1, void **a2, void *a3, void *a4)
{
  if (a3)
  {
    id v5 = a3;
    do
    {
      id v7 = (void *)v5[4];
      double v8 = *a2;
      [v7 duration];
      double v10 = v9;
      [v8 duration];
      if (v10 >= v11
        && (([v7 duration], double v13 = v12, objc_msgSend(v8, "duration"), v13 == v14)
          ? (BOOL v15 = v7 >= v8)
          : (BOOL v15 = 1),
            v15))
      {
        a4 = v5;
      }
      else
      {
        ++v5;
      }
      id v5 = (void *)*v5;
    }
    while (v5);
  }
  return a4;
}

void sub_10137C09C(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000E23EC(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1000DA6E8(v13, *((void *)a3 + 14), *((void *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  id v13[3] = *((void *)a3 + 17);
  [a4 onWifiServiceNotification:v6 data:&v7];
  double v14 = (void **)v13;
  sub_1000D7F78(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_10137C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_10137CEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a44 = &a35;
  sub_1000C5954((void ***)&a44);
  _Unwind_Resume(a1);
}

void sub_10137CF90(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  for (uint64_t i = (uint64_t *)(a1 + 16); ; sub_10137DC10(a3, (long long *)(i + 3)))
  {
    uint64_t i = (uint64_t *)*i;
    if (!i) {
      break;
    }
    *(_DWORD *)(i[3] + 24) = llroundf((float)*(int *)(i[3] + 24) / (float)*((unsigned int *)i + 10));
  }
  uint64_t v6 = (uint64_t *)a3[1];
  if (a2 < (unint64_t)(((uint64_t)v6 - *a3) >> 4))
  {
    if (a2) {
      sub_10137DF00((uint64_t *)*a3, (uint64_t *)(*a3 + 16 * a2), v6, (uint64_t)v7);
    }
    sub_10137DD2C(a3, a2);
  }
}

void sub_10137D038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5954((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_10137D058(uint64_t a1)
{
  sub_100134750(&__p, "_nomap");
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v3 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  if ((char)v15 < 0)
  {
    if (v3 < v14)
    {
      BOOL v4 = 0;
LABEL_17:
      operator delete(__p);
      return v4;
    }
    p_p = (char *)__p;
    uint64_t v6 = (char *)__p + v14;
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v2 = *(void *)(a1 + 16);
    goto LABEL_13;
  }
  if (v3 < v15) {
    return 0;
  }
  p_p = (char *)&__p;
  uint64_t v6 = (char *)&__p + v15;
  if ((v2 & 0x80) != 0) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v7 = a1 + 8;
LABEL_13:
  double v8 = (unsigned __int8 *)(v2 + v7 - 1);
  do
  {
    BOOL v4 = v6 == p_p;
    if (v6 == p_p) {
      break;
    }
    int v10 = *--v6;
    int v9 = v10;
    int v11 = *v8--;
  }
  while (v9 == v11);
  if ((v15 & 0x80) != 0) {
    goto LABEL_17;
  }
  return v4;
}

void sub_10137D130(void *a1, void *a2)
{
  BOOL v4 = sub_10058A478(a1, (void *)(*a2 + 8));
  if (v4)
  {
    *(_DWORD *)(v4[3] + 24) += *(_DWORD *)(*a2 + 24);
    ++*((_DWORD *)v4 + 10);
  }
  else
  {
    id v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v6 = (void *)(*a2 + 8);
    uint64_t v7 = *a2;
    double v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v9 = 1;
    sub_10137E818((uint64_t)a1, v6, v6, (uint64_t)&v7);
    if (v8) {
      sub_1000DB0A0(v8);
    }
  }
}

void sub_10137D1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10137D380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10137D494(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

#error "10137DAF0: call analysis failed (funcsize=85)"

void sub_10137DBE0(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void **sub_10137DC10(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    unsigned __int8 v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    uint64_t v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unsigned __int8 v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    _DWORD v18[2] = v15 + 16;
    sub_10137DDBC(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_1000C5898(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_10137DD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

void sub_10137DD2C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          sub_1000DB0A0(v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_10137E714(a1, v5);
  }
}

uint64_t sub_10137DDBC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10137DE34((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10137DE34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10137DEC8((uint64_t)v12);
  return v10;
}

uint64_t sub_10137DEC8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

uint64_t *sub_10137DF00(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        sub_10137E080((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    if ((uint64_t *)v6 != a3)
    {
      char v13 = (uint64_t *)v6;
      while (1)
      {
        uint64_t v14 = *v13;
        long long v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *a1;
        uint64_t v16 = (std::__shared_weak_count *)a1[1];
        if (!v16) {
          break;
        }
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v18 = *(_DWORD *)(v14 + 24) > *(_DWORD *)(v17 + 24);
        sub_1000DB0A0(v16);
        if (v15) {
          goto LABEL_11;
        }
LABEL_12:
        if (v18)
        {
          uint64_t v19 = *v13;
          *char v13 = *a1;
          *a1 = v19;
          uint64_t v20 = v13[1];
          v13[1] = a1[1];
          a1[1] = v20;
          sub_10137E080((uint64_t)a1, a4, v9, a1);
        }
        v13 += 2;
        if (v13 == a3) {
          goto LABEL_19;
        }
      }
      BOOL v18 = *(_DWORD *)(v14 + 24) > *(_DWORD *)(v17 + 24);
      if (!v15) {
        goto LABEL_12;
      }
LABEL_11:
      sub_1000DB0A0(v15);
      goto LABEL_12;
    }
    a3 = (uint64_t *)v6;
LABEL_19:
    if (v8 >= 17)
    {
      unint64_t v21 = (unint64_t)v8 >> 4;
      do
      {
        sub_10137E35C(a1, v6, a4, v21);
        v6 -= 16;
      }
      while (v21-- > 2);
    }
  }
  return a3;
}

void sub_10137E080(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a1;
  uint64_t v39 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v8 = ((uint64_t)a4 - a1) >> 3;
  uint64_t v9 = v8 | 1;
  unint64_t v10 = (void *)(a1 + 16 * (v8 | 1));
  uint64_t v11 = v8 + 2;
  if (v8 + 2 < a3)
  {
    uint64_t v12 = *v10;
    char v13 = (std::__shared_weak_count *)v10[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = v10[2];
    uint64_t v14 = (std::__shared_weak_count *)v10[3];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v16 = *(_DWORD *)(v12 + 24) > *(_DWORD *)(v15 + 24);
      sub_1000DB0A0(v14);
      if (v13) {
        goto LABEL_8;
      }
    }
    else
    {
      BOOL v16 = *(_DWORD *)(v12 + 24) > *(_DWORD *)(v15 + 24);
      if (v13)
      {
LABEL_8:
        sub_1000DB0A0(v13);
        if (!v16) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    if (v16)
    {
LABEL_9:
      v10 += 2;
      uint64_t v9 = v11;
    }
  }
LABEL_10:
  uint64_t v17 = *v10;
  BOOL v18 = (std::__shared_weak_count *)v10[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *v5;
  uint64_t v19 = (std::__shared_weak_count *)v5[1];
  if (!v19)
  {
    BOOL v21 = *(_DWORD *)(v17 + 24) > *(_DWORD *)(v20 + 24);
    if (!v18) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v21 = *(_DWORD *)(v17 + 24) > *(_DWORD *)(v20 + 24);
  sub_1000DB0A0(v19);
  if (v18) {
LABEL_14:
  }
    sub_1000DB0A0(v18);
LABEL_15:
  if (v21) {
    return;
  }
  double v22 = (std::__shared_weak_count *)v5[1];
  uint64_t v38 = *v5;
  void *v5 = 0;
  v5[1] = 0;
  uint64_t v23 = v6;
  do
  {
    double v24 = v5;
    uint64_t v5 = v10;
    long long v25 = *(_OWORD *)v10;
    void *v10 = 0;
    v10[1] = 0;
    int v26 = (std::__shared_weak_count *)v24[1];
    *(_OWORD *)double v24 = v25;
    if (v26) {
      sub_1000DB0A0(v26);
    }
    if (v39 < v9) {
      break;
    }
    uint64_t v27 = 2 * v9;
    uint64_t v9 = (2 * v9) | 1;
    unint64_t v10 = (void *)(v6 + 16 * v9);
    uint64_t v28 = v27 + 2;
    if (v27 + 2 < a3)
    {
      uint64_t v29 = *v10;
      id v30 = (std::__shared_weak_count *)v10[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = v10[2];
      __int16 v31 = (std::__shared_weak_count *)v10[3];
      if (v31)
      {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v33 = *(_DWORD *)(v29 + 24) > *(_DWORD *)(v32 + 24);
        sub_1000DB0A0(v31);
        if (!v30) {
          goto LABEL_37;
        }
      }
      else
      {
        BOOL v33 = *(_DWORD *)(v29 + 24) > *(_DWORD *)(v32 + 24);
        if (!v30)
        {
LABEL_37:
          if (!v33) {
            goto LABEL_27;
          }
LABEL_26:
          v10 += 2;
          uint64_t v9 = v28;
          goto LABEL_27;
        }
      }
      sub_1000DB0A0(v30);
      if (v33) {
        goto LABEL_26;
      }
    }
LABEL_27:
    uint64_t v34 = *v10;
    __int16 v35 = (std::__shared_weak_count *)v10[1];
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v36 = *(_DWORD *)(v34 + 24) > *(_DWORD *)(v38 + 24);
      sub_1000DB0A0(v22);
    }
    else
    {
      BOOL v36 = *(_DWORD *)(v34 + 24) > *(_DWORD *)(v38 + 24);
    }
    uint64_t v6 = v23;
    if (v35) {
      sub_1000DB0A0(v35);
    }
  }
  while (!v36);
  __int16 v37 = (std::__shared_weak_count *)v5[1];
  void *v5 = v38;
  v5[1] = v22;
  if (v37)
  {
    sub_1000DB0A0(v37);
  }
}

void sub_10137E35C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = sub_10137E46C(a1, a3, a4);
    unint64_t v10 = v9;
    if ((void *)(a2 - 16) == v9)
    {
      uint64_t v15 = (std::__shared_weak_count *)v9[1];
      void *v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        sub_1000DB0A0(v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = (std::__shared_weak_count *)v9[1];
      *(_OWORD *)unint64_t v10 = v11;
      if (v12) {
        sub_1000DB0A0(v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        sub_1000DB0A0(v14);
      }
      sub_10137E584((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_10137E454(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10137E46C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 >= a3) {
      goto LABEL_11;
    }
    uint64_t v11 = *v8;
    uint64_t v12 = (std::__shared_weak_count *)v8[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v8[2];
    uint64_t v13 = (std::__shared_weak_count *)v8[3];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v15 = *(_DWORD *)(v11 + 24) > *(_DWORD *)(v14 + 24);
      sub_1000DB0A0(v13);
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v15 = *(_DWORD *)(v11 + 24) > *(_DWORD *)(v14 + 24);
      if (v12)
      {
LABEL_9:
        sub_1000DB0A0(v12);
        if (!v15) {
          goto LABEL_11;
        }
LABEL_10:
        v8 += 2;
        uint64_t v5 = v10;
        goto LABEL_11;
      }
    }
    if (v15) {
      goto LABEL_10;
    }
LABEL_11:
    long long v16 = *(_OWORD *)v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v17 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v16;
    if (v17) {
      sub_1000DB0A0(v17);
    }
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

void sub_10137E584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = (void *)(a1 + 16 * (v4 >> 1));
  uint64_t v9 = *v8;
  uint64_t v10 = (std::__shared_weak_count *)v8[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a2 - 16);
  uint64_t v11 = *(std::__shared_weak_count **)(a2 - 8);
  uint64_t v13 = (void *)(a2 - 16);
  if (!v11)
  {
    BOOL v14 = *(_DWORD *)(v9 + 24) > *(_DWORD *)(v12 + 24);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v14 = *(_DWORD *)(v9 + 24) > *(_DWORD *)(v12 + 24);
  sub_1000DB0A0(v11);
  if (v10) {
LABEL_6:
  }
    sub_1000DB0A0(v10);
LABEL_7:
  if (!v14) {
    return;
  }
  uint64_t v16 = *(void *)(a2 - 16);
  BOOL v15 = *(std::__shared_weak_count **)(a2 - 8);
  *uint64_t v13 = 0;
  v13[1] = 0;
  do
  {
    uint64_t v17 = v13;
    uint64_t v13 = v8;
    long long v18 = *(_OWORD *)v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v19 = (std::__shared_weak_count *)v17[1];
    *(_OWORD *)uint64_t v17 = v18;
    if (v19) {
      sub_1000DB0A0(v19);
    }
    if (!v7) {
      break;
    }
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = (void *)(a1 + 16 * v7);
    uint64_t v20 = *v8;
    BOOL v21 = (std::__shared_weak_count *)v8[1];
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v15)
    {
      BOOL v22 = *(_DWORD *)(v20 + 24) > *(_DWORD *)(v16 + 24);
      if (!v21) {
        continue;
      }
LABEL_16:
      sub_1000DB0A0(v21);
      continue;
    }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v22 = *(_DWORD *)(v20 + 24) > *(_DWORD *)(v16 + 24);
    sub_1000DB0A0(v15);
    if (v21) {
      goto LABEL_16;
    }
  }
  while (v22);
  uint64_t v23 = (std::__shared_weak_count *)v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  if (v23)
  {
    sub_1000DB0A0(v23);
  }
}

void sub_10137E714(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_1000C571C(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = v13;
    BOOL v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    sub_10137DDBC(a1, &v14);
    sub_1000C5898(&v14);
  }
}

void sub_10137E804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

char *sub_10137E818(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v9 = sub_1000D8908((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      BOOL v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_100B39178((void *)v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          BOOL v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  BOOL v15 = (char *)operator new(0x30uLL);
  *(void *)BOOL v15 = 0;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 2) = *a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *((_DWORD *)v15 + 10) = *(_DWORD *)(a4 + 16);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100100330(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)BOOL v15 = *v25;
LABEL_38:
    *long long v25 = v15;
    goto LABEL_39;
  }
  *(void *)BOOL v15 = *v17;
  *uint64_t v17 = v15;
  *(void *)(v24 + 8 * v4) = v17;
  if (*(void *)v15)
  {
    unint64_t v26 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_10137EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10097F4F8(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10137EA90@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t result = sub_10137EADC((uint64_t)v2, v3);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_10137EAC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10137EADC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_102321E80;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 24) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 32) = nullsub_41(0, a2);
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  return a1;
}

void sub_10137EB4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10137EB60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102321E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10137EB80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102321E80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10137EC8C(id a1)
{
  qword_102487598 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLWorkoutEffortServiceSilo"];
}

void sub_10137ED7C(id a1)
{
  if (sub_10074335C()) {
    byte_1024875A8 = 1;
  }
}

id sub_10137EE44(uint64_t a1, void *a2)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102321F50);
  }
  unint64_t v4 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortService, In callback, calling the update function", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102321F50);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void onWorkoutEffortScoreUpdate_bounce(const CLWorkoutEffort::Result &, void *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [a2 onWorkoutEffortScoreUpdate:a1];
}

void sub_10137F1D8()
{
}

id sub_10137F62C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onNatalimetryNotification:a2 data:a3];
}

void sub_101380058(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t *sub_101380088(uint64_t *a1)
{
  uint64_t v2 = a1[290];
  a1[290] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[289];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[287];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = (void *)a1[270];
  if (v5)
  {
    a1[271] = (uint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[236];
  a1[236] = 0;
  if (v6) {
    operator delete();
  }
  sub_1006A79C8(a1 + 202);
  uint64_t v7 = a1[198];
  a1[198] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[193];
  a1[193] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_101380198(a1 + 191, 0);
  return a1;
}

uint64_t *sub_101380198(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_1000D80C4((void *)(v2 + 424));
    sub_1000D80C4((void *)(v2 + 376));
    operator delete();
  }
  return result;
}

void sub_101380200(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

__n128 sub_101380230@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10138023C()
{
  sub_100134750(qword_102487580, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487580, (void *)&_mh_execute_header);
}

uint64_t sub_101380458(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    int v13 = (unsigned __int16)(v6 >> 3);
    if (v13 == 2)
    {
      *(unsigned char *)(a1 + 24) |= 1u;
      unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v15 <= 0xFFFFFFFFFFFFFFF7 && v15 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v16 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
      }
      else
      {
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        uint64_t v16 = 0;
      }
      *(void *)(a1 + 8) = v16;
    }
    else if (v13 == 1)
    {
      String = (void *)PBReaderReadString();

      *(void *)(a1 + 16) = String;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1013810D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1013810E8(uint64_t a1)
{
}

void sub_101381290(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1013812AC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(const void **)(a1 + 40);

  _Block_release(v2);
}

void sub_1013812F8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(const void **)(a1 + 40);

  _Block_release(v2);
}

void sub_10138137C(id a1)
{
  qword_102419028 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

BOOL sub_1013813AC()
{
  uint64_t v1 = qword_102419028;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void *sub_1013813CC(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_1013814B0((uint64_t)a1, "ParkinsonsResultPersistence", a2, (uint64_t)__p, 1, 60.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102321FE0;
  a1[9] = off_102322088;
  sub_101381A1C((uint64_t)a1);
  return a1;
}

void sub_101381484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10138195C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1013814B0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint8x8_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *uint8x8_t v12 = off_1022ADB08;
  *(void *)a1 = off_102322378;
  *(void *)(a1 + 72) = off_102322420;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102322378;
  *(void *)(a1 + 72) = off_102322420;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 272) = 12000;
  *(void *)(a1 + 280) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 288));
  *(void *)(a1 + 288) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1013818C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_10080DBC4(v29);
  sub_1011F8AE0(v28);
  *long long v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101381954()
{
}

void *sub_10138195C(void *a1)
{
  *a1 = off_102322378;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102322420;
  a1[35] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 36);
  sub_10080DBC4(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

uint64_t sub_101381A1C(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1005F7B0C(*(void *)(a1 + 80), "ParkinsonsResultPersistence", (const char **)&off_102322118, (const std::string::value_type **)&off_102477B58, 0);
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v3 = a1 + 72;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v4 + 48))(v3);
    *(_DWORD *)(v3 + 60) = result;
  }
  return result;
}

uint64_t sub_101381A98(void *a1)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)&v9);
    uint64_t v3 = sub_100132EFC(&v10, (uint64_t)"INSERT INTO ", 12);
    (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 64))(buf, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v4 = buf;
    }
    else {
      uint64_t v4 = *(uint8_t **)buf;
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = v13;
    }
    else {
      uint64_t v5 = v12;
    }
    char v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)"(startTime, endTime, percentNoObservation, percentDyskinesiaLikely, percentTremorAbsent, percentTremorSlight, percentTremorMild, percentTremorModerate, percentTremorStrong) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", 207);
    if ((char)v13 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      unint64_t v8 = buf;
    }
    else {
      unint64_t v8 = *(uint8_t **)buf;
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return result;
}

void sub_101381F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 169) < 0) {
    operator delete(*(void **)(v2 - 192));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101381FA8()
{
}

float sub_101381FB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)a3 = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 8) = sqlite3_column_double(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v8 = sqlite3_column_double(v7, 3);
  *(float *)(a3 + 16) = v8;
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v10 = sqlite3_column_double(v9, 4);
  *(float *)(a3 + 20) = v10;
  int v11 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v12 = sqlite3_column_double(v11, 5);
  *(float *)(a3 + 24) = v12;
  unsigned __int8 v13 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v14 = sqlite3_column_double(v13, 6);
  *(float *)(a3 + 28) = v14;
  unint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v16 = sqlite3_column_double(v15, 7);
  *(float *)(a3 + 32) = v16;
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v18 = sqlite3_column_double(v17, 8);
  *(float *)(a3 + 36) = v18;
  float v19 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float result = sqlite3_column_double(v19, 9);
  *(float *)(a3 + 40) = result;
  return result;
}

void *sub_1013820A4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "ParkinsonsResultPersistence");
}

void *sub_1013820B4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "ParkinsonsResultPersistence");
}

uint64_t sub_1013820C4(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 9))
  {
    sub_10002B640(a1[10]);
    CFAbsoluteTimeGetCurrent();
    sub_10010F274((uint64_t)&v10);
    uint64_t v3 = sub_100132EFC(&v11, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = v13;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    char v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime < ?", 20);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      float v8 = __p;
    }
    else {
      float v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return -1;
}

void sub_101382598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_101382610(uint64_t a1, uint64_t a2)
{
  return sub_1013820C4((uint64_t *)(a1 - 72), a2);
}

void sub_10138261C(void *a1)
{
  sub_10138195C(a1);

  operator delete();
}

uint64_t sub_101382654(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB1578(v4);
    sub_1001D7FD4();
  }
  float v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    char v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_101382A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_101382ACC(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AB16E8(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_101382F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_101382F88(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1013849D8(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102322348);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)unsigned __int8 v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102322348);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)unsigned __int8 v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322348);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101383700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101383734(uint64_t a1, long long *a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 104))(a1, v29);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322348);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102322348);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)a2;
    double v8 = v29[0];
    double v9 = *(double *)a2 - v29[0];
    if (v9 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322348);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(double *)a2;
        *(_DWORD *)uint64_t buf = 134349312;
        double v36 = v29[0];
        __int16 v37 = 2050;
        double v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102322348);
        }
        double v23 = *(double *)a2;
        int v31 = 134349312;
        double v32 = v29[0];
        __int16 v33 = 2050;
        double v34 = v23;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)a2;
      double v8 = v29[0];
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102322348);
        }
        float v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)a2;
          *(_DWORD *)uint64_t buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102322348);
          }
          double v25 = *(double *)a2;
          int v31 = 134217984;
          double v32 = v25;
          unint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v28 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102322348);
        double v17 = v28;
      }
      double v18 = v16 - v17;
      float v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102322348);
        }
        int v31 = 134217984;
        double v32 = v18;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, double *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v29, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 224) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_101383F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101383F68(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB1858(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  float v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1013842DC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101AB19C8(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101384608(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101AB1B38(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void *sub_10138492C(uint64_t a1)
{
  return sub_10138195C((void *)(a1 - 72));
}

void sub_101384934(uint64_t a1)
{
  sub_10138195C((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_101384970(uint64_t a1)
{
  return sub_101382F88(a1 - 72);
}

void sub_101384978(id a1)
{
  qword_102419178 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

void sub_1013849A8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1013849D8(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_101384A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101384A74(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101384AA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

uint64_t sub_101384B34()
{
  if (qword_10248D2B8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D2B8 + 8))(qword_10248D2B8);
  }
  uint64_t result = qword_10248D2C0;
  if (qword_10248D2C0)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248D2C0 + 8);
    return v1();
  }
  return result;
}

void sub_101384BBC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1024875B8 & 1) == 0)
  {
    byte_1024875B8 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLogEntry.pb.cc", a4);
    sub_100895E2C(v4, v5, v6, v7);
    operator new();
  }
}

void sub_101384CBC()
{
}

double sub_101384CE0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(unsigned char *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_12:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t v6 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(void *)(a1 + 32) = v6;
  }
  return result;
}

void sub_101384DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101384DEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102322490;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_101384E0C()
{
}

uint64_t sub_101384E64(uint64_t result)
{
  if (*(unsigned char *)(result + 44))
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_101384E80(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_24;
        }
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v16;
        *(_DWORD *)(a1 + 44) |= 1u;
        uint64_t v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_24;
        }
LABEL_14:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 44) |= 2u;
        double v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 25) {
          continue;
        }
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        unint64_t v16 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16))
        {
          *(void *)(a1 + 24) = v16;
          *(_DWORD *)(a1 + 44) |= 4u;
          double v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v11 < v10 && *v11 == 32)
          {
            uint64_t v12 = v11 + 1;
            *((void *)this + 1) = v12;
LABEL_28:
            unint64_t v16 = 0;
            if ((unint64_t)v12 >= v10 || *v12 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v16);
              if (!result) {
                return result;
              }
              unint64_t v13 = v16;
              unsigned __int8 v14 = (unsigned __int8 *)*((void *)this + 1);
              unint64_t v10 = *((void *)this + 2);
            }
            else
            {
              unint64_t v13 = *v12;
              unsigned __int8 v14 = (unsigned __int8 *)(v12 + 1);
              *((void *)this + 1) = v14;
            }
            *(void *)(a1 + 32) = v13;
            *(_DWORD *)(a1 + 44) |= 8u;
            if (v14 == (unsigned __int8 *)v10
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_24;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_28;
      default:
        int v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

double sub_1013850E8(uint64_t a1, void *lpsrc)
{
  return sub_101384CE0(a1, (uint64_t)lpsrc);
}

uint64_t sub_101385170()
{
  return 1;
}

void *sub_101385178@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.LogEntry.TimeStamp");
}

uint64_t sub_101385188(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 52);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 52))
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      uint64_t v5 = *(void *)(a1 + 32);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 32);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248D2B8 + 32);
      }
      sub_101384CE0(v5, v6);
      int v4 = *(_DWORD *)(a2 + 52);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 2u;
      uint64_t v7 = *(void *)(a1 + 40);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 40);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248D2B8 + 40);
      }
      sub_10089616C(v7, v8);
    }
  }
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::MergeFrom((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a2 + 8));
}

void sub_1013852E8()
{
}

void sub_101385320(void *a1)
{
  sub_1001676D0(a1);

  operator delete();
}

void sub_101385358()
{
}

void sub_101385398()
{
}

uint64_t sub_1013853BC(uint64_t a1)
{
  uint64_t result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8));
  LOBYTE(v3) = *(unsigned char *)(a1 + 52);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 44))
        {
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        *(_DWORD *)(v4 + 44) = 0;
        int v3 = *(_DWORD *)(a1 + 52);
      }
    }
    if ((v3 & 2) != 0)
    {
      uint64_t result = *(void *)(a1 + 40);
      if (result) {
        uint64_t result = sub_100897C18(result);
      }
    }
  }
  *(_DWORD *)(a1 + 52) = 0;
  return result;
}

uint64_t sub_101385428(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_18;
        }
        *(_DWORD *)(a1 + 52) |= 1u;
        uint64_t v9 = *(void *)(a1 + 32);
        if (!v9) {
          operator new();
        }
        unsigned int v28 = 0;
        unint64_t v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0; {
        }
          }
        else
        {
          unsigned int v28 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v11 = *((_DWORD *)this + 14);
        int v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0;
        }
        int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
        if (!sub_101384E80(v9, this, v14) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        int v15 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)this + 14) = v17;
        }
        double v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 34)
        {
          *((void *)this + 1) = v18 + 1;
          goto LABEL_33;
        }
      }
      if (TagFallback >> 3 != 4) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_33:
      *(_DWORD *)(a1 + 52) |= 2u;
      uint64_t v19 = *(void *)(a1 + 40);
      if (!v19) {
        operator new();
      }
      unsigned int v29 = 0;
      long long v20 = (char *)*((void *)this + 1);
      if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0; {
      }
        }
      else
      {
        unsigned int v29 = *v20;
        *((void *)this + 1) = v20 + 1;
      }
      int v21 = *((_DWORD *)this + 14);
      int v22 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v21 + 1;
      if (v21 >= v22) {
        return 0;
      }
      int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
      if (!sub_10089811C(v19, this, v24) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
      int v25 = *((_DWORD *)this + 14);
      BOOL v16 = __OFSUB__(v25, 1);
      int v26 = v25 - 1;
      if (v26 < 0 == v16) {
        *((_DWORD *)this + 14) = v26;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((TagFallback & 0xFFFFFFF8) == 0x10)
    {
      if ((wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(v5, TagFallback, this, (const wireless_diagnostics::google::protobuf::MessageLite *)qword_10248D2B8) & 1) == 0)return 0; {
    }
      }
    else if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)
    {
      return 0;
    }
  }
}

void sub_10138573C()
{
}

uint64_t sub_101385760(uint64_t a1, void *lpsrc)
{
  return sub_101385188(a1, (uint64_t)lpsrc);
}

uint64_t sub_1013857E8(uint64_t a1)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::IsInitialized(a1 + 8);
}

void *sub_1013857F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.LogEntry");
}

void sub_1013858B4(id a1)
{
  qword_1024875C0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBTLEBeaconProviderSilo"];
}

uint64_t sub_101385974(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101385D3C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024875D8 != -1) {
    dispatch_once(&qword_1024875D8, block);
  }
  return qword_1024875D0;
}

void sub_101385D3C()
{
}

void sub_101385D88()
{
}

void sub_101385DAC()
{
}

void sub_101385E68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101385EA4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102322648;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_101385F8C(uint64_t a1)
{
  sub_101386044(a1);

  operator delete();
}

id sub_101385FC4(uint64_t a1, int a2, void *a3)
{
  id result = sub_1013282EC(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_101386014(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101386044(uint64_t a1)
{
  *(void *)a1 = &off_102322648;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101386164(id a1)
{
  qword_1024875E0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDarwinNotifierSilo"];
}

uint64_t sub_101386224(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101386444;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024875F0 != -1) {
    dispatch_once(&qword_1024875F0, block);
  }
  return qword_10248D2C8;
}

void sub_101386444()
{
}

void sub_1013864C8()
{
}

uint64_t sub_1013864EC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1023228B8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10138657C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101386598(void *a1)
{
  *a1 = off_102322690;
  sub_101386744((uint64_t)a1);

  return sub_1013865F0((uint64_t)a1);
}

uint64_t sub_1013865F0(uint64_t a1)
{
  *(void *)a1 = off_1023228B8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101386678(void *a1)
{
  sub_101386598(a1);

  operator delete();
}

uint64_t sub_1013866B0(uint64_t a1)
{
  sub_1000C7F88(&v3);
  sub_10051F604(v3);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, uint64_t))(*(void *)a1 + 144))(a1, &v3, 0, 0xFFFFFFFFLL);
}

void sub_10138672C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_101386744(uint64_t a1)
{
  *(unsigned char *)(a1 + 108) = 1;
  sub_101386810(a1, 0);
  sub_101386BEC(a1, 0);
  sub_101386F24(a1, 0);
  sub_101387270(a1, 0);
  sub_1013875A8(a1, 0);
  sub_1013878F4(a1, 0);
  sub_101387C50(a1, 0);
  sub_101387F88(a1, 0);
  sub_1013882D4(a1, 0);
  sub_1013885C4(a1, 0);
  sub_1013888B4(a1, 0);
  sub_101388BB8(a1, 0);

  sub_101388EC8(a1, 0);
}

void sub_101386810(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)(a1 + 112);
  int v3 = *(_DWORD *)(a1 + 112);
  if (a2)
  {
    if (v3 < 0 && (*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
    {
      int v8 = (const char *)[@"com.apple.locationd/Prefs" UTF8String];
      uint64_t v9 = [*(id *)(a1 + 40) queue];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1013897FC;
      handler[3] = &unk_1022BA9F0;
      handler[4] = a1;
      notify_register_dispatch(v8, v4, v9, handler);
      unint64_t v10 = (const char *)[@"com.apple.ManagedConfiguration.profileListChanged" UTF8String];
      int v11 = [*(id *)(a1 + 40) queue];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_101389804;
      void v12[3] = &unk_1022BA9F0;
      v12[4] = a1;
      notify_register_dispatch(v10, (int *)(a1 + 116), v11, v12);
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for daemon settings while already registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      __int16 v14 = 0;
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForDaemonSettings(BOOL)", "%s\n");
LABEL_25:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0 && (*(_DWORD *)(a1 + 116) & 0x80000000) == 0)
    {
      notify_cancel(v3);
      notify_cancel(*(_DWORD *)(a1 + 116));
      *(void *)(a1 + 112) = -1;
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for daemon settings while not registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      __int16 v14 = 0;
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForDaemonSettings(BOOL)", "%s\n");
      goto LABEL_25;
    }
  }
}

void sub_101386BEC(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)(a1 + 124);
  int v3 = *(_DWORD *)(a1 + 124);
  if (a2)
  {
    if (v3 < 0)
    {
      uint64_t v7 = [*(id *)(a1 + 40) queue];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10138980C;
      handler[3] = &unk_1022BA9F0;
      handler[4] = a1;
      notify_register_dispatch("com.apple.locationd.suggested-action-nudge", v4, v7, handler);
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for daemon settings while already registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForSuggestedActionNudge(BOOL)", "%s\n");
LABEL_23:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *uint64_t v4 = -1;
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for daemon settings while not registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForSuggestedActionNudge(BOOL)", "%s\n");
      goto LABEL_23;
    }
  }
}

void sub_101386F24(uint64_t a1, int a2)
{
  if (&MCCloudConfigurationDidChangeNotification)
  {
    uint64_t v4 = (int *)(a1 + 128);
    int v3 = *(_DWORD *)(a1 + 128);
    if (a2)
    {
      if (v3 < 0)
      {
        uint64_t v7 = (const char *)[MCCloudConfigurationDidChangeNotification UTF8String];
        int v8 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_101389864;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v7, v4, v8, handler);
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      uint64_t v5 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for CloudConfigurationDidChange while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForCloudConfigurationDidChange(BOOL)", "%s\n");
LABEL_24:
        if (v6 != buf) {
          free(v6);
        }
      }
    }
    else
    {
      if ((v3 & 0x80000000) == 0)
      {
        notify_cancel(v3);
        *uint64_t v4 = -1;
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      uint64_t v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for CloudConfigurationDidChange while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForCloudConfigurationDidChange(BOOL)", "%s\n");
        goto LABEL_24;
      }
    }
  }
}

void sub_101387270(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)(a1 + 120);
  int v3 = *(_DWORD *)(a1 + 120);
  if (a2)
  {
    if (v3 < 0)
    {
      uint64_t v7 = [*(id *)(a1 + 40) queue];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1013898BC;
      handler[3] = &unk_1022BA9F0;
      handler[4] = a1;
      notify_register_dispatch("com.apple.locationd.appleAccountDidChange", v4, v7, handler);
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for AppleAccountDidChange while already registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForAppleAccountDidChange(BOOL)", "%s\n");
LABEL_23:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *uint64_t v4 = -1;
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for AppleAccountDidChange while not registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForAppleAccountDidChange(BOOL)", "%s\n");
      goto LABEL_23;
    }
  }
}

void sub_1013875A8(uint64_t a1, int a2)
{
  if (&MCProfileListChangedNotification)
  {
    uint64_t v4 = (int *)(a1 + 132);
    int v3 = *(_DWORD *)(a1 + 132);
    if (a2)
    {
      if (v3 < 0)
      {
        uint64_t v7 = (const char *)[MCProfileListChangedNotification UTF8String];
        int v8 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_101389914;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v7, v4, v8, handler);
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      uint64_t v5 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for ProfileListChange while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForProfileListChanged(BOOL)", "%s\n");
LABEL_24:
        if (v6 != buf) {
          free(v6);
        }
      }
    }
    else
    {
      if ((v3 & 0x80000000) == 0)
      {
        notify_cancel(v3);
        *uint64_t v4 = -1;
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      uint64_t v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for ProfileListChange while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForProfileListChanged(BOOL)", "%s\n");
        goto LABEL_24;
      }
    }
  }
}

void sub_1013878F4(uint64_t a1, int a2)
{
  if (objc_opt_class())
  {
    int v4 = *(_DWORD *)(a1 + 136);
    if (a2)
    {
      if (v4 < 0)
      {
        uint64_t v7 = (const char *)[SSAccountStoreChangedNotification UTF8String];
        int v8 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10138996C;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v7, (int *)(a1 + 136), v8, handler);
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      uint64_t v5 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for AccountStoreChanged while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForAccountStoreChanged(BOOL)", "%s\n");
LABEL_24:
        if (v6 != buf) {
          free(v6);
        }
      }
    }
    else
    {
      if ((v4 & 0x80000000) == 0)
      {
        notify_cancel(v4);
        *(_DWORD *)(a1 + 136) = -1;
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      uint64_t v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for AccountStoreChanged while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForAccountStoreChanged(BOOL)", "%s\n");
        goto LABEL_24;
      }
    }
  }
}

void sub_101387C50(uint64_t a1, int a2)
{
  int v4 = (int *)(a1 + 140);
  int v3 = *(_DWORD *)(a1 + 140);
  if (a2)
  {
    if (v3 < 0)
    {
      uint64_t v7 = [*(id *)(a1 + 40) queue];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1013899C4;
      handler[3] = &unk_1022BA9F0;
      handler[4] = a1;
      notify_register_dispatch("SignificantTimeChangeNotification", v4, v7, handler);
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempted to re-register for SignificantTimeChange while already registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDarwinNotifier::registerForSignificantTimeChange(BOOL)", "%s\n");
LABEL_23:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *int v4 = -1;
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102322808);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for SignificantTimeChange while not registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForSignificantTimeChange(BOOL)", "%s\n");
      goto LABEL_23;
    }
  }
}

void sub_101387F88(uint64_t a1, int a2)
{
  if (qword_1024875F8 != -1) {
    dispatch_once(&qword_1024875F8, &stru_102322828);
  }
  if (qword_102487600 && off_102477C28())
  {
    int v4 = *(_DWORD *)(a1 + 144);
    if (a2)
    {
      if (v4 < 0)
      {
        int v6 = (const char *)[(id)off_102477C28() UTF8String];
        uint64_t v7 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_101389A1C;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v6, (int *)(a1 + 144), v7, handler);
        return;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322848);
      }
      uint64_t v5 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for CarAutomaticTriggeringPreferenceChange while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 == -1)
        {
LABEL_24:
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForCarAutomaticTriggeringPreferenceChange(BOOL)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
          return;
        }
LABEL_26:
        dispatch_once(&qword_102418FD0, &stru_102322848);
        goto LABEL_24;
      }
    }
    else
    {
      if ((v4 & 0x80000000) == 0)
      {
        notify_cancel(v4);
        *(_DWORD *)(a1 + 144) = -1;
        return;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322848);
      }
      int v8 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for CarAutomaticTriggeringPreferenceChange while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 == -1) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
    }
  }
}

void sub_1013882D4(uint64_t a1, int a2)
{
  int v4 = (int *)(a1 + 148);
  int v3 = *(_DWORD *)(a1 + 148);
  if (a2)
  {
    if (v3 < 0)
    {
      int v6 = [*(id *)(a1 + 40) queue];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_101389A74;
      handler[3] = &unk_1022BA9F0;
      handler[4] = a1;
      notify_register_dispatch("com.apple.GeoServices.navigation.stopped", v4, v6, handler);
      return;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102322848);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for GEONavigationStopped while already registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_20:
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForGEONavigationStopped(BOOL)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
LABEL_22:
      dispatch_once(&qword_102418FD0, &stru_102322848);
      goto LABEL_20;
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *int v4 = -1;
      return;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102322848);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for GEONavigationStopped while not registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
  }
}

void sub_1013885C4(uint64_t a1, int a2)
{
  int v4 = (int *)(a1 + 152);
  int v3 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    if (v3 < 0)
    {
      int v6 = [*(id *)(a1 + 40) queue];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_101389ACC;
      handler[3] = &unk_1022BA9F0;
      handler[4] = a1;
      notify_register_dispatch("com.apple.sysdiagnose.sysdiagnoseStarted", v4, v6, handler);
      return;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102322848);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for SysdiagnoseTrigger while already registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_20:
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForSysdiagnoseTrigger(BOOL)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
LABEL_22:
      dispatch_once(&qword_102418FD0, &stru_102322848);
      goto LABEL_20;
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
    {
      notify_cancel(v3);
      *int v4 = -1;
      return;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102322848);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for SysdiagnoseTrigger while not registered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
  }
}

void sub_1013888B4(uint64_t a1, int a2)
{
  if (&MCEffectiveSettingsChangedNotification)
  {
    int v4 = (int *)(a1 + 156);
    int v3 = *(_DWORD *)(a1 + 156);
    if (a2)
    {
      if (v3 < 0)
      {
        int v6 = (const char *)[MCEffectiveSettingsChangedNotification UTF8String];
        uint64_t v7 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_101389B24;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v6, v4, v7, handler);
        return;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322848);
      }
      uint64_t v5 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for ManagedConfiguration while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 == -1)
        {
LABEL_21:
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForManagedConfigurationChange(BOOL)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
          return;
        }
LABEL_23:
        dispatch_once(&qword_102418FD0, &stru_102322848);
        goto LABEL_21;
      }
    }
    else
    {
      if ((v3 & 0x80000000) == 0)
      {
        notify_cancel(v3);
        *int v4 = -1;
        return;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102322848);
      }
      int v8 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for ManagedConfiguration while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 == -1) {
          goto LABEL_21;
        }
        goto LABEL_23;
      }
    }
  }
}

void sub_101388BB8(uint64_t a1, int a2)
{
  if (&RTLocationsOfInterestDidChangeNotification)
  {
    int v4 = (const char *)[RTLocationsOfInterestDidChangeNotification UTF8String];
    int v5 = *(_DWORD *)(a1 + 160);
    if (a2)
    {
      if (v5 < 0)
      {
        uint64_t v7 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_101389B7C;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v4, (int *)(a1 + 160), v7, handler);
        return;
      }
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102322868);
      }
      int v6 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for loi did change while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 == -1)
        {
LABEL_21:
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForLocationOfInterestDidChange(BOOL)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
          return;
        }
LABEL_23:
        dispatch_once(&qword_1024193C0, &stru_102322868);
        goto LABEL_21;
      }
    }
    else
    {
      if ((v5 & 0x80000000) == 0)
      {
        notify_cancel(v5);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102322868);
      }
      int v8 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for loi did change while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 == -1) {
          goto LABEL_21;
        }
        goto LABEL_23;
      }
    }
  }
}

void sub_101388EC8(uint64_t a1, int a2)
{
  if (&RTLocationsOfInterestDidClearNotification)
  {
    int v4 = (const char *)[RTLocationsOfInterestDidClearNotification UTF8String];
    int v5 = *(_DWORD *)(a1 + 164);
    if (a2)
    {
      if (v5 < 0)
      {
        uint64_t v7 = [*(id *)(a1 + 40) queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_101389BD4;
        handler[3] = &unk_1022BA9F0;
        handler[4] = a1;
        notify_register_dispatch(v4, (int *)(a1 + 164), v7, handler);
        return;
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_102322888);
      }
      int v6 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to re-register for loi did clear while already registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 == -1)
        {
LABEL_21:
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDarwinNotifier::registerForLocationOfInterestDidClear(BOOL)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
          return;
        }
LABEL_23:
        dispatch_once(&qword_102419450, &stru_102322888);
        goto LABEL_21;
      }
    }
    else
    {
      if ((v5 & 0x80000000) == 0)
      {
        notify_cancel(v5);
        *(_DWORD *)(a1 + 164) = -1;
        return;
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_102322888);
      }
      int v8 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempted to unregister for loi did clear while not registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 == -1) {
          goto LABEL_21;
        }
        goto LABEL_23;
      }
    }
  }
}

void *sub_1013891D8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101389254(uint64_t a1, int *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = 1;
      sub_101386810(a1, 1);
      break;
    case 1:
      uint64_t v2 = 1;
      sub_101386BEC(a1, 1);
      break;
    case 2:
      uint64_t v2 = 1;
      sub_101386F24(a1, 1);
      break;
    case 3:
      uint64_t v2 = 1;
      sub_101387270(a1, 1);
      break;
    case 4:
      uint64_t v2 = 1;
      sub_1013875A8(a1, 1);
      break;
    case 5:
      uint64_t v2 = 1;
      sub_1013878F4(a1, 1);
      break;
    case 6:
      uint64_t v2 = 1;
      sub_101387C50(a1, 1);
      break;
    case 7:
      uint64_t v2 = 1;
      sub_101387F88(a1, 1);
      break;
    case 8:
      uint64_t v2 = 1;
      sub_1013882D4(a1, 1);
      break;
    case 9:
      uint64_t v2 = 1;
      sub_1013885C4(a1, 1);
      break;
    case 10:
      uint64_t v2 = 1;
      sub_1013888B4(a1, 1);
      break;
    case 11:
      uint64_t v2 = 1;
      sub_101388BB8(a1, 1);
      break;
    case 12:
      uint64_t v2 = 1;
      sub_101388EC8(a1, 1);
      break;
    default:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v5 = *a2;
        *(_DWORD *)uint64_t buf = 67240192;
        int v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown registration requested: %{public}d", buf, 8u);
      }
      uint64_t v2 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLDarwinNotifier::registerForNotificationInternal(const CLDarwinNotifier_Type::Notification &)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        uint64_t v2 = 0;
      }
      break;
  }
  return v2;
}

uint64_t sub_101389540(uint64_t a1, int *a2)
{
  switch(*a2)
  {
    case 0:
      sub_101386810(a1, 0);
      goto LABEL_25;
    case 1:
      sub_101386BEC(a1, 0);
      goto LABEL_25;
    case 2:
      sub_101386F24(a1, 0);
      goto LABEL_25;
    case 3:
      sub_101387270(a1, 0);
      goto LABEL_25;
    case 4:
      sub_1013875A8(a1, 0);
      goto LABEL_25;
    case 5:
      sub_1013878F4(a1, 0);
      goto LABEL_25;
    case 6:
      sub_101387C50(a1, 0);
      goto LABEL_25;
    case 7:
      sub_101387F88(a1, 0);
      goto LABEL_25;
    case 8:
      sub_1013882D4(a1, 0);
      goto LABEL_25;
    case 9:
      sub_1013885C4(a1, 0);
      goto LABEL_25;
    case 10:
      sub_1013888B4(a1, 0);
      goto LABEL_25;
    case 11:
      sub_101388BB8(a1, 0);
      goto LABEL_25;
    case 12:
      sub_101388EC8(a1, 0);
LABEL_25:
      uint64_t result = 1;
      break;
    default:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102322808);
      }
      int v3 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v4 = *a2;
        *(_DWORD *)uint64_t buf = 67240192;
        int v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unknown unregistration requested: %{public}d", buf, 8u);
      }
      BOOL v5 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102322808);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLDarwinNotifier::unregisterForNotificationInternal(const CLDarwinNotifier_Type::Notification &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1013897FC(uint64_t a1)
{
  return sub_1013866B0(*(void *)(a1 + 32));
}

uint64_t sub_101389804(uint64_t a1)
{
  return sub_1013866B0(*(void *)(a1 + 32));
}

uint64_t sub_10138980C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 1;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389864(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 2;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1013898BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 3;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389914(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 4;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_10138996C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 5;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_1013899C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 6;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389A1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 7;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389A74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 8;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389ACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 9;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389B24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 10;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389B7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 11;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

uint64_t sub_101389BD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v3 = 12;
  return (*(uint64_t (**)(uint64_t, int *, void, uint64_t))(*(void *)v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
}

void sub_101389C2C()
{
}

void sub_101389CE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101389D24(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102322998;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_101389E08(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023227E8);
      }
      unint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1023227E8);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10138A098(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10138A14C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10138A194(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10138A1DC(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10138A224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477C30);
}

uint64_t sub_10138A250(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          unsigned int v24 = (uint64_t *)v18;
        }
        else {
          unsigned int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          unsigned int v29 = (uint64_t *)v25;
        }
        else {
          unsigned int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10138BD18();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102477C31;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        double v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023227E8);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023227E8);
    }
    __int16 v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10138A6F4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023227E8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      unsigned int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023227E8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10138A978(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023227E8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023227E8);
                }
                unsigned int v29 = a1 + 8;
                if (a1[31] < 0) {
                  unsigned int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                double v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10138AD4C(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *((unsigned char *)v6 + 24) = *a3;
  void *v6 = off_1023229E0;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  unsigned char v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_10138AE00(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10138AE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_10138AE68(uint64_t a1, unsigned int *a2, unsigned char *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023227E8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    unsigned int v29 = v30;
    memset(v30, 0, sizeof(v30));
    int v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    _DWORD v18[2] = 0;
    *BOOL v18 = off_1023229E0;
    *((unsigned char *)v18 + 24) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10138C7C8();
  }
  os_activity_scope_leave(&state);
}

void sub_10138B44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10138B498(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023227E8);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023227E8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023227E8);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023227E8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1023227E8);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023227E8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10138BA48(uint64_t a1)
{
  sub_10138BC78(a1);

  operator delete();
}

id sub_10138BA80(uint64_t a1, int a2, void *a3)
{
  id result = sub_10138BEDC(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10138BAD0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10138BB00(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10138BB30(id a1)
{
  qword_102487600 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
}

uint64_t sub_10138BB5C()
{
  if (qword_1024875F8 != -1) {
    dispatch_once(&qword_1024875F8, &stru_102322828);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_102487600, "CARAutomaticDNDTriggeringPreferenceChangedNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_102487608 = result;
  }
  else
  {
    uint64_t result = qword_102487608;
  }
  off_102477C28 = sub_10138BBDC;
  return result;
}

uint64_t sub_10138BBDC()
{
  return qword_102487608;
}

void sub_10138BBE8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10138BC18(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_10138BC48(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10138BC78(uint64_t a1)
{
  *(void *)a1 = &off_102322998;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10138BCE8(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10138BD18()
{
}

unsigned char *sub_10138BDC4(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10138BEDC(a4);
    uint64_t v10 = *(void *)a3 + 80;
    int v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_10138BEBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_10138BEDC(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_10138BF78(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_10138C304(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_10138BF78(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_10138C6C4((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1023229B0);
    }
    char v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DB4CAFLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1023229B0);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DB4CAFLL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1023229B0);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DB4CAFLL & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDarwinNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_10138C304(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023229B0);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB4CAFLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDarwinNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023229B0);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB4CAFLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1023229B0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_10138C6C4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394718))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1) {
      sub_101AB200C();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_10138C74C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023229E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10138C76C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023229E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10138C7C8()
{
}

void sub_10138C874(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    char v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_10138BEDC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_10138BDC4(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unsigned int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unsigned int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023227E8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023227E8);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                BOOL v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLDarwinNotifier_Type::Notification, CLDarwinNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLDarwinNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_10138CC64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_10138CC84(id *a1)
{
  if (a1[325])
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v1 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLMM,Pedestrian,Maps API already initialized", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "%s\n", v2);
    if (v2 == (char *)buf) {
      return;
    }
LABEL_25:
    free(v2);
    return;
  }
  a1[326] = dispatch_queue_create("cl_geo_access_map_feature_geometry_pedestrian_queue", 0);
  id v4 = [objc_alloc((Class)GEOMapFeatureAccess) initWithQueue:a1[326]];
  a1[325] = v4;
  if (!v4) {
    sub_101AB2190();
  }
  [v4 setAllowNetworkTileLoad:1];
  [a1[325] setFlipNegativeTravelDirectionRoads:1];
  [a1[325] setVisitDoubleTravelDirectionRoadsTwice:0];
  [a1[325] setAllowStaleData:1];
  [a1[325] setAllowOfflineData:1];
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102322AE8);
  }
  char v5 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((unsigned int (**)(id *))*a1 + 13))(a1)) {
      int v6 = "Cycling";
    }
    else {
      int v6 = "Pedestrian";
    }
    unsigned int v7 = [a1[325] allowStaleData];
    *(_DWORD *)uint64_t buf = 136446466;
    __int16 v9 = v6;
    __int16 v10 = 1026;
    unsigned int v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMMPED,%{public}s,using maps API,stale data,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    (*((uint64_t (**)(id *))*a1 + 13))(a1);
    [a1[325] allowStaleData];
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "%s\n", v2);
    if (v2 != (char *)buf) {
      goto LABEL_25;
    }
  }
}

BOOL sub_10138D078(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 32))
  {
    double v8 = *(double *)(a3 + 56);
    double v9 = *(double *)(a3 + 64);
    float v79 = 0;
    long long v80 = 0;
    uint64_t v81 = 0;
    if (*(unsigned char *)(a1 + 33))
    {
      if (!*(void *)(a1 + 16))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        uint64_t v62 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_107;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        LOWORD(v84[0]) = 0;
        double v63 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v63);
        goto LABEL_122;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      __int16 v10 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = (uint64_t)(*(void *)(*(void *)(a1 + 16) + 336) - *(void *)(*(void *)(a1 + 16) + 328)) >> 4;
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMMPED,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        uint64_t v68 = (uint64_t)(*(void *)(*(void *)(a1 + 16) + 336) - *(void *)(*(void *)(a1 + 16) + 328)) >> 4;
        LODWORD(v84[0]) = 134349056;
        *(void *)((char *)v84 + 4) = v68;
        unint64_t v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      if ((sub_100D213E0(*(void *)(a1 + 16), (uint64_t *)&v79, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), a4) & 1) == 0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        unint64_t v12 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,RoadBuffer,findRoadsNear returned false", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_107;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_121;
        }
LABEL_124:
        dispatch_once(&qword_102419430, &stru_102322AE8);
LABEL_121:
        LOWORD(v84[0]) = 0;
        double v63 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v63);
LABEL_122:
        if (v63 != (char *)buf) {
          free(v63);
        }
LABEL_107:
        BOOL v15 = 0;
        goto LABEL_108;
      }
    }
    else if (!sub_10138E098(a1, (uint64_t *)&v79, a3, a4))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v64 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,MapsAPI,findRoadsNear returned false", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_121;
      }
      goto LABEL_124;
    }
    uint64_t v17 = v79;
    __int16 v16 = v80;
    if (v79 == v80)
    {
      BOOL v15 = 1;
      goto LABEL_108;
    }
    int v18 = (double *)(a1 + 56);
    __asm { FMOV            V0.2D, #-1.0 }
    long long v71 = _Q0;
LABEL_26:
    float v74 = 0.0;
    __n128 v73 = 0uLL;
    __int16 v75 = 1;
    float v76 = 0.0;
    unint64_t v78 = 0;
    long long v77 = 0uLL;
    unint64_t v25 = *v17;
    unint64_t v24 = v17[1];
    if (v24)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      int v26 = (std::__shared_weak_count *)v73.n128_u64[1];
      v73.n128_u64[0] = v25;
      v73.n128_u64[1] = v24;
      if (v26)
      {
        sub_1000DB0A0(v26);
        unint64_t v25 = v73.n128_u64[0];
      }
      if (!v25)
      {
LABEL_47:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        BOOL v51 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102322AE8);
          }
          LOWORD(v84[0]) = 0;
          uint64_t v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v59);
          if (v59 != (char *)buf) {
            free(v59);
          }
        }
        sub_10017FF2C(a2);
        int v52 = 1;
        goto LABEL_77;
      }
    }
    else
    {
      __n128 v73 = (__n128)*v17;
      if (!v25) {
        goto LABEL_47;
      }
    }
    v84[0] = 0uLL;
    v84[1] = v71;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    unint64_t v87 = 0xBFF0000000000000;
    uint64_t v99 = 0;
    int v100 = 0;
    memset(&v97[32], 0, 32);
    __int16 v98 = 0;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    memset(v104, 0, 27);
    memset(&v104[32], 0, 48);
    long long v96 = 0u;
    memset(v97, 0, 30);
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    unint64_t v106 = 0xBFF0000000000000;
    uint64_t v105 = 0;
    uint64_t v27 = *(double **)(v25 + 136);
    unint64_t v28 = *(void *)(v25 + 144) - (void)v27;
    unint64_t v72 = 0xBFF0000000000000;
    if ((int)(v28 >> 4) <= 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      int v53 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        LOWORD(v82) = 0;
        unint64_t v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v60);
        if (v60 != (char *)buf) {
          free(v60);
        }
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      unint64_t v54 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,findClosestPointOnRoad returned false", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_91;
      }
      goto LABEL_93;
    }
    double v29 = *v27;
    double v30 = v27[1];
    *(_OWORD *)uint64_t buf = 0uLL;
    *(void *)&long long v82 = 0;
    sub_1000F17A8(v18, (double *)buf, (double *)&buf[8], (double *)&v82, v8, v9, 0.0, v29, v30, 0.0);
    BOOL v31 = v16;
    int v32 = a2;
    uint64_t v33 = 0;
    uint64_t v34 = (v28 >> 4) - 1;
    double v35 = 0.0;
    double v36 = -1.0;
    double v37 = 0.0;
    while (1)
    {
      uint64_t v38 = *(void *)(v25 + 136) + v33;
      double v39 = *(double *)(v38 + 16);
      double v40 = *(double *)(v38 + 24);
      long long v82 = 0uLL;
      uint64_t v83 = 0;
      sub_1000F17A8(v18, (double *)&v82, (double *)&v82 + 1, (double *)&v83, v8, v9, 0.0, v39, v40, 0.0);
      double v41 = (*(double *)buf - *(double *)&v82) * (*(double *)buf - *(double *)&v82)
          + (*(double *)&buf[8] - *((double *)&v82 + 1)) * (*(double *)&buf[8] - *((double *)&v82 + 1));
      double v42 = 0.0 - *(double *)buf;
      if (v41 >= 0.001)
      {
        double v44 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v82 + 1) - *(double *)&buf[8])
             + v42 * (*(double *)&v82 - *(double *)buf))
            / v41;
        if (v44 < 0.0)
        {
          double v46 = v42 * v42 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
          double v44 = 0.0;
          goto LABEL_39;
        }
        if (v44 > 1.0)
        {
          double v46 = (0.0 - *(double *)&v82) * (0.0 - *(double *)&v82)
              + (0.0 - *((double *)&v82 + 1)) * (0.0 - *((double *)&v82 + 1));
          double v44 = 1.0;
          goto LABEL_39;
        }
        double v43 = (0.0 - (*(double *)buf + (*(double *)&v82 - *(double *)buf) * v44))
            * (0.0 - (*(double *)buf + (*(double *)&v82 - *(double *)buf) * v44));
        double v45 = 0.0 - (*(double *)&buf[8] + (*((double *)&v82 + 1) - *(double *)&buf[8]) * v44);
      }
      else
      {
        double v43 = v42 * v42;
        double v44 = 0.0;
        double v45 = 0.0 - *(double *)&buf[8];
      }
      double v46 = v43 + v45 * v45;
LABEL_39:
      double v47 = sqrt(v41);
      double v48 = sqrt(v46);
      BOOL v49 = v36 < 0.0;
      if (v48 < v36) {
        BOOL v49 = 1;
      }
      double v50 = v37 + v47 * v44;
      if (v49)
      {
        double v36 = v48;
        double v35 = v50;
      }
      double v37 = v37 + v47;
      *(_OWORD *)uint64_t buf = v82;
      v33 += 16;
      if (!--v34)
      {
        double v55 = v35 / v37;
        if (v37 < 0.001) {
          double v55 = 0.0;
        }
        unint64_t v72 = *(void *)&v55;
        a2 = v32;
        __int16 v16 = v31;
        if (!sub_101188D84(a1, (uint64_t)v84, (double **)&v73, 1, (double *)&v72, 1))
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102322AE8);
          }
          long long v58 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,interpolateOnRoad returned false", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_74;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1)
          {
LABEL_91:
            LOWORD(v82) = 0;
            uint64_t v61 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v61);
            if (v61 != (char *)buf) {
              free(v61);
            }
LABEL_74:
            int v52 = 1;
            goto LABEL_75;
          }
LABEL_93:
          dispatch_once(&qword_102419430, &stru_102322AE8);
          goto LABEL_91;
        }
        float v56 = v36;
        float v74 = v56;
        long long v77 = v94;
        float v57 = *(double *)&v95;
        float v76 = v57;
        unint64_t v78 = v72;
        __int16 v75 = 1;
        sub_1010AFE78((__n128 **)a2, &v73);
        int v52 = 0;
LABEL_75:
        if (SHIBYTE(v93) < 0) {
          operator delete(*((void **)&v92 + 1));
        }
LABEL_77:
        if (v73.n128_u64[1]) {
          sub_1000DB0A0((std::__shared_weak_count *)v73.n128_u64[1]);
        }
        BOOL v15 = v52 == 0;
        if (v52 || (v17 += 2, v17 == v16))
        {
LABEL_108:
          *(void *)uint64_t buf = &v79;
          sub_1000C5954((void ***)buf);
          return v15;
        }
        goto LABEL_26;
      }
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102322AE8);
  }
  id v13 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v66 = *(void *)(a1 + 8);
    LODWORD(v84[0]) = 134349056;
    *(void *)((char *)v84 + 4) = v66;
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v67);
    if (v67 != (char *)buf) {
      free(v67);
    }
  }
  return 0;
}

void sub_10138E028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  a37 = &a30;
  sub_1000C5954((void ***)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_10138E098(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  double v54 = a4;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    BOOL v15 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v75 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v17 = *(void *)(a1 + 8);
    LODWORD(v76) = 134349056;
    *(void *)((char *)&v76 + 4) = v17;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v18);
    goto LABEL_97;
  }
  if (*(void *)(a1 + 2600))
  {
    long long v53 = *(_OWORD *)(a3 + 56);
    id v7 = +[NSMutableArray array];
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_10138ED1C;
    v51[3] = &unk_102322A28;
    v51[4] = v7;
    v51[5] = a1;
    int v52 = v51;
    double v8 = operator new(0x28uLL);
    void *v8 = off_102322B18;
    v8[1] = a1;
    _OWORD v8[2] = &v53;
    void v8[3] = &v54;
    v8[4] = &v52;
    v71[3] = v8;
    ++*(_DWORD *)(a1 + 36);
    sub_1010B5194((uint64_t)v70, (uint64_t)v71);
    uint64_t v65 = 0;
    uint64_t v66 = &v65;
    uint64_t v67 = 0x2020000000;
    char v68 = 0;
    uint64_t v59 = 0;
    unint64_t v60 = &v59;
    uint64_t v61 = 0x3052000000;
    uint64_t v62 = sub_100177F70;
    double v63 = sub_1001776DC;
    dispatch_group_t v64 = 0;
    dispatch_group_t v64 = dispatch_group_create();
    uint64_t v55 = 0;
    float v56 = &v55;
    uint64_t v57 = 0x2020000000;
    uint64_t v58 = 0;
    *(void *)&long long v76 = _NSConcreteStackBlock;
    *((void *)&v76 + 1) = 3221225472;
    long long v77 = sub_101393860;
    unint64_t v78 = &unk_102301668;
    float v79 = &v65;
    long long v80 = &v59;
    uint64_t v81 = &v55;
    dispatch_group_enter((dispatch_group_t)v60[5]);
    double v9 = (void *)sub_100ECD600((uint64_t)v70, (uint64_t)&v76);
    __int16 v10 = v60[5];
    dispatch_time_t v11 = dispatch_time(0, 100000000);
    intptr_t v12 = dispatch_group_wait(v10, v11);
    v56[3] = v12;
    if (v12)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      id v13 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = v56[3];
        *(_DWORD *)uint64_t buf = 134349056;
        uint64_t v75 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        uint64_t v43 = v56[3];
        int v72 = 134349056;
        uint64_t v73 = v43;
        double v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      [v9 cancel];
    }
    else if (v60[5])
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      BOOL v21 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        LOWORD(v72) = 0;
        double v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }

      v60[5] = 0;
    }
    if (v56[3])
    {
      _Block_object_dispose(&v55, 8);
      _Block_object_dispose(&v59, 8);
      _Block_object_dispose(&v65, 8);
      sub_100ECD778(v70);
    }
    else
    {
      int v22 = *((unsigned __int8 *)v66 + 24);
      _Block_object_dispose(&v55, 8);
      _Block_object_dispose(&v59, 8);
      _Block_object_dispose(&v65, 8);
      sub_100ECD778(v70);
      if (!v22)
      {
        *(_DWORD *)(a1 + 40) = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        id v25 = [v7 countByEnumeratingWithState:&v47 objects:v69 count:16];
        if (v25)
        {
          uint64_t v26 = *(void *)v48;
LABEL_44:
          uint64_t v27 = 0;
          while (1)
          {
            if (*(void *)v48 != v26) {
              objc_enumerationMutation(v7);
            }
            unint64_t v28 = *(void **)(*((void *)&v47 + 1) + 8 * v27);
            if (v28)
            {
              unsigned __int8 v29 = [*(id *)(*((void *)&v47 + 1) + 8 * v27) isRoadPedestrianNavigable];
              unsigned int v30 = [v28 walkableSide];
              unsigned __int8 v31 = [v28 isRail];
              char v32 = v30 - 1 < 3 ? 1 : v29;
              char v33 = v32 & (v31 ^ 1);
            }
            else
            {
              char v33 = 0;
            }
            if (*(unsigned char *)(a1 + 2648) || (v33 & 1) != 0)
            {
              if (!*(unsigned char *)(a1 + 2648)) {
                char v33 = 1;
              }
              if ((v33 & 1) != 0
                || v28
                && ((unsigned int v34 = [v28 bikeableSide],
                     unsigned __int8 v35 = [v28 isRail],
                     v34 - 4 < 0xFFFFFFFD)
                  ? (char v36 = 1)
                  : (char v36 = v35),
                    (v36 & 1) == 0))
              {
                sub_10138EDE8(v28, (std::string **)&v76);
                uint64_t v37 = v76;
                if ((void)v76)
                {
                  if (sub_10039D6C0(v76)) {
                    sub_100D247D0(a2, &v76);
                  }
                  int v38 = 0;
                }
                else
                {
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_102322AE8);
                  }
                  double v39 = qword_102419438;
                  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)uint64_t buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_102322AE8);
                    }
                    LOWORD(v59) = 0;
                    double v40 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v40);
                    if (v40 != (char *)buf) {
                      free(v40);
                    }
                  }
                  sub_1000C59A8(a2);
                  int v38 = 1;
                }
                if (*((void *)&v76 + 1)) {
                  sub_1000DB0A0(*((std::__shared_weak_count **)&v76 + 1));
                }
                if (!v37) {
                  break;
                }
              }
            }
            if (v25 == (id)++v27)
            {
              id v41 = [v7 countByEnumeratingWithState:&v47 objects:v69 count:16];
              id v25 = v41;
              if (v41) {
                goto LABEL_44;
              }
              goto LABEL_83;
            }
          }
        }
        else
        {
LABEL_83:
          int v38 = 0;
        }
        BOOL v20 = v38 == 0;
        goto LABEL_40;
      }
    }
    ++*(_DWORD *)(a1 + 40);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    int v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, query failed (roadsWithinDistance)", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      LOWORD(v76) = 0;
      double v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    BOOL v20 = 0;
LABEL_40:
    sub_100ECD778(v71);
    return v20;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102322AE8);
  }
  unint64_t v19 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistanceLite,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    LOWORD(v76) = 0;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "%s\n", v18);
LABEL_97:
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return 0;
}

void sub_10138EC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  sub_100ECD778(&a63);
  sub_100ECD778(&a67);
  _Unwind_Resume(a1);
}

void *sub_10138ED1C(void *result, void *a2)
{
  if (a2)
  {
    if ((int v3 = result,
          uint64_t v4 = result[5],
          unsigned int v5 = [a2 isRoadPedestrianNavigable],
          unsigned int v6 = [a2 walkableSide],
          uint64_t result = [a2 isRail],
          ((v6 - 1 > 2) & ~v5) == 0)
      && !result
      || *(unsigned char *)(v4 + 2648)
      && (unsigned int v7 = [a2 bikeableSide],
          uint64_t result = [a2 isRail],
          (result & 1) == 0)
      && v7 - 4 >= 0xFFFFFFFD)
    {
      double v8 = (void *)v3[4];
      return [v8 addObject:a2];
    }
  }
  return result;
}

double sub_10138EDE8@<D0>(void *a1@<X2>, std::string **a2@<X8>)
{
  double result = sub_100D25C4C(a1, 1, a2);
  uint64_t v4 = *a2;
  if (*a2)
  {
    int v5 = v4[4].__r_.__value_.__r.__words[1];
    if (v5 >= 1)
    {
      double result = 3.70000005 * (double)v5;
      *(double *)&v4[4].__r_.__value_.__l.__data_ = result;
    }
  }
  return result;
}

uint64_t sub_10138EE44(uint64_t a1, uint64_t *a2, uint64_t **a3, int a4, int a5, double a6, double a7)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v29 = *(void *)(a1 + 8);
      LODWORD(v33) = 134349056;
      *(void *)((char *)&v33 + 4) = v29;
      unsigned int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
    return 0;
  }
  double v9 = *a3;
  if (!*a3) {
    return 0;
  }
  double v12 = a6;
  if (a4)
  {
    double v15 = 1.0 - a6;
    sub_10039C4B4(*a3);
    double v12 = *((double *)v9 + 5);
  }
  else
  {
    sub_10039C4B4(*a3);
    double v15 = *((double *)v9 + 5);
  }
  if (v15 * v12 > a7) {
    return 1;
  }
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  unint64_t v19 = *a3;
  BOOL v20 = (std::__shared_weak_count *)a3[1];
  v32[0] = v19;
  v32[1] = (uint64_t *)v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = sub_10138F2F4(a1, v32, a4, (uint64_t *)&v33, a5, a7 - v15 * v12);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  if (v18)
  {
    uint64_t v22 = *((void *)&v33 + 1);
    for (uint64_t i = v33; i != v22; i += 24)
    {
      *(_WORD *)&uint8_t buf[8] = 1;
      char v36 = 0;
      uint64_t v37 = 0;
      int v23 = *(void **)i;
      *(void *)uint64_t buf = **(void **)i;
      unint64_t v24 = *(std::__shared_weak_count **)(i + 8);
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        id v25 = v37;
        char v36 = v23;
        uint64_t v37 = v24;
        if (v25) {
          sub_1000DB0A0(v25);
        }
      }
      else
      {
        char v36 = v23;
        uint64_t v37 = 0;
      }
      uint8_t buf[8] = *(unsigned char *)(i + 16);
      if (buf[8]) {
        double v26 = 0.0;
      }
      else {
        double v26 = 1.0;
      }
      double v38 = v26;
      sub_101390368(a2, (uint64_t)buf);
      if (v37) {
        sub_1000DB0A0(v37);
      }
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v27 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, findAllDigitizedRoads returned false", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      unsigned __int8 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "%s\n", v31);
      if (v31 != buf) {
        free(v31);
      }
    }
  }
  *(void *)uint64_t buf = &v33;
  sub_101393FE4((void ***)buf);
  return v18;
}

void sub_10138F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  sub_101393FE4(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10138F2F4(uint64_t a1, uint64_t **a2, int a3, uint64_t *a4, int a5, double a6)
{
  uint64_t v6 = a1;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    double v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(v6 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v104 = *(void *)(v6 + 8);
      LODWORD(v144[0]) = 134349056;
      *(void *)((char *)v144 + 4) = v104;
      uint64_t v105 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v105);
      if (v105 != buf) {
        free(v105);
      }
    }
    return 0;
  }
  double v9 = *a2;
  if (!*(unsigned char *)(a1 + 33))
  {
    if (v9)
    {
      v144[0] = 0uLL;
      __asm { FMOV            V0.2D, #-1.0 }
      v144[1] = _Q0;
      uint64_t v145 = 0;
      uint64_t v146 = 0;
      unint64_t v147 = 0xBFF0000000000000;
      uint64_t v159 = 0;
      int v160 = 0;
      memset(&v157[32], 0, 32);
      __int16 v158 = 0;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v163 = 0u;
      memset(v164, 0, 27);
      memset(&v164[32], 0, 48);
      memset(v157, 0, 30);
      long long v156 = 0u;
      long long v155 = 0u;
      long long v154 = 0u;
      long long v153 = 0u;
      long long v152 = 0u;
      long long v151 = 0u;
      long long v150 = 0u;
      long long v149 = 0u;
      long long v148 = 0u;
      unint64_t v166 = 0xBFF0000000000000;
      uint64_t v165 = 0;
      uint64_t v20 = v9[17];
      uint64_t v21 = v9[18];
      if (a3)
      {
        uint64_t v22 = v21 - v20;
        if (v22)
        {
          uint64_t v23 = (v22 >> 4) - 1;
          unint64_t v24 = (double *)(v20 + 16 * v23);
LABEL_19:
          double v25 = *v24;
          *(double *)&long long v148 = v25;
          double v26 = *(double *)(v20 + 16 * v23 + 8);
          double v118 = v25;
          goto LABEL_23;
        }
        double v118 = 0.0;
      }
      else
      {
        uint64_t v23 = 0;
        if (v21 != v20)
        {
          unint64_t v24 = (double *)v9[17];
          goto LABEL_19;
        }
        double v118 = 0.0;
      }
      double v25 = 0.0;
      double v26 = 0.0;
LABEL_23:
      *((double *)&v148 + 1) = v26;
      __int16 v126 = (char *)&v126;
      int v127 = (uint64_t *)&v126;
      uint64_t v128 = 0;
      long long v125 = *(_OWORD *)v9;
      uint64_t v27 = sub_100D2036C((uint64_t **)(a1 + 2616), &v125, 0);
      unint64_t v28 = v27;
      int v119 = (uint64_t **)(v6 + 2616);
      uint64_t v122 = v6;
      int v121 = a3;
      if (v27)
      {
        uint64_t v29 = (_OWORD *)((char *)v27 + 8);
        uint64_t v30 = 8;
        if (a3)
        {
          uint64_t v30 = 32;
          uint64_t v29 = v27 + 2;
        }
        unsigned __int8 v31 = *(uint64_t **)((char *)v27 + v30);
        char v32 = (uint64_t *)*((void *)v29 + 1);
        if (v31 != v32)
        {
          do
          {
            uint64_t v33 = *v31;
            uint64_t v34 = (std::__shared_weak_count *)v31[1];
            if (v34)
            {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!v33) {
                goto LABEL_43;
              }
              memset(&buf[4], 0, 24);
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              if (!v33)
              {
LABEL_43:
                sub_10017FF2C((uint64_t *)&v126);
                int v37 = 1;
                if (!v34) {
                  goto LABEL_38;
                }
                goto LABEL_37;
              }
              memset(&buf[4], 0, 24);
            }
            unsigned __int8 v35 = (char *)operator new(0x48uLL);
            *((void *)v35 + 2) = v33;
            *((void *)v35 + 3) = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *((_DWORD *)v35 + 8) = 0;
            *((_WORD *)v35 + 18) = 1;
            *((_DWORD *)v35 + 10) = 0;
            *(_OWORD *)(v35 + 44) = *(_OWORD *)buf;
            *(_OWORD *)(v35 + 56) = *(_OWORD *)&buf[12];
            uint64_t v36 = (uint64_t)v126;
            *(void *)unsigned __int8 v35 = v126;
            *((void *)v35 + 1) = &v126;
            *(void *)(v36 + 8) = v35;
            __int16 v126 = v35;
            ++v128;
            if (v34) {
              sub_1000DB0A0(v34);
            }
            int v37 = 0;
            if (!v34) {
              goto LABEL_38;
            }
LABEL_37:
            sub_1000DB0A0(v34);
LABEL_38:
            v31 += 2;
            if (v31 == v32) {
              int v38 = 1;
            }
            else {
              int v38 = v37;
            }
          }
          while (v38 != 1);
        }
        uint64_t v6 = v122;
        if (v128)
        {
          *((void *)v28 + 7) = *(void *)(v122 + 8);
          char v39 = 1;
LABEL_64:
          long long v47 = a2;
          if (a5)
          {
            long long v48 = *a2;
            long long v49 = (std::__shared_weak_count *)a2[1];
            if (v49)
            {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
              *(void *)&uint8_t buf[8] = v49;
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              *(void *)&uint8_t buf[8] = 0;
            }
            *(void *)uint64_t buf = v48;
            char v50 = v121 ^ 1;
            uint8_t buf[16] = v121 ^ 1;
            unint64_t v51 = a4[1];
            if (v51 >= a4[2])
            {
              uint64_t v53 = sub_101394084(a4, (uint64_t)buf);
            }
            else
            {
              *(void *)unint64_t v51 = v48;
              uint64_t v52 = *(void *)&buf[8];
              *(void *)(v51 + 8) = *(void *)&buf[8];
              if (v52)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
                char v50 = buf[16];
              }
              *(unsigned char *)(v51 + 16) = v50;
              uint64_t v53 = v51 + 24;
            }
            a4[1] = v53;
            if (*(void *)&buf[8]) {
              sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
            }
            if (v49) {
              sub_1000DB0A0(v49);
            }
          }
          char v120 = v39;
          double v54 = v127;
          if (v127 != (uint64_t *)&v126)
          {
            while (1)
            {
              uint64_t v55 = (void *)v54[2];
              if (*v55 != **v47)
              {
                uint64_t v57 = v55 + 17;
                float v56 = (double *)v55[17];
                if ((double *)v57[1] == v56)
                {
                  double v58 = 0.0;
                  double v59 = 0.0;
                }
                else
                {
                  double v58 = *v56;
                  double v59 = v56[1];
                }
                BOOL v60 = sub_1004BABDC(v25, v26, v58, v59, 0.0000001);
                uint64_t v61 = v54[2];
                if (v60)
                {
                  uint64_t v62 = (std::__shared_weak_count *)v54[3];
                  if (v62)
                  {
                    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                    unint64_t v63 = a4[1];
                    unint64_t v64 = a4[2];
                    if (v63 < v64)
                    {
                      *(void *)unint64_t v63 = v61;
                      *(void *)(v63 + 8) = v62;
                      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                      goto LABEL_90;
                    }
LABEL_91:
                    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *a4) >> 3);
                    unint64_t v69 = v68 + 1;
                    if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_1001D7FD4();
                    }
                    unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *a4) >> 3);
                    if (2 * v70 > v69) {
                      unint64_t v69 = 2 * v70;
                    }
                    if (v70 >= 0x555555555555555) {
                      unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v71 = v69;
                    }
                    *(void *)__int16 v168 = a4 + 2;
                    if (v71) {
                      int v72 = sub_1000DA5D8((uint64_t)(a4 + 2), v71);
                    }
                    else {
                      int v72 = 0;
                    }
                    uint64_t v75 = (uint64_t *)&v72[24 * v68];
                    *(void *)uint64_t buf = v72;
                    *(void *)&uint8_t buf[8] = v75;
                    *(void *)&unsigned char buf[24] = &v72[24 * v71];
                    *uint64_t v75 = v61;
                    v75[1] = (uint64_t)v62;
                    if (v62) {
                      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    v72[24 * v68 + 16] = 1;
                    *(void *)&uint8_t buf[16] = v75 + 3;
                    sub_1013941AC(a4, buf);
LABEL_124:
                    uint64_t v76 = a4[1];
                    sub_101394358((void **)buf);
                    long long v47 = a2;
LABEL_125:
                    a4[1] = v76;
                    if (v62)
                    {
                      sub_1000DB0A0(v62);
                      sub_1000DB0A0(v62);
                    }
                    goto LABEL_127;
                  }
                  unint64_t v63 = a4[1];
                  unint64_t v64 = a4[2];
                  if (v63 >= v64) {
                    goto LABEL_91;
                  }
                  *(void *)unint64_t v63 = v61;
                  *(void *)(v63 + 8) = 0;
LABEL_90:
                  *(unsigned char *)(v63 + 16) = 1;
LABEL_111:
                  uint64_t v76 = v63 + 24;
                  goto LABEL_125;
                }
                uint64_t v65 = *(void *)(v61 + 144);
                if (v65 == *(void *)(v61 + 136))
                {
                  double v66 = 0.0;
                  double v67 = 0.0;
                }
                else
                {
                  double v66 = *(double *)(v65 - 16);
                  double v67 = *(double *)(v65 - 8);
                }
                if (sub_1004BABDC(v25, v26, v66, v67, 0.0000001)) {
                  break;
                }
              }
LABEL_127:
              double v54 = (uint64_t *)v54[1];
              if (v54 == (uint64_t *)&v126) {
                goto LABEL_128;
              }
            }
            uint64_t v73 = v54[2];
            uint64_t v62 = (std::__shared_weak_count *)v54[3];
            if (v62)
            {
              atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v63 = a4[1];
              unint64_t v74 = a4[2];
              if (v63 < v74)
              {
                *(void *)unint64_t v63 = v73;
                *(void *)(v63 + 8) = v62;
                atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_110:
                *(unsigned char *)(v63 + 16) = 0;
                goto LABEL_111;
              }
            }
            else
            {
              unint64_t v63 = a4[1];
              unint64_t v74 = a4[2];
              if (v63 < v74)
              {
                *(void *)unint64_t v63 = v73;
                *(void *)(v63 + 8) = 0;
                goto LABEL_110;
              }
            }
            unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *a4) >> 3);
            unint64_t v78 = v77 + 1;
            if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *a4) >> 3);
            if (2 * v79 > v78) {
              unint64_t v78 = 2 * v79;
            }
            if (v79 >= 0x555555555555555) {
              unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v80 = v78;
            }
            *(void *)__int16 v168 = a4 + 2;
            if (v80) {
              uint64_t v81 = sub_1000DA5D8((uint64_t)(a4 + 2), v80);
            }
            else {
              uint64_t v81 = 0;
            }
            long long v82 = (uint64_t *)&v81[24 * v77];
            *(void *)uint64_t buf = v81;
            *(void *)&uint8_t buf[8] = v82;
            *(void *)&unsigned char buf[24] = &v81[24 * v80];
            uint64_t *v82 = v73;
            v82[1] = (uint64_t)v62;
            if (v62) {
              atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v81[24 * v77 + 16] = 0;
            *(void *)&uint8_t buf[16] = v82 + 3;
            sub_1013941AC(a4, buf);
            goto LABEL_124;
          }
LABEL_128:
          if ((v120 & 1) == 0 && a4[1] != *a4)
          {
            uint64_t v83 = sub_100D2036C(v119, &v125, 1);
            uint64_t v84 = (uint64_t)v83;
            if (v83)
            {
              sub_100D204B4((uint64_t)v83, v121 ^ 1);
              *(void *)(v84 + 56) = *(void *)(v122 + 8);
              uint64_t v85 = *a4;
              uint64_t v86 = a4[1];
              if (*a4 != v86)
              {
                do
                {
                  unint64_t v87 = *(void **)v85;
                  *(void *)uint64_t buf = *(void *)v85;
                  uint64_t v88 = *(void *)(v85 + 8);
                  *(void *)&uint8_t buf[8] = v88;
                  if (v88) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint8_t buf[16] = *(unsigned char *)(v85 + 16);
                  if (v87)
                  {
                    if (*v87 == **a2)
                    {
                      int v89 = 27;
                    }
                    else
                    {
                      if (v121)
                      {
                        *(unsigned char *)uint64_t v84 = 1;
                        long long v90 = (uint64_t *)(v84 + 32);
                      }
                      else
                      {
                        *(unsigned char *)(v84 + 1) = 1;
                        long long v90 = (uint64_t *)(v84 + 8);
                      }
                      sub_100D247D0(v90, (long long *)buf);
                      int v89 = 0;
                    }
                  }
                  else
                  {
                    sub_100D204B4(v84, v121 ^ 1);
                    *(void *)(v84 + 56) = 0xBFF0000000000000;
                    int v89 = 26;
                  }
                  if (*(void *)&buf[8]) {
                    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
                  }
                  if (v89 != 27 && v89) {
                    break;
                  }
                  v85 += 24;
                }
                while (v85 != v86);
              }
            }
            else
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102322AE8);
              }
              long long v91 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                uint64_t v92 = *(void *)(v122 + 8);
                *(_DWORD *)uint64_t buf = 134217984;
                *(void *)&uint8_t buf[4] = v92;
                _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102322AE8);
                }
                uint64_t v115 = *(void *)(v122 + 8);
                LODWORD(v131[0]) = 134217984;
                *(uint64_t *)((char *)v131 + 4) = v115;
                __int16 v116 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v116);
                if (v116 != buf) {
                  free(v116);
                }
              }
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == a5)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102322AE8);
            }
            long long v93 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v94 = *(void *)(v122 + 8);
              uint64_t v95 = **a2;
              long long v96 = (uint64_t *)(*a2)[17];
              __int16 v97 = (uint64_t *)(*a2)[18];
              if (v97 == v96)
              {
                uint64_t v100 = 0;
                uint64_t v98 = 0;
                uint64_t v99 = 0;
                uint64_t v101 = 0;
              }
              else
              {
                uint64_t v98 = *v96;
                uint64_t v99 = v96[1];
                uint64_t v100 = *(v97 - 2);
                uint64_t v101 = *(v97 - 1);
              }
              *(_DWORD *)uint64_t buf = 134351105;
              *(void *)&uint8_t buf[4] = v94;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&buf[14] = v95;
              *(_WORD *)&buf[22] = 2050;
              *(void *)&unsigned char buf[24] = v128;
              *(_WORD *)__int16 v168 = 2049;
              *(void *)&v168[2] = v98;
              __int16 v169 = 2049;
              uint64_t v170 = v99;
              __int16 v171 = 2049;
              uint64_t v172 = v100;
              __int16 v173 = 2049;
              uint64_t v174 = v101;
              __int16 v175 = 2049;
              double v176 = v118;
              __int16 v177 = 2049;
              double v178 = v26;
              _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102322AE8);
              }
              uint64_t v106 = *(void *)(v122 + 8);
              uint64_t v107 = **a2;
              int v108 = (uint64_t *)(*a2)[17];
              uint64_t v109 = (uint64_t *)(*a2)[18];
              if (v109 == v108)
              {
                uint64_t v112 = 0;
                uint64_t v110 = 0;
                uint64_t v111 = 0;
                uint64_t v113 = 0;
              }
              else
              {
                uint64_t v110 = *v108;
                uint64_t v111 = v108[1];
                uint64_t v112 = *(v109 - 2);
                uint64_t v113 = *(v109 - 1);
              }
              LODWORD(v131[0]) = 134351105;
              *(uint64_t *)((char *)v131 + 4) = v106;
              WORD2(v131[1]) = 2049;
              *(uint64_t *)((char *)&v131[1] + 6) = v107;
              HIWORD(v131[2]) = 2050;
              v131[3] = v128;
              __int16 v132 = 2049;
              uint64_t v133 = v110;
              __int16 v134 = 2049;
              uint64_t v135 = v111;
              __int16 v136 = 2049;
              uint64_t v137 = v112;
              __int16 v138 = 2049;
              uint64_t v139 = v113;
              __int16 v140 = 2049;
              double v141 = v118;
              __int16 v142 = 2049;
              double v143 = v26;
              __int16 v114 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v114);
              if (v114 != buf) {
                free(v114);
              }
            }
          }
          uint64_t v11 = 1;
LABEL_169:
          sub_10017FF2C((uint64_t *)&v126);
          return v11;
        }
      }
      else if (v128)
      {
LABEL_63:
        char v39 = 0;
        goto LABEL_64;
      }
      memset(v131, 0, 24);
      if (sub_10138E098(v6, v131, (uint64_t)v144, a6))
      {
        double v40 = (uint64_t *)v131[0];
        uint64_t v41 = v131[1];
        if (v131[1] != v131[0]) {
          goto LABEL_50;
        }
        double v46 = fmin(a6 * 4.0, 250.0);
        if (v46 <= a6)
        {
LABEL_62:
          *(void *)uint64_t buf = v131;
          sub_1000C5954((void ***)buf);
          goto LABEL_63;
        }
        if (sub_10138E098(v6, v131, (uint64_t)v144, v46))
        {
          double v40 = (uint64_t *)v131[0];
          uint64_t v41 = v131[1];
LABEL_50:
          while (v40 != (uint64_t *)v41)
          {
            memset(&buf[4], 0, 24);
            uint64_t v42 = *v40;
            uint64_t v43 = (std::__shared_weak_count *)v40[1];
            if (v43) {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            double v44 = (char *)operator new(0x48uLL);
            *((void *)v44 + 2) = v42;
            *((void *)v44 + 3) = v43;
            if (v43) {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *((_DWORD *)v44 + 8) = 0;
            *((_WORD *)v44 + 18) = 1;
            *((_DWORD *)v44 + 10) = 0;
            *(_OWORD *)(v44 + 44) = *(_OWORD *)buf;
            *(_OWORD *)(v44 + 56) = *(_OWORD *)&buf[12];
            uint64_t v45 = (uint64_t)v126;
            *(void *)double v44 = v126;
            *((void *)v44 + 1) = &v126;
            *(void *)(v45 + 8) = v44;
            __int16 v126 = v44;
            ++v128;
            if (v43) {
              sub_1000DB0A0(v43);
            }
            v40 += 2;
          }
          goto LABEL_62;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        long long v102 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102322AE8);
          }
          int v117 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v117);
          if (v117 != buf) {
            free(v117);
          }
        }
      }
      *(void *)uint64_t buf = v131;
      sub_1000C5954((void ***)buf);
      uint64_t v11 = 0;
      goto LABEL_169;
    }
    return 0;
  }
  __int16 v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v129 = *a2;
  __int16 v130 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = sub_10139066C(a1, (uint64_t *)&v129, a3, a4, a5);
  if (v130) {
    sub_1000DB0A0(v130);
  }
  return v11;
}

void sub_10139028C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  STACK[0x2B0] = (unint64_t)&a29;
  sub_1000C5954((void ***)&STACK[0x2B0]);
  sub_10017FF2C(&a24);
  _Unwind_Resume(a1);
}

double sub_101390368(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x38uLL);
  _DWORD v4[2] = *(void *)a2;
  *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  void v4[4] = *(void *)(a2 + 16);
  v4[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a2 + 32);
  *((double *)v4 + 6) = result;
  uint64_t v7 = *a1;
  *uint64_t v4 = *a1;
  v4[1] = a1;
  *(void *)(v7 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

uint64_t sub_1013903E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v1 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection - Code not implemented", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_16:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
LABEL_18:
      dispatch_once(&qword_102419430, &stru_102322AE8);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    int v3 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t sub_10139066C(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v15 = *(void *)(a1 + 8);
    int v97 = 134349056;
    uint64_t v98 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v16);
    goto LABEL_138;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_137;
    }
    goto LABEL_152;
  }
  if (*a2)
  {
    uint64_t v94 = (char *)&v94;
    uint64_t v95 = (uint64_t *)&v94;
    uint64_t v96 = 0;
    long long v91 = 0;
    uint64_t v92 = 0;
    int v11 = a5 ^ 1;
    uint64_t v93 = 0;
    if (a3)
    {
      if ((sub_100D24064(v6, a2, (uint64_t *)&v91, v11) & 1) == 0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        double v12 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToEndOfThisRoad returned false", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_55;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_141:
          LOWORD(v97) = 0;
          unint64_t v79 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v79);
          if (v79 != buf) {
            free(v79);
          }
LABEL_55:
          uint64_t v19 = 0;
LABEL_134:
          *(void *)uint64_t buf = &v91;
          sub_1000C5954((void ***)buf);
          sub_10017FF2C((uint64_t *)&v94);
          return v19;
        }
LABEL_153:
        dispatch_once(&qword_102419430, &stru_102322AE8);
        goto LABEL_141;
      }
    }
    else if ((sub_100D248EC(v6, a2, (uint64_t *)&v91, v11) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      unint64_t v28 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToStartOfThisRoad returned false", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_141;
      }
      goto LABEL_153;
    }
    int v90 = a5;
    uint64_t v89 = a1;
    uint64_t v20 = v91;
    uint64_t v21 = v92;
    if (v91 != v92)
    {
      while (1)
      {
        uint64_t v22 = *v20;
        uint64_t v23 = (std::__shared_weak_count *)v20[1];
        if (v23) {
          break;
        }
        if (v22)
        {
          memset(&buf[4], 0, 24);
LABEL_41:
          unint64_t v24 = (char *)operator new(0x48uLL);
          *((void *)v24 + 2) = v22;
          *((void *)v24 + 3) = v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((_DWORD *)v24 + 8) = 0;
          *((_WORD *)v24 + 18) = 1;
          *((_DWORD *)v24 + 10) = 0;
          *(_OWORD *)(v24 + 44) = *(_OWORD *)buf;
          *(_OWORD *)(v24 + 56) = *(_OWORD *)&buf[12];
          uint64_t v25 = (uint64_t)v94;
          *(void *)unint64_t v24 = v94;
          *((void *)v24 + 1) = &v94;
          *(void *)(v25 + 8) = v24;
          uint64_t v94 = v24;
          ++v96;
          if (!v23) {
            goto LABEL_46;
          }
          sub_1000DB0A0(v23);
LABEL_45:
          sub_1000DB0A0(v23);
        }
LABEL_46:
        v20 += 2;
        if (v20 == v21) {
          goto LABEL_47;
        }
      }
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v22)
      {
        memset(&buf[4], 0, 24);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_41;
      }
      goto LABEL_45;
    }
LABEL_47:
    if (a5)
    {
      uint64_t v26 = *a2;
      uint64_t v27 = (std::__shared_weak_count *)a2[1];
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)&uint8_t buf[8] = v27;
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(void *)&uint8_t buf[8] = 0;
      }
      *(void *)uint64_t buf = v26;
      char v29 = a3 ^ 1;
      uint8_t buf[16] = a3 ^ 1;
      unint64_t v30 = a4[1];
      if (v30 >= a4[2])
      {
        uint64_t v32 = sub_101394084(a4, (uint64_t)buf);
      }
      else
      {
        *(void *)unint64_t v30 = v26;
        uint64_t v31 = *(void *)&buf[8];
        *(void *)(v30 + 8) = *(void *)&buf[8];
        if (v31)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          char v29 = buf[16];
        }
        *(unsigned char *)(v30 + 16) = v29;
        uint64_t v32 = v30 + 24;
      }
      a4[1] = v32;
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v27) {
        sub_1000DB0A0(v27);
      }
    }
    uint64_t v33 = *(void *)(*a2 + 136);
    uint64_t v34 = *(void *)(*a2 + 144);
    if (a3)
    {
      uint64_t v35 = v34 - v33;
      if (v35)
      {
        uint64_t v36 = (v35 >> 4) - 1;
        int v37 = (double *)(v33 + 16 * v36);
LABEL_71:
        double v38 = *v37;
        double v39 = *(double *)(v33 + 16 * v36 + 8);
        goto LABEL_73;
      }
    }
    else if (v34 != v33)
    {
      uint64_t v36 = 0;
      int v37 = *(double **)(*a2 + 136);
      goto LABEL_71;
    }
    double v38 = 0.0;
    double v39 = 0.0;
LABEL_73:
    double v40 = v95;
    if (v95 == (uint64_t *)&v94)
    {
LABEL_124:
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == v90)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        unint64_t v69 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v70 = *(void *)(v89 + 8);
          uint64_t v71 = *(void *)*a2;
          int v72 = *(uint64_t **)(*a2 + 136);
          uint64_t v73 = *(uint64_t **)(*a2 + 144);
          if (v73 == v72)
          {
            uint64_t v76 = 0;
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            uint64_t v77 = 0;
          }
          else
          {
            uint64_t v74 = *v72;
            uint64_t v75 = v72[1];
            uint64_t v76 = *(v73 - 2);
            uint64_t v77 = *(v73 - 1);
          }
          *(_DWORD *)uint64_t buf = 134351105;
          *(void *)&uint8_t buf[4] = v70;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&buf[14] = v71;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&unsigned char buf[24] = v96;
          *(_WORD *)__int16 v116 = 2049;
          *(void *)&v116[2] = v74;
          __int16 v117 = 2049;
          uint64_t v118 = v75;
          __int16 v119 = 2049;
          uint64_t v120 = v76;
          __int16 v121 = 2049;
          uint64_t v122 = v77;
          __int16 v123 = 2049;
          double v124 = v38;
          __int16 v125 = 2049;
          double v126 = v39;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads in buffer, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102322AE8);
          }
          uint64_t v80 = *(void *)(v89 + 8);
          uint64_t v81 = *(void *)*a2;
          long long v82 = *(uint64_t **)(*a2 + 136);
          uint64_t v83 = *(uint64_t **)(*a2 + 144);
          if (v83 == v82)
          {
            uint64_t v86 = 0;
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            uint64_t v87 = 0;
          }
          else
          {
            uint64_t v84 = *v82;
            uint64_t v85 = v82[1];
            uint64_t v86 = *(v83 - 2);
            uint64_t v87 = *(v83 - 1);
          }
          int v97 = 134351105;
          uint64_t v98 = v80;
          __int16 v99 = 2049;
          uint64_t v100 = v81;
          __int16 v101 = 2050;
          uint64_t v102 = v96;
          __int16 v103 = 2049;
          uint64_t v104 = v84;
          __int16 v105 = 2049;
          uint64_t v106 = v85;
          __int16 v107 = 2049;
          uint64_t v108 = v86;
          __int16 v109 = 2049;
          uint64_t v110 = v87;
          __int16 v111 = 2049;
          double v112 = v38;
          __int16 v113 = 2049;
          double v114 = v39;
          uint64_t v88 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v88);
          if (v88 != buf) {
            free(v88);
          }
        }
      }
      uint64_t v19 = 1;
      goto LABEL_134;
    }
    while (1)
    {
      uint64_t v41 = (void *)v40[2];
      if (*v41 != *(void *)*a2)
      {
        uint64_t v43 = v41 + 17;
        uint64_t v42 = (double *)v41[17];
        if ((double *)v43[1] == v42)
        {
          double v44 = 0.0;
          double v45 = 0.0;
        }
        else
        {
          double v44 = *v42;
          double v45 = v42[1];
        }
        BOOL v46 = sub_1004BABDC(v38, v39, v44, v45, 0.0000001);
        uint64_t v47 = v40[2];
        if (v46)
        {
          long long v48 = (std::__shared_weak_count *)v40[3];
          if (v48)
          {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v49 = a4[1];
            unint64_t v50 = a4[2];
            if (v49 < v50)
            {
              *(void *)unint64_t v49 = v47;
              *(void *)(v49 + 8) = v48;
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_86;
            }
LABEL_87:
            unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *a4) >> 3);
            unint64_t v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *a4) >> 3);
            if (2 * v56 > v55) {
              unint64_t v55 = 2 * v56;
            }
            if (v56 >= 0x555555555555555) {
              unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v57 = v55;
            }
            *(void *)__int16 v116 = a4 + 2;
            if (v57) {
              double v58 = sub_1000DA5D8((uint64_t)(a4 + 2), v57);
            }
            else {
              double v58 = 0;
            }
            uint64_t v61 = (uint64_t *)&v58[24 * v54];
            *(void *)uint64_t buf = v58;
            *(void *)&uint8_t buf[8] = v61;
            *(void *)&unsigned char buf[24] = &v58[24 * v57];
            *uint64_t v61 = v47;
            v61[1] = (uint64_t)v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v58[24 * v54 + 16] = 1;
            *(void *)&uint8_t buf[16] = v61 + 3;
            sub_1013941AC(a4, buf);
LABEL_120:
            uint64_t v62 = a4[1];
            sub_101394358((void **)buf);
LABEL_121:
            a4[1] = v62;
            if (v48)
            {
              sub_1000DB0A0(v48);
              sub_1000DB0A0(v48);
            }
            goto LABEL_123;
          }
          unint64_t v49 = a4[1];
          unint64_t v50 = a4[2];
          if (v49 >= v50) {
            goto LABEL_87;
          }
          *(void *)unint64_t v49 = v47;
          *(void *)(v49 + 8) = 0;
LABEL_86:
          *(unsigned char *)(v49 + 16) = 1;
LABEL_107:
          uint64_t v62 = v49 + 24;
          goto LABEL_121;
        }
        uint64_t v51 = *(void *)(v47 + 144);
        if (v51 == *(void *)(v47 + 136))
        {
          double v52 = 0.0;
          double v53 = 0.0;
        }
        else
        {
          double v52 = *(double *)(v51 - 16);
          double v53 = *(double *)(v51 - 8);
        }
        if (sub_1004BABDC(v38, v39, v52, v53, 0.0000001)) {
          break;
        }
      }
LABEL_123:
      double v40 = (uint64_t *)v40[1];
      if (v40 == (uint64_t *)&v94) {
        goto LABEL_124;
      }
    }
    uint64_t v59 = v40[2];
    long long v48 = (std::__shared_weak_count *)v40[3];
    if (v48)
    {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v49 = a4[1];
      unint64_t v60 = a4[2];
      if (v49 < v60)
      {
        *(void *)unint64_t v49 = v59;
        *(void *)(v49 + 8) = v48;
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_106:
        *(unsigned char *)(v49 + 16) = 0;
        goto LABEL_107;
      }
    }
    else
    {
      unint64_t v49 = a4[1];
      unint64_t v60 = a4[2];
      if (v49 < v60)
      {
        *(void *)unint64_t v49 = v59;
        *(void *)(v49 + 8) = 0;
        goto LABEL_106;
      }
    }
    unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *a4) >> 3);
    unint64_t v64 = v63 + 1;
    if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *a4) >> 3);
    if (2 * v65 > v64) {
      unint64_t v64 = 2 * v65;
    }
    if (v65 >= 0x555555555555555) {
      unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v66 = v64;
    }
    *(void *)__int16 v116 = a4 + 2;
    if (v66) {
      double v67 = sub_1000DA5D8((uint64_t)(a4 + 2), v66);
    }
    else {
      double v67 = 0;
    }
    unint64_t v68 = (uint64_t *)&v67[24 * v63];
    *(void *)uint64_t buf = v67;
    *(void *)&uint8_t buf[8] = v68;
    *(void *)&unsigned char buf[24] = &v67[24 * v66];
    uint64_t *v68 = v59;
    v68[1] = (uint64_t)v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v67[24 * v63 + 16] = 0;
    *(void *)&uint8_t buf[16] = v68 + 3;
    sub_1013941AC(a4, buf);
    goto LABEL_120;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102322AE8);
  }
  uint64_t v18 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_137:
      LOWORD(v97) = 0;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "%s\n", v16);
LABEL_138:
      if (v16 != buf) {
        free(v16);
      }
      return 0;
    }
LABEL_152:
    dispatch_once(&qword_102419430, &stru_102322AE8);
    goto LABEL_137;
  }
  return 0;
}

void sub_101391464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a13;
  sub_1000C5954(&a19);
  sub_10017FF2C(&a16);
  _Unwind_Resume(a1);
}

unint64_t sub_1013914FC(uint64_t a1, uint64_t a2, uint64_t **a3, int a4, double a5, double a6)
{
  uint64_t v13 = *a3;
  if (!*a3)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_112;
    }
    goto LABEL_123;
  }
  sub_10039C4B4(*a3);
  double v14 = *((double *)v13 + 5);
  if (v14 <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_112;
    }
LABEL_123:
    dispatch_once(&qword_102419430, &stru_102322AE8);
LABEL_112:
    LOWORD(v66[0]) = 0;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v21);
    goto LABEL_113;
  }
  uint64_t v15 = *a3;
  if ((int)((unint64_t)((*a3)[18] - (*a3)[17]) >> 4) <= 1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = **a3;
      uint64_t v18 = (int)(((*a3)[18] - (*a3)[17]) >> 4);
      *(_DWORD *)uint64_t buf = 134283777;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v68 = 2050;
      uint64_t v69 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v19 = **a3;
    uint64_t v20 = (int)(((*a3)[18] - (*a3)[17]) >> 4);
    LODWORD(v66[0]) = 134283777;
    *(uint64_t *)((char *)v66 + 4) = v19;
    WORD2(v66[1]) = 2050;
    *(uint64_t *)((char *)&v66[1] + 6) = v20;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v21);
LABEL_113:
    if (v21 != buf) {
      free(v21);
    }
LABEL_24:
    LOBYTE(v24) = 0;
    return v24 & 1;
  }
  double v26 = fabs(a6);
  int v27 = *((unsigned __int8 *)a3 + 20);
  double v28 = 1.0 - a5;
  if (*((unsigned char *)a3 + 20))
  {
    if (a6 < 0.0) {
      double v28 = a5;
    }
    double v29 = v28 * v14;
    if (v28 * v14 <= v26)
    {
      char v61 = 0;
      if (a6 < 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      goto LABEL_42;
    }
  }
  else
  {
    if (a6 >= 0.0) {
      double v28 = a5;
    }
    double v29 = v28 * v14;
    if (v28 * v14 <= v26)
    {
      char v61 = 0;
      if (a6 >= 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      goto LABEL_42;
    }
  }
  double v31 = a6 / v14;
  if (!*((unsigned char *)a3 + 20)) {
    double v31 = -v31;
  }
  double v30 = v31 + a5;
  char v61 = 1;
LABEL_42:
  memset(v66, 0, 24);
  if ((a4 & 0x80000000) == 0 && v29 <= v26)
  {
    uint64_t v32 = (std::__shared_weak_count *)a3[1];
    v65[0] = v15;
    v65[1] = (uint64_t *)v32;
    if (v32)
    {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      int v27 = *((unsigned __int8 *)a3 + 20);
    }
    char v33 = sub_10138F2F4(a1, v65, v27 != 0, v66, 1, 10.0);
    if (v32) {
      sub_1000DB0A0(v32);
    }
    if ((v33 & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v34 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,moveOnRoad,findAllDigitizedRoads returned false", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        LOWORD(v64) = 0;
        unint64_t v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v60);
        if (v60 != buf) {
          free(v60);
        }
      }
    }
  }
  if (a6 >= 0.0 || (uint64_t v35 = v66[0], v36 = v66[1], v66[0] == v66[1]))
  {
    LODWORD(v24) = -1;
  }
  else
  {
    int v37 = 0;
    LODWORD(v24) = -1;
    do
    {
      double v39 = *(void **)v35;
      double v38 = *(std::__shared_weak_count **)(v35 + 8);
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = a2;
      while (1)
      {
        uint64_t v40 = *(void *)(v40 + 8);
        if (v40 == a2) {
          break;
        }
        if (*(void *)(v40 + 16) == *v39 && (*(unsigned char *)(v40 + 24) & 1) == *(unsigned char *)(v35 + 16))
        {
          LODWORD(v24) = v37;
          break;
        }
      }
      if (v38) {
        sub_1000DB0A0(v38);
      }
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      ++v37;
      v35 += 24;
    }
    while (v35 != v36);
  }
  if ((v61 & 1) != 0
    || (a6 < 0.0 ? (BOOL v46 = v24 == -1) : (BOOL v46 = 0),
        !v46 ? (int v47 = 0) : (int v47 = 1),
        a4 < 0 || (uint64_t v48 = v66[0], v66[1] == v66[0]) || v47))
  {
    uint64_t v42 = (std::__shared_weak_count *)a3[1];
    v62[0] = *a3;
    v62[1] = &v42->__vftable;
    double v63 = 0.0;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v24) = sub_101391FB4((double *)(a1 + 56), v62, (double *)&v64, &v63, v30);
    if (v42) {
      sub_1000DB0A0(v42);
    }
    if (v24)
    {
      *((double *)a3 + 6) = v30;
      *((_OWORD *)a3 + 2) = v64;
      float v43 = v63;
      *((float *)a3 + 6) = v43;
      if (!*((unsigned char *)a3 + 20))
      {
        float v44 = v43 + 180.0;
        *((float *)a3 + 6) = v44;
        sub_100142F58(v44);
        *(float *)&double v45 = v45;
        *((_DWORD *)a3 + 6) = LODWORD(v45);
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v51 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRoadInternal,interpolateProjections returned false", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        uint64_t v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v59);
        if (v59 != buf) {
          free(v59);
        }
      }
    }
    int v52 = 0;
    goto LABEL_109;
  }
  double v49 = -v29;
  if (a6 < 0.0) {
    double v49 = v29;
  }
  double v50 = v49 + a6;
  if ((v24 & 0x80000000) != 0)
  {
    unsigned int v53 = sub_100C4B484(a1 + 96);
    uint64_t v48 = v66[0];
    unint64_t v24 = v53 % (0xAAAAAAAAAAAAAAABLL * ((v66[1] - v66[0]) >> 3));
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v66[1] - v66[0]) >> 3) <= v24) {
      goto LABEL_108;
    }
    unint64_t v24 = v24;
  }
  unint64_t v54 = v48 + 24 * v24;
  int v55 = *(unsigned __int8 *)(v54 + 16);
  sub_100F0805C(a3, (uint64_t *)v54);
  char v56 = *(unsigned char *)(v66[0] + 24 * v24 + 16);
  *((unsigned char *)a3 + 20) = v56;
  if (v55)
  {
    double v30 = 0.0;
    if (a6 >= 0.0) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }
  float v57 = *((float *)a3 + 6) + 180.0;
  *((float *)a3 + 6) = v57;
  sub_100142F58(v57);
  *(float *)&double v58 = v58;
  *((_DWORD *)a3 + 6) = LODWORD(v58);
  double v30 = 1.0;
  if (a6 < 0.0)
  {
    char v56 = *(unsigned char *)(v66[0] + 24 * v24 + 16);
LABEL_107:
    *((unsigned char *)a3 + 20) = v56 ^ 1;
  }
LABEL_108:
  int v52 = 1;
  a6 = v50;
LABEL_109:
  *(void *)uint64_t buf = v66;
  sub_101393FE4((void ***)buf);
  if (v52) {
    LOBYTE(v24) = sub_1013914FC(a1, a2, a3, (a4 - 1), v30, a6);
  }
  return v24 & 1;
}

void sub_101391F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  sub_101393FE4(&a23);
  _Unwind_Resume(a1);
}

BOOL sub_101391FB4(double *a1, void **a2, double *a3, double *a4, double a5)
{
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  uint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v25 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__x[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)__x, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(__x, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if (v6 == 1) {
        return 1;
      }
      sub_10039C4B4(*a2);
      uint64_t v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == v6 - 1)
      {
        uint64_t v13 = (uint64_t)*a2;
        sub_10039C4B4((void *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(void *)(v13 + 136);
          double v14 = *a3;
          double v15 = a3[1];
          uint64_t v16 = *(double **)(v13 + 136);
LABEL_7:
          double v17 = v16[2];
          double v18 = v16[3];
          __x[0] = 0.0;
          uint64_t v55 = 0;
          __y[0] = 0.0;
          sub_1000F17A8(a1, __x, __y, (double *)&v55, v14, v15, 0.0, v17, v18, 0.0);
          double v19 = atan2(__y[0], __x[0]);
          if (v19 < 0.0) {
            double v19 = v19 + 6.28318531;
          }
          double v20 = v19 * 57.2957795;
          goto LABEL_54;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + 16 * v12);
          double v20 = sub_10071B58C(a1, *(double *)(*(void *)(v13 + 136) + 16 * v12 - 16), *(double *)(*(void *)(v13 + 136) + 16 * v12 - 8), *a3, a3[1]);
LABEL_54:
          *a4 = v20;
          return 1;
        }
        int v27 = (double *)v5[20];
        double v28 = (double *)v5[21];
        if (v27 != v28)
        {
          uint64_t v29 = 0;
          double v30 = 0.0;
          int v31 = 2;
          while (1)
          {
            double v32 = *v27 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v30 + v32) < 0.000001) {
              break;
            }
            if (v30 + v32 > a5)
            {
              double v47 = (a5 - v30) / v32;
              uint64_t v48 = (double *)(*(void *)(v13 + 136) + v29);
              double v49 = v48[1];
              double v50 = v48[3];
              *a3 = *v48 + (v48[2] - *v48) * v47;
              long double v51 = v49 + sub_1011717B4(v49, v50) * v47;
              a3[1] = v51;
              sub_10005B720(v51);
              *((void *)a3 + 1) = v52;
              uint64_t v16 = (double *)(*(void *)(v13 + 136) + v29);
              double v14 = *v16;
              double v15 = v16[1];
              goto LABEL_7;
            }
            ++v27;
            v29 += 16;
            ++v31;
            double v30 = v30 + v32;
            if (v27 == v28) {
              goto LABEL_45;
            }
          }
          if (v31 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + v29 + 16);
            uint64_t v34 = (double *)(*(void *)(v13 + 136) + v29);
            double v35 = *v34;
            double v36 = v34[1];
            double v37 = *a3;
            double v38 = a3[1];
            __x[0] = 0.0;
            uint64_t v55 = 0;
            __y[0] = 0.0;
            sub_1000F17A8(a1, __x, __y, (double *)&v55, v35, v36, 0.0, v37, v38, 0.0);
            double v39 = atan2(__y[0], __x[0]);
            if (v39 < 0.0) {
              double v39 = v39 + 6.28318531;
            }
            double v40 = v39 * 57.2957795;
            double v41 = *a3;
            double v42 = a3[1];
            uint64_t v43 = *(void *)(v13 + 136) + v29;
            double v44 = *(double *)(v43 + 32);
            double v45 = *(double *)(v43 + 40);
            __x[0] = 0.0;
            uint64_t v55 = 0;
            __y[0] = 0.0;
            sub_1000F17A8(a1, __x, __y, (double *)&v55, v41, v42, 0.0, v44, v45, 0.0);
            double v46 = atan2(__y[0], __x[0]);
            if (v46 < 0.0) {
              double v46 = v46 + 6.28318531;
            }
            sub_1004BAC08(v40, v46 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102322AE8);
          }
          unsigned int v53 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)__x, 2u);
          }
          BOOL v54 = sub_10013D1A0(115, 0);
          BOOL result = 0;
          if (v54)
          {
            bzero(__x, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102322AE8);
            }
            LOWORD(__y[0]) = 0;
LABEL_18:
            unint64_t v24 = (double *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n");
LABEL_36:
            if (v24 != __x) {
              free(v24);
            }
            return 0;
          }
          return result;
        }
LABEL_45:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        char v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)__x, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(__x, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        double v26 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)__x, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(__x, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        LOWORD(__y[0]) = 0;
      }
    }
    unint64_t v24 = (double *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n");
    goto LABEL_36;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102322AE8);
  }
  uint64_t v21 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)__x, 2u);
  }
  BOOL v22 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v22)
  {
    bzero(__x, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    LOWORD(__y[0]) = 0;
    goto LABEL_18;
  }
  return result;
}

unint64_t sub_1013927A0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 32))
  {
    double v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      double v5 = a4;
      if (a4 < -1050.0) {
        double v5 = -1050.0;
      }
    }
    double v6 = *(double *)(a2 + 48);
    return sub_1013914FC(a1, a3, (uint64_t **)a2, 30, v6, v5);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
}

uint64_t sub_1013929E0(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4, double a5, double a6)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    double v20 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v61 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v22 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v59 = 134349056;
    *(void *)&v59[4] = v22;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v19);
    goto LABEL_89;
  }
  uint64_t v8 = (double *)*a2;
  if (!*a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_88;
    }
    goto LABEL_91;
  }
  sub_10039C4B4(*a2);
  double v13 = v8[5];
  if (v13 <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    unint64_t v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_88;
    }
LABEL_91:
    dispatch_once(&qword_102419430, &stru_102322AE8);
LABEL_88:
    *(_WORD *)uint64_t v59 = 0;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v19);
    goto LABEL_89;
  }
  if ((int)((unint64_t)((*a2)[18] - (*a2)[17]) >> 4) <= 1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    double v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = **a2;
      uint64_t v16 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
      *(_DWORD *)uint64_t buf = 134283777;
      uint64_t v61 = v15;
      __int16 v62 = 2050;
      v63[0] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v17 = **a2;
    uint64_t v18 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
    *(_DWORD *)uint64_t v59 = 134283777;
    *(void *)&v59[4] = v17;
    *(_WORD *)&v59[12] = 2050;
    *(void *)&v59[14] = v18;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v19);
LABEL_89:
    if (v19 != (char *)buf) {
      free(v19);
    }
    return 0;
  }
  double v27 = 1.0 - a5;
  if (!*((unsigned char *)a2 + 20)) {
    double v27 = a5;
  }
  double v28 = v13 * v27;
  if (v13 * v27 > fabs(a6))
  {
    double v29 = a6 / v13;
    if (!*((unsigned char *)a2 + 20)) {
      double v29 = -v29;
    }
    double v30 = (std::__shared_weak_count *)a2[1];
    double v31 = v29 + a5;
    v57[0] = *a2;
    v57[1] = &v30->__vftable;
    double v58 = 0.0;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v25 = sub_101391FB4((double *)(a1 + 56), v57, (double *)v59, &v58, v29 + a5);
    if (v30) {
      sub_1000DB0A0(v30);
    }
    if (v25)
    {
      *((double *)a2 + 6) = v31;
      *((_OWORD *)a2 + 2) = *(_OWORD *)v59;
      float v32 = v58;
      *((float *)a2 + 6) = v32;
      if (!*((unsigned char *)a2 + 20))
      {
        float v33 = v32 + 180.0;
        *((float *)a2 + 6) = v33;
        sub_100142F58(v33);
        *(float *)&double v34 = v34;
        *((_DWORD *)a2 + 6) = LODWORD(v34);
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v52 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRouteRoads,interpolateProjections returned false", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        unsigned int v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v53);
        if (v53 != (char *)buf) {
          free(v53);
        }
      }
    }
    return v25;
  }
  uint64_t v35 = *a4;
  unint64_t v36 = v35 + 1;
  *a4 = v35 + 1;
  if ((int)v35 > 9 || a3[2] <= v36)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    double v45 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v46 = *(void *)(a1 + 8);
      int v47 = *a4;
      uint64_t v48 = a3[2];
      *(_DWORD *)uint64_t buf = 134218496;
      uint64_t v61 = v46;
      __int16 v62 = 1024;
      LODWORD(v63[0]) = v47;
      WORD2(v63[0]) = 2048;
      *(void *)((char *)v63 + 6) = v48;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%.3lf, no more route roads available to cover the distance travelled,index,%d,size,%lu", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v49 = *(void *)(a1 + 8);
    int v50 = *a4;
    uint64_t v51 = a3[2];
    *(_DWORD *)uint64_t v59 = 134218496;
    *(void *)&v59[4] = v49;
    *(_WORD *)&v59[12] = 1024;
    *(_DWORD *)&v59[14] = v50;
    *(_WORD *)&unsigned char v59[18] = 2048;
    *(void *)&v59[20] = v51;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v19);
    goto LABEL_89;
  }
  double v37 = (uint64_t *)a3[1];
  if ((int)v35 <= -2)
  {
    do
      double v37 = (uint64_t *)*v37;
    while (!__CFADD__(v36++, 1));
  }
  else if (v35 != -1)
  {
    unint64_t v38 = v35 + 2;
    do
    {
      double v37 = (uint64_t *)v37[1];
      --v38;
    }
    while (v38 > 1);
  }
  if (v37 == a3)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    BOOL v54 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v55 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v61 = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "CLMMPED,%.3lf, unexpectedly reached to the end of routeRoadList", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v56 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v59 = 134217984;
    *(void *)&v59[4] = v56;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v19);
    goto LABEL_89;
  }
  int v40 = *((unsigned __int8 *)v37 + 36);
  sub_100F0805C(a2, v37 + 2);
  *((unsigned char *)a2 + 20) = *((unsigned char *)v37 + 36);
  v42.n128_u64[0] = 0;
  if (!v40)
  {
    float v43 = *((float *)a2 + 6) + 180.0;
    *((float *)a2 + 6) = v43;
    sub_100142F58(v43);
    v42.n128_f32[0] = v42.n128_f64[0];
    *((_DWORD *)a2 + 6) = v42.n128_u32[0];
    v42.n128_u64[0] = 1.0;
  }
  double v44 = *(uint64_t (**)(uint64_t, uint64_t **, uint64_t *, int *, __n128, __n128))(*(void *)a1 + 56);

  v41.n128_f64[0] = a6 - v28;
  return v44(a1, a2, a3, a4, v42, v41);
}

void sub_101393594(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013935B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      sub_100D205B0(v2, 0.5, 0.5);
    }
    double v3 = *(double *)(a1 + 8);
    sub_100D20600(a1 + 2616, v3, 60.0, 60.0);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::clearStoredStaleConnections()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1013937DC(uint64_t a1)
{
  sub_101187DE8(a1);

  operator delete();
}

uint64_t sub_101393814(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2648)) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_101393828(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2648);
}

void sub_101393830(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_101393860(void *a1, void *a2)
{
  if (a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      id v15 = [a2 code];
      __int16 v16 = 2114;
      id v17 = [a2 domain];
      __int16 v18 = 2113;
      id v19 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102322AE8);
    }
    uint64_t v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      double v6 = *(void **)(*(void *)(a1[6] + 8) + 24);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)uint64_t buf = 134349312;
      id v15 = v6;
      __int16 v16 = 1026;
      LODWORD(v17) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8) + 40));
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v8 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }

      *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
      uint64_t v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102322AE8);
        }
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_101393ED4()
{
}

__n128 sub_101393EE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_102322B18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_101393F3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102322B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_101393F74(uint64_t a1, void *a2)
{
  return [*(id *)(*(void *)(a1 + 8) + 2600) findRoadsNear:**(void **)(a1 + 32) radius:**(double **)(a1 + 16) handler:**(double *)(*(void *)(a1 + 16) + 8) completionHandler:**(double **)(a1 + 24)];
}

uint64_t sub_101393F98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101393FD8()
{
}

void sub_101393FE4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_101394038((uint64_t *)v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

void sub_101394038(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_101394084(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    __int16 v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    __int16 v10 = 0;
  }
  int v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[24 * v9];
  *(void *)int v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *((void *)v11 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v10[24 * v4 + 16] = *(unsigned char *)(a2 + 16);
  v15[2] = v11 + 24;
  sub_1013941AC(a1, v15);
  uint64_t v13 = a1[1];
  sub_101394358(v15);
  return v13;
}

void sub_101394198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101394358((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013941AC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_101394224((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101394224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  int v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      uint64_t v10 = *(void *)(v8 + 8);
      *(void *)(v7 - 16) = v10;
      uint64_t v11 = v7;
      if (v10)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        uint64_t v11 = *((void *)&v17 + 1);
      }
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(a3 - 8);
      uint64_t v7 = v11 - 24;
      *((void *)&v17 + 1) = v11 - 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_1013942DC((uint64_t)v14);
  return v12;
}

uint64_t sub_1013942DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_101394314(a1);
  }
  return a1;
}

void sub_101394314(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 += 24;
  }
}

void **sub_101394358(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10139438C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

void sub_101394484(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 616);
  if (v4)
  {
    sub_10139AAD4(v4, a2, a3, a4);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,EmergencyContactsMetric nil object", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101394660(void *a1, uint64_t a2)
{
  *a1 = a2;
  sub_100134750(&__p, "#ADR,state machine");
  uint64_t v3 = a1;
  operator new();
}

void sub_101394978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  sub_10139B77C((uint64_t *)(v19 + 384), 0);
  sub_1013A9BEC((uint64_t *)(v19 + 376), 0);
  sub_1000DB114(v19 + 328);
  sub_1000D7D80(v19 + 216);
  sub_1000DB114(v24);
  sub_1000D7D80(v23);
  if (*(char *)(v25 + 263) < 0) {
    operator delete(*(void **)(v25 + 240));
  }
  sub_100ABD5B0(v22);
  sub_100ABCE48(v21);
  sub_100ABD634(v20);
  sub_1013AF6AC(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_101394A6C()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#ADR,deletePreCachedAdrInfo", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::deletePreCachedAdrInfo()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E9354(buf);
  uint64_t v1 = sub_1000A6958();
  if (byte_102487627 >= 0) {
    uint64_t v2 = (const char *)&qword_102487610;
  }
  else {
    uint64_t v2 = (const char *)qword_102487610;
  }
  sub_1004D3878(v1, v2, (uint64_t)buf);
  uint64_t v3 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v3 + 944))(v3);
  return sub_10013F3C4(buf);
}

void sub_101394C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_101394C74(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v2 + 936))(v2);
  sub_1000E9354(v55);
  uint64_t v3 = sub_1000A6958();
  if (byte_102487627 >= 0) {
    uint64_t v4 = (const char *)&qword_102487610;
  }
  else {
    uint64_t v4 = (const char *)qword_102487610;
  }
  if (sub_100012960(v3, v4, v55))
  {
    if (byte_10248763F >= 0) {
      uint64_t v5 = (const char *)&qword_102487628;
    }
    else {
      uint64_t v5 = (const char *)qword_102487628;
    }
    if ((sub_1000A699C((uint64_t)v55, v5, (void *)(a1 + 504)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no time of last clear failure", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v54.__r_.__value_.__l.__data_) = 0;
        int v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
    }
    if (byte_102487657 >= 0) {
      uint64_t v7 = (const char *)&qword_102487640;
    }
    else {
      uint64_t v7 = (const char *)qword_102487640;
    }
    if ((sub_10006EF84((uint64_t)v55, v7, (_DWORD *)(a1 + 512)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no clear failure count", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v54.__r_.__value_.__l.__data_) = 0;
        __n128 v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
    }
    if (byte_10248766F >= 0) {
      uint64_t v9 = (const char *)&qword_102487658;
    }
    else {
      uint64_t v9 = (const char *)qword_102487658;
    }
    if ((sub_1000A699C((uint64_t)v55, v9, (void *)(a1 + 520)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no time of last cache failure", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v54.__r_.__value_.__l.__data_) = 0;
        __n128 v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v42);
        if (v42 != (char *)buf) {
          free(v42);
        }
      }
    }
    if (byte_102487687 >= 0) {
      uint64_t v11 = (const char *)&qword_102487670;
    }
    else {
      uint64_t v11 = (const char *)qword_102487670;
    }
    if ((sub_10006EF84((uint64_t)v55, v11, (_DWORD *)(a1 + 528)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no send failure count", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v54.__r_.__value_.__l.__data_) = 0;
        float v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
    }
    if (byte_10248769F >= 0) {
      uint64_t v13 = (const char *)&qword_102487688;
    }
    else {
      uint64_t v13 = (const char *)qword_102487688;
    }
    if ((sub_1000A699C((uint64_t)v55, v13, (void *)(a1 + 536)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,loadPreCachedAdrInfo,no time of last cache success", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v54.__r_.__value_.__l.__data_) = 0;
        double v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
    }
    memset(&v54, 0, sizeof(v54));
    if (byte_1024876B7 >= 0) {
      char v15 = (const char *)&qword_1024876A0;
    }
    else {
      char v15 = (const char *)qword_1024876A0;
    }
    if (sub_1004D1284((uint64_t)v55, v15, &v54))
    {

      id v16 = objc_alloc((Class)NSData);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &v54;
      }
      else {
        long long v17 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      *(void *)(a1 + 544) = [v16 initWithBase64EncodedString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17) options:0];
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no cloaking key", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        double v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
    }
    memset(&v53, 0, sizeof(v53));
    if (byte_1024876CF >= 0) {
      uint64_t v21 = (const char *)&qword_1024876B8;
    }
    else {
      uint64_t v21 = (const char *)qword_1024876B8;
    }
    if (sub_1004D1284((uint64_t)v55, v21, &v53))
    {

      id v22 = objc_alloc((Class)NSData);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v53;
      }
      else {
        uint64_t v23 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      *(void *)(a1 + 552) = [v22 initWithBase64EncodedString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23)];
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v24 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no medical ID hash", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v52[0]) = 0;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
    }
    int v25 = byte_1024876E7;
    uint64_t v26 = qword_1024876D0;
    v52[0] = 0;
    *(void *)uint64_t buf = v52;
    double v27 = (std::string *)sub_100981438(a1 + 560, v52, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    if (v25 >= 0) {
      double v28 = (const char *)&qword_1024876D0;
    }
    else {
      double v28 = (const char *)v26;
    }
    if (!sub_1004D1284((uint64_t)v55, v28, v27 + 1))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no phone number for inst 1", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v52[0]) = 0;
        int v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
    }
    if (sub_1000FFBA8())
    {
      int v30 = byte_1024876FF;
      double v31 = (uint64_t *)qword_1024876E8;
      v52[0] = 1;
      *(void *)uint64_t buf = v52;
      float v32 = (std::string *)sub_100981438(a1 + 560, v52, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      float v33 = (const char *)(v30 >= 0 ? &qword_1024876E8 : v31);
      if (!sub_1004D1284((uint64_t)v55, v33, v32 + 1))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        double v34 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no phone number for inst 2", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          LOWORD(v52[0]) = 0;
          uint64_t v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v49);
          if (v49 != (char *)buf) {
            free(v49);
          }
        }
      }
    }
    uint64_t v35 = (void *)sub_1000E9358((uint64_t)v55);
    if (byte_102487717 >= 0) {
      unint64_t v36 = &qword_102487700;
    }
    else {
      unint64_t v36 = (uint64_t *)qword_102487700;
    }
    id v37 = [v35 valueForKey:[NSString stringWithUTF8String:v36]];
    if (v37)
    {

      *(void *)(a1 + 600) = v37;
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      unint64_t v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no emergency contact names", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v52[0]) = 0;
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
    }
    sub_100134750(__p, "loaded");
    sub_1013A6B40(a1, (uint64_t *)__p);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ADR,loadPreCachedAdrInfo,no pre-cached ADR info available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v54.__r_.__value_.__l.__data_) = 0;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::loadPreCachedAdrInfo()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  return sub_10013F3C4(v55);
}

void sub_101395D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  sub_10013F3C4(&a33);
  _Unwind_Resume(a1);
}

uint64_t **sub_101395E34(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v18 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    uint64_t v5 = a3;
    int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101AB2360(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102322C78);
LABEL_3:
  uint64_t v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    sub_1013A71AC(v7, __p);
    if (SBYTE3(v23) >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v25 = 1024;
    int v26 = v7;
    __int16 v27 = 2080;
    double v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    uint64_t v13 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v13 = (void *)*v13;
    }
    sub_1013A71AC(v7, v16);
    if (v17 >= 0) {
      double v14 = v16;
    }
    else {
      double v14 = (void **)v16[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v13;
    __int16 v20 = 1024;
    int v21 = v7;
    __int16 v22 = 2080;
    uint64_t v23 = v14;
    char v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyADR>::setStateHandler(State, StateHandler) [T = CLEmergencyADR]", "%s\n", v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  *(void *)uint64_t buf = &v18;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101396104(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      *(unsigned char *)(a1 + 330) = 0;
      v15[0] = 0;
      *(void *)uint64_t buf = v15;
      *((unsigned char *)sub_10097F690(a1 + 336, v15, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = 0;
      if (sub_1000FFBA8())
      {
        v15[0] = 1;
        *(void *)uint64_t buf = v15;
        *((unsigned char *)sub_10097F690(a1 + 336, v15, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = 0;
      }
      sub_1013A71C0(a1 + 8, 10, 300.0);
      return 0;
    case 1:
      sub_1013A7CAC(a1 + 8, 10);
      return 0;
    case 2:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,unexpected SendActivityTrigger event received", buf, 2u);
      }
      BOOL v9 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v9) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v15[0]) = 0;
      goto LABEL_48;
    case 4:
    case 5:
    case 6:
      if (sub_1013A8140(a1))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        uint64_t v4 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Initializing,required initialization info received", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          LOWORD(v15[0]) = 0;
          uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n");
LABEL_63:
          if (v5 != buf) {
            free(v5);
          }
        }
LABEL_56:
        if (sub_1013A81FC(a1)) {
          return 2;
        }
        else {
          return 1;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Initializing,still waiting for initialization data", buf, 2u);
        }
        uint64_t result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          int v7 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n");
LABEL_49:
          if (v7 != buf) {
            free(v7);
          }
          return 0;
        }
      }
      return result;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,unexpected ResponseReceived event received", buf, 2u);
      }
      BOOL v11 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v11) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v15[0]) = 0;
      goto LABEL_48;
    case 9:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,unexpected ResponseTimeout event received", buf, 2u);
      }
      BOOL v13 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v15[0]) = 0;
LABEL_48:
      int v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n");
      goto LABEL_49;
    case 10:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,state machine,Initializing,initialization timeout reached", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v15[0]) = 0;
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Initializing(CLEmergencyADR::Event)", "%s\n");
      goto LABEL_63;
    default:
      return result;
  }
}

uint64_t sub_1013968C4(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 160);
  if (!v3) {
    sub_10015E48C();
  }
  uint64_t v5 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v6 = sub_100A81680(v5);
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
      int64_t v10 = *((int *)v6 + 124);
      int64_t v11 = *((int *)v6 + 125);
      if (*(double *)(a1 + 520) != 0.0)
      {
        *(void *)(a1 + 520) = 0;
        *(_DWORD *)(a1 + 528) = 0;
        sub_1013A6E00((void *)a1);
      }
      if (*(void *)(a1 + 544))
      {
        if (*(int *)(a1 + 512) > 2)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          char v17 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            int v18 = *(_DWORD *)(a1 + 512);
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,Enter,max clear attempts exceeded,%{public}d", (uint8_t *)__p, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            int v22 = *(_DWORD *)(a1 + 512);
            *(_DWORD *)uint64_t buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v22;
            uint64_t v23 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v23);
            if (v23 != (char *)__p) {
              free(v23);
            }
          }
          sub_1013A8D8C(a1);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          uint64_t v12 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Disabled,Enter,starting activity for clearing previously cached data", (uint8_t *)__p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            *(_WORD *)uint64_t buf = 0;
            int v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v21);
            if (v21 != (char *)__p) {
              free(v21);
            }
          }
          sub_1013A8A58(a1, v10, v11);
        }
      }
      return 1;
    case 1:
      sub_1013A8DF8(a1);
      return 1;
    case 2:
      return 4;
    case 3:
    case 4:
    case 5:
    case 6:
      if (!sub_1013A81FC(a1)) {
        return 1;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1013A7198(a2, __p);
        BOOL v9 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Disabled,%{public}s,now enabled", buf, 0xCu);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        sub_1013A7198(a2, buf);
        if (v25 >= 0) {
          uint64_t v19 = buf;
        }
        else {
          uint64_t v19 = *(unsigned char **)buf;
        }
        int v26 = 136446210;
        __int16 v27 = v19;
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        if (v25 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v20);
        if (v20 != (char *)__p) {
          free(v20);
        }
      }
      return 2;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      BOOL v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,unexpected ResponseReceived event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_46;
      }
      goto LABEL_74;
    case 9:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,unexpected ResponseTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_46;
      }
      goto LABEL_74;
    case 10:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ADR,state machine,Disabled,unexpected InitializationTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_46;
      }
LABEL_74:
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_46:
      *(_WORD *)uint64_t buf = 0;
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Disabled(CLEmergencyADR::Event)", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
      return 1;
    default:
      return result;
  }
}

uint64_t sub_1013971E0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 160);
  if (!v3) {
    sub_10015E48C();
  }
  uint64_t v5 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v6 = sub_100A81680(v5);
  int v7 = *((_DWORD *)v6 + 124);
  int v8 = *((_DWORD *)v6 + 125);
  int v9 = *((_DWORD *)v6 + 128);
  int v10 = *((_DWORD *)v6 + 129);
  int v11 = *((_DWORD *)v6 + 126);
  int v12 = *((_DWORD *)v6 + 127);
  uint64_t v13 = sub_100A96A4C(a1 + 168, 0);
  if (*(char *)(v13 + 159) < 0)
  {
    sub_1000DC48C(__s1, *(void **)(v13 + 136), *(void *)(v13 + 144));
  }
  else
  {
    *(_OWORD *)std::string __s1 = *(_OWORD *)(v13 + 136);
    uint64_t v77 = *(void *)(v13 + 152);
  }
  memset(&v75, 0, sizeof(v75));
  if (sub_1000FFBA8())
  {
    uint64_t v14 = sub_100A96A4C(a1 + 168, 1);
    std::string::operator=(&v75, (const std::string *)(v14 + 136));
  }
  switch(a2)
  {
    case 0:
      if (*(double *)(a1 + 504) != 0.0)
      {
        *(void *)(a1 + 504) = 0;
        *(_DWORD *)(a1 + 512) = 0;
        sub_1013A6E00((void *)a1);
      }
      int v18 = sub_1013A8FA8(a1);
      if (*(double *)(a1 + 520) != 0.0)
      {
        if (*(int *)(a1 + 528) > 2)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          char v51 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using backoff delay from previous failure", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            LOWORD(v74) = 0;
            uint64_t v71 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v71);
            if (v71 != (char *)buf) {
              free(v71);
            }
          }
          double v52 = *(double *)(a1 + 520);
          int v53 = (int)(v52 + (double)v9 - CFAbsoluteTimeGetCurrent());
          if (v9 >= v53) {
            int v54 = v53;
          }
          else {
            int v54 = v9;
          }
          if (v7 <= v53) {
            int v7 = v54;
          }
          int v8 = v10;
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          uint64_t v19 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using retry delay from previous failure", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            LOWORD(v74) = 0;
            uint64_t v70 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v70);
            if (v70 != (char *)buf) {
              free(v70);
            }
          }
          double v20 = *(double *)(a1 + 520);
          int v21 = (int)(v20 + (double)v7 - CFAbsoluteTimeGetCurrent());
          if (v7 >= 0) {
            int v22 = v7;
          }
          else {
            int v22 = v7 + 1;
          }
          int v23 = v22 >> 1;
          if (v7 >= v21 && v23 <= v21) {
            int v7 = v21;
          }
        }
        goto LABEL_185;
      }
      if (v18 && ([(NSMutableData *)v18 isEqualToData:*(void *)(a1 + 552)] & 1) == 0)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        double v63 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using debounce delay due to medical ID change", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
LABEL_216:
          }
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_50:
          LOWORD(v74) = 0;
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v26);
LABEL_51:
          if (v26 != (char *)buf) {
LABEL_52:
          }
            free(v26);
        }
        goto LABEL_185;
      }
      uint64_t v46 = (void *)HIBYTE(v77);
      if (v77 < 0) {
        uint64_t v46 = __s1[1];
      }
      if (v46)
      {
        int v74 = 0;
        *(void *)uint64_t buf = &v74;
        int v47 = (unsigned __int8 *)sub_100981438(a1 + 560, &v74, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        if (sub_1006FE6DC((unsigned __int8 *)__s1, v47 + 24)) {
          goto LABEL_121;
        }
      }
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
      }
      if (size
        && (int v73 = 1,
            *(void *)uint64_t buf = &v73,
            uint64_t v49 = (unsigned __int8 *)sub_100981438(a1 + 560, &v73, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
            sub_1006FE6DC((unsigned __int8 *)&v75, v49 + 24)))
      {
LABEL_121:
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v50 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using debounce delay due to phone number change", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 == -1)
          {
LABEL_127:
            LOWORD(v74) = 0;
            int v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v26);
            goto LABEL_51;
          }
LABEL_219:
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
          goto LABEL_127;
        }
      }
      else if (*(double *)(a1 + 536) == 0.0)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        double v67 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using debounce delay for first send attempt", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 == -1) {
            goto LABEL_127;
          }
          goto LABEL_219;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        uint64_t v59 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,Enter,using periodic delay from last success", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          LOWORD(v74) = 0;
          int v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
        }
        double v60 = *(double *)(a1 + 536);
        int v61 = (int)(v60 + (double)v11 - CFAbsoluteTimeGetCurrent());
        if (v11 >= v61) {
          int v62 = v61;
        }
        else {
          int v62 = v11;
        }
        if (v7 <= v61) {
          int v7 = v62;
        }
        int v8 = v12;
      }
LABEL_185:
      sub_1013A8A58(a1, v7, v8);
LABEL_186:
      uint64_t v16 = 2;
      goto LABEL_187;
    case 1:
      sub_1013A8DF8(a1);
      goto LABEL_186;
    case 2:
      uint64_t v16 = 3;
      goto LABEL_187;
    case 3:
    case 4:
      if (sub_1013A81FC(a1)) {
        goto LABEL_186;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,ConfigChange,now disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_110;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_193;
      }
      goto LABEL_217;
    case 5:
      if (sub_1013A81FC(a1))
      {
        __int16 v27 = sub_1013A8FA8(a1);
        double v28 = v27;
        if (v27)
        {
          if (![(NSMutableData *)v27 isEqualToData:*(void *)(a1 + 552)])
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            uint64_t v56 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              id v57 = [[objc_msgSend(*(id *)(a1 + 552), "base64EncodedStringWithOptions:", 0) UTF8String];
              id v58 = [[-[NSMutableData base64EncodedStringWithOptions:](v28, "base64EncodedStringWithOptions:", 0) UTF8String];
              *(_DWORD *)uint64_t buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v79 = 2082;
              uint64_t v80 = "";
              __int16 v81 = 2082;
              id v82 = v57;
              __int16 v83 = 2082;
              id v84 = v58;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,state machine,Idle,MedicalIdUpdate,changed\", \"old hash\":%{public, location:escape_only}s, \"new hash\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            goto LABEL_185;
          }
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          char v29 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,MedicalIdUpdate,no change", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_186;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 == -1) {
            goto LABEL_62;
          }
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          uint64_t v55 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,MedicalIdUpdate,unable to get hash", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_186;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 == -1) {
            goto LABEL_62;
          }
        }
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_62:
        LOWORD(v74) = 0;
        int v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v30);
LABEL_96:
        if (v30 != (char *)buf) {
          free(v30);
        }
        goto LABEL_186;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v44 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,MedicalIdUpdate,now disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_110;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        goto LABEL_217;
      }
      goto LABEL_193;
    case 6:
      if (sub_1013A81FC(a1))
      {
        double v31 = (void *)HIBYTE(v77);
        if (v77 < 0) {
          double v31 = __s1[1];
        }
        if (v31)
        {
          int v74 = 0;
          *(void *)uint64_t buf = &v74;
          float v32 = sub_100981438(a1 + 560, &v74, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          uint64_t v33 = HIBYTE(v77);
          if (v77 >= 0) {
            double v34 = (void *)HIBYTE(v77);
          }
          else {
            double v34 = __s1[1];
          }
          uint64_t v35 = (void *)*((unsigned __int8 *)v32 + 47);
          int v36 = (char)v35;
          if ((char)v35 < 0) {
            uint64_t v35 = (void *)v32[4];
          }
          if (v34 != v35) {
            goto LABEL_174;
          }
          double v39 = (unsigned __int8 *)v32[3];
          id v37 = (unsigned __int8 *)(v32 + 3);
          unint64_t v38 = v39;
          if (v36 >= 0) {
            int v40 = v37;
          }
          else {
            int v40 = v38;
          }
          if (v77 < 0)
          {
            if (memcmp(__s1[0], v40, (size_t)__s1[1])) {
              goto LABEL_174;
            }
          }
          else if (HIBYTE(v77))
          {
            __n128 v41 = __s1;
            while (*(unsigned __int8 *)v41 == *v40)
            {
              __n128 v41 = (void **)((char *)v41 + 1);
              ++v40;
              if (!--v33) {
                goto LABEL_170;
              }
            }
LABEL_174:
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            unint64_t v66 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,PhoneNumberUpdate,changed", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_185;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            LOWORD(v74) = 0;
            int v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v26);
            if (v26 == (char *)buf) {
              goto LABEL_185;
            }
            goto LABEL_52;
          }
        }
LABEL_170:
        std::string::size_type v64 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v64 = v75.__r_.__value_.__l.__size_;
        }
        if (!v64) {
          goto LABEL_186;
        }
        int v73 = 1;
        *(void *)uint64_t buf = &v73;
        unint64_t v65 = (unsigned __int8 *)sub_100981438(a1 + 560, &v73, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        if (!sub_1006FE6DC((unsigned __int8 *)&v75, v65 + 24)) {
          goto LABEL_186;
        }
        goto LABEL_174;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      double v45 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,PhoneNumberUpdate,now disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_110;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
LABEL_217:
      }
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_193:
      LOWORD(v74) = 0;
      uint64_t v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v69);
      if (v69 != (char *)buf) {
        free(v69);
      }
LABEL_110:
      uint64_t v16 = 1;
LABEL_187:
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77) < 0) {
        operator delete(__s1[0]);
      }
      return v16;
    case 7:
      if (*(int *)(a1 + 528) < 1) {
        goto LABEL_186;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v25 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ADR,state machine,Idle,BAACertDownload,try caching ADR again", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_185;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_50;
      }
      goto LABEL_216;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      float v43 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#ADR,state machine,Idle,unexpected ResponseReceived event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_186;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_95;
      }
      goto LABEL_215;
    case 9:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,state machine,Idle,unexpected ResponseTimeout event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_186;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_95;
      }
      goto LABEL_215;
    case 10:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      __n128 v42 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#ADR,state machine,Idle,unexpected InitializationTimeout event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_186;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_95;
      }
LABEL_215:
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_95:
      LOWORD(v74) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Idle(CLEmergencyADR::Event)", "%s\n", v30);
      goto LABEL_96;
    default:
      goto LABEL_186;
  }
}

void sub_1013989A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101398A58(uint64_t a1, int a2)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 0:

      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 392) = 0;
      sub_10068A72C(a1 + 400);
      *(unsigned char *)(a1 + 488) = 0;
      sub_1013A94D0(a1);

      *(void *)(a1 + 496) = 0;
      operator new();
    case 1:
      sub_1013A7CAC(a1 + 8, 9);

      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 392) = 0;
      sub_10068A72C(a1 + 400);
      sub_1013A94D0(a1);

      *(void *)(a1 + 496) = 0;
      uint64_t v4 = *(uint64_t **)(a1 + 608);
      if (v4)
      {
        sub_1013A61A8(v4);
        sub_1013A9BEC((uint64_t *)(a1 + 608), 0);
      }
      return 3;
    case 2:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ADR,state machine,Sending,unexpected SendActivityTrigger event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 3;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_27;
      }
      goto LABEL_35;
    case 8:
      if (sub_1013A9C3C(a1)) {
        return 3;
      }
      if (*(unsigned char *)(a1 + 488))
      {
        *(CFAbsoluteTime *)(a1 + 520) = CFAbsoluteTimeGetCurrent();
        ++*(_DWORD *)(a1 + 528);
        sub_1013A6E00((void *)a1);
      }
      else
      {
        sub_1013A9CEC(a1);
      }
      BOOL v6 = sub_1013A81FC(a1);
LABEL_32:
      if (v6) {
        return 2;
      }
      else {
        return 1;
      }
    case 9:
      if (*(void *)(a1 + 608))
      {
        v9[0] = 0;
        __p[0] = v9;
        if (*((_DWORD *)sub_1000F3C48(a1 + 448, v9, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5)) {
          std::string::operator=((std::string *)(*(void *)(a1 + 608) + 144), &stru_10248D390);
        }
        v9[0] = 1;
        __p[0] = v9;
        if (*((_DWORD *)sub_1000F3C48(a1 + 448, v9, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5)) {
          sub_1013A5F78(*(std::string **)(a1 + 608), 1, &stru_10248D390);
        }
      }
      *(CFAbsoluteTime *)(a1 + 520) = CFAbsoluteTimeGetCurrent();
      ++*(_DWORD *)(a1 + 528);
      sub_1013A6E00((void *)a1);
      BOOL v6 = sub_1013A81FC(a1);
      goto LABEL_32;
    case 10:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ADR,state machine,Sending,unexpected InitializationTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 3;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_27;
      }
LABEL_35:
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_27:
      LOWORD(v9[0]) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Sending(CLEmergencyADR::Event)", "%s\n", v8);
      if (v8 != (char *)__p) {
        free(v8);
      }
      return 3;
    default:
      return result;
  }
}

void sub_1013990F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101399164(uint64_t a1, int a2)
{
  uint64_t result = 4;
  switch(a2)
  {
    case 0:
      *(unsigned char *)(a1 + 488) = 0;
      sub_1013A94D0(a1);
      operator new();
    case 1:
      sub_1013A7CAC(a1 + 8, 9);
      sub_1013A94D0(a1);
      uint64_t v4 = *(uint64_t **)(a1 + 608);
      if (v4)
      {
        sub_1013A61A8(v4);
        sub_1013A9BEC((uint64_t *)(a1 + 608), 0);
      }
      return 4;
    case 2:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ADR,state machine,Clearing,unexpected SendActivityTrigger event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 4;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_27;
      }
      goto LABEL_35;
    case 8:
      if (sub_1013A9C3C(a1)) {
        return 4;
      }
      if (*(unsigned char *)(a1 + 488))
      {
        *(CFAbsoluteTime *)(a1 + 504) = CFAbsoluteTimeGetCurrent();
        ++*(_DWORD *)(a1 + 512);
        sub_1013A6E00((void *)a1);
      }
      else
      {
        sub_1013A8D8C(a1);
      }
      BOOL v6 = sub_1013A81FC(a1);
LABEL_32:
      if (v6) {
        return 2;
      }
      else {
        return 1;
      }
    case 9:
      if (*(void *)(a1 + 608))
      {
        v9[0] = 0;
        __p[0] = v9;
        if (*((_DWORD *)sub_1000F3C48(a1 + 448, v9, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5)) {
          std::string::operator=((std::string *)(*(void *)(a1 + 608) + 144), &stru_10248D390);
        }
        v9[0] = 1;
        __p[0] = v9;
        if (*((_DWORD *)sub_1000F3C48(a1 + 448, v9, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5)) {
          sub_1013A5F78(*(std::string **)(a1 + 608), 1, &stru_10248D390);
        }
      }
      *(CFAbsoluteTime *)(a1 + 504) = CFAbsoluteTimeGetCurrent();
      ++*(_DWORD *)(a1 + 512);
      sub_1013A6E00((void *)a1);
      BOOL v6 = sub_1013A81FC(a1);
      goto LABEL_32;
    case 10:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ADR,state machine,Clearing,unexpected InitializationTimeout event received", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 4;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_27;
      }
LABEL_35:
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
LABEL_27:
      LOWORD(v9[0]) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::State CLEmergencyADR::handler_Clearing(CLEmergencyADR::Event)", "%s\n", v8);
      if (v8 != (char *)__p) {
        free(v8);
      }
      return 4;
    default:
      return result;
  }
}

void sub_1013997A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10139981C(uint64_t a1)
{
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 280) = 0;

  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 384) = 0;

  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 392) = 0;

  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;

  *(void *)(a1 + 600) = 0;
  sub_10139B77C((uint64_t *)(a1 + 616), 0);
  sub_1013A9BEC((uint64_t *)(a1 + 608), 0);
  sub_1000DB114(a1 + 560);
  sub_1000D7D80(a1 + 448);
  sub_1000DB114(a1 + 400);
  sub_1000D7D80(a1 + 336);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  sub_100ABD5B0((void *)(a1 + 200));
  sub_100ABCE48((void *)(a1 + 168));
  sub_100ABD634((void *)(a1 + 136));
  sub_1013AF6AC(a1 + 8);
  return a1;
}

void sub_10139991C(uint64_t a1)
{
  sub_101399FDC(a1);
  sub_1000C7F88(buf);
  *(_DWORD *)char v15 = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "IDSQueryInterval", v15)) {
    int64_t v2 = *(int *)v15;
  }
  else {
    int64_t v2 = 604800;
  }
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  double v14 = 0.0;
  uint64_t v3 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v3 + 936))(v3);
  uint64_t v4 = sub_1000A6958();
  if (sub_1000A6A10(v4, @"LastIDSQueryTime", &v14))
  {
    v2 -= (uint64_t)(CFAbsoluteTimeGetCurrent() - v14);
    if (v2 < 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      BOOL v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,Invalid interval value %{public}lld, reset to 0", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        *(_DWORD *)char v15 = 134349056;
        *(void *)&v15[4] = v2;
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()", "%s\n", v11);
        if (v11 != buf) {
          free(v11);
        }
      }
      int64_t v2 = 0;
    }
    else if ((unint64_t)v2 > 0x93A80)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,Invalid interval value %{public}lld, reset to kIDSQueryInterval value", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        *(_DWORD *)char v15 = 134349056;
        *(void *)&v15[4] = v2;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()", "%s\n", v12);
        if (v12 != buf) {
          free(v12);
        }
      }
      int64_t v2 = 604800;
    }
  }
  sub_1000C7F88(buf);
  *(void *)char v15 = 0;
  if (sub_1004D0B90(*(uint64_t *)buf, "IDSQueryGracePeriod", v15)) {
    int64_t v7 = *(void *)v15;
  }
  else {
    int64_t v7 = 600;
  }
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_uint64(v8, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, 0x28uLL);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
  xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, v2);
  xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, v7);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  int v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349312;
    *(void *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ADR,#registerIDSBatchIDQueryActivity,registering IDS Query activity,interval,%{public}lld,gracePeriod,%{public}lld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    *(_DWORD *)char v15 = 134349312;
    *(void *)&v15[4] = v2;
    __int16 v16 = 2050;
    int64_t v17 = v7;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  *(unsigned char *)(a1 + 624) = 1;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10139A18C;
  handler[3] = &unk_1022C9C78;
  handler[4] = a1;
  xpc_activity_register((const char *)[@"com.apple.locationd.emergencyContacts" UTF8String], v8, handler);
  xpc_release(v8);
}

void sub_101399FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_101399FDC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 624))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,unregistering IDS batch query activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::unregisterIDSBatchIDQueryActivity()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    xpc_activity_unregister((const char *)[@"com.apple.locationd.emergencyContacts" UTF8String]);
    *(unsigned char *)(a1 + 624) = 0;
  }
}

void sub_10139A18C(uint64_t a1, xpc_activity_t activity)
{
  int64_t v2 = *(id **)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,IDS query activity handler triggered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v11) = 0;
      xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v5 = [objc_msgSend(*v2, "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10139A4D4;
    block[3] = &unk_1022A3020;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    int v6 = state;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,registerIDSBatchIDQueryActivity,IDS query activity handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v11 = 67240192;
      int v12 = v6;
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerIDSBatchIDQueryActivity()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10139A4D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 624) = 0;
  sub_10139A514(v1);

  sub_10139A8F4(v1);
}

uint64_t sub_10139A514(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
  sub_100163398(v2, @"LastIDSQueryTime", buf);
  uint64_t v3 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v3 + 944))(v3);
  if (!objc_opt_class()
    || (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ADR,issueIDSBatchQuery,MCProfileConnection class unavailable or Health Data Submission not allowed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::issueIDSBatchIDQuery()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return sub_10139991C(a1);
  }
  if ((sub_10016CCBC() & 1) != 0
    || ((sub_100103240(), v4 = sub_10010145C(), byte_10248D718) ? (char v5 = v4) : (char v5 = 0), (v5 & 1) != 0))
  {
    operator new();
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  xpc_object_t v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,issueIDSBatchQuery,the device is neither a phone nor a tinker supported watch", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::issueIDSBatchIDQuery()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_100103240();
  uint64_t result = sub_10010145C();
  if (result) {
    return sub_10139991C(a1);
  }
  return result;
}

void sub_10139A8C8()
{
}

void sub_10139A8F4(uint64_t a1)
{
  if (((sub_10016CCBC() & 1) != 0 || sub_10010145C()) && objc_opt_class())
  {
    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    [v5 setValue:[NSNumber numberWithBool:+[SOSUtilities shouldPlayAudioDuringCountdown](SOSUtilities, "shouldPlayAudioDuringCountdown")] forKey:@"playAudioDuringCountdown"];
    [v5 setValue:[NSNumber numberWithBool:+[SOSUtilities isCallWithVolumeLockHoldEnabled](SOSUtilities, "isCallWithVolumeLockHoldEnabled")] forKey:@"clawAutoDialEnabled"];
    [v5 setValue:[NSNumber numberWithBool:+[SOSUtilities isCallWithSideButtonPressesEnabled](SOSUtilities, "isCallWithSideButtonPressesEnabled")] forKey:@"multipressAutoDialEnabled"];
    [v5 setValue:[NSNumber numberWithInteger:+[SOSUtilities SOSTriggerClickCount](SOSUtilities, "SOSTriggerClickCount")] forKey:@"numberOfSideButtonPresses"];
    uint64_t v2 = *(void **)(a1 + 280);
    if (v2) {
      uint64_t v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (int)[objc_msgSend(objc_msgSend(v2, "emergencyContacts"), "count") > 0]);
    }
    else {
      uint64_t v3 = (NSNumber *)&__kCFBooleanFalse;
    }
    [v5 setValue:v3 forKey:@"hasEmergencyContacts"];
    [v5 setValue:[NSNumber numberWithBool:+[SOSUtilities kappaTriggersEmergencySOS](SOSUtilities, "kappaTriggersEmergencySOS")] forKey:@"kappaEnabled"];
    char v4 = (__CFBundle *)+[SOSUtilities getKappaThirdPartyActiveAppBundle];
    if (v4) {
      [v5 setValue:CFBundleGetIdentifier(v4) forKey:@"kappaThirdPartyAppBundleId"];
    }
    AnalyticsSendEvent();
  }
}

void sub_10139AAD4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 && a3)
  {
    if (a4)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        *(void *)&uint8_t buf[4] = a4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ADR,handleIDSBatchIDQueryResponse,Early return,error:%{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        *(_DWORD *)double v45 = 138543362;
        *(void *)&v45[4] = a4;
        int64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v7);
LABEL_72:
        if (v7 != buf) {
          free(v7);
        }
        return;
      }
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = [a2 count];
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = [a3 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Received %{public}u responses for service %{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      *(_DWORD *)double v45 = 67240450;
      *(_DWORD *)&v45[4] = [a2 count];
      *(_WORD *)&v45[8] = 2082;
      *(void *)&v45[10] = [a3 UTF8String];
      double v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v39);
      if (v39 != buf) {
        free(v39);
      }
    }
    long long v43 = 0u;
    long long v44 = 0u;
    if ([a3 isEqualToString:IDSServiceNameiMessage]) {
      uint64_t v11 = 104;
    }
    else {
      uint64_t v11 = 144;
    }
    long long v41 = 0uLL;
    long long v42 = 0uLL;
    id v12 = [a2 allKeys];
    id v13 = [v12 countByEnumeratingWithState:&v41 objects:v46 count:16];
    if (!v13)
    {
LABEL_67:
      if (sub_1013AF318(a1)) {
        sub_1013AE6A0(a1);
      }
      return;
    }
    uint64_t v14 = a1 + v11;
    uint64_t v15 = *(void *)v42;
LABEL_28:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v42 != v15) {
        objc_enumerationMutation(v12);
      }
      int64_t v17 = *(void **)(*((void *)&v41 + 1) + 8 * v16);
      if (objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v17), "integerValue") == (id)1)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v18 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v19 = [v17 UTF8String];
          id v20 = [a3 UTF8String];
          *(_DWORD *)uint64_t buf = 136380931;
          *(void *)&uint8_t buf[4] = v19;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Number %{private}s supports service %{public}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          id v29 = [v17 UTF8String];
          id v30 = [a3 UTF8String];
          *(_DWORD *)double v45 = 136380931;
          *(void *)&v45[4] = v29;
          *(_WORD *)&v45[12] = 2082;
          *(void *)&v45[14] = v30;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v31);
          if (v31 != buf) {
            free(v31);
          }
        }
        sub_100134750(buf, (char *)[v17 UTF8String]);
        *(void *)double v45 = buf;
        int v21 = sub_1013AFB7C(v14, buf, (uint64_t)&unk_101D0B290, (long long **)v45);
        int v22 = 1;
      }
      else
      {
        if (objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", v17), "integerValue") != (id)2)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          int v26 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            id v27 = [v17 UTF8String];
            id v28 = [a3 UTF8String];
            *(_DWORD *)uint64_t buf = 136380931;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v28;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Unhandled status response for number %{private}s for service %{public}s", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            id v35 = [v17 UTF8String];
            id v36 = [a3 UTF8String];
            *(_DWORD *)double v45 = 136380931;
            *(void *)&v45[4] = v35;
            *(_WORD *)&v45[12] = 2082;
            *(void *)&v45[14] = v36;
            id v37 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v37);
            if (v37 != buf) {
              free(v37);
            }
          }
          goto LABEL_52;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v23 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v24 = [v17 UTF8String];
          id v25 = [a3 UTF8String];
          *(_DWORD *)uint64_t buf = 136380931;
          *(void *)&uint8_t buf[4] = v24;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ADR,handleIDSBatchIDQueryResponse,Number %{private}s does not support service %{public}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          id v32 = [v17 UTF8String];
          id v33 = [a3 UTF8String];
          *(_DWORD *)double v45 = 136380931;
          *(void *)&v45[4] = v32;
          *(_WORD *)&v45[12] = 2082;
          *(void *)&v45[14] = v33;
          double v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v34);
          if (v34 != buf) {
            free(v34);
          }
        }
        sub_100134750(buf, (char *)[v17 UTF8String]);
        *(void *)double v45 = buf;
        int v21 = sub_1013AFB7C(v14, buf, (uint64_t)&unk_101D0B290, (long long **)v45);
        int v22 = 2;
      }
      unsigned char v21[10] = v22;
      if (v48 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_52:
      if (v13 == (id)++v16)
      {
        id v38 = [v12 countByEnumeratingWithState:&v41 objects:v46 count:16];
        id v13 = v38;
        if (!v38) {
          goto LABEL_67;
        }
        goto LABEL_28;
      }
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  xpc_object_t v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,handleIDSBatchIDQueryResponse,query response is Empty. Early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    *(_WORD *)double v45 = 0;
    int64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::handleIDSBatchIDQueryResponse(NSDictionary<NSString *,NSNumber *> *, NSString *, NSError *)", "%s\n", v7);
    goto LABEL_72;
  }
}

void sub_10139B5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10139B5C8(uint64_t a1)
{
  if (*(void *)(a1 + 616))
  {
    sub_10139B77C((uint64_t *)(a1 + 616), 0);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,cleanupEmergencyContactsMetrics,fEmergencyContactsMetric is nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::cleanupEmergencyContactsMetrics()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return sub_10139991C(a1);
}

uint64_t sub_10139B77C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1013AEE78(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10139B7CC(uint64_t a1)
{
  return sub_10139B7D8(a1 + 8, 3);
}

uint64_t sub_10139B7D8(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  int v85 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_101AB24DC();
    goto LABEL_157;
  }
  uint64_t v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101AB264C(qword_1024193D0 == -1);
    goto LABEL_157;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102322C78);
  }
  id v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    int64_t v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int64_t v7 = (void *)*v7;
    }
    sub_1013A71AC(*(_DWORD *)(a1 + 4), __p);
    int v8 = SHIBYTE(v89);
    int v9 = *(unsigned char **)__p;
    sub_1013A7198(a2, v96);
    int v10 = __p;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v99 >= 0) {
      uint64_t v11 = v96;
    }
    else {
      uint64_t v11 = *(unsigned char **)v96;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v92 = 2080;
    uint64_t v93 = v10;
    __int16 v94 = 2080;
    uint64_t v95 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    uint64_t v3 = &qword_102419000;
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    id v58 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      id v58 = (void *)*v58;
    }
    sub_1013A71AC(*(_DWORD *)(a1 + 4), v96);
    int v59 = v99;
    double v60 = *(unsigned char **)v96;
    sub_1013A7198(a2, v83);
    int v61 = v96;
    if (v59 < 0) {
      int v61 = v60;
    }
    if (v84 >= 0) {
      int v62 = v83;
    }
    else {
      int v62 = (void **)v83[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v58;
    __int16 v87 = 2080;
    uint64_t v88 = v61;
    __int16 v89 = 2080;
    int v90 = v62;
    double v63 = (char *)_os_log_send_and_compose_impl();
    if (v84 < 0) {
      operator delete(v83[0]);
    }
    uint64_t v3 = &qword_102419000;
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    goto LABEL_28;
  }
  id v13 = (uint64_t **)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 4);
  uint64_t v15 = a1 + 16;
  do
  {
    int v16 = *(_DWORD *)(v12 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      int v18 = (uint64_t *)v12;
    }
    else {
      int v18 = (uint64_t *)(v12 + 8);
    }
    if (!v17) {
      uint64_t v15 = v12;
    }
    uint64_t v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_101AB27C8();
    goto LABEL_157;
  }
  id v19 = *(uint64_t (**)(void *, uint64_t))(v15 + 40);
  uint64_t v20 = *(void *)(v15 + 48);
  int v21 = (void *)(*(void *)(a1 + 32) + (v20 >> 1));
  if (v20) {
    id v19 = *(uint64_t (**)(void *, uint64_t))(*v21 + v19);
  }
  uint64_t v22 = v19(v21, a2);
  uint64_t v23 = v22;
  int v82 = v22;
  if (a2 <= 1 && v22 != v85)
  {
    sub_101AB2C18();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    id v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      id v25 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        id v25 = (void *)*v25;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      double v67 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v67 = (void *)*v67;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v67;
      __int16 v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102322C78);
  }
  int v26 = qword_1024193D8;
  os_log_type_t v27 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v27))
  {
    id v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      id v28 = (void *)*v28;
    }
    sub_1013A71AC(v23, buf);
    if (v94 >= 0) {
      id v29 = buf;
    }
    else {
      id v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v87 = 2080;
    uint64_t v88 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    std::string::size_type v64 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      std::string::size_type v64 = (void *)*v64;
    }
    sub_1013A71AC(v23, __p);
    if (v89 >= 0) {
      unint64_t v65 = __p;
    }
    else {
      unint64_t v65 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v96 = 136315394;
    *(void *)&v96[4] = v64;
    __int16 v97 = 2080;
    uint64_t v98 = v65;
    unint64_t v66 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  if (v23 != v85)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    id v30 = qword_1024193D8;
    os_log_type_t v31 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v31))
    {
      id v32 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        id v32 = (void *)*v32;
      }
      sub_1013A71AC(v85, __p);
      id v33 = v3;
      int v34 = SHIBYTE(v89);
      id v35 = *(unsigned char **)__p;
      sub_100134750(v96, "Exit");
      id v36 = __p;
      if (v34 < 0) {
        id v36 = v35;
      }
      if (v99 >= 0) {
        id v37 = v96;
      }
      else {
        id v37 = *(unsigned char **)v96;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v92 = 2080;
      uint64_t v93 = v36;
      __int16 v94 = 2080;
      uint64_t v95 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      uint64_t v3 = v33;
      if (SHIBYTE(v89) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      uint64_t v69 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v69 = (void *)*v69;
      }
      sub_1013A71AC(v85, v96);
      uint64_t v70 = v3;
      int v71 = v99;
      int v72 = *(unsigned char **)v96;
      sub_100134750(v83, "Exit");
      int v73 = v96;
      if (v71 < 0) {
        int v73 = v72;
      }
      if (v84 >= 0) {
        int v74 = v83;
      }
      else {
        int v74 = (void **)v83[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v69;
      __int16 v87 = 2080;
      uint64_t v88 = v73;
      __int16 v89 = 2080;
      int v90 = v74;
      std::string v75 = (char *)_os_log_send_and_compose_impl();
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      uint64_t v3 = v70;
      id v13 = (uint64_t **)(a1 + 8);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
    }
    uint64_t v38 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v85;
    double v39 = sub_1000C5658(v13, &v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    int v40 = v39[5];
    uint64_t v41 = (uint64_t)v39[6];
    long long v42 = (void *)(v38 + (v41 >> 1));
    if (v41) {
      int v40 = *(uint64_t **)(*v42 + v40);
    }
    int v43 = ((uint64_t (*)(void *, uint64_t))v40)(v42, 1);
    if (v43 == v85)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      long long v44 = qword_1024193D8;
      os_log_type_t v45 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v45))
      {
        uint64_t v46 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v46 = (void *)*v46;
        }
        sub_1013A71AC(v23, __p);
        int v47 = v3;
        int v48 = SHIBYTE(v89);
        uint64_t v49 = *(unsigned char **)__p;
        sub_100134750(v96, "Enter");
        int v50 = __p;
        if (v48 < 0) {
          int v50 = v49;
        }
        if (v99 >= 0) {
          char v51 = v96;
        }
        else {
          char v51 = *(unsigned char **)v96;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v46;
        __int16 v92 = 2080;
        uint64_t v93 = v50;
        __int16 v94 = 2080;
        uint64_t v95 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        uint64_t v3 = v47;
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102322C78);
        }
        uint64_t v76 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v76 = (void *)*v76;
        }
        sub_1013A71AC(v23, v96);
        int v77 = v99;
        unint64_t v78 = *(unsigned char **)v96;
        sub_100134750(v83, "Enter");
        __int16 v79 = v96;
        if (v77 < 0) {
          __int16 v79 = v78;
        }
        if (v84 >= 0) {
          uint64_t v80 = v83;
        }
        else {
          uint64_t v80 = (void **)v83[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v76;
        __int16 v87 = 2080;
        uint64_t v88 = v79;
        __int16 v89 = 2080;
        int v90 = v80;
        __int16 v81 = (char *)_os_log_send_and_compose_impl();
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyADR>::handleEvent(Event) [T = CLEmergencyADR]", "%s\n", v81);
        if (v81 != buf) {
          free(v81);
        }
      }
      uint64_t v52 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v82;
      int v53 = sub_1000C5658(v13, &v82, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      int v54 = v53[5];
      uint64_t v55 = (uint64_t)v53[6];
      uint64_t v56 = (void *)(v52 + (v55 >> 1));
      if (v55) {
        int v54 = *(uint64_t **)(*v56 + v54);
      }
      uint64_t v23 = ((uint64_t (*)(void *, void))v54)(v56, 0);
      if (v23 == v82) {
        goto LABEL_89;
      }
      sub_101AB2938();
    }
    else
    {
      sub_101AB2AA8();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_10139C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10139C548(uint64_t a1, int a2)
{
  v7[0] = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  char v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handlePhoneNumberChange,received phone number update for inst %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    v7[1] = 67240192;
    _OWORD v7[2] = a2;
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::handlePhoneNumberChange(SimInstance)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(void *)uint64_t buf = v7;
  *((unsigned char *)sub_10097F690(a1 + 336, v7, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = 1;
  return sub_10139B7D8(a1 + 8, 6);
}

std::string *sub_10139C734(std::string *a1, const std::string *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  char v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v5 = a2;
    }
    else {
      id v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 136380675;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handleCompanionNumberChange,companion phone number changed to %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::handleCompanionNumberChange(const std::string &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return std::string::operator=(a1 + 10, a2);
}

uint64_t sub_10139C910(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  char v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(double *)a2;
    int v6 = *(unsigned __int8 *)(a2 + 8);
    int v7 = *(unsigned __int8 *)(a2 + 9);
    int v8 = *(unsigned __int8 *)(a2 + 16);
    v25[0] = 68290050;
    __int16 v26 = 2082;
    v25[1] = 0;
    os_log_type_t v27 = "";
    __int16 v28 = 2050;
    double v29 = v5;
    __int16 v30 = 1026;
    int v31 = v6;
    __int16 v32 = 1026;
    int v33 = v7;
    __int16 v34 = 1026;
    int v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handleBatteryStatusChange\", \"battery level\":\"%{public}.1f\", \"battery charged\":%{public}d, \"battery connected\":%{public}d, \"battery was connected\":%{public}d}", (uint8_t *)v25, 0x2Eu);
  }
  double v9 = *(double *)(a1 + 304);
  if (v9 <= 0.0 || v9 > 10.0)
  {
    if (v9 <= 10.0 || v9 > 30.0)
    {
      BOOL v12 = v9 > 100.0 || v9 <= 60.0;
      CFStringRef v13 = @"61-100%";
      if (v12) {
        CFStringRef v13 = @"Unknown";
      }
      if (v9 <= 30.0 || v9 > 60.0) {
        uint64_t v15 = (__CFString *)v13;
      }
      else {
        uint64_t v15 = @"31-60%";
      }
    }
    else
    {
      uint64_t v15 = @"11-30%";
    }
  }
  else
  {
    uint64_t v15 = @"10% or less";
  }
  uint64_t v16 = a1 + 304;
  double v17 = *(double *)a2;
  if (*(double *)a2 <= 0.0 || v17 > 10.0)
  {
    if (v17 <= 10.0 || v17 > 30.0)
    {
      if (v17 <= 30.0 || v17 > 60.0)
      {
        if (v17 > 100.0 || v17 <= 60.0) {
          CFStringRef v20 = @"Unknown";
        }
        else {
          CFStringRef v20 = @"61-100%";
        }
      }
      else
      {
        CFStringRef v20 = @"31-60%";
      }
    }
    else
    {
      CFStringRef v20 = @"11-30%";
    }
  }
  else
  {
    CFStringRef v20 = @"10% or less";
  }
  unsigned int v22 = [(__CFString *)v15 isEqualToString:v20];
  uint64_t v23 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
  *(void *)(v16 + 16) = v23;
  return v22 ^ 1;
}

uint64_t sub_10139CB58(uint64_t a1, int a2)
{
  if (_os_feature_enabled_impl())
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    char v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,handleStewieSupportChange,supported,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::handleStewieSupportChange(const BOOL)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  *(unsigned char *)(a1 + 328) = a2;
  *(unsigned char *)(a1 + 329) = 1;
  return sub_10139B7D8(a1 + 8, 4);
}

uint64_t sub_10139CD38(uint64_t a1)
{
  return sub_10139B7D8(a1 + 8, 7);
}

void sub_10139CD44(uint64_t a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  char v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_100AABABC(a2, __p);
    double v5 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handleCommTypeChange,comm type changed to %{public}s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    sub_100AABABC(a2, buf);
    if (v9 >= 0) {
      int v6 = buf;
    }
    else {
      int v6 = *(unsigned char **)buf;
    }
    int v10 = 136446210;
    uint64_t v11 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::handleCommTypeChange(Emergency::CommunicationType)", "%s\n", v7);
    if (v7 != (char *)__p) {
      free(v7);
    }
  }
  *(_DWORD *)(a1 + 272) = a2;
}

void sub_10139CF68(uint64_t a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  char v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_10101A768(a2, __p);
    double v5 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ADR,handleTriggerTypeChange,call trigger type changed to %{public}s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    sub_10101A768(a2, buf);
    if (v9 >= 0) {
      int v6 = buf;
    }
    else {
      int v6 = *(unsigned char **)buf;
    }
    int v10 = 136446210;
    uint64_t v11 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::handleTriggerTypeChange(EmergencyTriggerType)", "%s\n", v7);
    if (v7 != (char *)__p) {
      free(v7);
    }
  }
  *(_DWORD *)(a1 + 276) = a2;
}

BOOL sub_10139D18C(uint64_t a1, void *a2, void *a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10139D914;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  if (qword_102487718 != -1) {
    dispatch_once(&qword_102487718, block);
  }
  *(unsigned char *)(a1 + 330) = 1;
  if (a3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v7 = [a3 code];
      int v8 = (const char *)[a3 domain].UTF8String;
      id v9 = [[objc_msgSend(a3, "localizedDescription") UTF8String];
      *(_DWORD *)uint64_t buf = 67240706;
      unsigned int v44 = v7;
      __int16 v45 = 2082;
      uint64_t v46 = v8;
      __int16 v47 = 2082;
      id v48 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ADR,handleMedicalIdChange,failed to fetch medical ID data,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      unsigned int v22 = [a3 code];
      id v23 = [[[a3 domain] UTF8String];
      id v24 = [[objc_msgSend(a3, "localizedDescription") UTF8String];
      int v37 = 67240706;
      unsigned int v38 = v22;
      __int16 v39 = 2082;
      id v40 = v23;
      __int16 v41 = 2082;
      id v42 = v24;
      id v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::handleMedicalIdChange(_HKMedicalIDData *, NSError *)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  else
  {

    if (a2)
    {
      *(void *)(a1 + 280) = a2;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ADR,handleMedicalIdChange,successfully fetched medical ID data", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v37) = 0;
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleMedicalIdChange(_HKMedicalIDData *, NSError *)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      BOOL v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v35 = [[[*(id *)(a1 + 280) dateSaved] description] UTF8String];
        unsigned int v34 = [*(id *)(a1 + 280) isDisabled];
        unsigned int v33 = [*(id *)(a1 + 280) shareDuringEmergency];
        BOOL v32 = [*(id *)(a1 + 280) pictureData] != 0;
        BOOL v31 = [*(id *)(a1 + 280) name] != 0;
        BOOL v30 = [*(id *)(a1 + 280) gmtBirthdate] != 0;
        BOOL v29 = [*(id *)(a1 + 280) height] != 0;
        BOOL v28 = [*(id *)(a1 + 280) weight] != 0;
        BOOL v13 = [*(id *)(a1 + 280) primaryLanguageCode] != 0;
        BOOL v14 = [*(id *)(a1 + 280) bloodType] != 0;
        BOOL v15 = [*(id *)(a1 + 280) isOrganDonor] != 0;
        unsigned int v16 = [[objc_msgSend(*(id *)(a1 + 280), "emergencyContacts") count];
        BOOL v17 = [*(id *)(a1 + 280) medicalConditions] != 0;
        BOOL v18 = [*(id *)(a1 + 280) medicalNotes] != 0;
        BOOL v19 = [*(id *)(a1 + 280) allergyInfo] != 0;
        id v20 = [*(id *)(a1 + 280) medicationInfo];
        *(_DWORD *)uint64_t buf = 68293122;
        unsigned int v44 = 0;
        __int16 v45 = 2082;
        uint64_t v46 = "";
        __int16 v47 = 2082;
        id v48 = v35;
        __int16 v49 = 1026;
        unsigned int v50 = v34;
        __int16 v51 = 1026;
        unsigned int v52 = v33;
        __int16 v53 = 1026;
        BOOL v54 = v32;
        __int16 v55 = 1026;
        BOOL v56 = v31;
        __int16 v57 = 1026;
        BOOL v58 = v30;
        __int16 v59 = 1026;
        BOOL v60 = v29;
        __int16 v61 = 1026;
        BOOL v62 = v28;
        __int16 v63 = 1026;
        BOOL v64 = v13;
        __int16 v65 = 1026;
        BOOL v66 = v14;
        __int16 v67 = 1026;
        BOOL v68 = v15;
        __int16 v69 = 1026;
        unsigned int v70 = v16;
        __int16 v71 = 1026;
        BOOL v72 = v17;
        __int16 v73 = 1026;
        BOOL v74 = v18;
        __int16 v75 = 1026;
        BOOL v76 = v19;
        __int16 v77 = 1026;
        BOOL v78 = v20 != 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handleMedicalIdChange\", \"date saved\":%{public, location:escape_only}s, \"lock screen disabled\":%{public}hhd, \"share during emergency\":%{public}hhd, \"picture available\":%{public}hhd, \"name set\":%{public}hhd, \"birthday set\":%{public}hhd, \"height set\":%{public}hhd, \"weight set\":%{public}hhd, \"primary language set\":%{public}hhd, \"blood type set\":%{public}hhd, \"organ donor set\":%{public}hhd, \"number of emergency contacts\":%{public}d, \"conditions set\":%{public}hhd, \"notes set\":%{public}hhd, \"allergies set\":%{public}hhd, \"medications\":%{public}hhd}", buf, 0x76u);
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,handleMedicalIdChange,medical ID fetch succeeded but returned no data", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v37) = 0;
        os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleMedicalIdChange(_HKMedicalIDData *, NSError *)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      *(void *)(a1 + 280) = 0;
    }
  }
  sub_10139B7D8(a1 + 8, 5);
  return a3 == 0;
}

void sub_10139D914(uint64_t a1)
{
}

BOOL sub_10139D91C(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    char v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240706;
      unsigned int v33 = [a3 code];
      __int16 v34 = 2082;
      id v35 = (const char *)[a3 domain];
      __int16 v36 = 2082;
      id v37 = [[objc_msgSend(a3, "localizedDescription") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ADR,handleEmergencyResponseAreaUpdate,failed to fetch infered place,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x1Cu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    LODWORD(v27) = 67240706;
    HIDWORD(v27) = [a3 code];
    __int16 v28 = 2082;
    id v29 = [objc_msgSend(a3, "domain") UTF8String];
    __int16 v30 = 2082;
    id v31 = [[objc_msgSend(a3, "localizedDescription") UTF8String];
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v18);
    goto LABEL_61;
  }
  if (a2)
  {
    if (![a2 count])
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      BOOL v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ADR,handleEmergencyResponseAreaUpdate,no infered place available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v27) = 0;
        unsigned int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (!*(void *)(a1 + 296)) {
        return 0;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,handleEmergencyResponseAreaUpdate,clearing previous infered place", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v27) = 0;
        id v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }

      *(void *)(a1 + 296) = 0;
      ++*(_DWORD *)(a1 + 288);
      return 1;
    }
    if ((unint64_t)[a2 count] >= 2)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        unsigned int v33 = [a2 count];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #ADR,handleEmergencyResponseAreaUpdate,received more than one infered place,only using first one,count,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LODWORD(v27) = 67240192;
        HIDWORD(v27) = [a2 count];
        id v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    id v9 = [a2 objectAtIndexedSubscript:0];
    if (sub_10139E374((uint64_t)v9, *(void **)(a1 + 296), v9))
    {

      *(void *)(a1 + 296) = 0;
      id v10 = v9;
      *(void *)(a1 + 296) = v10;
      ++*(_DWORD *)(a1 + 288);
      id v11 = [v10 placemark];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      BOOL v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v13 = &v27;
        sub_100134750(&v27, off_102322C98[(void)[*(id *)(a1 + 296) userType]]);
        if (SBYTE3(v31) < 0) {
          BOOL v13 = v27;
        }
        sub_100134750(__p, off_102322CC0[(void)[*(id *)(a1 + 296) placeType]]);
        if (v26 >= 0) {
          BOOL v14 = __p;
        }
        else {
          BOOL v14 = (void **)__p[0];
        }
        id v15 = [[[v11 name] UTF8String];
        id v16 = [[objc_msgSend(v11, "mecardAddress") UTF8String];
        *(_DWORD *)uint64_t buf = 68290051;
        unsigned int v33 = 0;
        __int16 v34 = 2082;
        id v35 = "";
        __int16 v36 = 2081;
        id v37 = v13;
        __int16 v38 = 2082;
        __int16 v39 = v14;
        __int16 v40 = 2081;
        id v41 = v15;
        __int16 v42 = 2081;
        id v43 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handleEmergencyResponseAreaUpdate,received new infered place\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (SBYTE3(v31) < 0) {
          operator delete(v27);
        }
      }
      return 1;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v21 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,handleEmergencyResponseAreaUpdate,infered place has not changed", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v27) = 0;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v18);
LABEL_61:
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 0;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    BOOL v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,handleEmergencyResponseAreaUpdate,infered place array is nil", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v27) = 0;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::handleEmergencyResponseAreaUpdate(NSArray<_CLPlaceInference *> *, NSError *)", "%s\n", v18);
      goto LABEL_61;
    }
  }
  return result;
}

void sub_10139E338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10139E374(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {
    if (a3)
    {
      id v5 = [a2 placemark];
      id v6 = [a3 placemark];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v8 = v29;
        sub_100134750(v29, off_102322C98[(void)[a2 userType]]);
        if (v30 < 0) {
          int v8 = (void **)v29[0];
        }
        id v9 = __p;
        sub_100134750(__p, off_102322CC0[(void)[a2 placeType]]);
        if (v28 < 0) {
          id v9 = (void **)__p[0];
        }
        id v10 = [objc_msgSend(v5, "mecardAddress") UTF8String];
        *(_DWORD *)uint64_t buf = 68289795;
        int v32 = 0;
        __int16 v33 = 2082;
        __int16 v34 = "";
        __int16 v35 = 2081;
        *(void *)__int16 v36 = v8;
        *(_WORD *)&v36[8] = 2082;
        id v37 = v9;
        __int16 v38 = 2081;
        id v39 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,hasEmergencyResponseAreaChanged,old infered place\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s}", buf, 0x30u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v30 < 0) {
          operator delete(v29[0]);
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
      }
      id v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        BOOL v12 = v29;
        sub_100134750(v29, off_102322C98[(void)[a3 userType]]);
        if (v30 < 0) {
          BOOL v12 = (void **)v29[0];
        }
        BOOL v13 = __p;
        sub_100134750(__p, off_102322CC0[(void)[a3 placeType]]);
        if (v28 < 0) {
          BOOL v13 = (void **)__p[0];
        }
        id v14 = [objc_msgSend(v6, "mecardAddress") UTF8String];
        *(_DWORD *)uint64_t buf = 68289795;
        int v32 = 0;
        __int16 v33 = 2082;
        __int16 v34 = "";
        __int16 v35 = 2081;
        *(void *)__int16 v36 = v12;
        *(_WORD *)&v36[8] = 2082;
        id v37 = v13;
        __int16 v38 = 2081;
        id v39 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,hasEmergencyResponseAreaChanged,new infered place\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s}", buf, 0x30u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v30 < 0) {
          operator delete(v29[0]);
        }
      }
      id v15 = [a2 userType];
      id v16 = [a3 userType];
      id v17 = [v5 mecardAddress];
      id v18 = [v6 mecardAddress];
      if (v17)
      {
        if (v18) {
          unsigned int v19 = [v18 isEqualToString:v17] ^ 1;
        }
        else {
          unsigned int v19 = 1;
        }
      }
      else
      {
        unsigned int v19 = v18 != 0;
      }
      if (v15 == v16) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = 1;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v23 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289794;
        int v32 = 0;
        __int16 v33 = 2082;
        __int16 v34 = "";
        __int16 v35 = 1026;
        *(_DWORD *)__int16 v36 = v21;
        *(_WORD *)&v36[4] = 1026;
        *(_DWORD *)&v36[6] = v15 != v16;
        LOWORD(v37) = 1026;
        *(_DWORD *)((char *)&v37 + 2) = v19;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,hasEmergencyResponseAreaChanged,changed fields\", \"any field\":%{public}hhd, \"label\":%{public}hhd, \"mecardaddress\":%{public}hhd}", buf, 0x24u);
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      unsigned int v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#ADR,hasEmergencyResponseAreaChanged,no new infered place", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v29[0]) = 0;
        char v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::hasEmergencyResponseAreaChanged(_CLPlaceInference *, _CLPlaceInference *) const", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      return 1;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#ADR,hasEmergencyResponseAreaChanged,no old infered place", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v29[0]) = 0;
      id v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::hasEmergencyResponseAreaChanged(_CLPlaceInference *, _CLPlaceInference *) const", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    return a3 != 0;
  }
  return v21;
}

void sub_10139E9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10139EA20(uint64_t a1)
{
  *(_DWORD *)(a1 + 288) = 0;

  *(void *)(a1 + 296) = 0;
}

uint64_t sub_10139EA50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2 && *(void *)(a4 + 24))
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (!v6) {
      sub_10015E48C();
    }
    id v9 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    id v10 = sub_100A80D4C(v9);
    sub_100A7C668((int *)v10, (uint64_t)v53);
    if (!v54)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v30 = qword_1024193E8;
      uint64_t v29 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v58 = 0;
      __int16 v59 = 2082;
      BOOL v60 = "";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,sendAdr,no valid partner certs\"}", buf, 0x12u);
      goto LABEL_39;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    if (!v11) {
      sub_10015E48C();
    }
    uint64_t v12 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
    id v13 = objc_alloc_init((Class)NSMutableDictionary);
    id v14 = sub_10139F7BC(a1, v12, 0, a3);
    if (v14)
    {
      [v13 setValue:v14 forKey:@"call_information"];
    }
    id v15 = sub_10139FE64(a1, a3);
    if (v15)
    {
      [v13 setValue:v15 forKey:@"caller_information"];
    }
    id v16 = sub_1013A0BA0(a1, a3);
    if (v16)
    {
      [v13 setValue:v16 forKey:@"caller_location"];
    }
    id v17 = sub_100AABDF0((uint64_t)v13);
    if (v17)
    {
      id v52 = 0;
      id v18 = sub_100FEE2CC(v17, 0x20u, &v52);
      id v19 = v52;
      id v20 = v18;
      if (v18 && v52)
      {
        signed int v21 = [[a2 valueForKey:@"timestamp"] intValue];
        id v22 = [objc_alloc((Class)NSMutableData) initWithLength:32];
        CC_SHA256([v18 bytes], (CC_LONG)[v18 length], (unsigned __int8 *)[v22 mutableBytes]);
        id v23 = sub_100FEF048((uint64_t)v53, v21, (uint64_t)v22, (uint64_t)v52);
        id v24 = v23;
        id v25 = sub_1013A1900(a1, v12, 0);
        id v26 = v25;
        uint64_t v27 = sub_100A96A4C(a1 + 168, v12);
        if (*(char *)(v27 + 159) < 0)
        {
          sub_1000DC48C(__p, *(void **)(v27 + 136), *(void *)(v27 + 144));
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)(v27 + 136);
          uint64_t v51 = *(void *)(v27 + 152);
        }
        if (v51 >= 0) {
          __int16 v34 = (void *)HIBYTE(v51);
        }
        else {
          __int16 v34 = __p[1];
        }
        if (v34)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          __int16 v35 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,sending ADR for native number", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            __int16 v45 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v45);
            if (v45 != (char *)buf) {
              free(v45);
            }
          }
          id v36 = sub_1013A1F34(a1, (uint64_t *)__p, v21, (uint64_t)a2, v18, (uint64_t)v23, (uint64_t)v25);
          sub_10110DAEC((uint64_t)v56, a4);
          BOOL v49 = sub_1013A243C(a1, 0, (uint64_t)v36, a3, (uint64_t)v56);
          sub_100ABDF68(v56);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          id v37 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,native number is empty, not sending ADR", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            id v48 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v48);
            if (v48 != (char *)buf) {
              free(v48);
            }
          }
          BOOL v49 = 0;
        }
        if (*(char *)(a1 + 263) < 0) {
          uint64_t v38 = *(void *)(a1 + 248);
        }
        else {
          uint64_t v38 = *(unsigned __int8 *)(a1 + 263);
        }
        if (!v38 || byte_10248D718)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          __int16 v42 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,companion number is empty or device supports alternate account, not sending ADR", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            uint64_t v46 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v46);
            if (v46 != (char *)buf) {
              free(v46);
            }
          }
          BOOL v41 = 0;
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          id v39 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#ADR,sendAdr,sending ADR for companion number", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            __int16 v47 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v47);
            if (v47 != (char *)buf) {
              free(v47);
            }
          }
          id v40 = sub_1013A1F34(a1, (uint64_t *)(a1 + 240), v21, (uint64_t)a2, v18, (uint64_t)v23, (uint64_t)v25);
          sub_10110DAEC((uint64_t)v55, a4);
          BOOL v41 = sub_1013A243C(a1, 1, (uint64_t)v40, a3, (uint64_t)v55);
          sub_100ABDF68(v55);
        }
        uint64_t v29 = v49 | v41;
        if (SHIBYTE(v51) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_40;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v32 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#ADR,sendAdr,encrypted ADR data and/or key are nil", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0))
      {
LABEL_39:
        uint64_t v29 = 0;
LABEL_40:
        sub_100ABB83C((uint64_t)v53);
        return v29;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v31 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#ADR,sendAdr,failed to serialize ADR data dict into JSON", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_39;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
    }
    LOWORD(__p[0]) = 0;
    unsigned int v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
    goto LABEL_39;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  char v28 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#ADR,sendAdr,required input is missing", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    v53[0] = 0;
    id v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendAdr(CFAbsoluteTime, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  return 0;
}

void sub_10139F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100ABB83C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_10139F7B4()
{
}

id sub_10139F7BC(uint64_t a1, int a2, char a3, uint64_t a4)
{
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v9 = sub_100A96A4C(a1 + 168, a2);
  if (*(char *)(v9 + 159) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(v9 + 136), *(void *)(v9 + 144));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v9 + 136);
    uint64_t v39 = *(void *)(v9 + 152);
  }
  sub_100103240();
  int v10 = sub_10010145C();
  if (byte_10248D718) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  if (v11 != 1)
  {
    if (SHIBYTE(v39) < 0)
    {
      if (!__dst[1]) {
        goto LABEL_27;
      }
      id v13 = (void **)__dst[0];
    }
    else
    {
      if (!HIBYTE(v39)) {
        goto LABEL_27;
      }
      id v13 = __dst;
    }
    id v15 = +[NSString stringWithUTF8String:v13];
    CFStringRef v16 = @"tel";
LABEL_26:
    [v8 setValue:v15 forKey:v16];
    goto LABEL_27;
  }
  uint64_t v12 = (void *)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
  {
    if (!*(void *)(a1 + 248)) {
      goto LABEL_17;
    }
    uint64_t v12 = (void *)*v12;
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 263)) {
LABEL_16:
  }
    [v8 setValue:[NSString stringWithUTF8String:v12] forKey:@"tel"];
LABEL_17:
  if (SHIBYTE(v39) < 0)
  {
    if (__dst[1])
    {
      id v14 = (void **)__dst[0];
      goto LABEL_25;
    }
  }
  else if (HIBYTE(v39))
  {
    id v14 = __dst;
LABEL_25:
    id v15 = +[NSString stringWithUTF8String:v14];
    CFStringRef v16 = @"tel_alt";
    goto LABEL_26;
  }
LABEL_27:
  id v17 = *(void **)(a1 + 280);
  if (v17)
  {
    if ([v17 shareDuringEmergency])
    {
      if ([*(id *)(a1 + 280) primaryLanguageCode])
      {
        [v8 setValue:[*(id *)(a1 + 280) primaryLanguageCode] forKey:@"device_language"];
        if (a4)
        {
          if ((a3 & 1) == 0)
          {
            std::string::assign((std::string *)(a4 + 1152), (const std::string::value_type *)[objc_msgSend(*(id *)(a1 + 280), "primaryLanguageCode") UTF8String]);
            if ([*(id *)(a1 + 280) primaryLanguageCodeModifiedDate]) {
              *(_DWORD *)(a4 + 1236) = sub_1013A29B4((uint64_t)[*(id *)(a1 + 280) primaryLanguageCodeModifiedDate]);
            }
            if (objc_opt_class()
              && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
            {
              id v18 = [(char *)[*(id *)(a1 + 280) primaryLanguageCode] UTF8String];
              *(_DWORD *)uint64_t buf = 126;
              sub_100134750(v41, v18);
              *(_DWORD *)((char *)&v45 + 2) = 6;
              uint64_t v36 = 0;
              id v37 = 0;
              long long __p = 0;
              p_p = &__p;
              LOBYTE(v33) = 0;
              long long __p = operator new(0x28uLL);
              uint64_t v36 = (uint64_t)__p;
              id v37 = (char *)__p + 40;
              uint64_t v36 = sub_100682A48((uint64_t)&v37, (uint64_t)buf, (uint64_t)&v47, (uint64_t)__p);
              sub_100118010((uint64_t)v41);
              id v19 = *(void **)(a1 + 264);
              memset(v34, 0, sizeof(v34));
              sub_100682C20(v34, (uint64_t)__p, v36, 0xCCCCCCCCCCCCCCCDLL * ((v36 - (uint64_t)__p) >> 3));
              [v19 setMeasurements:sub_10067C03C(v34)];
              *(void *)uint64_t buf = v34;
              sub_100682B1C((void ***)buf);
              if ([*(id *)(a1 + 280) primaryLanguageCodeModifiedDate])
              {
                int v20 = sub_1013A29B4((uint64_t)[*(id *)(a1 + 280) primaryLanguageCodeModifiedDate]);
                *(_DWORD *)uint64_t buf = 137;
                *(_DWORD *)BOOL v41 = v20;
                *(_DWORD *)((char *)&v45 + 2) = 0;
                sub_100A9C944(&p_p, (uint64_t)buf, 1uLL);
                sub_100118010((uint64_t)v41);
                signed int v21 = *(void **)(a1 + 264);
                memset(v31, 0, sizeof(v31));
                sub_100682C20(v31, (uint64_t)p_p, v33, 0xCCCCCCCCCCCCCCCDLL * ((v33 - (uint64_t)p_p) >> 3));
                [v21 setMeasurements:sub_10067C03C(v31)];
                *(void *)uint64_t buf = v31;
                sub_100682B1C((void ***)buf);
                *(void *)uint64_t buf = &p_p;
                sub_100682B1C((void ***)buf);
              }
              *(void *)uint64_t buf = &__p;
              sub_100682B1C((void ***)buf);
            }
          }
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    sub_100AABABC(*(_DWORD *)(a1 + 272), buf);
    if (SBYTE3(v43) >= 0) {
      id v22 = buf;
    }
    else {
      id v22 = *(uint8_t **)buf;
    }
    [v8 setValue:[NSString stringWithUTF8String:v22] forKey:@"medium"];
    if (!sub_1013A2A28(a1))
    {
LABEL_51:
      if (SBYTE3(v43) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_53;
    }
    sub_1013A2AA8(a1, &__p);
    if (SHIBYTE(v37) < 0)
    {
      if (!v36)
      {
LABEL_50:
        operator delete(__p);
        goto LABEL_51;
      }
      id v23 = __p;
    }
    else
    {
      if (!HIBYTE(v37)) {
        goto LABEL_51;
      }
      id v23 = &__p;
    }
    [v8 setValue:[NSString stringWithUTF8String:v23] forKey:@"trigger_type"];
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_53:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v24 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v25 = [[v8 valueForKey:@"tel"] UTF8String];
    id v26 = [[objc_msgSend(v8, "valueForKey:", @"tel_alt") UTF8String];
    id v27 = [[v8 valueForKey:@"medium"] UTF8String];
    id v28 = [[[v8 valueForKey:@"trigger_type"] UTF8String];
    id v29 = [[objc_msgSend(v8, "valueForKey:", @"device_language") UTF8String];
    *(_DWORD *)uint64_t buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)BOOL v41 = 2082;
    *(void *)&v41[2] = "";
    __int16 v42 = 2081;
    id v43 = v25;
    __int16 v44 = 2081;
    id v45 = v26;
    __int16 v46 = 2082;
    id v47 = v27;
    __int16 v48 = 2082;
    id v49 = v28;
    __int16 v50 = 2082;
    id v51 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createCallInfoDict\", \"tel\":%{private, location:escape_only}s, \"tel_alt\":%{private, location:escape_only}s, \"medium\":%{public, location:escape_only}s, \"trigger_type\":%{public, location:escape_only}s, \"device_language\":%{public, location:escape_only}s}", buf, 0x44u);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(__dst[0]);
  }
  return v8;
}

void sub_10139FD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a31 = &a12;
  sub_100682B1C((void ***)&a31);
  a31 = (char *)&a18;
  sub_100682B1C((void ***)&a31);
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_10139FE64(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)(a1 + 280);
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerInfoDict,no data available for caller information dict so not sending", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(__p) = 0;
      id v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerInfoDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    if (a2)
    {
      *(void *)&long long v10 = 0x200000002;
      *((void *)&v10 + 1) = 0x200000002;
      *(_OWORD *)(a2 + 1108) = v10;
      *(_OWORD *)(a2 + 1124) = v10;
      *(void *)(a2 + 1140) = 0x200000002;
      sub_1013A2BD8(a1);
    }
    return 0;
  }
  if (([v4 shareDuringEmergency] & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerInfoDict,medical ID sharing not allowed by user", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(__p) = 0;
      __int16 v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerInfoDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    sub_1013A2E20(a1, (_DWORD *)a2);
    if (a2) {
      sub_1013A302C(a1);
    }
    return 0;
  }
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  id v6 = [*(id *)(a1 + 280) name];
  if (v6) {
    [v5 setValue:[sub_101479144([*(id *)(a1 + 280) name], 0x7D0u)] forKey:@"name"];
  }
  id v7 = [*(id *)(a1 + 280) gmtBirthdate];
  if (v7) {
    [v5 setValue:[NSNumber numberWithInteger:-[NSDateComponents year](-[NSCalendar components:fromDate:toDate:options:](+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian), "components:fromDate:toDate:options:", 4, objc_msgSend(*(id *)(a1 + 280), "gmtBirthdate"), +[NSDate date](NSDate, "date"), 0), "year")] forKey:@"age"];
  }
  id v50 = [*(id *)(a1 + 280) weight];
  if (v50)
  {
    [objc_msgSend(*(id *)(a1 + 280), "weight") doubleValueForUnit:+[HKUnit unitFromString:](HKUnit, "unitFromString:", @"kg")];
    [v5 setValue:[NSNumber numberWithDouble:0.0] forKey:@"weight"];
  }
  id v49 = [*(id *)(a1 + 280) height];
  if (v49)
  {
    [objc_msgSend(*(id *)(a1 + 280), "height") doubleValueForUnit:+[HKUnit unitFromString:](HKUnit, "unitFromString:", @"m")];
    [v5 setValue:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")] forKey:@"height"];
  }
  sub_1013A33E4((uint64_t)[*(id *)(a1 + 280) bloodType], &__p);
  if ((char)v58 < 0)
  {
    if (v57)
    {
      p_p = __p;
      goto LABEL_31;
    }
  }
  else if (v58)
  {
    p_p = &__p;
LABEL_31:
    [v5 setValue:[NSString stringWithUTF8String:p_p] forKey:@"blood_type"];
    int v12 = 1;
    goto LABEL_33;
  }
  int v12 = 0;
LABEL_33:
  if ([*(id *)(a1 + 280) pregnancyStartDate]) {
    [v5 setValue:+[HKMCPregnancyDatesFactory gestationalAgeStringOnDate:pregnancyStartDate:startTimeZoneName:](HKMCPregnancyDatesFactory, "gestationalAgeStringOnDate:pregnancyStartDate:startTimeZoneName:", +[NSDate date](NSDate, "date"), objc_msgSend(*(id *)(a1 + 280), "pregnancyStartDate"), -[NSTimeZone name](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "name")) forKey:@"gestational_age"];
  }
  int v48 = v12;
  id v13 = [*(id *)(a1 + 280) medicalConditions];
  if (v13) {
    [v5 setValue:sub_101479144([*(id *)(a1 + 280) medicalConditions], 0x7D0u) forKey:@"medical_conditions"];
  }
  id v47 = v7;
  id v14 = [*(id *)(a1 + 280) medicalNotes];
  if (v14) {
    [v5 setValue:sub_101479144([*(id *)(a1 + 280) medicalNotes], 0x7D0u) forKey:@"medical_notes"];
  }
  id v15 = [*(id *)(a1 + 280) allergyInfo];
  if (v15) {
    [v5 setValue:sub_101479144(objc_msgSend(*(id *)(a1 + 280), "allergyInfo"), 0x7D0u) forKey:@"allergies"];
  }
  id v16 = [*(id *)(a1 + 280) medicationInfo];
  if (v16) {
    [v5 setValue:sub_101479144(objc_msgSend(*(id *)(a1 + 280), "medicationInfo"), 0x7D0u) forKey:@"medications"];
  }
  if ([*(id *)(a1 + 280) emergencyContacts]
    && objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), "count"))
  {
    id v17 = objc_alloc_init((Class)NSMutableArray);
    id v18 = [*(id *)(a1 + 280) emergencyContacts];
    v55[0] = _NSConcreteStackBlock;
    v55[1] = 3221225472;
    void v55[2] = sub_1013A3744;
    v55[3] = &unk_102322B90;
    void v55[4] = v17;
    [v18 enumerateObjectsUsingBlock:v55];
    unsigned int v19 = [v17 count];
    [v5 setValue:v17 forKey:@"emergency_contacts"];
    if (!a2) {
      goto LABEL_54;
    }
LABEL_48:
    id v20 = [*(id *)(a1 + 280) name];
    id v21 = [*(id *)(a1 + 280) nameModifiedDate];
    sub_1013A38B0((uint64_t)v21, 1, (uint64_t)v20, (uint64_t)v21, (_DWORD *)(a2 + 1108), (_DWORD *)(a2 + 1200));
    id v22 = [*(id *)(a1 + 280) gmtBirthdate];
    id v23 = [*(id *)(a1 + 280) gregorianBirthdayModifiedDate];
    sub_1013A38B0((uint64_t)v23, 1, (uint64_t)v22, (uint64_t)v23, (_DWORD *)(a2 + 1112), (_DWORD *)(a2 + 1204));
    id v24 = [*(id *)(a1 + 280) weight];
    id v25 = [*(id *)(a1 + 280) weightModifiedDate];
    sub_1013A38B0((uint64_t)v25, 1, (uint64_t)v24, (uint64_t)v25, (_DWORD *)(a2 + 1116), (_DWORD *)(a2 + 1208));
    id v26 = [*(id *)(a1 + 280) height];
    id v27 = [*(id *)(a1 + 280) heightModifiedDate];
    sub_1013A38B0((uint64_t)v27, 1, (uint64_t)v26, (uint64_t)v27, (_DWORD *)(a2 + 1120), (_DWORD *)(a2 + 1212));
    uint64_t v28 = v58;
    if ((v58 & 0x80u) != 0) {
      uint64_t v28 = v57;
    }
    if (v28) {
      int v29 = 1;
    }
    else {
      int v29 = 2;
    }
    *(_DWORD *)(a2 + 1124) = v29;
    id v30 = [*(id *)(a1 + 280) medicalConditions];
    id v31 = [*(id *)(a1 + 280) medicalConditionsModifiedDate];
    sub_1013A38B0((uint64_t)v31, 1, (uint64_t)v30, (uint64_t)v31, (_DWORD *)(a2 + 1144), (_DWORD *)(a2 + 1232));
    id v32 = [*(id *)(a1 + 280) medicalNotes];
    id v33 = [*(id *)(a1 + 280) medicalNotesModifiedDate];
    sub_1013A38B0((uint64_t)v33, 1, (uint64_t)v32, (uint64_t)v33, (_DWORD *)(a2 + 1128), (_DWORD *)(a2 + 1216));
    id v34 = [*(id *)(a1 + 280) allergyInfo];
    id v35 = [*(id *)(a1 + 280) allergyInfoModifiedDate];
    sub_1013A38B0((uint64_t)v35, 1, (uint64_t)v34, (uint64_t)v35, (_DWORD *)(a2 + 1132), (_DWORD *)(a2 + 1220));
    id v36 = [*(id *)(a1 + 280) medicationInfo];
    id v37 = [*(id *)(a1 + 280) medicationInfoModifiedDate];
    sub_1013A38B0((uint64_t)v37, 1, (uint64_t)v36, (uint64_t)v37, (_DWORD *)(a2 + 1136), (_DWORD *)(a2 + 1224));
    id v38 = [*(id *)(a1 + 280) emergencyContacts];
    id v39 = [*(id *)(a1 + 280) emergencyContactsModifiedDate];
    sub_1013A38B0((uint64_t)v39, 1, (uint64_t)v38, (uint64_t)v39, (_DWORD *)(a2 + 1140), (_DWORD *)(a2 + 1228));
    goto LABEL_54;
  }
  unsigned int v19 = 0;
  if (a2) {
    goto LABEL_48;
  }
LABEL_54:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v40 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68291586;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)BOOL v62 = 2082;
    *(void *)&int v62[2] = "";
    __int16 v63 = 1026;
    BOOL v64 = v6 != 0;
    __int16 v65 = 1026;
    BOOL v66 = v47 != 0;
    __int16 v67 = 1026;
    BOOL v68 = v49 != 0;
    __int16 v69 = 1026;
    BOOL v70 = v50 != 0;
    __int16 v71 = 1026;
    int v72 = v48;
    __int16 v73 = 1026;
    BOOL v74 = v13 != 0;
    __int16 v75 = 1026;
    BOOL v76 = v14 != 0;
    __int16 v77 = 1026;
    BOOL v78 = v15 != 0;
    __int16 v79 = 1026;
    BOOL v80 = v16 != 0;
    __int16 v81 = 1026;
    unsigned int v82 = v19;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createCallerInfoDict\", \"name sent\":%{public}hhd, \"age sent\":%{public}hhd, \"height sent\":%{public}hhd, \"weight sent\":%{public}hhd, \"blood_type sent\":%{public}hhd, \"medical_conditions sent\":%{public}hhd, \"medical_notes sent\":%{public}hhd, \"allergies sent\":%{public}hhd, \"medications sent\":%{public}hhd, \"number of emergency contacts sent\":%{public}d}", buf, 0x4Eu);
  }
  if (a2
    && objc_opt_class()
    && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
  {
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) name], (uint64_t)[*(id *)(a1 + 280) nameModifiedDate], 116, 128);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) height], (uint64_t)[*(id *)(a1 + 280) heightModifiedDate], 119, 131);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) weight], (uint64_t)[*(id *)(a1 + 280) weightModifiedDate], 118, 130);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) allergyInfo], (uint64_t)[*(id *)(a1 + 280) allergyInfoModifiedDate], 122, 133);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) gmtBirthdate], (uint64_t)[*(id *)(a1 + 280) gregorianBirthdayModifiedDate], 117, 129);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) medicalConditions], (uint64_t)[*(id *)(a1 + 280) medicalConditionsModifiedDate], 125, 136);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) medicalNotes], (uint64_t)[*(id *)(a1 + 280) medicalNotesModifiedDate], 121, 132);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) medicationInfo], (uint64_t)[*(id *)(a1 + 280) medicationInfoModifiedDate], 123, 134);
    sub_1013A393C(a1, 1, (uint64_t)[*(id *)(a1 + 280) emergencyContacts], (uint64_t)[*(id *)(a1 + 280) emergencyContactsModifiedDate], 124, 135);
    uint64_t v41 = v58;
    if ((v58 & 0x80u) != 0) {
      uint64_t v41 = v57;
    }
    if (v41) {
      int v42 = 1;
    }
    else {
      int v42 = 2;
    }
    *(_DWORD *)uint64_t buf = 120;
    *(_DWORD *)BOOL v62 = v42;
    BOOL v68 = 0;
    __int16 v53 = 0;
    uint64_t v54 = 0;
    id v52 = 0;
    __int16 v59 = (void **)&v52;
    char v60 = 0;
    id v52 = (char *)operator new(0x28uLL);
    __int16 v53 = v52;
    uint64_t v54 = v52 + 40;
    __int16 v53 = (unsigned char *)sub_100682A48((uint64_t)&v54, (uint64_t)buf, (uint64_t)&v70 + 2, (uint64_t)v52);
    sub_100118010((uint64_t)v62);
    id v43 = *(void **)(a1 + 264);
    memset(v51, 0, sizeof(v51));
    sub_100682C20(v51, (uint64_t)v52, (uint64_t)v53, 0xCCCCCCCCCCCCCCCDLL * ((v53 - v52) >> 3));
    [v43 setMeasurements:sub_10067C03C(v51)];
    *(void *)uint64_t buf = v51;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = &v52;
    sub_100682B1C((void ***)buf);
  }
  if ((char)v58 < 0) {
    operator delete(__p);
  }
  return v5;
}

void sub_1013A0B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char *a36)
{
  a36 = &a19;
  sub_100682B1C((void ***)&a36);
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1013A0BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 160);
  if (!v3) {
    sub_10015E48C();
  }
  id v5 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  if (!*((unsigned char *)sub_100A80D4C(v5) + 58))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v15 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerLocationDict,ERA disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      *(_WORD *)int v48 = 0;
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
  id v6 = *(void **)(a1 + 296);
  if (!v6)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,createCallerLocationDict,no data available for caller location dict so not sending", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      *(_WORD *)int v48 = 0;
      id v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    if (a2) {
      *(_DWORD *)(a2 + 1104) = 2;
    }
    *(_DWORD *)uint64_t buf = 115;
    *(_DWORD *)&uint8_t buf[8] = 2;
    *(_DWORD *)&unsigned char buf[32] = 0;
    memset(v48, 0, 24);
    id v45 = v48;
    LOBYTE(v46) = 0;
    *(void *)int v48 = operator new(0x28uLL);
    *(void *)&v48[8] = *(void *)v48;
    *(void *)&v48[16] = *(void *)v48 + 40;
    *(void *)&v48[8] = sub_100682A48((uint64_t)&v48[16], (uint64_t)buf, (uint64_t)&buf[40], *(uint64_t *)v48);
    sub_100118010((uint64_t)&buf[8]);
    id v21 = *(void **)(a1 + 264);
    memset(v55, 0, sizeof(v55));
    sub_100682C20(v55, *(uint64_t *)v48, *(uint64_t *)&v48[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v48[8] - *(void *)v48) >> 3));
    [v21 setMeasurements:sub_10067C03C(v55)];
    unsigned int v19 = v55;
    goto LABEL_34;
  }
  id v7 = [v6 placemark];
  if (!v7 || (id v8 = v7, ![v7 mecardAddress]) || !objc_msgSend(v8, "location"))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,createCallerLocationDict,invalid placemark", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      *(_WORD *)int v48 = 0;
      id v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    if (a2) {
      *(_DWORD *)(a2 + 1104) = 2;
    }
    *(_DWORD *)uint64_t buf = 115;
    *(_DWORD *)&uint8_t buf[8] = 2;
    *(_DWORD *)&unsigned char buf[32] = 0;
    memset(v48, 0, 24);
    id v45 = v48;
    LOBYTE(v46) = 0;
    *(void *)int v48 = operator new(0x28uLL);
    *(void *)&v48[8] = *(void *)v48;
    *(void *)&v48[16] = *(void *)v48 + 40;
    *(void *)&v48[8] = sub_100682A48((uint64_t)&v48[16], (uint64_t)buf, (uint64_t)&buf[40], *(uint64_t *)v48);
    sub_100118010((uint64_t)&buf[8]);
    id v18 = *(void **)(a1 + 264);
    memset(v54, 0, sizeof(v54));
    sub_100682C20(v54, *(uint64_t *)v48, *(uint64_t *)&v48[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v48[8] - *(void *)v48) >> 3));
    [v18 setMeasurements:sub_10067C03C(v54)];
    unsigned int v19 = v54;
LABEL_34:
    *(void *)uint64_t buf = v19;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = v48;
    sub_100682B1C((void ***)buf);
    return 0;
  }
  *(_OWORD *)&v48[4] = 0uLL;
  *(_OWORD *)&v48[20] = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v48[36] = _Q0;
  *(_OWORD *)&v48[52] = _Q0;
  *(_OWORD *)&v48[68] = _Q0;
  *(_DWORD *)int v48 = 0xFFFF;
  *(_DWORD *)&v48[84] = 0;
  long long v49 = 0uLL;
  *(void *)&v48[88] = 0xBFF0000000000000;
  *(void *)((char *)&v50 + 4) = 0xBFF0000000000000;
  LODWORD(v50) = 0;
  HIDWORD(v50) = 0x7FFFFFFF;
  memset(v51, 0, 25);
  id v14 = [v8 location:sub_1000DBC34(&v52).n128_f64[0]];
  if (v14)
  {
    [v14 clientLocation];
  }
  else
  {
    memset(v62, 0, 28);
    long long v61 = 0u;
    long long v60 = 0u;
    long long v59 = 0u;
    long long v58 = 0u;
    long long v57 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  long long v49 = v60;
  long long v50 = v61;
  *(_OWORD *)id v51 = v62[0];
  *(_OWORD *)&v51[12] = *(_OWORD *)((char *)v62 + 12);
  *(_OWORD *)&v48[32] = *(_OWORD *)&buf[32];
  *(_OWORD *)&v48[48] = v57;
  *(_OWORD *)&v48[64] = v58;
  *(_OWORD *)&v48[80] = v59;
  *(_OWORD *)int v48 = *(_OWORD *)buf;
  *(_OWORD *)&v48[16] = *(_OWORD *)&buf[16];
  id v24 = sub_100AA9C48((uint64_t)v48);
  if (v24)
  {
    id v25 = objc_alloc_init((Class)NSMutableDictionary);
    [v25 setValue:sub_101479144(objc_msgSend(v8, "mecardAddress"), 0x7D0u) forKey:@"full_address"];
    [v25 setValue:[v24 valueForKey:@"hunc"] forKey:@"hunc"];
    id v26 = [v24 valueForKey:@"vunc"];
    if (v26) {
      [v25 setValue:v26 forKey:@"vunc"];
    }
    [v25 setValue:[v24 valueForKey:@"confidence"] forKey:@"confidence"];
    id v22 = objc_alloc_init((Class)NSMutableDictionary);
    [v22 setValue:v24 forKey:@"location"];
    [v22 setValue:v25 forKey:@"address"];
    if (a2) {
      *(_DWORD *)(a2 + 1104) = 1;
    }
    *(_DWORD *)uint64_t buf = 115;
    *(_DWORD *)&uint8_t buf[8] = 1;
    *(_DWORD *)&unsigned char buf[32] = 0;
    __int16 v46 = 0;
    v47[0] = 0;
    id v45 = 0;
    id v40 = &v45;
    char v41 = 0;
    id v45 = operator new(0x28uLL);
    __int16 v46 = v45;
    v47[0] = v45 + 40;
    __int16 v46 = (unsigned char *)sub_100682A48((uint64_t)v47, (uint64_t)buf, (uint64_t)&buf[40], (uint64_t)v45);
    sub_100118010((uint64_t)&buf[8]);
    id v27 = *(void **)(a1 + 264);
    memset(v43, 0, sizeof(v43));
    sub_100682C20(v43, (uint64_t)v45, (uint64_t)v46, 0xCCCCCCCCCCCCCCCDLL * ((v46 - v45) >> 3));
    [v27 setMeasurements:sub_10067C03C(v43)];
    *(void *)uint64_t buf = v43;
    sub_100682B1C((void ***)buf);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = &v40;
      sub_100134750(&v40, off_102322C98[(void)[*(id *)(a1 + 296) userType]]);
      if (v42 < 0) {
        int v29 = v40;
      }
      sub_100134750(__p, off_102322CC0[(void)[*(id *)(a1 + 296) placeType]]);
      if (v39 >= 0) {
        id v30 = __p;
      }
      else {
        id v30 = (void **)__p[0];
      }
      id v31 = [[objc_msgSend(v8, "mecardAddress") UTF8String];
      id v32 = [[[v8 name] UTF8String];
      *(_DWORD *)uint64_t buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2081;
      *(void *)&buf[20] = v29;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v30;
      *(_WORD *)&buf[38] = 2081;
      *(void *)&unsigned char buf[40] = v31;
      LOWORD(v57) = 2081;
      *(void *)((char *)&v57 + 2) = v32;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createCallerLocationDict,created caller location dict\", \"label\":%{private, location:escape_only}s, \"placeType\":%{public, location:escape_only}s, \"mecardaddress\":%{private, location:escape_only}s, \"name\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
      if (v42 < 0) {
        operator delete(v40);
      }
    }
    *(void *)uint64_t buf = &v45;
    sub_100682B1C((void ***)buf);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v33 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#ADR,createCallerLocationDict,failed to create location dict", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v45) = 0;
      id v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createCallerLocationDict(Emergency::CLEmergencySessionReport *) const", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    if (a2) {
      *(_DWORD *)(a2 + 1104) = 2;
    }
    *(_DWORD *)uint64_t buf = 115;
    *(_DWORD *)&uint8_t buf[8] = 2;
    *(_DWORD *)&unsigned char buf[32] = 0;
    __int16 v46 = 0;
    v47[0] = 0;
    id v45 = 0;
    id v40 = &v45;
    char v41 = 0;
    id v45 = operator new(0x28uLL);
    __int16 v46 = v45;
    v47[0] = v45 + 40;
    __int16 v46 = (unsigned char *)sub_100682A48((uint64_t)v47, (uint64_t)buf, (uint64_t)&buf[40], (uint64_t)v45);
    sub_100118010((uint64_t)&buf[8]);
    id v34 = *(void **)(a1 + 264);
    memset(v44, 0, sizeof(v44));
    sub_100682C20(v44, (uint64_t)v45, (uint64_t)v46, 0xCCCCCCCCCCCCCCCDLL * ((v46 - v45) >> 3));
    [v34 setMeasurements:sub_10067C03C(v44)];
    *(void *)uint64_t buf = v44;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = &v45;
    sub_100682B1C((void ***)buf);
    id v22 = 0;
  }
  if (v53) {
    sub_1000DB0A0(v53);
  }
  return v22;
}

void sub_1013A17C8(_Unwind_Exception *a1)
{
  if (STACK[0x340]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x340]);
  }
  _Unwind_Resume(a1);
}

id sub_1013A1900(uint64_t a1, uint64_t a2, char a3)
{
  id v6 = (unsigned int *)sub_100A96A4C(a1 + 168, a2);
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setValue:[NSNumber numberWithInt:a2] forKey:@"sim"];
  [v7 setValue:[NSNumber numberWithInt:*v6] forKey:@"rat"];
  uint64_t v8 = *(void *)(a1 + 160);
  if (!v8) {
    sub_10015E48C();
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  sub_100134750(__p, "carrier");
  long long v10 = sub_100A80F3C(v9, a2, (uint64_t *)__p);
  if (*((char *)v10 + 55) < 0) {
    sub_1000DC48C(&__dst, (void *)v10[4], v10[5]);
  }
  else {
    std::string __dst = *(std::string *)(v10 + 4);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    char v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  [v7 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst) forKey:@"sim_bundle_id"];
  uint64_t v14 = *(void *)(a1 + 160);
  if (!v14) {
    sub_10015E48C();
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
  sub_100134750(v40, "operator");
  id v16 = sub_100A80F3C(v15, a2, (uint64_t *)v40);
  if (*((char *)v16 + 55) < 0) {
    sub_1000DC48C(&v42, (void *)v16[4], v16[5]);
  }
  else {
    std::string v42 = *(std::string *)(v16 + 4);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  std::string::size_type v17 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  char v18 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v17 = v42.__r_.__value_.__l.__size_;
  }
  if (!v17)
  {
    std::string::assign(&v42, "Unavailable");
    char v18 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  if (v18 >= 0) {
    unsigned int v19 = &v42;
  }
  else {
    unsigned int v19 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  [v7 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19) forKey:@"operator_bundle_id"];
  HIDWORD(v38) = a2;
  id v20 = sub_101021560(v6[8]);
  [v7 setValue:v20 forKey:@"sim_country"];
  id v21 = sub_101021560(v6[2]);
  [v7 setValue:v21 forKey:@"operator_country"];
  sub_100103240();
  uint64_t v22 = sub_10073B56C();
  [v7 setValue:[NSNumber numberWithInt:v22] forKey:@"release_type"];
  sub_100103240();
  sub_10073BD08((uint64_t)buf);
  if (v50 >= 0) {
    id v23 = buf;
  }
  else {
    id v23 = *(uint8_t **)buf;
  }
  id v24 = +[NSString stringWithUTF8String:v23];
  if (SHIBYTE(v50) < 0) {
    operator delete(*(void **)buf);
  }
  [v7 setValue:v24 forKey:@"product_type"];
  if (a3)
  {
    LODWORD(v25) = 2;
  }
  else
  {
    [v7 setValue:[NSNumber numberWithInt:sub_10101AE34(*(unsigned int *)(a1 + 276))] forKey:@"trigger_type"];
    id v26 = *(void **)(a1 + 296);
    if (v26)
    {
      if ([v26 placemark]) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = 2;
      }
    }
    else
    {
      uint64_t v25 = 2;
    }
    [v7 setValue:[NSNumber numberWithInt:v25] forKey:@"dsa_availability"];
    [v7 setValue:[NSNumber numberWithInt:*(_DWORD *)(a1 + 288) > 1] forKey:@"did_dsa_change_within_call"];
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v27 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v38) = v25;
    int v28 = v22;
    unsigned int v29 = *v6;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v30 = &__dst;
    }
    else {
      id v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    id v31 = [(NSString *)v20 UTF8String];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v32 = &v42;
    }
    else {
      id v32 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    id v33 = [(NSString *)v21 UTF8String];
    id v34 = [(NSString *)v24 UTF8String];
    int v35 = *(_DWORD *)(a1 + 276);
    int v36 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)uint64_t buf = 68291843;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v47 = 2082;
    int v48 = "";
    __int16 v49 = 1026;
    int v50 = HIDWORD(v39);
    __int16 v51 = 1026;
    unsigned int v52 = v29;
    __int16 v53 = 2082;
    uint64_t v54 = v30;
    __int16 v55 = 2082;
    BOOL v56 = v31;
    __int16 v57 = 2082;
    long long v58 = v32;
    __int16 v59 = 2082;
    long long v60 = v33;
    __int16 v61 = 1026;
    int v62 = v28;
    __int16 v63 = 2081;
    BOOL v64 = v34;
    __int16 v65 = 1026;
    int v66 = v35;
    __int16 v67 = 1025;
    int v68 = v39;
    __int16 v69 = 1025;
    int v70 = v36;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createAdrInternalDict\", \"sim\":%{public}d, \"rat\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"release_type\":%{public}d, \"product_type\":%{private, location:escape_only}s, \"trigger_type\":%{public}d, \"dsa_availability\":%{private}d, \"did_dsa_change_within_call_count\":%{private}d}", buf, 0x68u);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1013A1E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

id sub_1013A1F34(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = a2[1];
  }
  if (a7 && a6 && a5 && a4 && v7)
  {
    unint64_t v33 = sub_100AABA94();
    sub_100AABABC(*(_DWORD *)(a1 + 272), __p);
    id v15 = [a5 base64EncodedStringWithOptions:0];
    id v16 = objc_alloc_init((Class)NSMutableDictionary);
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v17 = a2;
    }
    else {
      std::string::size_type v17 = (uint64_t *)*a2;
    }
    [v16 setValue:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17) stringByAppendingString:@"call_ID"]];
    [v16 setValue:[NSNumber numberWithLongLong:v33] forKey:@"session_start_time"];
    if (v35 >= 0) {
      char v18 = __p;
    }
    else {
      char v18 = (void **)__p[0];
    }
    [v16 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18) forKey:@"medium"];
    [v16 setValue:@"1" forKey:@"data_version"];
    [v16 setValue:[+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3)] forKey:@"encrypt_time"];
    [v16 setValue:a4 forKey:@"location"];
    [v16 setValue:v15 forKey:@"data"];
    [v16 setValue:a6 forKey:@"keys"];
    [v16 setValue:a7 forKey:@"internal"];
    double v19 = *(double *)(a1 + 304);
    if (v19 <= 0.0 || v19 > 10.0)
    {
      if (v19 <= 10.0 || v19 > 30.0)
      {
        if (v19 <= 30.0 || v19 > 60.0)
        {
          if (v19 > 100.0 || v19 <= 60.0) {
            id v20 = @"Unknown";
          }
          else {
            id v20 = @"61-100%";
          }
        }
        else
        {
          id v20 = @"31-60%";
        }
      }
      else
      {
        id v20 = @"11-30%";
      }
    }
    else
    {
      id v20 = @"10% or less";
    }
    [v16 setValue:v20 forKey:@"battery_level"];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v23 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *((char *)a2 + 23);
      uint64_t v25 = (uint64_t *)*a2;
      int v26 = v35;
      id v27 = (void **)__p[0];
      id v28 = [(__CFString *)v20 UTF8String];
      unsigned int v29 = __p;
      *(_DWORD *)uint64_t buf = 68290307;
      if (v26 < 0) {
        unsigned int v29 = v27;
      }
      int v37 = 0;
      if (v24 >= 0) {
        id v30 = a2;
      }
      else {
        id v30 = v25;
      }
      __int16 v38 = 2082;
      uint64_t v39 = "";
      __int16 v40 = 2081;
      char v41 = v30;
      __int16 v42 = 2050;
      unint64_t v43 = v33;
      __int16 v44 = 2082;
      id v45 = v29;
      __int16 v46 = 2050;
      uint64_t v47 = a3;
      __int16 v48 = 2082;
      id v49 = v28;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createAdrDict\", \"phone number\":%{private, location:escape_only}s, \"session start time\":%{public}lld, \"medium\":%{public, location:escape_only}s, \"encrypt time\":%{public}lld, \"battery level\":%{public, location:escape_only}s}", buf, 0x44u);
    }
    if (v35 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v21 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#ADR,createAdrDict,missing required info for forming ADR POST dict", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(__p[0]) = 0;
      id v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createAdrDict(const std::string &, CFAbsoluteTime, uint64_t, NSDictionary *, NSData *, NSArray *, NSDictionary *) const", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    return 0;
  }
  return v16;
}

void sub_1013A240C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1013A243C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = sub_100AABDF0(a3);
  if (v9)
  {
    long long v10 = v9;
    uint64_t v11 = *(void *)(a1 + 160);
    if (!v11) {
      sub_10015E48C();
    }
    char v12 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
    id v13 = sub_100A80D4C(v12);
    if (*((char *)v13 + 111) < 0)
    {
      sub_1000DC48C(__p, (void *)v13[11], v13[12]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v13 + 11);
      uint64_t v31 = v13[13];
    }
    if (v31 >= 0) {
      id v16 = __p;
    }
    else {
      id v16 = (void **)__p[0];
    }
    unsigned int v29 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v16]));
    [(NSMutableURLRequest *)v29 setHTTPMethod:@"POST"];
    sub_10110D594(a1 + 200, (uint64_t)v10, (uint64_t)&v29);
    if (a4) {
      ++*(_DWORD *)(a4 + 1092);
    }
    uint64_t v17 = *(void *)(a1 + 232);
    BOOL v15 = v17 != 0;
    if (v17)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v18 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = SHIBYTE(v31);
        id v20 = (void **)__p[0];
        id v21 = [v10 length];
        *(_DWORD *)uint64_t buf = 68289539;
        uint64_t v22 = __p;
        if (v19 < 0) {
          uint64_t v22 = v20;
        }
        int v36 = 0;
        __int16 v37 = 2082;
        __int16 v38 = "";
        __int16 v39 = 2081;
        __int16 v40 = v22;
        __int16 v41 = 2049;
        id v42 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,postADR,sending ADR POST\", \"URL\":%{private, location:escape_only}s, \"length\":%{private}lld}", buf, 0x26u);
      }
      id v23 = *(void **)(a1 + 232);
      int v24 = v29;
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3321888768;
      _OWORD v32[2] = sub_1013A3D04;
      v32[3] = &unk_102311B30;
      v32[4] = a1;
      int v34 = a2;
      sub_10110DAEC((uint64_t)v33, a5);
      [objc_msgSend(v23, "uploadTaskWithRequest:fromData:completionHandler:", v24, v10, v32) resume];
      sub_100ABDF68(v33);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v25 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "#ADR,postADR,missing NSURLSession", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        id v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::postAdr(NumberType, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,postAdr,failed to serialize ADR dict into JSON", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(__p[0]) = 0;
      id v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::postAdr(NumberType, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    return 0;
  }
  return v15;
}

void sub_1013A296C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSInteger sub_1013A29B4(uint64_t a1)
{
  if (a1) {
    return [(NSDateComponents *)[+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian) components:16 fromDate:a1 toDate:+[NSDate date] options:0] day];
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1013A2A28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (!v2) {
    sub_10015E48C();
  }
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2) + 5)) {
    return 1;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 276);
  BOOL v5 = v4 > 0x13;
  unsigned int v6 = (0x68E80u >> v4) & 1;
  if (v5) {
    return 1;
  }
  else {
    return v6;
  }
}

void *sub_1013A2AA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = "";
  switch(*(_DWORD *)(a1 + 276))
  {
    case 1:
    case 2:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x10:
      uint64_t v2 = "Dialer";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t v2 = "SOS";
      break;
    case 7:
    case 0xB:
      uint64_t v2 = "Fall Detection";
      break;
    case 8:
      uint64_t v2 = "ECG";
      break;
    case 9:
    case 0xA:
    case 0x11:
    case 0x12:
      uint64_t v4 = *(void *)(a1 + 160);
      if (!v4) {
        sub_10015E48C();
      }
      BOOL v5 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)v4 + 48))(v4, "");
      if (*((unsigned char *)sub_100A80D4C(v5) + 60)) {
        uint64_t v2 = "Crash Detection";
      }
      else {
        uint64_t v2 = "Fall Detection";
      }
      break;
    default:
      break;
  }

  return sub_100134750(a2, v2);
}

void sub_1013A2BD8(uint64_t a1)
{
  if (objc_opt_class()
    && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
  {
    LODWORD(v9) = 116;
    int v10 = 2;
    int v11 = 0;
    int v12 = 119;
    int v13 = 2;
    int v14 = 0;
    int v15 = 118;
    int v16 = 2;
    int v17 = 0;
    int v18 = 122;
    int v19 = 2;
    int v20 = 0;
    int v21 = 117;
    int v22 = 2;
    int v23 = 0;
    int v24 = 125;
    int v25 = 2;
    int v26 = 0;
    int v27 = 121;
    int v28 = 2;
    int v29 = 0;
    int v30 = 123;
    int v31 = 2;
    int v32 = 0;
    int v33 = 124;
    int v34 = 2;
    int v35 = 0;
    int v36 = 120;
    int v37 = 2;
    int v38 = 0;
    BOOL v5 = 0;
    unsigned int v6 = 0;
    v7[0] = 0;
    v7[1] = &v5;
    char v8 = 0;
    BOOL v5 = (char *)operator new(0x190uLL);
    unsigned int v6 = v5;
    v7[0] = v5 + 400;
    unsigned int v6 = (unsigned char *)sub_100682A48((uint64_t)v7, (uint64_t)&v9, (uint64_t)&v39, (uint64_t)v5);
    for (uint64_t i = 46; i != -4; i -= 5)
      sub_100118010((uint64_t)&(&v9)[i]);
    uint64_t v3 = *(void **)(a1 + 264);
    memset(v4, 0, sizeof(v4));
    sub_100682C20(v4, (uint64_t)v5, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3));
    [v3 setMeasurements:sub_10067C03C(v4)];
    id v9 = (void **)v4;
    sub_100682B1C(&v9);
    id v9 = (void **)&v5;
    sub_100682B1C(&v9);
  }
}

void sub_1013A2DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a13;
  sub_100682B1C(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_1013A2E20(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 280);
    if (v4)
    {
      id v5 = [v4 name];
      id v6 = [*(id *)(a1 + 280) nameModifiedDate];
      sub_1013A38B0((uint64_t)v6, 3, (uint64_t)v5, (uint64_t)v6, a2 + 277, a2 + 300);
      id v7 = [*(id *)(a1 + 280) gmtBirthdate];
      id v8 = [*(id *)(a1 + 280) gregorianBirthdayModifiedDate];
      sub_1013A38B0((uint64_t)v8, 3, (uint64_t)v7, (uint64_t)v8, a2 + 278, a2 + 301);
      id v9 = [*(id *)(a1 + 280) weight];
      id v10 = [*(id *)(a1 + 280) weightModifiedDate];
      sub_1013A38B0((uint64_t)v10, 3, (uint64_t)v9, (uint64_t)v10, a2 + 279, a2 + 302);
      id v11 = [*(id *)(a1 + 280) height];
      id v12 = [*(id *)(a1 + 280) heightModifiedDate];
      sub_1013A38B0((uint64_t)v12, 3, (uint64_t)v11, (uint64_t)v12, a2 + 280, a2 + 303);
      if ([*(id *)(a1 + 280) bloodType]) {
        int v13 = 3;
      }
      else {
        int v13 = 2;
      }
      a2[281] = v13;
      id v14 = [*(id *)(a1 + 280) medicalConditions];
      id v15 = [*(id *)(a1 + 280) medicalConditionsModifiedDate];
      sub_1013A38B0((uint64_t)v15, 3, (uint64_t)v14, (uint64_t)v15, a2 + 286, a2 + 308);
      id v16 = [*(id *)(a1 + 280) medicalNotes];
      id v17 = [*(id *)(a1 + 280) medicalNotesModifiedDate];
      sub_1013A38B0((uint64_t)v17, 3, (uint64_t)v16, (uint64_t)v17, a2 + 282, a2 + 304);
      id v18 = [*(id *)(a1 + 280) allergyInfo];
      id v19 = [*(id *)(a1 + 280) allergyInfoModifiedDate];
      sub_1013A38B0((uint64_t)v19, 3, (uint64_t)v18, (uint64_t)v19, a2 + 283, a2 + 305);
      id v20 = [*(id *)(a1 + 280) medicationInfo];
      id v21 = [*(id *)(a1 + 280) medicationInfoModifiedDate];
      sub_1013A38B0((uint64_t)v21, 3, (uint64_t)v20, (uint64_t)v21, a2 + 284, a2 + 306);
      id v22 = [*(id *)(a1 + 280) emergencyContacts];
      id v23 = [*(id *)(a1 + 280) emergencyContactsModifiedDate];
      sub_1013A38B0((uint64_t)v23, 3, (uint64_t)v22, (uint64_t)v23, a2 + 285, a2 + 307);
    }
    else
    {
      result.n128_u64[0] = 0x200000002;
      result.n128_u64[1] = 0x200000002;
      *(__n128 *)(a2 + 277) = result;
      *(__n128 *)(a2 + 281) = result;
      *(void *)(a2 + 285) = 0x200000002;
    }
  }
  return result;
}

void sub_1013A302C(uint64_t a1)
{
  if (*(void *)(a1 + 280))
  {
    if (objc_opt_class()
      && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
    {
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) name], (uint64_t)[*(id *)(a1 + 280) nameModifiedDate], 116, 128);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) height], (uint64_t)[*(id *)(a1 + 280) heightModifiedDate], 119, 131);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) weight], (uint64_t)[*(id *)(a1 + 280) weightModifiedDate], 118, 130);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) allergyInfo], (uint64_t)[*(id *)(a1 + 280) allergyInfoModifiedDate], 122, 133);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) gmtBirthdate], (uint64_t)[*(id *)(a1 + 280) gregorianBirthdayModifiedDate], 117, 129);
      sub_1013A393C(a1, 3, [*(id *)(a1 + 280) medicalConditions], [*(id *)(a1 + 280) medicalConditionsModifiedDate], 125, 136);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) medicalNotes], (uint64_t)[*(id *)(a1 + 280) medicalNotesModifiedDate], 121, 132);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) medicationInfo], (uint64_t)[*(id *)(a1 + 280) medicationInfoModifiedDate], 123, 134);
      sub_1013A393C(a1, 3, (uint64_t)[*(id *)(a1 + 280) emergencyContacts], (uint64_t)[*(id *)(a1 + 280) emergencyContactsModifiedDate], 124, 135);
      if ([*(id *)(a1 + 280) bloodType]) {
        int v2 = 3;
      }
      else {
        int v2 = 2;
      }
      LODWORD(v9) = 120;
      v10[0] = v2;
      v10[6] = 0;
      id v6 = 0;
      v7[0] = 0;
      id v5 = 0;
      v7[1] = &v5;
      char v8 = 0;
      id v5 = (char *)operator new(0x28uLL);
      id v6 = v5;
      v7[0] = v5 + 40;
      id v6 = (unsigned char *)sub_100682A48((uint64_t)v7, (uint64_t)&v9, (uint64_t)&v11, (uint64_t)v5);
      sub_100118010((uint64_t)v10);
      uint64_t v3 = *(void **)(a1 + 264);
      memset(v4, 0, sizeof(v4));
      sub_100682C20(v4, (uint64_t)v5, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3));
      [v3 setMeasurements:sub_10067C03C(v4)];
      id v9 = (void **)v4;
      sub_100682B1C(&v9);
      id v9 = (void **)&v5;
      sub_100682B1C(&v9);
    }
  }
  else
  {
    sub_1013A2BD8(a1);
  }
}

void sub_1013A3388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_100682B1C(&a17);
  _Unwind_Resume(a1);
}

void *sub_1013A33E4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = "";
      goto LABEL_17;
    case 1:
      uint64_t v3 = "A+";
      goto LABEL_17;
    case 2:
      uint64_t v3 = "A-";
      goto LABEL_17;
    case 3:
      uint64_t v3 = "B+";
      goto LABEL_17;
    case 4:
      uint64_t v3 = "B-";
      goto LABEL_17;
    case 5:
      uint64_t v3 = "AB+";
      goto LABEL_17;
    case 6:
      uint64_t v3 = "AB-";
      goto LABEL_17;
    case 7:
      uint64_t v3 = "O+";
      goto LABEL_17;
    case 8:
      uint64_t v3 = "O-";
LABEL_17:
      __n128 result = sub_100134750(a2, v3);
      break;
    default:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ADR,getBloodTypeString,unrecognized blood type", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string CLEmergencyADR::getBloodTypeString(HKBloodType) const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      __n128 result = sub_100134750(a2, "");
      break;
  }
  return result;
}

id sub_1013A3744(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  if ([a2 name]) {
    [v4 setValue:sub_101479144([a2 name], 0x7D0u) forKey:@"name"];
  }
  if ([a2 phoneNumber]) {
    [v4 setValue:[sub_101479144(objc_msgSend(a2, "phoneNumber"), 0x7D0u)] forKey:@"tel"];
  }
  if ([a2 phoneNumberLabel])
  {
    id v5 = (NSString *)[a2 phoneNumberLabel];
    if (objc_opt_class()) {
      id v5 = +[CNLabeledValue localizedStringForLabel:v5];
    }
    [v4 setValue:sub_101479144(v5, 0x7D0u) forKey:@"tel_label"];
  }
  if ([a2 relationship])
  {
    id v6 = (NSString *)[a2 relationship];
    if (objc_opt_class()) {
      id v6 = +[CNLabeledValue localizedStringForLabel:v6];
    }
    [v4 setValue:sub_101479144(v6, 0x7D0u) forKey:@"relationship"];
  }
  id v7 = *(void **)(a1 + 32);

  return [v7 addObject:v4];
}

void sub_1013A38B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  if (a3)
  {
    *a5 = a2;
    if (a4) {
      *a6 = [(NSDateComponents *)[+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian) components:16 fromDate:a4 toDate:+[NSDate date] options:0] day];
    }
  }
  else
  {
    *a5 = 2;
  }
}

void sub_1013A393C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (!a3)
  {
    LODWORD(v24) = a5;
    v25[0] = 2;
    int v26 = 0;
    id v21 = 0;
    v22[0] = 0;
    id v20 = 0;
    id v16 = (void **)&v20;
    LOBYTE(v17) = 0;
    id v20 = (char *)operator new(0x28uLL);
    id v21 = v20;
    v22[0] = v20 + 40;
    id v21 = (unsigned char *)sub_100682A48((uint64_t)v22, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)v20);
    sub_100118010((uint64_t)v25);
    int v13 = *(void **)(a1 + 264);
    memset(v14, 0, sizeof(v14));
    sub_100682C20(v14, (uint64_t)v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
    [v13 setMeasurements:sub_10067C03C(v14)];
    id v12 = (void **)v14;
    goto LABEL_5;
  }
  LODWORD(v24) = a5;
  v25[0] = a2;
  int v26 = 0;
  id v21 = 0;
  v22[0] = 0;
  id v20 = 0;
  id v16 = (void **)&v20;
  LOBYTE(v17) = 0;
  id v20 = (char *)operator new(0x28uLL);
  id v21 = v20;
  v22[0] = v20 + 40;
  id v21 = (unsigned char *)sub_100682A48((uint64_t)v22, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)v20);
  sub_100118010((uint64_t)v25);
  id v9 = *(void **)(a1 + 264);
  memset(v19, 0, sizeof(v19));
  sub_100682C20(v19, (uint64_t)v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
  [v9 setMeasurements:sub_10067C03C(v19)];
  int v24 = (void **)v19;
  sub_100682B1C(&v24);
  if (a4)
  {
    unsigned int v10 = [(NSDateComponents *)[+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian) components:16 fromDate:a4 toDate:+[NSDate date] options:0] day];
    LODWORD(v24) = a6;
    v25[0] = v10;
    int v26 = 0;
    uint64_t v17 = 0;
    id v18 = 0;
    id v16 = 0;
    v22[1] = &v16;
    char v23 = 0;
    id v16 = (void **)operator new(0x28uLL);
    uint64_t v17 = (uint64_t)v16;
    id v18 = v16 + 5;
    uint64_t v17 = sub_100682A48((uint64_t)&v18, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)v16);
    sub_100118010((uint64_t)v25);
    uint64_t v11 = *(void **)(a1 + 264);
    memset(v15, 0, sizeof(v15));
    sub_100682C20(v15, (uint64_t)v16, v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - (uint64_t)v16) >> 3));
    [v11 setMeasurements:sub_10067C03C(v15)];
    int v24 = (void **)v15;
    sub_100682B1C(&v24);
    id v12 = (void **)&v16;
LABEL_5:
    int v24 = v12;
    sub_100682B1C(&v24);
  }
  int v24 = (void **)&v20;
  sub_100682B1C(&v24);
}

void sub_1013A3C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  *(void *)(v22 - 112) = &a22;
  sub_100682B1C((void ***)(v22 - 112));
  _Unwind_Resume(a1);
}

void *sub_1013A3D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_msgSend(objc_msgSend(**(id **)(a1 + 32), "silo"), "queue");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_1013A3DF8;
  void v9[3] = &unk_102311B00;
  int v11 = *(_DWORD *)(a1 + 72);
  sub_10110DAEC((uint64_t)v10, a1 + 40);
  int v9[4] = a3;
  v9[5] = a4;
  dispatch_async(v7, v9);
  return sub_100ABDF68(v10);
}

uint64_t sub_1013A3DF8(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  int v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100A956D4(*(_DWORD *)(a1 + 80), __p);
    uint64_t v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,postADR,received response for %{public}s number", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    sub_100A956D4(*(_DWORD *)(a1 + 80), buf);
    if (v8 >= 0) {
      id v5 = buf;
    }
    else {
      id v5 = *(unsigned char **)buf;
    }
    int v9 = 136446210;
    unsigned int v10 = v5;
    id v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::postAdr(NumberType, NSDictionary *, Emergency::CLEmergencySessionReport *, SendADRResponse) const_block_invoke", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  return sub_10110D904(a1 + 48, *(_DWORD *)(a1 + 80), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1013A401C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 544))
  {
    uint64_t result = 0;
    uint64_t v8 = 1;
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(a1 + 160);
  if (!v4) {
    sub_10015E48C();
  }
  id v5 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  int v6 = *((_DWORD *)sub_100A81680(v5) + 130);
  if (v6 < (int)(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 536)))
  {
    uint64_t result = 0;
    uint64_t v8 = 3;
LABEL_6:
    *a2 = v8;
    return result;
  }
  return *(void *)(a1 + 544);
}

uint64_t sub_1013A40C0(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 600))
  {
    uint64_t result = 0;
    uint64_t v8 = 1;
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(a1 + 160);
  if (!v4) {
    sub_10015E48C();
  }
  id v5 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  int v6 = *((_DWORD *)sub_100A81680(v5) + 130);
  if (v6 < (int)(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 536)))
  {
    uint64_t result = 0;
    uint64_t v8 = 3;
LABEL_6:
    *a2 = v8;
    return result;
  }
  return *(void *)(a1 + 600);
}

NSInteger sub_1013A4164(uint64_t a1, uint64_t a2, std::string *this, int *a4)
{
  *a4 = -1;
  if (a1)
  {
    NSInteger result = (NSInteger)std::string::operator=(this, &stru_10248D3C0);
    if (!a2) {
      return result;
    }
    NSInteger result = [(NSDateComponents *)[+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian) components:16 fromDate:a2 toDate:+[NSDate date] options:0] day];
    *a4 = result;
    if ((result & 0x80000000) != 0)
    {
      int v7 = -2;
    }
    else
    {
      if (result < 0x16E) {
        return result;
      }
      int v7 = 366;
    }
    *a4 = v7;
  }
  else
  {
    return (NSInteger)std::string::operator=(this, &stru_10248D3D8);
  }
  return result;
}

void sub_1013A4240(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    sub_100134750(&v23, "ErrorDomain:");
    sub_100134750(v21, (char *)[[a1 domain] UTF8String]);
    if ((v22 & 0x80u) == 0) {
      uint64_t v4 = v21;
    }
    else {
      uint64_t v4 = (void **)v21[0];
    }
    if ((v22 & 0x80u) == 0) {
      std::string::size_type v5 = v22;
    }
    else {
      std::string::size_type v5 = (std::string::size_type)v21[1];
    }
    int v6 = std::string::append(&v23, (const std::string::value_type *)v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_100134750(__p, ",ErrorCode:");
    if ((v20 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v9 = v20;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    unsigned int v10 = std::string::append(&v24, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v18, (uint64_t)[a1 code]);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v12 = &v18;
    }
    else {
      char v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    id v14 = std::string::append(&v25, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if ((char)v22 < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v25.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ADR,getSimResultForError,error is nil", (uint8_t *)&v25, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v25, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v24.__r_.__value_.__l.__data_) = 0;
      uint64_t v17 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static std::string CLEmergencyADR::PreCachedADRMetric::getSimResultForError(NSError *)", "%s\n", (const char *)v17);
      if (v17 != &v25) {
        free(v17);
      }
    }
    sub_100134750(a2, "ErrorDomain:Unknown,ErrorCode:Unknown");
  }
}

void sub_1013A454C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013A45E8(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    sub_100134750(&v11, "HTTPCode:");
    std::to_string(&v10, (uint64_t)[a1 statusCode]);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v4 = &v10;
    }
    else {
      uint64_t v4 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v10.__r_.__value_.__l.__size_;
    }
    int v6 = std::string::append(&v11, (const std::string::value_type *)v4, size);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v6->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,getSimResultForHTTPCode,HTTP response is nil", (uint8_t *)&v11, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v11, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v10.__r_.__value_.__l.__data_) = 0;
      std::string::size_type v9 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static std::string CLEmergencyADR::PreCachedADRMetric::getSimResultForHTTPCode(NSHTTPURLResponse *)", "%s\n", (const char *)v9);
      if (v9 != &v11) {
        free(v9);
      }
    }
    sub_100134750(a2, "HTTPCode:Unknown");
  }
}

void sub_1013A4814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1013A4850@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = (const void **)result;
  uint64_t v4 = *((unsigned __int8 *)result + 23);
  size_t v5 = *((void *)result + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v6 = *((void *)result + 1);
  }
  uint64_t v7 = qword_10248D2D8;
  if (byte_10248D2E7 >= 0) {
    uint64_t v7 = byte_10248D2E7;
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (byte_10248D2E7 >= 0) {
    uint64_t v8 = &qword_10248D2D0;
  }
  else {
    uint64_t v8 = (uint64_t *)qword_10248D2D0;
  }
  if ((v4 & 0x80) == 0)
  {
    if (!*((unsigned char *)result + 23))
    {
LABEL_15:
      *(_OWORD *)a2 = *(_OWORD *)result;
      uint64_t v11 = *((void *)result + 2);
LABEL_88:
      *(void *)(a2 + 16) = v11;
      return result;
    }
    std::string::size_type v9 = (unsigned __int8 *)result;
    uint64_t v10 = *((unsigned __int8 *)result + 23);
    while (*v9 == *(unsigned __int8 *)v8)
    {
      ++v9;
      uint64_t v8 = (uint64_t *)((char *)v8 + 1);
      if (!--v10) {
        goto LABEL_15;
      }
    }
LABEL_17:
    uint64_t v13 = qword_10248D308;
    if (byte_10248D317 >= 0) {
      uint64_t v13 = byte_10248D317;
    }
    if (v6 == v13)
    {
      if (byte_10248D317 >= 0) {
        id v14 = &qword_10248D300;
      }
      else {
        id v14 = (uint64_t *)qword_10248D300;
      }
      if ((v4 & 0x80) != 0)
      {
        NSInteger result = (void *)memcmp(*v2, v14, v5);
        if (!result) {
          goto LABEL_85;
        }
      }
      else
      {
        if (!v4) {
          goto LABEL_85;
        }
        long long v15 = v2;
        uint64_t v16 = v4;
        while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
        {
          long long v15 = (const void **)((char *)v15 + 1);
          id v14 = (uint64_t *)((char *)v14 + 1);
          if (!--v16) {
            goto LABEL_85;
          }
        }
      }
    }
    uint64_t v17 = qword_10248D320;
    if (byte_10248D32F >= 0) {
      uint64_t v17 = byte_10248D32F;
    }
    if (v6 == v17)
    {
      if (byte_10248D32F >= 0) {
        std::string v18 = &qword_10248D318;
      }
      else {
        std::string v18 = (uint64_t *)qword_10248D318;
      }
      if ((v4 & 0x80) != 0)
      {
        NSInteger result = (void *)memcmp(*v2, v18, v5);
        if (!result) {
          goto LABEL_85;
        }
      }
      else
      {
        if (!v4) {
          goto LABEL_85;
        }
        id v19 = v2;
        uint64_t v20 = v4;
        while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
        {
          id v19 = (const void **)((char *)v19 + 1);
          std::string v18 = (uint64_t *)((char *)v18 + 1);
          if (!--v20) {
            goto LABEL_85;
          }
        }
      }
    }
    uint64_t v21 = qword_10248D338;
    if (byte_10248D347 >= 0) {
      uint64_t v21 = byte_10248D347;
    }
    if (v6 == v21)
    {
      if (byte_10248D347 >= 0) {
        unsigned __int8 v22 = &qword_10248D330;
      }
      else {
        unsigned __int8 v22 = (uint64_t *)qword_10248D330;
      }
      if ((v4 & 0x80) != 0)
      {
        NSInteger result = (void *)memcmp(*v2, v22, v5);
        if (!result) {
          goto LABEL_85;
        }
      }
      else
      {
        if (!v4) {
          goto LABEL_85;
        }
        std::string v23 = v2;
        uint64_t v24 = v4;
        while (*(unsigned __int8 *)v23 == *(unsigned __int8 *)v22)
        {
          std::string v23 = (const void **)((char *)v23 + 1);
          unsigned __int8 v22 = (uint64_t *)((char *)v22 + 1);
          if (!--v24) {
            goto LABEL_85;
          }
        }
      }
    }
    uint64_t v28 = qword_10248D350;
    if (byte_10248D35F >= 0) {
      uint64_t v28 = byte_10248D35F;
    }
    if (v6 == v28)
    {
      if (byte_10248D35F >= 0) {
        int v29 = &qword_10248D348;
      }
      else {
        int v29 = (uint64_t *)qword_10248D348;
      }
      if ((v4 & 0x80) != 0)
      {
        NSInteger result = (void *)memcmp(*v2, v29, v5);
        if (!result) {
          goto LABEL_85;
        }
      }
      else
      {
        if (!v4) {
          goto LABEL_85;
        }
        int v30 = v2;
        uint64_t v31 = v4;
        while (*(unsigned __int8 *)v30 == *(unsigned __int8 *)v29)
        {
          int v30 = (const void **)((char *)v30 + 1);
          int v29 = (uint64_t *)((char *)v29 + 1);
          if (!--v31) {
            goto LABEL_85;
          }
        }
      }
    }
    uint64_t v32 = qword_10248D368;
    if (byte_10248D377 >= 0) {
      uint64_t v32 = byte_10248D377;
    }
    if (v6 == v32)
    {
      if (byte_10248D377 >= 0) {
        int v33 = &qword_10248D360;
      }
      else {
        int v33 = (uint64_t *)qword_10248D360;
      }
      if ((v4 & 0x80) != 0)
      {
        NSInteger result = (void *)memcmp(*v2, v33, v5);
        if (!result) {
          goto LABEL_85;
        }
      }
      else
      {
        if (!v4) {
          goto LABEL_85;
        }
        int v34 = v2;
        while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v33)
        {
          int v34 = (const void **)((char *)v34 + 1);
          int v33 = (uint64_t *)((char *)v33 + 1);
          if (!--v4) {
            goto LABEL_85;
          }
        }
      }
    }
    NSInteger result = (void *)sub_1006FE7E0((unsigned __int8 *)v2, byte_10248D378);
    if ((result & 1) == 0)
    {
      NSInteger result = (void *)sub_1006FE7E0((unsigned __int8 *)v2, (unsigned __int8 *)&xmmword_10248D2E8);
      if (!result)
      {
        if ((SHIBYTE(qword_10248D3B8) & 0x80000000) == 0)
        {
          int v35 = &xmmword_10248D3A8;
          goto LABEL_87;
        }
        int v36 = &xmmword_10248D3A8;
        goto LABEL_90;
      }
    }
LABEL_85:
    if ((byte_10248D2FF & 0x80000000) == 0)
    {
      int v35 = &xmmword_10248D2E8;
LABEL_87:
      *(_OWORD *)a2 = *v35;
      uint64_t v11 = *((void *)v35 + 2);
      goto LABEL_88;
    }
    int v36 = &xmmword_10248D2E8;
LABEL_90:
    int v26 = *(void **)v36;
    unint64_t v27 = *((void *)v36 + 1);
    std::string v25 = (unsigned char *)a2;
    goto LABEL_91;
  }
  char v12 = *(void **)result;
  NSInteger result = (void *)memcmp(*(const void **)result, v8, v5);
  if (result) {
    goto LABEL_17;
  }
  std::string v25 = (unsigned char *)a2;
  int v26 = v12;
  unint64_t v27 = v5;
LABEL_91:

  return sub_1000DC48C(v25, v26, v27);
}

std::string *sub_1013A4C40(std::string *__dst, std::string *__str, uint64_t a3)
{
  if (byte_10248D407 < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  }
  else
  {
    long long v6 = xmmword_10248D3F0;
    __dst->__r_.__value_.__r.__words[2] = unk_10248D400;
    *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v6;
  }
  if ((byte_10248D407 & 0x80000000) == 0)
  {
    *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __dst[1].__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v7 = __dst + 2;
LABEL_7:
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v7->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v8 = __dst + 3;
LABEL_8:
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v8->__r_.__value_.__r.__words[2] = unk_10248D400;
    std::string::size_type v9 = __dst + 4;
LABEL_9:
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v9->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v10 = __dst + 5;
LABEL_10:
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v10->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v11 = __dst + 6;
LABEL_11:
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v11->__r_.__value_.__r.__words[2] = unk_10248D400;
    char v12 = __dst + 7;
LABEL_12:
    uint64_t v120 = v8;
    __int16 v121 = v7;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v12->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v13 = __dst + 8;
LABEL_13:
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    std::string::size_type v14 = unk_10248D400;
    __dst[9].__r_.__value_.__r.__words[0] = -1;
    long long v15 = __dst + 9;
    v13->__r_.__value_.__r.__words[2] = v14;
    __int16 v119 = (_DWORD *)__dst[9].__r_.__value_.__r.__words + 1;
    uint64_t v16 = (std::string *)((char *)__dst + 232);
    LODWORD(__dst[9].__r_.__value_.__r.__words[1]) = 0;
    double v124 = (unsigned int *)&__dst[9].__r_.__value_.__r.__words[1];
LABEL_14:
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __int16 v117 = v16;
    v16->__r_.__value_.__r.__words[2] = unk_10248D400;
    __int16 v107 = (int *)&__dst[10].__r_.__value_.__r.__words[2];
    LODWORD(__dst[10].__r_.__value_.__r.__words[2]) = -1;
    uint64_t v17 = __dst + 11;
LABEL_15:
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __int16 v116 = v17;
    v17->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v106 = (int *)&__dst[12];
    LODWORD(__dst[12].__r_.__value_.__l.__data_) = -1;
    std::string v18 = (std::string *)((char *)__dst + 296);
LABEL_16:
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    uint64_t v115 = v18;
    v18->__r_.__value_.__r.__words[2] = unk_10248D400;
    __int16 v105 = (int *)&__dst[13].__r_.__value_.__r.__words[1];
    LODWORD(__dst[13].__r_.__value_.__r.__words[1]) = -1;
    id v19 = (std::string *)((char *)__dst + 328);
LABEL_17:
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    double v114 = v19;
    v19->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v104 = (int *)&__dst[14].__r_.__value_.__r.__words[2];
    LODWORD(__dst[14].__r_.__value_.__r.__words[2]) = -1;
    uint64_t v20 = __dst + 15;
LABEL_18:
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    uint64_t v110 = v20;
    v20->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v21 = __dst + 16;
LABEL_19:
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __int16 v113 = v21;
    v21->__r_.__value_.__r.__words[2] = unk_10248D400;
    __int16 v103 = (int *)&__dst[17];
    LODWORD(__dst[17].__r_.__value_.__l.__data_) = -1;
    unsigned __int8 v22 = (std::string *)((char *)__dst + 416);
LABEL_20:
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __int16 v109 = v22;
    v22->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v102 = (int *)&__dst[18].__r_.__value_.__r.__words[1];
    LODWORD(__dst[18].__r_.__value_.__r.__words[1]) = -1;
    std::string v23 = (std::string *)((char *)__dst + 448);
LABEL_21:
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    double v112 = v23;
    v23->__r_.__value_.__r.__words[2] = unk_10248D400;
    __int16 v101 = (int *)&__dst[19].__r_.__value_.__r.__words[2];
    LODWORD(__dst[19].__r_.__value_.__r.__words[2]) = -1;
    uint64_t v24 = __dst + 20;
LABEL_22:
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    uint64_t v108 = v24;
    v24->__r_.__value_.__r.__words[2] = unk_10248D400;
    uint64_t v100 = (int *)&__dst[21];
    LODWORD(__dst[21].__r_.__value_.__l.__data_) = -1;
    std::string v25 = (std::string *)((char *)__dst + 512);
LABEL_23:
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __int16 v111 = v25;
    v25->__r_.__value_.__r.__words[2] = unk_10248D400;
    char v99 = (int *)&__dst[22].__r_.__value_.__r.__words[1];
    uint64_t v118 = (_DWORD *)&__dst[22].__r_.__value_.__r.__words[1] + 1;
    __dst[22].__r_.__value_.__l.__size_ = -1;
    LODWORD(__dst[22].__r_.__value_.__r.__words[2]) = -1;
    int v26 = __dst + 23;
LABEL_24:
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    v26->__r_.__value_.__r.__words[2] = unk_10248D400;
    __int16 v97 = v26;
    uint64_t v98 = __dst + 24;
    LODWORD(__dst[24].__r_.__value_.__l.__data_) = -1;
    unint64_t v27 = (std::string *)((char *)__dst + 584);
LABEL_25:
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = xmmword_10248D3F0;
    __dsta = v27;
    v27->__r_.__value_.__r.__words[2] = unk_10248D400;
    goto LABEL_26;
  }
  sub_1000DC48C(&__dst[1], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  uint64_t v7 = __dst + 2;
  if ((byte_10248D407 & 0x80000000) == 0) {
    goto LABEL_7;
  }
  sub_1000DC48C(&__dst[2], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  uint64_t v8 = __dst + 3;
  if ((byte_10248D407 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  sub_1000DC48C(&__dst[3], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  std::string::size_type v9 = __dst + 4;
  if ((byte_10248D407 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  sub_1000DC48C(v9, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  uint64_t v10 = __dst + 5;
  if ((byte_10248D407 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    goto LABEL_10;
  }
  sub_1000DC48C(&__dst[5], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  uint64_t v11 = __dst + 6;
  if ((byte_10248D407 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    goto LABEL_11;
  }
  sub_1000DC48C(&__dst[6], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  char v12 = __dst + 7;
  if ((byte_10248D407 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    goto LABEL_12;
  }
  uint64_t v120 = __dst + 3;
  __int16 v121 = __dst + 2;
  sub_1000DC48C(&__dst[7], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  uint64_t v13 = __dst + 8;
  if ((byte_10248D407 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    goto LABEL_13;
  }
  sub_1000DC48C(&__dst[8], (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  __dst[9].__r_.__value_.__r.__words[0] = -1;
  long long v15 = __dst + 9;
  int v86 = byte_10248D407;
  __int16 v119 = (_DWORD *)__dst[9].__r_.__value_.__r.__words + 1;
  __int16 v117 = (std::string *)((char *)__dst + 232);
  LODWORD(__dst[9].__r_.__value_.__r.__words[1]) = 0;
  double v124 = (unsigned int *)&__dst[9].__r_.__value_.__r.__words[1];
  if ((v86 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    uint64_t v16 = (std::string *)((char *)__dst + 232);
    goto LABEL_14;
  }
  sub_1000DC48C(v117, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v87 = byte_10248D407;
  __int16 v107 = (int *)&__dst[10].__r_.__value_.__r.__words[2];
  LODWORD(__dst[10].__r_.__value_.__r.__words[2]) = -1;
  __int16 v116 = __dst + 11;
  if ((v87 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    uint64_t v17 = __dst + 11;
    goto LABEL_15;
  }
  sub_1000DC48C(v116, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v88 = byte_10248D407;
  uint64_t v106 = (int *)&__dst[12];
  LODWORD(__dst[12].__r_.__value_.__l.__data_) = -1;
  uint64_t v115 = (std::string *)((char *)__dst + 296);
  if ((v88 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    std::string v18 = (std::string *)((char *)__dst + 296);
    goto LABEL_16;
  }
  sub_1000DC48C(v115, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v89 = byte_10248D407;
  __int16 v105 = (int *)&__dst[13].__r_.__value_.__r.__words[1];
  LODWORD(__dst[13].__r_.__value_.__r.__words[1]) = -1;
  double v114 = (std::string *)((char *)__dst + 328);
  if ((v89 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    id v19 = (std::string *)((char *)__dst + 328);
    goto LABEL_17;
  }
  sub_1000DC48C(v114, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v90 = byte_10248D407;
  uint64_t v104 = (int *)&__dst[14].__r_.__value_.__r.__words[2];
  LODWORD(__dst[14].__r_.__value_.__r.__words[2]) = -1;
  uint64_t v110 = __dst + 15;
  if ((v90 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    uint64_t v20 = __dst + 15;
    goto LABEL_18;
  }
  sub_1000DC48C(v110, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  __int16 v113 = __dst + 16;
  if ((byte_10248D407 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    uint64_t v21 = __dst + 16;
    goto LABEL_19;
  }
  sub_1000DC48C(v113, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v91 = byte_10248D407;
  __int16 v103 = (int *)&__dst[17];
  LODWORD(__dst[17].__r_.__value_.__l.__data_) = -1;
  __int16 v109 = (std::string *)((char *)__dst + 416);
  if ((v91 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    unsigned __int8 v22 = (std::string *)((char *)__dst + 416);
    goto LABEL_20;
  }
  sub_1000DC48C(v109, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v92 = byte_10248D407;
  uint64_t v102 = (int *)&__dst[18].__r_.__value_.__r.__words[1];
  LODWORD(__dst[18].__r_.__value_.__r.__words[1]) = -1;
  double v112 = (std::string *)((char *)__dst + 448);
  if ((v92 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    std::string v23 = (std::string *)((char *)__dst + 448);
    goto LABEL_21;
  }
  sub_1000DC48C(v112, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v93 = byte_10248D407;
  __int16 v101 = (int *)&__dst[19].__r_.__value_.__r.__words[2];
  LODWORD(__dst[19].__r_.__value_.__r.__words[2]) = -1;
  uint64_t v108 = __dst + 20;
  if ((v93 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    uint64_t v24 = __dst + 20;
    goto LABEL_22;
  }
  sub_1000DC48C(v108, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v94 = byte_10248D407;
  uint64_t v100 = (int *)&__dst[21];
  LODWORD(__dst[21].__r_.__value_.__l.__data_) = -1;
  __int16 v111 = (std::string *)((char *)__dst + 512);
  if ((v94 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    std::string v25 = (std::string *)((char *)__dst + 512);
    goto LABEL_23;
  }
  sub_1000DC48C(v111, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v95 = byte_10248D407;
  char v99 = (int *)&__dst[22].__r_.__value_.__r.__words[1];
  uint64_t v118 = (_DWORD *)&__dst[22].__r_.__value_.__r.__words[1] + 1;
  __dst[22].__r_.__value_.__l.__size_ = -1;
  LODWORD(__dst[22].__r_.__value_.__r.__words[2]) = -1;
  __int16 v97 = __dst + 23;
  if ((v95 & 0x80000000) == 0)
  {
    std::string::size_type v9 = __dst + 4;
    int v26 = __dst + 23;
    goto LABEL_24;
  }
  sub_1000DC48C(v97, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  int v96 = byte_10248D407;
  uint64_t v98 = __dst + 24;
  LODWORD(__dst[24].__r_.__value_.__l.__data_) = -1;
  __dsta = (std::string *)((char *)__dst + 584);
  if ((v96 & 0x80000000) == 0)
  {
    unint64_t v27 = (std::string *)((char *)__dst + 584);
    std::string::size_type v9 = __dst + 4;
    goto LABEL_25;
  }
  sub_1000DC48C(__dsta, (void *)xmmword_10248D3F0, *((unint64_t *)&xmmword_10248D3F0 + 1));
  std::string::size_type v9 = __dst + 4;
LABEL_26:
  __int16 v123 = v9;
  std::string::operator=(v9, __str);
  uint64_t v28 = sub_100A96A4C(a3 + 168, 0);
  int v29 = [(NSString *)sub_101021560(*(unsigned int *)(v28 + 32)) UTF8String];
  std::string::assign(__dst, v29);
  int v30 = [(NSString *)sub_101021560(*(unsigned int *)(v28 + 8)) UTF8String];
  std::string::assign(__dst + 1, v30);
  sub_100134750(&v126, "Sim1:");
  uint64_t v31 = *(unsigned __int8 *)(v28 + 159);
  if ((v31 & 0x80u) != 0) {
    uint64_t v31 = *(void *)(v28 + 144);
  }
  if (v31) {
    uint64_t v32 = "Yes";
  }
  else {
    uint64_t v32 = "No";
  }
  sub_100134750(&__p, v32);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v35 = std::string::append(&v126, (const std::string::value_type *)p_p, size);
  std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
  *(void *)&long long v127 = v35->__r_.__value_.__l.__size_;
  *(void *)((char *)&v127 + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
  char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13->__r_.__value_.__l.__data_);
  }
  v13->__r_.__value_.__r.__words[0] = v36;
  std::string::size_type v38 = *(void *)((char *)&v127 + 7);
  v13->__r_.__value_.__l.__size_ = v127;
  *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = v38;
  *((unsigned char *)&v13->__r_.__value_.__s + 23) = v37;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  if (sub_1000FFBA8())
  {
    uint64_t v39 = sub_100A96A4C(a3 + 168, 1);
    __int16 v40 = [(NSString *)sub_101021560(*(unsigned int *)(v39 + 32)) UTF8String];
    std::string::assign(v121, v40);
    __int16 v41 = [(NSString *)sub_101021560(*(unsigned int *)(v39 + 8)) UTF8String];
    std::string::assign(v120, v41);
    sub_100134750(&__p, ",Sim2:");
    int v42 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
    if (v42 >= 0) {
      unint64_t v43 = (const std::string::value_type *)v13;
    }
    else {
      unint64_t v43 = (const std::string::value_type *)v13->__r_.__value_.__r.__words[0];
    }
    if (v42 >= 0) {
      std::string::size_type v44 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v13->__r_.__value_.__l.__size_;
    }
    id v45 = std::string::insert(&__p, 0, v43, v44);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = *(unsigned __int8 *)(v39 + 159);
    if ((v47 & 0x80u) != 0) {
      uint64_t v47 = *(void *)(v39 + 144);
    }
    if (v47) {
      __int16 v48 = "Yes";
    }
    else {
      __int16 v48 = "No";
    }
    sub_100134750(&v127, v48);
    if ((v128 & 0x80u) == 0) {
      id v49 = (const std::string::value_type *)&v127;
    }
    else {
      id v49 = (const std::string::value_type *)v127;
    }
    if ((v128 & 0x80u) == 0) {
      std::string::size_type v50 = v128;
    }
    else {
      std::string::size_type v50 = *((void *)&v127 + 1);
    }
    __int16 v51 = std::string::append(&v126, v49, v50);
    std::string::size_type v52 = v51->__r_.__value_.__r.__words[0];
    v129[0] = v51->__r_.__value_.__l.__size_;
    *(void *)((char *)v129 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
    char v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13->__r_.__value_.__l.__data_);
    }
    v13->__r_.__value_.__r.__words[0] = v52;
    std::string::size_type v54 = *(void *)((char *)v129 + 7);
    v13->__r_.__value_.__l.__size_ = v129[0];
    *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = v54;
    *((unsigned char *)&v13->__r_.__value_.__s + 23) = v53;
    if ((char)v128 < 0) {
      operator delete((void *)v127);
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v126.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(double *)(a3 + 536) != 0.0)
  {
    unsigned int v55 = vcvtmd_s64_f64((CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 536)) / 86400.0);
    LODWORD(v15->__r_.__value_.__l.__data_) = v55;
    if ((v55 & 0x80000000) != 0)
    {
      int v56 = -2;
    }
    else
    {
      if (v55 < 0x16E) {
        goto LABEL_75;
      }
      int v56 = 366;
    }
    LODWORD(v15->__r_.__value_.__l.__data_) = v56;
  }
LABEL_75:
  int v57 = HIBYTE(v123->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v123->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v123->__r_.__value_.__l.__size_ != 5) {
      goto LABEL_97;
    }
    long long v58 = (std::string *)v123->__r_.__value_.__r.__words[0];
  }
  else
  {
    long long v58 = v123;
    if (v57 != 5) {
      goto LABEL_97;
    }
  }
  int data = (int)v58->__r_.__value_.__l.__data_;
  int v60 = v58->__r_.__value_.__s.__data_[4];
  BOOL v61 = data == 1751343427 && v60 == 101;
  if (v61 && *(double *)(a3 + 520) != 0.0)
  {
    unsigned int v63 = vcvtmd_s64_f64((CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 520)) / 86400.0);
    *__int16 v119 = v63;
    if ((v63 & 0x80000000) != 0)
    {
      int v64 = -2;
    }
    else
    {
      if (v63 < 0x16E)
      {
LABEL_110:
        unsigned int v68 = *(_DWORD *)(a3 + 528);
        goto LABEL_114;
      }
      int v64 = 366;
    }
    *__int16 v119 = v64;
    goto LABEL_110;
  }
  if ((v57 & 0x80) != 0)
  {
    if (v123->__r_.__value_.__l.__size_ != 5) {
      goto LABEL_97;
    }
    int v62 = (std::string *)v123->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v62 = v123;
    if (v57 != 5) {
      goto LABEL_97;
    }
  }
  int v65 = (int)v62->__r_.__value_.__l.__data_;
  int v66 = v62->__r_.__value_.__s.__data_[4];
  BOOL v67 = v65 == 1935766085 && v66 == 101;
  if (!v67 || *(double *)(a3 + 504) == 0.0)
  {
LABEL_97:
    unsigned int v68 = *v124;
    if ((*v124 & 0x80000000) == 0) {
      goto LABEL_98;
    }
LABEL_115:
    int v69 = -1;
    goto LABEL_116;
  }
  unsigned int v70 = vcvtmd_s64_f64((CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 504)) / 86400.0);
  *__int16 v119 = v70;
  if ((v70 & 0x80000000) != 0)
  {
    int v71 = -2;
    goto LABEL_112;
  }
  if (v70 >= 0x16E)
  {
    int v71 = 366;
LABEL_112:
    *__int16 v119 = v71;
  }
  unsigned int v68 = *(_DWORD *)(a3 + 512);
LABEL_114:
  *double v124 = v68;
  if ((v68 & 0x80000000) != 0) {
    goto LABEL_115;
  }
LABEL_98:
  if (v68 >= 0x65)
  {
    int v69 = 101;
LABEL_116:
    *double v124 = v69;
  }
  if (!objc_opt_class()
    || !objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed")|| (int v72 = *(void **)(a3 + 280)) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    BOOL v76 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v126.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "#ADR,PreCachedADRMetric,IHA switch not enabled", (uint8_t *)&v126, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v126, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v85 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::PreCachedADRMetric::PreCachedADRMetric(const std::string &, const CLEmergencyADR &)", "%s\n", (const char *)v85);
      if (v85 != &v126) {
        free(v85);
      }
    }
    goto LABEL_132;
  }
  sub_1013A4164([v72 name], [*(id *)(a3 + 280) nameModifiedDate], v117, v107);
  sub_1013A4164([*(id *)(a3 + 280) gmtBirthdate], [*(id *)(a3 + 280) gregorianBirthdayModifiedDate], v116, v106);
  sub_1013A4164([*(id *)(a3 + 280) weight], [*(id *)(a3 + 280) weightModifiedDate], v115, v105);
  sub_1013A4164([*(id *)(a3 + 280) height], [*(id *)(a3 + 280) heightModifiedDate], v114, v104);
  if ([*(id *)(a3 + 280) bloodType]) {
    __int16 v73 = &stru_10248D3C0;
  }
  else {
    __int16 v73 = &stru_10248D3D8;
  }
  std::string::operator=(v110, v73);
  sub_1013A4164([*(id *)(a3 + 280) medicalConditions], [*(id *)(a3 + 280) medicalConditionsModifiedDate], v113, v103);
  sub_1013A4164((uint64_t)[*(id *)(a3 + 280) medicalNotes], (uint64_t)[*(id *)(a3 + 280) medicalNotesModifiedDate], v109, v102);
  sub_1013A4164([*(id *)(a3 + 280) allergyInfo], [*(id *)(a3 + 280) allergyInfoModifiedDate], v112, v101);
  sub_1013A4164([*(id *)(a3 + 280) medicationInfo], [*(id *)(a3 + 280) medicationInfoModifiedDate], v108, v100);
  sub_1013A4164([*(id *)(a3 + 280) emergencyContacts], [*(id *)(a3 + 280) emergencyContactsModifiedDate], v111, v99);
  if ([*(id *)(a3 + 280) emergencyContacts])
  {
    unsigned int v74 = [[objc_msgSend(*(id *)(a3 + 280), "emergencyContacts") count];
    *uint64_t v118 = v74;
    if ((v74 & 0x80000000) != 0)
    {
      int v75 = -2;
      goto LABEL_141;
    }
    if (v74 >= 0x65)
    {
      int v75 = 101;
LABEL_141:
      *uint64_t v118 = v75;
    }
  }
  if ([*(id *)(a3 + 280) primaryLanguageCode])
  {
    std::string::assign(v97, (const std::string::value_type *)[objc_msgSend(*(id *)(a3 + 280), "primaryLanguageCode") UTF8String]);
    if ([*(id *)(a3 + 280) primaryLanguageCodeModifiedDate])
    {
      unsigned int v82 = sub_1013A29B4((uint64_t)[*(id *)(a3 + 280) primaryLanguageCodeModifiedDate]);
      LODWORD(v98->__r_.__value_.__l.__data_) = v82;
      if ((v82 & 0x80000000) != 0)
      {
        int v83 = -2;
      }
      else
      {
        if (v82 < 0x16E) {
          goto LABEL_132;
        }
        int v83 = 366;
      }
      LODWORD(v98->__r_.__value_.__l.__data_) = v83;
    }
  }
LABEL_132:
  uint64_t v77 = sub_1001BA55C();
  BOOL v78 = (void *)sub_100802EC0(v77);
  __int16 v79 = v78;
  if (v78)
  {
    std::string::assign(__dsta, (const std::string::value_type *)[v78 UTF8String]);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  BOOL v80 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v126.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#ADR,PreCachedADRMetric,created", (uint8_t *)&v126, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v126, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    char v84 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::PreCachedADRMetric::PreCachedADRMetric(const std::string &, const CLEmergencyADR &)", "%s\n", (const char *)v84);
    if (v84 != &v126) {
      free(v84);
    }
  }
  return __dst;
}

void sub_1013A5C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,void **a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,void **a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (*(char *)(v55 + 575) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(a28 + 23) < 0) {
    operator delete(*(void **)a28);
  }
  if (*(char *)(v55 + 503) < 0) {
    operator delete(*a25);
  }
  if (*(char *)(a29 + 23) < 0) {
    operator delete(*(void **)a29);
  }
  if (*(char *)(v55 + 439) < 0) {
    operator delete(*a26);
  }
  if (*(char *)(a30 + 23) < 0) {
    operator delete(*(void **)a30);
  }
  if (*(char *)(v55 + 383) < 0) {
    operator delete(*a27);
  }
  if (*(char *)(a31 + 23) < 0) {
    operator delete(*(void **)a31);
  }
  if (*(char *)(v55 + 319) < 0) {
    operator delete(*a32);
  }
  if (*(char *)(a33 + 23) < 0) {
    operator delete(*(void **)a33);
  }
  if (*(char *)(v55 + 255) < 0) {
    operator delete(*a34);
  }
  if (*(char *)(v56 + 23) < 0) {
    operator delete(*(void **)v56);
  }
  if (*(char *)(v55 + 191) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(a13 + 23) < 0) {
    operator delete(*(void **)a13);
  }
  if (*(char *)(v55 + 143) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(a41 + 23) < 0) {
    operator delete(*(void **)a41);
  }
  if (*(char *)(v55 + 95) < 0) {
    operator delete(*a37);
  }
  if (*(char *)(a38 + 23) < 0) {
    operator delete(*(void **)a38);
  }
  if (*(char *)(v55 + 47) < 0) {
    operator delete(*a39);
  }
  if (*(char *)(v55 + 23) < 0) {
    operator delete(*(void **)v55);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013A5F78(std::string *a1, int a2, const std::string *a3)
{
  if (!a2)
  {
    uint64_t v7 = a1 + 6;
    goto LABEL_6;
  }
  int v6 = sub_1000FFBA8();
  if (a2 == 1 && v6)
  {
    uint64_t v7 = a1 + 7;
LABEL_6:
    std::string::operator=(v7, a3);
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ADR,setResultForSim,tried to set result for unsupported inst,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    std::string::size_type v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::PreCachedADRMetric::setResultForSim(SimInstance, const std::string &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_1013A61A8(uint64_t *a1)
{
  sub_100134750(&v48, "Sim1:");
  int v2 = a1 + 18;
  sub_1013A4850(a1 + 18, (uint64_t)v46);
  if ((v47 & 0x80u) == 0) {
    uint64_t v3 = v46;
  }
  else {
    uint64_t v3 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    std::string::size_type v4 = v47;
  }
  else {
    std::string::size_type v4 = (std::string::size_type)v46[1];
  }
  size_t v5 = std::string::append(&v48, (const std::string::value_type *)v3, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v44, ",Sim2:");
  if ((v45 & 0x80u) == 0) {
    uint64_t v7 = v44;
  }
  else {
    uint64_t v7 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    std::string::size_type v8 = v45;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)v44[1];
  }
  std::string::size_type v9 = std::string::append(&v50, (const std::string::value_type *)v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  int v11 = a1 + 21;
  sub_1013A4850(a1 + 21, (uint64_t)__p);
  if ((v43 & 0x80u) == 0) {
    char v12 = __p;
  }
  else {
    char v12 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v13 = v43;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::size_type v14 = std::string::append(&v49, (const std::string::value_type *)v12, v13);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  v51[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v51 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = (void **)(a1 + 15);
  if (*((char *)a1 + 143) < 0) {
    operator delete(*v17);
  }
  uint64_t v18 = v51[0];
  a1[15] = v15;
  a1[16] = v18;
  *(uint64_t *)((char *)a1 + 135) = *(void *)((char *)v51 + 7);
  *((unsigned char *)a1 + 143) = v16;
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  id v19 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v20 = a1;
  if (*((char *)a1 + 23) < 0) {
    uint64_t v20 = (uint64_t *)*a1;
  }
  [v19 setValue:[NSString stringWithUTF8String:v20] forKey:@"simCountry1"];
  uint64_t v21 = a1 + 3;
  if (*((char *)a1 + 47) < 0) {
    uint64_t v21 = (void *)*v21;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21) forKey:@"operatorCountry1"];
  unsigned __int8 v22 = a1 + 6;
  if (*((char *)a1 + 71) < 0) {
    unsigned __int8 v22 = (void *)*v22;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22) forKey:@"simCountry2"];
  std::string v23 = a1 + 9;
  if (*((char *)a1 + 95) < 0) {
    std::string v23 = (void *)*v23;
  }
  [v19 setValue:[NSString stringWithUTF8String:v23] forKey:@"operatorCountry2"];
  uint64_t v24 = a1 + 12;
  if (*((char *)a1 + 119) < 0) {
    uint64_t v24 = (void *)*v24;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24) forKey:@"mode"];
  std::string v25 = a1 + 15;
  if (*((char *)a1 + 143) < 0) {
    std::string v25 = *v17;
  }
  [v19 setValue:[NSString stringWithUTF8String:v25] forKey:@"overallResult"];
  if (*((char *)a1 + 167) < 0) {
    int v2 = (void *)*v2;
  }
  [v19 setValue:[NSString stringWithUTF8String:v2] forKey:@"resultSim1"];
  if (*((char *)a1 + 191) < 0) {
    int v11 = (void *)*v11;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11) forKey:@"resultSim2"];
  int v26 = a1 + 24;
  if (*((char *)a1 + 215) < 0) {
    int v26 = (void *)*v26;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26) forKey:@"phoneNumbersAvailable"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 54)] forKey:@"daysSinceLastCacheSuccess"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 55)] forKey:@"daysSinceLastCacheFailure"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 56)] forKey:@"cacheFailureCount"];
  unint64_t v27 = a1 + 29;
  if (*((char *)a1 + 255) < 0) {
    unint64_t v27 = (void *)*v27;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27) forKey:@"nameAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 64)] forKey:@"daysSinceLastNameUpdate"];
  uint64_t v28 = a1 + 33;
  if (*((char *)a1 + 287) < 0) {
    uint64_t v28 = (void *)*v28;
  }
  [v19 setValue:[NSString stringWithUTF8String:v28] forKey:@"ageAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 72)] forKey:@"daysSinceLastAgeUpdate"];
  int v29 = a1 + 37;
  if (*((char *)a1 + 319) < 0) {
    int v29 = (void *)*v29;
  }
  [v19 setValue:[NSString stringWithUTF8String:v29] forKey:@"weightAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 80)] forKey:@"daysSinceLastWeightUpdate"];
  int v30 = a1 + 41;
  if (*((char *)a1 + 351) < 0) {
    int v30 = (void *)*v30;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30) forKey:@"heightAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 88)] forKey:@"daysSinceLastHeightUpdate"];
  uint64_t v31 = a1 + 45;
  if (*((char *)a1 + 383) < 0) {
    uint64_t v31 = (void *)*v31;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31) forKey:@"bloodTypeAvailability"];
  uint64_t v32 = a1 + 48;
  if (*((char *)a1 + 407) < 0) {
    uint64_t v32 = (void *)*v32;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32) forKey:@"medicalConditionsAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 102)] forKey:@"daysSinceLastMedicalConditionsUpdate"];
  int v33 = a1 + 52;
  if (*((char *)a1 + 439) < 0) {
    int v33 = (void *)*v33;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33) forKey:@"medicalNotesAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 110)] forKey:@"daysSinceLastMedicalNotesUpdate"];
  int v34 = a1 + 56;
  if (*((char *)a1 + 471) < 0) {
    int v34 = (void *)*v34;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34) forKey:@"allergyDetailsAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 118)] forKey:@"daysSinceLastAllergyDetailsUpdate"];
  int v35 = a1 + 60;
  if (*((char *)a1 + 503) < 0) {
    int v35 = (void *)*v35;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35) forKey:@"medicationsAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 126)] forKey:@"daysSinceLastMedicationsUpdate"];
  std::string::size_type v36 = a1 + 64;
  if (*((char *)a1 + 535) < 0) {
    std::string::size_type v36 = (void *)*v36;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36) forKey:@"emergencyContactsAvailability"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 134)] forKey:@"daysSinceLastEmergencyContactsUpdate"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 135)] forKey:@"numEmergencyContactsAvailable"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 136)] forKey:@"numEmergencyContactsSent"];
  char v37 = a1 + 69;
  if (*((char *)a1 + 575) < 0) {
    char v37 = (void *)*v37;
  }
  [v19 setValue:[NSString stringWithUTF8String:v37] forKey:@"devicePrimaryLanguage"];
  [v19 setValue:[NSNumber numberWithInt:*((unsigned int *)a1 + 144)] forKey:@"daysSinceLastDevicePrimaryLanguageUpdate"];
  std::string::size_type v38 = a1 + 73;
  if (*((char *)a1 + 607) < 0) {
    std::string::size_type v38 = (void *)*v38;
  }
  [v19 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38) forKey:@"deviceSystemLanguage"];
  AnalyticsSendEvent();

  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v39 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v40 = a1 + 15;
    if (*((char *)a1 + 143) < 0) {
      __int16 v40 = *v17;
    }
    LODWORD(v49.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#ADR,PreCachedADRMetric,submitted,overallResult,%{public}s", (uint8_t *)&v49, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v49, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    if (*((char *)a1 + 143) < 0) {
      uint64_t v17 = (void **)*v17;
    }
    LODWORD(v50.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    __int16 v41 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::PreCachedADRMetric::report()", "%s\n", (const char *)v41);
    if (v41 != &v49) {
      free(v41);
    }
  }
}

void sub_1013A6AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013A6B40(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 560;
  LODWORD(v18.__r_.__value_.__l.__data_) = 0;
  *(void *)uint64_t buf = &v18;
  size_t v5 = sub_100981438(a1 + 560, (int *)&v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  if (*((char *)v5 + 47) < 0)
  {
    sub_1000DC48C(__p, (void *)v5[3], v5[4]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 3);
    uint64_t v20 = v5[5];
  }
  memset(&v18, 0, sizeof(v18));
  if (sub_1000FFBA8())
  {
    int v17 = 1;
    *(void *)uint64_t buf = &v17;
    long long v6 = (const std::string *)sub_100981438(v4, &v17, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=(&v18, v6 + 1);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    uint64_t v8 = *(void *)(a1 + 504);
    int v9 = *(_DWORD *)(a1 + 512);
    uint64_t v10 = *(void *)(a1 + 520);
    int v11 = *(_DWORD *)(a1 + 528);
    uint64_t v12 = *(void *)(a1 + 536);
    BOOL v13 = *(void *)(a1 + 544) != 0;
    id v14 = [[objc_msgSend(*(id *)(a1 + 552), "base64EncodedStringWithOptions:", 0) UTF8String];
    std::string::size_type v15 = __p;
    if (v20 < 0) {
      std::string::size_type v15 = (void **)__p[0];
    }
    char v16 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 68291587;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    std::string v23 = "";
    __int16 v24 = 2082;
    std::string v25 = a2;
    __int16 v26 = 2050;
    uint64_t v27 = v8;
    __int16 v28 = 1026;
    int v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = v10;
    __int16 v32 = 1026;
    int v33 = v11;
    __int16 v34 = 2050;
    uint64_t v35 = v12;
    __int16 v36 = 1026;
    BOOL v37 = v13;
    __int16 v38 = 2082;
    id v39 = v14;
    __int16 v40 = 2081;
    __int16 v41 = v15;
    __int16 v42 = 2081;
    unsigned __int8 v43 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,printPreCachedAdrInfo\", \"action\":%{public, location:escape_only}s, \"clear failure time\":\"%{public}.1f\", \"clear failure count\":%{public}d, \"cache failure time\":\"%{public}.1f\", \"cache failure count\":%{public}d, \"success time\":\"%{public}.1f\", \"cloaking key present\":%{public}hhd, \"medical ID hash\":%{public, location:escape_only}s, \"phone number 1\":%{private, location:escape_only}s, \"phone number 2\":%{private, location:escape_only}s}", buf, 0x6Au);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1013A6DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013A6E00(void *a1)
{
  sub_1000E9354(v30);
  if (byte_10248763F >= 0) {
    int v2 = (const char *)&qword_102487628;
  }
  else {
    int v2 = (const char *)qword_102487628;
  }
  sub_10016332C((uint64_t)v30, v2, a1 + 63);
  if (byte_102487657 >= 0) {
    uint64_t v3 = (const char *)&qword_102487640;
  }
  else {
    uint64_t v3 = (const char *)qword_102487640;
  }
  sub_1000EA838((uint64_t)v30, v3, a1 + 64);
  if (byte_10248766F >= 0) {
    uint64_t v4 = (const char *)&qword_102487658;
  }
  else {
    uint64_t v4 = (const char *)qword_102487658;
  }
  sub_10016332C((uint64_t)v30, v4, a1 + 65);
  if (byte_102487687 >= 0) {
    size_t v5 = (const char *)&qword_102487670;
  }
  else {
    size_t v5 = (const char *)qword_102487670;
  }
  sub_1000EA838((uint64_t)v30, v5, a1 + 66);
  if (byte_10248769F >= 0) {
    long long v6 = (const char *)&qword_102487688;
  }
  else {
    long long v6 = (const char *)qword_102487688;
  }
  sub_10016332C((uint64_t)v30, v6, a1 + 67);
  uint64_t v7 = (void *)a1[68];
  if (v7)
  {
    if (byte_1024876B7 >= 0) {
      uint64_t v8 = (const char *)&qword_1024876A0;
    }
    else {
      uint64_t v8 = (const char *)qword_1024876A0;
    }
    sub_1004D34AC((uint64_t)v30, v8, (char *)[objc_msgSend(objc_msgSend(v7, "base64EncodedStringWithOptions:", 0), "UTF8String") UTF8String]);
  }
  int v9 = (void *)a1[69];
  if (v9)
  {
    if (byte_1024876CF >= 0) {
      uint64_t v10 = (const char *)&qword_1024876B8;
    }
    else {
      uint64_t v10 = (const char *)qword_1024876B8;
    }
    sub_1004D34AC((uint64_t)v30, v10, (char *)[[[objc_msgSend(objc_msgSend(v9, "base64EncodedStringWithOptions:", 0)) stringByUTF8String];
  }
  int v29 = 0;
  uint64_t v31 = &v29;
  int v11 = sub_100981438((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101D0B290, &v31);
  if (*((char *)v11 + 47) < 0)
  {
    if (!v11[4]) {
      goto LABEL_34;
    }
  }
  else if (!*((unsigned char *)v11 + 47))
  {
    goto LABEL_34;
  }
  int v12 = byte_1024876E7;
  uint64_t v13 = qword_1024876D0;
  int v29 = 0;
  uint64_t v31 = &v29;
  id v14 = (char *)sub_100981438((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101D0B290, &v31);
  if (v12 >= 0) {
    std::string::size_type v15 = (const char *)&qword_1024876D0;
  }
  else {
    std::string::size_type v15 = (const char *)v13;
  }
  sub_1004D37A8((uint64_t)v30, v15, v14 + 24);
LABEL_34:
  if (sub_1000FFBA8())
  {
    int v29 = 1;
    uint64_t v31 = &v29;
    char v16 = sub_100981438((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101D0B290, &v31);
    if (*((char *)v16 + 47) < 0)
    {
      if (!v16[4]) {
        goto LABEL_43;
      }
    }
    else if (!*((unsigned char *)v16 + 47))
    {
      goto LABEL_43;
    }
    int v17 = byte_1024876FF;
    uint64_t v18 = qword_1024876E8;
    int v29 = 1;
    uint64_t v31 = &v29;
    id v19 = (char *)sub_100981438((uint64_t)(a1 + 70), &v29, (uint64_t)&unk_101D0B290, &v31);
    if (v17 >= 0) {
      uint64_t v20 = (const char *)&qword_1024876E8;
    }
    else {
      uint64_t v20 = (const char *)v18;
    }
    sub_1004D37A8((uint64_t)v30, v20, v19 + 24);
  }
LABEL_43:
  uint64_t v21 = (void *)a1[75];
  if (v21 && [v21 count])
  {
    if (byte_102487717 >= 0) {
      __int16 v22 = (const char *)&qword_102487700;
    }
    else {
      __int16 v22 = (const char *)qword_102487700;
    }
    sub_1000EA8A4((uint64_t)v30, v22, a1[75]);
  }
  uint64_t v23 = sub_1000A6958();
  if (byte_102487627 >= 0) {
    __int16 v24 = (const char *)&qword_102487610;
  }
  else {
    __int16 v24 = (const char *)qword_102487610;
  }
  sub_1004D3878(v23, v24, (uint64_t)v30);
  uint64_t v25 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v25 + 944))(v25);
  sub_100134750(__p, "wrote");
  sub_1013A6B40((uint64_t)a1, (uint64_t *)__p);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  return sub_10013F3C4(v30);
}

void sub_1013A715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *sub_1013A7198@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100134750(a2, off_102322CD8[a1]);
}

void *sub_1013A71AC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100134750(a2, off_102322D30[a1]);
}

void sub_1013A71C0(uint64_t a1, int a2, double a3)
{
  int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    __int16 v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v33 = (void *)*v33;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      BOOL v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        BOOL v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyADR>::setTimeoutEvent(Event, double) [T = CLEmergencyADR]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    __int16 v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
    }
    uint64_t v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
    }
    __int16 v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      sub_1013A7198(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      uint64_t v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      sub_1013A7198(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      std::string v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyADR>::setTimeoutEvent(Event, double) [T = CLEmergencyADR]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        int v17 = (uint64_t *)v13;
      }
      else {
        int v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      uint64_t v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102322C78);
        }
        uint64_t v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          uint64_t v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v23 = (void *)*v23;
          }
          sub_1013A7198(v41, __p);
          if (v49 >= 0) {
            __int16 v24 = __p;
          }
          else {
            __int16 v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102322C78);
          }
          uint64_t v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          sub_1013A7198(v41, v42);
          if (v45 >= 0) {
            __int16 v26 = v42;
          }
          else {
            __int16 v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          std::string v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyADR>::setTimeoutEvent(Event, double) [T = CLEmergencyADR]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  id v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    uint64_t v18 = v19;
    *(void *)uint64_t buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1013AF79C;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102322C78);
  }
  uint64_t v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    char v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      char v28 = (void *)*v28;
    }
    sub_1013A7198(a2, buf);
    if (buf[23] >= 0) {
      int v29 = buf;
    }
    else {
      int v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    std::string v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    __int16 v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v30 = (void *)*v30;
    }
    sub_1013A7198(a2, __p);
    if (v49 >= 0) {
      uint64_t v31 = __p;
    }
    else {
      uint64_t v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    std::string::size_type v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1013A7CAC(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    uint64_t v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_1013A7198(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      __int16 v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_1013A7198(a2, buf);
      if (v25 >= 0) {
        int v15 = buf;
      }
      else {
        int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      uint64_t v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyADR>::cancelTimeoutEvent(Event) [T = CLEmergencyADR]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      sub_1013A7198(a2, __p);
      if (v31 >= 0) {
        id v19 = __p;
      }
      else {
        id v19 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      __int16 v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102322C78);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_1013A7198(a2, buf);
      if (v25 >= 0) {
        uint64_t v21 = buf;
      }
      else {
        uint64_t v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      uint64_t v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

BOOL sub_1013A8140(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 329) && *(unsigned char *)(a1 + 330))
  {
    int v4 = 0;
    uint64_t v5 = &v4;
    BOOL v2 = *((unsigned char *)sub_10097F690(a1 + 336, &v4, (uint64_t)&unk_101D0B290, &v5) + 20) != 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  if (sub_1000FFBA8() && v2)
  {
    int v4 = 1;
    uint64_t v5 = &v4;
    return *((unsigned char *)sub_10097F690(a1 + 336, &v4, (uint64_t)&unk_101D0B290, &v5) + 20) != 0;
  }
  return v2;
}

BOOL sub_1013A81FC(uint64_t a1)
{
  sub_1000C7F88(buf);
  v20[0] = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "EEDEnablePreCachedADR", v20);
  if (v20[0]) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,enabled via default", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      *(_WORD *)dispatch_time_t v20 = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (!v6) {
      sub_10015E48C();
    }
    BOOL v7 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    if (!*((unsigned char *)sub_100A81680(v7) + 424))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      BOOL v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,not enabled via config", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_64;
      }
      goto LABEL_68;
    }
    if (!*(unsigned char *)(a1 + 328))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v18 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,not supported", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_64:
        *(_WORD *)dispatch_time_t v20 = 0;
        id v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::isPreCachedAdrEnabled() const", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        return 0;
      }
      goto LABEL_68;
    }
  }
  uint64_t v8 = sub_100A96A4C(a1 + 168, 0);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 159);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(v8 + 144);
  }
  if (v9) {
    goto LABEL_22;
  }
  if (sub_1000FFBA8())
  {
    uint64_t v12 = sub_100A96A4C(a1 + 168, 1);
    uint64_t v13 = *(unsigned __int8 *)(v12 + 159);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(v12 + 144);
    }
    if (v13)
    {
LABEL_22:
      uint64_t v10 = *(void **)(a1 + 280);
      if (v10)
      {
        if ([v10 shareDuringEmergency]) {
          return 1;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v17 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,ADR pre-cache disabled by user", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_64;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v15 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning #ADR,isPreCachedAdrEnabled,can't determine ADR pre-cache enablement", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_64;
        }
      }
LABEL_68:
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
      goto LABEL_64;
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ADR,isPreCachedAdrEnabled,no phone number available", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_64;
    }
    goto LABEL_68;
  }
  return result;
}

void sub_1013A8A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013A8A58(uint64_t a1, int64_t a2, int64_t a3)
{
  if (*(unsigned char *)(a1 + 376)) {
    sub_1013A8DF8(a1);
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_string(v6, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_UPLOAD);
  xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
  xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v6, XPC_ACTIVITY_DELAY, a2);
  xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, a3);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  BOOL v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349312;
    int64_t v15 = a2;
    __int16 v16 = 2050;
    int64_t v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,registerPreCacheAdrActivity,registering pre-cache ADR activity,delay,%{public}lld,gracePeriod,%{public}lld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v10 = 134349312;
    int64_t v11 = a2;
    __int16 v12 = 2050;
    int64_t v13 = a3;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerPreCacheAdrActivity(int64_t, int64_t)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(unsigned char *)(a1 + 376) = 1;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1013A9F54;
  handler[3] = &unk_1022C9C78;
  handler[4] = a1;
  xpc_activity_register((const char *)[@"com.apple.locationd.preCachedADR" UTF8String], v6, handler);
  xpc_release(v6);
}

uint64_t sub_1013A8D8C(uint64_t a1)
{
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 536) = 0;

  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  sub_10068A72C(a1 + 560);

  *(void *)(a1 + 600) = 0;

  return sub_1013A6E00((void *)a1);
}

void sub_1013A8DF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 376))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,unregisterPreCacheAdrActivity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::unregisterPreCacheAdrActivity()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    xpc_activity_unregister((const char *)[@"com.apple.locationd.preCachedADR" UTF8String]);
    *(unsigned char *)(a1 + 376) = 0;
  }
}

NSMutableData *sub_1013A8FA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 280);
  if (!v1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int64_t v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ADR,getMedicalIdHash,no medical ID available", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    LOWORD(v20) = 0;
    int v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyADR::getMedicalIdHash()", "%s\n");
    goto LABEL_26;
  }
  id v19 = 0;
  int v2 = +[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:&v19];
  if (v19)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v4 = [v19 code];
      id v5 = [[objc_msgSend(v19, "domain") UTF8String];
      id v6 = [[[v19 localizedDescription] UTF8String];
      *(_DWORD *)uint64_t buf = 67240706;
      *(_DWORD *)char v25 = v4;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&_DWORD v25[6] = v5;
      __int16 v26 = 2082;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ADR,getMedicalIdHash,failed to create archive from medical ID,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    unsigned int v7 = [v19 code];
    id v8 = [[[v19 domain] UTF8String];
    id v9 = [[objc_msgSend(v19, "localizedDescription") UTF8String];
    int v20 = 67240706;
    *(_DWORD *)uint64_t v21 = v7;
    *(_WORD *)&v21[4] = 2082;
    *(void *)&v21[6] = v8;
    __int16 v22 = 2082;
    id v23 = v9;
    int v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyADR::getMedicalIdHash()", "%s\n");
LABEL_26:
    if (v10 != buf) {
      free(v10);
    }
    return 0;
  }
  int64_t v13 = v2;
  __int16 v12 = +[NSMutableData dataWithLength:32];
  CC_SHA256([(NSData *)v13 bytes], (CC_LONG)[(NSData *)v13 length], (unsigned __int8 *)[(NSMutableData *)v12 mutableBytes]);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = [[-[NSMutableData base64EncodedStringWithOptions:](v12, "base64EncodedStringWithOptions:", 0) UTF8String];
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)char v25 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ADR,getMedicalIdHash,hash,%{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v17 = [[-[NSMutableData base64EncodedStringWithOptions:](v12, "base64EncodedStringWithOptions:", 0) UTF8String];
    int v20 = 136446210;
    *(void *)uint64_t v21 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyADR::getMedicalIdHash()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return v12;
}

uint64_t sub_1013A94D0(uint64_t a1)
{
  uint64_t v1 = a1 + 448;
  int v3 = 0;
  unsigned int v4 = &v3;
  *((_DWORD *)sub_1000F3C48(a1 + 448, &v3, (uint64_t)&unk_101D0B290, &v4) + 5) = 0;
  uint64_t result = sub_1000FFBA8();
  if (result)
  {
    int v3 = 1;
    unsigned int v4 = &v3;
    uint64_t result = (uint64_t)sub_1000F3C48(v1, &v3, (uint64_t)&unk_101D0B290, &v4);
    *(_DWORD *)(result + 20) = 0;
  }
  return result;
}

uint64_t sub_1013A9558(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  int v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,preparing to send pre-cached ADR", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    *(_WORD *)char v31 = 0;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr()", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  int v3 = +[NSMutableData dataWithLength:16];
  int v4 = SecRandomCopyBytes(kSecRandomDefault, 0x10uLL, [(NSMutableData *)v3 mutableBytes]);
  if (v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 67240192;
      DWORD1(buf[0]) = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ADR,sendPreCachedAdr,failed to generate key,error,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      *(_DWORD *)char v31 = 67240192;
      *(_DWORD *)&v31[4] = v4;
      char v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendPreCachedAdr()", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    id v6 = *(std::string **)(a1 + 608);
    if (v6)
    {
      std::string::operator=(v6 + 6, (const std::string *)&qword_10248D300);
      sub_1013A5F78(*(std::string **)(a1 + 608), 1, (const std::string *)&qword_10248D300);
    }
    return 0;
  }
  *(void *)(a1 + 384) = v3;
  sub_1000C7F88(buf);
  v31[0] = 0;
  int v7 = sub_1000D2988(*(uint64_t *)&buf[0], "EEDLogCloakingKey", v31);
  if (v31[0]) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v8)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [[objc_msgSend(*(id *)(a1 + 384), "base64EncodedStringWithOptions:", 0) UTF8String];
      LODWORD(buf[0]) = 136380675;
      *(void *)((char *)buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,cloaking key,%{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v26 = [[objc_msgSend(*(id *)(a1 + 384), "base64EncodedStringWithOptions:", 0) UTF8String];
      *(_DWORD *)char v31 = 136380675;
      *(void *)&v31[4] = v26;
      id v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr()", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  int64_t v11 = sub_1013A8FA8(a1);
  *(void *)(a1 + 392) = v11;
  __int16 v12 = v11;
  *(void *)char v31 = 0;
  id v29 = 0;
  __int16 v30 = 0;
  sub_1013AA2B0(a1, v31, &v30, &v29);
  if (objc_opt_class()
    && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed")&& *(void *)(a1 + 608))
  {
    unsigned int v13 = [v30 count];
    uint64_t v14 = *(void *)(a1 + 608);
    *(_DWORD *)(v14 + 544) = v13;
    if ((v13 & 0x80000000) != 0)
    {
      int v15 = -2;
    }
    else
    {
      if (v13 < 0x65) {
        goto LABEL_33;
      }
      int v15 = 101;
    }
    *(_DWORD *)(v14 + 544) = v15;
  }
LABEL_33:
  uint64_t v16 = *(void *)v31;
  id v17 = v30;
  BOOL v18 = sub_1013AA5D4(a1, 0, *(uint64_t *)v31, v30);
  if (v18)
  {
    uint64_t v19 = sub_100A96A4C(a1 + 168, 0);
    int v28 = 0;
    *(void *)&buf[0] = &v28;
    int v20 = (std::string *)sub_100981438(a1 + 400, &v28, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=(v20 + 1, (const std::string *)(v19 + 136));
  }
  if (sub_1000FFBA8() && sub_1013AA5D4(a1, 1, v16, v17))
  {
    uint64_t v21 = sub_100A96A4C(a1 + 168, 1);
    int v28 = 1;
    *(void *)&buf[0] = &v28;
    __int16 v22 = (std::string *)sub_100981438(a1 + 400, &v28, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=(v22 + 1, (const std::string *)(v21 + 136));
LABEL_39:

    *(void *)(a1 + 496) = v29;
    return 1;
  }
  if (v18) {
    goto LABEL_39;
  }
  return 0;
}

void sub_1013A9BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013A9BDC(uint64_t a1)
{
  return sub_10139B7D8(*(void *)(a1 + 32) + 8, 9);
}

uint64_t sub_1013A9BEC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1013AF7AC(result);
    operator delete();
  }
  return result;
}

BOOL sub_1013A9C3C(uint64_t a1)
{
  uint64_t v1 = a1 + 448;
  int v5 = 0;
  id v6 = &v5;
  int v2 = *((_DWORD *)sub_1000F3C48(a1 + 448, &v5, (uint64_t)&unk_101D0B290, &v6) + 5);
  BOOL v3 = v2 > 0;
  if (sub_1000FFBA8())
  {
    BOOL v3 = 1;
    if (v2 <= 0)
    {
      int v5 = 1;
      id v6 = &v5;
      return *((_DWORD *)sub_1000F3C48(v1, &v5, (uint64_t)&unk_101D0B290, &v6) + 5) > 0;
    }
  }
  return v3;
}

uint64_t sub_1013A9CEC(uint64_t a1)
{
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(CFAbsoluteTime *)(a1 + 536) = CFAbsoluteTimeGetCurrent();

  *(void *)(a1 + 544) = *(id *)(a1 + 384);
  *(void *)(a1 + 552) = *(id *)(a1 + 392);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a1 + 432);
  sub_1013AF920((void *)(a1 + 560), *(uint64_t **)(a1 + 416), 0);

  *(void *)(a1 + 600) = *(id *)(a1 + 496);

  return sub_1013A6E00((void *)a1);
}

uint64_t sub_1013A9D84(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  int v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ADR,clearPreCachedAdr,preparing to clear pre-cached ADR", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::clearPreCachedAdr()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = sub_1013AD00C(a1, 0);
  if (sub_1000FFBA8()) {
    return sub_1013AD00C(a1, 1) | v3;
  }
  return v3;
}

uint64_t sub_1013A9F44(uint64_t a1)
{
  return sub_10139B7D8(*(void *)(a1 + 32) + 8, 9);
}

void sub_1013A9F54(uint64_t a1, xpc_activity_t activity)
{
  int v2 = *(id **)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,preCacheADRActivity,handler triggered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v11) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerPreCacheAdrActivity(int64_t, int64_t)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    int v5 = [*v2 silo].queue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1013AA29C;
    block[3] = &unk_1022A3020;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    int v6 = state;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ADR,preCacheADRActivity,handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v11 = 67240192;
      int v12 = v6;
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::registerPreCacheAdrActivity(int64_t, int64_t)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_1013AA29C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 376) = 0;
  return sub_10139B7D8(v1 + 8, 2);
}

void sub_1013AA2B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v5 = *(void **)(a1 + 280);
  if (v5)
  {
    if ([v5 name]) {
      id v9 = sub_101479144([*(id *)(a1 + 280) name], 0x7D0u);
    }
    else {
      id v9 = 0;
    }
    if ([*(id *)(a1 + 280) emergencyContacts]
      && objc_msgSend(objc_msgSend(*(id *)(a1 + 280), "emergencyContacts"), "count"))
    {
      id v12 = objc_alloc_init((Class)NSMutableArray);
      id v13 = objc_alloc_init((Class)NSMutableArray);
      int v14 = sub_1000FFBA8();
      [+[NSNumber numberWithInt:*(unsigned int *)(sub_100A96A4C(a1 + 168, 0) + 32)] stringValue];
      int v15 = (void *)TUISOCountryCodeForMCC();
      if (v14)
      {
        [+[NSNumber numberWithInt:*(unsigned int *)(sub_100A96A4C(a1 + 168, 1) + 32)] stringValue];
        uint64_t v16 = TUISOCountryCodeForMCC();
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (sub_1000FFBA8() && ([v15 isEqualToString:v16] & 1) == 0 && v16)
      {
        if (v15) {
          int v15 = 0;
        }
        else {
          int v15 = (void *)v16;
        }
      }
      id v17 = [*(id *)(a1 + 280) emergencyContacts];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      _DWORD v18[2] = sub_1013AD874;
      uint64_t v18[3] = &unk_102322BD8;
      v18[4] = v15;
      void v18[5] = v12;
      v18[6] = v13;
      [v17 enumerateObjectsUsingBlock:v18];
      if (v12)
      {
        if ([v12 count])
        {
          *a2 = v9;
          *a3 = v12;
          *a4 = v13;
        }
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ADR,getFormattedEmergencyContacts,no medical ID info available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      __int16 v19 = 0;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::getFormattedEmergencyContacts(NSString **, NSArray<NSString *> **, NSArray<NSString *> **)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

BOOL sub_1013AA5D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v28[0] = a2;
  id v6 = sub_1013AAD60(a1, a2, a3, a4);
  if (v6)
  {
    int v7 = v6;
    id v8 = sub_1013AB8BC(a1, a2, (uint64_t)v6);

    if (v8)
    {
      id v9 = sub_1013ABEAC(a1, a2, v8);

      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 160);
        if (!v10) {
          sub_10015E48C();
        }
        int v11 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
        id v12 = sub_100A81680(v11);
        if (*((char *)v12 + 455) < 0)
        {
          sub_1000DC48C(__p, (void *)v12[54], v12[55]);
        }
        else
        {
          *(_OWORD *)std::string __p = *((_OWORD *)v12 + 27);
          uint64_t v32 = v12[56];
        }
        if (v32 >= 0) {
          BOOL v18 = __p;
        }
        else {
          BOOL v18 = (void **)__p[0];
        }
        id v27 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v18]));
        [(NSMutableURLRequest *)v27 setHTTPMethod:@"POST"];
        sub_10110D594(a1 + 200, (uint64_t)v9, (uint64_t)&v27);
        int v19 = *(_DWORD *)(a1 + 440);
        if (v19 >= 0) {
          int v20 = v19 + 1;
        }
        else {
          int v20 = 1;
        }
        *(_DWORD *)(a1 + 440) = v20;
        *(void *)uint64_t buf = v28;
        *((_DWORD *)sub_1000F3C48(a1 + 448, v28, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = v20;
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        uint64_t v21 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = v28[0];
          __int16 v34 = 1026;
          int v35 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,inst,%{public}d,sending as message %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          v28[1] = 67240448;
          void v28[2] = v28[0];
          __int16 v29 = 1026;
          int v30 = v20;
          id v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        __int16 v22 = *(void **)(a1 + 232);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_1013AC524;
        uint64_t v24[3] = &unk_102322BB0;
        v24[4] = a1;
        int v25 = v28[0];
        int v26 = v20;
        [objc_msgSend(v22, "uploadTaskWithRequest:fromData:completionHandler:", v27, v9, v24) resume];
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[0]);
        }
        return 1;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ADR,sendPreCachedAdr,inst,%{public}d,failed to create ADR cache-update message body", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_28:
          LODWORD(__p[0]) = 67240192;
          HIDWORD(__p[0]) = a2;
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v15);
LABEL_29:
          if (v15 != (char *)buf) {
            free(v15);
          }
          return 0;
        }
LABEL_53:
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
        goto LABEL_28;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      uint64_t v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ADR,sendPreCachedAdr,inst,%{public}d,failed to encrypt pre-cached ADR", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_28;
        }
        goto LABEL_53;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ADR,sendPreCachedAdr,inst,%{public}d,no pre-cached ADR data to send", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = a2;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::sendPreCachedAdr(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v15);
      goto LABEL_29;
    }
  }
  return result;
}

void sub_1013AAD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1013AAD60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 160);
  if (!v5) {
    sub_10015E48C();
  }
  id v9 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  uint64_t v10 = sub_100A81680(v9);
  sub_100A7D894(v10, (uint64_t)v50);
  if (v51)
  {
    uint64_t v11 = sub_100A96A4C(a1 + 168, a2);
    if (*(char *)(v11 + 159) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v11 + 136), *(void *)(v11 + 144));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v11 + 136);
      uint64_t v49 = *(void *)(v11 + 152);
    }
    int v14 = (void *)HIBYTE(v49);
    if (v49 < 0) {
      int v14 = __p[1];
    }
    if (v14)
    {
      id v15 = objc_alloc_init((Class)NSMutableDictionary);
      id v16 = sub_10139F7BC(a1, a2, 1, 0);
      if (v16)
      {
        [v15 setValue:v16 forKey:@"call_information"];
      }
      id v17 = sub_10139FE64(a1, 0);
      if (v17)
      {
        [v15 setValue:v17 forKey:@"caller_information"];
      }
      id v18 = sub_100AABDF0((uint64_t)v15);
      if (v18)
      {
        id v54 = 0;
        id v19 = sub_100FEE2CC(v18, 0x20u, &v54);
        id v20 = v54;
        id v21 = v19;
        if (v19 && v54)
        {
          CFAbsoluteTimeGetCurrent();
          unint64_t v22 = sub_100AABA94();
          id v23 = +[NSMutableData dataWithLength:32];
          CC_SHA256([v19 bytes], (CC_LONG)[v19 length], (unsigned __int8 *)[-[NSMutableData mutableBytes](v23, "mutableBytes")]);
          id v24 = sub_100FEF048((uint64_t)v50, v22, (uint64_t)v23, (uint64_t)v54);
          id v25 = v24;
          id v26 = objc_alloc_init((Class)NSMutableDictionary);
          if (v49 >= 0) {
            id v27 = __p;
          }
          else {
            id v27 = (void **)__p[0];
          }
          [v26 setValue:[NSString stringWithUTF8String:v27] forKey:@"call_ID"];
          [v26 setValue:@"1" forKey:@"data_version"];
          [v26 setValue:[+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v22) forKey:@"encrypt_time"];
          [v26 setValue:[v19 base64EncodedStringWithOptions:0] forKey:@"data"];
          [v26 setValue:v24 forKey:@"keys"];
          id v28 = sub_1013A1900(a1, a2, 1);
          if (v28)
          {
            [v26 setValue:v28 forKey:@"internal"];
          }
          if (a4 && [a4 count])
          {
            if (a3) {
              [v26 setValue:a3 forKey:@"name"];
            }
            [v26 setValue:a4 forKey:@"emergency_contacts"];
          }
          else
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            int v35 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t buf = 67240192;
              int v56 = a2;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#ADR,createPreCachedAdrDict,inst,%{public}d,emergency contacts not present", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_102322BF8);
              }
              int v52 = 67240192;
              int v53 = a2;
              __int16 v47 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v47);
              if (v47 != (char *)buf) {
                free(v47);
              }
            }
          }
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          __int16 v36 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = SHIBYTE(v49);
            __int16 v38 = (void **)__p[0];
            unsigned int v39 = [a4 count];
            *(_DWORD *)uint64_t buf = 68290307;
            int v40 = __p;
            if (v37 < 0) {
              int v40 = v38;
            }
            int v56 = 0;
            __int16 v57 = 2082;
            long long v58 = "";
            __int16 v59 = 1026;
            int v60 = a2;
            __int16 v61 = 2081;
            *(void *)int v62 = v40;
            *(_WORD *)&v62[8] = 2050;
            *(void *)&unsigned char v62[10] = v22;
            __int16 v63 = 1026;
            BOOL v64 = a3 != 0;
            __int16 v65 = 1026;
            unsigned int v66 = v39;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createPreCachedAdrDict,finished\", \"inst\":%{public}d, \"phone number\":%{private, location:escape_only}s, \"encrypt time\":%{public}lld, \"name available\":%{public}hhd, \"num contacts\":%{public}d}", buf, 0x38u);
          }
          goto LABEL_53;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v33 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67240192;
          int v56 = a2;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#ADR,createPreCachedAdrDict,inst,%{public}d,encrypted ADR data and/or key are nil", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          int v52 = 67240192;
          int v53 = a2;
          long long v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        __int16 v34 = *(std::string **)(a1 + 608);
        if (v34) {
          sub_1013A5F78(v34, a2, (const std::string *)&qword_10248D360);
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        char v31 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67240192;
          int v56 = a2;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#ADR,createPreCachedAdrDict,inst,%{public}d,failed to serialize ADR data dict into JSON", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          LODWORD(v54) = 67240192;
          HIDWORD(v54) = a2;
          char v45 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v45);
          if (v45 != (char *)buf) {
            free(v45);
          }
        }
        uint64_t v32 = *(std::string **)(a1 + 608);
        if (v32) {
          sub_1013A5F78(v32, a2, (const std::string *)&qword_10248D348);
        }
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      __int16 v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v56 = a2;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ADR,createPreCachedAdrDict,inst,%{public}d,native number not available", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LODWORD(v54) = 67240192;
        HIDWORD(v54) = a2;
        std::string::size_type v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyADR::createPreCachedAdrDict(SimInstance, NSString *, NSArray<NSString *> *)", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      int v30 = *(std::string **)(a1 + 608);
      if (v30) {
        sub_1013A5F78(v30, a2, (const std::string *)&qword_10248D330);
      }
    }
    id v26 = 0;
LABEL_53:
    if (SHIBYTE(v49) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_74;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v12 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = v51;
    if (*((char *)v10 + 223) < 0)
    {
      sub_1000DC48C(__p, (void *)v10[25], v10[26]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v10 + 25);
      uint64_t v49 = v10[27];
    }
    int v41 = __p;
    if (v49 < 0) {
      int v41 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 68289794;
    int v56 = 0;
    __int16 v57 = 2082;
    long long v58 = "";
    __int16 v59 = 1026;
    int v60 = a2;
    __int16 v61 = 1026;
    *(_DWORD *)int v62 = v13;
    *(_WORD *)&v62[4] = 2082;
    *(void *)&v62[6] = v41;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createPreCachedAdrDict,not configured for ADR encryption\", \"inst\":%{public}d, \"num partner certs\":%{public}d, \"intermediate cert\":%{public, location:escape_only}s}", buf, 0x28u);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p[0]);
    }
  }
  __int16 v42 = *(std::string **)(a1 + 608);
  if (v42) {
    sub_1013A5F78(v42, a2, (const std::string *)&qword_10248D318);
  }
  id v26 = 0;
LABEL_74:
  sub_100ABB83C((uint64_t)v50);
  return v26;
}

void sub_1013AB844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100ABB83C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

id sub_1013AB8BC(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3 || !*(void *)(a1 + 384))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,ADR dict or key is nil", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v11 = *(std::string **)(a1 + 608);
    if (!v11) {
      return 0;
    }
    id v12 = (const std::string *)byte_10248D378;
    goto LABEL_21;
  }
  id v5 = sub_100AABDF0(a3);
  if (!v5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,failed to serialize pre-cached ADR dict into JSON", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v11 = *(std::string **)(a1 + 608);
    if (!v11) {
      return 0;
    }
    id v12 = (const std::string *)&qword_10248D348;
    goto LABEL_21;
  }
  id v6 = sub_100FEE928(v5, *(void **)(a1 + 384));
  if (!v6)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v15 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,failed to encrypt pre-cached ADR", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v11 = *(std::string **)(a1 + 608);
    if (!v11) {
      return 0;
    }
    id v12 = (const std::string *)&qword_10248D360;
LABEL_21:
    sub_1013A5F78(v11, a2, v12);
    return 0;
  }
  id v7 = v6;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ADR,createEncryptedPreCachedAdr,inst,%{public}d,successfully encrypted pre-cached ADR", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyADR::createEncryptedPreCachedAdr(SimInstance, NSDictionary *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v7;
}

id sub_1013ABEAC(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v6 = sub_100A96A4C(a1 + 168, a2);
    if (*(char *)(v6 + 159) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v6 + 136), *(void *)(v6 + 144));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 136);
      uint64_t v23 = *(void *)(v6 + 152);
    }
    uint64_t v10 = (void *)HIBYTE(v23);
    if (v23 < 0) {
      uint64_t v10 = __p[1];
    }
    if (v10)
    {
      id v11 = objc_alloc_init((Class)NSMutableDictionary);
      if (v23 >= 0) {
        id v12 = __p;
      }
      else {
        id v12 = (void **)__p[0];
      }
      [v11 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12) forKey:@"call_ID"];
      [v11 setValue:@"Cache" forKey:@"mode"];
      [v11 setValue:[objc_msgSend(objc_msgSend(a3, "subdataWithRange:", 0, 16), "base64EncodedStringWithOptions:", 0) forKey:@"IV"];
      [v11 setValue:[objc_msgSend(objc_msgSend(a3, "subdataWithRange:", 16, (char *)objc_msgSend(a3, "length") - 32), "base64EncodedStringWithOptions:", 0) forKey:@"encrypted_data"];
      [v11 setValue:[objc_msgSend(objc_msgSend(a3, "subdataWithRange:", (char *)objc_msgSend(a3, "length") - 16, 16), "base64EncodedStringWithOptions:", 0) forKey:@"auth_tag"];
      id v13 = sub_1013ACAE0(a1, a2);
      if (v13)
      {
        [v11 setValue:v13 forKey:@"internal"];
      }
      id v9 = sub_100AABDF0((uint64_t)v11);
      if (v9) {
        goto LABEL_37;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v25 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,failed to serialize LIS dict into JSON", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        id v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyADR::getPreCachedAdrMessageBody(SimInstance, NSData *)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      id v15 = *(std::string **)(a1 + 608);
      if (v15) {
        sub_1013A5F78(v15, a2, (const std::string *)&qword_10248D348);
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v25 = a2;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,native number not available", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyADR::getPreCachedAdrMessageBody(SimInstance, NSData *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      id v17 = *(std::string **)(a1 + 608);
      if (v17) {
        sub_1013A5F78(v17, a2, (const std::string *)&qword_10248D330);
      }
    }
    id v9 = 0;
LABEL_37:
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return v9;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ADR,getPreCachedAdrMessageBody,inst,%{public}d,encrypted pre-cached ADR is nil", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = a2;
    id v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyADR::getPreCachedAdrMessageBody(SimInstance, NSData *)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  id v8 = *(std::string **)(a1 + 608);
  if (v8) {
    sub_1013A5F78(v8, a2, (const std::string *)byte_10248D378);
  }
  return 0;
}

void sub_1013AC4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013AC524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(id **)(a1 + 32);
  id v8 = [[objc_msgSend(*v7, "silo") queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1013AC5C8;
  void v9[3] = &unk_1023190F0;
  v9[5] = a4;
  void v9[6] = v7;
  _OWORD v9[7] = *(void *)(a1 + 40);
  int v9[4] = a3;
  dispatch_async(v8, v9);
}

void sub_1013AC5C8(uint64_t a1)
{
}

void sub_1013AC5DC(uint64_t a1, int a2, int a3, void *a4, void *a5)
{
  int v31 = a2;
  uint64_t v9 = a1 + 448;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  int v10 = *((_DWORD *)sub_1000F3C48(a1 + 448, &v31, (uint64_t)&unk_101D0B290, &buf) + 5);
  if (v10 == a3)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    *((_DWORD *)sub_1000F3C48(v9, &v31, (uint64_t)&unk_101D0B290, &buf) + 5) = 0;
  }
  if (!a4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = v31;
      unsigned int v20 = [a5 code];
      id v21 = [[objc_msgSend(a5, "domain") UTF8String];
      id v22 = [[objc_msgSend(a5, "localizedDescription") UTF8String];
      buf.__r_.__value_.__r.__words[0] = 68290306;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v19;
      __int16 v33 = 1026;
      int v34 = a3;
      __int16 v35 = 1026;
      *(_DWORD *)__int16 v36 = v20;
      *(_WORD *)&v36[4] = 2082;
      *(void *)&v36[6] = v21;
      *(_WORD *)&v36[14] = 2082;
      *(void *)&v36[16] = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,failed to send\", \"sim\":%{public}d, \"message\":%{public}d, \"error code\":%{public}d, \"error domain\":%{public, location:escape_only}s, \"error description\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x38u);
    }
    if (v10 != a3) {
      return;
    }
    *(unsigned char *)(a1 + 488) = 1;
    uint64_t v23 = *(std::string **)(a1 + 608);
    if (v23)
    {
      int v24 = v31;
      sub_1013A4240(a5, &buf);
      sub_1013A5F78(v23, v24, &buf);
      goto LABEL_30;
    }
LABEL_32:
    sub_10139B7D8(a1 + 8, 8);
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = v31;
    id v12 = [[objc_msgSend(a4, "valueForHTTPHeaderField:", @"X-Responding-Instance") UTF8String];
    id v13 = [[objc_msgSend(a4, "valueForHTTPHeaderField:", @"X-Apple-Request-UUID") UTF8String];
    id v14 = [[objc_msgSend(a4, "valueForHTTPHeaderField:", @"X-Apple-Jingle-Correlation-Key") UTF8String];
    id v15 = [[objc_msgSend(a4, "valueForHTTPHeaderField:", @"Via") UTF8String];
    buf.__r_.__value_.__r.__words[0] = 68290563;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v30;
    __int16 v33 = 1026;
    int v34 = a3;
    __int16 v35 = 2081;
    *(void *)__int16 v36 = v12;
    *(_WORD *)&v36[8] = 2081;
    *(void *)&unsigned char v36[10] = v13;
    *(_WORD *)&v36[18] = 2081;
    *(void *)&v36[20] = v14;
    __int16 v37 = 2081;
    id v38 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,response headers\", \"sim\":%{public}d, \"message\":%{public}d, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x46u);
  }
  if ([a4 statusCode] != (id)200)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v25 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = v31;
      unsigned int v27 = [a4 statusCode];
      buf.__r_.__value_.__r.__words[0] = 68289794;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v26;
      __int16 v33 = 1026;
      int v34 = a3;
      __int16 v35 = 1026;
      *(_DWORD *)__int16 v36 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,failure response\", \"sim\":%{public}d, \"message\":%{public}d, \"response code\":%{public}d}", (uint8_t *)&buf, 0x24u);
    }
    if (v10 != a3) {
      return;
    }
    *(unsigned char *)(a1 + 488) = 1;
    id v28 = *(std::string **)(a1 + 608);
    if (v28)
    {
      int v29 = v31;
      sub_1013A45E8(a4, &buf);
      sub_1013A5F78(v28, v29, &buf);
LABEL_30:
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  id v16 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289538;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v31;
    __int16 v33 = 1026;
    int v34 = a3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,handlePreCachedAdrResponse,successfully sent\", \"sim\":%{public}d, \"message\":%{public}d}", (uint8_t *)&buf, 0x1Eu);
  }
  if (v10 == a3)
  {
    id v17 = *(std::string **)(a1 + 608);
    if (v17) {
      sub_1013A5F78(v17, v31, (const std::string *)&qword_10248D2D0);
    }
    goto LABEL_32;
  }
}

void sub_1013ACAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1013ACAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100A96A4C(a1 + 168, a2);
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  [v5 setValue:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2)] forKey:@"sim"];
  uint64_t v6 = *(void *)(a1 + 160);
  if (!v6) {
    sub_10015E48C();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  sub_100134750(__p, "carrier");
  id v8 = sub_100A80F3C(v7, a2, (uint64_t *)__p);
  if (*((char *)v8 + 55) < 0) {
    sub_1000DC48C(&__dst, (void *)v8[4], v8[5]);
  }
  else {
    std::string __dst = *(std::string *)(v8 + 4);
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    char v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v10 >= 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  [v5 setValue:[NSString stringWithUTF8String:p_dst] forKey:@"sim_bundle_id"];
  uint64_t v12 = *(void *)(a1 + 160);
  if (!v12) {
    sub_10015E48C();
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
  sub_100134750(v30, "operator");
  id v14 = sub_100A80F3C(v13, a2, (uint64_t *)v30);
  if (*((char *)v14 + 55) < 0) {
    sub_1000DC48C(&v32, (void *)v14[4], v14[5]);
  }
  else {
    std::string v32 = *(std::string *)(v14 + 4);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  std::string::size_type v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  char v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = v32.__r_.__value_.__l.__size_;
  }
  if (!v15)
  {
    std::string::assign(&v32, "Unavailable");
    char v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  if (v16 >= 0) {
    id v17 = &v32;
  }
  else {
    id v17 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  [v5 setValue:[NSString stringWithUTF8String:v17] forKey:@"operator_bundle_id"];
  id v18 = sub_101021560(*(unsigned int *)(v4 + 32));
  [v5 setValue:v18 forKey:@"sim_country"];
  int v19 = sub_101021560(*(unsigned int *)(v4 + 8));
  [v5 setValue:v19 forKey:@"operator_country"];
  sub_100103240();
  uint64_t v20 = sub_10073B56C();
  [v5 setValue:[NSNumber numberWithInt:v20] forKey:@"release_type"];
  sub_100103240();
  sub_10073BD08((uint64_t)buf);
  if (v40 >= 0) {
    id v21 = buf;
  }
  else {
    id v21 = *(uint8_t **)buf;
  }
  id v22 = +[NSString stringWithUTF8String:v21];
  if (SHIBYTE(v40) < 0) {
    operator delete(*(void **)buf);
  }
  [v5 setValue:v22 forKey:@"product_type"];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v23 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &__dst;
    }
    else {
      int v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    int v25 = [(NSString *)v18 UTF8String];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v26 = &v32;
    }
    else {
      int v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    unsigned int v27 = [(NSString *)v19 UTF8String];
    id v28 = [(NSString *)v22 UTF8String];
    *(_DWORD *)std::string buf = 68290819;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v37 = 2082;
    id v38 = "";
    __int16 v39 = 1026;
    int v40 = a2;
    __int16 v41 = 2082;
    __int16 v42 = v24;
    __int16 v43 = 2082;
    std::string::size_type v44 = v25;
    __int16 v45 = 2082;
    long long v46 = v26;
    __int16 v47 = 2082;
    std::string v48 = v27;
    __int16 v49 = 1026;
    int v50 = v20;
    __int16 v51 = 2081;
    int v52 = v28;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ADR,createPreCachedAdrInternalDict\", \"sim\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"release_type\":%{public}d, \"product_type\":%{private, location:escape_only}s}", buf, 0x50u);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1013ACF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013AD00C(uint64_t a1, int a2)
{
  v32[0] = a2;
  *(void *)std::string buf = v32;
  uint64_t v3 = sub_100981438(a1 + 560, v32, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  if (*((char *)v3 + 47) < 0)
  {
    sub_1000DC48C(__dst, (void *)v3[3], v3[4]);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(v3 + 3);
    uint64_t v31 = v3[5];
  }
  uint64_t v4 = (void *)HIBYTE(v31);
  if (v31 < 0) {
    uint64_t v4 = __dst[1];
  }
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v32[0];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ADR,clearPreCachedAdr,inst,%{public}d,no pre-cached ADR data for this inst", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = v32[0];
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::clearPreCachedAdr(SimInstance)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    uint64_t v13 = *(std::string **)(a1 + 608);
    if (v13) {
      sub_1013A5F78(v13, v32[0], (const std::string *)&qword_10248D330);
    }
    goto LABEL_30;
  }
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  if (v31 >= 0) {
    uint64_t v6 = __dst;
  }
  else {
    uint64_t v6 = (void **)__dst[0];
  }
  [v5 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6) forKey:@"call_ID"];
  [v5 setValue:@"Erase" forKey:@"mode"];
  id v7 = sub_1013ACAE0(a1, v32[0]);
  if (v7)
  {
    [v5 setValue:v7 forKey:@"internal"];
  }
  id v8 = sub_100AABDF0((uint64_t)v5);
  if (!v8)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v32[0];
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ADR,clearPreCachedAdr,inst,%{public}d,failed to serialize LIS dict into JSON", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = v32[0];
      int v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyADR::clearPreCachedAdr(SimInstance)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    std::string::size_type v15 = *(std::string **)(a1 + 608);
    if (v15) {
      sub_1013A5F78(v15, v32[0], (const std::string *)&qword_10248D348);
    }
LABEL_30:
    uint64_t v16 = 0;
    goto LABEL_46;
  }
  uint64_t v9 = *(void *)(a1 + 160);
  if (!v9) {
    sub_10015E48C();
  }
  char v10 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  id v11 = sub_100A81680(v10);
  if (*((char *)v11 + 455) < 0)
  {
    sub_1000DC48C(__p, (void *)v11[54], v11[55]);
  }
  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)v11 + 27);
    uint64_t v36 = v11[56];
  }
  if (v36 >= 0) {
    id v17 = __p;
  }
  else {
    id v17 = (void **)__p[0];
  }
  int v29 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v17]));
  [(NSMutableURLRequest *)v29 setHTTPMethod:@"POST"];
  sub_10110D594(a1 + 200, (uint64_t)v8, (uint64_t)&v29);
  int v18 = *(_DWORD *)(a1 + 440);
  if (v18 >= 0) {
    int v19 = v18 + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(a1 + 440) = v19;
  *(void *)std::string buf = v32;
  *((_DWORD *)sub_1000F3C48(a1 + 448, v32, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = v19;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  uint64_t v20 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v32[0];
    __int16 v38 = 1026;
    int v39 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ADR,clearPreCachedAdr,inst,%{public}d,sending as message %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    v32[1] = 67240448;
    _OWORD v32[2] = v32[0];
    __int16 v33 = 1026;
    int v34 = v19;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyADR::clearPreCachedAdr(SimInstance)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  id v21 = *(void **)(a1 + 232);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_1013AD7BC;
  v26[3] = &unk_102322BB0;
  _DWORD v26[4] = a1;
  int v27 = v32[0];
  int v28 = v19;
  [objc_msgSend(v21, "uploadTaskWithRequest:fromData:completionHandler:", v29, v8, v26) resume];
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = 1;
LABEL_46:
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  return v16;
}

void sub_1013AD758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013AD7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(id **)(a1 + 32);
  id v8 = [objc_msgSend(*v7, "silo") queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1013AD860;
  void v9[3] = &unk_1023190F0;
  v9[5] = a4;
  void v9[6] = v7;
  _OWORD v9[7] = *(void *)(a1 + 40);
  int v9[4] = a3;
  dispatch_async(v8, v9);
}

void sub_1013AD860(uint64_t a1)
{
}

void sub_1013AD874(id *a1, void *a2, int a3)
{
  if ([a2 phoneNumber] && objc_msgSend(a2, "name"))
  {
    [a2 phoneNumber];
    uint64_t v6 = PNCopyBestGuessCountryCodeForNumber();
    if (v6)
    {
      id v7 = (id)v6;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      id v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v17 = 2082;
        int v18 = "";
        __int16 v19 = 1026;
        int v20 = a3;
        __int16 v21 = 2081;
        id v22 = [v7 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,getFormattedEmergencyContacts,got country code from contact number\", \"ind\":%{public}d, \"country code\":%{private, location:escape_only}s}", buf, 0x22u);
      }
      id v9 = v7;
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      char v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        id v11 = [a1[4] UTF8String];
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v17 = 2082;
        int v18 = "";
        __int16 v19 = 1026;
        int v20 = a3;
        __int16 v21 = 2082;
        id v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ADR,getFormattedEmergencyContacts,used assumed country code\", \"ind\":%{public}d, \"country code\":%{public, location:escape_only}s}", buf, 0x22u);
      }
      id v7 = a1[4];
    }
    sub_100134750(buf, (char *)[objc_msgSend(objc_msgSend(a2, "phoneNumber"), "UTF8String")]);
    id v12 = sub_10147D04C((uint64_t *)buf, (uint64_t)v7);
    uint64_t v13 = v12;
    if (SHIBYTE(v20) < 0)
    {
      operator delete(*(void **)buf);
      if (v13) {
        goto LABEL_16;
      }
    }
    else if (v12)
    {
LABEL_16:
      [a1[5] addObject:sub_101479144(v13, 0x7D0u)];
      [a1[6] addObject:[a2 name]];
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ADR,getFormattedEmergencyContacts,failed to format emergency contact number,ind,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      std::string::size_type v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::getFormattedEmergencyContacts(NSString **, NSArray<NSString *> **, NSArray<NSString *> **)_block_invoke", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

void sub_1013ADC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013ADC40(char *__dst, uint64_t a2)
{
  if (byte_10248D41F < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_10248D408, *((unint64_t *)&xmmword_10248D408 + 1));
  }
  else
  {
    long long v4 = xmmword_10248D408;
    *((void *)__dst + 2) = unk_10248D418;
    *(_OWORD *)std::string __dst = v4;
  }
  id v5 = __dst + 24;
  if (byte_10248D41F < 0)
  {
    sub_1000DC48C(v5, (void *)xmmword_10248D408, *((unint64_t *)&xmmword_10248D408 + 1));
  }
  else
  {
    *(_OWORD *)id v5 = xmmword_10248D408;
    *((void *)__dst + 5) = unk_10248D418;
  }
  uint64_t v6 = __dst;
  *((_OWORD *)__dst + 9) = 0u;
  id v7 = __dst + 144;
  *((void *)v7 - 2) = 0;
  *((_OWORD *)v7 - 3) = 0u;
  *((_OWORD *)v7 - 2) = 0u;
  *((_OWORD *)v7 - 5) = 0u;
  *((_OWORD *)v7 - 4) = 0u;
  *((_OWORD *)v7 - 6) = 0u;
  *((_DWORD *)v7 - 2) = 1065353216;
  *((_OWORD *)v7 + 1) = 0u;
  *((_DWORD *)v7 + 8) = 1065353216;
  uint64_t v36 = (uint64_t)v6;
  if (a2)
  {
    *((void *)v6 + 8) = a2;
    id v8 = *(void **)(a2 + 280);
    if (v8 && [v8 emergencyContacts])
    {
      *(_DWORD *)(v36 + 48) = [objc_msgSend(*(id *)(*(void *)(v36 + 64) + 280), "emergencyContacts") count];
      __int16 v42 = 0;
      uint64_t v43 = 0;
      uint64_t v41 = 0;
      sub_1013AA2B0(*(void *)(v36 + 64), &v43, &v42, &v41);
      id v9 = v42;
      if (v42)
      {
        id v10 = objc_alloc_init((Class)NSMutableArray);
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        id v11 = (char *)[v9 countByEnumeratingWithState:&v37 objects:v44 count:16];
        if (v11)
        {
          uint64_t v12 = *(void *)v38;
          do
          {
            for (uint64_t i = 0; i != v11; ++i)
            {
              if (*(void *)v38 != v12) {
                objc_enumerationMutation(v9);
              }
              id v14 = (void *)IDSCopyIDForPhoneNumber();
              if (v14)
              {
                [v10 addObject:v14];
                sub_100134750(__p, (char *)[v14 UTF8String]);
                v47[0] = (long long *)__p;
                *((_DWORD *)sub_1013AFB7C((uint64_t)(v7 - 40), (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, v47) + 10) = 0;
                if (v46 < 0) {
                  operator delete(__p[0]);
                }
                sub_100134750(__p, (char *)[v14 UTF8String]);
                v47[0] = (long long *)__p;
                *((_DWORD *)sub_1013AFB7C((uint64_t)v7, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, v47) + 10) = 0;
                if (v46 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
            id v11 = (char *)[v9 countByEnumeratingWithState:&v37 objects:v44 count:16];
          }
          while (v11);
        }
        *(_DWORD *)(v36 + 60) = [v10 count];
        if ([v10 count])
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          std::string::size_type v15 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            int v16 = *(_DWORD *)(v36 + 60);
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,Initiating IDS Query for %{public}u contacts", (uint8_t *)__p, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            int v32 = *(_DWORD *)(v36 + 60);
            LODWORD(v47[0]) = 67240192;
            HIDWORD(v47[0]) = v32;
            __int16 v33 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v33);
            if (v33 != (char *)__p) {
              free(v33);
            }
          }
          *(void *)(v36 + 80) = [[CLEmergencyADRIDSBatchQueryDelegate alloc] initWithADRPointer:*(void *)(v36 + 64)];
          id v17 = objc_alloc((Class)IDSBatchIDQueryController);
          uint64_t v18 = *(void *)(v36 + 80);
          id v19 = [[[*(id **)(v36 + 64)] silo] queue];
          id v20 = [v17 initWithService:IDSServiceNameiMessage delegate:v18 queue:v19];
          *(void *)(v36 + 88) = v20;
          [v20 setDestinations:v10];
          id v21 = objc_alloc((Class)IDSBatchIDQueryController);
          uint64_t v22 = *(void *)(v36 + 80);
          id v23 = [[[*(id **)(v36 + 64)][@"silo"] queue];
          id v24 = [v21 initWithService:IDSServiceNameFaceTime delegate:v22 queue:v23];
          *(void *)(v36 + 96) = v24;
          [v24 setDestinations:v10];
          sub_1013AEAD0(v36);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          int v29 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,vaild IDS Formatted emergency contacts unavailable", (uint8_t *)__p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102322BF8);
            }
            LOWORD(v47[0]) = 0;
            __int16 v35 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v35);
            if (v35 != (char *)__p) {
              free(v35);
            }
          }
          sub_1013AE6A0(v36);
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        int v28 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,vaild emergency contacts unavailable", (uint8_t *)__p, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102322BF8);
          }
          LOWORD(v47[0]) = 0;
          int v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v34);
          if (v34 != (char *)__p) {
            free(v34);
          }
        }
        sub_1013AE6A0(v36);
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      int v25 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ADR,EmergencyContactsMetric,medicalID unavailable or emergency contacts within medicalID unavailable", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102322BF8);
        }
        LOWORD(v47[0]) = 0;
        int v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v30);
        if (v30 != (char *)__p) {
          free(v30);
        }
      }
      *(_DWORD *)(v36 + 48) = 0;
      sub_1013AE6A0(v36);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    int v26 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#ADR,EmergencyContactsMetric,ADR pointer is null", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v47[0]) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyADR::EmergencyContactsMetric::EmergencyContactsMetric(CLEmergencyADR *)", "%s\n", v31);
      if (v31 != (char *)__p) {
        free(v31);
      }
    }
  }
  return v36;
}

void sub_1013AE604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  sub_1002220F0(v46);
  sub_1002220F0(v47);
  if (*(char *)(a12 + 47) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(a12 + 23) < 0) {
    operator delete(*(void **)a12);
  }
  _Unwind_Resume(a1);
}

void sub_1013AE6A0(uint64_t a1)
{
  sub_1013AEEFC(a1);
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  int v2 = *(uint64_t **)(a1 + 120);
  if (v2)
  {
    while (1)
    {
      if (*((char *)v2 + 39) < 0)
      {
        sub_1000DC48C(__p, (void *)v2[2], v2[3]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v2 + 1);
        uint64_t v17 = v2[4];
      }
      if (*((_DWORD *)v2 + 10) == 1) {
        break;
      }
      std::string::size_type v15 = __p;
      if (*((_DWORD *)sub_100F89F14(a1 + 144, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v15) + 10) == 1) {
        goto LABEL_8;
      }
LABEL_9:
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[0]);
      }
      int v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_12;
      }
    }
    ++*(_DWORD *)(a1 + 52);
LABEL_8:
    ++*(_DWORD *)(a1 + 56);
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = sub_100A96A4C(v3 + 168, 0);
    id v5 = [(NSString *)sub_101021560(*(unsigned int *)(v4 + 32)) UTF8String];
    std::string::assign((std::string *)a1, v5);
    if (sub_1000FFBA8())
    {
      uint64_t v6 = sub_100A96A4C(*(void *)(a1 + 64) + 168, 1);
      id v7 = [(NSString *)sub_101021560(*(unsigned int *)(v6 + 32)) UTF8String];
      std::string::assign((std::string *)(a1 + 24), v7);
    }
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v9 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v9 = *(void *)a1;
    }
    [v8 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) forKey:@"simCountry1"];
    id v10 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      id v10 = (void *)*v10;
    }
    [v8 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10) forKey:@"simCountry2"];
    [v8 setValue:[NSNumber numberWithUnsignedInt:*((unsigned int *)(a1 + 48))] forKey:@"numContacts"];
    [v8 setValue:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)] forKey:@"numValidContacts"];
    [v8 setValue:[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)] forKey:@"numiMessageContacts"];
    [v8 setValue:[NSNumber numberWithUnsignedInt:*((unsigned int *)(a1 + 56))] forKey:@"numAppleContacts"];
    AnalyticsSendEvent();

    id v11 = [[[*(id **)(a1 + 64)][@"silo"] queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1013AF404;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_async(v11, block);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ADR,submitIDSQueryCAStats,adr pointer is nil", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v15) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::submitIDSQueryCAStats()", "%s\n", v13);
      if (v13 != (char *)__p) {
        free(v13);
      }
    }
  }
}

void sub_1013AEAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013AEAD0(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v1 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#ADR,createIDSQueryTimeout,timer already exists", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LOWORD(v8[0]) = 0;
      int v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::createIDSQueryTimeout()", "%s\n", v2);
LABEL_24:
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  else
  {
    id v4 = [[[*(id **)(a1 + 64) silo] newTimer];
    *(void *)(a1 + 72) = v4;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1013AF174;
    v7[3] = &unk_1022A3020;
    v7[4] = a1;
    [v4 setHandler:v7];
    sub_1000C7F88(buf);
    v8[0] = 0.0;
    if (sub_1000A699C(*(uint64_t *)&buf[0], "IDSQueryTimeout", v8)) {
      double v5 = v8[0];
    }
    else {
      double v5 = 300.0;
    }
    if (*((void *)&buf[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    }
    [*(id *)(a1 + 72) setNextFireDelay:v5];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ADR,createIDSQueryTimeout,started timer for %{public}f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102322BF8);
      }
      LODWORD(v8[0]) = 134349056;
      *(double *)((char *)v8 + 4) = v5;
      int v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::createIDSQueryTimeout()", "%s\n", v2);
      goto LABEL_24;
    }
  }
}

void sub_1013AEE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013AEE78(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;

  *(void *)(a1 + 80) = 0;
  sub_1013AEEFC(a1);
  sub_1002220F0(a1 + 144);
  sub_1002220F0(a1 + 104);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1013AEEFC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 72) = 0;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ADR,clearIDSQueryTimeout,timer cleared", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_16:
        double v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyADR::EmergencyContactsMetric::clearIDSQueryTimeout()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    id v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ADR,clearIDSQueryTimeout,no timer exists", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

void sub_1013AF174(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102322BF8);
  }
  int v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ADR,createIDSQueryTimeout,IDS query timer timed out", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102322BF8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyADR::EmergencyContactsMetric::createIDSQueryTimeout()_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1013AEEFC(v1);
  sub_1013AE6A0(v1);
}

uint64_t sub_1013AF318(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 120);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = a1 + 144;
  while (1)
  {
    if (*((char *)v1 + 39) < 0)
    {
      sub_1000DC48C(__p, (void *)v1[2], v1[3]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v1 + 1);
      uint64_t v5 = v1[4];
    }
    if (!*((_DWORD *)v1 + 10)) {
      break;
    }
    uint64_t v6 = __p;
    if (!*((_DWORD *)sub_100F89F14(v2, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v6) + 10)) {
      break;
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return 1;
    }
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1013AF3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013AF404(uint64_t a1)
{
  return sub_10139B5C8(*(void *)(*(void *)(a1 + 32) + 64));
}

void sub_1013AF410(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1013AF444(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013AF480(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1013AF4C4(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_101AB2D88();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    id v8 = &v11;
  }
  else {
    id v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_1013AF638(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_1013AF67C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1013AF6AC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1013AF71C(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1013AF71C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1013A7CAC(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1013AF79C(uint64_t a1)
{
  return sub_10139B7D8(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1013AF7AC(uint64_t a1)
{
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  if (*(char *)(a1 + 503) < 0) {
    operator delete(*(void **)(a1 + 480));
  }
  if (*(char *)(a1 + 471) < 0) {
    operator delete(*(void **)(a1 + 448));
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1013AF920(void *a1, uint64_t *a2, uint64_t *a3)
{
  id v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    BOOL v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      id v10 = v8;
    }
    else
    {
      do
      {
        *((_DWORD *)v8 + 4) = *((_DWORD *)v4 + 4);
        std::string::operator=((std::string *)v8 + 1, (const std::string *)v4 + 1);
        id v10 = (void **)*v8;
        unint64_t v11 = *((int *)v8 + 4);
        v8[1] = (void *)v11;
        uint64_t v12 = (void *)sub_100324B5C((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        sub_1000D8A74(a1, v8, v12);
        id v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        BOOL v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1000DB150((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1013AFA40(a1, (int *)v4 + 4);
    id v4 = (uint64_t *)*v4;
  }
}

void sub_1013AFA10(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1000DB150(v1, v2);
  __cxa_rethrow();
}

void sub_1013AFA2C(_Unwind_Exception *a1)
{
}

void *sub_1013AFA40(void *a1, int *a2)
{
  sub_1013AFAC0((uint64_t)a1, a2, (uint64_t)v8);
  uint64_t v3 = (void *)v8[0];
  uint64_t v5 = (_DWORD *)(v8[0] + 16);
  unint64_t v4 = *(int *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  uint64_t v6 = (void *)sub_100324B5C((uint64_t)a1, v4, v5);
  sub_1000D8A74(a1, v3, v6);
  return v3;
}

void sub_1013AFA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10050E97C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1013AFAC0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  int v7 = *a2;
  *((_DWORD *)v6 + 4) = *a2;
  uint64_t result = v6 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *((void **)a2 + 1), *((void *)a2 + 2));
    int v7 = *((_DWORD *)v6 + 4);
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 2);
    *((void *)v6 + 5) = *((void *)a2 + 3);
  }
  *(unsigned char *)(a3 + 16) = 1;
  *((void *)v6 + 1) = v7;
  return result;
}

void sub_1013AFB60(_Unwind_Exception *a1)
{
  *int v1 = 0;
  sub_10050E97C(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1013AFB7C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  BOOL v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    id v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((_DWORD *)i + 10) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100100330(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  int v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    void *v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    int v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1013AFDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10022251C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1013AFE08()
{
  sub_100134750(&qword_10248D2D0, "Success");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248D2D0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248D2E8, "NotSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248D2E8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248D300, "FailedToCreateCloakingKey");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248D300, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248D318, "NoPartnerCerts");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248D318, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248D330, "NoPhoneNumber");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248D330, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248D348, "FailedToSerialize");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248D348, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248D360, "FailedToEncrypt");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248D360, (void *)&_mh_execute_header);
  sub_100134750(byte_10248D378, "FailedInputValidation");
  __cxa_atexit((void (*)(void *))&std::string::~string, byte_10248D378, (void *)&_mh_execute_header);
  sub_100134750(&stru_10248D390, "Timeout");
  __cxa_atexit((void (*)(void *))&std::string::~string, &stru_10248D390, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248D3A8, "Failed");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248D3A8, (void *)&_mh_execute_header);
  sub_100134750(&stru_10248D3C0, "Available");
  __cxa_atexit((void (*)(void *))&std::string::~string, &stru_10248D3C0, (void *)&_mh_execute_header);
  sub_100134750(&stru_10248D3D8, "Unavailable");
  __cxa_atexit((void (*)(void *))&std::string::~string, &stru_10248D3D8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248D3F0, "NotSet");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248D3F0, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487610, "PreCachedAdrInfo");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487610, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487628, "TimeOfLastClearFailure");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487628, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487640, "PreCachedAdrClearFailureCount");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487640, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487658, "TimeOfLastCacheFailure");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487658, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487670, "PreCachedAdrSendFailureCount");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487670, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487688, "TimeOfLastCacheSuccess");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487688, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024876A0, "CloakingKey");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024876A0, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024876B8, "MedicalIdHash");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024876B8, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024876D0, "Sim1PhoneNumber");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024876D0, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024876E8, "Sim2PhoneNumber");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024876E8, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487700, "EmergencyContactNames");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487700, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248D408, "NotSet");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248D408, (void *)&_mh_execute_header);
}

uint64_t sub_1013B0238(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v27 = *a4;
  unint64_t v28 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v25 = *a5;
  uint64_t v26 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint8x8_t v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v23 = *a6;
  unint64_t v24 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v22[0] = xmmword_102487720;
  v22[1] = *(_OWORD *)algn_102487730;
  void v22[2] = xmmword_102487740;
  sub_100D6AEB4(a1, a2, 5, &v27, &v25, &v23, a8, a7, v22);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
  if (v28) {
    sub_1000DB0A0(v28);
  }
  *(void *)a1 = off_102322D68;
  id v13 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 352) = v13;
  *(void *)(a1 + 360) = v14;
  *(void *)(a1 + 368) = v15;
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    uint64_t v14 = *(void *)(a1 + 360);
  }
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 150;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0xFFFF;
  *(void *)(a1 + 420) = 0;
  *(void *)(a1 + 412) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 428) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 444) = _Q1;
  *(_OWORD *)(a1 + 460) = _Q1;
  *(_OWORD *)(a1 + 476) = _Q1;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 524) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 532) = 0x7FFFFFFF;
  *(void *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 568) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, a1 + 392) & 1) == 0) {
    *(_DWORD *)(a1 + 392) = 150;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 24))(*(void *)(a1 + 360), a1);
  *(void *)(a1 + 376) = [*(id *)(a1 + 72) classifyingStoreForHarvester:5];
  return a1;
}

void sub_1013B044C(_Unwind_Exception *a1)
{
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

void sub_1013B04A4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 400);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 400) = 0;
  }
  (*(void (**)(void))(**(void **)(a1 + 360) + 32))(*(void *)(a1 + 360));

  uint64_t v3 = *(void **)(a1 + 384);
}

uint64_t sub_1013B0518(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  unint64_t v4 = (_OWORD *)(a1 + 280);
  long long v5 = *(_OWORD *)algn_102487730;
  *unint64_t v4 = xmmword_102487720;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)&algn_102487730[9];
  if (sub_100012960(a2, "App", v11)) {
    sub_1012B77D8((uint64_t)v4, (uint64_t)v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B7520();
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = 5;
    __int16 v18 = 2081;
    long long v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_1013B06A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013B06C0(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 56) + 200))(*(void *)(a1 + 56)) ^ 1;
}

uint64_t sub_1013B0700(uint64_t a1)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 40))(*(void *)(a1 + 360), 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 40))(*(void *)(a1 + 360), 9);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 1);
  return 1;
}

id sub_1013B07B8(uint64_t a1)
{
  uint64_t v2 = a1 + 428;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 48))(*(void *)(a1 + 360), 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 48))(*(void *)(a1 + 360), 9);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, v4, 1);
  *(_DWORD *)(a1 + 408) = 0xFFFF;
  *(void *)(a1 + 420) = 0;
  *(void *)(a1 + 412) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)uint64_t v2 = xmmword_101D1C320;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + 32) = _Q1;
  *(_OWORD *)(v2 + 48) = _Q1;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 532) = 0x7FFFFFFF;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  char v10 = *(void **)(a1 + 352);

  return [v10 removeAllObjects];
}

BOOL sub_1013B08E4(uint64_t a1, uint64_t a2)
{
  double v3 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  if (*(double *)(a2 + 20) >= 0.0 && v3 - *(double *)(a2 + 76) <= 900.0 && *(_DWORD *)(a2 + 132) == 1) {
    return 1;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  long long v5 = qword_102419568;
  BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO);
  if (result)
  {
    double v7 = v3 - *(double *)(a2 + 76);
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    char v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = 5;
    __int16 v13 = 2049;
    double v14 = v7;
    __int16 v15 = 1040;
    int v16 = 4;
    __int16 v17 = 2097;
    uint64_t v18 = a2 + 132;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid/stale location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"age_s\":\"%{private}.09f\", \"referenceFrame\":%{private, location:CLClientLocationReferenceFrame}.*P}", (uint8_t *)v8, 0x36u);
    return 0;
  }
  return result;
}

void sub_1013B0A70(uint64_t a1)
{
  if ([*(id *)(a1 + 352) count])
  {
    if (*(void *)(a1 + 400))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102322EA0);
      }
      uint64_t v2 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(void *)std::string buf = 68289282;
        *(_WORD *)double v14 = 2082;
        *(void *)&int v14[2] = "";
        *(_WORD *)&v14[10] = 2050;
        *(void *)&v14[12] = 5;
        double v3 = "{\"msg%{public}.0s\":\"Already have an appHarvestGroup, not harvesting\", \"subHarvester\":%{public, locati"
             "on:CLSubHarvesterIdentifier}lld}";
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, v3, buf, 0x1Cu);
      }
    }
    else if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)))
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1))
      {
        if (sub_1013B08E4(a1, a1 + 408))
        {
          if ((*(uint64_t (**)(void))(**(void **)(a1 + 360) + 64))(*(void *)(a1 + 360)))
          {
            uint64_t v4 = dispatch_group_create();
            *(void *)(a1 + 400) = v4;
            *(void *)std::string buf = 0;
            *(void *)double v14 = buf;
            *(void *)&v14[8] = 0x2020000000;
            *(void *)&v14[16] = 0;
            dispatch_group_enter(v4);
            uint64_t v5 = *(void *)(a1 + 360);
            v12[0] = _NSConcreteStackBlock;
            v12[1] = 3221225472;
            v12[2] = sub_1013B10A0;
            void v12[3] = &unk_1022C9CC8;
            v12[4] = buf;
            void v12[5] = a1;
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 72))(v5, a1 + 408, v12);
            v11[0] = 0;
            v11[1] = v11;
            void v11[2] = 0x2020000000;
            v11[3] = -1;
            dispatch_group_enter(*(dispatch_group_t *)(a1 + 400));
            uint64_t v6 = *(void *)(a1 + 360);
            v10[0] = _NSConcreteStackBlock;
            v10[1] = 3221225472;
            v10[2] = sub_1013B11DC;
            v10[3] = &unk_1022C9CC8;
            void v10[4] = v11;
            void v10[5] = a1;
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 80))(v6, a1 + 408, v10);
            double v7 = *(NSObject **)(a1 + 400);
            BOOL v8 = [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1013B1324;
            block[3] = &unk_102322E68;
            block[4] = v11;
            void block[5] = buf;
            block[6] = a1;
            dispatch_group_notify(v7, v8, block);
            _Block_object_dispose(v11, 8);
            _Block_object_dispose(buf, 8);
            return;
          }
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102322EA0);
          }
          uint64_t v2 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(void *)std::string buf = 68289282;
            *(_WORD *)double v14 = 2082;
            *(void *)&int v14[2] = "";
            *(_WORD *)&v14[10] = 2050;
            *(void *)&v14[12] = 5;
            double v3 = "{\"msg%{public}.0s\":\"CLRoutineMonitor is not supported\", \"subHarvester\":%{public, location:CLSubHa"
                 "rvesterIdentifier}lld}";
            goto LABEL_32;
          }
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102322EA0);
          }
          uint64_t v2 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(void *)std::string buf = 68289282;
            *(_WORD *)double v14 = 2082;
            *(void *)&int v14[2] = "";
            *(_WORD *)&v14[10] = 2050;
            *(void *)&v14[12] = 5;
            double v3 = "{\"msg%{public}.0s\":\"leeched postion is invalid or too old, not harvesting\", \"subHarvester\":%{publ"
                 "ic, location:CLSubHarvesterIdentifier}lld}";
            goto LABEL_32;
          }
        }
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102322EA0);
        }
        uint64_t v2 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(void *)std::string buf = 68289282;
          *(_WORD *)double v14 = 2082;
          *(void *)&int v14[2] = "";
          *(_WORD *)&v14[10] = 2050;
          *(void *)&v14[12] = 5;
          double v3 = "{\"msg%{public}.0s\":\"App Genius not authorized, not harvesting\", \"subHarvester\":%{public, location:C"
               "LSubHarvesterIdentifier}lld}";
          goto LABEL_32;
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102322EA0);
      }
      uint64_t v2 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(void *)std::string buf = 68289282;
        *(_WORD *)double v14 = 2082;
        *(void *)&int v14[2] = "";
        *(_WORD *)&v14[10] = 2050;
        *(void *)&v14[12] = 5;
        double v3 = "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLS"
             "ubHarvesterIdentifier}lld}";
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102322EA0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(void *)std::string buf = 68289282;
      *(_WORD *)double v14 = 2082;
      *(void *)&int v14[2] = "";
      *(_WORD *)&v14[10] = 2050;
      *(void *)&v14[12] = 5;
      double v3 = "{\"msg%{public}.0s\":\"Cache is empty, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      goto LABEL_32;
    }
  }
}

void sub_1013B1074(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1013B10A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  uint64_t v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68290051;
    v6[1] = 0;
    __int16 v7 = 2082;
    BOOL v8 = "";
    __int16 v9 = 2050;
    uint64_t v10 = 5;
    __int16 v11 = 1040;
    int v12 = 156;
    __int16 v13 = 2097;
    uint64_t v14 = v4 + 408;
    __int16 v15 = 2049;
    uint64_t v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetchRoutineMode\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P, \"routineMode\":%{private, location:RTRoutineMode}lld}", (uint8_t *)v6, 0x36u);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(v4 + 400));
}

void sub_1013B11DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  uint64_t v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v7[0] = 68290051;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = 5;
    __int16 v12 = 1040;
    int v13 = 156;
    __int16 v14 = 2097;
    uint64_t v15 = v4 + 408;
    __int16 v16 = 2049;
    uint64_t v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetchRoutineLoiType\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P, \"loiType\":%{private, location:RTLocationOfInterestType}lld}", (uint8_t *)v7, 0x36u);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(v4 + 400));
}

void sub_1013B1324(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 352);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1013B13C4;
  uint64_t v4[3] = &unk_102322E40;
  uint64_t v6 = v1;
  long long v5 = *(_OWORD *)(a1 + 32);
  [v2 enumerateKeysAndObjectsUsingBlock:v4];
  [*(id *)(v1 + 352) removeAllObjects];
  double v3 = *(NSObject **)(v1 + 400);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(v1 + 400) = 0;
  }
}

void sub_1013B13C4(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[6];
  [a2 doubleValue];
  double v7 = v6;
  double v8 = *(double *)(v5 + 484);
  if (vabdd_f64(v7, v8) <= 900.0)
  {
    if (*(void *)(*(void *)(a1[4] + 8) + 24))
    {
      if ((*(_DWORD *)(v5 + 392) & 0x80000000) == 0)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 160))(v5) >= (unint64_t)*(int *)(v5 + 392))
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102322EA0);
          }
          uint64_t v9 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t buf = 68289282;
            __int16 v26 = 2082;
            uint64_t v27 = "";
            __int16 v28 = 2050;
            uint64_t v29 = 5;
            __int16 v10 = "{\"msg%{public}.0s\":\"max apps exceeded, skipping\", \"subHarvester\":%{public, location:CLSubHarvest"
                  "erIdentifier}lld}";
            goto LABEL_27;
          }
          return;
        }
        double v8 = *(double *)(v5 + 484);
      }
      [a3 setAge:v7 - v8];
      [a3 setRoutineMode:*(unsigned int *)(*(void *)(a1[5] + 8) + 24)];
      uint64_t v11 = *(void *)(a1[4] + 8);
      if (*(void *)(v11 + 24) == 1)
      {
        uint64_t v12 = 1;
      }
      else
      {
        *(void *)(v11 + 24) = -1;
        uint64_t v12 = *(unsigned int *)(*(void *)(a1[4] + 8) + 24);
      }
      [a3 setLoiType:v12];
      id v13 = objc_alloc((Class)CLPLocation);
      long long v14 = *(_OWORD *)(v5 + 520);
      v23[6] = *(_OWORD *)(v5 + 504);
      v23[7] = v14;
      v24[0] = *(_OWORD *)(v5 + 536);
      *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(v5 + 548);
      long long v15 = *(_OWORD *)(v5 + 456);
      v23[2] = *(_OWORD *)(v5 + 440);
      v23[3] = v15;
      long long v16 = *(_OWORD *)(v5 + 488);
      v23[4] = *(_OWORD *)(v5 + 472);
      v23[5] = v16;
      long long v17 = *(_OWORD *)(v5 + 424);
      v23[0] = *(_OWORD *)(v5 + 408);
      v23[1] = v17;
      id v18 = [v13 initWithDaemonLocation:v23];
      [a3 setLocation:v18];

      [*(id *)(v5 + 376) writeSecondaryObject:a3 collectedAt:[a3 location] toField:2];
      ++*(_DWORD *)(v5 + 208);
      sub_100D6B950(v5);
      if ([a3 appState] == 1) {
        *(double *)(v5 + 568) = (*(double (**)(void))(**(void **)(v5 + 56) + 64))(*(void *)(v5 + 56));
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102322EA0);
      }
      uint64_t v19 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289539;
        __int16 v26 = 2082;
        uint64_t v27 = "";
        __int16 v28 = 2050;
        uint64_t v29 = 5;
        __int16 v30 = 2113;
        uint64_t v31 = a3;
        __int16 v10 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld"
              ", \"harvestPoint\":%{private, location:escape_only}@}";
        float v20 = v19;
        os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
        uint32_t v22 = 38;
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v20, v21, v10, (uint8_t *)&buf, v22);
        return;
      }
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102322EA0);
    }
    uint64_t v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      __int16 v26 = 2082;
      uint64_t v27 = "";
      __int16 v28 = 2050;
      uint64_t v29 = 5;
      __int16 v10 = "{\"msg%{public}.0s\":\"app-launch event too sensitive, skipping\", \"subHarvester\":%{public, location:CLSub"
            "HarvesterIdentifier}lld}";
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102322EA0);
    }
    uint64_t v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      __int16 v26 = 2082;
      uint64_t v27 = "";
      __int16 v28 = 2050;
      uint64_t v29 = 5;
      __int16 v10 = "{\"msg%{public}.0s\":\"pass event over too old, skipping\", \"subHarvester\":%{public, location:CLSubHarvest"
            "erIdentifier}lld}";
LABEL_27:
      float v20 = v9;
      os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
      uint32_t v22 = 28;
      goto LABEL_28;
    }
  }
}

void sub_1013B182C(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  ++*(_DWORD *)(a1 + 204);
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56))) {
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  double v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a4;
    if (*((char *)a4 + 31) >= 0) {
      uint64_t v9 = a4 + 2;
    }
    else {
      uint64_t v9 = (int *)*((void *)a4 + 1);
    }
    int v29 = 68290051;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 5;
    __int16 v35 = 2049;
    *(void *)&double v36 = a3;
    __int16 v37 = 1025;
    int v38 = v8;
    __int16 v39 = 2081;
    long long v40 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onAppNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{private, location:CLAppMonitor_Type::Notification}lld, \"pid\":%{private}d, \"bundleId\":%{private, location:escape_only}s}", (uint8_t *)&v29, 0x36u);
  }
  double v10 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  if (a3 == 7)
  {
    if (!*((unsigned char *)a4 + 105))
    {
      uint64_t v21 = 0;
LABEL_32:
      id v22 = objc_alloc_init((Class)CLPAppLocation);
      [v22 setAppState:v21];
      uint64_t v25 = *((void *)a4 + 1);
      unint64_t v24 = a4 + 2;
      uint64_t v23 = v25;
      if (*((char *)v24 + 23) >= 0) {
        uint64_t v26 = (uint64_t)v24;
      }
      else {
        uint64_t v26 = v23;
      }
      [v22 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26)];
      if ((unint64_t)[*(id *)(a1 + 352) count] >= 0x32) {
        [*(id *)(a1 + 352) removeObjectForKey:[objc_msgSend(*(id *)(a1 + 352), "allKeys") firstObject]];
      }
      [*(id *)(a1 + 352) setObject:v22 forKey:[NSNumber numberWithDouble:v10]];

      sub_1013B0A70(a1);
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102322EA0);
    }
    uint64_t v18 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    int v29 = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 5;
    long long v15 = "{\"msg%{public}.0s\":\"Ignoring placeholder notification for app download\", \"subHarvester\":%{public, locati"
          "on:CLSubHarvesterIdentifier}lld}";
LABEL_51:
    long long v16 = v18;
    uint32_t v17 = 28;
    goto LABEL_52;
  }
  if (a3 != 9) {
    return;
  }
  double v11 = *(double *)(a1 + 568);
  sub_1012B77B0(a1 + 280);
  if (v10 - v11 >= v12)
  {
    uint64_t v19 = a4 + 2;
    if (*((char *)a4 + 31) >= 0) {
      uint64_t v20 = (uint64_t)(a4 + 2);
    }
    else {
      uint64_t v20 = *((void *)a4 + 1);
    }
    if (sub_1012092D0((uint64_t)+[NSString stringWithUTF8String:v20]))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102322EA0);
      }
      uint64_t v18 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      int v29 = 68289282;
      int v30 = 0;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2050;
      uint64_t v34 = 5;
      long long v15 = "{\"msg%{public}.0s\":\"Ignoring plugin\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      goto LABEL_51;
    }
    if ((*(unsigned int (**)(void, int *))(**(void **)(a1 + 360) + 56))(*(void *)(a1 + 360), a4 + 2) == 2) {
      goto LABEL_31;
    }
    int v27 = *((char *)a4 + 31);
    if (v27 < 0)
    {
      if (*((void *)a4 + 2) != 14)
      {
LABEL_47:
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102322EA0);
        }
        uint64_t v18 = qword_102419568;
        if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        int v29 = 68289282;
        int v30 = 0;
        __int16 v31 = 2082;
        int v32 = "";
        __int16 v33 = 2050;
        uint64_t v34 = 5;
        long long v15 = "{\"msg%{public}.0s\":\"Ignoring apple app\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
        goto LABEL_51;
      }
      uint64_t v19 = (void *)*v19;
    }
    else if (v27 != 14)
    {
      goto LABEL_47;
    }
    if (*v19 == 0x6C7070612E6D6F63 && *(void *)((char *)v19 + 6) == 0x7370614D2E656C70)
    {
LABEL_31:
      uint64_t v21 = 1;
      goto LABEL_32;
    }
    goto LABEL_47;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  uint64_t v13 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    double v14 = v10 - *(double *)(a1 + 568);
    int v29 = 68289539;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 5;
    __int16 v35 = 2049;
    double v36 = v14;
    long long v15 = "{\"msg%{public}.0s\":\"Hasn't been long enough, ignoring\", \"subHarvester\":%{public, location:CLSubHarvester"
          "Identifier}lld, \"timeSinceLastHarvest_s\":\"%{private}.09f\"}";
    long long v16 = v13;
    uint32_t v17 = 38;
LABEL_52:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v15, (uint8_t *)&v29, v17);
  }
}

void sub_1013B1DA4(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  long long v6 = a4[7];
  long long v21 = a4[6];
  long long v22 = v6;
  v23[0] = a4[8];
  *(_OWORD *)((char *)v23 + 12) = *(long long *)((char *)a4 + 140);
  long long v7 = a4[3];
  long long v17 = a4[2];
  long long v18 = v7;
  long long v8 = a4[5];
  long long v19 = a4[4];
  long long v20 = v8;
  long long v9 = a4[1];
  long long v15 = *a4;
  long long v16 = v9;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102322EA0);
  }
  double v10 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 68290051;
    __int16 v25 = 2082;
    uint64_t v26 = "";
    __int16 v27 = 2050;
    uint64_t v28 = 5;
    __int16 v29 = 2049;
    uint64_t v30 = a3;
    __int16 v31 = 1040;
    int v32 = 156;
    __int16 v33 = 2097;
    uint64_t v34 = &v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onLocationNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{private, location:CLLocationProvider_Type::Notification}lld, \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x36u);
  }
  if ((a3 == 5 || !a3) && (sub_1013B1F5C(a1, (uint64_t)&v15) & 1) == 0)
  {
    long long v11 = v22;
    *(_OWORD *)(a1 + 504) = v21;
    *(_OWORD *)(a1 + 520) = v11;
    *(_OWORD *)(a1 + 536) = v23[0];
    *(_OWORD *)(a1 + 548) = *(_OWORD *)((char *)v23 + 12);
    long long v12 = v18;
    *(_OWORD *)(a1 + 440) = v17;
    *(_OWORD *)(a1 + 456) = v12;
    long long v13 = v20;
    *(_OWORD *)(a1 + 472) = v19;
    *(_OWORD *)(a1 + 488) = v13;
    long long v14 = v16;
    *(_OWORD *)(a1 + 408) = v15;
    *(_OWORD *)(a1 + 424) = v14;
    sub_1013B0A70(a1);
  }
}

uint64_t sub_1013B1F5C(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 20);
  if (v3 > 10000.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102322EA0);
    }
    uint64_t v4 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    uint64_t v5 = *(void *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 12);
    uint64_t v7 = *(void *)(a2 + 20);
    int v19 = 68290051;
    int v20 = 0;
    __int16 v21 = 2082;
    long long v22 = "";
    __int16 v23 = 2050;
    uint64_t v24 = 5;
    __int16 v25 = 2049;
    *(void *)uint64_t v26 = v5;
    *(_WORD *)&v26[8] = 2049;
    *(void *)&v26[10] = v6;
    *(_WORD *)&v26[18] = 2049;
    *(void *)__int16 v27 = v7;
    long long v8 = "{\"msg%{public}.0s\":\"ignoring since accuracy is too large\", \"subHarvester\":%{public, location:CLSubHarvest"
         "erIdentifier}lld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"horizontalAccuracy\":\"%{private}f\"}";
    long long v9 = v4;
    uint32_t v10 = 58;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v19, v10);
    return 1;
  }
  uint64_t v12 = a1 + 428;
  double v13 = *(double *)(a1 + 428);
  double v14 = v3 * 0.5;
  BOOL v15 = v13 < 0.0 || v13 > v14;
  if (!v15
    && (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) - *(double *)(a1 + 484) < 630.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102322EA0);
    }
    uint64_t v16 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    double v17 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(v12 + 56);
    int v19 = 68290563;
    int v20 = 0;
    __int16 v21 = 2082;
    long long v22 = "";
    __int16 v23 = 2050;
    uint64_t v24 = 5;
    __int16 v25 = 1040;
    *(_DWORD *)uint64_t v26 = 156;
    *(_WORD *)&_DWORD v26[4] = 2097;
    *(void *)&v26[6] = a2;
    *(_WORD *)&unsigned char v26[14] = 1040;
    *(_DWORD *)&v26[16] = 156;
    *(_WORD *)__int16 v27 = 2097;
    *(void *)&_OWORD v27[2] = a1 + 408;
    __int16 v28 = 2049;
    double v29 = v17;
    long long v8 = "{\"msg%{public}.0s\":\"ignoring location, previous was more accurate and fresh enough\", \"subHarvester\":%{pub"
         "lic, location:CLSubHarvesterIdentifier}lld, \"newLocation\":%{private, location:CLClientLocation}.*P, \"oldLoca"
         "tion\":%{private, location:CLClientLocation}.*P, \"timeSinceLastLocation_s\":\"%{private}.09f\"}";
    long long v9 = v16;
    uint32_t v10 = 70;
    goto LABEL_15;
  }
  return 0;
}

id sub_1013B2204(uint64_t a1)
{
  return [*(id *)(a1 + 376) count];
}

id sub_1013B220C(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v4 = *(void **)(a1 + 376);

  return [v4 pruneSecondaryDataOlderThan:v3];
}

id sub_1013B22A0(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:5];
}

id sub_1013B22AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 376) homeArchive];
  if ([v2 count])
  {
    id v3 = [v2 mappedSecondaryData];
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = objc_alloc_init((Class)CLPAppCollectionRequest);
      [v5 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
      id v6 = sub_100881AD8(v4);
      uint64_t v7 = *(void **)(a1 + 384);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_1013B24EC;
      long long v22[3] = &unk_1022F0648;
      v22[5] = v2;
      v22[6] = a1;
      v22[4] = v5;
      [v7 signData:v6 withCompletion:v22];
    }
  }
  id v8 = [*(id *)(a1 + 376) workArchive];
  if ([v8 count])
  {
    id v9 = [v8 mappedSecondaryData];
    if (v9)
    {
      uint32_t v10 = v9;
      id v11 = objc_alloc_init((Class)CLPAppCollectionRequest);
      [v11 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
      id v12 = sub_100881AD8(v10);
      double v13 = *(void **)(a1 + 384);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1013B2584;
      v21[3] = &unk_1022F0648;
      v21[5] = v8;
      v21[6] = a1;
      v21[4] = v11;
      [v13 signData:v12 withCompletion:v21];
    }
  }
  id v14 = [*(id *)(a1 + 376) mainArchive];
  id result = [v14 count];
  if (result)
  {
    id result = [v14 mappedSecondaryData];
    if (result)
    {
      uint64_t v16 = result;
      id v17 = objc_alloc_init((Class)CLPAppCollectionRequest);
      [v17 setMeta:[CLPMeta meta]];
      id v18 = sub_100881AD8(v16);
      int v19 = *(void **)(a1 + 384);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1013B261C;
      v20[3] = &unk_1022F0648;
      v20[5] = v14;
      v20[6] = a1;
      v20[4] = v17;
      return [v19 signData:v18 withCompletion:v20];
    }
  }
  return result;
}

void sub_1013B24EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) setSignature:a2];
  [*(id *)(a1 + 40) overwritePrimaryObject:*(void *)(a1 + 32)];

  uint64_t v4 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 40)];
  -[CLHUploadRequest setEndpoint:[objc_msgSend(*(id *)(v3 + 80), "endpointSelector") appEndpoint]];
  [*(id *)(v3 + 80) submitRequest:v4];
}

void sub_1013B2584(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) setSignature:a2];
  [*(id *)(a1 + 40) overwritePrimaryObject:*(void *)(a1 + 32)];

  uint64_t v4 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 40)];
  -[CLHUploadRequest setEndpoint:[objc_msgSend(*(id *)(v3 + 80), "endpointSelector") appEndpoint]];
  [*(id *)(v3 + 80) submitRequest:v4];
}

void sub_1013B261C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) setSignature:a2];
  [*(id *)(a1 + 40) overwritePrimaryObject:*(void *)(a1 + 32)];

  uint64_t v4 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 40)];
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", [objc_msgSend(*(id *)(v3 + 80), "endpointSelector") appEndpoint]);
  [*(id *)(v3 + 80) submitRequest:v4];
}

uint64_t sub_1013B26B4(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) & 2) != 0) {
    return 1;
  }
  else {
    return ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) >> 3) & 1;
  }
}

uint64_t sub_1013B2734(void *a1)
{
  *a1 = off_102322D68;
  id v2 = (std::__shared_weak_count *)a1[46];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1003C0998((uint64_t)a1);
}

void sub_1013B2790(void *a1)
{
  *a1 = off_102322D68;
  id v2 = (std::__shared_weak_count *)a1[46];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1003C0998((uint64_t)a1);

  operator delete();
}

void sub_1013B2800(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1013B2830()
{
  return sub_1012B748C((uint64_t)&xmmword_102487720, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_1013B2870(void *a1)
{
  *a1 = off_102322ED0;
  operator new();
}

void sub_1013B29B4()
{
}

void *sub_1013B2A3C(void *a1)
{
  *a1 = off_102322ED0;
  id v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  id v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  return a1;
}

void sub_1013B2AAC(void *a1)
{
  *a1 = off_102322ED0;
  id v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  id v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_1000DB0A0(v5);
  }

  operator delete();
}

void sub_1013B2B3C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1013B2BA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B2BBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1013B2BEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1013B2C30(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1013B2C98(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B2CB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1013B2CE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_1013B2D24(void *a1, uint64_t a2)
{
  *a1 = off_102323018;
  a1[1] = a2;
  a1[2] = 0;
  sub_100ECEB98(a1 + 3, "Traffic", a2);
  return a1;
}

void sub_1013B2D7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    sub_101A62790(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B2D9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

id sub_1013B2DD4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2 registrationInfo:0];
}

id sub_1013B2DE8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2];
}

void sub_1013B2DF8()
{
}

void sub_1013B2EB4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023230B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPolicyProactiveExternal::onProactiveHarvestingProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023230B0);
    }
    id v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      id v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPolicyProactiveExternal::onProactiveHarvestingProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_101136144(*(void *)(a4 + 216), a1, *a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013B3080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B30A0(uint64_t a1)
{
  return sub_100170B44(a1 + 24);
}

uint64_t sub_1013B30A8(uint64_t a1, BOOL *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_1000D29FC(v5, @"ProactiveHarvesting", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_1013B3104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B311C(uint64_t a1, BOOL *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_1000D29FC(v5, @"ProactiveHarvestingIntervalBypass", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_1013B3178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B3190(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1000A6958();

  return sub_1000A6A10(v3, @"LastProactiveTime", a2);
}

BOOL sub_1013B31D4(double a1)
{
  double v3 = a1;
  uint64_t v1 = sub_1000A6958();
  return sub_100163398(v1, @"LastProactiveTime", &v3);
}

BOOL sub_1013B3208(uint64_t a1, void *a2)
{
  id v3 = [[+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration") defaultForKey:@"CLProactiveBatteryLevel" defaultValue:0];
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    *a2 = v5;
  }
  return v4 != 0;
}

double sub_1013B3260@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  id v11 = [[objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  [v11 setHandler:a2];
  [v11 setNextFireTime:a4 interval:a5];
  sub_1013B3424(&v11, &v10);
  double result = *(double *)&v10;
  *a3 = v10;
  return result;
}

void *sub_1013B32EC(void *a1)
{
  *a1 = off_102323018;
  sub_100C0AB60((uint64_t)(a1 + 3));
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1013B3360(void *a1)
{
  *a1 = off_102323018;
  sub_100C0AB60((uint64_t)(a1 + 3));
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete();
}

void sub_1013B33F4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void *sub_1013B3424@<X0>(void **a1@<X1>, void *a2@<X8>)
{
  id v4 = operator new(0x28uLL);
  double result = sub_1013B3480(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013B346C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013B3480(void *a1, void **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023230E0;
  id v3 = *a2;
  a1[3] = off_102323130;
  a1[4] = v3;
  return a1;
}

void sub_1013B34F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013B3504(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023230E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013B3524(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023230E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013B3578(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1013B35A0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

char *sub_1013B35D4(char *__dst, uint64_t a2, __int16 a3, long long *a4)
{
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    *((void *)__dst + 2) = *((void *)a4 + 2);
    *(_OWORD *)std::string __dst = v7;
  }
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a2;
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(__dst + 84) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(__dst + 72) = v10;
  *(_OWORD *)(__dst + 56) = v9;
  *(_OWORD *)(__dst + 40) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 24);
  float v11 = *(float *)(a2 + 28);
  float v12 = *(float *)(a2 + 32);
  *((void *)__dst + 14) = 0;
  float v13 = *((float *)__dst + 7);
  float v14 = *((float *)__dst + 8) * -10.0;
  float v15 = log10f(*(float *)&v8 / v13);
  float v16 = *((float *)__dst + 6);
  *((float *)__dst + 25) = v16 + (float)(v14 * v15);
  *((float *)__dst + 26) = v16 + (float)(v14 * log10f(v11 / v13));
  *((float *)__dst + 27) = v16 + (float)(v14 * log10f(v12 / v13));
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 17) = 0xBFF0000000000000;
  *((CFAbsoluteTime *)__dst + 18) = CFAbsoluteTimeGetCurrent();
  *((_DWORD *)__dst + 38) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(__dst + 156) = _D0;
  *((_WORD *)__dst + 82) = 0;
  *((void *)__dst + 21) = 0;
  sub_100EDFA7C((uint64_t)(__dst + 176));
  *((_WORD *)__dst + 132) = a3;
  sub_100513074(__dst + 272, "CLBTLERSSIRangeCalculator-Mutex", 0, 1);
  return __dst;
}

void sub_1013B370C(_Unwind_Exception *a1)
{
  sub_100EDFAC4(v2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 120) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1013B374C(uint64_t a1, int a2, __int16 a3, double a4)
{
  uint64_t v8 = a1 + 272;
  (*(void (**)(uint64_t))(*(void *)(a1 + 272) + 16))(a1 + 272);
  __int16 v9 = a2 - 126;
  if (a2 <= 126)
  {
    if (a2 <= 0) {
      __int16 v9 = a2;
    }
    int v10 = (__int16)(*(_WORD *)(a1 + 264) + v9);
    if (v10 > *(__int16 *)(a1 + 36))
    {
      unint64_t v11 = *(void *)(a1 + 128);
      float v12 = *(double **)(a1 + 120);
      if ((unint64_t)v12 >= v11)
      {
        float v14 = *(double **)(a1 + 112);
        uint64_t v15 = ((char *)v12 - (char *)v14) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          int v19 = (char *)sub_1000C571C(a1 + 128, v18);
          float v14 = *(double **)(a1 + 112);
          float v12 = *(double **)(a1 + 120);
        }
        else
        {
          int v19 = 0;
        }
        int v20 = &v19[16 * v15];
        *(double *)int v20 = a4;
        __int16 v21 = &v19[16 * v18];
        *((_WORD *)v20 + 4) = v10;
        *((_WORD *)v20 + 5) = a3;
        float v13 = (double *)(v20 + 16);
        if (v12 != v14)
        {
          do
          {
            uint64_t v22 = *((void *)v12 - 2);
            v12 -= 2;
            int v23 = *((_DWORD *)v12 + 2);
            *((void *)v20 - 2) = v22;
            v20 -= 16;
            *((_DWORD *)v20 + 2) = v23;
          }
          while (v12 != v14);
          float v14 = *(double **)(a1 + 112);
        }
        *(void *)(a1 + 112) = v20;
        *(void *)(a1 + 120) = v13;
        *(void *)(a1 + 128) = v21;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *float v12 = a4;
        *((_WORD *)v12 + 4) = v10;
        float v13 = v12 + 2;
        *((_WORD *)v12 + 5) = a3;
      }
      *(void *)(a1 + 120) = v13;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
}

void sub_1013B38FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013B3914(uint64_t a1, unsigned int *a2, int *a3, uint64_t *a4, unsigned __int16 *a5, unsigned __int16 *a6, double a7)
{
  uint64_t v119 = a1 + 272;
  (*(void (**)(void))(*(void *)(a1 + 272) + 16))();
  __int16 v121 = 256;
  uint64_t v117 = 0;
  double v118 = -1.0;
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v115 = 0;
  __int16 v116 = 0;
  std::string __p = 0;
  __int16 v113 = 0;
  double v114 = 0;
  unint64_t v13 = *(__int16 *)(a1 + 38) - (uint64_t)*(__int16 *)(a1 + 36) + 1;
  *(_WORD *)uint64_t buf = 0;
  sub_1013B4698((uint64_t)&v115, v13, buf);
  if (v11 == v12 || (v15 = *(__int16 **)(a1 + 112), float v14 = *(__int16 **)(a1 + 120), v15 == v14))
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    float v30 = 0.0;
LABEL_63:
    float v51 = 0.0;
    float v54 = 0.0;
    float v52 = 0.0;
    goto LABEL_64;
  }
  do
  {
    if (a7 - *(double *)v15 <= *(float *)(a1 + 60))
    {
      int v18 = v15[4];
      if (v18 <= *(__int16 *)(a1 + 38) && v18 >= *(__int16 *)(a1 + 36))
      {
        ++*((_WORD *)v115 + v15[4] - (uint64_t)*(__int16 *)(a1 + 36));
        int v19 = v113;
        if (v113 >= v114)
        {
          __int16 v21 = __p;
          uint64_t v22 = v113 - __p;
          if (v113 - __p <= -3) {
            sub_1001D7FD4();
          }
          uint64_t v23 = v22 >> 1;
          if (v114 - __p <= (unint64_t)((v22 >> 1) + 1)) {
            uint64_t v24 = v23 + 1;
          }
          else {
            uint64_t v24 = v114 - __p;
          }
          if ((unint64_t)(v114 - __p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v25 = v24;
          }
          if (v25)
          {
            uint64_t v26 = (char *)sub_100C3D5E0((uint64_t)&v114, v25);
            __int16 v21 = __p;
            int v19 = v113;
          }
          else
          {
            uint64_t v26 = 0;
          }
          __int16 v27 = &v26[2 * v23];
          *(_WORD *)__int16 v27 = v15[4];
          int v20 = v27 + 2;
          while (v19 != v21)
          {
            __int16 v28 = *((_WORD *)v19 - 1);
            v19 -= 2;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          std::string __p = v27;
          double v114 = &v26[2 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_WORD *)__int16 v113 = v15[4];
          int v20 = v113 + 2;
        }
        __int16 v113 = v20;
        float v14 = *(__int16 **)(a1 + 120);
        char v17 = 1;
      }
      else
      {
        char v17 = 0;
      }
      v15 += 8;
    }
    else
    {
      int64_t v16 = (char *)v14 - (char *)(v15 + 8);
      if (v14 != v15 + 8) {
        memmove(v15, v15 + 8, v16 - 4);
      }
      float v14 = (__int16 *)((char *)v15 + v16);
      *(void *)(a1 + 120) = (char *)v15 + v16;
      char v17 = 1;
    }
  }
  while (v15 != v14 && (v17 & 1) != 0);
  char v29 = v17 ^ 1;
  float v30 = 0.0;
  if (__p == v113) {
    char v29 = 1;
  }
  if (v29)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    goto LABEL_63;
  }
  std::__sort<std::__less<short,short> &,short *>();
  __int16 v31 = __p;
  uint64_t v32 = (v113 - __p) >> 1;
  signed int v33 = vcvtpd_s64_f64((double)(unint64_t)v32 * 0.1);
  signed int v34 = vcvtpd_s64_f64((double)(unint64_t)v32 * 0.4);
  int v35 = v32 - (v34 + v33);
  if (v35 < 1)
  {
    float v37 = 0.0;
    while (v31 != v113)
    {
      int v43 = *(__int16 *)v31;
      v31 += 2;
      float v37 = v37 + (float)v43;
    }
    float v42 = (float)(unint64_t)v32;
  }
  else
  {
    double v36 = (__int16 *)&__p[2 * v34];
    float v37 = 0.0;
    while (v36 != (__int16 *)&v113[-2 * v33])
    {
      int v38 = *v36++;
      float v37 = v37 + (float)v38;
    }
    float v42 = (float)v35;
  }
  int v44 = (int)(float)(v37 / v42);
  double v118 = __exp10((float)((float)v44 - *(float *)(a1 + 24)) / -18.0);
  double v118 = sub_100EDFAC8(a1 + 176, &v118, a2, a7);
  int v45 = *(__int16 *)(a1 + 36);
  int v46 = *(__int16 *)(a1 + 38) - v45;
  if (v46 < 0)
  {
    uint64_t v41 = 0;
    uint64_t v40 = 0;
    uint64_t v39 = 0;
  }
  else
  {
    __int16 v47 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    do
    {
      float v48 = (float)v47 + (float)(__int16)v45;
      if (v48 >= *(float *)(a1 + 108))
      {
        if (v48 >= *(float *)(a1 + 104))
        {
          int v49 = *((__int16 *)v115 + v47);
          if (v48 >= *(float *)(a1 + 100)) {
            uint64_t v39 = (v39 + v49);
          }
          else {
            uint64_t v40 = (v40 + v49);
          }
        }
        else
        {
          uint64_t v41 = (v41 + *((__int16 *)v115 + v47));
        }
      }
      ++v47;
    }
    while (v46 >= v47);
  }
  int v50 = v40 + v41 + v39;
  if (!v50) {
    goto LABEL_63;
  }
  float v30 = (float)(int)v39 / (float)v50;
  float v51 = (float)(int)v40 / (float)v50;
  float v52 = (float)(int)v41 / (float)v50;
  float v53 = *(float *)(a1 + 40);
  float v54 = 0.0 / (float)v50;
  if (v52 > v53 || v30 > v53 || v51 > v53 || v54 > v53)
  {
    if (v51 <= v53) {
      uint64_t v66 = v30 > v53;
    }
    else {
      uint64_t v66 = 2;
    }
    BOOL v111 = v66;
    if (v52 > v53)
    {
      uint64_t v56 = 3;
      goto LABEL_93;
    }
    goto LABEL_94;
  }
  float v55 = *(float *)(a1 + 44);
  BOOL v111 = (float)(v30 + v51) > v55;
  if ((float)(v51 + v52) <= v55)
  {
LABEL_94:
    if (v111) {
      goto LABEL_95;
    }
LABEL_64:
    BOOL v111 = 0;
    uint64_t v57 = 0;
    *a3 = 0;
    *((void *)a3 + 1) = 0xBFF0000000000000;
    *((_WORD *)a3 + 8) = 0;
    float v58 = 0.0;
    goto LABEL_65;
  }
  uint64_t v56 = 2;
LABEL_93:
  BOOL v111 = v56;
LABEL_95:
  unsigned int v67 = *a2;
  if (*a2 - 1 < 2 || v67 == 7 || v67 == 3 && !a2[1])
  {
    double v68 = a7 - *(double *)(a1 + 144);
    double v69 = *(float *)(a1 + 76);
    float v58 = 1.0;
    if (v68 > v69)
    {
      float v58 = exp(-(v68 - v69) / *(float *)(a1 + 80));
      if (*(float *)(a1 + 84) > v58) {
        float v58 = *(float *)(a1 + 84);
      }
    }
  }
  else
  {
    *(double *)(a1 + 144) = a7;
    float v58 = 1.0;
  }
  double v70 = *(double *)(a1 + 136);
  *(double *)(a1 + 136) = a7;
  float v71 = (float)v111;
  if (v111 || (double v72 = a7 - v70, a7 - v70 > *(float *)(a1 + 88)))
  {
    *(double *)(a1 + 144) = a7;
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a1 + 64);
    *(float *)(a1 + 160) = v71;
    float v75 = (float)v111;
  }
  else
  {
    float v73 = *(float *)(a1 + 156);
    float v74 = v73 / (float)(v73 + *(float *)(a1 + 72));
    float v75 = *(float *)(a1 + 160) + (float)(v74 * (float)(v71 - *(float *)(a1 + 160)));
    float v76 = (float)(v73 * (float)(1.0 - v74)) + v72 * v72 * *(float *)(a1 + 68) * 0.5 * (v58 * v58);
    *(float *)(a1 + 156) = v76;
    *(float *)(a1 + 160) = v75;
  }
  if (v75 >= 1.0 && v75 <= 3.0)
  {
    int v77 = llroundf(v75);
    int v78 = v77 - v111;
    if (v77 - v111 < 0) {
      int v78 = v111 - v77;
    }
    if (v78 <= *(_DWORD *)(a1 + 96))
    {
      *(_DWORD *)(a1 + 152) = 0;
    }
    else
    {
      int v79 = *(_DWORD *)(a1 + 152);
      *(_DWORD *)(a1 + 152) = v79 + 1;
      if (v79 >= *(_DWORD *)(a1 + 92))
      {
        *(double *)(a1 + 144) = a7;
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(a1 + 64);
        *(float *)(a1 + 160) = v71;
      }
    }
    if (*(unsigned char *)(a1 + 164))
    {
      if (v77 == 1)
      {
        *(_DWORD *)(a1 + 168) = 0;
        int v80 = 1;
        goto LABEL_127;
      }
      if (v77 < 2 || (int v81 = *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 168) = v81 + 1, v81 < 1))
      {
        int v80 = 1;
        int v77 = 1;
        goto LABEL_127;
      }
      int v80 = 0;
      *(unsigned char *)(a1 + 164) = 0;
    }
    else
    {
      if (v77 != 1)
      {
        int v80 = 0;
        goto LABEL_127;
      }
      int v80 = 1;
      *(_WORD *)(a1 + 164) = 1;
      *(_DWORD *)(a1 + 172) = 0;
    }
    *(_DWORD *)(a1 + 168) = 0;
    goto LABEL_127;
  }
  *(void *)(a1 + 136) = 0xBFF0000000000000;
  *(double *)(a1 + 144) = a7;
  int v80 = *(unsigned __int8 *)(a1 + 164);
  int v77 = v80;
LABEL_127:
  uint64_t v106 = v39;
  __int16 v107 = a2;
  if (!*(unsigned char *)(a1 + 165) || v80)
  {
    if (v77 != 2) {
      goto LABEL_140;
    }
    *(unsigned char *)(a1 + 165) = 1;
    unsigned int v82 = (_DWORD *)(a1 + 172);
    int v77 = 2;
  }
  else
  {
    unsigned int v82 = (_DWORD *)(a1 + 172);
    if (v77 != 2)
    {
      int v83 = (*v82)++;
      BOOL v84 = v83 > 0 && v58 == 1.0;
      if (!v84 && v83 < 2)
      {
        int v77 = 2;
        goto LABEL_140;
      }
      *(unsigned char *)(a1 + 165) = 0;
    }
  }
  _DWORD *v82 = 0;
LABEL_140:
  *a3 = v77;
  *((double *)a3 + 1) = v118;
  *((_WORD *)a3 + 8) = v44;
  uint64_t v86 = *(void *)(a1 + 112);
  uint64_t v85 = *(void *)(a1 + 120);
  if (v86 == v85)
  {
    uint64_t v57 = 1;
    uint64_t v39 = v106;
    a2 = v107;
  }
  else
  {
    uint64_t v104 = v40;
    uint64_t v105 = v41;
    int v87 = (unint64_t *)(a3 + 6);
    int v88 = (unsigned char *)*((void *)a3 + 4);
    do
    {
      __int16 v89 = *(_WORD *)(v86 + 8);
      unint64_t v90 = *((void *)a3 + 5);
      if ((unint64_t)v88 >= v90)
      {
        unint64_t v92 = *v87;
        int v93 = &v88[-*v87];
        unint64_t v94 = (unint64_t)(v93 + 1);
        if ((uint64_t)(v93 + 1) < 0) {
          sub_1001D7FD4();
        }
        unint64_t v95 = v90 - v92;
        if (2 * v95 > v94) {
          unint64_t v94 = 2 * v95;
        }
        if (v95 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v96 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v96 = v94;
        }
        if (v96) {
          __int16 v97 = (char *)operator new(v96);
        }
        else {
          __int16 v97 = 0;
        }
        uint64_t v98 = &v93[(void)v97];
        char v99 = &v93[(void)v97];
        *char v99 = v89;
        int v91 = v99 + 1;
        if (v88 != (unsigned char *)v92)
        {
          uint64_t v100 = &v88[~v92];
          do
          {
            char v101 = *--v88;
            (v100--)[(void)v97] = v101;
          }
          while (v88 != (unsigned char *)v92);
          int v88 = (unsigned char *)*v87;
          uint64_t v98 = v97;
        }
        *((void *)a3 + 3) = v98;
        *((void *)a3 + 4) = v91;
        *((void *)a3 + 5) = &v97[v96];
        if (v88) {
          operator delete(v88);
        }
      }
      else
      {
        unsigned char *v88 = v89;
        int v91 = v88 + 1;
      }
      *((void *)a3 + 4) = v91;
      v86 += 16;
      int v88 = v91;
    }
    while (v86 != v85);
    uint64_t v57 = 1;
    uint64_t v39 = v106;
    a2 = v107;
    uint64_t v40 = v104;
    uint64_t v41 = v105;
  }
LABEL_65:
  if (qword_102487750 != -1) {
    dispatch_once(&qword_102487750, &stru_102323178);
  }
  if (byte_102477C98)
  {
    id v60 = +[NSMutableString string];
    [v60 appendFormat:@"time,%f,", *(void *)&a7];
    if (*((char *)a4 + 23) >= 0) {
      __int16 v61 = a4;
    }
    else {
      __int16 v61 = (uint64_t *)*a4;
    }
    [v60 appendFormat:@"uuid,%s,", v61];
    [v60 appendFormat:@"major,%hd,"];
    [v60 appendFormat:@"major,%hd,"];
    [v60 appendFormat:@"observable,%d,", v111];
    [v60 appendFormat:@"range,%d,", *a3];
    [v60 appendFormat:@"unc,%f,", *((void *)a3 + 1)];
    [v60 appendFormat:@"filteredRSSI,%d,", *((__int16 *)a3 + 8)];
    [v60 appendFormat:@"activity,%d,", *a2];
    [v60 appendFormat:@"confidence,%d,", a2[1]];
    [v60 appendFormat:@"activityFactor,%f,", v58];
    [v60 appendFormat:@"fFilterPk_pre,%f,", *(float *)(a1 + 156)];
    [v60 appendFormat:@"tx,%f,", *(float *)(a1 + 24)];
    [v60 appendFormat:@"cntImmediate,%d," v39];
    [v60 appendFormat:@"cntNear,%d,", v40];
    [v60 appendFormat:@"cntMid,%d,", 0];
    [v60 appendFormat:@"cntFar,%d,", v41];
    [v60 appendFormat:@"pImmediate,%f,", v30];
    [v60 appendFormat:@"pNear,%f,", v51];
    [v60 appendFormat:@"pMid,%f,", v54];
    [v60 appendFormat:@"pFar,%f,", v52];
    [v60 appendFormat:@"number rssi,%lu,", (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4];
    [v60 appendString:@"rssi,"];
    for (uint64_t i = *(void *)(a1 + 112); i != *(void *)(a1 + 120); i += 16)
      [v60 appendFormat:@"%f,%d,%d,", *(void *)i, *(__int16 *)(i + 8), *(__int16 *)(i + 10)];
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102323198);
    }
    __int16 v63 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      id v64 = [v60 UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v125 = v64;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "iB: %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323198);
      }
      id v102 = [v60 UTF8String];
      int v122 = 136380675;
      id v123 = v102;
      __int16 v103 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)", "%s\n", v103);
      if (v103 != (char *)buf) {
        free(v103);
      }
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (v115)
  {
    __int16 v116 = v115;
    operator delete(v115);
  }
  if (HIBYTE(v121))
  {
    if ((_BYTE)v121) {
      pthread_mutex_unlock(v120);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v119 + 24))(v119);
    }
  }
  return v57;
}

void sub_1013B461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  sub_1019DB560((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1013B4698(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_1013B4A8C((void **)a1, a2 - v3, a3);
  }
}

void sub_1013B46C8(id a1)
{
  sub_1000C7F88(buf);
  int v1 = sub_1000D2988(*(uint64_t *)buf, "VerboseRangeLoggingEnabled", (BOOL *)&byte_102477C98);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102323198);
    }
    uint64_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = byte_102477C98;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Overriding VerboseRangeLoggingEnabled,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323198);
      }
      unint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1013B48B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013B48D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 272;
  (*(void (**)(uint64_t))(*(void *)(a1 + 272) + 16))(a1 + 272);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1013B498C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013B49A4(std::string *a1, const std::string *a2)
{
  uint64_t v4 = &a1[11].__r_.__value_.__s.__data_[8];
  (*(void (**)(std::string::size_type *))(a1[11].__r_.__value_.__l.__size_ + 16))(&a1[11].__r_.__value_.__l.__size_);
  std::string::operator=(a1, a2);
  return (*(uint64_t (**)(std::string::value_type *))(*(void *)v4 + 24))(v4);
}

void sub_1013B4A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013B4A5C(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1013B4A8C(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  long long v7 = v8;
  __int16 v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 1)
  {
    if (a2)
    {
      uint64_t v16 = 2 * a2;
      char v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      __int16 v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    uint64_t v11 = a2 + (v10 >> 1);
    if (v11 < 0) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v10 >> 1;
    unint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 > v11) {
      uint64_t v11 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_100C3D5E0(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v18 = &v15[2 * v12];
    int v19 = &v18[2 * a2];
    uint64_t v20 = 2 * a2;
    __int16 v21 = v18;
    do
    {
      *(_WORD *)__int16 v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    uint64_t v22 = &v15[2 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 2)
    {
      __int16 v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_1013B4E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1013B4E74(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _currentFilename];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

id sub_1013B5034(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stopLoggingOnQueue];
}

id sub_1013B50B0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _stopLoggingOnQueue];
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    unint64_t v3 = +[NSFileManager defaultManager];
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
    return (id)[(NSFileManager *)v3 removeItemAtPath:v4 error:0];
  }
  return result;
}

id sub_1013B518C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldRotate];
  if (result)
  {
    unint64_t v3 = *(void **)(a1 + 32);
    return [v3 _stopLoggingOnQueue];
  }
  return result;
}

id sub_1013B5250(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 16)) {
    id v3 = 0;
  }
  else {
    id v3 = [*(id *)(v2 + 40) propertyForKey:NSStreamDataWrittenToMemoryStreamKey];
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_1013B530C;
      v7[3] = &unk_1022B30F8;
      v7[4] = v3;
      void v7[5] = v5;
      dispatch_async(v4, v7);
    }
  }
  return [*(id *)(a1 + 32) _stopLoggingOnQueue];
}

uint64_t sub_1013B530C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1013B58A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _outputStream];
  id v3 = [*(id *)(a1 + 40) bytes];
  id v4 = [*(id *)(a1 + 40) length];

  return _[v2 write:v3 maxLength:v4];
}

void sub_1013B5904(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_1013B5934(uint64_t a1)
{
  sub_100134750(__p, "");
  *(void *)uint64_t buf = 0x200000000;
  __int16 v8 = 0;
  if (SHIBYTE(v6) < 0)
  {
    sub_1000DC48C(&v9, __p[0], (unint64_t)__p[1]);
    uint64_t v11 = 0;
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v9 = *(_OWORD *)__p;
    uint64_t v10 = v6;
    uint64_t v11 = 0;
  }
  sub_1005F54CC(a1, buf);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  if (sub_10014C3C0(a1))
  {
    sub_1013B5BD8(a1);
    sub_1005F7B0C(a1, "BeaconFences", (const char **)&off_1023231F8, 0, 0);
    sub_1013B64C0(a1);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  id v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "iB: No access to DB", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    LOWORD(__p[0]) = 0;
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLBeaconFenceDatabase::CLBeaconFenceDatabase()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return a1;
}

void sub_1013B5B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_1005F5850(v25);
  _Unwind_Resume(a1);
}

id *sub_1013B5BD8(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  id v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: addOnBehalfBundleIdColumnIfNotExists", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceDatabase::addOnBehalfBundleIdColumnIfNotExists()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E1294((uint64_t *)v11, (uint64_t)"CLBeaconFenceDatabase::addOnBehalfBundleIdColumnIfNotExists", 0);
  uint64_t v6 = "OnBehalfBundleIdentifier";
  int v7 = 5;
  __int16 v8 = 0;
  char v9 = 0;
  char v10 = 0;
  if (sub_1005F93E4(a1, "BeaconFences")) {
    sub_1005FEC4C(a1, "BeaconFences", (uint64_t)"OnBehalfBundleIdentifier", (uint64_t)&v6);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  id v3 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist\"}", buf, 0x12u);
  }
  return sub_1000E1098(v11);
}

void sub_1013B63F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62,uint64_t a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  sub_101A129A8((uint64_t)&a64);
  sub_1000E1098(&a62);
  _Unwind_Resume(a1);
}

void sub_1013B64C0(uint64_t a1)
{
  v3[0] = v3;
  v3[1] = v3;
  v3[2] = 0;
  sub_1000E1294(&v2, (uint64_t)"CLBeaconFenceDatabase::cleanDatabase", 0);
  sub_1013B67BC(a1);
}

void sub_1013B6774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,uint64_t a29,uint64_t a30)
{
}

void sub_1013B67BC(uint64_t a1)
{
  sub_10010F274((uint64_t)&v23);
  sub_1000E1294(&v22, (uint64_t)"CLBeaconFenceDatabase::getAllFences", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Retrieving all fences", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getAllFences(CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  id v3 = sub_100132EFC(&v24, (uint64_t)"SELECT ", 7);
  id v4 = sub_100132EFC(v3, (uint64_t)"BundleIdentifier", 16);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)", ", 2);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"Identifier", 10);
  int v7 = sub_100132EFC(v6, (uint64_t)", ", 2);
  __int16 v8 = sub_100132EFC(v7, (uint64_t)"ProximityUUID", 13);
  char v9 = sub_100132EFC(v8, (uint64_t)", ", 2);
  char v10 = sub_100132EFC(v9, (uint64_t)"Major", 5);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)"Minor", 5);
  __int16 v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)"DefinitionMask", 14);
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  uint64_t v16 = sub_100132EFC(v15, (uint64_t)"Options", 7);
  char v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  int v18 = sub_100132EFC(v17, (uint64_t)"OnBehalfBundleIdentifier", 24);
  int v19 = sub_100132EFC(v18, (uint64_t)" FROM ", 6);
  sub_100132EFC(v19, (uint64_t)"BeaconFences", 12);
  std::stringbuf::str();
  if (v26 >= 0) {
    uint64_t v20 = buf;
  }
  else {
    uint64_t v20 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v20);
}

void sub_1013B7050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_1000E1098(&a12);
  sub_101A129A8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1013B70E8(uint64_t a1, uint64_t a2)
{
  sub_10010F274((uint64_t)&v18);
  sub_1000E1294(&v17, (uint64_t)"CLBeaconFenceDatabase::removeFence", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    uint64_t v5 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing fence,%{private}s", buf, 0xCu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
    if (v21 >= 0) {
      uint64_t v15 = buf;
    }
    else {
      uint64_t v15 = *(unsigned char **)buf;
    }
    int v22 = 136380675;
    uint64_t v23 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    if (v21 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::removeFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v16);
    if (v16 != (char *)__p) {
      free(v16);
    }
  }
  uint64_t v6 = sub_100132EFC(&v19, (uint64_t)"DELETE FROM ", 12);
  int v7 = sub_100132EFC(v6, (uint64_t)"BeaconFences", 12);
  __int16 v8 = sub_100132EFC(v7, (uint64_t)" WHERE ", 7);
  char v9 = sub_100132EFC(v8, (uint64_t)"BundleIdentifier", 16);
  char v10 = sub_100132EFC(v9, (uint64_t)"=? AND ", 7);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"Identifier", 10);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)"=? AND ", 7);
  __int16 v13 = sub_100132EFC(v12, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100132EFC(v13, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v25 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  sub_10014D518(a1, (uint64_t)v14);
}

void sub_1013B7838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_1000E1098(&a12);
  sub_101A129A8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1013B78CC(uint64_t a1, uint64_t a2)
{
  sub_10010F274((uint64_t)v34);
  sub_1000E1294((uint64_t *)v33, (uint64_t)"CLBeaconFenceDatabase::addFence", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    uint64_t v5 = v42 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Adding fence,%{private}s", buf, 0xCu);
    if (v42 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
    if (v38 >= 0) {
      char v29 = buf;
    }
    else {
      char v29 = *(unsigned char **)buf;
    }
    int v39 = 136380675;
    uint64_t v40 = v29;
    float v30 = (char *)_os_log_send_and_compose_impl();
    if (v38 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v30);
    if (v30 != (char *)__p) {
      free(v30);
    }
  }
  if (sub_101343E38(a2))
  {
    uint64_t v6 = sub_100132EFC(v35, (uint64_t)"INSERT INTO ", 12);
    int v7 = sub_100132EFC(v6, (uint64_t)"BeaconFences", 12);
    __int16 v8 = sub_100132EFC(v7, (uint64_t)" (", 2);
    char v9 = sub_100132EFC(v8, (uint64_t)"BundleIdentifier", 16);
    char v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
    uint64_t v11 = sub_100132EFC(v10, (uint64_t)"Identifier", 10);
    uint64_t v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
    __int16 v13 = sub_100132EFC(v12, (uint64_t)"ProximityUUID", 13);
    uint64_t v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
    uint64_t v15 = sub_100132EFC(v14, (uint64_t)"Major", 5);
    uint64_t v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
    uint64_t v17 = sub_100132EFC(v16, (uint64_t)"Minor", 5);
    uint64_t v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
    uint64_t v19 = sub_100132EFC(v18, (uint64_t)"DefinitionMask", 14);
    uint64_t v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
    char v21 = sub_100132EFC(v20, (uint64_t)"Options", 7);
    int v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
    uint64_t v23 = sub_100132EFC(v22, (uint64_t)"OnBehalfBundleIdentifier", 24);
    sub_100132EFC(v23, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 33);
    std::stringbuf::str();
    if (v42 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = (void **)__p[0];
    }
    sub_10014D518(a1, (uint64_t)v24);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  char v25 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    char v26 = v42 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Error, invalid proximity zone for fence,%{private}s", buf, 0xCu);
    if (v42 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
    if (v38 >= 0) {
      __int16 v31 = buf;
    }
    else {
      __int16 v31 = *(unsigned char **)buf;
    }
    int v39 = 136380675;
    uint64_t v40 = v31;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    if (v38 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBeaconFenceDatabase::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v32);
    if (v32 != (char *)__p) {
      free(v32);
    }
  }
  sub_1000E1098(v33);
  *(void *)((char *)v34
  v35[0] = v27;
  if (v36 < 0) {
    operator delete((void *)v35[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 0;
}

void sub_1013B8318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_1000E1098(&a12);
  sub_101A129A8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1013B83B8(uint64_t a1, uint64_t *a2)
{
  sub_10010F274((uint64_t)&v16);
  sub_1000E1294(&v15, (uint64_t)"CLBeaconFenceDatabase::removeAllFencesForBundleIncludingOnBehalf", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing all fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    if (*((char *)a2 + 23) >= 0) {
      __int16 v13 = a2;
    }
    else {
      __int16 v13 = (uint64_t *)*a2;
    }
    v18[0] = 136380675;
    *(void *)&v18[1] = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
  int v7 = sub_100132EFC(v6, (uint64_t)"BeaconFences", 12);
  __int16 v8 = sub_100132EFC(v7, (uint64_t)" WHERE ", 7);
  char v9 = sub_100132EFC(v8, (uint64_t)"BundleIdentifier", 16);
  char v10 = sub_100132EFC(v9, (uint64_t)"=? OR ", 6);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100132EFC(v11, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v20 >= 0) {
    uint64_t v12 = buf;
  }
  else {
    uint64_t v12 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v12);
}

void sub_1013B89B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_1000E1098(&a12);
  sub_101A129A8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1013B8A34(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_10010F274((uint64_t)&v32);
  sub_1000E1294(&v31, (uint64_t)"CLBeaconFenceDatabase::getFencesForBundle", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  uint64_t v6 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v7 = a2;
    }
    else {
      int v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: Retrieving fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    if (*((char *)a2 + 23) >= 0) {
      char v29 = a2;
    }
    else {
      char v29 = (uint64_t *)*a2;
    }
    v34[0] = 136380675;
    *(void *)&v34[1] = v29;
    float v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFencesForBundle(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  __int16 v8 = sub_100132EFC(&v33, (uint64_t)"SELECT ", 7);
  char v9 = sub_100132EFC(v8, (uint64_t)"BundleIdentifier", 16);
  char v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"Identifier", 10);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  __int16 v13 = sub_100132EFC(v12, (uint64_t)"ProximityUUID", 13);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)"Major", 5);
  uint64_t v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)"Minor", 5);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)"DefinitionMask", 14);
  char v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
  char v21 = sub_100132EFC(v20, (uint64_t)"Options", 7);
  int v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
  uint64_t v23 = sub_100132EFC(v22, (uint64_t)"OnBehalfBundleIdentifier", 24);
  uint64_t v24 = sub_100132EFC(v23, (uint64_t)" FROM ", 6);
  char v25 = sub_100132EFC(v24, (uint64_t)"BeaconFences", 12);
  char v26 = sub_100132EFC(v25, (uint64_t)" WHERE ", 7);
  uint64_t v27 = sub_100132EFC(v26, (uint64_t)"BundleIdentifier", 16);
  sub_100132EFC(v27, (uint64_t)"=?", 2);
  sub_10013415C(a3);
  std::stringbuf::str();
  if (v36 >= 0) {
    __int16 v28 = buf;
  }
  else {
    __int16 v28 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v28);
}

void sub_1013B9548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_1000E1098(&a12);
  sub_101A129A8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1013B95E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  sub_10010F274((uint64_t)&v31);
  sub_1000E1294(&v30, (uint64_t)"CLBeaconFenceDatabase::getFencesForBundleAndOnBehalf", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  int v7 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v8 = a2;
    }
    else {
      __int16 v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Retrieving fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    if (*((char *)a2 + 23) >= 0) {
      __int16 v28 = a2;
    }
    else {
      __int16 v28 = (uint64_t *)*a2;
    }
    v33[0] = 136380675;
    *(void *)&v33[1] = v28;
    char v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFencesForBundleAndOnBehalf(const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  char v9 = sub_100132EFC(&v32, (uint64_t)"SELECT ", 7);
  char v10 = sub_100132EFC(v9, (uint64_t)"Identifier", 10);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)"ProximityUUID", 13);
  __int16 v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)"Major", 5);
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  uint64_t v16 = sub_100132EFC(v15, (uint64_t)"Minor", 5);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"DefinitionMask", 14);
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
  char v20 = sub_100132EFC(v19, (uint64_t)"Options", 7);
  char v21 = sub_100132EFC(v20, (uint64_t)" FROM ", 6);
  int v22 = sub_100132EFC(v21, (uint64_t)"BeaconFences", 12);
  uint64_t v23 = sub_100132EFC(v22, (uint64_t)" WHERE ", 7);
  uint64_t v24 = sub_100132EFC(v23, (uint64_t)"BundleIdentifier", 16);
  char v25 = sub_100132EFC(v24, (uint64_t)"=? AND ", 7);
  char v26 = sub_100132EFC(v25, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100132EFC(v26, (uint64_t)"=?", 2);
  sub_10013415C(a4);
  std::stringbuf::str();
  if (v35 >= 0) {
    uint64_t v27 = buf;
  }
  else {
    uint64_t v27 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v27);
}

void sub_1013BA0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_1000E1098(&a14);
  sub_101A129A8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1013BA18C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  sub_10010F274((uint64_t)&v33);
  sub_1000E1294(&v32, (uint64_t)"CLBeaconFenceDatabase::getFenceForBundleAndOnBehalf", 0);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  int v7 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v8 = a2;
    }
    else {
      __int16 v8 = (uint64_t *)*a2;
    }
    if (*((char *)a4 + 23) >= 0) {
      char v9 = a4;
    }
    else {
      char v9 = (uint64_t *)*a4;
    }
    *(_DWORD *)uint64_t buf = 136380931;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v39 = 2081;
    uint64_t v40 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Retrieving fence,%{private}s/%{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    if (*((char *)a2 + 23) >= 0) {
      char v29 = a2;
    }
    else {
      char v29 = (uint64_t *)*a2;
    }
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v30 = a4;
    }
    else {
      uint64_t v30 = (uint64_t *)*a4;
    }
    v35[0] = 136380931;
    *(void *)&v35[1] = v29;
    __int16 v36 = 2081;
    float v37 = v30;
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFenceForBundleAndOnBehalf(const std::string &, const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  char v10 = sub_100132EFC(&v34, (uint64_t)"SELECT ", 7);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"ProximityUUID", 13);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  __int16 v13 = sub_100132EFC(v12, (uint64_t)"Major", 5);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)"Minor", 5);
  uint64_t v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)"DefinitionMask", 14);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)"Options", 7);
  char v20 = sub_100132EFC(v19, (uint64_t)" FROM ", 6);
  char v21 = sub_100132EFC(v20, (uint64_t)"BeaconFences", 12);
  int v22 = sub_100132EFC(v21, (uint64_t)" WHERE ", 7);
  uint64_t v23 = sub_100132EFC(v22, (uint64_t)"BundleIdentifier", 16);
  uint64_t v24 = sub_100132EFC(v23, (uint64_t)"=? AND ", 7);
  char v25 = sub_100132EFC(v24, (uint64_t)"Identifier", 10);
  char v26 = sub_100132EFC(v25, (uint64_t)"=? AND ", 7);
  uint64_t v27 = sub_100132EFC(v26, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100132EFC(v27, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v41 >= 0) {
    __int16 v28 = buf;
  }
  else {
    __int16 v28 = *(unsigned char **)buf;
  }
  sub_10014D518(a1, (uint64_t)v28);
}

void sub_1013BAB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_1000E1098(&a12);
  sub_101A129A8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1013BAC14(uint64_t a1)
{
  sub_10010F274((uint64_t)&v7);
  uint64_t v2 = sub_100132EFC(&v8, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  id v3 = sub_100132EFC(v2, (uint64_t)"BeaconFences", 12);
  id v4 = sub_100132EFC(v3, (uint64_t)" WHERE ", 7);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"BundleIdentifier", 16);
  sub_100132EFC(v5, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1013BB040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1013BB0B0(uint64_t a1)
{
  sub_10010F274((uint64_t)&v10);
  uint64_t v2 = sub_100132EFC(&v11, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  id v3 = sub_100132EFC(v2, (uint64_t)"BeaconFences", 12);
  id v4 = sub_100132EFC(v3, (uint64_t)" WHERE ", 7);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"BundleIdentifier", 16);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"=?", 2);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)" OR ", 4);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100132EFC(v8, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v13 >= 0) {
    char v9 = buf;
  }
  else {
    char v9 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v9);
}

void sub_1013BB458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013BB4A4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1013BB584(id a1)
{
  qword_102487758 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBeaconFenceAuthorizationManagerSilo"];
}

uint64_t sub_1013BB644(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1013BD5AC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102487788 != -1) {
    dispatch_once(&qword_102487788, block);
  }
  return qword_102487780;
}

void sub_1013BB89C(uint64_t a1, uint64_t a2)
{
  v9[0] = v9;
  v9[1] = v9;
  uint64_t v10 = 0;
  int v11 = 0;
  char v12 = 0;
  id v4 = sub_100B3E7C4((uint64_t)v9, 0, 0, a2);
  uint64_t v5 = v9[0];
  *id v4 = v9[0];
  v4[1] = v9;
  *(void *)(v5 + 8) = v4;
  v9[0] = v4;
  ++v10;
  memset(&__s1, 0, sizeof(__s1));
  uint64_t v6 = *(unsigned __int8 *)(a2 + 87);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 72);
  }
  if (v6) {
    uint64_t v7 = (const std::string *)(a2 + 64);
  }
  else {
    uint64_t v7 = (const std::string *)(a2 + 40);
  }
  std::string::operator=(&__s1, v7);
  sub_1013BD6C0(a1);
}

void sub_1013BC32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10013415C(&a18);
  _Unwind_Resume(a1);
}

void sub_1013BC3C4(uint64_t a1, uint64_t a2)
{
  v10[0] = v10;
  v10[1] = v10;
  v10[2] = 0;
  int v11 = 0;
  char v12 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  uint64_t v2 = off_1022B3D98;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0;
  sub_1013BA18C(a1 + 128, (uint64_t *)(a2 + 40), a2 + 64, (uint64_t *)(a2 + 88));
}

void sub_1013BC8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void sub_1013BC974(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102323550);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = 68289026;
    LOWORD(v4) = 2082;
    *(void *)((char *)&v4 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: getCountOfAllFences\"}", (uint8_t *)&v3, 0x12u);
  }
  uint64_t v3 = (uint64_t)&v3;
  *(void *)&long long v4 = &v3;
  *((void *)&v4 + 1) = 0;
  sub_1013B67BC(a1 + 128);
}

void sub_1013BCA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1013BCB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013BCBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013BCC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013BCCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
  }
  char v5 = sub_1013BE258(a1, (uint64_t)__dst, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_11;
    }
    return 1;
  }
  operator delete(__dst[0]);
  if ((v5 & 1) == 0) {
    return 1;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 264)) {
    return 2;
  }
  else {
    return *(_DWORD *)(a1 + 264) & 2;
  }
}

void sub_1013BCDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013BCDD4(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_1013BD1A4(a1, "CLBeaconFenceAuthorizationManager-Notifier", a2);
  void *v3 = off_1023233D8;
  v3[14] = 0;
  v3[15] = 0;
  sub_1013B67B8((uint64_t)(v3 + 16));
  *(_DWORD *)(a1 + 264) = 0;
  [*(id *)(a1 + 32) vendor] proxyForService:@"CLClientAuthorizationCache"];
  sub_101385DAC();
}

void sub_1013BD0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100616554(v16);
  uint64_t v19 = *(void *)(v15 + 120);
  *(void *)(v15 + 120) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *v17;
  *uint64_t v17 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_1013BD42C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1013BD1A4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102323580;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1013BD234(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013BD250(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323530);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBeaconFenceAuthorizationManager::onBeaconNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323530);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBeaconFenceAuthorizationManager::onBeaconNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1013BE37C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013BD40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013BD42C(uint64_t a1)
{
  *(void *)a1 = off_102323580;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_1007E53C4(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1013BD4B0(void *a1)
{
  *a1 = off_1023233D8;
  sub_1013BD61C((uint64_t)a1);
  sub_100616554(a1 + 16);
  uint64_t v2 = a1[15];
  a1[15] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[14];
  a1[14] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1013BD42C((uint64_t)a1);
}

void sub_1013BD574(void *a1)
{
  sub_1013BD4B0(a1);

  operator delete();
}

void sub_1013BD5AC()
{
}

void sub_1013BD5F8()
{
}

uint64_t sub_1013BD61C(uint64_t a1)
{
  *(void *)(a1 + 272) = 0;
  uint64_t v2 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (result)
  {
    long long v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void sub_1013BD6C0(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102323550);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    char v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: getCountOfAllFencesForBundle\"}", (uint8_t *)v3, 0x12u);
  }
  sub_1013BB0B0(a1 + 128);
}

void sub_1013BD7B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  long long v5 = 0u;
  long long v6 = 0u;
  __int16 v4 = off_1022B3D98;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  sub_1013BA18C(a1 + 128, a2, a3, a4);
}

void sub_1013BE108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1013BE170(uint64_t a1, std::string *a2)
{
  if (*(_DWORD *)(a1 + 264)) {
    sub_1013BFCD8(a1, a2, 0);
  }
  sub_1013BAC14(a1 + 128);
}

void sub_1013BE230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013BE258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v13 = *(void *)(a2 + 16);
  }
  unsigned int v5 = sub_1013C0004(a1, (uint64_t *)__p);
  unsigned int v6 = v5;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_6;
    }
    return 0;
  }
  operator delete(__p[0]);
  if (!v6) {
    return 0;
  }
LABEL_6:
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 23))
    {
      *(_OWORD *)long long v10 = *(_OWORD *)a3;
      uint64_t v11 = *(void *)(a3 + 16);
      goto LABEL_13;
    }
    return 1;
  }
  unint64_t v8 = *(void *)(a3 + 8);
  if (!v8) {
    return 1;
  }
  sub_1000DC48C(v10, *(void **)a3, v8);
LABEL_13:
  uint64_t v7 = sub_1013C0144(a1, (uint64_t *)v10);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return v7;
}

void sub_1013BE348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013BE37C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102323550);
    }
    unsigned int v6 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a4 + 112);
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      long long v10 = "";
      __int16 v11 = 1026;
      int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Received Bluetooth LE power\", \"BT power\":%{public}hhd}", (uint8_t *)v8, 0x18u);
    }
    if (*(unsigned char *)(a4 + 112)) {
      sub_1013BE4A4(a1, 2);
    }
    else {
      sub_1013BE698(a1, 2);
    }
  }
}

void sub_1013BE4A4(uint64_t a1, int a2)
{
  if ((*(_DWORD *)(a1 + 264) & a2) != 0)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102323550);
    }
    __int16 v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)uint64_t buf = 67240448;
      int v9 = a2;
      __int16 v10 = 1026;
      int v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing exception,%{public}#x, from stored exceptions %{public}#x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::unlockedResumeForException(MonitoringExceptions)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    BOOL v6 = (*(_DWORD *)(a1 + 264) & ~a2) == 0;
    *(_DWORD *)(a1 + 264) &= ~a2;
    if (v6) {
      sub_1013BF2E4(a1);
    }
  }
}

void sub_1013BE698(uint64_t a1, int a2)
{
  if ((*(_DWORD *)(a1 + 264) & a2) == 0)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102323550);
    }
    __int16 v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)uint64_t buf = 67240448;
      int v9 = a2;
      __int16 v10 = 1026;
      int v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Adding exception,%{public}#x, to stored exceptions %{public}#x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::unlockedSuspendForException(MonitoringExceptions)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v6 = *(_DWORD *)(a1 + 264);
    *(_DWORD *)(a1 + 264) = v6 | a2;
    if (!v6) {
      sub_1013BED60(a1);
    }
  }
}

void sub_1013BE8A4(uint64_t a1, uint64_t *a2)
{
  v2[0] = (uint64_t)v2;
  v2[1] = (uint64_t)v2;
  v2[2] = 0;
  sub_100133310(a1 + 128, a2, v2);
}

void sub_1013BED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013415C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1013BED60(uint64_t a1)
{
  v1[0] = v1;
  v1[1] = v1;
  _DWORD v1[2] = 0;
  sub_1013B67BC(a1 + 128);
}

void sub_1013BF250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_1013BF2E4(uint64_t a1)
{
  v1[0] = v1;
  v1[1] = v1;
  _DWORD v1[2] = 0;
  sub_1013B67BC(a1 + 128);
}

void sub_1013BF858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1013BF8D4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = sub_1013BFBFC(a1);
  if (v5 && *a3 <= 1u)
  {
    v7[0] = v7;
    v7[1] = v7;
    _DWORD v7[2] = 0;
    sub_1013B67BC(a1 + 128);
  }
  return v5;
}

void sub_1013BFB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  sub_10013415C(&a23);
  sub_1000DB264((uint64_t)&a27, a28);
  sub_10013415C((uint64_t *)(v28 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_1013BFBFC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102477D78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_102477D78);
    a1 = v4;
    if (v3)
    {
      qword_102477D60 = 0;
      *(void *)algn_102477D68 = 0;
      qword_102477D70 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102477D60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102477D78);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 96);

  return v1();
}

void sub_1013BFCD8(uint64_t a1, std::string *a2, int a3)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102323550);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = a2;
    }
    else {
      int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 67240450;
    *(_DWORD *)&uint8_t buf[4] = a3;
    __int16 v9 = 2082;
    __int16 v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: Setting icon state,%{public}d, for bundle,%{public}s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102323550);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::unlockedSetFenceIconStateForBundle(const std::string &, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10000FF54(a2, (uint64_t)buf);
  sub_1007D0F6C();
}

void sub_1013BFF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013BFF78()
{
  return 1;
}

uint64_t sub_1013BFF80()
{
  return 1;
}

void *sub_1013BFF88@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

id sub_1013C0004(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  int v3 = a2;
  if (*((char *)a2 + 23) < 0) {
    int v3 = (uint64_t *)*a2;
  }
  id v4 = [objc_msgSend(*(id *)(a1 + 272), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)) isAuthorizedForServiceType:0];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102323550);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v2 + 23) < 0) {
      uint64_t v2 = (uint64_t *)*v2;
    }
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2082;
    int v11 = v2;
    __int16 v12 = 1026;
    int v13 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: isBundleAuthorized\", \"key\":%{public, location:escape_only}s, \"authorized\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  return v4;
}

uint64_t sub_1013C0144(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
    {
LABEL_9:
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      id v4 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Empty bundle identifier should not be passed in here", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102323550);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBeaconFenceAuthorizationManager::unlockedIsOnBehalfBundleAuthorized(std::string)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      return 1;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (!*((unsigned char *)a2 + 23))
  {
    goto LABEL_9;
  }
  id v2 = [[*(id *)(a1 + 272) syncgetAuthorizationContextIfClientIsNonZonal:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)];

  return (uint64_t)[v2 isAuthorizedForServiceType:14];
}

void sub_1013C034C()
{
}

void sub_1013C0408(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1013C0444(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1023236D0;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1013C0528(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        __int16 v9 = (uint64_t *)v4;
      }
      else {
        __int16 v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323530);
      }
      __int16 v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102323530);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1013C07B8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_100110018(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1013C086C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1013C08B4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1013C08FC(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

BOOL sub_1013C0944(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        *(void *)uint64_t buf = &v40;
        char v35 = sub_1000EAEE4((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v35 + 5), a4);
        *(void *)uint64_t buf = buf;
        *(_OWORD *)&uint8_t buf[8] = (unint64_t)buf;
        int v45 = 0;
        char v46 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1013C31B8();
        }
        sub_10013415C((uint64_t *)buf);
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)char v41 = a1 + 64;
        char v29 = byte_102477D80;
        int v38 = v16;
        *(void *)uint64_t buf = &v38;
        *((unsigned char *)sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        uint64_t v30 = sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        uint64_t v32 = sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v40;
        uint64_t v33 = sub_1000EAEE4(v32 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v33 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323530);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323530);
    }
    __int16 v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v36 = (void *)*v36;
    }
    *(_DWORD *)char v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    float v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_1013C0E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10013415C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1013C0E28(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323530);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323530);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::clientRegistered(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1013C10AC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10006D9B8((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102323530);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102323530);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1013C1480(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  if (v12 != a3) {
    sub_1013C2EC8((uint64_t *)a3, *(void *)(v12 + 8), *(void *)(v8 + 64));
  }
  int v13 = *(_DWORD *)(v12 + 24);
  *(unsigned char *)(a3 + 28) = *(unsigned char *)(v12 + 28);
  *(_DWORD *)(a3 + 24) = v13;
  return 1;
}

uint64_t sub_1013C151C(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1013C28D0(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10078BC58((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1013C15B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013C15C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = (uint64_t)v4;
  v4[1] = (uint64_t)v4;
  _DWORD v4[2] = 0;
  int v5 = 0;
  char v6 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  sub_10013415C(v4);
}

void sub_1013C163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1013C1650(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323530);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_10078A4E4((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_10078A368((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_10078A7B0((uint64_t)&buf[8], *(char **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_10078A7B0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1013C28D0(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1013C2304();
  }
  os_activity_scope_leave(&state);
}

void sub_1013C1C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1013C1C6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323530);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323530);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323530);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      char v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        char v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323530);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102323530);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102323530);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1013C221C(uint64_t a1)
{
  sub_1013C3148(a1);

  operator delete();
}

id sub_1013C2254(uint64_t a1, int a2, void *a3)
{
  id result = sub_1013C2A78(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1013C22A4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1013C22D4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1013C2304()
{
}

void sub_1013C23C4()
{
}

void sub_1013C23E8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    int v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v49 = v9;
        id v13 = sub_1013C2A78(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              float v48 = v19;
              sub_1013C27D8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              float v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102323530);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)uint64_t buf = 136446466;
                float v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102323530);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                float v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                __int16 v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::string>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1013C27D8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1013C2A78(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EAEE4(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

uint64_t sub_1013C28D0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  uint64_t result = sub_1013C292C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1013C2918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013C292C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_102323660;
  sub_100B3F5D0((uint64_t *)(a1 + 24), a2);
  int v4 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = v4;
  return a1;
}

void sub_1013C2988(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013C299C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102323660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013C29BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102323660;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1013C2A10(uint64_t a1)
{
}

uint64_t sub_1013C2A1C(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    sub_10013415C(*(uint64_t **)(result + 32));
    operator delete();
  }
  return result;
}

id sub_1013C2A78(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1013C2AD8(a1);
}

id sub_1013C2AD8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023236A0);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB5733 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023236A0);
      }
      int v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB5733 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1023236A0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1013C2E98(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_1013C2EC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      std::string::operator=((std::string *)v6 + 1, (const std::string *)(v4 + 24));
      v6[6] = *(void *)(v4 + 48);
      std::string::operator=((std::string *)(v6 + 7), (const std::string *)(v4 + 56));
      std::string::operator=((std::string *)(v6 + 10), (const std::string *)(v4 + 80));
      std::string::operator=((std::string *)(v6 + 13), (const std::string *)(v4 + 104));
      *((_DWORD *)v6 + 32) = *(_DWORD *)(v4 + 128);
      uint64_t v4 = *(void *)(v4 + 8);
      int v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
  {
    return sub_1013C2FB0((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return sub_1013C30A8((uint64_t)a1, v6, a1);
  }
}

uint64_t *sub_1013C2FB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    id v8 = sub_100B3E7C4(a1, 0, 0, a3 + 16);
    __int16 v9 = v8;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        id v8 = sub_100B3E7C4(a1, v12, 0, v10 + 16);
        *(void *)(v12 + 8) = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1013C3080(void *a1)
{
  __cxa_begin_catch(a1);
  sub_101AB30FC(v1);
  __cxa_rethrow();
}

void sub_1013C3094(_Unwind_Exception *a1)
{
}

void *sub_1013C30A8(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      id v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      (*(void (**)(void))v4[2])();
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

uint64_t sub_1013C3148(uint64_t a1)
{
  *(void *)a1 = off_1023236D0;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1013C31B8()
{
}

void sub_1013C3278()
{
}

uint64_t sub_1013C329C(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    sub_10013415C(*(uint64_t **)(result + 32));
    operator delete();
  }
  return result;
}

uint64_t sub_1013C32F8()
{
  sub_100134750(&qword_102487768, "BeaconFenceAuthorizationManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487768, (void *)&_mh_execute_header);
}

uint64_t *sub_1013C3358(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)off_1023236F8;
  a1[1] = a3;
  a1[2] = 0;
  uint64_t v4 = (char **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = a2;
  if (a1 != &qword_10248D420)
  {
    int v5 = 0;
    uint64_t v6 = a1;
    do
    {
      unint64_t v7 = a1[4];
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v8 = ((char *)v5 - *v4) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v9 = v7 - (void)*v4;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)sub_1000DA54C((uint64_t)(a1 + 4), v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = (uint64_t **)&v12[8 * v8];
        *uint64_t v13 = v6;
        int v5 = v13 + 1;
        int v15 = (char *)a1[2];
        uint64_t v14 = (char *)a1[3];
        if (v14 != v15)
        {
          do
          {
            BOOL v16 = (uint64_t *)*((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = *v4;
        }
        a1[2] = (uint64_t)v13;
        a1[3] = (uint64_t)v5;
        a1[4] = (uint64_t)&v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *v5++ = v6;
      }
      a1[3] = (uint64_t)v5;
      uint64_t v6 = (uint64_t *)v6[1];
    }
    while (v6 != &qword_10248D420);
  }
  return a1;
}

void sub_1013C349C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013C34BC()
{
  return 0;
}

uint64_t sub_1013C34C8()
{
  return 0;
}

BOOL sub_1013C34D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  if (v3 == v2) {
    return 0;
  }
  uint64_t v4 = v3 + 8;
  do
  {
    uint64_t v5 = *(void *)(v4 - 8);
    BOOL result = v5 == a2;
    BOOL v7 = v5 == a2 || v4 == v2;
    v4 += 8;
  }
  while (!v7);
  return result;
}

uint64_t sub_1013C3510(void *a1, void *a2)
{
  uint64_t v4 = a2;
  do
  {
    *a1 = v4;
    uint64_t v5 = a1[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = v4[5];
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "initial, enter(%s)", buf, 0xCu);
      uint64_t v4 = (void *)*a1;
    }
    (*(void (**)(void *, void, void))(*v4 + 24))(v4, 0, 0);
    uint64_t result = (*(uint64_t (**)(void *))(*a2 + 8))(a2);
    uint64_t v4 = (void *)result;
  }
  while (result);
  return result;
}

void sub_1013C3640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)a1;
  if (*(uint64_t **)a1 != &qword_10248D420)
  {
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))*v3)(v3, a2, a3);
      if (v7) {
        break;
      }
      uint64_t v3 = (uint64_t *)v3[1];
      if (v3 == &qword_10248D420) {
        return;
      }
    }
    uint64_t v8 = v7;
    if ((uint64_t *)v7 == v3)
    {
      uint64_t v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*v3 + 16);
      v14(v3, a2, a3);
    }
    else
    {
      uint64_t v9 = *(uint64_t **)a1;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      int v26 = 0;
      sub_1001DD364(&v26, (const void *)v9[2], v9[3], (v9[3] - v9[2]) >> 3);
      std::string __p = 0;
      uint64_t v25 = 0;
      int v23 = 0;
      sub_1001DD364(&v23, *(const void **)(v8 + 16), *(void *)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 3);
      uint64_t v10 = v26;
      if (v26 != v27)
      {
        unint64_t v11 = (char *)__p - 8;
        uint64_t v12 = v27 - 8;
        while (v11 + 1 != (void *)v23 && *(void *)v12 == *v11)
        {
          uint64_t v27 = v12;
          std::string __p = v11--;
          BOOL v13 = v12 == v26;
          v12 -= 8;
          if (v13) {
            goto LABEL_20;
          }
        }
        int v15 = v12 + 8;
        if (v12 + 8 != v26)
        {
          do
          {
            uint64_t v16 = *v10;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v10 + 32))(*v10, a2, a3);
            uint64_t v17 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = *(void *)(v16 + 40);
              *(_DWORD *)uint64_t buf = 134218242;
              uint64_t v30 = a2;
              __int16 v31 = 2080;
              uint64_t v32 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "event %llu, exit(%s)", buf, 0x16u);
            }
            ++v10;
          }
          while (v15 != v10);
        }
      }
LABEL_20:
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v3 + 16))(v3, a2, a3);
      for (uint64_t i = (char *)__p; i != v23; i -= 8)
      {
        int v20 = *(NSObject **)(a1 + 8);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(*((void *)i - 1) + 40);
          *(_DWORD *)uint64_t buf = 134218242;
          uint64_t v30 = a2;
          __int16 v31 = 2080;
          uint64_t v32 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "event %llu, enter(%s)", buf, 0x16u);
        }
        uint64_t v22 = *((void *)i - 1);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 24))(v22, a2, a3);
      }
      *(void *)a1 = v8;
      if (i)
      {
        std::string __p = i;
        operator delete(i);
      }
      if (v26)
      {
        uint64_t v27 = (char *)v26;
        operator delete(v26);
      }
    }
  }
}

void sub_1013C39D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1013C3A1C(void *a1)
{
  *a1 = off_1023236F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1013C3A6C(void *a1)
{
  *a1 = off_1023236F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1013C3ADC()
{
  qword_10248D420 = (uint64_t)off_1023236F8;
  *(void *)algn_10248D428 = &qword_10248D420;
  qword_10248D430 = 0;
  unk_10248D438 = 0;
  qword_10248D440 = 0;
  unk_10248D448 = "hsm";
}

uint64_t sub_1013C3B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_101DB5780;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 196608;
  *(unsigned char *)(a1 + 28) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 102) = 0;
  sub_10065AB34(a1 + 152, a2);
  sub_10084F794(a1 + 184, a3);
  return a1;
}

void sub_1013C3BA4(_Unwind_Exception *a1)
{
  sub_10065ABCC(v2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 136) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void *sub_1013C3BD4(void *a1)
{
  uint64_t v2 = a1 + 19;
  sub_100D54664(a1 + 19);
  sub_100EDF960(a1 + 23);
  sub_10068280C(a1 + 23);
  sub_10065ABCC(v2);
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1013C3C44(uint64_t a1)
{
  uint64_t v2 = sub_10016BA10();
  *(_DWORD *)uint64_t buf = 1;
  double v3 = sub_10016BA54(v2, buf);
  double v4 = v3 - *(double *)(a1 + 32);
  if (v4 <= *(double *)a1) {
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102323740);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 67240448;
    int v41 = v6;
    __int16 v42 = 2050;
    *(double *)int v43 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,updateOverrideVisit,visit,%{public}d,timeFromLastCheck,%{public}0.2f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102323740);
    }
    BOOL v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::updateOverrideVisit()", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  *(double *)(a1 + 32) = v3;
  int v7 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    int v8 = 1;
  }
  else {
    int v8 = *(unsigned char *)(a1 + 25) != 0;
  }
  int v9 = *(_DWORD *)(a1 + 48);
  if (fabsf(*(float *)(a1 + 52)) <= 50.0)
  {
    BOOL v10 = fabsf(*(float *)(a1 + 56)) > 50.0;
    if (!v9) {
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v10 = 1;
    if (!v9)
    {
LABEL_18:
      BOOL v11 = *(unsigned char *)(a1 + 72) != 0;
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 - *(double *)(a1 + 40) <= *(double *)(a1 + 8))
      {
        int v12 = 1;
      }
      else
      {
        int v12 = 0;
        *(unsigned char *)(a1 + 24) = 0;
        ++*(_DWORD *)(a1 + 116);
      }
      goto LABEL_21;
    }
  }
  if (!v10) {
    goto LABEL_18;
  }
  BOOL v11 = 1;
  if (*(unsigned char *)(a1 + 24)) {
    goto LABEL_16;
  }
LABEL_19:
  int v12 = 0;
LABEL_21:
  if (v11) {
    int v13 = 1;
  }
  else {
    int v13 = v12;
  }
  if ((v12 & 1) == 0 && v11)
  {
    __int16 v14 = *(_WORD *)(a1 + 26);
    if (v14)
    {
      int v13 = 1;
      *(unsigned char *)(a1 + 24) = 1;
      *(double *)(a1 + 40) = v3;
      *(_WORD *)(a1 + 26) = v14 - 1;
    }
    else
    {
      int v13 = 0;
    }
  }
  double v15 = *(double *)(a1 + 88);
  double v16 = 0.0;
  if ((*(unsigned char *)(a1 + 104) || v15 > 0.0) && (double v17 = *(double *)(a1 + 96), v17 < v3))
  {
    if (*(unsigned char *)(a1 + 104))
    {
      double v15 = v15 + v3 - *(double *)(a1 + 80);
      *(double *)(a1 + 80) = v3;
    }
    double v18 = v3 - v17;
    float v19 = v15 / v18;
    *(void *)(a1 + 88) = 0;
    double v16 = v19;
    BOOL v20 = v19 > 0.8 && v18 > 30.0;
  }
  else
  {
    BOOL v20 = 0;
  }
  if (*(unsigned char *)(a1 + 108)) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = (*(unsigned __int8 *)(a1 + 109) | v9) == 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if (v13) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v10;
    }
    BOOL v23 = v22 && v21;
  }
  else
  {
    BOOL v23 = 0;
  }
  *(unsigned char *)(a1 + 25) = v23;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102323740);
  }
  BOOL v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(unsigned __int8 *)(a1 + 24);
    int v26 = *(unsigned __int8 *)(a1 + 25);
    int v27 = *(unsigned __int8 *)(a1 + 72);
    double v28 = *(float *)(a1 + 52);
    double v29 = *(float *)(a1 + 56);
    double v30 = *(float *)(a1 + 60);
    int v31 = *(unsigned __int16 *)(a1 + 26);
    int v32 = *(unsigned __int8 *)(a1 + 104);
    double v33 = v3 - *(double *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 67243520;
    int v41 = v25;
    __int16 v42 = 1026;
    *(_DWORD *)int v43 = v26;
    *(_WORD *)&v43[4] = 1026;
    *(_DWORD *)&v43[6] = v9 != 0;
    __int16 v44 = 1026;
    BOOL v45 = v10;
    __int16 v46 = 1026;
    int v47 = v27;
    __int16 v48 = 2050;
    double v49 = v28;
    __int16 v50 = 2050;
    double v51 = v29;
    __int16 v52 = 2050;
    double v53 = v30;
    __int16 v54 = 1026;
    int v55 = v31;
    __int16 v56 = 1026;
    BOOL v57 = v20;
    __int16 v58 = 1026;
    int v59 = v32;
    __int16 v60 = 2050;
    double v61 = v33;
    __int16 v62 = 2050;
    double v63 = v16;
    __int16 v64 = 1026;
    BOOL v65 = v21;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitExitLikely,%{public}d,inVisitLocUseful,%{public}d,wifi,%{public}d,io,%{public}d,motion,%{public}d,cdX,%{public}0.1f,cdY,%{public}0.1f,cdZ,%{public}0.1f,attemptsLeft,%{public}d,walkRun,%{public}d,currWalkRun,%{public}d,sigDur,%{public}0.2f,walkRunFrac,%{public}0.2f,wifiContDisassociated,%{public}d", buf, 0x6Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102323740);
    }
    __int16 v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::updateOverrideVisit()", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    BOOL v34 = 1;
    goto LABEL_58;
  }
  BOOL v34 = *(unsigned char *)(a1 + 25) != 0;
  if (*(unsigned char *)(a1 + 25)) {
    char v35 = 1;
  }
  else {
    char v35 = v10;
  }
  if (v35)
  {
LABEL_58:
    double v36 = 0.0;
    if (*(unsigned char *)(a1 + 104)) {
      double v36 = v3;
    }
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(double *)(a1 + 80) = v36;
    *(void *)(a1 + 88) = 0;
    *(double *)(a1 + 96) = v3;
    if (v8 == v34) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  if (v8)
  {
    BOOL v34 = 0;
LABEL_61:
    if (*(void *)(a1 + 176)) {
      sub_100180260(a1 + 152, v34);
    }
  }
LABEL_65:
  if (!v7 && *(unsigned char *)(a1 + 24))
  {
    uint64_t v37 = *(void *)(a1 + 208);
    if (v37) {
      (*(void (**)(uint64_t, BOOL))(*(void *)v37 + 48))(v37, v34);
    }
  }
}

void sub_1013C4344(uint64_t a1, int a2, char a3)
{
  uint64_t v6 = sub_10016BA10();
  *(_DWORD *)uint64_t buf = 1;
  double v7 = sub_10016BA54(v6, buf);
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a2 == 0;
  }
  if (v8)
  {
    if (*(unsigned char *)(a1 + 16) && (a2 & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 24))
      {
        uint64_t v9 = sub_10016BA10();
        *(_DWORD *)uint64_t buf = 1;
        double v10 = sub_10016BA54(v9, buf) - *(double *)(a1 + 40);
        if (v10 <= *(double *)(a1 + 8)) {
          ++*(_DWORD *)(a1 + 112);
        }
        else {
          ++*(_DWORD *)(a1 + 116);
        }
        unint64_t v14 = *(void *)(a1 + 144);
        double v15 = *(float **)(a1 + 136);
        if ((unint64_t)v15 >= v14)
        {
          double v18 = *(float **)(a1 + 128);
          uint64_t v19 = v15 - v18;
          if ((unint64_t)(v19 + 1) >> 62) {
            sub_1001D7FD4();
          }
          unint64_t v20 = v14 - (void)v18;
          unint64_t v21 = (uint64_t)(v14 - (void)v18) >> 1;
          if (v21 <= v19 + 1) {
            unint64_t v21 = v19 + 1;
          }
          if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22)
          {
            BOOL v23 = (char *)sub_10017EA34(a1 + 144, v22);
            double v18 = *(float **)(a1 + 128);
            double v15 = *(float **)(a1 + 136);
          }
          else
          {
            BOOL v23 = 0;
          }
          BOOL v24 = (float *)&v23[4 * v19];
          int v25 = &v23[4 * v22];
          float v26 = v10;
          *BOOL v24 = v26;
          double v17 = v24 + 1;
          while (v15 != v18)
          {
            int v27 = *((_DWORD *)v15-- - 1);
            *((_DWORD *)v24-- - 1) = v27;
          }
          *(void *)(a1 + 128) = v24;
          *(void *)(a1 + 136) = v17;
          *(void *)(a1 + 144) = v25;
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          float v16 = v10;
          *double v15 = v16;
          double v17 = v15 + 1;
        }
        *(void *)(a1 + 136) = v17;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102323740);
        }
        double v28 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          *(double *)double v36 = v10;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitExit,predSuccess,pullInSec:%{public}0.2f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102323740);
          }
          BOOL v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedVisit(const BOOL, const BOOL)", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 120);
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102323740);
      }
      double v29 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = *(_DWORD *)(a1 + 112);
        int v31 = *(_DWORD *)(a1 + 116);
        int v32 = *(_DWORD *)(a1 + 120);
        *(_DWORD *)uint64_t buf = 67240704;
        *(_DWORD *)double v36 = v30;
        *(_WORD *)&v36[4] = 1026;
        *(_DWORD *)&v36[6] = v31;
        __int16 v37 = 1026;
        int v38 = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitExit,predSuccess,%{public}d,predFailure,%{public}d,predMiss,%{public}d", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_50;
        }
        goto LABEL_58;
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 196608;
    *(unsigned char *)(a1 + 28) = a3;
    *(double *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    double v11 = 0.0;
    if (*(unsigned char *)(a1 + 104)) {
      double v11 = v7;
    }
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(double *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = 0;
    *(double *)(a1 + 96) = v7;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102323740);
    }
    int v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 28);
      *(_DWORD *)uint64_t buf = 67174657;
      *(_DWORD *)double v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,visitEnter,placeUnknown,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_50:
        double v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedVisit(const BOOL, const BOOL)", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
        goto LABEL_48;
      }
LABEL_58:
      dispatch_once(&qword_102419380, &stru_102323740);
      goto LABEL_50;
    }
  }
LABEL_48:
  *(unsigned char *)(a1 + 16) = a2;
}

void sub_1013C494C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  int v4 = *(unsigned __int8 *)(a1 + 105);
  int v5 = *(unsigned __int8 *)(a1 + 106);
  int v6 = *(unsigned __int8 *)(a1 + 107);
  BOOL v7 = *a3 == 4 || *a3 == 8;
  char v8 = v7;
  *(unsigned char *)(a1 + 104) = v8;
  unsigned int v9 = (*a3 < 0x39uLL) & (0x110000000000C20uLL >> *a3);
  *(unsigned char *)(a1 + 105) = v9;
  *(unsigned char *)(a1 + 106) = (*a3 < 0x2AuLL) & (0x20000000208uLL >> *a3);
  *(unsigned char *)(a1 + 107) = (*a3 < 8u) & (0x86u >> *a3);
  if (*(unsigned char *)(a1 + 16))
  {
    char v11 = 1;
    if (!*(unsigned char *)(a1 + 72))
    {
      int v12 = v6 | v3;
      BOOL v7 = v4 == 0;
      int v13 = v9 ^ 1;
      if (!v7) {
        int v13 = 1;
      }
      if (v5) {
        int v14 = 1;
      }
      else {
        int v14 = v13;
      }
      char v15 = v13 ^ 1;
      BOOL v16 = v12 != 0;
      if (v14) {
        char v11 = v15;
      }
      else {
        char v11 = v16;
      }
    }
    *(unsigned char *)(a1 + 72) = v11;
    uint64_t v17 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 1;
    double v18 = sub_10016BA54(v17, buf);
    if (v3 || !*(unsigned char *)(a1 + 104))
    {
      if (v3 && !*(unsigned char *)(a1 + 104))
      {
        *(double *)(a1 + 88) = *(double *)(a1 + 88) + v18 - *(double *)(a1 + 80);
        *(void *)(a1 + 80) = 0;
      }
    }
    else
    {
      *(double *)(a1 + 80) = v18;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102323740);
    }
    uint64_t v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(unsigned __int8 *)(a1 + 104);
      int v21 = *(unsigned __int8 *)(a1 + 105);
      int v22 = *(unsigned __int8 *)(a1 + 106);
      int v23 = *(unsigned __int8 *)(a1 + 107);
      int v24 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v25 = *(void *)(a1 + 88);
      *(_DWORD *)uint64_t buf = 67241472;
      int v28 = v20;
      __int16 v29 = 1026;
      int v30 = v21;
      __int16 v31 = 1026;
      int v32 = v22;
      __int16 v33 = 1026;
      int v34 = v23;
      __int16 v35 = 1026;
      int v36 = v24;
      __int16 v37 = 2050;
      uint64_t v38 = v25;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,Motion,ped,%{public}d,veh,%{public}d,mov,%{public}d,stationary,%{public}d,likelyBoardedVeh,%{public}d,walkRunDur,%{public}0.2f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102323740);
      }
      float v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    sub_1013C3C44(a1);
  }
}

void sub_1013C4C98(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((*a2 & 0xFFFFFFFE) == 6)
  {
    if (*(unsigned char *)(a1 + 109)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(unsigned char *)(a1 + 108) != 0;
    }
    char v5 = *(unsigned char *)(a3 + 96);
    if (v5)
    {
      BOOL v6 = *(_DWORD *)(a3 + 48) > 0;
      BOOL v7 = *(unsigned char *)(a3 + 73) == 0;
      if (*(unsigned char *)(a3 + 73)) {
        char v5 = 0;
      }
      else {
        char v5 = *(_DWORD *)(a3 + 48) > 0;
      }
      *(unsigned char *)(a1 + 109) = v5;
      if (v7) {
        BOOL v6 = 0;
      }
    }
    else
    {
      BOOL v6 = 0;
      *(unsigned char *)(a1 + 109) = 0;
    }
    *(unsigned char *)(a1 + 108) = v6;
    if (v4 && (v5 & 1) == 0 && !v6) {
      ++*(_DWORD *)(a1 + 48);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102323740);
    }
    char v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 109);
      int v10 = *(unsigned __int8 *)(a1 + 108);
      int v11 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 67240960;
      int v14 = v9;
      __int16 v15 = 1026;
      int v16 = v10;
      __int16 v17 = 1026;
      BOOL v18 = v4;
      __int16 v19 = 1026;
      int v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,rvo,WiFi,associatedStatic,%{public}d,associatedMobile,%{public}d,prevAssociatedStatus,%{public}d,numDisassociations,%{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102323740);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedWiFiServiceNotification(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (*(unsigned char *)(a1 + 16)) {
      sub_1013C3C44(a1);
    }
  }
}

uint64_t sub_1013C4F20(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 64);
  double v4 = *(double *)(a2 + 8);
  if (v3 <= 0.0)
  {
    *(double *)(a1 + 64) = v4;
    return 1;
  }
  else
  {
    double v6 = v4 - v3;
    *(double *)(a1 + 64) = v4;
    if (v4 - v3 <= 0.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102323740);
      }
      int v14 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        double v15 = *(double *)(a2 + 8);
        double v16 = *(double *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 134349312;
        double v21 = v15;
        __int16 v22 = 2050;
        double v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,rvo,IOError,SampleSetRejected,SampleTimeError,currTime,%{public}0.2f,prevTime,%{public}0.2f", buf, 0x16u);
      }
      BOOL v17 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v17)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102323740);
        }
        BOOL v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLProactiveLocationRoutineVisitOverride::shouldAcceptBIODeltaPositionSampleSet(const CLPIOSample &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return 0;
      }
    }
    else
    {
      double v7 = *(float *)(a2 + 20) / v6;
      double v8 = *(float *)(a2 + 24) / v6;
      double v9 = *(float *)(a2 + 28) / v6;
      BOOL v10 = v7 > 4.0;
      if (v8 > 4.0) {
        BOOL v10 = 1;
      }
      int v11 = v9 > 4.0 || v10;
      if (v11 == 1)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102323740);
        }
        int v12 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134349824;
          double v21 = v7;
          __int16 v22 = 2050;
          double v23 = v8;
          __int16 v24 = 2050;
          double v25 = v9;
          __int16 v26 = 2050;
          double v27 = v6;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,rvo,IOError,velX,%{public}0.2f,velY,%{public}0.2f,velZ,%{public}0.2f,timeDeltaSec,%{public}0.2f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102323740);
          }
          __int16 v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLProactiveLocationRoutineVisitOverride::shouldAcceptBIODeltaPositionSampleSet(const CLPIOSample &)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      return v11 ^ 1u;
    }
  }
  return result;
}