void sub_1013C530C(uint64_t a1, uint64_t *a2, double a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  __n128 v13;
  unint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;

  if (*(unsigned char *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    a4.n128_u64[0] = 0;
    v7 = 0.0;
    while (v5 != v6)
    {
      if (*(unsigned char *)(v5 + 63))
      {
        v13 = a4;
        if (!sub_1013C4F20(a1, v5)) {
          return;
        }
        a4.n128_u64[1] = v13.n128_u64[1];
        a4.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v13.n128_u64[0], *(float32x2_t *)(v5 + 20));
        v7 = v7 + *(float *)(v5 + 28);
      }
      v5 += 72;
    }
    v14 = a4.n128_u64[0];
    *(float32x2_t *)(a1 + 52) = vadd_f32((float32x2_t)a4.n128_u64[0], *(float32x2_t *)(a1 + 52));
    *(float *)(a1 + 60) = v7 + *(float *)(a1 + 60);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102323740);
    }
    v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(float *)(a1 + 52);
      v10 = *(float *)(a1 + 56);
      v11 = *(float *)(a1 + 60);
      *(_DWORD *)buf = 134350336;
      v16 = *(float *)&v14;
      v17 = 2050;
      v18 = *((float *)&v14 + 1);
      v19 = 2050;
      v20 = v7;
      v21 = 2050;
      v22 = v9;
      v23 = 2050;
      v24 = v10;
      v25 = 2050;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,rvo,IO,d_X,%{public}0.1f,d_Y,%{public}0.1f,d_Z,%{public}0.1f,cumulativeX,%{public}0.1f,cumulativeY,%{public}0.1f,cumulativeZ,%{public}0.1f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102323740);
      }
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationRoutineVisitOverride::feedIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_1013C55D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    sub_1013C3C44(a1);
  }
}

uint64_t sub_1013C55E8(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 140) = *(void *)(result + 112);
  *(_DWORD *)(a2 + 148) = *(_DWORD *)(result + 120);
  v2 = *(float **)(result + 128);
  v3 = *(float **)(result + 136);
  if (v2 != v3)
  {
    v4 = v2 + 1;
    v5 = *(float **)(result + 128);
    if (v2 + 1 != v3)
    {
      float v6 = *v2;
      v5 = *(float **)(result + 128);
      v7 = v2 + 1;
      do
      {
        float v8 = *v7++;
        float v9 = v8;
        if (v6 < v8)
        {
          float v6 = v9;
          v5 = v4;
        }
        v4 = v7;
      }
      while (v7 != v3);
    }
    *(_DWORD *)(a2 + 152) = *v5;
    float v10 = 0.0;
    v11 = v2;
    do
    {
      float v12 = *v11++;
      float v10 = v10 + v12;
    }
    while (v11 != v3);
    if (v10 > 0.0) {
      *(_DWORD *)(a2 + 156) = (float)(v10 / (float)(unint64_t)(v3 - v2));
    }
  }
  *(void *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(void *)(result + 136) = v2;
  return result;
}

void sub_1013C5690(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1013C56C0(uint64_t a1, void *a2)
{
  v3 = sub_1013E11D8(a1, a2);
  void *v3 = off_102323770;
  v3[14] = 0;
  v3[17] = 0;
  v3[16] = v3 + 17;
  v3[18] = 0;
  v3[15] = 0;
  *((_DWORD *)v3 + 38) = 0;
  CLMotionActivity::getInit(v3 + 20, (CLMotionActivity *)v3);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(unsigned char *)(a1 + 320) = 0;
  sub_101385DAC();
}

void sub_1013C587C(_Unwind_Exception *a1)
{
  sub_100789AA0(v1 + 296, *v4);
  sub_1000DB264(v2, *(char **)(v1 + 136));
  uint64_t v6 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1013E12C4(v1);
  _Unwind_Resume(a1);
}

void sub_1013C5918(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323868);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLERangeManagerConcrete::onBeaconNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323868);
    }
    float v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      v15 = "";
      __int16 v16 = 2082;
      v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLERangeManagerConcrete::onBeaconNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1013C7DF8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013C5AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013C5AF4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323868);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLERangeManagerConcrete::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323868);
    }
    float v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      v15 = "";
      __int16 v16 = 2082;
      v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLERangeManagerConcrete::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1013C8F70(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013C5CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013C5CD4(uint64_t a1)
{
  *(void *)a1 = off_102323770;
  sub_1013C5DE0(a1);
  sub_100789AA0(a1 + 296, *(void **)(a1 + 304));
  sub_1000DB264(a1 + 128, *(char **)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1013E12C4(a1);
}

void sub_1013C5DA8(uint64_t a1)
{
  sub_1013C5CD4(a1);

  operator delete();
}

void sub_1013C5DE0(uint64_t a1)
{
  sub_1013C5F04((unsigned char *)a1);
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  v4 = *(void **)(a1 + 128);
  v5 = (void *)(a1 + 136);
  if (v4 != (void *)(a1 + 136))
  {
    do
    {
      uint64_t v6 = v4[7];
      if (v6)
      {
        sub_1013CAAB0(v6);
        operator delete();
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          float v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          float v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v5);
  }
  sub_1000DB264(a1 + 128, *(char **)(a1 + 136));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v5;
  sub_100789AA0(a1 + 296, *(void **)(a1 + 304));
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = a1 + 304;
}

unsigned char *sub_1013C5F04(unsigned char *result)
{
  if (result[320])
  {
    uint64_t v1 = result;
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *((void *)v1 + 39);
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2050;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Stopping range manager\", \"totalRegions\":%{public}lu}", (uint8_t *)v4, 0x1Cu);
    }
    v1[320] = 0;
    [objc_msgSend(*((id *)v1 + 4), "vendor") proxyForService:@"CLBTLEBeaconProvider"] stopScan];
    [*(id *)(*((void *)v1 + 15) + 16) unregister:*(void *)(*((void *)v1 + 15) + 8) forNotification:1];
    return [*(id *)(*((void *)v1 + 14) + 16) unregister:*(void *)(*((void *)v1 + 14) + 8) forNotification:0];
  }
  return result;
}

BOOL sub_1013C6034(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  BOOL v7 = sub_1013C65C8(a1, a2, a3, a4);
  BOOL v8 = v7;
  if (v7)
  {
    BOOL v21 = v7;
    for (uint64_t i = *(void *)(a4 + 8); i != a4; uint64_t i = *(void *)(i + 8))
    {
      memset(__p, 0, 36);
      *(void *)buf = off_102323898;
      std::string::operator=((std::string *)__p, (const std::string *)(i + 24));
      int v10 = *(_DWORD *)(i + 52);
      *(_DWORD *)&__p[24] = *(_DWORD *)(i + 48);
      *(_DWORD *)&__p[28] = v10;
      char v11 = (void (***)(void))sub_1013CBBEC(a1 + 296, (uint64_t)buf);
      float v12 = v11;
      if ((void (***)(void))(a1 + 304) == v11)
      {
        *(_DWORD *)&__p[32] = 1;
      }
      else
      {
        *(_DWORD *)&__p[32] = *((_DWORD *)v11 + 18) + 1;
        sub_1000F0A30((uint64_t **)(a1 + 296), (uint64_t *)v11);
        (*v12[4])();
        operator delete(v12);
      }
      sub_1013CBD98((uint64_t **)(a1 + 296), (uint64_t)buf, (uint64_t)buf);
      *(void *)buf = off_1022B3DE8;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    int v13 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a4 + 16);
      uint64_t v15 = *(void *)(a1 + 312);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__p = 2082;
      *(void *)&__p[2] = "";
      *(_WORD *)&__p[10] = 2050;
      *(void *)&__p[12] = v14;
      *(_WORD *)&__p[20] = 2050;
      *(void *)&__p[22] = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Registered regions for ranging\", \"numRegions\":%{public}lu, \"totalRegions\":%{public}lu}", buf, 0x26u);
    }
    if (*(_DWORD *)(a1 + 152))
    {
      *(void *)__p = off_1022B3DE8;
      memset(&__p[8], 0, 32);
      long long v25 = 0u;
      uint64_t v26 = 0;
      *(_DWORD *)buf = 1;
      for (j = *(const std::string **)(a4 + 8);
            j != (const std::string *)a4;
            j = (const std::string *)j->__r_.__value_.__l.__size_)
      {
        std::string::operator=((std::string *)&__p[8], j + 1);
        *(void *)&__p[32] = j[2].__r_.__value_.__l.__data_;
        LODWORD(v22[0]) = 0;
        (*(void (**)(uint64_t, void ***, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v22, buf, 0, a2, 0);
      }
      v22[0] = (void **)&v25;
      sub_1013CABF4(v22);
      *(void *)__p = off_1022B3DE8;
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      BOOL v8 = v21;
    }
    else
    {
      sub_1013C6B74(a1);
      BOOL v8 = v21;
    }
    if (sub_1000FC450())
    {
      sub_1000E9354(v22);
      for (uint64_t k = *(void *)(a4 + 8); k != a4; uint64_t k = *(void *)(k + 8))
      {
        (*(void (**)(uint8_t *__return_ptr))(*(void *)(k + 16) + 16))(buf);
        sub_1004D57AC((uint64_t)v22, "ranging_register", (char *)buf);
        if ((__p[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_1000FC45C((uint64_t)v22, (uint64_t)"locationd");
      sub_10013F3C4(v22);
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    v17 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unable to register with base-class", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023238C8);
      }
      LOWORD(v22[0]) = 0;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBTLERangeManagerConcrete::registerForNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  return v8;
}

void sub_1013C6540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, void *a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
}

BOOL sub_1013C65C8(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v39 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v38 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          v23 = (uint64_t *)v17;
        }
        else {
          v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          v28 = (uint64_t *)v24;
        }
        else {
          v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        uint64_t v34 = *(void *)(v25 + 56);
        *(void *)buf = &v39;
        v35 = (uint64_t *)(sub_1013CB344((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5);
        if (v35 != (uint64_t *)a4) {
          sub_1013C2EC8(v35, *(void *)(a4 + 8), a4);
        }
        *(_DWORD *)buf = 0;
        *(void *)&uint8_t buf[8] = off_1022B3DE8;
        *(_OWORD *)&buf[16] = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        uint64_t v46 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1013CAE94();
        }
        *(void *)v40 = &v45;
        sub_1013CABF4((void ***)v40);
        *(void *)&uint8_t buf[8] = off_1022B3DE8;
        if (SBYTE7(v44) < 0) {
          operator delete(*(void **)&buf[16]);
        }
        if (v34) {
          goto LABEL_47;
        }
      }
      else
      {
LABEL_42:
        char v29 = byte_102477D88;
        *(_DWORD *)v40 = *a3;
        *(void *)buf = v40;
        *((unsigned char *)sub_1013CB110((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)v40 = *a3;
        *(void *)buf = v40;
        v30 = sub_1013CB110((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        *(_DWORD *)v40 = *a3;
        *(void *)buf = v40;
        v32 = sub_1013CB110((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)buf = &v39;
        v33 = (uint64_t *)(sub_1013CB344(v32 + 5, &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5);
        if (v33 != (uint64_t *)a4) {
          sub_1013C2EC8(v33, *(void *)(a4 + 8), a4);
        }
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_47:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000EDED4((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323868);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323868);
    }
    v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      v36 = (void *)*v36;
    }
    *(_DWORD *)v40 = 136446466;
    *(void *)&v40[4] = v36;
    __int16 v41 = 1026;
    int v42 = v39;
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_1013C6AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1013C6B08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013C6B08(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_1013CABF4(&v3);
  *(void *)(a1 + 8) = off_1022B3DE8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1013C6B74(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023238C8);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Starting the manager if there's an interest in ranging", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStartIfInterested()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 320))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: The manager is already started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 == -1)
      {
LABEL_21:
        __int16 v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStartIfInterested()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_30:
      dispatch_once(&qword_102419390, &stru_1023238C8);
      goto LABEL_21;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 152) && *(void *)(a1 + 312))
    {
      sub_1013C93BC((unsigned char *)a1);
      return;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: There's no interest in ranging, the manager wont be started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 == -1) {
        goto LABEL_21;
      }
      goto LABEL_30;
    }
  }
}

BOOL sub_1013C6F1C(uint64_t a1, int a2, int *a3)
{
  uint64_t v17 = (uint64_t)&v17;
  uint64_t v18 = &v17;
  uint64_t v19 = 0;
  if (sub_1013C7410(a1, a2, a3, &v17))
  {
    for (uint64_t i = v18; i != &v17; uint64_t i = (uint64_t *)i[1])
    {
      memset(__p, 0, sizeof(__p));
      *(void *)buf = off_102323898;
      int v22 = 0;
      std::string::operator=((std::string *)__p, (const std::string *)i + 1);
      int v7 = *((_DWORD *)i + 13);
      *(_DWORD *)&__p[24] = *((_DWORD *)i + 12);
      *(_DWORD *)&__p[28] = v7;
      BOOL v8 = (void (***)(void))sub_1013CBBEC(a1 + 296, (uint64_t)buf);
      BOOL v9 = v8;
      if ((void (***)(void))(a1 + 304) != v8)
      {
        int v22 = *((_DWORD *)v8 + 18) - 1;
        sub_1000F0A30((uint64_t **)(a1 + 296), (uint64_t *)v8);
        (*v9[4])();
        operator delete(v9);
        if (v22) {
          sub_1013CBD98((uint64_t **)(a1 + 296), (uint64_t)buf, (uint64_t)buf);
        }
      }
      *(void *)buf = off_1022B3DE8;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v10 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 312);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__p = 2082;
      *(void *)&__p[2] = "";
      *(_WORD *)&__p[10] = 2050;
      *(void *)&__p[12] = v19;
      *(_WORD *)&__p[20] = 2050;
      *(void *)&__p[22] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Unregistered regions from ranging\", \"numRegions\":%{public}lu, \"totalRegions\":%{public}lu}", buf, 0x26u);
    }
    sub_1013C74CC(a1);
    if (sub_1000FC450())
    {
      sub_1000E9354(v23);
      for (j = v18; j != &v17; j = (uint64_t *)j[1])
      {
        (*(void (**)(uint8_t *__return_ptr))(j[2] + 16))(buf);
        sub_1004D57AC((uint64_t)v23, "ranging_unregister", (char *)buf);
        if ((__p[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_1000FC45C((uint64_t)v23, (uint64_t)"locationd");
      sub_10013F3C4(v23);
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    int v13 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Warning Unable to retrieve registration info for client,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023238C8);
      }
      v23[0] = 67240192;
      v23[1] = a2;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLERangeManagerConcrete::unregisterForNotification(int, const CLBTLERangeManager_Type::Notification &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  BOOL v14 = sub_1013C7878((char *)a1, a2, a3);
  sub_10013415C(&v17);
  return v14;
}

void sub_1013C738C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t sub_1013C7410(uint64_t a1, int a2, int *a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = v7;
  if (!v7) {
    return 0;
  }
  int v8 = *a3;
  uint64_t v9 = v5;
  do
  {
    int v10 = *(_DWORD *)(v6 + 32);
    BOOL v11 = v10 < v8;
    if (v10 >= v8) {
      BOOL v12 = (uint64_t *)v6;
    }
    else {
      BOOL v12 = (uint64_t *)(v6 + 8);
    }
    if (!v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = *v12;
  }
  while (*v12);
  if (v9 == v5) {
    return 0;
  }
  if (v8 < *(_DWORD *)(v9 + 32)) {
    return 0;
  }
  uint64_t v15 = *(void *)(v9 + 48);
  uint64_t v13 = v9 + 48;
  uint64_t v14 = v15;
  if (!v15) {
    return 0;
  }
  uint64_t v16 = v13;
  do
  {
    int v17 = *(_DWORD *)(v14 + 32);
    BOOL v18 = v17 < a2;
    if (v17 >= a2) {
      uint64_t v19 = (uint64_t *)v14;
    }
    else {
      uint64_t v19 = (uint64_t *)(v14 + 8);
    }
    if (!v18) {
      uint64_t v16 = v14;
    }
    uint64_t v14 = *v19;
  }
  while (*v19);
  if (v16 == v13 || *(_DWORD *)(v16 + 32) > a2) {
    return 0;
  }
  if ((uint64_t *)(v16 + 40) != a4) {
    sub_1013C2EC8(a4, *(void *)(v16 + 48), v16 + 40);
  }
  return 1;
}

void sub_1013C74CC(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023238C8);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Stopping the manager if there's no interest in ranging", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStopIfNotInterested()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB:The manager is already stopped", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1)
    {
LABEL_28:
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedStopIfNotInterested()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return;
    }
LABEL_30:
    dispatch_once(&qword_102419390, &stru_1023238C8);
    goto LABEL_28;
  }
  if (*(_DWORD *)(a1 + 152) || !*(void *)(a1 + 312))
  {
    sub_1013C5F04((unsigned char *)a1);
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023238C8);
  }
  v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: There's an interest in ranging, the manager wont be stopped", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1) {
      goto LABEL_28;
    }
    goto LABEL_30;
  }
}

BOOL sub_1013C7878(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      int v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          BOOL v11 = (uint64_t *)v6;
        }
        else {
          BOOL v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          int v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              uint64_t v19 = (char **)v13;
            }
            else {
              uint64_t v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                uint64_t v25 = (uint64_t *)v20;
              }
              else {
                uint64_t v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1013CCBDC((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102323868);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  v28 = __p;
                }
                else {
                  v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102323868);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  v30 = buf;
                }
                else {
                  v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                v40 = v30;
                v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t *sub_1013C7C4C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1013C7C74()
{
  return 1;
}

uint64_t sub_1013C7C7C(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023238C8);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Range manager has lost its last connection\"}", (uint8_t *)v4, 0x12u);
  }
  sub_1013C5F04((unsigned char *)a1);
  sub_100789AA0(a1 + 296, *(void **)(a1 + 304));
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  return 1;
}

uint64_t sub_1013C7D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 8);
  if (v6 == a6) {
    return 0;
  }
  uint64_t v9 = a4 + 8;
  while (v9 != v6 + 16 && (*(_DWORD *)(a4 + 44) != *(_DWORD *)(v6 + 52) || (sub_100C84840(v9, v6 + 16) & 1) == 0))
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == a6) {
      return 0;
    }
  }
  return 1;
}

void sub_1013C7DF8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3)
  {
    if (*a3 == 2)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023238C8);
      }
      __int16 v5 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(unsigned __int8 *)(a4 + 112);
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: Received Bluetooth LE power,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1023238C8);
        }
        int v37 = *(unsigned __int8 *)(a4 + 112);
        LODWORD(__p) = 67240192;
        HIDWORD(__p) = v37;
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)", "%s\n", v38);
        if (v38 != buf) {
          free(v38);
        }
      }
      if (*(unsigned char *)(a4 + 112)) {
        sub_1013C89FC(a1, 1);
      }
      else {
        sub_1013C8BEC((unsigned char *)a1, 1);
      }
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a4 + 16);
      uint64_t v9 = *(void *)(a1 + 144);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v8;
      *(_WORD *)&buf[28] = 2050;
      *(void *)&buf[30] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Received proximity scan, updating beacon cache with devices\", \"samples\":%{public}lu, \"totalCached\":%{public}lu}", buf, 0x26u);
    }
    for (uint64_t i = *(void *)(a4 + 8); i != a4; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v11 = sub_10012FFE0(a1 + 128, (const void **)(i + 16));
      if (a1 + 136 == v11) {
        operator new();
      }
      uint64_t v13 = v11 + 56;
      uint64_t v12 = *(void *)(v11 + 56);
      std::string::operator=((std::string *)(v12 + 8), (const std::string *)(i + 56));
      *(void *)(v12 + 32) = *(void *)(i + 80);
      sub_1013B374C(*(void *)(*(void *)v13 + 40), *(__int16 *)(i + 40), *(_WORD *)(i + 96), *(double *)(i + 88));
      if (*(double *)(*(void *)v13 + 48) < *(double *)(i + 88)) {
        *(void *)(*(void *)v13 + 48) = *(void *)(i + 88);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    int v15 = *(void **)(a1 + 128);
    v40 = (void *)(a1 + 128);
    uint64_t v16 = (void *)(a1 + 136);
    if (v15 != (void *)(a1 + 136))
    {
      do
      {
        uint64_t v17 = v15[7];
        if (*(double *)(v17 + 48) < Current + -10.0)
        {
          sub_1013CAAB0(v17);
          operator delete();
        }
        BOOL v18 = (void *)v15[1];
        if (v18)
        {
          do
          {
            uint64_t v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v20 = v15;
            int v15 = (void *)v15[2];
          }
          while ((void *)*v15 != v20);
          uint64_t v19 = v15;
        }
        int v15 = v19;
      }
      while (v19 != v16);
    }
    double v21 = CFAbsoluteTimeGetCurrent();
    int v22 = *(void **)(a1 + 296);
    if (v22 != (void *)(a1 + 304))
    {
      double v23 = v21;
      do
      {
        LODWORD(__p) = 0;
        v49 = off_1022B3DE8;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        unint64_t v53 = 0;
        std::string::operator=((std::string *)&v50, (const std::string *)(v22 + 5));
        *((void *)&v51 + 1) = v22[8];
        BOOL v24 = (void *)*v40;
        if ((void *)*v40 != v16)
        {
          do
          {
            if (sub_100C84840((uint64_t)&v49, v24[7]))
            {
              memset(&buf[8], 0, 32);
              int v55 = 0;
              *(void *)buf = off_1022B3DE8;
              unint64_t v56 = 0xBFF0000000000000;
              __int16 v57 = 0;
              v59 = 0;
              uint64_t v60 = 0;
              v58 = 0;
              uint64_t v25 = v24[7];
              std::string::operator=((std::string *)&buf[8], (const std::string *)(v25 + 8));
              *(void *)&unsigned char buf[32] = *(void *)(v25 + 32);
              int v41 = 0;
              *(void *)&v42[4] = 0xBFF0000000000000;
              *(_WORD *)&v42[12] = 0;
              uint64_t v46 = 0;
              uint64_t v47 = 0;
              long long v45 = 0;
              if (sub_1013B3914(*(void *)(v24[7] + 40), (unsigned int *)(a1 + 160), &v41, (uint64_t *)&buf[8], (unsigned __int16 *)&buf[32], (unsigned __int16 *)&buf[34], v23))
              {
                int v55 = v41;
                unint64_t v56 = *(void *)&v42[4];
                __int16 v57 = *(_WORD *)&v42[12];
                sub_100A60544(&v58, (char *)v45, v46, v46 - (unsigned char *)v45);
              }
              else
              {
                int v55 = 0;
                unint64_t v56 = 0xBFF0000000000000;
                __int16 v57 = 0;
                v59 = v58;
              }
              uint64_t v26 = *((void *)&v52 + 1);
              if (*((void *)&v52 + 1) >= v53)
              {
                uint64_t v27 = sub_1013CCC60((uint64_t *)&v52, (uint64_t)buf);
              }
              else
              {
                sub_1013CB644((uint64_t)&v53, *((uint64_t *)&v52 + 1), (uint64_t)buf);
                uint64_t v27 = v26 + 88;
              }
              *((void *)&v52 + 1) = v27;
              if (v45)
              {
                uint64_t v46 = (char *)v45;
                operator delete(v45);
              }
              if (v58)
              {
                v59 = v58;
                operator delete(v58);
              }
              *(void *)buf = off_1022B3DE8;
              if ((buf[31] & 0x80000000) != 0) {
                operator delete(*(void **)&buf[8]);
              }
            }
            v28 = (void *)v24[1];
            if (v28)
            {
              do
              {
                char v29 = v28;
                v28 = (void *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                char v29 = (void *)v24[2];
                BOOL v30 = *v29 == (void)v24;
                BOOL v24 = v29;
              }
              while (!v30);
            }
            BOOL v24 = v29;
          }
          while (v29 != v16);
        }
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1023238C8);
        }
        v31 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
        {
          int v32 = &v50;
          if (SBYTE7(v51) < 0) {
            int v32 = (long long *)v50;
          }
          *(_DWORD *)buf = 136381699;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 1025;
          *(_DWORD *)&buf[14] = WORD4(v51);
          *(_WORD *)&buf[18] = 1025;
          *(_DWORD *)&buf[20] = WORD5(v51);
          *(_WORD *)&buf[24] = 1026;
          *(_DWORD *)&buf[26] = HIDWORD(v51);
          *(_WORD *)&buf[30] = 2050;
          *(void *)&unsigned char buf[32] = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v52 + 1) - v52) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "iB: Notifying region proximityUUID,'%{private}s', major,%{private}d, minor,%{private}d, mask,%{public}d with beacons,%{public}zu", buf, 0x28u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1023238C8);
          }
          v35 = &v50;
          if (SBYTE7(v51) < 0) {
            v35 = (long long *)v50;
          }
          int v41 = 136381699;
          *(void *)char v42 = v35;
          *(_WORD *)&v42[8] = 1025;
          *(_DWORD *)&v42[10] = WORD4(v51);
          __int16 v43 = 1025;
          int v44 = WORD5(v51);
          LOWORD(v45) = 1026;
          *(_DWORD *)((char *)&v45 + 2) = HIDWORD(v51);
          HIWORD(v45) = 2050;
          uint64_t v46 = (char *)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v52 + 1) - v52) >> 3));
          char v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)", "%s\n", v36);
          if (v36 != buf) {
            free(v36);
          }
        }
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, unsigned char *, void **, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &__p, 0, 0xFFFFFFFFLL, 0);
        *(void *)buf = &v52;
        sub_1013CABF4((void ***)buf);
        v49 = off_1022B3DE8;
        if (SBYTE7(v51) < 0) {
          operator delete((void *)v50);
        }
        v33 = (void *)v22[1];
        if (v33)
        {
          do
          {
            __int16 v34 = v33;
            v33 = (void *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            __int16 v34 = (void *)v22[2];
            BOOL v30 = *v34 == (void)v22;
            int v22 = v34;
          }
          while (!v30);
        }
        int v22 = v34;
      }
      while (v34 != (void *)(a1 + 304));
    }
  }
}

void sub_1013C8980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1013C89FC(uint64_t a1, int a2)
{
  if ((*(_DWORD *)(a1 + 152) & a2) != 0)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 152);
      *(_DWORD *)buf = 67240448;
      int v8 = a2;
      __int16 v9 = 1026;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing exception,%{public}#x, from stored exceptions %{public}#x.\n", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023238C8);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedResumeForException(RangingExceptions)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(_DWORD *)(a1 + 152) &= ~a2;
    sub_1013C6B74(a1);
  }
}

unsigned char *sub_1013C8BEC(unsigned char *result, int a2)
{
  int v2 = *((_DWORD *)result + 38);
  if ((v2 & a2) == 0)
  {
    v4 = result;
    if (a2 && !v2)
    {
      uint64_t v19 = off_1022B3DE8;
      *(_OWORD *)__p = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v23 = 0;
      *(_DWORD *)buf = 1;
      int v5 = (void *)*((void *)result + 37);
      int v6 = result + 304;
      if (v5 != (void *)(result + 304))
      {
        do
        {
          std::string::operator=((std::string *)__p, (const std::string *)(v5 + 5));
          *((void *)&v21 + 1) = v5[8];
          LODWORD(v14) = 0;
          (*(void (**)(_DWORD *, void ***, uint8_t *, void, uint64_t, void))(*(void *)v4 + 152))(v4, &v14, buf, 0, 0xFFFFFFFFLL, 0);
          uint64_t v7 = (void *)v5[1];
          if (v7)
          {
            do
            {
              int v8 = v7;
              uint64_t v7 = (void *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              int v8 = (void *)v5[2];
              BOOL v9 = *v8 == (void)v5;
              int v5 = v8;
            }
            while (!v9);
          }
          int v5 = v8;
        }
        while (v8 != v6);
      }
      uint64_t v14 = (void **)&v22;
      sub_1013CABF4(&v14);
      uint64_t v19 = off_1022B3DE8;
      if (SBYTE7(v21) < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    int v10 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v11 = v4[38];
      *(_DWORD *)buf = 67240448;
      int v18 = a2;
      LOWORD(v19) = 1026;
      *(_DWORD *)((char *)&v19 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iB: Adding exception,%{public}#x, to stored exceptions %{public}#x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023238C8);
      }
      int v12 = v4[38];
      LODWORD(v14) = 67240448;
      HIDWORD(v14) = a2;
      __int16 v15 = 1026;
      int v16 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::unlockedSuspendForException(RangingExceptions)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    v4[38] |= a2;
    return sub_1013C5F04(v4);
  }
  return result;
}

void sub_1013C8EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1013C8F10(uint64_t a1)
{
  int v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1013C8F70(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  if (*a3) {
    BOOL v6 = v5 == 2;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    uint64_t v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a3;
      *(_DWORD *)buf = 67240192;
      int v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning Unexpected notification %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1)
    {
LABEL_31:
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return;
    }
LABEL_33:
    dispatch_once(&qword_102419390, &stru_1023238C8);
    goto LABEL_31;
  }
  if (v5 == 1)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    int v11 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *a4;
      *(_DWORD *)buf = 67174657;
      int v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "iB: Received activity update of activity,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023238C8);
      }
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLERangeManagerConcrete::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    *(_OWORD *)(a1 + 160) = *(_OWORD *)a4;
    long long v13 = *((_OWORD *)a4 + 1);
    long long v14 = *((_OWORD *)a4 + 2);
    long long v15 = *((_OWORD *)a4 + 4);
    *(_OWORD *)(a1 + 208) = *((_OWORD *)a4 + 3);
    *(_OWORD *)(a1 + 224) = v15;
    *(_OWORD *)(a1 + 176) = v13;
    *(_OWORD *)(a1 + 192) = v14;
    long long v16 = *((_OWORD *)a4 + 5);
    long long v17 = *((_OWORD *)a4 + 6);
    long long v18 = *((_OWORD *)a4 + 7);
    *(void *)(a1 + 288) = *((void *)a4 + 16);
    *(_OWORD *)(a1 + 256) = v17;
    *(_OWORD *)(a1 + 272) = v18;
    *(_OWORD *)(a1 + 240) = v16;
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023238C8);
  }
  uint64_t v19 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    int v20 = *a3;
    *(_DWORD *)buf = 67240192;
    int v24 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning Unhandled notification %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1) {
      goto LABEL_31;
    }
    goto LABEL_33;
  }
}

unsigned char *sub_1013C93BC(unsigned char *result)
{
  if (!result[320])
  {
    uint64_t v1 = result;
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023238C8);
    }
    int v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *((void *)v1 + 39);
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      BOOL v6 = "";
      __int16 v7 = 2050;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Starting range manager\", \"totalRegions\":%{public}lu}", (uint8_t *)v4, 0x1Cu);
    }
    [*(id *)(*((void *)v1 + 14) + 16) register:*(void *)(*((void *)v1 + 14) + 8) forNotification:0 registrationInfo:0];
    [*(id *)(*((void *)v1 + 15) + 16) register:*(void *)(*((void *)v1 + 15) + 8) forNotification:1 registrationInfo:0];
    BOOL result = [[[objc_msgSend(*((id *)v1 + 4), "vendor") proxyForService:@"CLBTLEBeaconProvider"] startScan];
    v1[320] = 1;
  }
  return result;
}

void sub_1013C9500(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        BOOL v9 = (uint64_t *)v4;
      }
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323868);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102323868);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        long long v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::removeClient(int) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1013C9790(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1013CCFD4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1013C9844(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1013C988C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1013C98D4(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1013C991C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102477DA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_102477DA8);
    a1 = v4;
    if (v3)
    {
      qword_102477D90 = (uint64_t)&qword_102477D90;
      *(void *)algn_102477D98 = &qword_102477D90;
      qword_102477DA0 = 0;
      __cxa_atexit((void (*)(void *))sub_1013C7C4C, &qword_102477D90, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102477DA8);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 96);

  return v1();
}

BOOL sub_1013C99F8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323868);
    }
    int v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136446466;
      int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323868);
      }
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1013C9C7C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(_DWORD *)a3 = *(_DWORD *)v12;
  std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v12 + 16));
  *(void *)(a3 + 40) = *(void *)(v12 + 40);
  if (v12 != a3) {
    sub_1013CD3F4(a3 + 48, *(void *)(v12 + 48), *(void *)(v12 + 56), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v12 + 56) - *(void *)(v12 + 48)) >> 3));
  }
  return 1;
}

uint64_t sub_1013C9D3C(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1013CC8A4(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_1013CB110((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1013C9DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013C9DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 0;
  uint64_t v5 = off_1022B3DE8;
  *(_OWORD *)__p = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  long long v10 = (void **)&v8;
  sub_1013CABF4(&v10);
  uint64_t v5 = off_1022B3DE8;
  if (SBYTE7(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1013C9EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1013C9EB4(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323868);
  }
  uint64_t v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    int v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1013CC65C((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_1013CC57C((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1013CB2E8((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1013CB2E8((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    BOOL v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1013CC8A4(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    BOOL v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1013CC004();
  }
  os_activity_scope_leave(&state);
}

void sub_1013CA484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1013CA4D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323868);
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      long long v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323868);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323868);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      long long v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323868);
      }
      BOOL v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102323868);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              long long v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102323868);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                uint64_t v9 = v15;
              }
              while (!v16);
            }
            uint64_t v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1013CAA80(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1013CAAB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    sub_10051310C(v2 + 272);
    sub_100EDFAC4(v2 + 176);
    uint64_t v3 = *(void **)(v2 + 112);
    if (v3)
    {
      *(void *)(v2 + 120) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1013CAB54(uint64_t a1)
{
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_1013CABC4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1013CABF4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_1013CAC8C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1013CAC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 64);
  if (v3)
  {
    *(void *)(a2 + 72) = v3;
    operator delete(v3);
  }
  *(void *)a2 = off_1022B3DE8;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v4 = *(void **)(a2 + 8);
    operator delete(v4);
  }
}

void sub_1013CAD00(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_1022B3DE8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 48) = 0;
  float v3 = (float)a3;
  uint64_t v4 = 0x3FE666663F800000;
  int v5 = 65436;
  long long v6 = xmmword_101DB57A0;
  long long v7 = xmmword_101DB57B0;
  long long v8 = xmmword_101DB57C0;
  int v9 = 1092616192;
  uint64_t v10 = 3;
  operator new();
}

void sub_1013CAE38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1013CAE94()
{
}

void sub_1013CAFD8()
{
}

unsigned char *sub_1013CB018(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    long long v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1013CB79C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    int v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1013CB344(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

uint64_t **sub_1013CB110(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  uint64_t v8 = a1 + 1;
  id v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        long long v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    int v12 = operator new(0x58uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((void *)v12 + 9) = 0;
    *((void *)v12 + 10) = 0;
    *((void *)v12 + 5) = v12 + 12;
    *((void *)v12 + 8) = 0;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1013CB210((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1013CB210(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1013CB268((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1013CB268(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  float v3 = *(void **)(a1 + 16);

  sub_1013CB2E8(a1 + 8, v3);
}

uint64_t sub_1013CB2AC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1013CB2E8(a1, *(void **)(a1 + 8));
  return a1;
}

void sub_1013CB2E8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1013CB2E8(a1, *a2);
    sub_1013CB2E8(a1, a2[1]);
    sub_10013415C(a2 + 5);
    operator delete(a2);
  }
}

uint64_t **sub_1013CB344(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  uint64_t v8 = a1 + 1;
  id v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        long long v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    int v12 = operator new(0x40uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((void *)v12 + 5) = v12 + 10;
    *((void *)v12 + 6) = v12 + 10;
    *((void *)v12 + 7) = 0;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1013CB434((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1013CB434(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10013415C(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t sub_1013CB48C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 48);
    sub_1013CABF4(&v2);
    *(void *)(v1 + 8) = off_1022B3DE8;
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

void *sub_1013CB510(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_1000DA770(result, a4);
    BOOL result = (void *)sub_1013CB598((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1013CB578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1013CABF4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CB598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1013CB644(a1, v4, v6);
      v6 += 88;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_1013CB710((uint64_t)v9);
  return v4;
}

void sub_1013CB630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1013CB644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = off_1022B3DE8;
  int v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)int v5 = v6;
  }
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 40);
  __int16 v8 = *(_WORD *)(a3 + 56);
  *(void *)(a2 + 64) = 0;
  *(_WORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return sub_10016989C((void *)(a2 + 64), *(const void **)(a3 + 64), *(void *)(a3 + 72), *(void *)(a3 + 72) - *(void *)(a3 + 64));
}

void sub_1013CB6F0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v2 = v3;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013CB710(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1013CB748((uint64_t *)a1);
  }
  return a1;
}

void sub_1013CB748(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      sub_1013CAC8C(v5, v3);
    }
    while (v3 != v4);
  }
}

id sub_1013CB79C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1013CB7FC(a1);
}

id sub_1013CB7FC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023238E8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB581ELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBTLERangeManager_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023238E8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB581ELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1023238E8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1013CBBBC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_1013CBBEC(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_1013CBC68((uint64_t)(v3 + 4), a2);
    long long v7 = v3 + 1;
    if (!v6)
    {
      long long v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1013CBC68(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

BOOL sub_1013CBC68(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 16))(v13, a2);
  int v3 = (char)v14;
  uint64_t v4 = (void *)v13[0];
  unsigned __int8 v5 = v16;
  if ((v16 & 0x80u) == 0) {
    size_t v6 = v16;
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  if ((v16 & 0x80u) == 0) {
    long long v7 = __p;
  }
  else {
    long long v7 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    size_t v8 = v14;
  }
  else {
    size_t v8 = v13[1];
  }
  if ((v14 & 0x80u) == 0) {
    __int16 v9 = v13;
  }
  else {
    __int16 v9 = (void *)v13[0];
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((v16 & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v11) {
    return v11 < 0;
  }
  else {
    return v6 < v8;
  }
}

void sub_1013CBD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1013CBD98(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = (uint64_t **)sub_1013CBE2C((uint64_t)a1, &v10, a2);
  size_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = v5;
    sub_1013CBEC0((uint64_t)a1, a3, (uint64_t)v9);
    sub_1000EDF90(a1, v10, v7, v9[0]);
    size_t v6 = v9[0];
    v9[0] = 0;
    sub_10078B61C((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_1013CBE2C(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned __int8 v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!sub_1013CBC68(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        unsigned __int8 v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1013CBC68(v8, a3)) {
        break;
      }
      unsigned __int8 v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    long long v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

unsigned char *sub_1013CBEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = sub_1013CBF30(v5, (uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1013CBF18(_Unwind_Exception *a1)
{
  sub_10078B61C(v1, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_1013CBF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = off_1022B3DE8;
  BOOL result = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    BOOL result = sub_1000DC48C(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)BOOL result = v6;
  }
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)a2 = off_102323898;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  return result;
}

uint64_t sub_1013CBFC8(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1013CB2E8(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1013CC004()
{
}

void sub_1013CC148()
{
}

void sub_1013CC188(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v49 = v9;
        id v13 = sub_1013CB79C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        unsigned __int8 v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          char v15 = a1 + 11;
          unsigned __int8 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                long long v22 = (uint64_t *)v17;
              }
              else {
                long long v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v48 = v19;
              sub_1013CB018(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              v49 = v29;
              uint64_t v34 = v29[6];
              unsigned __int8 v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unsigned __int8 v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unsigned __int8 v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      unsigned __int8 v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102323868);
              }
              int v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                int v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102323868);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t **sub_1013CC57C(uint64_t **a1, __n128 *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (__n128 *)operator new(0x58uLL);
  v12[0] = v5;
  v12[1] = v4;
  sub_100448178(v5 + 2, a2);
  char v13 = 1;
  long long v7 = a1[1];
  if (v7)
  {
    int v8 = *v6;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v7 = *v9;
        uint64_t v4 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v7 = v9[1];
      if (!v7)
      {
        uint64_t v4 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v9 = v4;
LABEL_10:
    sub_1000EDF90(a1, (uint64_t)v9, v4, (uint64_t *)v5);
    v12[0] = 0;
    __int16 v9 = (uint64_t **)v5;
  }
  sub_1013CB210((uint64_t)v12, 0);
  return v9;
}

uint64_t sub_1013CC65C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_1013CC6B4((uint64_t *)(a1 + 8), a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t *sub_1013CC6B4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1013CC70C(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1013CC6F4(_Unwind_Exception *a1)
{
  sub_1013CB2E8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1013CC70C(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      BOOL result = sub_1013CC798(v5, v6, v4 + 8, v4 + 8);
      long long v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          long long v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1013CC798(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  long long v6 = sub_1002CF4AC(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    sub_1013CC830((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_1013CB434((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_1013CC830@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  BOOL result = sub_100B3F5D0((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1013CC88C(_Unwind_Exception *a1)
{
  sub_1013CB434(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1013CC8A4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x60uLL);
  BOOL result = sub_1013CC900(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013CC8EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013CC900(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102323918;
  sub_1013CCA10((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1013CC95C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013CC970(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102323918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013CC990(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102323918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1013CC9E4(uint64_t a1)
{
  sub_1013CCAF0((uint64_t)&v1, a1 + 24);
}

void *sub_1013CCA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = off_1022B3DE8;
  uint64_t v5 = (unsigned char *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return sub_1013CB510((void *)(a2 + 48), *(void *)(a3 + 48), *(void *)(a3 + 56), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 3));
}

void sub_1013CCAD0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v3;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013CCAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_1013CABF4(&v3);
  *(void *)(a2 + 8) = off_1022B3DE8;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

uint64_t sub_1013CCB58(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    id v2 = (void **)(v1 + 48);
    sub_1013CABF4(&v2);
    *(void *)(v1 + 8) = off_1022B3DE8;
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1013CCBDC(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_1000F0A30((uint64_t **)a1, (uint64_t *)v4);
  sub_10013415C((uint64_t *)(v4 + 40));
  operator delete((void *)v4);
  return 1;
}

uint64_t sub_1013CCC60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_1001D7FD4();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unsigned __int8 v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_1000DA8B4((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  int v10 = v7;
  uint64_t v11 = &v7[88 * v3];
  char v13 = &v7[88 * v6];
  sub_1013CB644((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 88;
  sub_1013CCD88(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1013CCF58(&v10);
  return v8;
}

void sub_1013CCD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1013CCF58((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1013CCD88(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1013CCE00((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1013CCE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 88;
      sub_1013CB644(a1, v7 - 88, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1013CCECC((uint64_t)v13);
  return v11;
}

void sub_1013CCEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1013CCECC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1013CCF04((uint64_t *)a1);
  }
  return a1;
}

void sub_1013CCF04(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1013CAC8C(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_1013CCF58(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1013CCF8C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    sub_1013CAC8C(v4, i - 88);
  }
}

id sub_1013CCFD4(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1013CD034(a1);
}

id sub_1013CD034(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023238E8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB58ADLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = std::list<CLBTLEBeaconRegion_Type::MonitoredRegion>, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023238E8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB58ADLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1023238E8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1013CD3F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  __int16 v9 = *(void **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1013CD598((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA770((void *)a1, v11);
    uint64_t v12 = sub_1013CB598(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1013CD608((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_1013CB598(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1013CD608((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      sub_1013CAC8C(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1013CD588(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1013CD590(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1013CD598(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_1013CAC8C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1013CD608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    std::string::operator=((std::string *)(a4 + v7 + 8), (const std::string *)(a2 + v7 + 8));
    *(void *)(v8 + 32) = *(void *)(a2 + v7 + 32);
    long long v9 = *(_OWORD *)(a2 + v7 + 40);
    *(_WORD *)(v8 + 56) = *(_WORD *)(a2 + v7 + 56);
    *(_OWORD *)(v8 + 40) = v9;
    if (a2 != a4) {
      sub_100A60544((void *)(v8 + 64), *(char **)(a2 + v7 + 64), *(char **)(a2 + v7 + 72), *(void *)(a2 + v7 + 72) - *(void *)(a2 + v7 + 64));
    }
    v7 += 88;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t sub_1013CDAB8()
{
  qword_102487790 = 0;
  qword_102487798 = 0;
  qword_1024877A0 = 0;
  v0 = operator new(0x48uLL);
  qword_102487798 = (uint64_t)v0 + 72;
  qword_1024877A0 = (uint64_t)v0 + 72;
  v0[2] = xmmword_101DB5930;
  v0[3] = unk_101DB5940;
  *((void *)v0 + 8) = 0x4003333333333333;
  _OWORD *v0 = xmmword_101DB5910;
  v0[1] = unk_101DB5920;
  qword_102487790 = (uint64_t)v0;

  return __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102487790, (void *)&_mh_execute_header);
}

void sub_1013CE4C4(uint64_t a1, uint64_t a2)
{
  id v4 = sub_100103D58(a2, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:@"com.apple.compass"]);
  uint64_t v5 = sub_100068950(a2, (uint64_t)v4, &xmmword_101D82EB8);
  if ([(CLClientManagerAuthorizationContext *)v5 isAuthorizedForServiceType:14])
  {
    uint64_t v6 = [*(id *)(a1 + 32) onConditionUpdateCallbackHandler];
    id v7 = [*(id *)(a1 + 32) monitoredIdentifier];
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    unint64_t v10 = (void (*)(void *, id, uint64_t, uint64_t, void))v6[2];
    v10(v6, v7, v8, v9, 0);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102323958);
    }
    unint64_t v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      [(CLClientManagerAuthorizationContext *)v5 registrationResult];
      v12[0] = 68289282;
      v12[1] = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = [(CLClientManagerAuthorizationContext *)v5 registrationResult];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#monitor #minimumAltitudeCondition skipping update because NanoCompass is not currently authorized for location updates\", \"NanoCompassRegistrationResult\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v12, 0x1Cu);
    }
  }
}

void sub_1013CE690(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1013CE770(id a1)
{
  qword_1024877A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCardioChangeServiceSilo"];
}

void sub_1013CE830(id a1)
{
  sub_100103240();
  if (sub_100106424())
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "CardioChangeServiceEnabled", &v1, 0);
    if (v2[1]) {
      byte_1024877B8 = 1;
    }
  }
}

void sub_1013CED68()
{
}

void sub_1013CEDC0()
{
}

void sub_1013CEF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101AB3158(v12, v11, v10);
  operator delete();
}

id sub_1013CEF40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onNatalimetryNotification:a2 data:a3];
}

void sub_1013CF22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013CF244(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    id v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        __int16 v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v16 = &v15[24 * v11];
      char v17 = &v15[24 * v14];
      *(double *)uint64_t v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      unint64_t v10 = v16 + 24;
      int v19 = (char *)*a1;
      char v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        char v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      unint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102323B60);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1013CF4FC(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    id v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        __int16 v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v16 = &v15[24 * v11];
      char v17 = &v15[24 * v14];
      *(double *)uint64_t v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      unint64_t v10 = v16 + 24;
      int v19 = (char *)*a1;
      char v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        char v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      unint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102323B60);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_1013CF7B4(uint64_t a1)
{
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_102323A88);
  }
  uint64_t v2 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating CardioChange db records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_102323A88);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCardioChangeService setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1013CF970(*(void *)(*(void *)(a1 + 32) + 40));
  return sub_1013CFF28(*(void *)(*(void *)(a1 + 32) + 48));
}

uint64_t sub_1013CF970(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102323B60);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)buf = 134218240;
      *(double *)BOOL v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      sub_1000D3E50();
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102323B60);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)buf = 134218240;
      *(double *)BOOL v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      sub_1000D3E50();
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1013D5900(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1013D5900(v12, (double **)a1);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)BOOL v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102323B60);
        }
        sub_1013D5900(*(void *)(a1 + 24), (double **)a1);
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    uint64_t v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_1013CFF28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102323B60);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)buf = 134218240;
      *(double *)BOOL v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      sub_1000D3E50();
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102323B60);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)buf = 134218240;
      *(double *)BOOL v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      sub_1000D3E50();
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1013D5B00(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102323B60);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1013D5B00(v12, (double **)a1);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)BOOL v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102323B60);
        }
        sub_1013D5B00(*(void *)(a1 + 24), (double **)a1);
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    uint64_t v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

void sub_1013D0F6C(uint64_t a1, xpc_activity_t activity)
{
  if (xpc_activity_get_state(activity))
  {
    [*(id *)(a1 + 32) onChangeEstimationActivity:activity];
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
    {
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_102323A88);
      }
      int v4 = qword_1024192B8;
      if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134349056;
        os_activity_scope_state_s state = (const char *)xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark CardioChangeEstimation activity as Continue. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        xpc_activity_get_state(activity);
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLCardioChangeService scheduleChangeEstimation]_block_invoke", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    xpc_object_t v6 = xpc_activity_copy_criteria(activity);
    if (!v6) {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    }
    int64_t int64 = xpc_dictionary_get_int64(v6, XPC_ACTIVITY_DELAY);
    if (int64 == *(void *)(a1 + 40))
    {
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_102323A88);
      }
      int v8 = qword_1024192B8;
      if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(const char **)(a1 + 40);
        *(_DWORD *)buf = 134349056;
        os_activity_scope_state_s state = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: CardioChangeEstimation already scheduled with a delay of %{public}lld seconds", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        double v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCardioChangeService scheduleChangeEstimation]_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    else
    {
      int64_t v11 = int64;
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_102323A88);
      }
      uint64_t v12 = qword_1024192B8;
      if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        os_activity_scope_state_s state = "com.apple.locationd.CardioChange.Processing";
        __int16 v17 = 2050;
        int64_t v18 = v11;
        __int16 v19 = 2050;
        uint64_t v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCardioChangeService scheduleChangeEstimation]_block_invoke", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      xpc_dictionary_set_int64(v6, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
      xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v6);
    }
    xpc_release(v6);
  }
}

uint64_t sub_1013D1830()
{
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  xpc_object_t v6 = sub_100177F90;
  double v7 = sub_1001776F4;
  uint64_t v0 = qword_102487868;
  uint64_t v8 = qword_102487868;
  if (!qword_102487868)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1013D53B4;
    unsigned __int8 v2[3] = &unk_1022B6BE8;
    v2[4] = &v3;
    sub_1013D53B4((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1013D1908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1013D1920(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    sub_1014E70E0(*(void *)(*(void *)(a1 + 40) + 120), a3, (uint64_t)v9);
    [*(id *)(a1 + 40) logAnalytics:v9];
    if (v10 == 1)
    {
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_102323A88);
      }
      int v4 = qword_1024192B8;
      if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLCardioChangeService: Change detected. Firing alarm and notifying watch.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCardioChangeService executeCardioChangeEstimation:]_block_invoke", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "universe"), "vendor"), "proxyForService:", @"CLCompanionNotifier"), "doAsync:", &stru_1023239B8);
    }
    sub_101A2AFB4(buf, "CardioChangeActivityInterval", &XPC_ACTIVITY_INTERVAL_7_DAYS, 0);
    return [*(id *)(a1 + 40) resetCardioChangeEstimationActivity:*(void *)(a1 + 32) withDelay:v12];
  }
  else
  {
    id result = (id)xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
    if (result != (id)3)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      xpc_object_t v6 = *(void **)(a1 + 40);
      return [v6 resetCardioChangeEstimationActivity:v7 withDelay:XPC_ACTIVITY_INTERVAL_1_HOUR];
    }
  }
  return result;
}

void sub_1013D1B9C(id a1, void *a2)
{
}

uint64_t sub_1013D1BE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t result = xpc_activity_should_defer((xpc_activity_t)result);
    if (result)
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      if (state == 3 || (xpc_activity_state_t v4 = state, xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3)))
      {
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        uint64_t v5 = qword_1024192B8;
        if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#warning: Activity deferred", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        xpc_object_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCardioChangeService executeCardioChangeEstimation:]_block_invoke", "%s\n");
      }
      else
      {
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        uint64_t v7 = qword_1024192B8;
        if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349056;
          xpc_activity_state_t v9 = v4;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to mark activity as Deferred. Current state is %{public}ld", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_102323A88);
        }
        xpc_object_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLCardioChangeService executeCardioChangeEstimation:]_block_invoke", "%s\n");
      }
      if (v6 != buf) {
        free(v6);
      }
      return 1;
    }
  }
  return result;
}

void sub_1013D2450(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_102323A88);
  }
  xpc_activity_state_t v4 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "AggregateFeatureComputeActivity timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_102323A88);
    }
    xpc_activity_get_state(a2);
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCardioChangeService scheduleDailyAggregateFeatureCompute]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) onDailyAggregateFeatureComputeActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_102323A88);
    }
    uint64_t v5 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_102323A88);
      }
      xpc_activity_get_state(a2);
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLCardioChangeService scheduleDailyAggregateFeatureCompute]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1013D328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

void sub_1013D39AC(id a1, void *a2)
{
}

void sub_1013D46E4(_Unwind_Exception *a1)
{
}

NSDictionary *sub_1013D4714(uint64_t a1)
{
  v21[0] = @"age_bin";
  float v2 = *(float *)(*(void *)(a1 + 32) + 68);
  __int16 v19 = 0;
  uint64_t v20 = 0;
  int64_t v18 = 0;
  sub_10010F834(&v18, (const void *)qword_1024877C8, *(uint64_t *)algn_1024877D0, (*(void *)algn_1024877D0 - qword_1024877C8) >> 2);
  if (v19 == v18)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = (v19 - (unsigned char *)v18) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (*((float *)v18 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }
  v22[0] = +[NSNumber numberWithInt:v3];
  v21[1] = @"gender";
  v22[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 64)];
  v21[2] = @"useBetaBlocker";
  v22[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 76)];
  v21[3] = @"userBMI_bin";
  float v5 = *(float *)(*(void *)(a1 + 32) + 72);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __p = 0;
  sub_10010F834(&__p, (const void *)qword_1024877E8, *(uint64_t *)algn_1024877F0, (*(void *)algn_1024877F0 - qword_1024877E8) >> 2);
  if (v16 == __p)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = (v16 - (unsigned char *)__p) >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    while (*((float *)__p + v6) < v5)
    {
      if (v7 == ++v6)
      {
        unint64_t v6 = v7;
        break;
      }
    }
  }
  v22[3] = +[NSNumber numberWithInt:v6];
  v21[4] = @"EstimateStatus";
  v22[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 80)];
  v21[5] = @"avgFromClusterVo2Max";
  LODWORD(v8) = *(_DWORD *)(*(void *)(a1 + 32) + 84);
  v22[5] = +[NSNumber numberWithFloat:v8];
  v21[6] = @"vo2max";
  v22[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 88)];
  v21[7] = @"likelihoodRatio";
  LODWORD(v9) = *(_DWORD *)(*(void *)(a1 + 32) + 92);
  v22[7] = +[NSNumber numberWithFloat:v9];
  v21[8] = @"maxAcceptedChange";
  LODWORD(v10) = *(_DWORD *)(*(void *)(a1 + 32) + 96);
  v22[8] = +[NSNumber numberWithFloat:v10];
  v21[9] = @"minConfidenceRatio";
  LODWORD(v11) = *(_DWORD *)(*(void *)(a1 + 32) + 100);
  v22[9] = +[NSNumber numberWithFloat:v11];
  unsigned char v21[10] = @"slope";
  LODWORD(v12) = *(_DWORD *)(*(void *)(a1 + 32) + 104);
  v22[10] = +[NSNumber numberWithFloat:v12];
  v21[11] = @"numClustersContributed";
  v22[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 108)];
  uint64_t v13 = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:12];
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    __int16 v19 = v18;
    operator delete(v18);
  }
  return v13;
}

void sub_1013D4A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

void sub_1013D4E54(_Unwind_Exception *a1)
{
}

NSDictionary *sub_1013D4E94(uint64_t a1)
{
  uint64_t v21 = 0;
  v22[0] = @"age";
  float v2 = *(float *)(a1 + 124);
  __int16 v19 = 0;
  uint64_t v20 = 0;
  sub_10010F834(&v19, (const void *)qword_102487808, *(uint64_t *)algn_102487810, (*(void *)algn_102487810 - qword_102487808) >> 2);
  if (v20 == v19)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = (v20 - (unsigned char *)v19) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (*((float *)v19 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }
  v23[0] = +[NSNumber numberWithInt:v3];
  v22[1] = @"height_m";
  float v5 = *(float *)(a1 + 112);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_10010F834(&v16, (const void *)qword_102487828, *(uint64_t *)algn_102487830, (*(void *)algn_102487830 - qword_102487828) >> 2);
  if (v17 == v16)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = (v17 - (unsigned char *)v16) >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    while (*((float *)v16 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        unint64_t v6 = v7;
        break;
      }
    }
  }
  v23[1] = +[NSNumber numberWithInt:v6];
  v22[2] = @"sex_female";
  v23[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 108)];
  v22[3] = @"weight_kg";
  float v8 = *(float *)(a1 + 116);
  int v14 = 0;
  uint64_t v15 = 0;
  __p = 0;
  sub_10010F834(&__p, (const void *)qword_102487848, *(uint64_t *)algn_102487850, (*(void *)algn_102487850 - qword_102487848) >> 2);
  if (v14 == __p)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v10 = (v14 - (unsigned char *)__p) >> 2;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    while (*((float *)__p + v9) < v8)
    {
      if (v10 == ++v9)
      {
        unint64_t v9 = v10;
        break;
      }
    }
  }
  v23[3] = +[NSNumber numberWithInt:v9];
  v22[4] = @"sessionvo2max_dailymean_window0to90_mean";
  _DWORD v23[4] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v22[5] = @"sessionhrrecovery_dailyMean_window0To90_mean";
  v23[5] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  double v11 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:6];
  if (__p)
  {
    int v14 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  return v11;
}

void sub_1013D5128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void sub_1013D5354(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1013D5384(id a1)
{
  qword_1024192B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

Class sub_1013D53B4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_102487870)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_1013D54E0;
    v3[4] = &unk_1022A3020;
    v3[5] = v3;
    long long v4 = off_102323AA8;
    uint64_t v5 = 0;
    qword_102487870 = _sl_dlopen();
  }
  if (!qword_102487870) {
    sub_101AB31A0(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_101AB3208();
  }
  qword_102487868 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_1013D54E0()
{
  uint64_t result = _sl_dlopen();
  qword_102487870 = result;
  return result;
}

void *sub_1013D5554@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x168uLL);
  uint64_t result = sub_1013D55B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013D559C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013D55B0(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102323AD0;
  sub_100D34568(a1 + 3, *a2);
  return a1;
}

void sub_1013D55FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013D5610(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102323AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013D5630(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102323AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013D5684(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1013D56AC@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x168uLL);
  uint64_t result = sub_1013D5708(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013D56F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013D5708(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102323B20;
  sub_100461A68(a1 + 3, *a2);
  return a1;
}

void sub_1013D5754(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013D5768(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102323B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013D5788(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102323B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013D57DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1013D5804(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v3 = (std::__shared_weak_count *)a2[7];
    if (v3) {
      sub_1000DB0A0(v3);
    }
    long long v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[3];
    if (v5) {
      sub_1000DB0A0(v5);
    }
    unint64_t v6 = (std::__shared_weak_count *)a2[1];
    if (v6) {
      sub_1000DB0A0(v6);
    }
    operator delete();
  }
}

uint64_t sub_1013D5880(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100399C40(result);
    operator delete();
  }
  return result;
}

void sub_1013D58D0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1013D5900(uint64_t a1, double **a2)
{
  unint64_t v3 = *a2;
  float v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  unint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102323A68);
    }
    double v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102323A68);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_1013D5B00(uint64_t a1, double **a2)
{
  unint64_t v3 = *a2;
  float v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  unint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102323A68);
    }
    double v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102323A68);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t *sub_1013D5D00(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CF398(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1013D5D40(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1013D6054(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_66;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_68;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_68:
        uint64_t v39 = 32;
        goto LABEL_89;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v14 |= (unint64_t)(v20 & 0x7F) << v17;
            if (v20 < 0)
            {
              v17 += 7;
              BOOL v9 = v18++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_72:
        uint64_t v39 = 36;
        goto LABEL_89;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v14 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v39 = 12;
        goto LABEL_89;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v14 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v39 = 16;
        goto LABEL_89;
      case 5u:
        char v29 = objc_alloc_init(ALSLocation);

        *(void *)(a1 + 24) = v29;
        if PBReaderPlaceMark() && (sub_100F95DD8((uint64_t)v29, a2))
        {
          PBReaderRecallMark();
LABEL_90:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 0xBu:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v39 = 8;
        goto LABEL_89;
      case 0xCu:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_88:
        uint64_t v39 = 40;
LABEL_89:
        *(_DWORD *)(a1 + v39) = v14;
        goto LABEL_90;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_90;
    }
  }
}

void sub_1013D6DB8(id a1)
{
  qword_102487878 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLFenceHandoffConnectionManagerSilo"];
}

void sub_1013D7680(id a1)
{
  if (objc_opt_class())
  {
    sub_100103240();
    if (sub_100106424() || (sub_100103240(), sub_10010145C()))
    {
      if (_os_feature_enabled_impl()) {
        byte_102487888 = 1;
      }
    }
  }
}

void sub_1013D791C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102323BE0);
    }
    char v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      double v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#FenceHandoff IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102323BE0);
      }
    }
    unsigned int v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      double v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff IDS service failed to initialize", "{\"msg%{public}.0s\":\"#FenceHandoff IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setService:a2];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102323BE0);
    }
    unint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      double v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    [*(id *)(a1 + 40) resume];
  }
}

void sub_1013D7D10(uint64_t a1)
{
}

id sub_1013D9350(uint64_t a1)
{
  return [*(id *)(a1 + 32) getHandoffTags];
}

void sub_1013D9CF8(uint64_t a1)
{
  id v2 = [[objc_msgSend(*(id *)(a1 + 32), "locationManager") monitoredRegions];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102323BE0);
  }
  unint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v4 = [*(id *)(a1 + 40) UTF8String];
    uint64_t buf = 68289282;
    __int16 v20 = 2082;
    char v21 = "";
    __int16 v22 = 2082;
    id v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff checking monitoredRegions\", \"regionIdentifier\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend(objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * i), "identifier"), "isEqualToString:", *(void *)(a1 + 40)))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102323BE0);
          }
          __int16 v10 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            id v11 = [*(id *)(a1 + 40) UTF8String];
            uint64_t buf = 68289282;
            __int16 v20 = 2082;
            char v21 = "";
            __int16 v22 = 2082;
            id v23 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#FenceHandoff unfortunately region monitoring failed to stop!\", \"regionIdentifier\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102323BE0);
            }
          }
          __int16 v12 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            id v13 = [*(id *)(a1 + 40) UTF8String];
            uint64_t buf = 68289282;
            __int16 v20 = 2082;
            char v21 = "";
            __int16 v22 = 2082;
            id v23 = v13;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff unfortunately region monitoring failed to stop!", "{\"msg%{public}.0s\":\"#FenceHandoff unfortunately region monitoring failed to stop!\", \"regionIdentifier\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
          }
          return;
        }
      }
      id v6 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "receivingEndUnacknowledgedMessages"), "objectForKeyedSubscript:", *(void *)(a1 + 40)))
  {
    id v9 = [[objc_msgSend(*(id *)(a1 + 32), "receivingEndUnacknowledgedMessages") objectForKeyedSubscript:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) responseWithAck:[v9 objectForKeyedSubscript:@"kCLFenceHandoffResponseDictionaryIDSIdentifierKey"] forMessage:[v9 objectForKeyedSubscript:@"kCLFenceHandoffResponseDictionaryMessageKey"]];
    [objc_msgSend(*(id *)(a1 + 32), "receivingEndUnacknowledgedMessages") removeObjectForKey:*(void *)(a1 + 40)];
  }
}

void sub_1013DA448(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102323BE0);
    }
    unint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      id v6 = "";
      __int16 v7 = 2114;
      int v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff failed to call change fence state for handoffTags\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
    }
  }
}

void sub_1013DA6C8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102323BE0);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 32) UTF8String];
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      int v8 = "";
      __int16 v9 = 2082;
      id v10 = v5;
      __int16 v11 = 2114;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff failed to call to disable handoffTags from deviceID\", \"deviceId\":%{public, location:escape_only}s, \"Error\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x26u);
    }
  }
}

void sub_1013DB84C(id *a1)
{
  if (([a1[4] isActiveDeviceNearby] & 1) == 0) {
    [a1[4] updateActiveDeviceId:[objc_msgSend(objc_msgSend(a1[4], "service"), "devices")]];
  }
  id v2 = (void *)(int)[(int)[a1[5] objectForKeyedSubscript:@"kCLFenceHandoffDictionaryMessageType"] intValue];
  id v3 = [a1[6] incomingResponseIdentifier];
  if (v3)
  {
    id v4 = v3;
    if (objc_msgSend(objc_msgSend(a1[4], "unacknowledgedMessages"), "objectForKeyedSubscript:", v3))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102323BE0);
      }
      id v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = [a1[7] UTF8String];
        int v44 = 68289794;
        int v45 = 0;
        __int16 v46 = 2082;
        uint64_t v47 = "";
        __int16 v48 = 2082;
        id v49 = v6;
        __int16 v50 = 2050;
        id v51 = v2;
        __int16 v52 = 2114;
        id v53 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Received ack message from the other side\", \"fromID\":%{public, location:escape_only}s, \"messageType\":%{public, location:CLGeoFenceHandoffMessageType}lld, \"incomingResponseIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v44, 0x30u);
      }
      if (v2 != 2 && v2 != 4) {
        [objc_msgSend(a1[4], "unacknowledgedMessages") removeObjectForKey:v4];
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102323BE0);
      }
      uint64_t v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [a1[7] UTF8String];
        int v44 = 68289538;
        int v45 = 0;
        __int16 v46 = 2082;
        uint64_t v47 = "";
        __int16 v48 = 2082;
        id v49 = v14;
        __int16 v50 = 2114;
        id v51 = v4;
        long long v15 = "{\"msg%{public}.0s\":\"#Warn #FenceHandoff Received ack from the other side but we don't track this messag"
              "e anymore\", \"fromID\":%{public, location:escape_only}s, \"incomingResponseIdentifier\":%{public, locatio"
              "n:escape_only}@}";
        long long v16 = v13;
        uint32_t v17 = 38;
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v44, v17);
      }
    }
  }
  else
  {
    switch((unint64_t)v2)
    {
      case 0uLL:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102323BE0);
        }
        unsigned int v18 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          int v44 = 68289026;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Handoff (re-)init message received from watch\"}", (uint8_t *)&v44, 0x12u);
        }
        [a1[4] getHandoffTags];
        return;
      case 1uLL:
        id v19 = a1[4];
        id v20 = a1[5];
        id v21 = a1[6];
        _[v19 handleAddingFenceOnCompanion:v20 withContext:v21];
        return;
      case 3uLL:
        id v24 = a1[4];
        id v25 = a1[5];
        id v26 = a1[6];
        _[v24 handleRemovingFenceOnCompanion:v25 withContext:v26];
        return;
      case 5uLL:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102323BE0);
        }
        unint64_t v27 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          id v28 = [[objc_msgSend(a1[6], "fromID") UTF8String];
          id v29 = [[[a1[4] activeDeviceId] UUIDString] UTF8String];
          int v44 = 68289538;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          __int16 v48 = 2082;
          id v49 = v28;
          __int16 v50 = 2082;
          id v51 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff Received handoff tags\", \"from\":%{public, location:escape_only}s, \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&v44, 0x26u);
        }
        [a1[4] handleHandoffTagsOnCompanion:a1[5] forDeviceID:[a1[4] activeDeviceId]];
        goto LABEL_61;
      case 7uLL:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102323BE0);
        }
        int v30 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          int v44 = 68289026;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff CLFenceHandoffMessageTypeRequestTags is not supported on iOS\"}", (uint8_t *)&v44, 0x12u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102323BE0);
          }
        }
        char v31 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          int v44 = 68289026;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff CLFenceHandoffMessageTypeRequestTags is not supported on iOS", "{\"msg%{public}.0s\":\"#FenceHandoff CLFenceHandoffMessageTypeRequestTags is not supported on iOS\"}", (uint8_t *)&v44, 0x12u);
        }
        goto LABEL_61;
      case 9uLL:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102323BE0);
        }
        unsigned int v32 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          id v33 = [[objc_msgSend(a1[6], "fromID") UTF8String];
          int v44 = 68289282;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          __int16 v48 = 2082;
          id v49 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#FenceHandoff Received get Region state\", \"from\":%{public, location:escape_only}s}", (uint8_t *)&v44, 0x1Cu);
        }
        [a1[4] handleGetRegionStateOnCompanion:a1[5]];
LABEL_61:
        id v34 = [a1[6] outgoingResponseIdentifier];
        if (v34)
        {
          id v35 = v34;
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102323BE0);
          }
          unsigned int v36 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            id v37 = a1[5];
            id v38 = [a1[7] UTF8String];
            id v39 = a1[6];
            int v44 = 68289794;
            int v45 = 0;
            __int16 v46 = 2082;
            uint64_t v47 = "";
            __int16 v48 = 2114;
            id v49 = v37;
            __int16 v50 = 2082;
            id v51 = v38;
            __int16 v52 = 2114;
            id v53 = v39;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff processed incomming message and now we are going to send the ack back to the sender\", \"message\":%{public, location:escape_only}@, \"fromID\":%{public, location:escape_only}s, \"context\":%{public, location:escape_only}@}", (uint8_t *)&v44, 0x30u);
          }
          [a1[4] responseWithAck:v35 forMessage:a1[5]];
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102323BE0);
          }
          uint64_t v40 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            id v41 = a1[5];
            id v42 = [a1[7] UTF8String];
            id v43 = a1[6];
            int v44 = 68289794;
            int v45 = 0;
            __int16 v46 = 2082;
            uint64_t v47 = "";
            __int16 v48 = 2114;
            id v49 = v41;
            __int16 v50 = 2082;
            id v51 = v42;
            __int16 v52 = 2114;
            id v53 = v43;
            long long v15 = "{\"msg%{public}.0s\":\"#FenceHandoff Received message with no outgoingResponseIdentifier\", \"message\""
                  ":%{public, location:escape_only}@, \"fromID\":%{public, location:escape_only}s, \"context\":%{public, "
                  "location:escape_only}@}";
            long long v16 = v40;
            uint32_t v17 = 48;
            goto LABEL_25;
          }
        }
        break;
      case 0xBuLL:
      case 0xDuLL:
      case 0xFuLL:
      case 0x11uLL:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102323BE0);
        }
        __int16 v7 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          int v44 = 68289282;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          __int16 v48 = 2050;
          id v49 = v2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Receiving Fence event/state is not supported in iOS\", \"messageType\":%{public, location:CLGeoFenceHandoffMessageType}lld}", (uint8_t *)&v44, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102323BE0);
          }
        }
        uint64_t v8 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          return;
        }
        int v44 = 68289282;
        int v45 = 0;
        __int16 v46 = 2082;
        uint64_t v47 = "";
        __int16 v48 = 2050;
        id v49 = v2;
        __int16 v9 = "#FenceHandoff Receiving Fence event/state is not supported in iOS";
        id v10 = "{\"msg%{public}.0s\":\"#FenceHandoff Receiving Fence event/state is not supported in iOS\", \"messageType\""
              ":%{public, location:CLGeoFenceHandoffMessageType}lld}";
        __int16 v11 = v8;
        uint32_t v12 = 28;
        goto LABEL_20;
      default:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102323BE0);
        }
        __int16 v22 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          int v44 = 68289026;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Please update incomingMessage switch statements\"}", (uint8_t *)&v44, 0x12u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102323BE0);
          }
        }
        uint64_t v23 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          return;
        }
        int v44 = 68289026;
        int v45 = 0;
        __int16 v46 = 2082;
        uint64_t v47 = "";
        __int16 v9 = "#FenceHandoff Please update incomingMessage switch statements";
        id v10 = "{\"msg%{public}.0s\":\"#FenceHandoff Please update incomingMessage switch statements\"}";
        __int16 v11 = v23;
        uint32_t v12 = 18;
LABEL_20:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, (uint8_t *)&v44, v12);
        return;
    }
  }
}

id sub_1013DC5A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) sendMessage:*(void *)(a1 + 40)];
}

void sub_1013DC72C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1013DCCE4(id a1)
{
  qword_102487898 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPedestrianFenceServiceSilo"];
}

void sub_1013DCFD4()
{
}

id sub_1013DCFFC(uint64_t a1, void *a2)
{
  return _[a2 onPedestrianFenceExitData:a1 + 8];
}

id sub_1013DD008(uint64_t a1, void *a2)
{
  return _[a2 onInertialOdometryAnalyticsData:a1 + 8];
}

void sub_1013DF3D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_1013DF404(uint64_t a1, void *a2)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = [[objc_msgSend(a2, "fenceIDToIndex", 0) allValues];
  id result = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = *(void *)v9;
    do
    {
      __int16 v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        __int16 v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id result = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      id v5 = result;
    }
    while (result);
  }
  return result;
}

id sub_1013E072C(uint64_t a1)
{
  return [*(id *)(a1 + 32) onIntervalTimerCreateEventAndIncrementPacket:1];
}

void sub_1013E0DA8(id a1)
{
  qword_1024192D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

void sub_1013E0E88(id a1)
{
  qword_1024878A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBTLERangeManagerSilo"];
}

uint64_t sub_1013E0F48(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1013E1354;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024878D0 != -1) {
    dispatch_once(&qword_1024878D0, block);
  }
  return qword_1024878C8;
}

void sub_1013E11AC(id a1)
{
  if ((sub_1001073D0() & 0x400000) != 0) {
    byte_1024878B8 = 1;
  }
}

void *sub_1013E11D8(uint64_t a1, void *a2)
{
  id result = (void *)sub_1013E1218(a1, "CLBTLERangeManager-Notifier", a2);
  *id result = off_102323CB8;
  return result;
}

uint64_t sub_1013E1218(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102323E48;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1013E12A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013E12C8(uint64_t a1)
{
  *(void *)a1 = off_102323E48;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_1013E16D8(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1013E1354()
{
}

void sub_1013E13A0()
{
}

void *sub_1013E13C4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void sub_1013E1440()
{
}

void sub_1013E14FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1013E1538(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102323F28;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint32_t v12 = a3;
  }
  else {
    uint32_t v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1013E1620(uint64_t a1)
{
  sub_1013E1734(a1);

  operator delete();
}

id sub_1013E1658(uint64_t a1, int a2, void *a3)
{
  id result = sub_1013CB79C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1013E16A8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1013E16D8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1013E16D8(a1, *a2);
    sub_1013E16D8(a1, a2[1]);
    sub_1013CB268((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1013E1734(uint64_t a1)
{
  *(void *)a1 = &off_102323F28;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_1013E17A4(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v15 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  id v3 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  id v4 = (uint64_t *)(a1 + 40);
  *(void *)a1 = off_10231C1B0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  sub_10044FD20((unsigned __int8 *)&v14, "NumberOfWorkoutsFTPRequiredForHK", &dword_101DB5CB8, 0);
  *(_DWORD *)(a1 + 236) = DWORD1(v14);
  sub_1013E4CEC(&v15, &v14);
  long long v5 = v14;
  long long v14 = 0uLL;
  int v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v5;
  if (v6)
  {
    sub_1000DB0A0(v6);
    if (*((void *)&v14 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  sub_1013E4EB4(v3, &v14);
  long long v7 = v14;
  long long v14 = 0uLL;
  long long v8 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v7;
  if (v8)
  {
    sub_1000DB0A0(v8);
    if (*((void *)&v14 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  sub_1013E5088(&v15, &v14);
  long long v9 = v14;
  long long v14 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  if (v10)
  {
    sub_1000DB0A0(v10);
    if (*((void *)&v14 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  sub_1013E50E4(v4, &v14);
  long long v11 = v14;
  long long v14 = 0uLL;
  uint32_t v12 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v11;
  if (v12)
  {
    sub_1000DB0A0(v12);
    if (*((void *)&v14 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  sub_1013E19D8(a1);
  return a1;
}

void sub_1013E1940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  long long v11 = (std::__shared_weak_count *)v9[21];
  if (v11) {
    sub_1000DB0A0(v11);
  }
  uint32_t v12 = (std::__shared_weak_count *)v9[19];
  if (v12) {
    sub_1000DB0A0(v12);
  }
  id v13 = (std::__shared_weak_count *)v9[17];
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = (std::__shared_weak_count *)v9[15];
  if (v14) {
    sub_1000DB0A0(v14);
  }
  unsigned __int8 v15 = (std::__shared_weak_count *)v9[13];
  if (v15) {
    sub_1000DB0A0(v15);
  }
  sub_1000C5954(&a9);
  long long v16 = (std::__shared_weak_count *)v9[8];
  if (v16) {
    sub_1000DB0A0(v16);
  }
  uint32_t v17 = (std::__shared_weak_count *)v9[6];
  if (v17) {
    sub_1000DB0A0(v17);
  }
  unsigned int v18 = (std::__shared_weak_count *)v9[4];
  if (v18) {
    sub_1000DB0A0(v18);
  }
  id v19 = (std::__shared_weak_count *)v9[2];
  if (v19) {
    sub_1000DB0A0(v19);
  }
  _Unwind_Resume(a1);
}

void sub_1013E19D8(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 24);
  sub_1013E5374(&v13);
  long long v3 = v13;
  long long v13 = 0uLL;
  id v4 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v13 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  sub_1013E54C8(&v13);
  long long v5 = v13;
  long long v13 = 0uLL;
  int v6 = *(std::__shared_weak_count **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = v5;
  if (v6)
  {
    sub_1000DB0A0(v6);
    if (*((void *)&v13 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  sub_1013E5624(v2, &v13);
  long long v7 = v13;
  long long v13 = 0uLL;
  long long v8 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v7;
  if (v8)
  {
    sub_1000DB0A0(v8);
    if (*((void *)&v13 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  sub_1013E5778(&v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v9;
  if (v10)
  {
    sub_1000DB0A0(v10);
    if (*((void *)&v13 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  sub_1013E58CC(&v13);
  long long v11 = v13;
  long long v13 = 0uLL;
  uint32_t v12 = *(std::__shared_weak_count **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = v11;
  if (v12)
  {
    sub_1000DB0A0(v12);
    if (*((void *)&v13 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
}

void *sub_1013E1B10(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  id v4 = a1 + 2;
  unint64_t v5 = v6;
  long long v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    long long v14 = (char *)sub_1000C571C((uint64_t)v4, v13);
    unsigned __int8 v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unsigned __int8 v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_1013E5A20(a1, v19);
    long long v9 = (void *)a1[1];
    sub_1000C5898(v19);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1013E1C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1013E1C30(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 72);
  sub_1013E1B10((uint64_t *)(a1 + 72), (long long *)(a1 + 112));
  sub_1013E1B10(v2, (long long *)(a1 + 128));
  sub_1013E1B10(v2, (long long *)(a1 + 144));

  return sub_1013E1B10(v2, (long long *)(a1 + 160));
}

uint64_t sub_1013E1C90(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 8) + 44) = a2;
  return result;
}

uint64_t sub_1013E1C9C(uint64_t a1)
{
  sub_1013E1B10((uint64_t *)(a1 + 72), (long long *)(a1 + 96));
  sub_1013E1C30(a1);
  id v2 = *(uint64_t **)(a1 + 72);
  long long v3 = *(uint64_t **)(a1 + 80);
  uint64_t v4 = 1;
  while (v2 != v3)
  {
    uint64_t v5 = *v2;
    v2 += 2;
    uint64_t v4 = v4 & (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  return v4;
}

double sub_1013E1D1C(double a1, double a2)
{
  double v3 = a1 * 0.5;
  double v4 = sub_1013EF9A4(a1 * 0.850000024, a2);
  double v5 = v4 - sub_1013EF9A4(v3, a2);
  if (v5 > 200.0) {
    double v5 = 200.0;
  }
  if (v5 >= 50.0) {
    double v6 = (v5 + -50.0) / -199.1 + 1.0;
  }
  else {
    double v6 = 1.0;
  }
  return v6 * 0.4 + 0.5;
}

BOOL sub_1013E1DC0(uint64_t a1, double *a2, int *a3, int *a4)
{
  double v8 = sub_10133A220(*(void *)(a1 + 112));
  double v9 = sub_100C8D8BC(*(void *)(a1 + 128));
  long long v10 = *(_OWORD *)(a1 + 192);
  v21[0] = *(_OWORD *)(a1 + 176);
  v21[1] = v10;
  v22[0] = *(_OWORD *)(a1 + 208);
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 220);
  sub_10061E40C((uint64_t)v21);
  double v12 = v11;
  if (v8 > 0.0)
  {
    *a2 = v8;
    int v14 = sub_10133A228(*(void *)(a1 + 112));
    int v13 = 2;
  }
  else if (v9 > 0.0)
  {
    *a2 = v9;
    int v14 = sub_1000EB1B0();
    int v13 = 1;
  }
  else
  {
    *a2 = v12;
    int v13 = 3;
    int v14 = 1;
  }
  *a3 = v14;
  *a4 = v13;
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102323F40);
  }
  unsigned __int8 v15 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *a4;
    *(_DWORD *)uint64_t buf = 134218752;
    double v32 = v9;
    __int16 v33 = 2048;
    double v34 = v8;
    __int16 v35 = 2048;
    double v36 = v12;
    __int16 v37 = 1024;
    int v38 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "vo2maxPedestrian, %f, vo2maxCycling, %f, vo2maxDerived, %f, cyclingVO2MaxSource, %d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    int v19 = *a4;
    int v23 = 134218752;
    double v24 = v9;
    __int16 v25 = 2048;
    double v26 = v8;
    __int16 v27 = 2048;
    double v28 = v12;
    __int16 v29 = 1024;
    int v30 = v19;
    id v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::getBestVO2Max(double &, int &, VO2MaxSource &) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  BOOL v17 = *a2 > 0.0;
  if (*a2 > 100.0) {
    return 0;
  }
  return v17;
}

uint64_t sub_1013E207C(void **a1)
{
  id v2 = a1[9];
  double v3 = a1[10];
  int v4 = 1;
  while (v2 != v3)
  {
    uint64_t v5 = *v2;
    v2 += 2;
    v4 &= (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  uint64_t v6 = v4 & (*(unsigned int (**)(void *))(*a1[3] + 24))(a1[3]);
  double v8 = a1[9];
  long long v7 = a1[10];
  while (v8 != v7)
  {
    uint64_t v9 = *v8;
    v8 += 2;
    uint64_t v6 = v6 & (*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9);
  }
  return v6;
}

double sub_1013E2150@<D0>(double *a1@<X1>, double *a2@<X2>, double *a3@<X3>, _DWORD *a4@<X4>, _DWORD *a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v6 = 0;
  double v7 = *a1;
  double v8 = *a2;
  double v9 = *a3;
  long long v10 = &byte_101DB5CD8;
  while (*v10 != a1[2] > 0.0 || (*a4 - 1) < 2 == v6 > 3 || a2[2] > 0.0 == (((0x55uLL >> v6) & 1) == 0))
  {
    ++v6;
    v10 += 56;
    if (v6 == 8)
    {
      long long v10 = (char *)&unk_101DB5E60;
      break;
    }
  }
  if (a2[2] <= 0.0) {
    double v8 = 0.0;
  }
  if (a1[2] <= 0.0) {
    double v7 = 0.0;
  }
  double v11 = *((double *)v10 + 1);
  double v12 = *((double *)v10 + 2);
  double v13 = *((double *)v10 + 3);
  double v14 = *((double *)v10 + 4);
  uint64_t v15 = *((void *)v10 + 5);
  int v16 = *((_DWORD *)v10 + 12);
  *(void *)(a6 + 8) = 0x7FF8000000000000;
  *(double *)a6 = v14 + v8 * v12 + v11 * v7 + v13 * v9;
  *(void *)&double result = 0x200000000;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 24) = 0x200000000;
  *a5 = v16;
  return result;
}

void sub_1013E224C(uint64_t a1@<X0>, _OWORD *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  long long v16 = a2[1];
  *(_OWORD *)a6 = *a2;
  *((_OWORD *)a6 + 1) = v16;
  double v17 = sub_10133A1FC(*(void *)(a1 + 112));
  double v18 = *a3;
  double v19 = *(double *)a5;
  if (*(double *)a5 > *a6 && v19 >= a7 && v19 <= a8)
  {
    long long v22 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a6 = *(_OWORD *)a5;
    *((_OWORD *)a6 + 1) = v22;
  }
  if (a3[2] <= 0.0 || v17 <= 0.0)
  {
    double v24 = v18 * 0.9 + -24.7;
  }
  else
  {
    double v23 = sub_1013EF984(v18, *(float *)(a1 + 188));
    double v24 = sub_1013EF9A4(v23 * 0.46 + -1.7 + a3[2] * 0.36 + v17 * 0.46, *(float *)(a1 + 188));
  }
  BOOL v25 = v24 >= a7;
  if (v24 > a8) {
    BOOL v25 = 0;
  }
  if (v25 && v24 > *a6)
  {
    *a6 = v24;
    a6[2] = a3[2];
  }
  double v26 = *a4;
  double v27 = a4[2];
  if (v27 >= 0.7 || v27 <= 0.0 || v17 <= 0.0)
  {
    double v29 = v26 * 0.95;
  }
  else
  {
    double v28 = sub_1013EF984(v26, *(float *)(a1 + 188));
    double v29 = sub_1013EF9A4(v28 * 0.44 + -1.9 + a4[2] * 0.61 + v17 * 0.51, *(float *)(a1 + 188));
  }
  BOOL v30 = v29 >= a7;
  if (v29 > a8) {
    BOOL v30 = 0;
  }
  if (v30 && v29 > *a6)
  {
    *a6 = v29;
    a6[2] = a4[2];
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102323F40);
  }
  char v31 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    double v32 = *(double *)a5;
    uint64_t v33 = *(void *)(a5 + 16);
    double v34 = *a3;
    uint64_t v35 = *((void *)a3 + 2);
    double v36 = *a4;
    uint64_t v37 = *((void *)a4 + 2);
    uint64_t v38 = *(void *)a2;
    uint64_t v39 = *(void *)a6;
    *(_DWORD *)uint64_t buf = 134220544;
    double v42 = v17;
    __int16 v43 = 2048;
    double v44 = v32;
    __int16 v45 = 2048;
    uint64_t v46 = v33;
    __int16 v47 = 2048;
    double v48 = v34;
    __int16 v49 = 2048;
    uint64_t v50 = v35;
    __int16 v51 = 2048;
    double v52 = v36;
    __int16 v53 = 2048;
    uint64_t v54 = v37;
    __int16 v55 = 2048;
    uint64_t v56 = v38;
    __int16 v57 = 2048;
    double v58 = v24;
    __int16 v59 = 2048;
    double v60 = v29;
    __int16 v61 = 2048;
    uint64_t v62 = v39;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "eff,%f,power60,%f,conf60,%f,power8,%f,conf8,%f,power20,%f,conf20,%f,vo2limit,%f,adjusted8,%f,adjusted20,%f,floor,%f", buf, 0x70u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    uint64_t v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPAggregator::calculateFTPFloor(const CLCyclingFTPValue &, const CLCyclingFTPValue &, const CLCyclingFTPValue &, const CLCyclingFTPValue &, double, double) const", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
}

void sub_1013E26E8(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (!sub_1013E207C((void **)a1))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    double v13 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to compute all ftp models", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_70;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    LOWORD(v85) = 0;
    goto LABEL_103;
  }
  uint64_t v83 = 0;
  double v84 = NAN;
  int64x2_t v80 = vdupq_n_s64(0x7FF8000000000000uLL);
  unint64_t v81 = 0xBFF0000000000000;
  uint64_t v82 = 0;
  int64x2_t v77 = v80;
  unint64_t v78 = 0xBFF0000000000000;
  uint64_t v79 = 0;
  if (!*(unsigned char *)(a1 + 234) || !*(unsigned char *)(a1 + 233) || !*(unsigned char *)(a1 + 232))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    double v14 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Not computing VO2Max based FTP as user weight and age not set", buf, 2u);
    }
    double v15 = -1.0;
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_28;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    LOWORD(v85) = 0;
    double v42 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n");
    goto LABEL_98;
  }
  if (!sub_1013E1DC0(a1, &v84, (int *)&v83 + 1, (int *)&v83))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    id v41 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Failed to compute best VO2Max value", buf, 2u);
    }
    double v15 = -1.0;
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_28;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    LOWORD(v85) = 0;
    double v42 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n");
LABEL_98:
    if (v42 != buf) {
      free(v42);
    }
LABEL_28:
    double v16 = NAN;
    double v17 = -1.0;
    uint64_t v18 = 0x7FF8000000000000;
    double v19 = NAN;
    double v20 = -1.0;
    goto LABEL_29;
  }
  double v6 = v84;
  unsigned int v7 = HIDWORD(v83);
  double v8 = *(float *)(a1 + 188);
  double v9 = sub_1013EF9A4(v84 * 0.699999988, v8);
  double v10 = sub_1013E1D1C(v6, v8);
  v80.i64[1] = 0x7FF8000000000000;
  if (v9 <= 0.0) {
    double v11 = NAN;
  }
  else {
    double v11 = v9;
  }
  if (v9 > 0.0)
  {
    unsigned int v12 = v7;
  }
  else
  {
    double v10 = 0.0;
    unsigned int v12 = 0;
  }
  uint64_t v55 = *(void *)&v11;
  *(double *)v80.i64 = v11;
  unint64_t v81 = *(void *)&v10;
  uint64_t v82 = v12 | 0x700000000;
  if (v83 == 3)
  {
    double v10 = 0.4;
    goto LABEL_81;
  }
  if (!v83)
  {
    double v10 = 0.0;
LABEL_81:
    unint64_t v81 = *(void *)&v10;
  }
  double v58 = v10;
  double v43 = *(float *)(a1 + 188);
  double v44 = sub_1013EF9A4(v6 * 0.5, v43);
  double v45 = sub_1013E1D1C(v6, v43);
  v77.i64[1] = 0x7FF8000000000000;
  double v19 = NAN;
  if (v44 <= 0.0) {
    double v16 = NAN;
  }
  else {
    double v16 = v44;
  }
  if (v44 <= 0.0) {
    double v15 = 0.0;
  }
  else {
    double v15 = v45;
  }
  if (v44 <= 0.0) {
    unsigned int v46 = 0;
  }
  else {
    unsigned int v46 = v7;
  }
  *(double *)v77.i64 = v16;
  unint64_t v78 = *(void *)&v15;
  uint64_t v79 = v46 | 0x500000000;
  double v47 = *(float *)(a1 + 188);
  double v48 = sub_1013EF9A4(v6 * 1.20000005, v47);
  double v49 = v47;
  double v17 = v58;
  double v50 = sub_1013E1D1C(v6, v49);
  if (v48 <= 0.0)
  {
    double v20 = 0.0;
  }
  else
  {
    double v19 = v48;
    double v20 = v50;
  }
  uint64_t v18 = v55;
LABEL_29:
  int v21 = sub_100E0C744(*(void *)(a1 + 96));
  if (v21 <= 0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102323F60);
    }
    uint64_t v40 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLCyclingFTPAggregator, no valid cycling sessions found", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_70;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102323F60);
    }
    LOWORD(v85) = 0;
LABEL_103:
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
LABEL_70:
    *(int64x2_t *)a2 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(void *)(a2 + 16) = 0xBFF0000000000000;
    *(void *)(a2 + 24) = 0;
    return;
  }
  unsigned int v22 = v21;
  double v57 = v17;
  double v54 = v20;
  sub_101100200(*(void *)(a1 + 160), (uint64_t)v75);
  sub_1014360D4(*(void *)(a1 + 144), (uint64_t)v67);
  long long v65 = v73;
  long long v66 = v74;
  if (v16 >= 15.0) {
    double v23 = v16;
  }
  else {
    double v23 = 15.0;
  }
  double v53 = *(float *)(a1 + 188) * 8.0;
  if (v53 >= v19) {
    double v24 = *(float *)(a1 + 188) * 8.0;
  }
  else {
    double v24 = v19;
  }
  if (v24 <= 999.0) {
    double v25 = v24;
  }
  else {
    double v25 = 999.0;
  }
  if (*(double *)&v65 < v23 || *(double *)&v65 > v25) {
    *(void *)&long long v66 = 0;
  }
  uint64_t v56 = v18;
  double v52 = v15;
  double v59 = a3;
  if (v75[0] > v25 || v75[0] < v23) {
    uint64_t v76 = 0;
  }
  int v64 = 0;
  sub_1013E2150((double *)&v65, v75, (double *)v80.i64, &v83, &v64, (uint64_t)v62);
  sub_1013E224C(a1, &v77, v71, v69, (uint64_t)v67, v60, v23, v25);
  double v27 = v60[0];
  double v28 = v62[0];
  uint64_t v29 = v63;
  if (v62[0] <= v60[0]) {
    BOOL v30 = v60;
  }
  else {
    BOOL v30 = v62;
  }
  long long v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v30;
  *(_OWORD *)(a2 + 16) = v31;
  if (*(double *)a2 <= v25) {
    double v32 = *(double *)a2;
  }
  else {
    double v32 = v25;
  }
  *(double *)(a2 + 8) = v32;
  *(void *)(a2 + 16) = v29;
  *(_DWORD *)(a2 + 24) = v22;
  *(double *)a2 = v32;
  double v33 = v32;
  if (v22 >= 6)
  {
    double v33 = sub_100A12748(*(void *)(a1 + 8), v32, v59);
    *(double *)a2 = v33;
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102323F40);
  }
  double v34 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134224896;
    uint64_t v142 = v56;
    __int16 v143 = 2048;
    double v144 = v57;
    __int16 v145 = 2048;
    double v146 = v75[0];
    __int16 v147 = 2048;
    uint64_t v148 = v76;
    __int16 v149 = 2048;
    double v150 = v16;
    __int16 v151 = 2048;
    double v152 = v52;
    __int16 v153 = 2048;
    double v154 = v19;
    __int16 v155 = 2048;
    double v156 = v54;
    __int16 v157 = 2048;
    double v158 = v53;
    __int16 v159 = 2048;
    double v160 = v25;
    __int16 v161 = 2048;
    double v162 = v71[0];
    __int16 v163 = 2048;
    uint64_t v164 = v72;
    __int16 v165 = 2048;
    double v166 = v69[0];
    __int16 v167 = 2048;
    uint64_t v168 = v70;
    __int16 v169 = 2048;
    uint64_t v170 = v67[0];
    __int16 v171 = 2048;
    uint64_t v172 = v68;
    __int16 v173 = 2048;
    uint64_t v174 = v73;
    __int16 v175 = 2048;
    uint64_t v176 = v74;
    __int16 v177 = 2048;
    double v178 = v28;
    __int16 v179 = 2048;
    uint64_t v180 = v29;
    __int16 v181 = 2048;
    double v182 = v27;
    __int16 v183 = 2048;
    uint64_t v184 = v61;
    __int16 v185 = 2048;
    double v186 = v33;
    __int16 v187 = 2048;
    uint64_t v188 = v29;
    __int16 v189 = 1024;
    unsigned int v190 = v22;
    __int16 v191 = 2048;
    double v192 = v32;
    __int16 v193 = 1024;
    int v194 = v64;
    __int16 v195 = 2048;
    double v196 = v59;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "ftpVO2Max, %f, ftpVO2MaxConfidence, %f, ftpPowerAtPercentHRMax, %f, ftpPowerAtPercentHRMaxConfidence, %f, ftpLowerLimit, %f, ftpLowerLimitConfidence, %f, ftpVO2MaxUpperLimit, %f, ftpVO2MaxUpperLimitConfidence, %f, maxWeightBasedFTP, %f, ftpUpperLimit, %f, ftp8MinBoutEstimate, %f, ftp8MinBoutEstimateConfidence, %f, ftp20MinBoutEstimate, %f, ftp20MinBoutEstimateConfidence, %f, ftp60MinBoutEstimate, %f, ftp60MinBoutEstimateConfidence, %f, ftpCriticalPowerEstimate, %f, ftpCriticalPowerEstimateConfidence, %f, ftpCombo, %f, ftpComboConfidence, %f, ftpFloor, %f, ftpFloorConfidence, %f, ftpBest, %f, ftpBestConfidence, %f, ftpBestNumberOfSessions, %d, ftpBestWithoutDecay, %f, ftpComboSource, %d, eventTime, %f", buf, 0x112u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    uint64_t v35 = *(void *)(a2 + 8);
    uint64_t v36 = *(void *)(a2 + 16);
    int v37 = *(_DWORD *)(a2 + 24);
    double v38 = *(double *)a2;
    int v85 = 134224896;
    uint64_t v86 = v80.i64[0];
    __int16 v87 = 2048;
    unint64_t v88 = v81;
    __int16 v89 = 2048;
    double v90 = v75[0];
    __int16 v91 = 2048;
    uint64_t v92 = v76;
    __int16 v93 = 2048;
    uint64_t v94 = v77.i64[0];
    __int16 v95 = 2048;
    unint64_t v96 = v78;
    __int16 v97 = 2048;
    double v98 = v19;
    __int16 v99 = 2048;
    double v100 = v54;
    __int16 v101 = 2048;
    double v102 = v53;
    __int16 v103 = 2048;
    double v104 = v25;
    __int16 v105 = 2048;
    double v106 = v71[0];
    __int16 v107 = 2048;
    uint64_t v108 = v72;
    __int16 v109 = 2048;
    double v110 = v69[0];
    __int16 v111 = 2048;
    uint64_t v112 = v70;
    __int16 v113 = 2048;
    uint64_t v114 = v67[0];
    __int16 v115 = 2048;
    uint64_t v116 = v68;
    __int16 v117 = 2048;
    uint64_t v118 = v73;
    __int16 v119 = 2048;
    uint64_t v120 = v74;
    __int16 v121 = 2048;
    double v122 = v62[0];
    __int16 v123 = 2048;
    uint64_t v124 = v63;
    __int16 v125 = 2048;
    double v126 = v60[0];
    __int16 v127 = 2048;
    uint64_t v128 = v61;
    __int16 v129 = 2048;
    double v130 = v38;
    __int16 v131 = 2048;
    uint64_t v132 = v36;
    __int16 v133 = 1024;
    int v134 = v37;
    __int16 v135 = 2048;
    uint64_t v136 = v35;
    __int16 v137 = 1024;
    int v138 = v64;
    __int16 v139 = 2048;
    double v140 = v59;
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::getFTP(const CFAbsoluteTime)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
}

uint64_t sub_1013E32F0(uint64_t a1)
{
  id v2 = *(uint64_t **)(a1 + 72);
  double v3 = *(uint64_t **)(a1 + 80);
  uint64_t v1 = (uint64_t *)(a1 + 72);
  uint64_t v4 = 1;
  while (v2 != v3)
  {
    uint64_t v5 = *v2;
    v2 += 2;
    uint64_t v4 = v4 & (*(unsigned int (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  sub_1000C59A8(v1);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102323F60);
  }
  double v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLCyclingFTPAggregator reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102323F60);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::reset()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return v4;
}

id *sub_1013E34D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  sub_1000E1294((uint64_t *)v22, (uint64_t)"CLCyclingFTPAggregator.computeFTP", 0);
  sub_1013E1C9C(a1);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102323F60);
  }
  double v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134218496;
    double v30 = a3;
    __int16 v31 = 2048;
    double v32 = a3 + -5184000.0;
    __int16 v33 = 2048;
    double v34 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator computeFTP eval_time, %f, from, %f, to, %f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102323F60);
    }
    double v7 = a3 + -5184000.0;
    int v23 = 134218496;
    double v24 = a3;
    __int16 v25 = 2048;
    double v26 = a3 + -5184000.0;
    __int16 v27 = 2048;
    double v28 = a3;
    double v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::computeFTP(const double)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  else
  {
    double v7 = a3 + -5184000.0;
  }
  double v8 = *(void **)(a1 + 72);
  for (uint64_t i = *(void **)(a1 + 80); v8 != i; v8 += 2)
    (*(void (**)(void, uint64_t, double, double))(*(void *)*v8 + 24))(*v8, a1 + 176, v7, a3);
  sub_1013E26E8(a1, a2, a3);
  if ((sub_1013E32F0(a1) & 1) == 0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102323F60);
    }
    double v10 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLCyclingFTPAggregator, failed to reset all models", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102323F60);
      }
      LOWORD(v23) = 0;
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const CLCyclingFTPValue CLCyclingFTPAggregator::computeFTP(const double)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102323F60);
  }
  double v11 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = *(double *)a2;
    double v13 = *(double *)(a2 + 16);
    int v14 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)uint64_t buf = 134218496;
    double v30 = v12;
    __int16 v31 = 2048;
    double v32 = v13;
    __int16 v33 = 1024;
    LODWORD(v34) = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator final ftp, %f, confidence, %f, numberOfSessions, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102323F60);
    }
    double v17 = *(double *)a2;
    double v18 = *(double *)(a2 + 16);
    int v19 = *(_DWORD *)(a2 + 24);
    int v23 = 134218496;
    double v24 = v17;
    __int16 v25 = 2048;
    double v26 = v18;
    __int16 v27 = 1024;
    LODWORD(v28) = v19;
    double v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPValue CLCyclingFTPAggregator::computeFTP(const double)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  return sub_1000E1098(v22);
}

void sub_1013E3A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

__n128 sub_1013E3A44(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 192) = v3;
  *(_OWORD *)(a1 + 208) = v4;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_1013E3A60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100A11184(*(void *)(a1 + 8), a2, (uint64_t)&v28);
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102323F40);
  }
  uint64_t v5 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)double v42 = v28;
    *(_WORD *)&v42[4] = 1024;
    *(_DWORD *)&v42[6] = HIBYTE(v28);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator feedworkoutevent: didFinish: %d, hadCycling: %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    LODWORD(v37) = 67109376;
    HIDWORD(v37) = v28;
    LOWORD(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 2) = HIBYTE(v28);
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPResults CLCyclingFTPAggregator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  __int16 v24 = v28;
  double v26 = 0;
  uint64_t v27 = 0;
  __p = 0;
  sub_1008B7A58(&__p, v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * (((char *)v30 - (unsigned char *)v29) >> 3));
  BOOL v6 = sub_1013E40A0(a1, (uint64_t)&v24, (unsigned char *)(a1 + 176));
  if (__p)
  {
    double v26 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    double v7 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator end of workout and will calculate FTP", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102323F40);
      }
      LOWORD(v37) = 0;
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPResults CLCyclingFTPAggregator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    sub_1013E34D0(a1, (uint64_t)&v37, *(v30 - 2));
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    double v8 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)v30 - 2);
      uint64_t v10 = *((void *)v30 - 1);
      *(_DWORD *)uint64_t buf = 134218496;
      *(double *)double v42 = v37;
      *(_WORD *)&v42[8] = 2048;
      uint64_t v43 = v10;
      __int16 v44 = 2048;
      uint64_t v45 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLCyclingFTPAggregator FTP calculated ftp, %f, workout_type, %ld, timeStamp, %f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102323F40);
      }
      uint64_t v17 = *((void *)v30 - 2);
      uint64_t v18 = *((void *)v30 - 1);
      int v31 = 134218496;
      double v32 = v37;
      __int16 v33 = 2048;
      uint64_t v34 = v18;
      __int16 v35 = 2048;
      uint64_t v36 = v17;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "const CLCyclingFTPResults CLCyclingFTPAggregator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    uint64_t v11 = *(void *)(a1 + 8);
    __int16 v20 = v28;
    unsigned int v22 = 0;
    uint64_t v23 = 0;
    int v21 = 0;
    sub_1008B7A58(&v21, v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * (((char *)v30 - (unsigned char *)v29) >> 3));
    double v12 = v37;
    sub_100A12C6C(v11, (uint64_t)&v20, v37, v38);
    if (v21)
    {
      unsigned int v22 = v21;
      operator delete(v21);
    }
    uint64_t v13 = v39;
    *(double *)a3 = v12;
    *(void *)(a3 + 8) = v13;
    *(unsigned char *)(a3 + 16) = 1;
    *(unsigned char *)(a3 + 17) = v40 >= *(_DWORD *)(a1 + 236);
    int v14 = v30;
    *(double *)(a3 + 24) = *(v30 - 1);
    *(double *)(a3 + 32) = *(v14 - 2);
    *(unsigned char *)(a3 + 40) = v28;
  }
  else
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = xmmword_101D47590;
    *(unsigned char *)(a3 + 17) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  if (v29)
  {
    double v30 = (double *)v29;
    operator delete(v29);
  }
}

void sub_1013E4040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1013E40A0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (a3[58]) {
    BOOL v3 = a3[57] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3 || a3[56] == 0)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    uint64_t v5 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "The weight, height and age must be set. Do not calculate FTP.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    *(_WORD *)uu = 0;
LABEL_84:
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
    return 0;
  }
  if (!*(unsigned char *)a2)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    __int16 v20 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Workout is not finished. Do not calculate FTP.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    *(_WORD *)uu = 0;
    goto LABEL_84;
  }
  if (!*(unsigned char *)(a2 + 1))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    int v21 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)uint64_t v39 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Workout is not cycling. Do not calculate FTP workouttype:%d .", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    int v23 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)uu = 67109120;
    *(_DWORD *)&uu[4] = v23;
    goto LABEL_84;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    __int16 v24 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)uint64_t v39 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "There was no session in this workout:%zu .", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    *(_DWORD *)uu = 134217984;
    *(void *)&uu[4] = v26;
    goto LABEL_84;
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102323F40);
  }
  uint64_t v9 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)uint64_t v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "There were %zu sessions in this workout.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    *(_DWORD *)uu = 134217984;
    *(void *)&uu[4] = v31;
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  if (!*(void *)(a1 + 96))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    __int16 v28 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "ValidSessions model missing when validating the workout. Not eligible to calculte the FTP.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    *(_WORD *)uu = 0;
    goto LABEL_84;
  }
  uint64_t v11 = *(long long **)(a2 + 8);
  double v12 = *(long long **)(a2 + 16);
  if (v11 == v12)
  {
LABEL_68:
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    uint64_t v27 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "The workout was not eligible to trigger FTP calculation.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    *(_WORD *)uu = 0;
    goto LABEL_84;
  }
  unsigned __int8 v13 = 0;
  int v14 = 1;
  while (1)
  {
    long long v15 = *v11;
    long long v16 = v11[1];
    uint64_t v37 = *((void *)v11 + 4);
    *(_OWORD *)uu = v15;
    long long v36 = v16;
    memset(out, 0, 37);
    uuid_unparse(uu, out);
    sub_1013E1B10((uint64_t *)(a1 + 72), (long long *)(a1 + 96));
    (*(void (**)(void, uint64_t, double, double))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96), a1 + 176, *(double *)&v36, *((double *)&v36 + 1));
    sub_1013E207C((void **)a1);
    if (sub_100A12538(*(void *)(a1 + 8), uu))
    {
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102323F40);
      }
      uint64_t v17 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)uint64_t v39 = v14;
        *(_WORD *)&v39[4] = 2080;
        *(void *)&v39[6] = out;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session %d with uuid %s is not eligible to trigger FTP calculation since the ftp was calculated before.", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_102323F40);
        }
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      unsigned __int8 v13 = 0;
      BOOL v18 = 1;
    }
    else
    {
      BOOL v18 = sub_100E0C890(*(int **)(a1 + 96), v14, (uint64_t)out, *(double *)&v36, *((double *)&v36 + 1));
      if (v18) {
        unsigned __int8 v13 = 1;
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96));
    sub_1013E32F0(a1);
    if (v18) {
      break;
    }
    uint64_t v11 = (long long *)((char *)v11 + 40);
    ++v14;
    if (v11 == v12) {
      goto LABEL_68;
    }
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102323F40);
  }
  double v30 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)uint64_t v39 = out;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)&v39[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "The session %s is processed and its eligibility is %d.", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102323F40);
    }
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPAggregator::isEligibleToComputeFTP(const CLCyclingFTPDataStore::WorkoutEventInfo, const CLBodyMetrics &, const double)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  return v13 != 0;
}

uint64_t sub_1013E4C84(uint64_t a1)
{
  return sub_100A123F0(*(void *)(a1 + 8));
}

void sub_1013E4C8C(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_1013E4CBC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_1013E4CEC@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0xF8uLL);
  BOOL result = sub_1013E4D48(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013E4D34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E4D48(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102323F90;
  sub_100A0F218((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1013E4D94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E4DA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102323F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E4DC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102323F90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1013E4E1C(uint64_t a1)
{
  sub_1013E4E48((uint64_t)&v1, a1 + 24);
}

void sub_1013E4E48(uint64_t a1, uint64_t a2)
{
  sub_1000F5BB0(a2 + 192, *(void **)(a2 + 200));
  BOOL v3 = *(void **)(a2 + 120);
  if (v3)
  {
    *(void *)(a2 + 128) = v3;
    operator delete(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a2 + 32);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    sub_1000DB0A0(v5);
  }
}

void *sub_1013E4EB4@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0xD8uLL);
  BOOL result = sub_1013E4F10(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013E4EFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E4F10(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102323FE0;
  sub_1013E501C((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1013E4F6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E4F80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102323FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E4FA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102323FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E4FF4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1013E501C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1005D7E38(a2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1013E5070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1013E5088@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  BOOL result = sub_1012A3FDC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013E50D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E50E4@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  BOOL result = sub_1013E5140(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013E512C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E5140(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102324030;
  sub_1013E524C((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1013E519C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E51B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102324030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E51D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102324030;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E5224(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1013E524C(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  BOOL v3 = (std::__shared_weak_count *)a3[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = off_102324080;
    a2[1] = v4;
    a2[2] = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v3);
  }
  else
  {
    *a2 = off_102324080;
    a2[1] = v4;
    a2[2] = 0;
  }
}

uint64_t sub_1013E52AC(uint64_t a1, uint64_t a2)
{
  return sub_1014C6138(*(void *)(a1 + 8), a2);
}

uint64_t sub_1013E52B4(uint64_t a1, void *a2)
{
  return sub_1014C6160(*(void *)(a1 + 8), a2);
}

void *sub_1013E52BC(void *a1)
{
  *a1 = off_102324080;
  id v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_1013E5308(void *a1)
{
  *a1 = off_102324080;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

void *sub_1013E5374@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0x98uLL);
  BOOL result = sub_1013E53D0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1013E53BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E53D0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023240C0;
  sub_100E0C66C(a1 + 3);
  return a1;
}

void sub_1013E5418(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E542C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023240C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E544C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023240C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E54A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1013E54C8@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0xF0uLL);
  BOOL result = sub_1013E552C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1013E5518(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E552C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102324110;
  sub_101338F40(a1 + 3);
  return a1;
}

void sub_1013E5574(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E5588(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102324110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E55A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102324110;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E55FC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1013E5624@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x90uLL);
  BOOL result = sub_1013E5680(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1013E566C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E5680(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102324160;
  sub_10149EC68(a1 + 3, a2);
  return a1;
}

void sub_1013E56C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E56DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102324160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E56FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102324160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E5750(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1013E5778@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0x118uLL);
  BOOL result = sub_1013E57D4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1013E57C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E57D4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023241B0;
  sub_101433E18(a1 + 3);
  return a1;
}

void sub_1013E581C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E5830(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023241B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E5850(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023241B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E58A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1013E58CC@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0xD0uLL);
  BOOL result = sub_1013E5928(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1013E5914(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1013E5928(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102324200;
  sub_1011000E4(a1 + 3);
  return a1;
}

void sub_1013E5970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1013E5984(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102324200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013E59A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102324200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013E59F8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1013E5A20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1013E5A98((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1013E5A98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _DWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1013E5B2C((uint64_t)v12);
  return v10;
}

uint64_t sub_1013E5B2C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

double sub_1013E5B64(double *a1)
{
  double result = a1[10];
  double v2 = a1[25];
  if (v2 > 0.0)
  {
    double v3 = a1[26];
    if (v3 > 0.0) {
      return sqrt(v3 / 2.45 * (v3 / 2.45) + v2 / 2.45 * (v2 / 2.45));
    }
  }
  return result;
}

uint64_t sub_1013E5BA0(uint64_t result, BOOL *a2, unsigned char *a3)
{
  *a3 = 0;
  *a2 = 0;
  double v3 = *(double *)(result + 192);
  double v4 = *(double *)(result + 104);
  if (v3 <= 0.0 || v4 < 0.0)
  {
    if (v4 < 0.0) {
      return result;
    }
    BOOL v5 = 1;
  }
  else
  {
    *a3 = 1;
    BOOL v5 = v3 < 180.0;
  }
  *a2 = v5;
  return result;
}

double sub_1013E5BF0(uint64_t a1)
{
  double result = *(double *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  *(double *)(a1 + 152) = result;
  *(void *)(a1 + 160) = v2;
  uint64_t v3 = *(void *)(a1 + 104);
  *(void *)(a1 + 168) = v3;
  *(double *)(a1 + 288) = result;
  *(void *)(a1 + 296) = v2;
  *(void *)(a1 + 304) = v3;
  *(double *)(a1 + 312) = result;
  *(void *)(a1 + 320) = v2;
  *(double *)(a1 + 328) = result;
  *(void *)(a1 + 336) = v2;
  *(_DWORD *)(a1 + 280) = 0;
  return result;
}

void sub_1013E5C18(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v140 = 0;
  sub_1004BD8CC((int *)&v140, (_DWORD *)&v140 + 1, *((double *)a1 + 1));
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102324240);
  }
  uint64_t v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v7 = (uint64_t *)*a2;
    }
    __int16 v139 = a2;
    double v8 = *(double *)a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[7];
    uint64_t v13 = a1[8];
    uint64_t v15 = a1[9];
    uint64_t v14 = a1[10];
    uint64_t v16 = a1[11];
    double v17 = *((double *)a1 + 12) * 3.6;
    uint64_t v19 = a1[23];
    uint64_t v18 = a1[24];
    uint64_t v20 = a1[25];
    uint64_t v21 = a1[26];
    uint64_t v115 = a1[27];
    uint64_t v23 = a1[19];
    uint64_t v22 = a1[20];
    uint64_t v24 = a1[21];
    uint64_t v25 = a1[37];
    uint64_t v111 = a1[36];
    uint64_t v26 = a1[41];
    uint64_t v97 = a1[42];
    uint64_t v27 = a1[38];
    uint64_t v99 = a1[39];
    uint64_t v103 = a1[40];
    uint64_t v105 = a1[46];
    uint64_t v107 = a1[47];
    uint64_t v109 = a1[48];
    uint64_t v113 = a1[49];
    double v28 = *((float *)a1 + 44);
    double v29 = *((float *)a1 + 45);
    uint64_t v96 = a1[4];
    uint64_t v101 = a1[5];
    uint64_t v117 = a1[29];
    uint64_t v119 = a1[30];
    uint64_t v121 = a1[31];
    uint64_t v123 = a1[32];
    int v137 = *((unsigned __int8 *)a1 + 264);
    int v135 = *((unsigned __int8 *)a1 + 265);
    uint64_t v133 = a1[34];
    int v131 = *((_DWORD *)a1 + 70);
    uint64_t v30 = a1[13];
    uint64_t v129 = a1[14];
    int v127 = *((_DWORD *)a1 + 30);
    int v125 = *((_DWORD *)a1 + 31);
    unint64_t v31 = a1 + 16;
    if (*((char *)a1 + 151) < 0) {
      unint64_t v31 = (void *)*v31;
    }
    v280 = v7;
    double v282 = v8;
    uint64_t v284 = v9;
    uint64_t v286 = v10;
    uint64_t v288 = v11;
    int v292 = HIDWORD(v140);
    int v290 = v140;
    uint64_t v294 = v12;
    uint64_t v296 = v13;
    uint64_t v298 = v14;
    uint64_t v300 = v15;
    uint64_t v302 = v16;
    uint64_t v304 = v30;
    uint64_t v306 = v18;
    uint64_t v310 = v19;
    uint64_t v312 = v20;
    uint64_t v314 = v21;
    uint64_t v318 = v23;
    int v32 = *((_DWORD *)a1 + 56);
    uint64_t v320 = v22;
    int v33 = *((_DWORD *)a1 + 86);
    uint64_t v322 = v24;
    int v34 = *((unsigned __int8 *)a1 + 228);
    uint64_t v326 = v25;
    uint64_t v35 = a1[44];
    uint64_t v328 = v27;
    int v36 = *((unsigned __int8 *)a1 + 229);
    uint64_t v330 = v26;
    int v37 = *((unsigned __int8 *)a1 + 350);
    int v38 = *((unsigned __int8 *)a1 + 351);
    uint64_t v316 = v115;
    int v39 = *((unsigned __int8 *)a1 + 360);
    uint64_t v324 = v111;
    int v40 = *((unsigned __int8 *)a1 + 349);
    uint64_t v332 = v97;
    int v41 = *((unsigned __int8 *)a1 + 361);
    uint64_t v334 = v99;
    int v42 = *((unsigned __int8 *)a1 + 362);
    uint64_t v336 = v103;
    int v43 = *((unsigned __int8 *)a1 + 348);
    uint64_t v338 = v105;
    int v44 = *((_DWORD *)a1 + 100);
    uint64_t v340 = v107;
    int v45 = *((_DWORD *)a1 + 101);
    uint64_t v342 = v109;
    uint64_t v46 = a1[51];
    uint64_t v344 = v113;
    uint64_t v47 = a1[6];
    uint64_t v346 = v96;
    int v48 = *((_DWORD *)a1 + 104);
    uint64_t v348 = v101;
    int v49 = *((_DWORD *)a1 + 105);
    uint64_t v354 = v117;
    uint64_t v50 = a1[53];
    *(_DWORD *)uint64_t buf = 136463619;
    uint64_t v356 = v119;
    __int16 v281 = 2050;
    __int16 v283 = 2050;
    __int16 v285 = 2050;
    __int16 v287 = 2050;
    uint64_t v358 = v121;
    __int16 v289 = 1026;
    __int16 v291 = 1026;
    uint64_t v360 = v123;
    __int16 v293 = 2049;
    __int16 v295 = 2049;
    __int16 v297 = 2050;
    __int16 v299 = 2050;
    __int16 v301 = 2050;
    __int16 v303 = 2050;
    __int16 v305 = 2050;
    __int16 v307 = 2050;
    double v308 = v17;
    __int16 v309 = 2050;
    __int16 v311 = 2050;
    __int16 v313 = 2050;
    __int16 v315 = 2050;
    __int16 v317 = 2049;
    __int16 v319 = 2049;
    __int16 v321 = 2050;
    __int16 v323 = 2049;
    __int16 v325 = 2049;
    __int16 v327 = 2050;
    __int16 v329 = 2049;
    __int16 v331 = 2049;
    __int16 v333 = 2049;
    __int16 v335 = 2049;
    __int16 v337 = 2049;
    __int16 v339 = 2049;
    __int16 v341 = 2049;
    __int16 v343 = 2049;
    __int16 v345 = 2049;
    __int16 v347 = 2049;
    __int16 v349 = 2050;
    double v350 = v28;
    __int16 v351 = 2050;
    double v352 = v29;
    __int16 v353 = 2050;
    __int16 v355 = 2050;
    __int16 v357 = 2050;
    __int16 v359 = 2050;
    __int16 v361 = 1026;
    int v362 = v137;
    __int16 v363 = 1026;
    int v364 = v135;
    __int16 v365 = 2050;
    uint64_t v366 = v133;
    __int16 v367 = 1026;
    int v368 = v131;
    __int16 v369 = 2049;
    uint64_t v370 = v129;
    __int16 v371 = 1026;
    int v372 = v127;
    __int16 v373 = 1026;
    int v374 = v125;
    __int16 v375 = 2081;
    v376 = v31;
    __int16 v377 = 1026;
    int v378 = v32;
    __int16 v379 = 1026;
    int v380 = v33;
    __int16 v381 = 1026;
    int v382 = v34;
    __int16 v383 = 2050;
    uint64_t v384 = v35;
    __int16 v385 = 1026;
    int v386 = v36;
    __int16 v387 = 1026;
    int v388 = v37;
    __int16 v389 = 1026;
    int v390 = v38;
    __int16 v391 = 1026;
    int v392 = v39;
    __int16 v393 = 1026;
    int v394 = v40;
    __int16 v395 = 1026;
    int v396 = v41;
    __int16 v397 = 1026;
    int v398 = v42;
    __int16 v399 = 1026;
    int v400 = v43;
    __int16 v401 = 1026;
    int v402 = v44;
    __int16 v403 = 1026;
    int v404 = v45;
    __int16 v405 = 2050;
    uint64_t v406 = v46;
    __int16 v407 = 2050;
    uint64_t v408 = v47;
    __int16 v409 = 1026;
    int v410 = v48;
    __int16 v411 = 1026;
    int v412 = v49;
    __int16 v413 = 2050;
    double v414 = a3;
    __int16 v415 = 2050;
    uint64_t v416 = v50;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,%{public}s,trip,%{public}lld,T,%{public}.1lf,machT,%{public}.2lf,contT,%{public}.2lf,gpsTMs,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crse,%{public}.1lf,crseUnc,%{public}.1lf,spdKph,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,pSnapLL,%{private}.7lf,%{private}.7lf,rwSnapLL,%{private}.7lf,%{private}.7lf,rwSnapOfstLL,%{private}.7lf,%{private}.7lf,rwFSnapOfstLL,%{private}.7lf,%{private}.7lf,rwLL,%{private}.7lf,%{private}.7lf,score,%{public}.1lf,ratio,%{public}.1lf,varFac,%{public}.7g,deltaAz,%{public}.3lf,alngTrk,%{public}.3lf,acrsTrk,%{public}.3lf,usable,%{public}d,ambiguous,%{public}d,proj,%{public}.3lf,type,%{public}d,rseg,%{private}lld,frc,%{public}d,fow,%{public}d,road,\"%{private}s\",activity,%{public}d,actConf,%{public}d,static,%{public}d,staticSetAt,%{public}.1lf,mount,%{public}d,fitness,%{public}d,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,favGPS,%{public}d,gnssCont,%{public}d,locationType,%{public}d,lifespan,%{public}.1lf,rawCourse,%{public}.1lf,sigEnv,%{public}d,sigEnvFid,%{public}d,latency,%{public}.1lf,rw,%{public}.2lf", buf, 0x25Cu);
    a2 = v139;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102324240);
    }
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    double v51 = *(double *)a1;
    uint64_t v52 = a1[1];
    uint64_t v53 = a1[2];
    uint64_t v54 = a1[3];
    uint64_t v55 = a1[7];
    uint64_t v56 = a1[8];
    uint64_t v58 = a1[9];
    uint64_t v57 = a1[10];
    uint64_t v59 = a1[11];
    double v60 = *((double *)a1 + 12) * 3.6;
    uint64_t v62 = a1[23];
    uint64_t v61 = a1[24];
    uint64_t v63 = a1[25];
    uint64_t v64 = a1[26];
    uint64_t v65 = a1[27];
    uint64_t v67 = a1[19];
    uint64_t v66 = a1[20];
    uint64_t v68 = a1[21];
    uint64_t v69 = a1[37];
    uint64_t v112 = a1[36];
    uint64_t v70 = a1[41];
    uint64_t v98 = a1[42];
    uint64_t v71 = a1[38];
    uint64_t v102 = a1[39];
    uint64_t v104 = a1[40];
    uint64_t v106 = a1[46];
    uint64_t v110 = a1[47];
    uint64_t v114 = a1[48];
    uint64_t v116 = a1[49];
    double v72 = *((float *)a1 + 44);
    double v73 = *((float *)a1 + 45);
    uint64_t v100 = a1[4];
    uint64_t v108 = a1[5];
    uint64_t v118 = a1[29];
    uint64_t v120 = a1[30];
    uint64_t v122 = a1[31];
    uint64_t v124 = a1[32];
    int v138 = *((unsigned __int8 *)a1 + 264);
    int v136 = *((unsigned __int8 *)a1 + 265);
    uint64_t v134 = a1[34];
    int v132 = *((_DWORD *)a1 + 70);
    uint64_t v74 = a1[13];
    uint64_t v130 = a1[14];
    int v128 = *((_DWORD *)a1 + 30);
    int v126 = *((_DWORD *)a1 + 31);
    v75 = a1 + 16;
    if (*((char *)a1 + 151) < 0) {
      v75 = (void *)*v75;
    }
    uint64_t v142 = a2;
    double v144 = v51;
    uint64_t v146 = v52;
    uint64_t v148 = v53;
    uint64_t v150 = v54;
    int v154 = HIDWORD(v140);
    int v152 = v140;
    uint64_t v156 = v55;
    uint64_t v158 = v56;
    uint64_t v160 = v57;
    uint64_t v162 = v58;
    uint64_t v164 = v59;
    uint64_t v166 = v74;
    uint64_t v168 = v61;
    uint64_t v172 = v62;
    uint64_t v174 = v63;
    uint64_t v176 = v64;
    uint64_t v178 = v65;
    uint64_t v180 = v67;
    int v76 = *((_DWORD *)a1 + 56);
    uint64_t v182 = v66;
    int v77 = *((_DWORD *)a1 + 86);
    uint64_t v184 = v68;
    int v78 = *((unsigned __int8 *)a1 + 228);
    uint64_t v188 = v69;
    uint64_t v79 = a1[44];
    uint64_t v190 = v71;
    int v80 = *((unsigned __int8 *)a1 + 229);
    uint64_t v192 = v70;
    int v81 = *((unsigned __int8 *)a1 + 350);
    int v82 = *((unsigned __int8 *)a1 + 351);
    uint64_t v186 = v112;
    int v83 = *((unsigned __int8 *)a1 + 360);
    uint64_t v194 = v98;
    int v84 = *((unsigned __int8 *)a1 + 349);
    uint64_t v196 = v102;
    int v85 = *((unsigned __int8 *)a1 + 361);
    uint64_t v198 = v104;
    int v86 = *((unsigned __int8 *)a1 + 362);
    uint64_t v200 = v106;
    int v87 = *((unsigned __int8 *)a1 + 348);
    uint64_t v202 = v110;
    int v88 = *((_DWORD *)a1 + 100);
    uint64_t v204 = v114;
    int v89 = *((_DWORD *)a1 + 101);
    uint64_t v206 = v116;
    uint64_t v90 = a1[51];
    uint64_t v208 = v100;
    uint64_t v91 = a1[6];
    uint64_t v210 = v108;
    int v92 = *((_DWORD *)a1 + 104);
    uint64_t v216 = v118;
    int v93 = *((_DWORD *)a1 + 105);
    uint64_t v94 = a1[53];
    int v141 = 136463619;
    uint64_t v218 = v120;
    __int16 v143 = 2050;
    __int16 v145 = 2050;
    __int16 v147 = 2050;
    __int16 v149 = 2050;
    uint64_t v220 = v122;
    __int16 v151 = 1026;
    __int16 v153 = 1026;
    uint64_t v222 = v124;
    __int16 v155 = 2049;
    __int16 v157 = 2049;
    __int16 v159 = 2050;
    __int16 v161 = 2050;
    __int16 v163 = 2050;
    __int16 v165 = 2050;
    __int16 v167 = 2050;
    __int16 v169 = 2050;
    double v170 = v60;
    __int16 v171 = 2050;
    __int16 v173 = 2050;
    __int16 v175 = 2050;
    __int16 v177 = 2050;
    __int16 v179 = 2049;
    __int16 v181 = 2049;
    __int16 v183 = 2050;
    __int16 v185 = 2049;
    __int16 v187 = 2049;
    __int16 v189 = 2050;
    __int16 v191 = 2049;
    __int16 v193 = 2049;
    __int16 v195 = 2049;
    __int16 v197 = 2049;
    __int16 v199 = 2049;
    __int16 v201 = 2049;
    __int16 v203 = 2049;
    __int16 v205 = 2049;
    __int16 v207 = 2049;
    __int16 v209 = 2049;
    __int16 v211 = 2050;
    double v212 = v72;
    __int16 v213 = 2050;
    double v214 = v73;
    __int16 v215 = 2050;
    __int16 v217 = 2050;
    __int16 v219 = 2050;
    __int16 v221 = 2050;
    __int16 v223 = 1026;
    int v224 = v138;
    __int16 v225 = 1026;
    int v226 = v136;
    __int16 v227 = 2050;
    uint64_t v228 = v134;
    __int16 v229 = 1026;
    int v230 = v132;
    __int16 v231 = 2049;
    uint64_t v232 = v130;
    __int16 v233 = 1026;
    int v234 = v128;
    __int16 v235 = 1026;
    int v236 = v126;
    __int16 v237 = 2081;
    v238 = v75;
    __int16 v239 = 1026;
    int v240 = v76;
    __int16 v241 = 1026;
    int v242 = v77;
    __int16 v243 = 1026;
    int v244 = v78;
    __int16 v245 = 2050;
    uint64_t v246 = v79;
    __int16 v247 = 1026;
    int v248 = v80;
    __int16 v249 = 1026;
    int v250 = v81;
    __int16 v251 = 1026;
    int v252 = v82;
    __int16 v253 = 1026;
    int v254 = v83;
    __int16 v255 = 1026;
    int v256 = v84;
    __int16 v257 = 1026;
    int v258 = v85;
    __int16 v259 = 1026;
    int v260 = v86;
    __int16 v261 = 1026;
    int v262 = v87;
    __int16 v263 = 1026;
    int v264 = v88;
    __int16 v265 = 1026;
    int v266 = v89;
    __int16 v267 = 2050;
    uint64_t v268 = v90;
    __int16 v269 = 2050;
    uint64_t v270 = v91;
    __int16 v271 = 1026;
    int v272 = v92;
    __int16 v273 = 1026;
    int v274 = v93;
    __int16 v275 = 2050;
    double v276 = a3;
    __int16 v277 = 2050;
    uint64_t v278 = v94;
    __int16 v95 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapCrumb::debugOutput(const std::string, double)", "%s\n", v95);
    if (v95 != (char *)buf) {
      free(v95);
    }
  }
}

void sub_1013E65F8(uint64_t a1, uint64_t *a2)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102324240);
  }
  double v4 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    BOOL v5 = a2;
    if (*((char *)a2 + 23) < 0) {
      BOOL v5 = (uint64_t *)*a2;
    }
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(a1 + 265);
    uint64_t v23 = v5;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v25 = v6;
    int v29 = v7;
    uint64_t v10 = *(void *)(a1 + 152);
    uint64_t v11 = *(void *)(a1 + 160);
    uint64_t v31 = v8;
    uint64_t v12 = *(void *)(a1 + 168);
    uint64_t v33 = v9;
    uint64_t v37 = v10;
    uint64_t v14 = *(void *)(a1 + 296);
    uint64_t v13 = *(void *)(a1 + 304);
    uint64_t v39 = v11;
    uint64_t v41 = v12;
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v45 = v14;
    uint64_t v47 = v13;
    uint64_t v17 = *(void *)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 96);
    uint64_t v49 = v15;
    uint64_t v53 = v17;
    uint64_t v19 = *(void *)(a1 + 184);
    uint64_t v55 = *(void *)(a1 + 192);
    uint64_t v57 = v18;
    uint64_t v20 = *(void *)(a1 + 208);
    uint64_t v61 = *(void *)(a1 + 200);
    uint64_t v63 = v20;
    uint64_t v65 = *(void *)(a1 + 216);
    int v69 = *(unsigned __int8 *)(a1 + 360);
    int v73 = *(unsigned __int8 *)(a1 + 361);
    int v77 = *(_DWORD *)(a1 + 404);
    int v81 = *(_DWORD *)(a1 + 420);
    int v27 = *(unsigned __int8 *)(a1 + 264);
    uint64_t v35 = *(void *)(a1 + 104);
    uint64_t v43 = *(void *)(a1 + 288);
    __int16 v30 = 2049;
    __int16 v32 = 2049;
    __int16 v36 = 2049;
    __int16 v38 = 2049;
    __int16 v42 = 2049;
    __int16 v44 = 2049;
    uint64_t v51 = v16;
    uint64_t v59 = v19;
    int v67 = *(unsigned __int8 *)(a1 + 351);
    int v71 = *(unsigned __int8 *)(a1 + 349);
    int v75 = *(unsigned __int8 *)(a1 + 362);
    int v79 = *(_DWORD *)(a1 + 416);
    __int16 v26 = 1026;
    __int16 v28 = 1026;
    __int16 v66 = 1026;
    __int16 v68 = 1026;
    __int16 v70 = 1026;
    __int16 v72 = 1026;
    __int16 v74 = 1026;
    __int16 v76 = 1026;
    __int16 v78 = 1026;
    __int16 v80 = 1026;
    __int16 v24 = 2050;
    __int16 v34 = 2050;
    __int16 v40 = 2050;
    __int16 v46 = 2050;
    __int16 v48 = 2050;
    __int16 v50 = 2050;
    __int16 v52 = 2050;
    __int16 v54 = 2050;
    __int16 v56 = 2050;
    __int16 v58 = 2050;
    __int16 v60 = 2050;
    __int16 v62 = 2050;
    __int16 v64 = 2050;
    __int16 v82 = 2050;
    uint64_t v83 = *(void *)(a1 + 424);
    *(_DWORD *)uint64_t buf = 136453891;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,%{public}s,T,%{public}.1lf,usable,%{public}d,ambiguous,%{public}d,LL,%{private}.7lf,%{private}.7lf,crse,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crseUnc,%{public}.1lf,spdMps,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,locationType,%{public}d,sigEnv,%{public}d,sigEnvFid,%{public}d,rw,%{public}.2lf", buf, 0x110u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102324240);
    }
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapCrumb::condensedDebugOutput(const std::string) const", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

std::string *sub_1013E6A88@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v12 = 0;
  sub_1004BD8CC((int *)&v12 + 1, &v12, *(double *)(a1 + 8));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  snprintf(__str, 0x100uLL, "trip,%lld", *(void *)a1);
  std::string::assign(a2, __str);
  snprintf(__str, 0x100uLL, ",T,%.1lf", *(double *)(a1 + 8));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",machT,%.2lf", *(double *)(a1 + 16));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",contT,%.2lf", *(double *)(a1 + 24));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gpsTMs,%d,%d", HIDWORD(v12), v12);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",LL,%.7lf,%.7lf", *(double *)(a1 + 56), *(double *)(a1 + 64));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",hunc,%.1lf", *(double *)(a1 + 80));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alt,%.1lf", *(double *)(a1 + 72));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",vunc,%.1lf", *(double *)(a1 + 88));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crse,%.1lf", *(double *)(a1 + 104));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crseUnc,%.1lf", *(double *)(a1 + 192));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdKph,%.3lf", *(double *)(a1 + 96) * 3.6);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdUncMps,%.1lf", *(double *)(a1 + 184));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",a95,%.1lf", *(double *)(a1 + 200));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",b95,%.1lf", *(double *)(a1 + 208));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",theta,%.1lf", *(double *)(a1 + 216));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapLL,%.7lf,%.7lf", *(double *)(a1 + 152), *(double *)(a1 + 160));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapCrse,%.1lf", *(double *)(a1 + 168));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapLL,%.7lf,%.7lf", *(double *)(a1 + 288), *(double *)(a1 + 296));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapCrse,%.1lf", *(double *)(a1 + 304));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",pSnapLL,%.7lf,%.7lf", *(double *)(a1 + 328), *(double *)(a1 + 336));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapLL,%.7lf,%.7lf", *(double *)(a1 + 312), *(double *)(a1 + 320));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 368), *(double *)(a1 + 376));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwFSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 384), *(double *)(a1 + 392));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwLL,%.7lf,%.7lf", *(double *)(a1 + 32), *(double *)(a1 + 40));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",score,%.1lf", *(float *)(a1 + 176));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ratio,%.1lf", *(float *)(a1 + 180));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",varFac,%.7g", *(double *)(a1 + 232));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",deltaAz,%.3lf", *(double *)(a1 + 240));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alngTrk,%.3lf", *(double *)(a1 + 248));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",acrsTrk,%.3lf", *(double *)(a1 + 256));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",usable,%d", *(unsigned __int8 *)(a1 + 264));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ambiguous,%d", *(unsigned __int8 *)(a1 + 265));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",proj,%.3lf", *(double *)(a1 + 272));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",type,%d", *(_DWORD *)(a1 + 280));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rseg,%lld", *(void *)(a1 + 112));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",frc,%d", *(_DWORD *)(a1 + 120));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fow,%d", *(_DWORD *)(a1 + 124));
  std::string::append(a2, __str);
  std::operator+<char>();
  double v4 = std::string::append(&v9, "\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v11 >= 0) {
    std::string::size_type v7 = HIBYTE(v11);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  snprintf(__str, 0x100uLL, ",activity,%d", *(_DWORD *)(a1 + 224));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",actConf,%d", *(_DWORD *)(a1 + 344));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",static,%d", *(unsigned __int8 *)(a1 + 228));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",staticSetAt,%.1lf", *(double *)(a1 + 352));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",mount,%d", *(unsigned __int8 *)(a1 + 229));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fitness,%d", *(unsigned __int8 *)(a1 + 350));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",shifted,%d", *(unsigned __int8 *)(a1 + 351));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",propagated,%d", *(unsigned __int8 *)(a1 + 360));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rail,%d", *(unsigned __int8 *)(a1 + 349));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",bridge,%d", *(unsigned __int8 *)(a1 + 361));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",tunnel,%d", *(unsigned __int8 *)(a1 + 362));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",favGPS,%d", *(unsigned __int8 *)(a1 + 348));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gnssCont,%d", *(_DWORD *)(a1 + 400));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",locationType,%d", *(_DWORD *)(a1 + 404));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",lifespan,%.1lf", *(double *)(a1 + 408));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rawCourse,%.1lf", *(double *)(a1 + 48));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rw,%.2lf", *(double *)(a1 + 424));
  return std::string::append(a2, __str);
}

void sub_1013E7430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(exception_object);
}

double sub_1013E7488(uint64_t a1, double *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 368) = v4;
  *(void *)(a1 + 376) = v5;
  *(void *)(a1 + 384) = v4;
  *(void *)(a1 + 392) = v5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  double v19 = 0.0;
  sub_100134750(v16, "SnapOutput");
  if (sub_1013E7730(a1, a2, (uint64_t *)v16, (double *)&v21, (double *)&v20, *(double *)(a1 + 152), *(double *)(a1 + 160)))
  {
    sub_100134750(__p, "FullSnapOutput");
    BOOL v6 = !sub_1013E7730(a1, a2, (uint64_t *)__p, &v19, (double *)&v18, *(double *)(a1 + 288), *(double *)(a1 + 296));
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v6 = 1;
  }
  if (v17 < 0)
  {
    operator delete(v16[0]);
    if (v6) {
      goto LABEL_7;
    }
LABEL_17:
    uint64_t v12 = v20;
    *(void *)(a1 + 368) = v21;
    *(void *)(a1 + 376) = v12;
    uint64_t v13 = v18;
    double result = v19;
    *(double *)(a1 + 384) = v19;
    *(void *)(a1 + 392) = v13;
    return result;
  }
  if (!v6) {
    goto LABEL_17;
  }
LABEL_7:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102324240);
  }
  std::string::size_type v7 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf, not matching, unable to compute snap from raw positions", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102324240);
    }
    uint64_t v10 = *(void *)(a1 + 8);
    int v22 = 134349056;
    uint64_t v23 = v10;
    int64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapCrumb::fillSnapSolutionFromRawGPS(CLDistanceCalc &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return result;
}

void sub_1013E76F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1013E7730(uint64_t a1, double *a2, uint64_t *a3, double *a4, double *a5, double a6, double a7)
{
  if (sub_1000EF668(*(double *)(a1 + 56), *(double *)(a1 + 64))
    || sub_1000EF668(*(double *)(a1 + 32), *(double *)(a1 + 40)))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102324240);
    }
    uint64_t v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v46 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMM, %{public}.1lf, null island", buf, 0xCu);
    }
    BOOL v16 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v16;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102324240);
    }
    uint64_t v27 = *(void *)(a1 + 8);
    int v33 = 134349056;
    uint64_t v34 = v27;
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
    return 0;
  }
  double v31 = 0.0;
  double v32 = 0.0;
  double v30 = 0.0;
  if (!sub_1000F17A8(a2, &v31, &v32, &v30, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), a6, a7, *(double *)(a1 + 72)))return 0; {
  uint64_t v29 = 0;
  }
  BOOL v16 = sub_10005B848(a2, a4, a5, (double *)&v29, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 72), v31, v32, v30);
  if (v16)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102324240);
    }
    uint64_t v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = a3;
      if (*((char *)a3 + 23) < 0) {
        uint64_t v20 = (uint64_t *)*a3;
      }
      double v21 = *a4;
      double v22 = *a5;
      *(_DWORD *)uint64_t buf = 134350339;
      uint64_t v46 = v19;
      __int16 v47 = 2080;
      __int16 v48 = v20;
      __int16 v49 = 2049;
      double v50 = a6;
      __int16 v51 = 2049;
      double v52 = a7;
      __int16 v53 = 2049;
      double v54 = v21;
      __int16 v55 = 2049;
      double v56 = v22;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf, New Snap Coordinates,%s,inSnapLat,%{private}.8lf,inSnapLon,%{private}.8lf,outSnapLat,%{private}.8lf,outSnapLon,%{private}.8lf", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102324240);
      }
      uint64_t v23 = *(void *)(a1 + 8);
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t *)*a3;
      }
      double v24 = *a4;
      double v25 = *a5;
      int v33 = 134350339;
      uint64_t v34 = v23;
      __int16 v35 = 2080;
      __int16 v36 = a3;
      __int16 v37 = 2049;
      double v38 = a6;
      __int16 v39 = 2049;
      double v40 = a7;
      __int16 v41 = 2049;
      double v42 = v24;
      __int16 v43 = 2049;
      double v44 = v25;
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  return v16;
}

void sub_1013E7B7C(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1013E7C28(_Unwind_Exception *a1)
{
}

void sub_1013E7C40(id a1)
{
  qword_102487918 = [[CMPedometerTableStepCadenceToStrideLength alloc] initWithTestMode:0];
}

void sub_1013E7D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_1013E7E70(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1023242A0);
  }
  BOOL v6 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3) UTF8String];
    *(_DWORD *)uint64_t buf = 136315138;
    id v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1023242A0);
    }
    id v23 = [[objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3) UTF8String];
    LODWORD(v30) = 136315138;
    *(void *)((char *)&v30 + 4) = v23;
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMPedometerTableStepCadenceToStrideLength logBins]_block_invoke", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  id result = [*(id *)(a1 + 40) isBinaryLogging];
  if (result)
  {
    *(void *)&long long v30 = off_1022E7458;
    int v31 = a3;
    [a2 begin];
    uint64_t v32 = v10;
    [a2 end];
    uint64_t v33 = v11;
    unsigned int v34 = [a2 state];
    [a2 valueOut];
    uint64_t v35 = v12;
    *((CFAbsoluteTime *)&v30 + 1) = Current;
    uint64_t v13 = sub_101282D9C();
    sub_10128431C(v13, (uint64_t)&v30);
    sub_10170140C(buf);
    sub_101727C68((uint64_t)buf);
    v29 |= 1u;
    CFAbsoluteTime v27 = Current;
    uint64_t v14 = v28;
    *(unsigned char *)(v28 + 40) |= 8u;
    *(_DWORD *)(v14 + 32) = a3;
    uint64_t v15 = v28;
    [a2 begin];
    *(unsigned char *)(v15 + 40) |= 1u;
    *(void *)(v15 + 8) = v16;
    uint64_t v17 = v28;
    [a2 end];
    *(unsigned char *)(v17 + 40) |= 2u;
    *(void *)(v17 + 16) = v18;
    uint64_t v19 = v28;
    unsigned int v20 = [a2 state];
    *(unsigned char *)(v19 + 40) |= 0x10u;
    *(_DWORD *)(v19 + 36) = v20;
    uint64_t v21 = v28;
    [a2 valueOut];
    *(unsigned char *)(v21 + 40) |= 4u;
    *(void *)(v21 + 24) = v22;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023242C0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    return (id)sub_101706914((PB::Base *)buf);
  }
  return result;
}

void sub_1013E81C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1013E8278(id a1, void *a2)
{
}

void sub_1013E8E60(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1013E8E94()
{
  qword_1024878D8 = 0;
  qword_1024878E0 = 0;
  qword_1024878E8 = 0;
  uint64_t v0 = operator new(0xA0uLL);
  qword_1024878E8 = (uint64_t)(v0 + 10);
  v0[6] = xmmword_101DB6208;
  v0[7] = unk_101DB6218;
  v0[8] = xmmword_101DB6228;
  v0[9] = unk_101DB6238;
  v0[2] = xmmword_101DB61C8;
  v0[3] = unk_101DB61D8;
  v0[4] = xmmword_101DB61E8;
  v0[5] = unk_101DB61F8;
  _OWORD *v0 = xmmword_101DB61A8;
  v0[1] = unk_101DB61B8;
  qword_1024878D8 = (uint64_t)v0;
  qword_1024878E0 = (uint64_t)(v0 + 10);
  __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_1024878D8, (void *)&_mh_execute_header);
  qword_1024878F8 = 0;
  qword_102487900 = 0;
  qword_1024878F0 = 0;
  char v1 = operator new(0xC0uLL);
  qword_102487900 = (uint64_t)(v1 + 12);
  v1[8] = xmmword_101DB62C8;
  v1[9] = unk_101DB62D8;
  v1[10] = xmmword_101DB62E8;
  v1[11] = unk_101DB62F8;
  v1[4] = xmmword_101DB6288;
  v1[5] = unk_101DB6298;
  v1[6] = xmmword_101DB62A8;
  v1[7] = unk_101DB62B8;
  *char v1 = xmmword_101DB6248;
  v1[1] = unk_101DB6258;
  v1[2] = xmmword_101DB6268;
  v1[3] = unk_101DB6278;
  qword_1024878F0 = (uint64_t)v1;
  qword_1024878F8 = (uint64_t)(v1 + 12);

  return __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_1024878F0, (void *)&_mh_execute_header);
}

uint64_t sub_1013E8FAC(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = *a3;
  if (*a2 != a2[1]) {
    *(void *)(a1 + 72) = *(void *)*a2;
  }
  *(double *)(a1 + 160) = sub_1013E907C(a1, a2);
  sub_1013E94E8(a1, a2);
  return a1;
}

void sub_1013E9050(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 207) < 0) {
    operator delete(*v3);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 144) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_1013E907C(uint64_t a1, void *a2)
{
  if (*a2 == a2[1]) {
    return -1.0;
  }
  sub_1013EA1C0((uint64_t)a2, (unint64_t *)&v74);
  uint64_t v3 = (char *)v74;
  uint64_t v4 = v75;
  long long v5 = *(_OWORD *)v74;
  long long v6 = *((_OWORD *)v74 + 1);
  long long v7 = *((_OWORD *)v74 + 3);
  long long v64 = *((_OWORD *)v74 + 2);
  long long v65 = v7;
  long long v62 = v5;
  long long v63 = v6;
  long long v8 = *((_OWORD *)v74 + 4);
  long long v9 = *((_OWORD *)v74 + 5);
  long long v10 = *((_OWORD *)v74 + 7);
  long long v68 = *((_OWORD *)v74 + 6);
  long long v69 = v10;
  long long v66 = v8;
  long long v67 = v9;
  long long v11 = *((_OWORD *)v74 + 8);
  long long v12 = *((_OWORD *)v74 + 9);
  long long v13 = *((_OWORD *)v74 + 11);
  long long v72 = *((_OWORD *)v74 + 10);
  long long v73 = v13;
  long long v70 = v11;
  long long v71 = v12;
  if (v74 != v75)
  {
    uint64_t v14 = (double *)(a1 + 96);
    uint64_t v15 = (char *)v74 + 8;
    uint64_t v16 = (long long *)v74;
    do
    {
      long long v17 = *(_OWORD *)(v3 + 24);
      *(_OWORD *)int v84 = *v15;
      long long v85 = v17;
      long long v18 = *(_OWORD *)(v3 + 40);
      long long v19 = *(_OWORD *)(v3 + 56);
      long long v20 = *(_OWORD *)(v3 + 88);
      long long v88 = *(_OWORD *)(v3 + 72);
      long long v89 = v20;
      long long v86 = v18;
      long long v87 = v19;
      long long v21 = *(_OWORD *)(v3 + 104);
      long long v22 = *(_OWORD *)(v3 + 120);
      long long v23 = *(_OWORD *)(v3 + 136);
      *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)(v3 + 148);
      long long v91 = v22;
      v92[0] = v23;
      long long v90 = v21;
      long long v24 = *(long long *)((char *)v16 + 24);
      *(_OWORD *)__p = *(long long *)((char *)v16 + 8);
      long long v54 = v24;
      long long v25 = *(long long *)((char *)v16 + 40);
      long long v26 = *(long long *)((char *)v16 + 56);
      long long v27 = *(long long *)((char *)v16 + 88);
      long long v57 = *(long long *)((char *)v16 + 72);
      long long v58 = v27;
      long long v55 = v25;
      long long v56 = v26;
      long long v28 = *(long long *)((char *)v16 + 104);
      long long v29 = *(long long *)((char *)v16 + 120);
      long long v30 = *(long long *)((char *)v16 + 136);
      *(_OWORD *)((char *)v61 + 12) = *(long long *)((char *)v16 + 148);
      long long v60 = v29;
      v61[0] = v30;
      long long v59 = v28;
      sub_1000F1268(v14, (uint64_t)v84, (uint64_t)__p);
      if (v31 > *((double *)sub_10141300C() + 10)) {
        break;
      }
      long long v32 = *v16;
      long long v33 = v16[1];
      long long v34 = v16[3];
      long long v64 = v16[2];
      long long v65 = v34;
      long long v62 = v32;
      long long v63 = v33;
      long long v35 = v16[4];
      long long v36 = v16[5];
      long long v37 = v16[7];
      long long v68 = v16[6];
      long long v69 = v37;
      long long v66 = v35;
      long long v67 = v36;
      long long v38 = v16[8];
      long long v39 = v16[9];
      long long v40 = v16[11];
      long long v72 = v16[10];
      long long v73 = v40;
      long long v70 = v38;
      long long v71 = v39;
      v16 += 12;
    }
    while (v16 != v4);
  }
  double v41 = *(double *)(v3 + 84) - *(double *)((char *)&v67 + 4);
  if (v41 < 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023242E0);
    }
    double v42 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      sub_100F66A1C((uint64_t)v3);
      int v43 = SBYTE7(v85);
      double v44 = (void **)v84[0];
      sub_100F66A1C((uint64_t)&v62);
      uint64_t v45 = v84;
      if (v43 < 0) {
        uint64_t v45 = v44;
      }
      if ((SBYTE7(v54) & 0x80u) == 0) {
        uint64_t v46 = __p;
      }
      else {
        uint64_t v46 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136380931;
      *(void *)&uint8_t buf[4] = v45;
      __int16 v77 = 2081;
      __int16 v78 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "WifiCentroidCalculator, timestamps out of order in getStationaryTimeInSeconds(), latest: %{private}s, oldest: %{private}s", buf, 0x16u);
      if (SBYTE7(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v85) < 0) {
        operator delete(v84[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v84, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023242E0);
      }
      sub_100F66A1C((uint64_t)v3);
      int v48 = SBYTE7(v54);
      __int16 v49 = (void **)__p[0];
      sub_100F66A1C((uint64_t)&v62);
      double v50 = __p;
      if (v48 < 0) {
        double v50 = v49;
      }
      if (v79 >= 0) {
        __int16 v51 = buf;
      }
      else {
        __int16 v51 = *(unsigned char **)buf;
      }
      int v80 = 136380931;
      int v81 = v50;
      __int16 v82 = 2081;
      uint64_t v83 = v51;
      double v52 = (char *)_os_log_send_and_compose_impl();
      if (v79 < 0) {
        operator delete(*(void **)buf);
      }
      if (SBYTE7(v54) < 0) {
        operator delete(__p[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "double CLWifiCentroidCalculator::computeStationaryTimeInSeconds(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v52);
      if (v52 != (char *)v84) {
        free(v52);
      }
    }
  }
  if (v74)
  {
    int v75 = (long long *)v74;
    operator delete(v74);
  }
  return v41;
}

void sub_1013E9484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1013E94E8(uint64_t a1, void *a2)
{
  uint64_t v2 = (char **)(a1 + 136);
  *(void *)(a1 + 144) = *(void *)(a1 + 136);
  if (*a2 != a2[1])
  {
    sub_1013EA1C0((uint64_t)a2, (unint64_t *)&v82);
    if (sub_1013EA5F0(a1, &v82))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023242E0);
      }
      long long v5 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        sub_100B39278((std::string *)__p);
        long long v6 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136380675;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, detected %{private}s as moving AP", buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_73;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023242E0);
      }
      sub_100B39278((std::string *)buf);
      long long v7 = (SBYTE7(v92) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)int v84 = 136380675;
      *(void *)&v84[4] = v7;
      long long v8 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE7(v92) < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v8);
      if (v8 == __p) {
        goto LABEL_73;
      }
    }
    else
    {
      long long v11 = v82;
      long long v12 = *(_OWORD *)((char *)v82 + 24);
      *(_OWORD *)uint64_t buf = *(_OWORD *)((char *)v82 + 8);
      long long v92 = v12;
      long long v13 = *(_OWORD *)((char *)v82 + 40);
      long long v14 = *(_OWORD *)((char *)v82 + 56);
      long long v15 = *(_OWORD *)((char *)v82 + 88);
      long long v95 = *(_OWORD *)((char *)v82 + 72);
      long long v96 = v15;
      long long v93 = v13;
      long long v94 = v14;
      long long v16 = *(_OWORD *)((char *)v82 + 104);
      long long v17 = *(_OWORD *)((char *)v82 + 120);
      long long v18 = *(_OWORD *)((char *)v82 + 136);
      *(_OWORD *)((char *)v99 + 12) = *(_OWORD *)((char *)v82 + 148);
      long long v98 = v17;
      v99[0] = v18;
      long long v97 = v16;
      double v19 = sub_100F669D4((uint64_t)v82);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023242E0);
      }
      long long v20 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        sub_100F66A1C((uint64_t)v11);
        long long v21 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)int v84 = 136380675;
        *(void *)&v84[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, latest entry %{private}s", v84, 0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023242E0);
        }
        sub_100F66A1C((uint64_t)v11);
        if (v87 >= 0) {
          __int16 v78 = v84;
        }
        else {
          __int16 v78 = *(unsigned char **)v84;
        }
        int v89 = 136380675;
        long long v90 = v78;
        char v79 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v87) < 0) {
          operator delete(*(void **)v84);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v79);
        if (v79 != __p) {
          free(v79);
        }
      }
      if (v19 <= *(double *)(a1 + 208))
      {
        double v25 = *((double *)sub_10141300C() + 8);
        long long v27 = (long long *)v82;
        long long v26 = v83;
        if (v82 != v83)
        {
          do
          {
            long long v28 = *(long long *)((char *)v27 + 24);
            *(_OWORD *)__p = *(long long *)((char *)v27 + 8);
            *(_OWORD *)&__p[16] = v28;
            long long v29 = *(long long *)((char *)v27 + 40);
            long long v30 = *(long long *)((char *)v27 + 56);
            long long v31 = *(long long *)((char *)v27 + 88);
            long long v103 = *(long long *)((char *)v27 + 72);
            long long v104 = v31;
            long long v101 = v29;
            long long v102 = v30;
            long long v32 = *(long long *)((char *)v27 + 104);
            long long v33 = *(long long *)((char *)v27 + 120);
            long long v34 = *(long long *)((char *)v27 + 136);
            *(_OWORD *)((char *)v107 + 12) = *(long long *)((char *)v27 + 148);
            long long v106 = v33;
            v107[0] = v34;
            long long v105 = v32;
            sub_1000F1268((double *)(a1 + 96), (uint64_t)buf, (uint64_t)__p);
            if (v35 < v25)
            {
              long long v36 = *(_OWORD **)(a1 + 144);
              unint64_t v37 = *(void *)(a1 + 152);
              if ((unint64_t)v36 >= v37)
              {
                unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - *v2) >> 6);
                unint64_t v49 = v48 + 1;
                if (v48 + 1 > 0x155555555555555) {
                  sub_1001D7FD4();
                }
                unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)*v2) >> 6);
                if (2 * v50 > v49) {
                  unint64_t v49 = 2 * v50;
                }
                if (v50 >= 0xAAAAAAAAAAAAAALL) {
                  unint64_t v51 = 0x155555555555555;
                }
                else {
                  unint64_t v51 = v49;
                }
                if (v51) {
                  double v52 = (char *)sub_10017EB28(a1 + 152, v51);
                }
                else {
                  double v52 = 0;
                }
                __int16 v53 = &v52[192 * v48];
                long long v54 = *v27;
                long long v55 = v27[1];
                long long v56 = v27[3];
                *((_OWORD *)v53 + 2) = v27[2];
                *((_OWORD *)v53 + 3) = v56;
                *(_OWORD *)__int16 v53 = v54;
                *((_OWORD *)v53 + 1) = v55;
                long long v57 = v27[4];
                long long v58 = v27[5];
                long long v59 = v27[7];
                *((_OWORD *)v53 + 6) = v27[6];
                *((_OWORD *)v53 + 7) = v59;
                *((_OWORD *)v53 + 4) = v57;
                *((_OWORD *)v53 + 5) = v58;
                long long v60 = v27[8];
                long long v61 = v27[9];
                long long v62 = v27[11];
                *((_OWORD *)v53 + 10) = v27[10];
                *((_OWORD *)v53 + 11) = v62;
                *((_OWORD *)v53 + 8) = v60;
                *((_OWORD *)v53 + 9) = v61;
                long long v64 = *(char **)(a1 + 136);
                long long v63 = *(char **)(a1 + 144);
                long long v65 = v53;
                if (v63 != v64)
                {
                  do
                  {
                    long long v66 = *((_OWORD *)v63 - 12);
                    long long v67 = *((_OWORD *)v63 - 11);
                    long long v68 = *((_OWORD *)v63 - 9);
                    *((_OWORD *)v65 - 10) = *((_OWORD *)v63 - 10);
                    *((_OWORD *)v65 - 9) = v68;
                    *((_OWORD *)v65 - 12) = v66;
                    *((_OWORD *)v65 - 11) = v67;
                    long long v69 = *((_OWORD *)v63 - 8);
                    long long v70 = *((_OWORD *)v63 - 7);
                    long long v71 = *((_OWORD *)v63 - 5);
                    *((_OWORD *)v65 - 6) = *((_OWORD *)v63 - 6);
                    *((_OWORD *)v65 - 5) = v71;
                    *((_OWORD *)v65 - 8) = v69;
                    *((_OWORD *)v65 - 7) = v70;
                    long long v72 = *((_OWORD *)v63 - 4);
                    long long v73 = *((_OWORD *)v63 - 3);
                    long long v74 = *((_OWORD *)v63 - 1);
                    *((_OWORD *)v65 - 2) = *((_OWORD *)v63 - 2);
                    *((_OWORD *)v65 - 1) = v74;
                    *((_OWORD *)v65 - 4) = v72;
                    *((_OWORD *)v65 - 3) = v73;
                    v65 -= 192;
                    v63 -= 192;
                  }
                  while (v63 != v64);
                  long long v63 = *v2;
                }
                __int16 v47 = v53 + 192;
                *(void *)(a1 + 136) = v65;
                *(void *)(a1 + 144) = v53 + 192;
                *(void *)(a1 + 152) = &v52[192 * v51];
                if (v63) {
                  operator delete(v63);
                }
              }
              else
              {
                long long v38 = *v27;
                long long v39 = v27[1];
                long long v40 = v27[3];
                v36[2] = v27[2];
                v36[3] = v40;
                _OWORD *v36 = v38;
                v36[1] = v39;
                long long v41 = v27[4];
                long long v42 = v27[5];
                long long v43 = v27[7];
                v36[6] = v27[6];
                v36[7] = v43;
                v36[4] = v41;
                v36[5] = v42;
                long long v44 = v27[8];
                long long v45 = v27[9];
                long long v46 = v27[11];
                v36[10] = v27[10];
                v36[11] = v46;
                v36[8] = v44;
                v36[9] = v45;
                __int16 v47 = v36 + 12;
              }
              *(void *)(a1 + 144) = v47;
            }
            v27 += 12;
          }
          while (v27 != v26);
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023242E0);
        }
        int v75 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
          unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6);
          *(_DWORD *)__p = 134218496;
          *(void *)&__p[4] = v76;
          *(_WORD *)&__p[12] = 2048;
          *(void *)&__p[14] = v77;
          *(_WORD *)&__p[22] = 2048;
          *(double *)&__p[24] = v25;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, using %zu samples from %zu samples based on outlier threshold %.1f", __p, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_73;
        }
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023242E0);
        }
        unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
        unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6);
        *(_DWORD *)int v84 = 134218496;
        *(void *)&v84[4] = v80;
        __int16 v85 = 2048;
        unint64_t v86 = v81;
        __int16 v87 = 2048;
        double v88 = v25;
        long long v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v8);
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023242E0);
        }
        long long v22 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = *(void *)(a1 + 208);
          *(_DWORD *)__p = 134283777;
          *(double *)&__p[4] = v19;
          *(_WORD *)&__p[12] = 2049;
          *(void *)&__p[14] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "WifiCentroidCalculator, discarding all entries as latest entry has age %{private}.1fs, greater than %{private}.1fs", __p, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_73;
        }
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023242E0);
        }
        unint64_t v24 = *(void *)(a1 + 208);
        *(_DWORD *)int v84 = 134283777;
        *(double *)&v84[4] = v19;
        __int16 v85 = 2049;
        unint64_t v86 = v24;
        long long v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v8);
      }
      if (v8 == __p)
      {
LABEL_73:
        if (v82)
        {
          uint64_t v83 = (long long *)v82;
          operator delete(v82);
        }
        return;
      }
    }
    free(v8);
    goto LABEL_73;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023242E0);
  }
  long long v9 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, empty input entries", __p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023242E0);
    }
    *(_WORD *)uint64_t buf = 0;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v10);
    if (v10 != __p) {
      free(v10);
    }
  }
}

void sub_1013E9F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013E9FF0(uint64_t a1, void *a2)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  sub_1013EA1C0((uint64_t)a2, &v31);
  uint64_t v3 = (char *)v31;
  if (v32 == (char *)v31) {
    sub_100273D6C();
  }
  long long v4 = *(_OWORD *)(v31 + 24);
  __dst[0] = *(_OWORD *)(v31 + 8);
  __dst[1] = v4;
  long long v5 = *(_OWORD *)(v31 + 40);
  long long v6 = *(_OWORD *)(v31 + 56);
  long long v7 = *(_OWORD *)(v31 + 88);
  __dst[4] = *(_OWORD *)(v31 + 72);
  __dst[5] = v7;
  __dst[2] = v5;
  __dst[3] = v6;
  long long v8 = *(_OWORD *)(v31 + 104);
  long long v9 = *(_OWORD *)(v31 + 120);
  long long v10 = *(_OWORD *)(v31 + 136);
  *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v31 + 148);
  __dst[7] = v9;
  v30[0] = v10;
  __dst[6] = v8;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-v31] >> 6) <= 1)
  {
    uint64_t v11 = 0;
LABEL_13:
    long long v32 = v3;
    operator delete(v3);
    return v11;
  }
  uint64_t v11 = 0;
  long long v12 = (double *)(a1 + 96);
  unint64_t v13 = 1;
  uint64_t v14 = 200;
  do
  {
    long long v15 = *(_OWORD *)&v3[v14 + 16];
    v27[0] = *(_OWORD *)&v3[v14];
    v27[1] = v15;
    long long v16 = *(_OWORD *)&v3[v14 + 32];
    long long v17 = *(_OWORD *)&v3[v14 + 48];
    long long v18 = *(_OWORD *)&v3[v14 + 80];
    v27[4] = *(_OWORD *)&v3[v14 + 64];
    v27[5] = v18;
    v27[2] = v16;
    v27[3] = v17;
    long long v19 = *(_OWORD *)&v3[v14 + 96];
    long long v20 = *(_OWORD *)&v3[v14 + 112];
    long long v21 = *(_OWORD *)&v3[v14 + 128];
    *(_OWORD *)&v28[12] = *(_OWORD *)&v3[v14 + 140];
    v27[7] = v20;
    *(_OWORD *)long long v28 = v21;
    v27[6] = v19;
    sub_1000F1268(v12, (uint64_t)__dst, (uint64_t)v27);
    double v23 = v22;
    unint64_t v24 = sub_10141300C();
    uint64_t v3 = (char *)v31;
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-v31] >> 6);
    if (v23 > *((double *)v24 + 10))
    {
      if (v25 <= v13) {
        sub_100273D6C();
      }
      uint64_t v11 = (v11 + 1);
      memmove(__dst, (const void *)(v31 + v14), 0x9CuLL);
    }
    ++v13;
    v14 += 192;
  }
  while (v13 < v25);
  if (v3) {
    goto LABEL_13;
  }
  return v11;
}

void sub_1013EA198(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013EA1C0(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_10079DC90(a2, *(const void **)a1, *(void *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6));
  uint64_t v3 = (char *)a2[1];
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*a2] >> 6));
  if (v3 == (char *)*a2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_1013EB5F0(*a2, v3, v5, 1);
  unint64_t v6 = *a2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6);
  if (v7 < 2) {
    return;
  }
  uint64_t v8 = 0;
  double v9 = *(double *)(v6 + 84);
  unint64_t v10 = v6 + 276;
  unint64_t v11 = 1;
  while (1)
  {
    double v12 = v9;
    double v9 = *(double *)(v10 + v8);
    if (v12 < v9) {
      break;
    }
    ++v11;
    v8 += 192;
    if (v7 == v11) {
      return;
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023242E0);
  }
  unint64_t v13 = v11 - 1;
  uint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6) <= v13) {
      goto LABEL_40;
    }
    long long v15 = v30;
    sub_100F66A1C(*a2 + v8);
    if (v31 < 0) {
      long long v15 = (void **)v30[0];
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6) <= v11) {
      sub_100273D6C();
    }
    sub_100F66A1C(*a2 + v8 + 192);
    if (v21 >= 0) {
      long long v16 = __p;
    }
    else {
      long long v16 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136380931;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v23 = 2081;
    unint64_t v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "WifiCentroidCalculator, timestamps out of order! newer: %{private}s, older: %{private}s", buf, 0x16u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  if (!sub_10013D1A0(115, 0)) {
    return;
  }
  bzero(v30, 0x65CuLL);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023242E0);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6) <= v13) {
LABEL_40:
  }
    sub_100273D6C();
  long long v17 = __p;
  sub_100F66A1C(*a2 + v8);
  if (v21 < 0) {
    long long v17 = (void **)__p[0];
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6) <= v11) {
    sub_100273D6C();
  }
  sub_100F66A1C(*a2 + v8 + 192);
  if (v25 >= 0) {
    long long v18 = buf;
  }
  else {
    long long v18 = *(unsigned char **)buf;
  }
  int v26 = 136380931;
  long long v27 = v17;
  __int16 v28 = 2081;
  long long v29 = v18;
  long long v19 = (char *)_os_log_send_and_compose_impl();
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  sub_1004BA5E4("Generic", 1, 0, 0, "void sanityCheckEntriesAreSortedFromLatestToOldest(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v19);
  if (v19 != (char *)v30) {
    free(v19);
  }
}

void sub_1013EA5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  long long v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1013EA5F0(uint64_t a1, void *a2)
{
  int v2 = sub_1013E9FF0(a1, a2);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023242E0);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    sub_100B39278(__p);
    unint64_t v4 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, AP %{private}s has %{public}d moves", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023242E0);
    }
    sub_100B39278(&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v9 = 136380931;
    unint64_t v10 = p_buf;
    __int16 v11 = 1026;
    int v12 = v2;
    unint64_t v7 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiCentroidCalculator::isMovingAp(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", (const char *)v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v2 > *((_DWORD *)sub_10141300C() + 22);
}

__n128 sub_1013EA83C@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1013EA8A8(a1);
  sub_1013EAA10(a1);
  sub_1013EAB34(a1);
  sub_1013EAC3C(a1);
  sub_1013EAD18(a1);
  sub_1013EAE08(a1, (uint64_t *)(a1 + 136));
  long long v4 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v5;
  __n128 result = *(__n128 *)a1;
  long long v7 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v7;
  return result;
}

void sub_1013EA8A8(uint64_t a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
  double v3 = -180.0;
  if (v2 < *((int *)sub_10141300C() + 18)) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  if (v4 == v5) {
    goto LABEL_16;
  }
  double v6 = 1.79769313e308;
  double v7 = -1.79769313e308;
  uint64_t v8 = *(void *)(a1 + 136);
  do
  {
    double v9 = *(double *)(v8 + 20);
    double v7 = fmax(v7, v9);
    double v6 = fmin(v6, v9);
    v8 += 192;
  }
  while (v8 != v5);
  BOOL v10 = v6 < -179.9 && v7 > 179.9;
  if (v4 == v5)
  {
LABEL_16:
    double v17 = -180.0;
  }
  else
  {
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    do
    {
      double v14 = *(double *)(v4 + 12);
      double v15 = *(double *)(v4 + 20);
      double v16 = sub_1013EB37C(v4);
      if (v10) {
        double v15 = fmod(v15 + 360.0, 360.0);
      }
      double v13 = v13 + v16;
      double v11 = v11 + v14 * v16;
      double v12 = v12 + v15 * v16;
      v4 += 192;
    }
    while (v4 != v5);
    double v17 = -180.0;
    if (v13 > 0.0)
    {
      double v3 = v11 / v13;
      double v17 = v12 / v13;
      if (v12 / v13 > 180.0) {
        double v17 = v17 + -360.0;
      }
    }
  }
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v17;
}

void sub_1013EAA10(uint64_t a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
  double v3 = -1.0;
  if (v2 >= *((int *)sub_10141300C() + 18) && *(double *)a1 >= -90.0 && *(double *)a1 <= 90.0)
  {
    double v4 = *(double *)(a1 + 8);
    if (v4 <= 180.0 && v4 >= -180.0)
    {
      uint64_t v5 = *(void *)(a1 + 136);
      uint64_t v6 = *(void *)(a1 + 144);
      if (v5 != v6)
      {
        double v7 = 0.0;
        double v8 = 0.0;
        do
        {
          double v9 = sub_1000F1648((double *)(a1 + 96), *(double *)(v5 + 12), *(double *)(v5 + 20), *(double *)a1, *(double *)(a1 + 8), 0.0);
          double v10 = sub_1013EB37C(v5);
          double v7 = v7 + v9 * v10 * v9;
          double v8 = v8 + v10;
          v5 += 192;
        }
        while (v5 != v6);
        if (v8 > 0.0) {
          double v3 = fmax(sqrt(v7 / v8), *((double *)sub_10141300C() + 7));
        }
      }
    }
  }
  *(double *)(a1 + 32) = v3;
}

char *sub_1013EAB34(uint64_t a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
  double v3 = sub_10141300C();
  if (v2 < *((int *)v3 + 18))
  {
    __n128 result = sub_10141300C();
    double v5 = *((double *)result + 6);
LABEL_3:
    *(double *)(a1 + 16) = v5;
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  if (v6 != v7)
  {
    double v8 = 0.0;
    double v9 = 1.79769313e308;
    double v10 = -1.79769313e308;
    double v11 = 0.0;
    do
    {
      LODWORD(v3) = sub_1013EB434((uint64_t)v3, v6);
      if (v3)
      {
        double v12 = *(double *)(v6 + 36);
        double v10 = fmax(v10, v12);
        double v9 = fmin(v9, v12);
        double v13 = sub_1013EB37C(v6);
        double v11 = v11 + v13;
        double v8 = v8 + v12 * v13;
      }
      v6 += 192;
    }
    while (v6 != v7);
    if (v11 != 0.0)
    {
      __n128 result = sub_10141300C();
      if (v10 - v9 <= *((double *)result + 5))
      {
        double v5 = v8 / v11;
        goto LABEL_3;
      }
    }
  }
  __n128 result = sub_10141300C();
  *(void *)(a1 + 16) = *((void *)result + 6);
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  return result;
}

void sub_1013EAC3C(uint64_t a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
  double v3 = -1.0;
  if (v2 >= *((int *)sub_10141300C() + 18))
  {
    double v4 = *(double *)(a1 + 16);
    double v5 = sub_10141300C();
    if (v4 != *((double *)v5 + 6))
    {
      uint64_t v6 = *(void *)(a1 + 136);
      uint64_t v7 = *(void *)(a1 + 144);
      if (v6 != v7)
      {
        double v8 = 0.0;
        double v9 = 0.0;
        do
        {
          LODWORD(v5) = sub_1013EB434((uint64_t)v5, v6);
          if (v5)
          {
            double v10 = vabdd_f64(*(double *)(a1 + 16), *(double *)(v6 + 36));
            double v11 = sub_1013EB37C(v6);
            double v8 = v8 + v11 * v10 * v10;
            double v9 = v9 + v11;
          }
          v6 += 192;
        }
        while (v6 != v7);
        if (v9 > 0.0) {
          double v3 = sqrt(v8 / v9);
        }
      }
    }
  }
  *(double *)(a1 + 40) = v3;
}

void sub_1013EAD18(uint64_t a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 6);
  if (v2 >= *((int *)sub_10141300C() + 18))
  {
    int v3 = -1;
    if (*(double *)a1 >= -90.0 && *(double *)a1 <= 90.0)
    {
      double v4 = *(double *)(a1 + 8);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        uint64_t v5 = *(void *)(a1 + 136);
        for (uint64_t i = *(void *)(a1 + 144); v5 != i; v5 += 192)
          int v3 = (int)fmax((double)v3, sub_1000F1648((double *)(a1 + 96), *(double *)(v5 + 12), *(double *)(v5 + 20), *(double *)a1, *(double *)(a1 + 8), 0.0));
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  *(_DWORD *)(a1 + 52) = v3;
}

void sub_1013EAE08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return;
  }
  sub_1013EA1C0((uint64_t)a2, (unint64_t *)&__p);
  uint64_t v5 = __p;
  *(void *)(a1 + 168) = *((void *)__p + 23);
  *(unsigned char *)(a1 + 176) = 1;
  sub_100F66A00((uint64_t)v5, buf);
  uint64_t v6 = (v3 - v2) >> 6;
  uint64_t v7 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*v7);
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * v6;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)buf;
  *(void *)(a1 + 200) = *(void *)&buf[16];
  if (v5[23] != -1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023242E0);
    }
    double v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = (void *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0) {
        double v10 = *v7;
      }
      *(_DWORD *)std::string buf = 136380931;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiCentroidCalculator, inferred associated AP LOI type %{private}s using latest sample out of %zu samples", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023242E0);
      }
      if (*(char *)(a1 + 207) < 0) {
        uint64_t v7 = (void **)*v7;
      }
      int v38 = 136380931;
      long long v39 = v7;
      __int16 v40 = 2048;
      unint64_t v41 = v8;
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::inferLocationOfInterestType(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v27);
      goto LABEL_41;
    }
    goto LABEL_12;
  }
  sub_100F83A18(a1, (uint64_t)buf);
  sub_10106EA88((uint64_t)buf, (uint64_t)&v38);
  double v12 = (char *)__p;
  double v11 = v29;
  if (v29 == __p) {
    goto LABEL_12;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  while (1)
  {
    double v15 = &v12[v13];
    if (*(void *)&v12[v13 + 184] != -1) {
      break;
    }
LABEL_20:
    ++v14;
    v13 += 192;
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 6) <= v14) {
      goto LABEL_12;
    }
  }
  long long v16 = *(_OWORD *)(v15 + 24);
  *(_OWORD *)std::string buf = *(_OWORD *)(v15 + 8);
  *(_OWORD *)&uint8_t buf[16] = v16;
  long long v17 = *(_OWORD *)(v15 + 40);
  long long v18 = *(_OWORD *)(v15 + 56);
  long long v19 = *(_OWORD *)(v15 + 88);
  long long v44 = *(_OWORD *)(v15 + 72);
  long long v45 = v19;
  *(_OWORD *)&unsigned char buf[32] = v17;
  long long v43 = v18;
  long long v20 = *(_OWORD *)(v15 + 104);
  long long v21 = *(_OWORD *)(v15 + 120);
  long long v22 = *(_OWORD *)(v15 + 136);
  *(_OWORD *)((char *)v48 + 12) = *(_OWORD *)(v15 + 148);
  long long v47 = v21;
  v48[0] = v22;
  long long v46 = v20;
  sub_1000F1268((double *)(a1 + 96), (uint64_t)&v38, (uint64_t)buf);
  double v24 = v23;
  if (v23 > *((double *)sub_10141300C() + 8))
  {
    double v12 = (char *)__p;
    double v11 = v29;
    goto LABEL_20;
  }
  *(void *)(a1 + 168) = *(void *)&v12[v13 + 184];
  *(unsigned char *)(a1 + 176) = 1;
  sub_100F66A00((uint64_t)&v12[v13], buf);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)buf;
  *(void *)(a1 + 200) = *(void *)&buf[16];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023242E0);
  }
  char v25 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = (void *)(a1 + 184);
    if (*(char *)(a1 + 207) < 0) {
      int v26 = *v7;
    }
    *(_DWORD *)std::string buf = 136381443;
    *(void *)&uint8_t buf[4] = v26;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v14 + 1;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v8;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(double *)&buf[30] = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WifiCentroidCalculator, inferred associated AP LOI type %{private}s using sample %d / %zu, distance %.1fm", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023242E0);
    }
    if (*(char *)(a1 + 207) < 0) {
      uint64_t v7 = (void **)*v7;
    }
    int v30 = 136381443;
    char v31 = v7;
    __int16 v32 = 1024;
    int v33 = v14 + 1;
    __int16 v34 = 2048;
    unint64_t v35 = v8;
    __int16 v36 = 2048;
    double v37 = v24;
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::inferLocationOfInterestType(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v27);
LABEL_41:
    if (v27 != buf) {
      free(v27);
    }
  }
LABEL_12:
  if (__p)
  {
    long long v29 = __p;
    operator delete(__p);
  }
}

void sub_1013EB338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1013EB37C(uint64_t a1)
{
  if (!*sub_10141300C()) {
    return 1.0;
  }
  double v2 = (double)*(int *)(a1 + 168);
  if (*((double *)sub_10141300C() + 2) < v2) {
    double v2 = (double)(int)*((double *)sub_10141300C() + 2);
  }
  if (*((double *)sub_10141300C() + 1) > v2) {
    double v2 = (double)(int)*((double *)sub_10141300C() + 1);
  }
  double v3 = *((double *)sub_10141300C() + 2) - v2;
  double v4 = v3 / *((double *)sub_10141300C() + 3);

  return exp(v4);
}

BOOL sub_1013EB434(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 36);
  if (v3 == *((double *)sub_10141300C() + 6)) {
    return 0;
  }
  double v5 = *(double *)(a2 + 44);
  return v5 <= *((double *)sub_10141300C() + 4);
}

uint64_t sub_1013EB48C(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

char *sub_1013EB498@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[207] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 23), *((void *)result + 24));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 184);
  *(void *)(a2 + 16) = *((void *)result + 25);
  return result;
}

CLWifiAssociatedApCentroidDO *sub_1013EB4C4(uint64_t a1)
{
  double v2 = [CLWifiAssociatedApCentroidDO alloc];
  sub_100B39278(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  double v4 = +[NSString stringWithUTF8String:p_p];
  double v5 = (void *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    double v5 = (void *)*v5;
  }
  uint64_t v6 = [(CLWifiAssociatedApCentroidDO *)v2 initWithMac:v4 latitude:*(unsigned int *)(a1 + 52) longitude:+[NSString stringWithUTF8String:v5] altitude:*(double *)a1 horizontalAccuracy:*(double *)(a1 + 8) verticalAccuracy:*(double *)(a1 + 16) reach:*(double *)(a1 + 32) stationaryTimeInSeconds:*(double *)(a1 + 40) loiType:*(double *)(a1 + 160) lastUpdated:CFAbsoluteTimeGetCurrent()];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1013EB5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013EB5F0(unint64_t a1, char *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          double v11 = (double *)(v10 + 276);
          uint64_t v12 = (uint64_t)&a2[-v10];
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v10] >> 6);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 108) > *(double *)(v10 + 84))
                {
                  long long v293 = *(_OWORD *)(v10 + 32);
                  long long v305 = *(_OWORD *)(v10 + 48);
                  long long v269 = *(_OWORD *)v10;
                  long long v281 = *(_OWORD *)(v10 + 16);
                  long long v341 = *(_OWORD *)(v10 + 96);
                  long long v353 = *(_OWORD *)(v10 + 112);
                  long long v317 = *(_OWORD *)(v10 + 64);
                  long long v329 = *(_OWORD *)(v10 + 80);
                  long long v380 = *(_OWORD *)(v10 + 160);
                  long long v389 = *(_OWORD *)(v10 + 176);
                  long long v362 = *(_OWORD *)(v10 + 128);
                  long long v371 = *(_OWORD *)(v10 + 144);
                  long long v87 = *((_OWORD *)a2 - 12);
                  long long v88 = *((_OWORD *)a2 - 11);
                  long long v89 = *((_OWORD *)a2 - 9);
                  *(_OWORD *)(v10 + 32) = *((_OWORD *)a2 - 10);
                  *(_OWORD *)(v10 + 48) = v89;
                  *(_OWORD *)unint64_t v10 = v87;
                  *(_OWORD *)(v10 + 16) = v88;
                  long long v90 = *((_OWORD *)a2 - 8);
                  long long v91 = *((_OWORD *)a2 - 7);
                  long long v92 = *((_OWORD *)a2 - 5);
                  *(_OWORD *)(v10 + 96) = *((_OWORD *)a2 - 6);
                  *(_OWORD *)(v10 + 112) = v92;
                  *(_OWORD *)(v10 + 64) = v90;
                  *(_OWORD *)(v10 + 80) = v91;
                  long long v93 = *((_OWORD *)a2 - 4);
                  long long v94 = *((_OWORD *)a2 - 3);
                  long long v95 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v10 + 160) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + 176) = v95;
                  *(_OWORD *)(v10 + 128) = v93;
                  *(_OWORD *)(v10 + 144) = v94;
                  *((_OWORD *)a2 - 10) = v293;
                  *((_OWORD *)a2 - 9) = v305;
                  *((_OWORD *)a2 - 12) = v269;
                  *((_OWORD *)a2 - 11) = v281;
                  *((_OWORD *)a2 - 6) = v341;
                  *((_OWORD *)a2 - 5) = v353;
                  *((_OWORD *)a2 - 8) = v317;
                  *((_OWORD *)a2 - 7) = v329;
                  *((_OWORD *)a2 - 2) = v380;
                  *((_OWORD *)a2 - 1) = v389;
                  *((_OWORD *)a2 - 4) = v362;
                  *((_OWORD *)a2 - 3) = v371;
                }
                break;
              case 3uLL:
                sub_1013EC748((long long *)v10, (long long *)(v10 + 192), (long long *)a2 - 12);
                break;
              case 4uLL:
                sub_1013ECFF8(v10, v10 + 192, v10 + 384, (long long *)a2 - 12);
                break;
              case 5uLL:
                long long v96 = (long long *)(v10 + 192);
                long long v97 = (long long *)(v10 + 384);
                long long v98 = (long long *)(v10 + 576);
                sub_1013ECFF8(v10, v10 + 192, v10 + 384, (long long *)(v10 + 576));
                if (*(double *)(a2 - 108) > *(double *)(v10 + 660))
                {
                  long long v342 = *(_OWORD *)(v10 + 672);
                  long long v354 = *(_OWORD *)(v10 + 688);
                  long long v318 = *(_OWORD *)(v10 + 640);
                  long long v330 = *(_OWORD *)(v10 + 656);
                  long long v381 = *(_OWORD *)(v10 + 736);
                  long long v390 = *(_OWORD *)(v10 + 752);
                  long long v363 = *(_OWORD *)(v10 + 704);
                  long long v372 = *(_OWORD *)(v10 + 720);
                  long long v270 = *v98;
                  long long v282 = *(_OWORD *)(v10 + 592);
                  long long v294 = *(_OWORD *)(v10 + 608);
                  long long v306 = *(_OWORD *)(v10 + 624);
                  long long v99 = *((_OWORD *)a2 - 12);
                  long long v100 = *((_OWORD *)a2 - 11);
                  long long v101 = *((_OWORD *)a2 - 9);
                  *(_OWORD *)(v10 + 608) = *((_OWORD *)a2 - 10);
                  *(_OWORD *)(v10 + 624) = v101;
                  *long long v98 = v99;
                  *(_OWORD *)(v10 + 592) = v100;
                  long long v102 = *((_OWORD *)a2 - 8);
                  long long v103 = *((_OWORD *)a2 - 7);
                  long long v104 = *((_OWORD *)a2 - 5);
                  *(_OWORD *)(v10 + 672) = *((_OWORD *)a2 - 6);
                  *(_OWORD *)(v10 + 688) = v104;
                  *(_OWORD *)(v10 + 640) = v102;
                  *(_OWORD *)(v10 + 656) = v103;
                  long long v105 = *((_OWORD *)a2 - 4);
                  long long v106 = *((_OWORD *)a2 - 3);
                  long long v107 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v10 + 736) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + 752) = v107;
                  *(_OWORD *)(v10 + 704) = v105;
                  *(_OWORD *)(v10 + 720) = v106;
                  *((_OWORD *)a2 - 10) = v294;
                  *((_OWORD *)a2 - 9) = v306;
                  *((_OWORD *)a2 - 12) = v270;
                  *((_OWORD *)a2 - 11) = v282;
                  *((_OWORD *)a2 - 6) = v342;
                  *((_OWORD *)a2 - 5) = v354;
                  *((_OWORD *)a2 - 8) = v318;
                  *((_OWORD *)a2 - 7) = v330;
                  *((_OWORD *)a2 - 2) = v381;
                  *((_OWORD *)a2 - 1) = v390;
                  *((_OWORD *)a2 - 4) = v363;
                  *((_OWORD *)a2 - 3) = v372;
                  if (*(double *)(v10 + 660) > *(double *)(v10 + 468))
                  {
                    long long v364 = *(_OWORD *)(v10 + 512);
                    long long v373 = *(_OWORD *)(v10 + 528);
                    long long v382 = *(_OWORD *)(v10 + 544);
                    long long v391 = *(_OWORD *)(v10 + 560);
                    long long v319 = *(_OWORD *)(v10 + 448);
                    long long v331 = *(_OWORD *)(v10 + 464);
                    long long v343 = *(_OWORD *)(v10 + 480);
                    long long v355 = *(_OWORD *)(v10 + 496);
                    long long v271 = *v97;
                    long long v283 = *(_OWORD *)(v10 + 400);
                    long long v295 = *(_OWORD *)(v10 + 416);
                    long long v307 = *(_OWORD *)(v10 + 432);
                    long long v108 = *(_OWORD *)(v10 + 720);
                    *(_OWORD *)(v10 + 512) = *(_OWORD *)(v10 + 704);
                    *(_OWORD *)(v10 + 528) = v108;
                    long long v109 = *(_OWORD *)(v10 + 752);
                    *(_OWORD *)(v10 + 544) = *(_OWORD *)(v10 + 736);
                    *(_OWORD *)(v10 + 560) = v109;
                    long long v110 = *(_OWORD *)(v10 + 656);
                    *(_OWORD *)(v10 + 448) = *(_OWORD *)(v10 + 640);
                    *(_OWORD *)(v10 + 464) = v110;
                    long long v111 = *(_OWORD *)(v10 + 688);
                    *(_OWORD *)(v10 + 480) = *(_OWORD *)(v10 + 672);
                    *(_OWORD *)(v10 + 496) = v111;
                    long long v112 = *(_OWORD *)(v10 + 592);
                    *long long v97 = *v98;
                    *(_OWORD *)(v10 + 400) = v112;
                    long long v113 = *(_OWORD *)(v10 + 624);
                    *(_OWORD *)(v10 + 416) = *(_OWORD *)(v10 + 608);
                    *(_OWORD *)(v10 + 432) = v113;
                    *(_OWORD *)(v10 + 704) = v364;
                    *(_OWORD *)(v10 + 720) = v373;
                    *(_OWORD *)(v10 + 736) = v382;
                    *(_OWORD *)(v10 + 752) = v391;
                    *(_OWORD *)(v10 + 640) = v319;
                    *(_OWORD *)(v10 + 656) = v331;
                    *(_OWORD *)(v10 + 672) = v343;
                    *(_OWORD *)(v10 + 688) = v355;
                    *long long v98 = v271;
                    *(_OWORD *)(v10 + 592) = v283;
                    BOOL v114 = *(double *)(v10 + 468) <= *v11;
                    *(_OWORD *)(v10 + 608) = v295;
                    *(_OWORD *)(v10 + 624) = v307;
                    if (!v114)
                    {
                      long long v365 = *(_OWORD *)(v10 + 320);
                      long long v374 = *(_OWORD *)(v10 + 336);
                      long long v383 = *(_OWORD *)(v10 + 352);
                      long long v392 = *(_OWORD *)(v10 + 368);
                      long long v320 = *(_OWORD *)(v10 + 256);
                      long long v332 = *(_OWORD *)(v10 + 272);
                      long long v344 = *(_OWORD *)(v10 + 288);
                      long long v356 = *(_OWORD *)(v10 + 304);
                      long long v272 = *v96;
                      long long v284 = *(_OWORD *)(v10 + 208);
                      long long v296 = *(_OWORD *)(v10 + 224);
                      long long v308 = *(_OWORD *)(v10 + 240);
                      long long v115 = *(_OWORD *)(v10 + 528);
                      *(_OWORD *)(v10 + 320) = *(_OWORD *)(v10 + 512);
                      *(_OWORD *)(v10 + 336) = v115;
                      long long v116 = *(_OWORD *)(v10 + 560);
                      *(_OWORD *)(v10 + 352) = *(_OWORD *)(v10 + 544);
                      *(_OWORD *)(v10 + 368) = v116;
                      long long v117 = *(_OWORD *)(v10 + 464);
                      *(_OWORD *)(v10 + 256) = *(_OWORD *)(v10 + 448);
                      *(_OWORD *)(v10 + 272) = v117;
                      long long v118 = *(_OWORD *)(v10 + 496);
                      *(_OWORD *)(v10 + 288) = *(_OWORD *)(v10 + 480);
                      *(_OWORD *)(v10 + 304) = v118;
                      long long v119 = *(_OWORD *)(v10 + 400);
                      *long long v96 = *v97;
                      *(_OWORD *)(v10 + 208) = v119;
                      long long v120 = *(_OWORD *)(v10 + 432);
                      *(_OWORD *)(v10 + 224) = *(_OWORD *)(v10 + 416);
                      *(_OWORD *)(v10 + 240) = v120;
                      *(_OWORD *)(v10 + 512) = v365;
                      *(_OWORD *)(v10 + 528) = v374;
                      *(_OWORD *)(v10 + 544) = v383;
                      *(_OWORD *)(v10 + 560) = v392;
                      *(_OWORD *)(v10 + 448) = v320;
                      *(_OWORD *)(v10 + 464) = v332;
                      *(_OWORD *)(v10 + 480) = v344;
                      *(_OWORD *)(v10 + 496) = v356;
                      *long long v97 = v272;
                      *(_OWORD *)(v10 + 400) = v284;
                      BOOL v114 = *v11 <= *(double *)(v10 + 84);
                      *(_OWORD *)(v10 + 416) = v296;
                      *(_OWORD *)(v10 + 432) = v308;
                      if (!v114)
                      {
                        long long v297 = *(_OWORD *)(v10 + 32);
                        long long v309 = *(_OWORD *)(v10 + 48);
                        long long v273 = *(_OWORD *)v10;
                        long long v285 = *(_OWORD *)(v10 + 16);
                        long long v345 = *(_OWORD *)(v10 + 96);
                        long long v357 = *(_OWORD *)(v10 + 112);
                        long long v321 = *(_OWORD *)(v10 + 64);
                        long long v333 = *(_OWORD *)(v10 + 80);
                        long long v384 = *(_OWORD *)(v10 + 160);
                        long long v393 = *(_OWORD *)(v10 + 176);
                        long long v366 = *(_OWORD *)(v10 + 128);
                        long long v375 = *(_OWORD *)(v10 + 144);
                        long long v121 = *(_OWORD *)(v10 + 304);
                        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 288);
                        *(_OWORD *)(v10 + 112) = v121;
                        long long v122 = *(_OWORD *)(v10 + 272);
                        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v10 + 256);
                        *(_OWORD *)(v10 + 80) = v122;
                        long long v123 = *(_OWORD *)(v10 + 368);
                        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v10 + 352);
                        *(_OWORD *)(v10 + 176) = v123;
                        long long v124 = *(_OWORD *)(v10 + 336);
                        *(_OWORD *)(v10 + 128) = *(_OWORD *)(v10 + 320);
                        *(_OWORD *)(v10 + 144) = v124;
                        long long v125 = *(_OWORD *)(v10 + 208);
                        *(_OWORD *)unint64_t v10 = *v96;
                        *(_OWORD *)(v10 + 16) = v125;
                        long long v126 = *(_OWORD *)(v10 + 240);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 224);
                        *(_OWORD *)(v10 + 48) = v126;
                        *(_OWORD *)(v10 + 320) = v366;
                        *(_OWORD *)(v10 + 336) = v375;
                        *(_OWORD *)(v10 + 352) = v384;
                        *(_OWORD *)(v10 + 368) = v393;
                        *(_OWORD *)(v10 + 256) = v321;
                        *(_OWORD *)(v10 + 272) = v333;
                        *(_OWORD *)(v10 + 288) = v345;
                        *(_OWORD *)(v10 + 304) = v357;
                        *long long v96 = v273;
                        *(_OWORD *)(v10 + 208) = v285;
                        *(_OWORD *)(v10 + 224) = v297;
                        *(_OWORD *)(v10 + 240) = v309;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 4607)
          {
            int v127 = (char *)(v10 + 192);
            BOOL v129 = (char *)v10 == a2 || v127 == a2;
            if (a4)
            {
              if (!v129)
              {
                uint64_t v130 = 0;
                unint64_t v131 = v10;
                do
                {
                  int v132 = v127;
                  double v133 = *(double *)(v131 + 276);
                  if (v133 > *(double *)(v131 + 84))
                  {
                    long long v211 = *(_OWORD *)v127;
                    long long v217 = *((_OWORD *)v127 + 1);
                    int v241 = *((_DWORD *)v127 + 20);
                    long long v229 = *((_OWORD *)v127 + 3);
                    long long v235 = *((_OWORD *)v127 + 4);
                    long long v223 = *((_OWORD *)v127 + 2);
                    long long v322 = *(_OWORD *)(v131 + 348);
                    long long v334 = *(_OWORD *)(v131 + 364);
                    int v346 = *(_DWORD *)(v131 + 380);
                    long long v274 = *(_OWORD *)(v131 + 284);
                    long long v286 = *(_OWORD *)(v131 + 300);
                    uint64_t v134 = v130;
                    long long v298 = *(_OWORD *)(v131 + 316);
                    long long v310 = *(_OWORD *)(v131 + 332);
                    while (1)
                    {
                      int v135 = (_OWORD *)(v10 + v134);
                      long long v136 = *(_OWORD *)(v10 + v134 + 144);
                      v135[20] = *(_OWORD *)(v10 + v134 + 128);
                      v135[21] = v136;
                      long long v137 = *(_OWORD *)(v10 + v134 + 176);
                      v135[22] = *(_OWORD *)(v10 + v134 + 160);
                      v135[23] = v137;
                      long long v138 = *(_OWORD *)(v10 + v134 + 80);
                      v135[16] = *(_OWORD *)(v10 + v134 + 64);
                      v135[17] = v138;
                      long long v139 = *(_OWORD *)(v10 + v134 + 112);
                      v135[18] = *(_OWORD *)(v10 + v134 + 96);
                      v135[19] = v139;
                      long long v140 = *(_OWORD *)(v10 + v134 + 16);
                      v135[12] = *(_OWORD *)(v10 + v134);
                      v135[13] = v140;
                      long long v141 = *(_OWORD *)(v10 + v134 + 48);
                      v135[14] = *(_OWORD *)(v10 + v134 + 32);
                      v135[15] = v141;
                      if (!v134) {
                        break;
                      }
                      v134 -= 192;
                      if (v133 <= *(double *)((char *)v135 - 108))
                      {
                        uint64_t v142 = v10 + v134 + 192;
                        goto LABEL_82;
                      }
                    }
                    uint64_t v142 = v10;
LABEL_82:
                    *(_OWORD *)uint64_t v142 = v211;
                    *(_OWORD *)(v142 + 16) = v217;
                    *(_DWORD *)(v142 + 80) = v241;
                    *(_OWORD *)(v142 + 48) = v229;
                    *(_OWORD *)(v142 + 64) = v235;
                    *(_OWORD *)(v142 + 32) = v223;
                    *(double *)(v142 + 84) = v133;
                    *(_OWORD *)(v142 + 124) = v298;
                    *(_OWORD *)(v142 + 108) = v286;
                    *(_OWORD *)(v142 + 92) = v274;
                    *(_DWORD *)(v142 + 188) = v346;
                    *(_OWORD *)(v142 + 172) = v334;
                    *(_OWORD *)(v142 + 156) = v322;
                    *(_OWORD *)(v142 + 140) = v310;
                  }
                  int v127 = v132 + 192;
                  v130 += 192;
                  unint64_t v131 = (unint64_t)v132;
                }
                while (v132 + 192 != a2);
              }
            }
            else if (!v129)
            {
              do
              {
                unint64_t v200 = (unint64_t)v127;
                double v201 = *(double *)(a1 + 276);
                if (v201 > *(double *)(a1 + 84))
                {
                  long long v214 = *(_OWORD *)v127;
                  long long v220 = *((_OWORD *)v127 + 1);
                  int v244 = *((_DWORD *)v127 + 20);
                  long long v232 = *((_OWORD *)v127 + 3);
                  long long v238 = *((_OWORD *)v127 + 4);
                  long long v226 = *((_OWORD *)v127 + 2);
                  long long v325 = *(_OWORD *)(a1 + 348);
                  long long v337 = *(_OWORD *)(a1 + 364);
                  int v349 = *(_DWORD *)(a1 + 380);
                  long long v277 = *(_OWORD *)(a1 + 284);
                  long long v289 = *(_OWORD *)(a1 + 300);
                  long long v301 = *(_OWORD *)(a1 + 316);
                  long long v313 = *(_OWORD *)(a1 + 332);
                  do
                  {
                    long long v202 = *(_OWORD *)(a1 + 144);
                    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 128);
                    *(_OWORD *)(a1 + 336) = v202;
                    long long v203 = *(_OWORD *)(a1 + 176);
                    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 160);
                    *(_OWORD *)(a1 + 368) = v203;
                    long long v204 = *(_OWORD *)(a1 + 80);
                    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 64);
                    *(_OWORD *)(a1 + 272) = v204;
                    long long v205 = *(_OWORD *)(a1 + 112);
                    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 96);
                    *(_OWORD *)(a1 + 304) = v205;
                    long long v206 = *(_OWORD *)(a1 + 16);
                    *(_OWORD *)(a1 + 192) = *(_OWORD *)a1;
                    *(_OWORD *)(a1 + 208) = v206;
                    long long v207 = *(_OWORD *)(a1 + 48);
                    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 32);
                    *(_OWORD *)(a1 + 240) = v207;
                    double v208 = *(double *)(a1 - 108);
                    a1 -= 192;
                  }
                  while (v201 > v208);
                  *(_OWORD *)(a1 + 192) = v214;
                  *(_OWORD *)(a1 + 208) = v220;
                  *(_DWORD *)(a1 + 272) = v244;
                  *(_OWORD *)(a1 + 240) = v232;
                  *(_OWORD *)(a1 + 256) = v238;
                  *(_OWORD *)(a1 + 224) = v226;
                  *(double *)(a1 + 276) = v201;
                  *(_OWORD *)(a1 + 300) = v289;
                  *(_OWORD *)(a1 + 316) = v301;
                  *(_OWORD *)(a1 + 284) = v277;
                  *(_DWORD *)(a1 + 380) = v349;
                  *(_OWORD *)(a1 + 348) = v325;
                  *(_OWORD *)(a1 + 364) = v337;
                  *(_OWORD *)(a1 + 332) = v313;
                }
                v127 += 192;
                a1 = v200;
              }
              while ((char *)(v200 + 192) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((char *)v10 != a2)
            {
              int64_t v143 = (v13 - 2) >> 1;
              int64_t v144 = v143;
              do
              {
                int64_t v145 = v144;
                if (v143 >= v144)
                {
                  uint64_t v146 = (2 * v144) | 1;
                  unint64_t v147 = v10 + 192 * v146;
                  if (2 * v144 + 2 < (uint64_t)v13 && *(double *)(v10 + 192 * v146 + 84) > *(double *)(v147 + 276))
                  {
                    v147 += 192;
                    uint64_t v146 = 2 * v144 + 2;
                  }
                  double v148 = *(double *)(v10 + 192 * v144 + 84);
                  if (*(double *)(v147 + 84) <= v148)
                  {
                    unint64_t v149 = v10 + 192 * v144;
                    long long v212 = *(_OWORD *)v149;
                    long long v218 = *(_OWORD *)(v149 + 16);
                    int v242 = *(_DWORD *)(v149 + 80);
                    long long v230 = *(_OWORD *)(v149 + 48);
                    long long v236 = *(_OWORD *)(v149 + 64);
                    long long v224 = *(_OWORD *)(v149 + 32);
                    int v347 = *(_DWORD *)(v149 + 188);
                    long long v323 = *(_OWORD *)(v149 + 156);
                    long long v335 = *(_OWORD *)(v149 + 172);
                    long long v311 = *(_OWORD *)(v149 + 140);
                    long long v287 = *(_OWORD *)(v149 + 108);
                    long long v299 = *(_OWORD *)(v149 + 124);
                    long long v275 = *(_OWORD *)(v149 + 92);
                    do
                    {
                      uint64_t v150 = (_OWORD *)v149;
                      unint64_t v149 = v147;
                      long long v151 = *(_OWORD *)v147;
                      long long v152 = *(_OWORD *)(v147 + 16);
                      long long v153 = *(_OWORD *)(v147 + 48);
                      v150[2] = *(_OWORD *)(v147 + 32);
                      v150[3] = v153;
                      *uint64_t v150 = v151;
                      v150[1] = v152;
                      long long v154 = *(_OWORD *)(v147 + 64);
                      long long v155 = *(_OWORD *)(v147 + 80);
                      long long v156 = *(_OWORD *)(v147 + 112);
                      v150[6] = *(_OWORD *)(v147 + 96);
                      v150[7] = v156;
                      v150[4] = v154;
                      v150[5] = v155;
                      long long v157 = *(_OWORD *)(v147 + 128);
                      long long v158 = *(_OWORD *)(v147 + 144);
                      long long v159 = *(_OWORD *)(v147 + 176);
                      v150[10] = *(_OWORD *)(v147 + 160);
                      v150[11] = v159;
                      v150[8] = v157;
                      v150[9] = v158;
                      if (v143 < v146) {
                        break;
                      }
                      uint64_t v160 = (2 * v146) | 1;
                      unint64_t v147 = v10 + 192 * v160;
                      uint64_t v161 = 2 * v146 + 2;
                      if (v161 < (uint64_t)v13 && *(double *)(v10 + 192 * v160 + 84) > *(double *)(v147 + 276))
                      {
                        v147 += 192;
                        uint64_t v160 = v161;
                      }
                      uint64_t v146 = v160;
                    }
                    while (*(double *)(v147 + 84) <= v148);
                    *(_OWORD *)unint64_t v149 = v212;
                    *(_OWORD *)(v149 + 16) = v218;
                    *(_DWORD *)(v149 + 80) = v242;
                    *(_OWORD *)(v149 + 48) = v230;
                    *(_OWORD *)(v149 + 64) = v236;
                    *(_OWORD *)(v149 + 32) = v224;
                    *(double *)(v149 + 84) = v148;
                    *(_OWORD *)(v149 + 124) = v299;
                    *(_OWORD *)(v149 + 108) = v287;
                    *(_OWORD *)(v149 + 92) = v275;
                    *(_DWORD *)(v149 + 188) = v347;
                    *(_OWORD *)(v149 + 172) = v335;
                    *(_OWORD *)(v149 + 156) = v323;
                    *(_OWORD *)(v149 + 140) = v311;
                  }
                }
                int64_t v144 = v145 - 1;
              }
              while (v145);
              int64_t v162 = v12 / 0xC0uLL;
              do
              {
                uint64_t v163 = 0;
                long long v300 = *(_OWORD *)(v10 + 32);
                long long v312 = *(_OWORD *)(v10 + 48);
                long long v276 = *(_OWORD *)v10;
                long long v288 = *(_OWORD *)(v10 + 16);
                long long v348 = *(_OWORD *)(v10 + 96);
                long long v358 = *(_OWORD *)(v10 + 112);
                long long v324 = *(_OWORD *)(v10 + 64);
                long long v336 = *(_OWORD *)(v10 + 80);
                long long v385 = *(_OWORD *)(v10 + 160);
                long long v394 = *(_OWORD *)(v10 + 176);
                long long v367 = *(_OWORD *)(v10 + 128);
                long long v376 = *(_OWORD *)(v10 + 144);
                unint64_t v164 = v10;
                do
                {
                  __int16 v165 = (_OWORD *)v164;
                  uint64_t v166 = v163 + 1;
                  v164 += 192 * (v163 + 1);
                  uint64_t v167 = 2 * v163;
                  uint64_t v163 = (2 * v163) | 1;
                  int64_t v168 = v167 + 2;
                  if (v168 < v162 && *(double *)((char *)&v165[12 * v166 + 5] + 4) > *(double *)(v164 + 276))
                  {
                    v164 += 192;
                    uint64_t v163 = v168;
                  }
                  long long v169 = *(_OWORD *)v164;
                  long long v170 = *(_OWORD *)(v164 + 16);
                  long long v171 = *(_OWORD *)(v164 + 48);
                  v165[2] = *(_OWORD *)(v164 + 32);
                  v165[3] = v171;
                  *__int16 v165 = v169;
                  v165[1] = v170;
                  long long v172 = *(_OWORD *)(v164 + 64);
                  long long v173 = *(_OWORD *)(v164 + 80);
                  long long v174 = *(_OWORD *)(v164 + 112);
                  v165[6] = *(_OWORD *)(v164 + 96);
                  v165[7] = v174;
                  v165[4] = v172;
                  v165[5] = v173;
                  long long v175 = *(_OWORD *)(v164 + 128);
                  long long v176 = *(_OWORD *)(v164 + 144);
                  long long v177 = *(_OWORD *)(v164 + 176);
                  v165[10] = *(_OWORD *)(v164 + 160);
                  v165[11] = v177;
                  v165[8] = v175;
                  v165[9] = v176;
                }
                while (v163 <= (uint64_t)((unint64_t)(v162 - 2) >> 1));
                a2 -= 192;
                if ((char *)v164 == a2)
                {
                  *(_OWORD *)(v164 + 32) = v300;
                  *(_OWORD *)(v164 + 48) = v312;
                  *(_OWORD *)unint64_t v164 = v276;
                  *(_OWORD *)(v164 + 16) = v288;
                  *(_OWORD *)(v164 + 96) = v348;
                  *(_OWORD *)(v164 + 112) = v358;
                  *(_OWORD *)(v164 + 64) = v324;
                  *(_OWORD *)(v164 + 80) = v336;
                  *(_OWORD *)(v164 + 160) = v385;
                  *(_OWORD *)(v164 + 176) = v394;
                  *(_OWORD *)(v164 + 128) = v367;
                  *(_OWORD *)(v164 + 144) = v376;
                }
                else
                {
                  long long v178 = *(_OWORD *)a2;
                  long long v179 = *((_OWORD *)a2 + 1);
                  long long v180 = *((_OWORD *)a2 + 3);
                  *(_OWORD *)(v164 + 32) = *((_OWORD *)a2 + 2);
                  *(_OWORD *)(v164 + 48) = v180;
                  *(_OWORD *)unint64_t v164 = v178;
                  *(_OWORD *)(v164 + 16) = v179;
                  long long v181 = *((_OWORD *)a2 + 4);
                  long long v182 = *((_OWORD *)a2 + 5);
                  long long v183 = *((_OWORD *)a2 + 7);
                  *(_OWORD *)(v164 + 96) = *((_OWORD *)a2 + 6);
                  *(_OWORD *)(v164 + 112) = v183;
                  *(_OWORD *)(v164 + 64) = v181;
                  *(_OWORD *)(v164 + 80) = v182;
                  long long v184 = *((_OWORD *)a2 + 8);
                  long long v185 = *((_OWORD *)a2 + 9);
                  long long v186 = *((_OWORD *)a2 + 11);
                  *(_OWORD *)(v164 + 160) = *((_OWORD *)a2 + 10);
                  *(_OWORD *)(v164 + 176) = v186;
                  *(_OWORD *)(v164 + 128) = v184;
                  *(_OWORD *)(v164 + 144) = v185;
                  *((_OWORD *)a2 + 2) = v300;
                  *((_OWORD *)a2 + 3) = v312;
                  *(_OWORD *)a2 = v276;
                  *((_OWORD *)a2 + 1) = v288;
                  *((_OWORD *)a2 + 6) = v348;
                  *((_OWORD *)a2 + 7) = v358;
                  *((_OWORD *)a2 + 4) = v324;
                  *((_OWORD *)a2 + 5) = v336;
                  *((_OWORD *)a2 + 10) = v385;
                  *((_OWORD *)a2 + 11) = v394;
                  *((_OWORD *)a2 + 8) = v367;
                  *((_OWORD *)a2 + 9) = v376;
                  uint64_t v187 = v164 - v10 + 192;
                  if (v187 >= 193)
                  {
                    unint64_t v188 = (v187 / 0xC0uLL - 2) >> 1;
                    double v189 = *(double *)(v164 + 84);
                    if (*(double *)(v10 + 192 * v188 + 84) > v189)
                    {
                      long long v250 = *(_OWORD *)v164;
                      long long v253 = *(_OWORD *)(v164 + 16);
                      int v265 = *(_DWORD *)(v164 + 80);
                      long long v259 = *(_OWORD *)(v164 + 48);
                      long long v262 = *(_OWORD *)(v164 + 64);
                      long long v256 = *(_OWORD *)(v164 + 32);
                      int v247 = *(_DWORD *)(v164 + 188);
                      long long v237 = *(_OWORD *)(v164 + 156);
                      long long v243 = *(_OWORD *)(v164 + 172);
                      long long v231 = *(_OWORD *)(v164 + 140);
                      long long v219 = *(_OWORD *)(v164 + 108);
                      long long v225 = *(_OWORD *)(v164 + 124);
                      long long v213 = *(_OWORD *)(v164 + 92);
                      do
                      {
                        uint64_t v190 = (_OWORD *)v164;
                        unint64_t v164 = v10 + 192 * v188;
                        long long v191 = *(_OWORD *)v164;
                        long long v192 = *(_OWORD *)(v164 + 16);
                        long long v193 = *(_OWORD *)(v164 + 48);
                        v190[2] = *(_OWORD *)(v164 + 32);
                        v190[3] = v193;
                        *uint64_t v190 = v191;
                        v190[1] = v192;
                        long long v194 = *(_OWORD *)(v164 + 64);
                        long long v195 = *(_OWORD *)(v164 + 80);
                        long long v196 = *(_OWORD *)(v164 + 112);
                        v190[6] = *(_OWORD *)(v164 + 96);
                        v190[7] = v196;
                        v190[4] = v194;
                        v190[5] = v195;
                        long long v197 = *(_OWORD *)(v164 + 128);
                        long long v198 = *(_OWORD *)(v164 + 144);
                        long long v199 = *(_OWORD *)(v164 + 176);
                        v190[10] = *(_OWORD *)(v164 + 160);
                        v190[11] = v199;
                        v190[8] = v197;
                        v190[9] = v198;
                        if (!v188) {
                          break;
                        }
                        unint64_t v188 = (v188 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 192 * v188 + 84) > v189);
                      *(_OWORD *)unint64_t v164 = v250;
                      *(_OWORD *)(v164 + 16) = v253;
                      *(_DWORD *)(v164 + 80) = v265;
                      *(_OWORD *)(v164 + 48) = v259;
                      *(_OWORD *)(v164 + 64) = v262;
                      *(_OWORD *)(v164 + 32) = v256;
                      *(double *)(v164 + 84) = v189;
                      *(_OWORD *)(v164 + 124) = v225;
                      *(_OWORD *)(v164 + 108) = v219;
                      *(_OWORD *)(v164 + 92) = v213;
                      *(_DWORD *)(v164 + 188) = v247;
                      *(_OWORD *)(v164 + 172) = v243;
                      *(_OWORD *)(v164 + 156) = v237;
                      *(_OWORD *)(v164 + 140) = v231;
                    }
                  }
                }
                BOOL v114 = v162-- <= 2;
              }
              while (!v114);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          double v15 = (long long *)(v10 + 192 * (v13 >> 1));
          if ((unint64_t)v12 > 0x6000)
          {
            sub_1013EC748((long long *)a1, (long long *)(a1 + 192 * (v13 >> 1)), (long long *)a2 - 12);
            uint64_t v16 = 3 * v14;
            long long v17 = (long long *)(a1 + 192 * v14 - 192);
            sub_1013EC748((long long *)(a1 + 192), v17, (long long *)a2 - 24);
            long long v18 = (long long *)(a1 + 192 + (v16 << 6));
            sub_1013EC748((long long *)(a1 + 384), v18, (long long *)a2 - 36);
            sub_1013EC748(v17, v15, v18);
            long long v290 = *(_OWORD *)(a1 + 32);
            long long v302 = *(_OWORD *)(a1 + 48);
            long long v266 = *(_OWORD *)a1;
            long long v278 = *(_OWORD *)(a1 + 16);
            long long v338 = *(_OWORD *)(a1 + 96);
            long long v350 = *(_OWORD *)(a1 + 112);
            long long v314 = *(_OWORD *)(a1 + 64);
            long long v326 = *(_OWORD *)(a1 + 80);
            long long v377 = *(_OWORD *)(a1 + 160);
            long long v386 = *(_OWORD *)(a1 + 176);
            long long v359 = *(_OWORD *)(a1 + 128);
            long long v368 = *(_OWORD *)(a1 + 144);
            long long v19 = *v15;
            long long v20 = v15[1];
            long long v21 = v15[3];
            *(_OWORD *)(a1 + 32) = v15[2];
            *(_OWORD *)(a1 + 48) = v21;
            *(_OWORD *)a1 = v19;
            *(_OWORD *)(a1 + 16) = v20;
            long long v22 = v15[4];
            long long v23 = v15[5];
            long long v24 = v15[7];
            *(_OWORD *)(a1 + 96) = v15[6];
            *(_OWORD *)(a1 + 112) = v24;
            *(_OWORD *)(a1 + 64) = v22;
            *(_OWORD *)(a1 + 80) = v23;
            long long v25 = v15[8];
            long long v26 = v15[9];
            long long v27 = v15[11];
            *(_OWORD *)(a1 + 160) = v15[10];
            *(_OWORD *)(a1 + 176) = v27;
            *(_OWORD *)(a1 + 128) = v25;
            *(_OWORD *)(a1 + 144) = v26;
            v15[2] = v290;
            v15[3] = v302;
            long long *v15 = v266;
            v15[1] = v278;
            v15[6] = v338;
            v15[7] = v350;
            v15[4] = v314;
            v15[5] = v326;
            v15[10] = v377;
            v15[11] = v386;
            v15[8] = v359;
            v15[9] = v368;
          }
          else
          {
            sub_1013EC748((long long *)(a1 + 192 * (v13 >> 1)), (long long *)a1, (long long *)a2 - 12);
          }
          --a3;
          if (a4) {
            break;
          }
          double v28 = *(double *)(a1 + 84);
          if (*(double *)(a1 - 108) > v28) {
            goto LABEL_12;
          }
          long long v249 = *(_OWORD *)a1;
          long long v252 = *(_OWORD *)(a1 + 16);
          int v264 = *(_DWORD *)(a1 + 80);
          long long v258 = *(_OWORD *)(a1 + 48);
          long long v261 = *(_OWORD *)(a1 + 64);
          long long v255 = *(_OWORD *)(a1 + 32);
          long long v210 = *(_OWORD *)(a1 + 92);
          long long v216 = *(_OWORD *)(a1 + 108);
          int v246 = *(_DWORD *)(a1 + 188);
          long long v234 = *(_OWORD *)(a1 + 156);
          long long v240 = *(_OWORD *)(a1 + 172);
          long long v222 = *(_OWORD *)(a1 + 124);
          long long v228 = *(_OWORD *)(a1 + 140);
          if (v28 <= *(double *)(a2 - 108))
          {
            do
            {
              unint64_t v10 = (unint64_t)v11 - 84;
              if ((char *)v11 - 84 >= a2) {
                break;
              }
              double v62 = *v11;
              v11 += 24;
            }
            while (v28 <= v62);
          }
          else
          {
            unint64_t v60 = a1;
            do
            {
              unint64_t v10 = v60 + 192;
              double v61 = *(double *)(v60 + 276);
              v60 += 192;
            }
            while (v28 <= v61);
          }
          long long v63 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            long long v64 = a2;
            do
            {
              long long v63 = (long long *)(v64 - 192);
              double v65 = *(double *)(v64 - 108);
              v64 -= 192;
            }
            while (v28 > v65);
          }
          while (v10 < (unint64_t)v63)
          {
            long long v292 = *(_OWORD *)(v10 + 32);
            long long v304 = *(_OWORD *)(v10 + 48);
            long long v268 = *(_OWORD *)v10;
            long long v280 = *(_OWORD *)(v10 + 16);
            long long v340 = *(_OWORD *)(v10 + 96);
            long long v352 = *(_OWORD *)(v10 + 112);
            long long v316 = *(_OWORD *)(v10 + 64);
            long long v328 = *(_OWORD *)(v10 + 80);
            long long v379 = *(_OWORD *)(v10 + 160);
            long long v388 = *(_OWORD *)(v10 + 176);
            long long v361 = *(_OWORD *)(v10 + 128);
            long long v370 = *(_OWORD *)(v10 + 144);
            long long v66 = *v63;
            long long v67 = v63[1];
            long long v68 = v63[3];
            *(_OWORD *)(v10 + 32) = v63[2];
            *(_OWORD *)(v10 + 48) = v68;
            *(_OWORD *)unint64_t v10 = v66;
            *(_OWORD *)(v10 + 16) = v67;
            long long v69 = v63[4];
            long long v70 = v63[5];
            long long v71 = v63[7];
            *(_OWORD *)(v10 + 96) = v63[6];
            *(_OWORD *)(v10 + 112) = v71;
            *(_OWORD *)(v10 + 64) = v69;
            *(_OWORD *)(v10 + 80) = v70;
            long long v72 = v63[8];
            long long v73 = v63[9];
            long long v74 = v63[11];
            *(_OWORD *)(v10 + 160) = v63[10];
            *(_OWORD *)(v10 + 176) = v74;
            *(_OWORD *)(v10 + 128) = v72;
            *(_OWORD *)(v10 + 144) = v73;
            v63[2] = v292;
            v63[3] = v304;
            *long long v63 = v268;
            v63[1] = v280;
            v63[6] = v340;
            v63[7] = v352;
            v63[4] = v316;
            v63[5] = v328;
            v63[10] = v379;
            v63[11] = v388;
            v63[8] = v361;
            v63[9] = v370;
            do
            {
              int v75 = (double *)(v10 + 276);
              v10 += 192;
            }
            while (v28 <= *v75);
            do
            {
              double v76 = *(double *)((char *)v63 - 108);
              v63 -= 12;
            }
            while (v28 > v76);
          }
          unint64_t v77 = (long long *)(v10 - 192);
          BOOL v4 = v10 - 192 >= a1;
          BOOL v5 = v10 - 192 == a1;
          if (v10 - 192 != a1)
          {
            long long v78 = *v77;
            long long v79 = *(_OWORD *)(v10 - 176);
            long long v80 = *(_OWORD *)(v10 - 144);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 160);
            *(_OWORD *)(a1 + 48) = v80;
            *(_OWORD *)a1 = v78;
            *(_OWORD *)(a1 + 16) = v79;
            long long v81 = *(_OWORD *)(v10 - 128);
            long long v82 = *(_OWORD *)(v10 - 112);
            long long v83 = *(_OWORD *)(v10 - 80);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v10 - 96);
            *(_OWORD *)(a1 + 112) = v83;
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 80) = v82;
            long long v84 = *(_OWORD *)(v10 - 64);
            long long v85 = *(_OWORD *)(v10 - 48);
            long long v86 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 176) = v86;
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 144) = v85;
          }
          a4 = 0;
          *unint64_t v77 = v249;
          *(_OWORD *)(v10 - 176) = v252;
          *(_DWORD *)(v10 - 112) = v264;
          *(_OWORD *)(v10 - 144) = v258;
          *(_OWORD *)(v10 - 128) = v261;
          *(_OWORD *)(v10 - 160) = v255;
          *(double *)(v10 - 108) = v28;
          *(_OWORD *)(v10 - 68) = v222;
          *(_OWORD *)(v10 - 84) = v216;
          *(_OWORD *)(v10 - 100) = v210;
          *(_DWORD *)(v10 - 4) = v246;
          *(_OWORD *)(v10 - 20) = v240;
          *(_OWORD *)(v10 - 36) = v234;
          *(_OWORD *)(v10 - 52) = v228;
        }
        double v28 = *(double *)(a1 + 84);
LABEL_12:
        uint64_t v29 = 0;
        long long v248 = *(_OWORD *)a1;
        long long v251 = *(_OWORD *)(a1 + 16);
        int v263 = *(_DWORD *)(a1 + 80);
        int v245 = *(_DWORD *)(a1 + 188);
        long long v257 = *(_OWORD *)(a1 + 48);
        long long v260 = *(_OWORD *)(a1 + 64);
        long long v254 = *(_OWORD *)(a1 + 32);
        long long v233 = *(_OWORD *)(a1 + 156);
        long long v239 = *(_OWORD *)(a1 + 172);
        long long v209 = *(_OWORD *)(a1 + 92);
        long long v215 = *(_OWORD *)(a1 + 108);
        long long v221 = *(_OWORD *)(a1 + 124);
        long long v227 = *(_OWORD *)(a1 + 140);
        do
        {
          double v30 = *(double *)(a1 + v29 + 276);
          v29 += 192;
        }
        while (v30 > v28);
        unint64_t v31 = a1 + v29;
        __int16 v32 = a2;
        if (v29 == 192)
        {
          unint64_t v35 = a2;
          while (v31 < (unint64_t)v35)
          {
            int v33 = v35 - 192;
            double v36 = *(double *)(v35 - 108);
            v35 -= 192;
            if (v36 > v28) {
              goto LABEL_22;
            }
          }
          int v33 = v35;
        }
        else
        {
          do
          {
            int v33 = v32 - 192;
            double v34 = *(double *)(v32 - 108);
            v32 -= 192;
          }
          while (v34 <= v28);
        }
LABEL_22:
        unint64_t v10 = v31;
        if (v31 < (unint64_t)v33)
        {
          double v37 = (long long *)v33;
          do
          {
            long long v291 = *(_OWORD *)(v10 + 32);
            long long v303 = *(_OWORD *)(v10 + 48);
            long long v267 = *(_OWORD *)v10;
            long long v279 = *(_OWORD *)(v10 + 16);
            long long v339 = *(_OWORD *)(v10 + 96);
            long long v351 = *(_OWORD *)(v10 + 112);
            long long v315 = *(_OWORD *)(v10 + 64);
            long long v327 = *(_OWORD *)(v10 + 80);
            long long v378 = *(_OWORD *)(v10 + 160);
            long long v387 = *(_OWORD *)(v10 + 176);
            long long v360 = *(_OWORD *)(v10 + 128);
            long long v369 = *(_OWORD *)(v10 + 144);
            long long v38 = *v37;
            long long v39 = v37[1];
            long long v40 = v37[3];
            *(_OWORD *)(v10 + 32) = v37[2];
            *(_OWORD *)(v10 + 48) = v40;
            *(_OWORD *)unint64_t v10 = v38;
            *(_OWORD *)(v10 + 16) = v39;
            long long v41 = v37[4];
            long long v42 = v37[5];
            long long v43 = v37[7];
            *(_OWORD *)(v10 + 96) = v37[6];
            *(_OWORD *)(v10 + 112) = v43;
            *(_OWORD *)(v10 + 64) = v41;
            *(_OWORD *)(v10 + 80) = v42;
            long long v44 = v37[8];
            long long v45 = v37[9];
            long long v46 = v37[11];
            *(_OWORD *)(v10 + 160) = v37[10];
            *(_OWORD *)(v10 + 176) = v46;
            *(_OWORD *)(v10 + 128) = v44;
            *(_OWORD *)(v10 + 144) = v45;
            v37[2] = v291;
            v37[3] = v303;
            long long *v37 = v267;
            v37[1] = v279;
            v37[6] = v339;
            v37[7] = v351;
            v37[4] = v315;
            v37[5] = v327;
            v37[10] = v378;
            v37[11] = v387;
            v37[8] = v360;
            v37[9] = v369;
            do
            {
              long long v47 = (double *)(v10 + 276);
              v10 += 192;
            }
            while (*v47 > v28);
            do
            {
              double v48 = *(double *)((char *)v37 - 108);
              v37 -= 12;
            }
            while (v48 <= v28);
          }
          while (v10 < (unint64_t)v37);
        }
        unint64_t v49 = (long long *)(v10 - 192);
        if (v10 - 192 != a1)
        {
          long long v50 = *v49;
          long long v51 = *(_OWORD *)(v10 - 176);
          long long v52 = *(_OWORD *)(v10 - 144);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 160);
          *(_OWORD *)(a1 + 48) = v52;
          *(_OWORD *)a1 = v50;
          *(_OWORD *)(a1 + 16) = v51;
          long long v53 = *(_OWORD *)(v10 - 128);
          long long v54 = *(_OWORD *)(v10 - 112);
          long long v55 = *(_OWORD *)(v10 - 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(v10 - 96);
          *(_OWORD *)(a1 + 112) = v55;
          *(_OWORD *)(a1 + 64) = v53;
          *(_OWORD *)(a1 + 80) = v54;
          long long v56 = *(_OWORD *)(v10 - 64);
          long long v57 = *(_OWORD *)(v10 - 48);
          long long v58 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 176) = v58;
          *(_OWORD *)(a1 + 128) = v56;
          *(_OWORD *)(a1 + 144) = v57;
        }
        long long *v49 = v248;
        *(_OWORD *)(v10 - 176) = v251;
        *(_DWORD *)(v10 - 112) = v263;
        *(_OWORD *)(v10 - 144) = v257;
        *(_OWORD *)(v10 - 128) = v260;
        *(_OWORD *)(v10 - 160) = v254;
        *(double *)(v10 - 108) = v28;
        *(_OWORD *)(v10 - 68) = v221;
        *(_OWORD *)(v10 - 84) = v215;
        *(_OWORD *)(v10 - 100) = v209;
        *(_DWORD *)(v10 - 4) = v245;
        *(_OWORD *)(v10 - 20) = v239;
        *(_OWORD *)(v10 - 36) = v233;
        *(_OWORD *)(v10 - 52) = v227;
        if (v31 >= (unint64_t)v33) {
          break;
        }
LABEL_33:
        sub_1013EB5F0(a1, v10 - 192, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v59 = sub_1013ECA40(a1, v10 - 192);
      if (sub_1013ECA40(v10, (uint64_t)a2)) {
        break;
      }
      if (!v59) {
        goto LABEL_33;
      }
    }
    a2 = (char *)(v10 - 192);
    if (!v59) {
      continue;
    }
    break;
  }
}

__n128 sub_1013EC748(long long *a1, long long *a2, long long *a3)
{
  result.n128_u64[0] = *(void *)((char *)a2 + 84);
  double v4 = *(double *)((char *)a3 + 84);
  if (result.n128_f64[0] <= *(double *)((char *)a1 + 84))
  {
    if (v4 > result.n128_f64[0])
    {
      long long v83 = a2[8];
      long long v87 = a2[9];
      long long v91 = a2[10];
      long long v95 = a2[11];
      long long v67 = a2[4];
      long long v71 = a2[5];
      long long v75 = a2[6];
      long long v79 = a2[7];
      long long v51 = *a2;
      long long v55 = a2[1];
      long long v59 = a2[2];
      long long v63 = a2[3];
      long long v14 = *a3;
      long long v15 = a3[1];
      long long v16 = a3[3];
      a2[2] = a3[2];
      a2[3] = v16;
      *a2 = v14;
      a2[1] = v15;
      long long v17 = a3[4];
      long long v18 = a3[5];
      long long v19 = a3[7];
      a2[6] = a3[6];
      a2[7] = v19;
      a2[4] = v17;
      a2[5] = v18;
      long long v20 = a3[8];
      long long v21 = a3[9];
      long long v22 = a3[11];
      a2[10] = a3[10];
      a2[11] = v22;
      a2[8] = v20;
      a2[9] = v21;
      a3[8] = v83;
      a3[9] = v87;
      a3[10] = v91;
      a3[11] = v95;
      a3[4] = v67;
      a3[5] = v71;
      a3[6] = v75;
      a3[7] = v79;
      *a3 = v51;
      a3[1] = v55;
      result.n128_u64[1] = *((void *)&v59 + 1);
      a3[2] = v59;
      a3[3] = v63;
      result.n128_u64[0] = *(void *)((char *)a2 + 84);
      if (result.n128_f64[0] > *(double *)((char *)a1 + 84))
      {
        long long v84 = a1[8];
        long long v88 = a1[9];
        long long v92 = a1[10];
        long long v96 = a1[11];
        long long v68 = a1[4];
        long long v72 = a1[5];
        long long v76 = a1[6];
        long long v80 = a1[7];
        long long v52 = *a1;
        long long v56 = a1[1];
        __n128 v60 = (__n128)a1[2];
        long long v64 = a1[3];
        long long v23 = *a2;
        long long v24 = a2[1];
        long long v25 = a2[3];
        a1[2] = a2[2];
        a1[3] = v25;
        *a1 = v23;
        a1[1] = v24;
        long long v26 = a2[4];
        long long v27 = a2[5];
        long long v28 = a2[7];
        a1[6] = a2[6];
        a1[7] = v28;
        a1[4] = v26;
        a1[5] = v27;
        long long v29 = a2[8];
        long long v30 = a2[9];
        long long v31 = a2[11];
        a1[10] = a2[10];
        a1[11] = v31;
        a1[8] = v29;
        a1[9] = v30;
        a2[8] = v84;
        a2[9] = v88;
        a2[10] = v92;
        a2[11] = v96;
        a2[4] = v68;
        a2[5] = v72;
        a2[6] = v76;
        a2[7] = v80;
        *a2 = v52;
        a2[1] = v56;
        __n128 result = v60;
        a2[2] = (__int128)v60;
        a2[3] = v64;
      }
    }
  }
  else
  {
    if (v4 <= result.n128_f64[0])
    {
      long long v85 = a1[8];
      long long v89 = a1[9];
      long long v93 = a1[10];
      long long v97 = a1[11];
      long long v69 = a1[4];
      long long v73 = a1[5];
      long long v77 = a1[6];
      long long v81 = a1[7];
      long long v53 = *a1;
      long long v57 = a1[1];
      long long v61 = a1[2];
      long long v65 = a1[3];
      long long v32 = *a2;
      long long v33 = a2[1];
      long long v34 = a2[3];
      a1[2] = a2[2];
      a1[3] = v34;
      *a1 = v32;
      a1[1] = v33;
      long long v35 = a2[4];
      long long v36 = a2[5];
      long long v37 = a2[7];
      a1[6] = a2[6];
      a1[7] = v37;
      a1[4] = v35;
      a1[5] = v36;
      long long v38 = a2[8];
      long long v39 = a2[9];
      long long v40 = a2[11];
      a1[10] = a2[10];
      a1[11] = v40;
      a1[8] = v38;
      a1[9] = v39;
      a2[8] = v85;
      a2[9] = v89;
      a2[10] = v93;
      a2[11] = v97;
      a2[4] = v69;
      a2[5] = v73;
      a2[6] = v77;
      a2[7] = v81;
      *a2 = v53;
      a2[1] = v57;
      result.n128_u64[1] = *((void *)&v61 + 1);
      a2[2] = v61;
      a2[3] = v65;
      result.n128_u64[0] = *(void *)((char *)a3 + 84);
      if (result.n128_f64[0] <= *(double *)((char *)a2 + 84)) {
        return result;
      }
      long long v82 = a2[8];
      long long v86 = a2[9];
      long long v90 = a2[10];
      long long v94 = a2[11];
      long long v66 = a2[4];
      long long v70 = a2[5];
      long long v74 = a2[6];
      long long v78 = a2[7];
      long long v50 = *a2;
      long long v54 = a2[1];
      __n128 v58 = (__n128)a2[2];
      long long v62 = a2[3];
      long long v41 = *a3;
      long long v42 = a3[1];
      long long v43 = a3[3];
      a2[2] = a3[2];
      a2[3] = v43;
      *a2 = v41;
      a2[1] = v42;
      long long v44 = a3[4];
      long long v45 = a3[5];
      long long v46 = a3[7];
      a2[6] = a3[6];
      a2[7] = v46;
      a2[4] = v44;
      a2[5] = v45;
      long long v47 = a3[8];
      long long v48 = a3[9];
      long long v49 = a3[11];
      a2[10] = a3[10];
      a2[11] = v49;
      a2[8] = v47;
      a2[9] = v48;
    }
    else
    {
      long long v82 = a1[8];
      long long v86 = a1[9];
      long long v90 = a1[10];
      long long v94 = a1[11];
      long long v66 = a1[4];
      long long v70 = a1[5];
      long long v74 = a1[6];
      long long v78 = a1[7];
      long long v50 = *a1;
      long long v54 = a1[1];
      __n128 v58 = (__n128)a1[2];
      long long v62 = a1[3];
      long long v5 = *a3;
      long long v6 = a3[1];
      long long v7 = a3[3];
      a1[2] = a3[2];
      a1[3] = v7;
      *a1 = v5;
      a1[1] = v6;
      long long v8 = a3[4];
      long long v9 = a3[5];
      long long v10 = a3[7];
      a1[6] = a3[6];
      a1[7] = v10;
      a1[4] = v8;
      a1[5] = v9;
      long long v11 = a3[8];
      long long v12 = a3[9];
      long long v13 = a3[11];
      a1[10] = a3[10];
      a1[11] = v13;
      a1[8] = v11;
      a1[9] = v12;
    }
    a3[8] = v82;
    a3[9] = v86;
    a3[10] = v90;
    a3[11] = v94;
    a3[4] = v66;
    a3[5] = v70;
    a3[6] = v74;
    a3[7] = v78;
    *a3 = v50;
    a3[1] = v54;
    __n128 result = v58;
    a3[2] = (__int128)v58;
    a3[3] = v62;
  }
  return result;
}

BOOL sub_1013ECA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 108) > *(double *)(a1 + 84))
      {
        long long v114 = *(_OWORD *)(a1 + 128);
        long long v119 = *(_OWORD *)(a1 + 144);
        long long v124 = *(_OWORD *)(a1 + 160);
        long long v129 = *(_OWORD *)(a1 + 176);
        long long v91 = *(_OWORD *)(a1 + 64);
        long long v97 = *(_OWORD *)(a1 + 80);
        long long v103 = *(_OWORD *)(a1 + 96);
        long long v109 = *(_OWORD *)(a1 + 112);
        long long v67 = *(_OWORD *)a1;
        long long v73 = *(_OWORD *)(a1 + 16);
        long long v79 = *(_OWORD *)(a1 + 32);
        long long v85 = *(_OWORD *)(a1 + 48);
        long long v6 = *(_OWORD *)(a2 - 192);
        long long v7 = *(_OWORD *)(a2 - 176);
        long long v8 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)a1 = v6;
        *(_OWORD *)(a1 + 16) = v7;
        long long v9 = *(_OWORD *)(a2 - 128);
        long long v10 = *(_OWORD *)(a2 - 112);
        long long v11 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 64) = v9;
        *(_OWORD *)(a1 + 80) = v10;
        long long v12 = *(_OWORD *)(a2 - 64);
        long long v13 = *(_OWORD *)(a2 - 48);
        long long v14 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 128) = v12;
        *(_OWORD *)(a1 + 144) = v13;
        *(_OWORD *)(a2 - 64) = v114;
        *(_OWORD *)(a2 - 48) = v119;
        *(_OWORD *)(a2 - 32) = v124;
        *(_OWORD *)(a2 - 16) = v129;
        *(_OWORD *)(a2 - 128) = v91;
        *(_OWORD *)(a2 - 112) = v97;
        *(_OWORD *)(a2 - 96) = v103;
        *(_OWORD *)(a2 - 80) = v109;
        *(_OWORD *)(a2 - 192) = v67;
        *(_OWORD *)(a2 - 176) = v73;
        *(_OWORD *)(a2 - 160) = v79;
        *(_OWORD *)(a2 - 144) = v85;
      }
      return result;
    case 3uLL:
      sub_1013EC748((long long *)a1, (long long *)(a1 + 192), (long long *)(a2 - 192));
      return 1;
    case 4uLL:
      sub_1013ECFF8(a1, a1 + 192, a1 + 384, (long long *)(a2 - 192));
      return 1;
    case 5uLL:
      long long v29 = (double *)(a1 + 276);
      long long v30 = (long long *)(a1 + 192);
      long long v31 = (long long *)(a1 + 384);
      long long v32 = (long long *)(a1 + 576);
      sub_1013ECFF8(a1, a1 + 192, a1 + 384, (long long *)(a1 + 576));
      if (*(double *)(a2 - 108) <= *(double *)(a1 + 660)) {
        return 1;
      }
      long long v115 = *(_OWORD *)(a1 + 704);
      long long v120 = *(_OWORD *)(a1 + 720);
      long long v125 = *(_OWORD *)(a1 + 736);
      long long v130 = *(_OWORD *)(a1 + 752);
      long long v93 = *(_OWORD *)(a1 + 640);
      long long v99 = *(_OWORD *)(a1 + 656);
      long long v105 = *(_OWORD *)(a1 + 672);
      long long v110 = *(_OWORD *)(a1 + 688);
      long long v69 = *v32;
      long long v75 = *(_OWORD *)(a1 + 592);
      long long v81 = *(_OWORD *)(a1 + 608);
      long long v87 = *(_OWORD *)(a1 + 624);
      long long v33 = *(_OWORD *)(a2 - 192);
      long long v34 = *(_OWORD *)(a2 - 176);
      long long v35 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 624) = v35;
      *long long v32 = v33;
      *(_OWORD *)(a1 + 592) = v34;
      long long v36 = *(_OWORD *)(a2 - 128);
      long long v37 = *(_OWORD *)(a2 - 112);
      long long v38 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 688) = v38;
      *(_OWORD *)(a1 + 640) = v36;
      *(_OWORD *)(a1 + 656) = v37;
      long long v39 = *(_OWORD *)(a2 - 64);
      long long v40 = *(_OWORD *)(a2 - 48);
      long long v41 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 752) = v41;
      *(_OWORD *)(a1 + 704) = v39;
      *(_OWORD *)(a1 + 720) = v40;
      *(_OWORD *)(a2 - 64) = v115;
      *(_OWORD *)(a2 - 48) = v120;
      *(_OWORD *)(a2 - 32) = v125;
      *(_OWORD *)(a2 - 16) = v130;
      *(_OWORD *)(a2 - 128) = v93;
      *(_OWORD *)(a2 - 112) = v99;
      *(_OWORD *)(a2 - 96) = v105;
      *(_OWORD *)(a2 - 80) = v110;
      *(_OWORD *)(a2 - 192) = v69;
      *(_OWORD *)(a2 - 176) = v75;
      *(_OWORD *)(a2 - 160) = v81;
      *(_OWORD *)(a2 - 144) = v87;
      if (*(double *)(a1 + 660) <= *(double *)(a1 + 468)) {
        return 1;
      }
      long long v116 = *(_OWORD *)(a1 + 512);
      long long v121 = *(_OWORD *)(a1 + 528);
      long long v126 = *(_OWORD *)(a1 + 544);
      long long v131 = *(_OWORD *)(a1 + 560);
      long long v94 = *(_OWORD *)(a1 + 448);
      long long v100 = *(_OWORD *)(a1 + 464);
      long long v106 = *(_OWORD *)(a1 + 480);
      long long v111 = *(_OWORD *)(a1 + 496);
      long long v70 = *v31;
      long long v76 = *(_OWORD *)(a1 + 400);
      long long v82 = *(_OWORD *)(a1 + 416);
      long long v88 = *(_OWORD *)(a1 + 432);
      long long v42 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 528) = v42;
      long long v43 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 560) = v43;
      long long v44 = *(_OWORD *)(a1 + 656);
      *(_OWORD *)(a1 + 448) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 464) = v44;
      long long v45 = *(_OWORD *)(a1 + 688);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 672);
      *(_OWORD *)(a1 + 496) = v45;
      long long v46 = *(_OWORD *)(a1 + 592);
      long long *v31 = *v32;
      *(_OWORD *)(a1 + 400) = v46;
      long long v47 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 432) = v47;
      *(_OWORD *)(a1 + 704) = v116;
      *(_OWORD *)(a1 + 720) = v121;
      *(_OWORD *)(a1 + 736) = v126;
      *(_OWORD *)(a1 + 752) = v131;
      *(_OWORD *)(a1 + 640) = v94;
      *(_OWORD *)(a1 + 656) = v100;
      *(_OWORD *)(a1 + 672) = v106;
      *(_OWORD *)(a1 + 688) = v111;
      *long long v32 = v70;
      *(_OWORD *)(a1 + 592) = v76;
      BOOL v48 = *(double *)(a1 + 468) <= *v29;
      *(_OWORD *)(a1 + 608) = v82;
      *(_OWORD *)(a1 + 624) = v88;
      if (v48) {
        return 1;
      }
      long long v117 = *(_OWORD *)(a1 + 320);
      long long v122 = *(_OWORD *)(a1 + 336);
      long long v127 = *(_OWORD *)(a1 + 352);
      long long v132 = *(_OWORD *)(a1 + 368);
      long long v95 = *(_OWORD *)(a1 + 256);
      long long v101 = *(_OWORD *)(a1 + 272);
      long long v107 = *(_OWORD *)(a1 + 288);
      long long v112 = *(_OWORD *)(a1 + 304);
      long long v71 = *v30;
      long long v77 = *(_OWORD *)(a1 + 208);
      long long v83 = *(_OWORD *)(a1 + 224);
      long long v89 = *(_OWORD *)(a1 + 240);
      long long v49 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 336) = v49;
      long long v50 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 368) = v50;
      long long v51 = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 448);
      *(_OWORD *)(a1 + 272) = v51;
      long long v52 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 304) = v52;
      long long v53 = *(_OWORD *)(a1 + 400);
      long long *v30 = *v31;
      *(_OWORD *)(a1 + 208) = v53;
      long long v54 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 240) = v54;
      *(_OWORD *)(a1 + 512) = v117;
      *(_OWORD *)(a1 + 528) = v122;
      *(_OWORD *)(a1 + 544) = v127;
      *(_OWORD *)(a1 + 560) = v132;
      *(_OWORD *)(a1 + 448) = v95;
      *(_OWORD *)(a1 + 464) = v101;
      *(_OWORD *)(a1 + 480) = v107;
      *(_OWORD *)(a1 + 496) = v112;
      long long *v31 = v71;
      *(_OWORD *)(a1 + 400) = v77;
      BOOL v48 = *v29 <= *(double *)(a1 + 84);
      *(_OWORD *)(a1 + 416) = v83;
      *(_OWORD *)(a1 + 432) = v89;
      if (v48) {
        return 1;
      }
      long long v118 = *(_OWORD *)(a1 + 128);
      long long v123 = *(_OWORD *)(a1 + 144);
      long long v128 = *(_OWORD *)(a1 + 160);
      long long v133 = *(_OWORD *)(a1 + 176);
      long long v96 = *(_OWORD *)(a1 + 64);
      long long v102 = *(_OWORD *)(a1 + 80);
      long long v108 = *(_OWORD *)(a1 + 96);
      long long v113 = *(_OWORD *)(a1 + 112);
      long long v72 = *(_OWORD *)a1;
      long long v78 = *(_OWORD *)(a1 + 16);
      long long v84 = *(_OWORD *)(a1 + 32);
      long long v90 = *(_OWORD *)(a1 + 48);
      long long v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 144) = v55;
      long long v56 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 176) = v56;
      long long v57 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 80) = v57;
      long long v58 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 112) = v58;
      long long v59 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)a1 = *v30;
      *(_OWORD *)(a1 + 16) = v59;
      long long v60 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 48) = v60;
      *(_OWORD *)(a1 + 320) = v118;
      *(_OWORD *)(a1 + 336) = v123;
      *(_OWORD *)(a1 + 352) = v128;
      *(_OWORD *)(a1 + 368) = v133;
      *(_OWORD *)(a1 + 256) = v96;
      *(_OWORD *)(a1 + 272) = v102;
      *(_OWORD *)(a1 + 288) = v108;
      *(_OWORD *)(a1 + 304) = v113;
      long long *v30 = v72;
      *(_OWORD *)(a1 + 208) = v78;
      BOOL result = 1;
      *(_OWORD *)(a1 + 224) = v84;
      *(_OWORD *)(a1 + 240) = v90;
      return result;
    default:
      uint64_t v15 = a1 + 384;
      sub_1013EC748((long long *)a1, (long long *)(a1 + 192), (long long *)(a1 + 384));
      uint64_t v16 = a1 + 576;
      if (a1 + 576 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    double v19 = *(double *)(v16 + 84);
    if (v19 > *(double *)(v15 + 84))
    {
      long long v63 = *(_OWORD *)(v16 + 32);
      long long v64 = *(_OWORD *)(v16 + 48);
      long long v65 = *(_OWORD *)(v16 + 64);
      int v66 = *(_DWORD *)(v16 + 80);
      long long v61 = *(_OWORD *)v16;
      long long v62 = *(_OWORD *)(v16 + 16);
      long long v92 = *(_OWORD *)(v16 + 156);
      long long v98 = *(_OWORD *)(v16 + 172);
      int v104 = *(_DWORD *)(v16 + 188);
      long long v68 = *(_OWORD *)(v16 + 92);
      long long v74 = *(_OWORD *)(v16 + 108);
      uint64_t v20 = v17;
      long long v80 = *(_OWORD *)(v16 + 124);
      long long v86 = *(_OWORD *)(v16 + 140);
      while (1)
      {
        uint64_t v21 = a1 + v20;
        long long v22 = *(_OWORD *)(a1 + v20 + 528);
        *(_OWORD *)(v21 + 704) = *(_OWORD *)(a1 + v20 + 512);
        *(_OWORD *)(v21 + 720) = v22;
        long long v23 = *(_OWORD *)(a1 + v20 + 560);
        *(_OWORD *)(v21 + 736) = *(_OWORD *)(a1 + v20 + 544);
        *(_OWORD *)(v21 + 752) = v23;
        long long v24 = *(_OWORD *)(a1 + v20 + 464);
        *(_OWORD *)(v21 + 640) = *(_OWORD *)(a1 + v20 + 448);
        *(_OWORD *)(v21 + 656) = v24;
        long long v25 = *(_OWORD *)(a1 + v20 + 496);
        *(_OWORD *)(v21 + 672) = *(_OWORD *)(a1 + v20 + 480);
        *(_OWORD *)(v21 + 688) = v25;
        long long v26 = *(_OWORD *)(a1 + v20 + 400);
        *(_OWORD *)(v21 + 576) = *(_OWORD *)(a1 + v20 + 384);
        *(_OWORD *)(v21 + 592) = v26;
        long long v27 = *(_OWORD *)(a1 + v20 + 432);
        *(_OWORD *)(v21 + 608) = *(_OWORD *)(a1 + v20 + 416);
        *(_OWORD *)(v21 + 624) = v27;
        if (v20 == -384) {
          break;
        }
        v20 -= 192;
        if (v19 <= *(double *)(v21 + 276))
        {
          uint64_t v28 = a1 + v20 + 576;
          goto LABEL_12;
        }
      }
      uint64_t v28 = a1;
LABEL_12:
      *(_OWORD *)(v28 + 32) = v63;
      *(_OWORD *)(v28 + 48) = v64;
      *(_OWORD *)(v28 + 64) = v65;
      *(_DWORD *)(v28 + 80) = v66;
      *(_OWORD *)uint64_t v28 = v61;
      *(_OWORD *)(v28 + 16) = v62;
      *(double *)(v28 + 84) = v19;
      *(_OWORD *)(v28 + 92) = v68;
      *(_OWORD *)(v28 + 108) = v74;
      *(_OWORD *)(v28 + 124) = v80;
      *(_DWORD *)(v28 + 188) = v104;
      *(_OWORD *)(v28 + 172) = v98;
      *(_OWORD *)(v28 + 156) = v92;
      ++v18;
      *(_OWORD *)(v28 + 140) = v86;
      if (v18 == 8) {
        return v16 + 192 == a2;
      }
    }
    uint64_t v15 = v16;
    v17 += 192;
    v16 += 192;
    if (v16 == a2) {
      return 1;
    }
  }
}

__n128 sub_1013ECFF8(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  sub_1013EC748((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u64[0] = *(void *)((char *)a4 + 84);
  if (result.n128_f64[0] > *(double *)(a3 + 84))
  {
    long long v60 = *(_OWORD *)(a3 + 128);
    long long v63 = *(_OWORD *)(a3 + 144);
    long long v66 = *(_OWORD *)(a3 + 160);
    long long v69 = *(_OWORD *)(a3 + 176);
    long long v48 = *(_OWORD *)(a3 + 64);
    long long v51 = *(_OWORD *)(a3 + 80);
    long long v54 = *(_OWORD *)(a3 + 96);
    long long v57 = *(_OWORD *)(a3 + 112);
    long long v36 = *(_OWORD *)a3;
    long long v39 = *(_OWORD *)(a3 + 16);
    long long v42 = *(_OWORD *)(a3 + 32);
    long long v45 = *(_OWORD *)(a3 + 48);
    long long v9 = *a4;
    long long v10 = a4[1];
    long long v11 = a4[3];
    *(_OWORD *)(a3 + 32) = a4[2];
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v10;
    long long v12 = a4[4];
    long long v13 = a4[5];
    long long v14 = a4[7];
    *(_OWORD *)(a3 + 96) = a4[6];
    *(_OWORD *)(a3 + 112) = v14;
    *(_OWORD *)(a3 + 64) = v12;
    *(_OWORD *)(a3 + 80) = v13;
    long long v15 = a4[8];
    long long v16 = a4[9];
    long long v17 = a4[11];
    *(_OWORD *)(a3 + 160) = a4[10];
    *(_OWORD *)(a3 + 176) = v17;
    *(_OWORD *)(a3 + 128) = v15;
    *(_OWORD *)(a3 + 144) = v16;
    a4[8] = v60;
    a4[9] = v63;
    a4[10] = v66;
    a4[11] = v69;
    a4[4] = v48;
    a4[5] = v51;
    a4[6] = v54;
    a4[7] = v57;
    *a4 = v36;
    a4[1] = v39;
    result.n128_u64[1] = *((void *)&v42 + 1);
    a4[2] = v42;
    a4[3] = v45;
    result.n128_u64[0] = *(void *)(a3 + 84);
    if (result.n128_f64[0] > *(double *)(a2 + 84))
    {
      long long v61 = *(_OWORD *)(a2 + 128);
      long long v64 = *(_OWORD *)(a2 + 144);
      long long v67 = *(_OWORD *)(a2 + 160);
      long long v70 = *(_OWORD *)(a2 + 176);
      long long v49 = *(_OWORD *)(a2 + 64);
      long long v52 = *(_OWORD *)(a2 + 80);
      long long v55 = *(_OWORD *)(a2 + 96);
      long long v58 = *(_OWORD *)(a2 + 112);
      long long v37 = *(_OWORD *)a2;
      long long v40 = *(_OWORD *)(a2 + 16);
      long long v43 = *(_OWORD *)(a2 + 32);
      long long v46 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)a3;
      long long v19 = *(_OWORD *)(a3 + 16);
      long long v20 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
      long long v21 = *(_OWORD *)(a3 + 64);
      long long v22 = *(_OWORD *)(a3 + 80);
      long long v23 = *(_OWORD *)(a3 + 112);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 112) = v23;
      *(_OWORD *)(a2 + 64) = v21;
      *(_OWORD *)(a2 + 80) = v22;
      long long v24 = *(_OWORD *)(a3 + 128);
      long long v25 = *(_OWORD *)(a3 + 144);
      long long v26 = *(_OWORD *)(a3 + 176);
      *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
      *(_OWORD *)(a2 + 176) = v26;
      *(_OWORD *)(a2 + 128) = v24;
      *(_OWORD *)(a2 + 144) = v25;
      *(_OWORD *)(a3 + 128) = v61;
      *(_OWORD *)(a3 + 144) = v64;
      *(_OWORD *)(a3 + 160) = v67;
      *(_OWORD *)(a3 + 176) = v70;
      *(_OWORD *)(a3 + 64) = v49;
      *(_OWORD *)(a3 + 80) = v52;
      *(_OWORD *)(a3 + 96) = v55;
      *(_OWORD *)(a3 + 112) = v58;
      *(_OWORD *)a3 = v37;
      *(_OWORD *)(a3 + 16) = v40;
      result.n128_u64[1] = *((void *)&v43 + 1);
      *(_OWORD *)(a3 + 32) = v43;
      *(_OWORD *)(a3 + 48) = v46;
      result.n128_u64[0] = *(void *)(a2 + 84);
      if (result.n128_f64[0] > *(double *)(a1 + 84))
      {
        long long v62 = *(_OWORD *)(a1 + 128);
        long long v65 = *(_OWORD *)(a1 + 144);
        long long v68 = *(_OWORD *)(a1 + 160);
        long long v71 = *(_OWORD *)(a1 + 176);
        long long v50 = *(_OWORD *)(a1 + 64);
        long long v53 = *(_OWORD *)(a1 + 80);
        long long v56 = *(_OWORD *)(a1 + 96);
        long long v59 = *(_OWORD *)(a1 + 112);
        long long v38 = *(_OWORD *)a1;
        long long v41 = *(_OWORD *)(a1 + 16);
        __n128 v44 = *(__n128 *)(a1 + 32);
        long long v47 = *(_OWORD *)(a1 + 48);
        long long v27 = *(_OWORD *)a2;
        long long v28 = *(_OWORD *)(a2 + 16);
        long long v29 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v29;
        *(_OWORD *)a1 = v27;
        *(_OWORD *)(a1 + 16) = v28;
        long long v30 = *(_OWORD *)(a2 + 64);
        long long v31 = *(_OWORD *)(a2 + 80);
        long long v32 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v32;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 80) = v31;
        long long v33 = *(_OWORD *)(a2 + 128);
        long long v34 = *(_OWORD *)(a2 + 144);
        long long v35 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v35;
        *(_OWORD *)(a1 + 128) = v33;
        *(_OWORD *)(a1 + 144) = v34;
        *(_OWORD *)(a2 + 128) = v62;
        *(_OWORD *)(a2 + 144) = v65;
        *(_OWORD *)(a2 + 160) = v68;
        *(_OWORD *)(a2 + 176) = v71;
        *(_OWORD *)(a2 + 64) = v50;
        *(_OWORD *)(a2 + 80) = v53;
        *(_OWORD *)(a2 + 96) = v56;
        *(_OWORD *)(a2 + 112) = v59;
        *(_OWORD *)a2 = v38;
        *(_OWORD *)(a2 + 16) = v41;
        __n128 result = v44;
        *(__n128 *)(a2 + 32) = v44;
        *(_OWORD *)(a2 + 48) = v47;
      }
    }
  }
  return result;
}

void sub_1013ED218(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1013ED248()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1013ED300(_Unwind_Exception *a1)
{
}

void sub_1013ED318()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1013ED3C0(_Unwind_Exception *a1)
{
}

void sub_1013ED504(id a1)
{
  qword_102487928 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTransitMacMonitorSilo"];
}

void sub_1013ED8E8(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000E23EC(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1000DA6E8(v13, *((void *)a3 + 14), *((void *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  void v13[3] = *((void *)a3 + 17);
  [a4 onWifiServiceNotification:v6 data:&v7];
  long long v14 = (void **)v13;
  sub_1000D7F78(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1013ED9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

BOOL sub_1013EEAD4(uint64_t a1, void *a2)
{
  [a2 timestamp];
  return v3 >= *(double *)(a1 + 32) + -600.0;
}

void sub_1013EF2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28)
{
  a27 = &a22;
  sub_1000D7F78((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_1013EF380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419480 != -1) {
      dispatch_once(&qword_102419480, &stru_102324378);
    }
    uint64_t v4 = qword_102419488;
    if (os_log_type_enabled((os_log_t)qword_102419488, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v9 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#TransitMacMonitor: error fetching from CLTransitMacTileDataProvider, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419480 != -1) {
        dispatch_once(&qword_102419480, &stru_102324378);
      }
      __int16 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTransitMacMonitor onWifiServiceNotification:data:]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v5 = a1 + 40;
    uint64_t v6 = *(void **)(a1 + 32);
    _[v6 processNewAccessPoints:v5 transitTileResults:a2];
  }
}

void *sub_1013EF580(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  double v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_1000DA6E8(v2, *(void *)(a2 + 40), *(void *)(a2 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
}

void sub_1013EF5B0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1000D7F78(&v1);
}

void sub_1013EF924(id a1)
{
  qword_102419488 = (uint64_t)os_log_create("com.apple.locationd.Position", "Transit");
}

void sub_1013EF954(id a1)
{
  qword_102419558 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

double sub_1013EF984(double a1, double a2)
{
  return (a1 / a2 * 10.8 + 7.0) / 3.5;
}

double sub_1013EF9A4(double a1, double a2)
{
  return fmax((a1 * 3.5 + -7.0) / 10.8 * a2, 0.0);
}

float sub_1013EF9CC(uint64_t a1, double a2)
{
  double v2 = *(double *)(a1 + 40);
  if (v2 == -1.0) {
    return -1.0;
  }
  float v3 = v2;
  float v4 = a2;
  sub_10106C638(v3, *(float *)(a1 + 24), v4);
  return result;
}

float sub_1013EF9F8(uint64_t a1, double a2)
{
  float result = -1.0;
  if (*(double *)(a1 + 40) != -1.0)
  {
    double v4 = *(float *)(a1 + 24);
    if (v4 >= -0.277 && v4 <= 0.523)
    {
      double v5 = *(double *)(a1 + 56);
      if (v5 != -1.0) {
        return fmax((v5 * 3.5 + -7.0) / 10.8 * a2, 0.0);
      }
    }
  }
  return result;
}

BOOL sub_1013EFA74(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL sub_1013EFA84(uint64_t a1, uint64_t a2)
{
  return fmax(((float)(*(float *)(a2 + 16) * 0.5) * 3.5 + -7.0) / 10.8 * *(float *)(a2 + 12), 0.0) <= *(float *)(a1 + 32);
}

void sub_1013EFE78(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1013EFEAC(double *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_1013F0200((uint64_t)a1, a3);
  double v6 = *(double *)(a3 + 104);
  *(void *)(a3 + 112) = 0x3FD0000000000000;
  if (v6 >= 0.0 && v6 < 8.0 && (a2 & 1) == 0)
  {
    double v7 = a1[5];
    double v8 = 0.2905;
LABEL_16:
    double v14 = v7 * v8 * a1[8];
LABEL_17:
    *(double *)a3 = v14;
    goto LABEL_18;
  }
  if (v6 >= 8.0 && v6 < 10.0 || (v6 >= -4.0 ? (BOOL v9 = v6 < 0.0) : (BOOL v9 = 0), v9 || a2))
  {
    double v7 = a1[4] * 0.2905;
    double v8 = a1[6];
    goto LABEL_16;
  }
  if (v6 >= 10.0)
  {
    double v13 = (a1[4] + a1[3] * 10.5) * 0.2905;
    goto LABEL_20;
  }
  if (v6 < -4.0)
  {
    double v10 = v6 / 100.0 / sqrt(v6 / 100.0 * (v6 / 100.0) + 1.0);
    long double v11 = exp(v10 * -18.6);
    double v12 = fabs((v6 + 4.0 + v6 + 4.0) / (v6 + -4.0)) * 0.15;
    double v13 = a1[4] * 0.2905 * fmin((1.0 - v12) * a1[6] + v12 * (v11 * 0.19976 + 0.80024 + v10 * 0.98795), 1.0);
LABEL_20:
    double v14 = a1[8] * v13;
    goto LABEL_17;
  }
  if (qword_102419230 != -1) {
    dispatch_once(&qword_102419230, &stru_1023243E8);
  }
  long long v15 = qword_102419238;
  if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134349312;
    double v18 = v6;
    __int16 v19 = 1026;
    int v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unexpected grade range grade=%{public}.2f, isGradeOnset=%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419230 != -1) {
      dispatch_once(&qword_102419230, &stru_1023243E8);
    }
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static CLPower::ModelOutput CLPowerOutdoorRunModel::computePowerFixedEta(const CLPower::ModelInput &, BOOL)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
LABEL_18:
  *(double *)a3 = round(*(double *)a3);
}

void sub_1013F0200(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *(double *)(a1 + 16);
  double v5 = *(double *)(a1 + 24);
  double v6 = sub_100DE6130(v4, v5);
  *(_DWORD *)(a2 + 124) = 0;
  *(_WORD *)(a2 + 128) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(void *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 132) = 1000;
  *(void *)(a2 + 8) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 48) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)a1;
  *(double *)(a2 + 88) = v4;
  *(double *)(a2 + 96) = v5;
  *(double *)(a2 + 104) = v6;
}

void sub_1013F0290(id a1)
{
  qword_102419238 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Power");
}

void sub_1013F02C0(uint64_t a1)
{
  double v2 = *(void ***)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 232);
  *(void *)(a1 + 256) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 232);
      double v2 = (void **)(*(void *)(a1 + 224) + 8);
      *(void *)(a1 + 224) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 13;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 26;
  }
  *(void *)(a1 + 248) = v6;
LABEL_8:
  double v7 = *(void ***)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 136);
  *(void *)(a1 + 160) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 136);
      double v7 = (void **)(*(void *)(a1 + 128) + 8);
      *(void *)(a1 + 128) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 13;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 26;
  }
  *(void *)(a1 + 152) = v11;
LABEL_15:
  double v12 = *(void ***)(a1 + 176);
  uint64_t v13 = *(void *)(a1 + 184);
  *(void *)(a1 + 208) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 184);
      double v12 = (void **)(*(void *)(a1 + 176) + 8);
      *(void *)(a1 + 176) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 13;
    goto LABEL_21;
  }
  if (v14 >> 3 == 2)
  {
    uint64_t v16 = 26;
LABEL_21:
    *(void *)(a1 + 200) = v16;
  }
  *(_WORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 266) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 311) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
}

uint64_t sub_1013F040C(uint64_t a1)
{
  sub_101171D90(a1);
  *(void *)(v2 + 272) = 0;
  *(void *)(v2 + 280) = 0;
  *(_DWORD *)(v2 + 287) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 311) = 0;
  *(void *)(v2 + 320) = 0;
  *(void *)(v2 + 328) = 0;
  *(_DWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_DWORD *)(v2 + 263) = 0;
  *(void *)(v2 + 344) = 850045863;
  *(void *)(v2 + 400) = 0;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  sub_1013F02C0(v2);
  return a1;
}

uint64_t sub_1013F04B0(uint64_t a1)
{
  return a1;
}

void sub_1013F0500(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  sub_1013F02C0(a1);

  std::mutex::unlock(v2);
}

void sub_1013F0548(double *a1, uint64_t a2, uint64_t a3, double *a4, BOOL *a5, double *a6)
{
  sub_1000F1268(a1, a2, a3);
  double v13 = v12;
  double v14 = *(double *)(a2 + 76);
  double v15 = v14 - *(double *)(a3 + 76);
  if (v15 >= -2.0)
  {
    BOOL v17 = v15 >= 0.0 || v15 <= -2.0;
    double v18 = fabs(v15);
    if (v17) {
      double v18 = v14 - *(double *)(a3 + 76);
    }
    double v19 = sub_1013F07AC(a1, v18, v14) + (*(double *)(a3 + 20) + *(double *)(a2 + 20)) * 3.0;
    *a4 = v19;
    *a6 = v13 - v19;
    *a5 = v13 < *a4;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102324408);
    }
    uint64_t v16 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      double v22 = v15;
      __int16 v23 = 2048;
      unint64_t v24 = 0xC000000000000000;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIntegrityMonitor::crossCheck(const CLDaemonLocation &, const CLDaemonLocation &, double &, BOOL &, double &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    sub_1013F02C0((uint64_t)a1);
  }
}

double sub_1013F07AC(void *a1, double a2, double a3)
{
  v15[0] = 0.0;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = a1[14];
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = a1 + 9;
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[10];
  double v8 = a3
     - *(double *)(*(void *)(v7 + (((unint64_t)(v4 + v6 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (v4 + v6 - 1));
  if (v8 < a2)
  {
    sub_1013F0AD4(a3, -1.0, (uint64_t)a1, (double *)&v13, (double *)&v14, (double *)&v13 + 1, (double *)&v14 + 1, v15, v4, v5);
    double v9 = v8 + a2 - v8;
    if (v9 != 0.0)
    {
      double v10 = ((a2 - v8) * 40.0
           + (*(double *)&v14 * 3.0
            + *(double *)&v13 * 0.0
            + *((double *)&v13 + 1) * 5.0
            + *((double *)&v14 + 1) * 40.0
            + v15[0] * 40.0)
           / 100.0
           * v8)
          / v9;
      return v10 * a2;
    }
LABEL_5:
    double v10 = 40.0;
    return v10 * a2;
  }
  uint64_t v11 = 0;
  while (a3
        - *(double *)(*(void *)(v7 + (((unint64_t)(v6 + v11) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v6 + v11)) < a2)
  {
    if (v4 == ++v11)
    {
      LODWORD(v11) = 0;
      break;
    }
  }
  sub_1013F0AD4(a3, a2, (uint64_t)a1, (double *)&v13, (double *)&v14, (double *)&v13 + 1, (double *)&v14 + 1, v15, v11, v5);
  double v10 = (*(double *)&v14 * 3.0
       + *(double *)&v13 * 0.0
       + *((double *)&v13 + 1) * 5.0
       + *((double *)&v14 + 1) * 40.0
       + v15[0] * 40.0)
      / 100.0;
  return v10 * a2;
}

void sub_1013F0980(uint64_t a1, void *a2, _DWORD *a3, int *a4)
{
  double v8 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  sub_1013F0A04(a1, a2, a3, a4);

  std::mutex::unlock(v8);
}

void sub_1013F09F0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1013F0A04(uint64_t a1, void *a2, _DWORD *a3, int *a4)
{
  *(void *)(a1 + 40) = *a2;
  int v4 = *a4;
  *(_DWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 52) = v4;
  if (*a3 > 0xBu || ((1 << *a3) & 0xC06) == 0)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 40);
  }
  else if (*(_DWORD *)(a1 + 64) != 2)
  {
    *(void *)(a1 + 56) = *a2;
    int v6 = *a4;
    *(_DWORD *)(a1 + 64) = 2;
    *(_DWORD *)(a1 + 68) = v6;
  }
  sub_1013F0A6C(a1);
}

void sub_1013F0A6C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 72);
  sub_1013F0F0C(a1 + 72, (_OWORD *)(a1 + 40));
  unint64_t v3 = *(void *)(a1 + 112);
  if (v3 >= 0x12C)
  {
    *(void *)(a1 + 112) = v3 - 1;
    sub_100446B90(v2, 1);
  }
}

double sub_1013F0AD4(double result, double a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, double *a8, int a9, void *a10)
{
  if (a10[5] < (unint64_t)a9) {
    goto LABEL_2;
  }
  if (a9)
  {
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    if (result > 0.0)
    {
      uint64_t v15 = *(void *)(a10[1] + ((a10[4] >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v16 = a10[4];
      double v17 = result - *(double *)(v15 + 16 * v16);
      if (v17 <= 0.0) {
        goto LABEL_2;
      }
      int v18 = *(_DWORD *)(v15 + 16 * v16 + 8);
      if (v18 <= 40)
      {
        switch(v18)
        {
          case 1:
          case 2:
          case 10:
          case 11:
            double v10 = 0.0;
            double v14 = v17 + 0.0;
            goto LABEL_25;
          case 4:
            goto LABEL_22;
          case 5:
            goto LABEL_20;
          case 8:
            double v10 = 0.0;
            double v11 = v17 + 0.0;
            goto LABEL_25;
          default:
            goto LABEL_24;
        }
      }
      if (v18 == 41)
      {
LABEL_22:
        double v10 = v17 + 0.0;
      }
      else
      {
        if (v18 == 52 || v18 == 56)
        {
LABEL_20:
          double v10 = 0.0;
          double v12 = v17 + 0.0;
          goto LABEL_26;
        }
LABEL_24:
        double v10 = 0.0;
        double v13 = v17 + 0.0;
      }
LABEL_25:
      double v12 = 0.0;
    }
LABEL_26:
    if (a9 >= 2)
    {
      unint64_t v20 = a10[4];
      uint64_t v21 = a10[1];
      uint64_t v22 = a9 - 1;
      do
      {
        uint64_t v23 = *(void *)(v21 + (((v20 + 1) >> 5) & 0x7FFFFFFFFFFFFF8));
        uint64_t v24 = (v20 + 1);
        double v25 = *(double *)(*(void *)(v21 + ((v20 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v20)
            - *(double *)(v23 + 16 * v24);
        if (v25 <= 0.0) {
          goto LABEL_2;
        }
        int v26 = *(_DWORD *)(v23 + 16 * v24 + 8);
        if (v26 > 40)
        {
          if (v26 == 41)
          {
LABEL_36:
            double v10 = v10 + v25;
          }
          else if (v26 == 52 || v26 == 56)
          {
LABEL_35:
            double v12 = v12 + v25;
          }
          else
          {
LABEL_38:
            double v13 = v13 + v25;
          }
        }
        else
        {
          switch(v26)
          {
            case 1:
            case 2:
            case 10:
            case 11:
              double v14 = v14 + v25;
              break;
            case 4:
              goto LABEL_36;
            case 5:
              goto LABEL_35;
            case 8:
              double v11 = v11 + v25;
              break;
            default:
              goto LABEL_38;
          }
        }
        ++v20;
      }
      while (--v22);
    }
    if (a2 <= 0.0) {
      goto LABEL_52;
    }
    uint64_t v27 = a10[4];
    uint64_t v28 = a10[1];
    float result = a2
           - (result
            - *(double *)(*(void *)(v28 + (((unint64_t)(v27 + a9 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v27 + a9 - 1)));
    if (result > 0.0)
    {
      int v29 = *(_DWORD *)(*(void *)(v28 + (((unint64_t)(v27 + a9) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v27 + a9)
                      + 8);
      if (v29 > 40)
      {
        if (v29 == 41)
        {
LABEL_49:
          double v10 = v10 + result;
        }
        else if (v29 == 52 || v29 == 56)
        {
LABEL_48:
          double v12 = v12 + result;
        }
        else
        {
LABEL_51:
          double v13 = v13 + result;
        }
      }
      else
      {
        switch(v29)
        {
          case 1:
          case 2:
          case 10:
          case 11:
            double v14 = v14 + result;
            break;
          case 4:
            goto LABEL_49;
          case 5:
            goto LABEL_48;
          case 8:
            double v11 = v11 + result;
            break;
          default:
            goto LABEL_51;
        }
      }
LABEL_52:
      double v30 = v13 + v12 + v11 + v10 + v14;
      *a4 = v14 / v30 * 100.0;
      *a5 = v10 / v30 * 100.0;
      *a6 = v11 / v30 * 100.0;
      *a7 = v12 / v30 * 100.0;
      float result = v13 / v30 * 100.0;
      *a8 = result;
      return result;
    }
LABEL_2:
    *a8 = 100.0;
    return result;
  }
  int v19 = *(_DWORD *)(*(void *)(a10[1] + ((a10[4] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a10[4] + 8);
  if (v19 > 40)
  {
    if (v19 == 41)
    {
LABEL_16:
      *a5 = 100.0;
      return result;
    }
    if (v19 == 52 || v19 == 56)
    {
LABEL_15:
      *a7 = 100.0;
      return result;
    }
    goto LABEL_2;
  }
  switch(v19)
  {
    case 1:
    case 2:
    case 10:
    case 11:
      *a4 = 100.0;
      break;
    case 4:
      goto LABEL_16;
    case 5:
      goto LABEL_15;
    case 8:
      *a6 = 100.0;
      break;
    default:
      goto LABEL_2;
  }
  return result;
}

int64x2_t sub_1013F0F0C(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1013F1D58((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = (void *)(v5 + 8 * (v4 >> 8));
  uint64_t v7 = *v6 + 16 * v4;
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(_OWORD *)(v7 - 16) = *a2;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

BOOL sub_1013F0F8C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  BOOL v3 = sub_1013F0FE4((void *)a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1013F0FD0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1013F0FE4(void *a1)
{
  return a1[20]
      && CFAbsoluteTimeGetCurrent()
       - *(double *)(*(void *)(a1[16] + 8 * (a1[19] / 0x1AuLL)) + 156 * (a1[19] % 0x1AuLL) + 76) < 900.0;
}

BOOL sub_1013F1064(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  BOOL v3 = sub_1013F10BC((void *)a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1013F10A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1013F10BC(void *a1)
{
  return a1[32]
      && CFAbsoluteTimeGetCurrent()
       - *(double *)(*(void *)(a1[28] + 8 * (a1[31] / 0x1AuLL)) + 156 * (a1[31] % 0x1AuLL) + 76) < 900.0;
}

BOOL sub_1013F113C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  BOOL v3 = sub_1013F0FE4((void *)a1) || sub_1013F10BC((void *)a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1013F1194(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1013F11A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  double v5 = sub_1013F1218((double *)a1, a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_1013F1204(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1013F1218(double *a1, uint64_t a2)
{
  if (!sub_1013F0FE4(a1)) {
    return NAN;
  }
  uint64_t v4 = *(void *)(*((void *)a1 + 16) + 8 * (*((void *)a1 + 19) / 0x1AuLL)) + 156 * (*((void *)a1 + 19) % 0x1AuLL);

  sub_1000F1268(a1, v4, a2);
  return result;
}

double sub_1013F12A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  double v5 = sub_1013F1314((double *)a1, a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_1013F1300(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1013F1314(double *a1, uint64_t a2)
{
  if (!sub_1013F10BC(a1)) {
    return NAN;
  }
  uint64_t v4 = *(void *)(*((void *)a1 + 28) + 8 * (*((void *)a1 + 31) / 0x1AuLL)) + 156 * (*((void *)a1 + 31) % 0x1AuLL);

  sub_1000F1268(a1, v4, a2);
  return result;
}

void sub_1013F13A0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1013F13D0(void **a1)
{
  uint64_t v2 = a1[1];
  BOOL v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 26 * v4 - 1;
  }
  int v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x1A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    double v8 = a1[3];
    double v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      long long v46 = a1 + 3;
      std::string __p = sub_1000DA54C(v7, v11);
      long long v43 = (char *)__p;
      __n128 v44 = (char *)__p;
      long long v45 = (char *)__p + 8 * v12;
      long long v41 = operator new(0xFD8uLL);
      sub_1000DA434(&__p, &v41);
      double v13 = (char *)a1[1];
      double v14 = v44;
      if (v13 == a1[2])
      {
        long long v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              int v26 = v43;
              double v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                double v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)int v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              long long v43 = &v24[8 * (v23 >> 2)];
              __n128 v44 = v14;
              long long v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                double v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              unint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                double v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              double v14 = &v20[v21];
              long long v43 = v22;
              __n128 v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)double v14 = v32;
          double v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        long long v33 = (char *)a1[1];
      }
      long long v36 = *a1;
      long long v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      long long v43 = v33;
      long long v38 = (char *)a1[3];
      long long v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      __n128 v44 = v13;
      long long v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 13;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 26;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        __n128 v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFD8uLL);
        sub_10017F0B4(a1, &__p);
        long long v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFD8uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 13;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 26;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 26;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_1013F16A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1013F16EC(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x1A) {
    unint64_t v6 = v5 / 0x1A + 1;
  }
  else {
    unint64_t v6 = v5 / 0x1A;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x1A) {
    unint64_t v8 = v7 / 0x1A;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x1A)
  {
    for (a1[4] = v7 - 26 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      BOOL v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          int v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          long long v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFD8uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFD8uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 25;
          }
          else {
            uint64_t v64 = 26;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 26 * v8;
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          long long v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              long long v81 = &v79[8 * (v78 >> 2)];
              long long v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                long long v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)long long v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              long long v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              long long v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              long long v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      long long v91 = a1 + 3;
      if (v13) {
        int64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        int64_t v15 = 0;
      }
      uint64_t v38 = -26 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        long long v88 = operator new(0xFD8uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        long long v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              long long v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              long long v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              long long v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              long long v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          long long v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      long long v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      long long v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1013F1C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1013F1CA4(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x6F96F96F96F96F97 * ((uint64_t)(result[1] - *(void *)*result) >> 2);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 25 - v3;
      unint64_t v6 = &v2[-(v5 / 0x1A)];
      *double result = v6;
      unint64_t v4 = *v6 + 156 * (26 * (v5 / 0x1A) - v5) + 3900;
    }
    else
    {
      *double result = &v2[v3 / 0x1A];
      unint64_t v4 = v2[v3 / 0x1A] + 156 * (v3 % 0x1A);
    }
    result[1] = v4;
  }
  return result;
}

void sub_1013F1D58(void **a1)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  unint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x100)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      int64_t v46 = a1 + 3;
      std::string __p = sub_1000DA54C(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      long long v45 = (char *)__p + 8 * v12;
      int64_t v41 = operator new(0x1000uLL);
      sub_1000DA434(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              int64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)int v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              long long v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              BOOL v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      long long v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      long long v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      long long v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 128;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0x1000uLL);
        sub_10017F0B4(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0x1000uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 128;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_1013F2020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_1013F206C(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = unk_101DB6378;
  *(_OWORD *)(a1 + 40) = xmmword_101DB6388;
  *(_OWORD *)(a1 + 56) = unk_101DB6398;
  *(void *)&double result = 1084800281;
  *(_OWORD *)(a1 + 72) = xmmword_101DB63A8;
  *(void *)a1 = off_102324438;
  *(_OWORD *)(a1 + 8) = xmmword_101DB6368;
  return result;
}

uint64_t sub_1013F20B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  sub_100081994((uint64_t)&v6, v8, (int *)(a1 + 8), 6, 3);
  uint64_t v2 = 0;
  LODWORD(result) = 0;
  float v4 = 0.0;
  do
  {
    float v5 = v8[v2];
    if (v5 <= v4) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v2;
    }
    if (v5 > v4) {
      float v4 = v8[v2];
    }
    ++v2;
  }
  while (v2 != 6);
  return result;
}

double sub_1013F2158(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = off_1022C3DA0;
  *(_DWORD *)(a1 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = off_1022C3DA0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = off_1022C3DA0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 280) = off_1022DE6F0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = off_1022DE6F0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = off_1022DE6F0;
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  return result;
}

void sub_1013F229C(uint64_t a1, int a2)
{
  double v3 = (double)a2 * 0.3;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = (int)v3;
  *(_DWORD *)(a1 + 12) = 0;
  unsigned int v4 = vcvtd_n_s64_f64((double)a2, 2uLL);
  *(_DWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 112) = v4;
  *(_DWORD *)(a1 + 200) = v4;
  *(void *)(a1 + 288) = (int)v3;
  sub_100B0AD14((void *)(a1 + 280));
  *(void *)(a1 + 368) = (int)((double)*(int *)(a1 + 4) * 0.3);
  sub_100B0AD14((void *)(a1 + 360));
  *(void *)(a1 + 448) = (int)((double)*(int *)(a1 + 4) * 0.3);

  sub_100B0AD14((void *)(a1 + 440));
}

void sub_1013F2350(uint64_t a1, double a2, float a3, float a4, float a5)
{
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) == 0)
  {
    ++*(_DWORD *)(a1 + 12);
    *(float *)&int v6 = (float)(*(float *)&dword_102487938 * 0.7) + a3 * 0.300000012;
    *(float *)&int v7 = (float)(*(float *)&dword_10248793C * 0.7) + a4 * 0.300000012;
    float v16 = *(float *)&v7;
    float v17 = *(float *)&v6;
    *(float *)&int v8 = (float)(*(float *)&dword_102487940 * 0.7) + a5 * 0.300000012;
    float v15 = *(float *)&v8;
    dword_102487938 = v6;
    dword_10248793C = v7;
    dword_102487940 = v8;
    unint64_t v9 = (void *)(a1 + 16);
    sub_1006B4700(a1 + 16, &v17);
    sub_1006B4700(a1 + 104, &v16);
    sub_1006B4700(a1 + 192, &v15);
    float v14 = 0.0;
    uint64_t v13 = 0;
    sub_100A6E134(v9, 2, &v14);
    sub_100A6E134((void *)(a1 + 104), 2, (_DWORD *)&v13 + 1);
    sub_100A6E134((void *)(a1 + 192), 2, &v13);
    float v10 = (float)(v16 - *((float *)&v13 + 1)) * (float)(v16 - *((float *)&v13 + 1));
    float v11 = (float)(v15 - *(float *)&v13) * (float)(v15 - *(float *)&v13);
    double v12 = (float)((float)(v17 - v14) * (float)(v17 - v14));
    sub_100B0AD90(a1 + 280, &v12);
    double v12 = v10;
    sub_100B0AD90(a1 + 360, &v12);
    double v12 = v11;
    sub_100B0AD90(a1 + 440, &v12);
    if (!(*(_DWORD *)(a1 + 12) % *(_DWORD *)(a1 + 8))) {
      sub_1013F24FC(a1);
    }
  }
}

uint64_t sub_1013F24FC(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 352);
  float v2 = 0.0;
  float v3 = 0.0;
  if (v1) {
    float v3 = *(double *)(result + 296) / (double)v1;
  }
  unint64_t v4 = *(void *)(result + 432);
  if (v4) {
    float v2 = *(double *)(result + 376) / (double)v4;
  }
  unint64_t v5 = *(void *)(result + 512);
  if (v5) {
    float v6 = *(double *)(result + 456) / (double)v5;
  }
  else {
    float v6 = 0.0;
  }
  if (sqrtf((float)(fabsf(v3) + fabsf(v2)) + fabsf(v6)) <= 3.4) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  *(unsigned char *)double result = v7;
  return result;
}

void sub_1013F263C(id a1)
{
  qword_102487948 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTurnStateSilo"];
}

uint64_t sub_1013F26FC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1013F291C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102487958 != -1) {
    dispatch_once(&qword_102487958, block);
  }
  return qword_10248D450;
}

void sub_1013F291C()
{
}

void sub_1013F2968()
{
}

uint64_t sub_1013F298C(uint64_t a1, void *a2)
{
  float v3 = (void *)sub_1013F2A34(a1, "CLTurnState", a2);
  void *v3 = off_102324498;
  v3[14] = 0;
  uint64_t v4 = (uint64_t)(v3 + 15);
  sub_1013F2298((uint64_t)(v3 + 15));
  *(_WORD *)(a1 + 640) = 0;
  if (sub_100A68CE8()) {
    sub_1013F229C(v4, 100);
  }
  return a1;
}

void sub_1013F2A0C(_Unwind_Exception *a1)
{
  sub_1013F2AE0(v2);
  sub_1013F2C18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F2A34(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102324608;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1013F2AC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013F2AE0(uint64_t a1)
{
  *(void *)(a1 + 440) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 472));
  *(void *)(a1 + 360) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 392));
  *(void *)(a1 + 280) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 312));
  *(void *)(a1 + 192) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 256, *(void **)(a1 + 264));
  sub_10041F48C((void *)(a1 + 208));
  *(void *)(a1 + 104) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 168, *(void **)(a1 + 176));
  sub_10041F48C((void *)(a1 + 120));
  *(void *)(a1 + 16) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 80, *(void **)(a1 + 88));
  sub_10041F48C((void *)(a1 + 32));
  return a1;
}

uint64_t sub_1013F2C18(uint64_t a1)
{
  *(void *)a1 = off_102324608;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1013F2C9C(uint64_t a1)
{
  *(void *)a1 = off_102324498;
  sub_1013F2E44(a1);
  *(void *)(a1 + 560) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 592));
  *(void *)(a1 + 480) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 512));
  *(void *)(a1 + 400) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 432));
  *(void *)(a1 + 312) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 376, *(void **)(a1 + 384));
  sub_10041F48C((void *)(a1 + 328));
  *(void *)(a1 + 224) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 288, *(void **)(a1 + 296));
  sub_10041F48C((void *)(a1 + 240));
  *(void *)(a1 + 136) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 200, *(void **)(a1 + 208));
  sub_10041F48C((void *)(a1 + 152));

  return sub_1013F2C18(a1);
}

void sub_1013F2E0C(uint64_t a1)
{
  sub_1013F2C9C(a1);

  operator delete();
}

uint64_t sub_1013F2E44(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  if (*(void *)(result + 112))
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_100A68CE8();
    sub_1009D26C4(v2, 0, *(void *)(v1 + 112));
    double result = *(void *)(v1 + 112);
    if (result) {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(v1 + 112) = 0;
  }
  return result;
}

void sub_1013F2EB4(unsigned __int8 *a1, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    unint64_t v5 = a1 + 120;
    uint64_t v6 = a2 + 16;
    HIDWORD(v7) = 0;
    do
    {
      int v8 = *v5;
      LODWORD(v7) = *(_DWORD *)(v6 + 16);
      sub_1013F2350((uint64_t)v5, v7, *(float *)(v6 - 8), *(float *)(v6 - 4), *(float *)v6);
      int v9 = *v5;
      if (v8 != v9)
      {
        *((_WORD *)a1 + 320) = v9;
        __int16 v14 = *((_WORD *)a1 + 320);
        *(_DWORD *)std::string buf = 0;
        (*(void (**)(unsigned __int8 *, uint8_t *, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v14, 1, 0xFFFFFFFFLL, 0);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023245D8);
        }
        float v10 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v11 = a1[640];
          *(_DWORD *)std::string buf = 67109376;
          int v20 = v8;
          __int16 v21 = 1024;
          int v22 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "MotionState,Turn,From,%d,To,%d,", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023245D8);
          }
          int v12 = a1[640];
          int v15 = 67109376;
          int v16 = v8;
          __int16 v17 = 1024;
          int v18 = v12;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTurnState::onCompass(const CLCompass_Type::Sample *, int)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      v6 += 112;
      --v4;
    }
    while (v4);
  }
}

void *sub_1013F3130@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1013F31AC(uint64_t a1, int *a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023245D8);
  }
  uint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client registered for notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023245D8);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTurnState::registerForNotificationInternal(const CLTurnState_Type::Notification &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (!*a2 && !*(void *)(a1 + 112) && sub_100A68CE8()) {
    sub_1013F33A4(a1);
  }
  return 1;
}

void sub_1013F33A4(uint64_t a1)
{
  aBlocuint64_t k = _NSConcreteStackBlock;
  uint64_t v2 = 3221225472;
  float v3 = sub_1013F368C;
  uint64_t v4 = &unk_102324568;
  uint64_t v5 = a1;
  operator new();
}

void sub_1013F3444()
{
}

uint64_t sub_1013F3468(uint64_t a1, int *a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023245D8);
  }
  uint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)std::string buf = 67109120;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client unregistered for notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023245D8);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTurnState::unregisterForNotificationInternal(const CLTurnState_Type::Notification &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*a2)
  {
    *(_DWORD *)std::string buf = 0;
    if (!sub_1001072EC(a1, (int *)buf, 1))
    {
      if (*(void *)(a1 + 112))
      {
        uint64_t v6 = sub_100A68CE8();
        sub_1009D26C4(v6, 0, *(void *)(a1 + 112));
        uint64_t v7 = *(void *)(a1 + 112);
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        *(void *)(a1 + 112) = 0;
      }
    }
  }
  return 1;
}

void sub_1013F368C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1013F3694(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023245B8);
      }
      float v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1023245B8);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::removeClient(int) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1013F3924(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1013F39D8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1013F3A20(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1013F3A68(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1013F3AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102478B28);
}

uint64_t sub_1013F3ADC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(_WORD *)std::string buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1013F645C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102478B29;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023245B8);
  }
  __int16 v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023245B8);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1013F3F80(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023245B8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023245B8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1013F4204(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023245B8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023245B8);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1013F45D8(uint64_t a1, int *a2, _WORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(_WORD **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  *a3 = *v11;
  return 1;
}

uint64_t sub_1013F4638(uint64_t a1, int *a2, _WORD *a3)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *((_WORD *)v6 + 12) = *a3;
  *int v6 = off_1023246E8;
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1013F46EC(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1013F4700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1013F4754(uint64_t a1, unsigned int *a2, _WORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023245B8);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v29 = v30;
    memset(v30, 0, sizeof(v30));
    long long v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = off_1023246E8;
    *((_WORD *)v18 + 12) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1013F5390();
  }
  os_activity_scope_leave(&state);
}

void sub_1013F4D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1013F4D84(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023245B8);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023245B8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023245B8);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023245B8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1023245B8);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023245B8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1013F5330(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1013F5360(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1013F5390()
{
}

void sub_1013F543C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    __int16 v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_1013F59C0(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              unint64_t v48 = v19;
              sub_1013F582C(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              unint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023245B8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023245B8);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1013F582C(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1013F59C0(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

void sub_1013F5924(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023246E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1013F5944(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023246E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1013F59A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1013F59C0(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1013F5A5C(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1013F5DE8(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1013F5A5C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1013F61A8((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102324728);
    }
    __int16 v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DB64A2 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102324728);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DB64A2 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102324728);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DB64A2 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTurnState_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1013F5DE8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102324728);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB64A2 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTurnState_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102324728);
      }
      __int16 v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DB64A2 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102324728);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1013F61A8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394820))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)2) {
      sub_101AB35D4();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1013F6230(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1013F6260(void *a1, uint64_t a2, void *aBlock)
{
  *a1 = off_10234BF80;
  *a1 = off_102324758;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = _Block_copy(aBlock);
  operator new[]();
}

void sub_1013F6310(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

void sub_1013F6328(uint64_t a1)
{
  sub_1013F63D8(a1);

  operator delete();
}

__n128 sub_1013F6360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32) + 112 * *(unsigned int *)(a1 + 40);
  long long v4 = *(_OWORD *)(a3 + 96);
  long long v6 = *(_OWORD *)(a3 + 48);
  long long v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 64) = v5;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v3 + 32) = v8;
  *(__n128 *)uint64_t v3 = result;
  unsigned int v9 = *(_DWORD *)(a1 + 44);
  unsigned int v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  if (v10 >= v9) {
    sub_1009D1BD0();
  }
  return result;
}

uint64_t sub_1013F63D8(uint64_t a1)
{
  *(void *)a1 = off_102324758;
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  _Block_release(*(const void **)(a1 + 24));
  if (*(void *)(a1 + 32)) {
    operator delete[]();
  }
  *(_DWORD *)(a1 + 44) = 0;

  return sub_1019D78CC(a1);
}

void sub_1013F645C()
{
}

uint64_t sub_1013F6508(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

float *sub_1013F6528(float **a1, int a2, float a3)
{
  long long v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    goto LABEL_14;
  }
  for (uint64_t i = v4 + 6; i != v3; i += 6)
  {
    float v6 = *i;
    float v7 = *(i - 6);
    if (v6 < v7) {
      sub_101AB3758();
    }
  }
  if (v4 == v3)
  {
LABEL_14:
    float v14 = INFINITY;
    unsigned int v9 = *a1;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v4) >> 3);
    unsigned int v9 = *a1;
    do
    {
      unint64_t v10 = v8 >> 1;
      __int16 v11 = &v9[6 * (v8 >> 1)];
      float v13 = *v11;
      unint64_t v12 = v11 + 6;
      v8 += ~(v8 >> 1);
      if (v13 < a3) {
        unsigned int v9 = v12;
      }
      else {
        unint64_t v8 = v10;
      }
    }
    while (v8);
    if (v9 == v4) {
      float v14 = INFINITY;
    }
    else {
      float v14 = vabds_f32(*(v9 - 6), a3);
    }
  }
  if (v9 == v3) {
    float v15 = INFINITY;
  }
  else {
    float v15 = vabds_f32(*v9, a3);
  }
  if (a2 < 1)
  {
    uint64_t v17 = a1[1];
LABEL_32:
    if (v17 == v3) {
      return 0;
    }
    else {
      return v17;
    }
  }
  else
  {
    __int16 v16 = v9;
    while (v16 != v3 || v9 != v4)
    {
      if (v14 >= v15)
      {
        if (v16 + 6 == v3)
        {
          float v15 = INFINITY;
          uint64_t v17 = v16;
          __int16 v16 = a1[1];
        }
        else
        {
          float v15 = vabds_f32(v16[6], a3);
          uint64_t v17 = v16;
          v16 += 6;
        }
      }
      else
      {
        uint64_t v17 = v9 - 6;
        if (v9 - 6 == v4)
        {
          float v14 = INFINITY;
          uint64_t v17 = *a1;
          unsigned int v9 = *a1;
        }
        else
        {
          float v14 = vabds_f32(*(v9 - 12), a3);
          v9 -= 6;
        }
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v9) >> 3)) >= a2) {
        goto LABEL_32;
      }
    }
    return 0;
  }
}

float *sub_1013F66BC(float **a1, unint64_t a2)
{
  return sub_1013F6528(a1, 3, (float)((float)a2 * 4.0) + 2.0);
}

float *sub_1013F6760(float **a1, uint64_t a2)
{
  for (unint64_t i = 0; i != 18; ++i)
  {
    uint64_t result = sub_1013F66BC(a1, i);
    float v7 = (unsigned char *)(a2 + i);
    v7[264] = (int)v6;
    v7[246] = (int)v6;
    v7[228] = (int)v6;
  }
  return result;
}

float *sub_1013F67BC(float **a1, uint64_t a2, double a3, double a4, double a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = (unsigned char *)(a2 + 228);
  uint64_t v9 = a2 + 196;
  float32x2_t v10 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
  float32x2_t v11 = (float32x2_t)vdup_n_s32(0x42652EE1u);
  uint64_t v59 = a2 + 228;
  do
  {
    unint64_t v12 = *a1;
    float v13 = a1[1];
    if (v13 == *a1)
    {
      int v22 = a1[1];
    }
    else
    {
      float v14 = (float)((float)(int)v7 * 4.0) + 2.0;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)*a1) >> 3);
      do
      {
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = &v12[6 * (v15 >> 1)];
        float v19 = *v17;
        __int16 v18 = v17 + 6;
        v15 += ~(v15 >> 1);
        if (v19 < (float)(v14 + -2.0)) {
          unint64_t v12 = v18;
        }
        else {
          unint64_t v15 = v16;
        }
      }
      while (v15);
      if (v13 == v12)
      {
        int v22 = a1[1];
        uint64_t v27 = v12;
        unint64_t v12 = v22;
        float v13 = v27;
      }
      else
      {
        float v20 = v14 + 2.0;
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v12) >> 3);
        int v22 = v12;
        do
        {
          unint64_t v23 = v21 >> 1;
          BOOL v24 = &v22[6 * (v21 >> 1)];
          float v26 = *v24;
          __int16 v25 = v24 + 6;
          v21 += ~(v21 >> 1);
          if (v26 > v20) {
            unint64_t v21 = v23;
          }
          else {
            int v22 = v25;
          }
        }
        while (v21);
        float v13 = v12;
      }
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v13) >> 3);
    if (v28 <= 4)
    {
      uint64_t result = sub_1013F66BC(a1, v7);
      uint64_t v31 = a2 + v7;
      *(unsigned char *)(v31 + 264) = (int)v30;
      *(unsigned char *)(v31 + 246) = (int)v30;
      *(unsigned char *)(v59 + v7) = (int)v30;
      goto LABEL_38;
    }
    float32x2_t v32 = 0;
    float32x2_t v60 = 0;
    float v61 = 0.0;
    if (v12 != v22)
    {
      float v34 = *(float *)(a2 + 220);
      float v33 = *(float *)(a2 + 224);
      float v35 = 0.0;
      while (1)
      {
        uint64_t v36 = 0;
        float v37 = *v12;
        while (1)
        {
          float v38 = *(float *)(v9 + 4 * v36);
          if ((float)(v33 + v38) > v37) {
            break;
          }
          if (++v36 == 6)
          {
            float v38 = v34;
            break;
          }
        }
        float v39 = (float)((float)(v37 - v38) / (float)(v33 + v33)) + 0.5;
        if (v39 <= 0.0) {
          break;
        }
        if (v39 >= 1.0)
        {
          uint64_t v53 = a2 + 24 * v36;
          float v49 = *(float *)(v53 + 48);
          float v50 = v37 * *(float *)(v53 + 36);
          float32x2_t v51 = *(float32x2_t *)(v53 + 28);
          float32x2_t v52 = *(float32x2_t *)(v53 + 40);
          goto LABEL_30;
        }
        float v40 = v39 * (float)(v39 * (float)((float)(v39 * -2.0) + 3.0));
        uint64_t v41 = a2 + 24 * v36;
        float v42 = (float)((float)(v37 * *(float *)(v41 + 12)) + *(float *)(v41 + 24)) * 0.017453;
        float32x2_t v43 = vmul_n_f32(*(float32x2_t *)(v41 + 28), v37);
        float v44 = (float)((float)((float)(v37 * *(float *)(v41 + 36)) + *(float *)(v41 + 48)) * 0.017453) - v42;
        float32x2_t v45 = vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v41 + 4), v37), *(float32x2_t *)(v41 + 16)), v10);
        float32x2_t v46 = vadd_f32(v45, vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(v43, *(float32x2_t *)(v41 + 40)), v10), v45), v40));
        float v47 = v42 + (float)(v40 * v44);
LABEL_31:
        float v54 = (float)(v47 * 57.296) - v12[3];
        float32x2_t v55 = vsub_f32(vmul_f32(v46, v11), *(float32x2_t *)(v12 + 1));
        float32x2_t v32 = vmla_f32(v32, v55, v55);
        float32x2_t v60 = v32;
        float v35 = v35 + (float)(v54 * v54);
        float v61 = v35;
        v12 += 6;
        if (v12 == v22) {
          goto LABEL_34;
        }
      }
      uint64_t v48 = a2 + 24 * v36;
      float v49 = *(float *)(v48 + 24);
      float v50 = v37 * *(float *)(v48 + 12);
      float32x2_t v51 = *(float32x2_t *)(v48 + 4);
      float32x2_t v52 = *(float32x2_t *)(v48 + 16);
LABEL_30:
      float32x2_t v46 = vmul_f32(vadd_f32(vmul_n_f32(v51, v37), v52), v10);
      float v47 = (float)(v50 + v49) * 0.017453;
      goto LABEL_31;
    }
    float v35 = 0.0;
LABEL_34:
    unint64_t v56 = 0;
    *(float *)&a5 = (float)v28;
    float32x2_t v60 = vdiv_f32(v32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
    float v61 = v35 / (float)v28;
    int v57 = v8;
    do
    {
      uint64_t result = (float *)sub_1004E4930((uint64_t)&v60, v56);
      float v58 = sqrtf(*result) * 100.0;
      if (v58 < 1.0) {
        float v58 = 1.0;
      }
      *int v57 = (int)v58;
      v57 += 18;
      ++v56;
    }
    while (v56 != 3);
LABEL_38:
    ++v7;
    ++v8;
  }
  while (v7 != 18);
  return result;
}

float *sub_1013F6B40@<X0>(float **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 241) = 0u;
  *(_OWORD *)(a3 + 225) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  *(_OWORD *)(a3 + 193) = 0u;
  *(_OWORD *)(a3 + 177) = 0u;
  *(_OWORD *)(a3 + 161) = 0u;
  *(_OWORD *)(a3 + 145) = 0u;
  *(_OWORD *)(a3 + 129) = 0u;
  *(_OWORD *)(a3 + 113) = 0u;
  *(_OWORD *)(a3 + 97) = 0u;
  *(_OWORD *)(a3 + 81) = 0u;
  *(_OWORD *)(a3 + 65) = 0u;
  *(_OWORD *)(a3 + 49) = 0u;
  *(_OWORD *)(a3 + 33) = 0u;
  *(_OWORD *)(a3 + 17) = 0u;
  *(_OWORD *)(a3 + 266) = 0u;
  *(_OWORD *)(a3 + 1) = 0u;
  *(_OWORD *)(a3 + 257) = 0u;
  *(unsigned char *)a3 = 22;
  uint64_t result = *a1;
  unint64_t v7 = (__n128 *)a1[1];
  if (result == (float *)v7)
  {
    *(void *)(a3 + 228) = -1;
    *(void *)(a3 + 264) = -1;
    *(void *)(a3 + 246) = -1;
    return result;
  }
  sub_1013F71E4((uint64_t)result, v7, (uint64_t)&v44, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)result) >> 3)), 1, (__n128)0);
  float v8 = **a1;
  float v9 = *(a1[1] - 6);
  float v10 = v9 - v8;
  int v43 = a2;
  if ((float)(v9 - v8) < 6.6667)
  {
    *(_DWORD *)(a3 + 224) = 1084227584;
    float v11 = 2.5;
    float v12 = 1.0;
    float v13 = 10.0;
LABEL_11:
    float v18 = (float)((float)(v8 + v9) + (float)(v12 * -10.0)) * 0.5;
    *(float *)(a3 + 196) = v18;
    unint64_t v15 = 1;
    goto LABEL_12;
  }
  float v14 = 3.4028e38;
  unint64_t v15 = 1;
  for (uint64_t i = 2; i != 7; ++i)
  {
    float v17 = fabsf((float)(v10 / (float)(i - 1)) + -10.0);
    if (v17 < v14)
    {
      float v14 = v17;
      unint64_t v15 = i;
    }
  }
  float v13 = v10 / (float)(v15 - 1);
  float v12 = v13 / 10.0;
  *(float *)(a3 + 224) = (float)(v13 / 10.0) * 5.0;
  if (v15 >= 7) {
    sub_101AB38D0();
  }
  float v11 = (float)(v12 * 0.5) * 5.0;
  if (v15 == 1) {
    goto LABEL_11;
  }
  float v18 = v8 + (float)((float)(v12 * 0.5) * -10.0);
  *(float *)(a3 + 196) = v18;
  if (!v15)
  {
    int v20 = 1;
    char v21 = 1;
    goto LABEL_16;
  }
LABEL_12:
  for (uint64_t j = 0; j != v15; ++j)
  {
    float v18 = v13 + v18;
    *(float *)(a3 + 200 + 4 * j) = v18;
  }
  int v20 = v15 + 1;
  if ((v15 + 1) > 6)
  {
LABEL_17:
    uint64_t v25 = 0;
    do
    {
      float v26 = *(float *)(a3 + 196 + 4 * v25) - v11;
      uint64_t v27 = v25 + 1;
      float v28 = v11 + *(float *)(a3 + 196 + 4 * (v25 + 1));
      float v30 = *a1;
      int v29 = a1[1];
      if (v29 == *a1)
      {
        float v37 = a1[1];
      }
      else
      {
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)*a1) >> 3);
        do
        {
          unint64_t v32 = v31 >> 1;
          float v33 = &v30[6 * (v31 >> 1)];
          float v35 = *v33;
          float v34 = v33 + 6;
          v31 += ~(v31 >> 1);
          if (v35 < v26) {
            float v30 = v34;
          }
          else {
            unint64_t v31 = v32;
          }
        }
        while (v31);
        if (v29 == v30)
        {
          float v37 = a1[1];
        }
        else
        {
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
          float v37 = v30;
          do
          {
            unint64_t v38 = v36 >> 1;
            float v39 = &v37[6 * (v36 >> 1)];
            float v41 = *v39;
            float v40 = v39 + 6;
            v36 += ~(v36 >> 1);
            if (v41 > v28) {
              unint64_t v36 = v38;
            }
            else {
              float v37 = v40;
            }
          }
          while (v36);
        }
        int v29 = v30;
      }
      sub_100AC6940(v29, v37, 0, 0, (float *)&v44);
      uint64_t v42 = a3 + 24 * v27;
      double v22 = *(double *)&v44;
      *(_OWORD *)(v42 + 4) = v44;
      *(void *)(v42 + 20) = v45;
      if (!v25) {
        sub_100AC6D74(a3 + 16, a3 + 28, v26);
      }
      if (v15 - 1 == v25) {
        sub_100AC6D74(a3 + 16 + 24 * v15 + 24, v42 + 4, v28);
      }
      ++v25;
    }
    while (v27 != v15);
    goto LABEL_39;
  }
  char v21 = 0;
LABEL_16:
  memset_pattern16((void *)(a3 + (4 * v20 + 196)), &unk_101DB6530, 4 * (6 - v20) + 4);
  if ((v21 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_39:
  if (v43) {
    return sub_1013F67BC(a1, a3, v22, v23, v24);
  }
  else {
    return sub_1013F6760(a1, a3);
  }
}

void sub_1013F6EE4(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  uint64_t v7 = 0;
  std::string __p = 0;
  float v40 = 0;
  do
  {
    for (uint64_t i = 0; i != 18; ++i)
    {
      float v9 = __p;
      float v39 = __p;
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      float v12 = 7.0;
      if (*a2 != v11)
      {
        float v13 = (float)((float)(int)i * 4.0) + 2.0;
        float v14 = v13 + -2.0;
        float v15 = v13 + 2.0;
        do
        {
          float v16 = *(float *)v10;
          if (v14 <= *(float *)v10 && v16 < v15)
          {
            float v16 = a4 - *(double *)(v10 + 16);
            float v18 = fabsf(v16);
            if (v9 >= (float *)v40)
            {
              int v20 = __p;
              uint64_t v21 = v9 - __p;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                sub_1001D7FD4();
              }
              uint64_t v23 = v40 - (char *)__p;
              if ((v40 - (char *)__p) >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                uint64_t v25 = (char *)sub_10017EA34((uint64_t)&v40, v24);
                int v20 = __p;
                float v9 = v39;
              }
              else
              {
                uint64_t v25 = 0;
              }
              float v26 = (float *)&v25[4 * v21];
              *float v26 = v18;
              float v19 = v26 + 1;
              while (v9 != v20)
              {
                float v27 = *--v9;
                float v16 = v27;
                *--float v26 = v27;
              }
              std::string __p = v26;
              float v40 = &v25[4 * v24];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              *float v9 = v18;
              float v19 = v9 + 1;
            }
            float v39 = v19;
            float v9 = v19;
          }
          v10 += 24;
        }
        while (v10 != v11);
        if (v9 != __p)
        {
          if ((unint64_t)((char *)v9 - (char *)__p) > 0xB)
          {
            float v28 = __p + 2;
            if (__p + 2 != v9) {
              sub_1004EF34C(__p, __p + 2, v9, v16);
            }
          }
          else
          {
            float v28 = v9 - 1;
          }
          float v12 = *v28 / 86400.0;
        }
      }
      uint64_t v29 = a1 + 18 * v7 + i;
      unsigned int v31 = *(unsigned __int8 *)(v29 + 228);
      float v30 = (unsigned char *)(v29 + 228);
      float v32 = (float)v31 * 0.01;
      if (a3)
      {
        if (v12 > 2.0 && v32 < 0.1) {
          float v32 = 0.1;
        }
      }
      else
      {
        int v33 = (int)v12;
        if ((int)v12 >= 6) {
          int v33 = 6;
        }
        float v32 = v32 + flt_101DB6514[v33 & ~(v33 >> 31)];
      }
      float v34 = v32 * 100.0;
      BOOL v35 = v32 <= 2.5;
      float v36 = 250.0;
      if (v35) {
        float v36 = v34;
      }
      unsigned char *v30 = (int)v36;
    }
    ++v7;
  }
  while (v7 != 3);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1013F7190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013F71B4(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1013F71E4(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
uint64_t sub_1013F76F4(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        float v6 = *(float *)(v4 + 24);
        if (v6 < *(float *)v4)
        {
          long long v10 = *(_OWORD *)(v4 + 28);
          int v11 = *(_DWORD *)(v4 + 44);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(void *)(v8 + 40) = *(void *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v6 >= *(float *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(float *)uint64_t v9 = v6;
          *(_OWORD *)(v9 + 4) = v10;
          *(_DWORD *)(v9 + 20) = v11;
        }
        uint64_t v2 = v5 + 24;
        v3 += 24;
        uint64_t v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_1013F77E0(long long *a1, long long *a2, long long *a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a3;
  if (*(float *)a2 < *(float *)a1)
  {
    if (v4 < v3)
    {
      uint64_t v5 = *((void *)a1 + 2);
      long long v6 = *a1;
      uint64_t v7 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v7;
      *a3 = v6;
      *((void *)a3 + 2) = v5;
      return 1;
    }
    uint64_t v14 = *((void *)a1 + 2);
    long long v15 = *a1;
    uint64_t v16 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v16;
    *a2 = v15;
    *((void *)a2 + 2) = v14;
    if (*(float *)a3 >= *(float *)a2) {
      return 1;
    }
    uint64_t v17 = *((void *)a2 + 2);
    long long v18 = *a2;
    uint64_t v19 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v19;
    *a3 = v18;
    *((void *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *((void *)a2 + 2);
    long long v9 = *a2;
    uint64_t v10 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v10;
    *a3 = v9;
    *((void *)a3 + 2) = v8;
    if (*(float *)a2 >= *(float *)a1) {
      return 1;
    }
    uint64_t v11 = *((void *)a1 + 2);
    long long v12 = *a1;
    uint64_t v13 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v13;
    *a2 = v12;
    *((void *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

float *sub_1013F78EC(float *a1, float *a2)
{
  float v2 = *a1;
  long long v14 = *(_OWORD *)(a1 + 1);
  int v15 = *((_DWORD *)a1 + 5);
  if (*a1 >= *(a2 - 6))
  {
    uint64_t v5 = (long long *)(a1 + 6);
    do
    {
      float v3 = (float *)v5;
      if (v5 >= (long long *)a2) {
        break;
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v2 >= *v3);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[6];
      v3 += 6;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      float v6 = *(a2 - 6);
      a2 -= 6;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    uint64_t v13 = *((void *)v3 + 2);
    long long v12 = *(_OWORD *)v3;
    long long v7 = *(_OWORD *)a2;
    *((void *)v3 + 2) = *((void *)a2 + 2);
    *(_OWORD *)float v3 = v7;
    *((void *)a2 + 2) = v13;
    *(_OWORD *)a2 = v12;
    do
    {
      float v8 = v3[6];
      v3 += 6;
    }
    while (v2 >= v8);
    do
    {
      float v9 = *(a2 - 6);
      a2 -= 6;
    }
    while (v2 < v9);
  }
  if (v3 - 6 != a1)
  {
    long long v10 = *(_OWORD *)(v3 - 6);
    *((void *)a1 + 2) = *((void *)v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 6) = v2;
  *((_DWORD *)v3 - 1) = v15;
  *(_OWORD *)(v3 - 5) = v14;
  return v3;
}

uint64_t sub_1013F7A24(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  float v3 = *(float *)a1;
  long long v17 = *(_OWORD *)(a1 + 4);
  int v18 = *(_DWORD *)(a1 + 20);
  do
  {
    float v4 = *(float *)(a1 + v2 + 24);
    v2 += 24;
  }
  while (v4 < v3);
  unint64_t v5 = a1 + v2;
  if (v2 == 24)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v7 = *(float *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      float v6 = *(float *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  float v8 = (long long *)(a1 + v2);
  if (v5 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      long long v10 = *v8;
      uint64_t v11 = *((void *)v8 + 2);
      uint64_t v12 = *(void *)(v9 + 16);
      *float v8 = *(_OWORD *)v9;
      *((void *)v8 + 2) = v12;
      *(void *)(v9 + 16) = v11;
      *(_OWORD *)unint64_t v9 = v10;
      do
      {
        float v13 = *((float *)v8 + 6);
        float v8 = (long long *)((char *)v8 + 24);
      }
      while (v13 < v3);
      do
      {
        float v14 = *(float *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if ((long long *)((char *)v8 - 24) != (long long *)a1)
  {
    long long v15 = *(long long *)((char *)v8 - 24);
    *(void *)(a1 + 16) = *((void *)v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *((float *)v8 - 6) = v3;
  *((_DWORD *)v8 - 1) = v18;
  *(long long *)((char *)v8 - 20) = v17;
  return (uint64_t)v8 - 24;
}

BOOL sub_1013F7B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = (long long *)(a2 - 24);
      if (*(float *)(a2 - 24) < *(float *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *float v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1013F77E0((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1013F7D74(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_1013F7E48((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      long long v10 = (float *)(a1 + 48);
      sub_1013F77E0((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)v11;
    if (*(float *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 4);
      int v19 = *(_DWORD *)(v11 + 20);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(float *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(float *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 4) = v18;
      *(_DWORD *)(v17 + 20) = v19;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (float *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1013F7D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1013F77E0((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 < *(float *)a3)
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    result.n128_u32[0] = *(_DWORD *)a3;
    if (*(float *)a3 < *(float *)a2)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u32[0] = *(_DWORD *)a2;
      if (*(float *)a2 < *(float *)a1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 sub_1013F7E48(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result = sub_1013F7D74((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u32[0] = a5->n128_u32[0];
  if (a5->n128_f32[0] < a4->n128_f32[0])
  {
    unint64_t v11 = a4[1].n128_u64[0];
    __n128 result = *a4;
    unint64_t v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    result.n128_u32[0] = a4->n128_u32[0];
    if (a4->n128_f32[0] < a3->n128_f32[0])
    {
      unint64_t v13 = a3[1].n128_u64[0];
      __n128 result = *a3;
      unint64_t v14 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      result.n128_u32[0] = a3->n128_u32[0];
      if (a3->n128_f32[0] < a2->n128_f32[0])
      {
        unint64_t v15 = a2[1].n128_u64[0];
        __n128 result = *a2;
        unint64_t v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u32[0] = a2->n128_u32[0];
        if (a2->n128_f32[0] < a1->n128_f32[0])
        {
          unint64_t v17 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1013F7F58(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      unint64_t v13 = (long long *)(a1 + 24 * v11);
      do
      {
        a5 = sub_1013F8174(a1, a5, a4, v10, v13);
        unint64_t v13 = (long long *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    unint64_t v14 = v7;
    if (v7 != a3)
    {
      unint64_t v15 = v7;
      do
      {
        if (v15->n128_f32[0] < *(float *)a1)
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = *(void *)(a1 + 16);
          __n128 *v15 = *(__n128 *)a1;
          v15[1].n128_u64[0] = v18;
          *(__n128 *)a1 = v17;
          *(void *)(a1 + 16) = v16;
          sub_1013F8174(a1, v17, a4, v10, (long long *)a1);
        }
        unint64_t v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      unint64_t v14 = a3;
    }
    if (v9 >= 25)
    {
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        uint64_t v20 = 0;
        __n128 v29 = *(__n128 *)a1;
        unint64_t v30 = *(void *)(a1 + 16);
        uint64_t v21 = a1;
        do
        {
          uint64_t v22 = v21;
          v21 += 24 * v20 + 24;
          uint64_t v23 = 2 * v20;
          uint64_t v20 = (2 * v20) | 1;
          int64_t v24 = v23 + 2;
          if (v24 < v19 && *(float *)v21 < *(float *)(v21 + 24))
          {
            v21 += 24;
            uint64_t v20 = v24;
          }
          long long v25 = *(_OWORD *)v21;
          *(void *)(v22 + 16) = *(void *)(v21 + 16);
          *(_OWORD *)uint64_t v22 = v25;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        uint64_t v7 = (__n128 *)((char *)v7 - 24);
        if ((__n128 *)v21 == v7)
        {
          *(void *)(v21 + 16) = v30;
          *(__n128 *)uint64_t v21 = v29;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v21 + 16) = v7[1].n128_u64[0];
          *(__n128 *)uint64_t v21 = v26;
          __n128 *v7 = v29;
          v7[1].n128_u64[0] = v30;
          sub_1013F82C0(a1, v21 + 24, v29, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 sub_1013F8174(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, long long *a5)
{
  if (a4 >= 2)
  {
    int64_t v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - a1) >> 3)))
    {
      uint64_t v6 = (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3)) | 1;
      uint64_t v7 = (long long *)(a1 + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2 < a4 && *(float *)v7 < *((float *)v7 + 6))
      {
        uint64_t v7 = (long long *)((char *)v7 + 24);
        uint64_t v6 = 0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u32[0] = *(_DWORD *)a5;
      if (*(float *)v7 >= *(float *)a5)
      {
        __n128 v12 = *(__n128 *)((char *)a5 + 4);
        int v13 = *((_DWORD *)a5 + 5);
        do
        {
          long long v8 = a5;
          a5 = v7;
          long long v9 = *v7;
          *((void *)v8 + 2) = *((void *)v7 + 2);
          *long long v8 = v9;
          if (v5 < v6) {
            break;
          }
          uint64_t v10 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (long long *)(a1 + 24 * v6);
          uint64_t v11 = v10 + 2;
          if (v11 < a4 && *(float *)v7 < *((float *)v7 + 6))
          {
            uint64_t v7 = (long long *)((char *)v7 + 24);
            uint64_t v6 = v11;
          }
        }
        while (*(float *)v7 >= result.n128_f32[0]);
        *(_DWORD *)a5 = result.n128_u32[0];
        __n128 result = v12;
        *((_DWORD *)a5 + 5) = v13;
        *(long long *)((char *)a5 + 4) = (__int128)v12;
      }
    }
  }
  return result;
}

__n128 sub_1013F82C0(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 - 2;
  if (a5 >= 2)
  {
    unint64_t v6 = v5 >> 1;
    uint64_t v7 = (long long *)(a1 + 24 * (v5 >> 1));
    long long v8 = (long long *)(a2 - 24);
    result.n128_u32[0] = *(_DWORD *)(a2 - 24);
    if (*(float *)v7 < result.n128_f32[0])
    {
      __n128 v11 = *(__n128 *)(a2 - 20);
      int v12 = *(_DWORD *)(a2 - 4);
      do
      {
        long long v9 = v8;
        long long v8 = v7;
        long long v10 = *v7;
        *((void *)v9 + 2) = *((void *)v7 + 2);
        *long long v9 = v10;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (long long *)(a1 + 24 * v6);
      }
      while (*(float *)v7 < result.n128_f32[0]);
      *(_DWORD *)long long v8 = result.n128_u32[0];
      __n128 result = v11;
      *(long long *)((char *)v8 + 4) = (__int128)v11;
      *((_DWORD *)v8 + 5) = v12;
    }
  }
  return result;
}

BOOL sub_1013F838C()
{
  uint64_t v2 = *(NSObject **)(v0 + 184);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1013F83A8(uint64_t a1)
{
  if (!*(void *)(a1 + 136)) {
    return 0;
  }
  __chkstk_darwin(a1);
  if (feof(*(FILE **)(v2 + 136))) {
    return 0;
  }
  unsigned int v4 = 0;
  while (1)
  {
    char v25 = 0;
    if (fread(&v25, 1uLL, 1uLL, *(FILE **)(a1 + 136)) != 1) {
      return 0;
    }
    if (v25 != 67) {
      goto LABEL_13;
    }
    *(unsigned char *)a1 = 67;
    if (fread((void *)(a1 + 1), 1uLL, 4uLL, *(FILE **)(a1 + 136)) != 4) {
      return 0;
    }
    v5.i32[0] = *(_DWORD *)a1;
    if (vmovn_s16((int16x8_t)vmovl_u8(v5)).u32[0] == 1163086915 && *(unsigned char *)(a1 + 4) == 70) {
      break;
    }
    if (fseek(*(FILE **)(a1 + 136), -4, 1))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023247F8);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,fseek returned non-zero", (uint8_t *)&v32, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v32, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023247F8);
        }
        LOWORD(v26) = 0;
LABEL_125:
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLCoarseSignalEnvironmentDataManager::readSignalEnvHelper(SignalEnvironment &)", "%s\n", v23);
        if (v23 != (char *)&v32) {
          free(v23);
        }
        return 0;
      }
      return 0;
    }
LABEL_13:
    int v6 = feof(*(FILE **)(a1 + 136));
    BOOL result = 0;
    if (!v6 && v4++ < 0x1FF) {
      continue;
    }
    return result;
  }
  if (fread((void *)(a1 + 5), 1uLL, 0x63uLL, *(FILE **)(a1 + 136)) == 99)
  {
    if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
    {
      *(unsigned char *)(a1 + 104) = v24[0];
      if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
      {
        *(unsigned char *)(a1 + 105) = v24[0];
        if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
        {
          *(unsigned char *)(a1 + 106) = v24[0];
          if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
          {
            *(unsigned char *)(a1 + 107) = v24[0];
            if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
            {
              float v8 = COERCE_FLOAT(bswap32(v24[0]));
              *(float *)(a1 + 108) = v8;
              if (fabs(v8 + -0.05) <= 0.0001)
              {
                if (fread(v24, 1uLL, 8uLL, *(FILE **)(a1 + 136)) == 8)
                {
                  *(void *)(a1 + 112) = bswap64(v24[0]);
                  if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                  {
                    *(_DWORD *)(a1 + 120) = bswap32(v24[0]);
                    if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                    {
                      *(_DWORD *)(a1 + 124) = bswap32(v24[0]);
                      if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                      {
                        *(_DWORD *)(a1 + 128) = bswap32(v24[0]);
                        return 1;
                      }
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023247F8);
                      }
                      uint64_t v22 = qword_1024193D8;
                      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                      {
                        LOWORD(v32) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - crc", (uint8_t *)&v32, 2u);
                      }
                      BOOL result = sub_10013D1A0(115, 2);
                      if (result)
                      {
                        bzero(&v32, 0x65CuLL);
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1023247F8);
                        }
                        LOWORD(v26) = 0;
                        goto LABEL_125;
                      }
                    }
                    else
                    {
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023247F8);
                      }
                      uint64_t v21 = qword_1024193D8;
                      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                      {
                        LOWORD(v32) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - data size", (uint8_t *)&v32, 2u);
                      }
                      BOOL result = sub_10013D1A0(115, 2);
                      if (result)
                      {
                        bzero(&v32, 0x65CuLL);
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1023247F8);
                        }
                        LOWORD(v26) = 0;
                        goto LABEL_125;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1023247F8);
                    }
                    uint64_t v20 = qword_1024193D8;
                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                    {
                      LOWORD(v32) = 0;
                      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - expiration age", (uint8_t *)&v32, 2u);
                    }
                    BOOL result = sub_10013D1A0(115, 2);
                    if (result)
                    {
                      bzero(&v32, 0x65CuLL);
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023247F8);
                      }
                      LOWORD(v26) = 0;
                      goto LABEL_125;
                    }
                  }
                }
                else
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023247F8);
                  }
                  int64_t v19 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v32) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - timestamp", (uint8_t *)&v32, 2u);
                  }
                  BOOL result = sub_10013D1A0(115, 2);
                  if (result)
                  {
                    bzero(&v32, 0x65CuLL);
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1023247F8);
                    }
                    LOWORD(v26) = 0;
                    goto LABEL_125;
                  }
                }
              }
              else
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023247F8);
                }
                long long v9 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                {
                  double v10 = *(float *)(a1 + 108);
                  int v32 = 134349568;
                  uint64_t v33 = 0x3FA999999999999ALL;
                  __int16 v34 = 2050;
                  uint64_t v35 = 0x3FA999999999999ALL;
                  __int16 v36 = 2050;
                  double v37 = v10;
                  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,coarse signal environment file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed", (uint8_t *)&v32, 0x20u);
                }
                BOOL result = sub_10013D1A0(115, 2);
                if (result)
                {
                  bzero(&v32, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023247F8);
                  }
                  double v11 = *(float *)(a1 + 108);
                  int v26 = 134349568;
                  uint64_t v27 = 0x3FA999999999999ALL;
                  __int16 v28 = 2050;
                  uint64_t v29 = 0x3FA999999999999ALL;
                  __int16 v30 = 2050;
                  double v31 = v11;
                  goto LABEL_125;
                }
              }
            }
            else
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023247F8);
              }
              unint64_t v18 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
              {
                LOWORD(v32) = 0;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - binsize", (uint8_t *)&v32, 2u);
              }
              BOOL result = sub_10013D1A0(115, 2);
              if (result)
              {
                bzero(&v32, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023247F8);
                }
                LOWORD(v26) = 0;
                goto LABEL_125;
              }
            }
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023247F8);
            }
            __n128 v17 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
            {
              LOWORD(v32) = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - maxLat", (uint8_t *)&v32, 2u);
            }
            BOOL result = sub_10013D1A0(115, 2);
            if (result)
            {
              bzero(&v32, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023247F8);
              }
              LOWORD(v26) = 0;
              goto LABEL_125;
            }
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023247F8);
          }
          unint64_t v16 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v32) = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - minLat", (uint8_t *)&v32, 2u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (result)
          {
            bzero(&v32, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023247F8);
            }
            LOWORD(v26) = 0;
            goto LABEL_125;
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023247F8);
        }
        unint64_t v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v32) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - headerLength", (uint8_t *)&v32, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(&v32, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023247F8);
          }
          LOWORD(v26) = 0;
          goto LABEL_125;
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023247F8);
      }
      unint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - version", (uint8_t *)&v32, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(&v32, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023247F8);
        }
        LOWORD(v26) = 0;
        goto LABEL_125;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023247F8);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v32) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - header string", (uint8_t *)&v32, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(&v32, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023247F8);
      }
      LOWORD(v26) = 0;
      goto LABEL_125;
    }
  }
  return result;
}

void sub_1013F91B4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1013F91E4(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 448; i += 64)
  {
    uint64_t v3 = result + i;
    *(void *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 16) = 0uLL;
    *(_OWORD *)(v3 + 32) = 0uLL;
    *(_OWORD *)(v3 + 41) = 0uLL;
  }
  uint64_t v4 = 0;
  *(void *)(result + 448) = a2;
  uint8x8_t v5 = &qword_101DB6580;
  do
  {
    uint64_t v6 = result + v4;
    *(_DWORD *)(v6 + 8) = 0;
    *(_OWORD *)(v6 + 16) = 0uLL;
    *(_OWORD *)(v6 + 32) = 0uLL;
    *(_OWORD *)(v6 + 41) = 0uLL;
    uint64_t v7 = *v5++;
    *(void *)uint64_t v6 = v7;
    *(_OWORD *)(v6 + 40) = xmmword_101DB6570;
    v4 += 64;
  }
  while (v4 != 448);
  return result;
}

double sub_1013F9258(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3) {
    return 0.0;
  }
  uint64_t v3 = (int *)(*a2 + 8);
  double result = 0.0;
  double v5 = 0.0;
  do
  {
    uint64_t v6 = *v3;
    v3 += 6;
    uint64_t v7 = a1 + (v6 << 6);
    if (*(unsigned char *)(v7 + 56)) {
      float v8 = (double *)(v7 + 32);
    }
    else {
      float v8 = (double *)v7;
    }
    double result = result + *v8;
    double v5 = v5 + *(double *)(v7 + 48);
    --a3;
  }
  while (a3);
  return result;
}

double sub_1013F92AC(uint64_t a1, double a2)
{
  double v7 = a2;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 448) + 64))(&__p);
  double v3 = sub_1013F9258(a1, &__p, 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  return v3;
}

double sub_1013F9354(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + ((uint64_t)a2 << 6);
  if (*(unsigned char *)(v2 + 56)) {
    uint64_t v3 = v2 + 32;
  }
  else {
    uint64_t v3 = a1 + ((uint64_t)a2 << 6);
  }
  return *(double *)v3;
}

void sub_1013F9378(uint64_t a1, int a2)
{
  if (a2 == 6)
  {
    *(void *)(a1 + 384) = 0;
    *(_DWORD *)(a1 + 392) = 0;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 425) = 0u;
  }
  else
  {
    (*(void (**)(double **__return_ptr))(**(void **)(a1 + 448) + 16))(&v11);
    uint64_t v4 = v11;
    double v5 = v12;
    if (v11 == v12)
    {
      int v6 = 0;
      double v7 = 0.0;
    }
    else
    {
      int v6 = 0;
      double v7 = 0.0;
      float v8 = v11;
      do
      {
        double v7 = v7 + *v8;
        v6 += *((_DWORD *)v8 + 2);
        v8 += 2;
      }
      while (v8 != v12);
    }
    uint64_t v9 = a1 + ((uint64_t)a2 << 6);
    *(_DWORD *)(v9 + 24) = v6;
    *(double *)(v9 + 16) = v7;
    if (v6 <= 0) {
      double v10 = *(double *)&qword_101DB6580[a2];
    }
    else {
      double v10 = v7 / (double)v6;
    }
    *(double *)uint64_t v9 = v10;
    *(_DWORD *)(a1 + ((uint64_t)a2 << 6) + 8) = (unint64_t)((char *)v5 - (char *)v4) >> 4;
    if (v4)
    {
      int v12 = v4;
      operator delete(v4);
    }
  }
}

uint64_t sub_1013F9488(uint64_t result, int a2)
{
  uint64_t v2 = 0;
  double v3 = 0.0;
  double v4 = 0.0;
  do
  {
    double v5 = (double *)((char *)&unk_101DB65B8 + v2);
    if (*(_DWORD *)((char *)&unk_101DB65B8 + v2 + 4) == a2)
    {
      uint64_t v6 = result + ((uint64_t)*(int *)v5 << 6);
      double v7 = *(double *)v6;
      LODWORD(v6) = *(_DWORD *)(v6 + 8);
      double v8 = (double)(int)v6;
      double v9 = v5[2] + v5[1] * v7;
      if ((int)v6 <= 1) {
        double v8 = 0.0;
      }
      double v3 = v3 + v9 * v8;
      double v4 = v4 + v8;
    }
    v2 += 24;
  }
  while (v2 != 288);
  if (v4 >= 2.0)
  {
    uint64_t v10 = result + ((uint64_t)a2 << 6);
    *(double *)(v10 + 32) = v3 / v4;
    *(_DWORD *)(v10 + 28) = (int)v4;
  }
  return result;
}

void sub_1013F9510(_OWORD *a1)
{
  uint64_t v2 = 0;
  double v3 = qword_101DB6580;
  do
  {
    double v4 = &a1[v2];
    *((_DWORD *)v4 + 2) = 0;
    v4[1] = 0uLL;
    _DWORD v4[2] = 0uLL;
    *(_OWORD *)((char *)v4 + 41) = 0uLL;
    uint64_t v5 = *(void *)v3++;
    *(void *)double v4 = v5;
    *(_OWORD *)((char *)v4 + 40) = xmmword_101DB6570;
    v2 += 4;
  }
  while (v2 != 28);
  for (uint64_t i = 0; i != 7; ++i)
    sub_1013F9378((uint64_t)a1, i);
  for (uint64_t j = 0; j != 4; ++j)
  {
    int v8 = dword_101DB66D8[j];
    sub_1013F9488((uint64_t)a1, v8);
    double v9 = (int *)&a1[4 * (uint64_t)v8];
    BOOL v10 = v9[7] >= 2 && v9[2] < 2;
    *((unsigned char *)v9 + 56) = v10;
  }
  uint64_t v11 = 0;
  long long v12 = a1[21];
  *a1 = a1[20];
  a1[1] = v12;
  a1[2] = a1[22];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a1 + 361);
  do
    sub_1013F9620((uint64_t)a1, v11++);
  while (v11 != 7);
}

double sub_1013F9620(uint64_t a1, int a2)
{
  double result = 0.0;
  uint64_t v3 = a1 + ((uint64_t)a2 << 6);
  *(_OWORD *)(v3 + 40) = xmmword_101DB6570;
  uint64_t v4 = v3 + 40;
  if (*(unsigned char *)(v4 + 16))
  {
    uint64_t v5 = 0;
    while (dword_101DB6B98[v5] != a2)
    {
      v5 += 6;
      if (v5 == 24) {
        return result;
      }
    }
    int v8 = &dword_101DB6B98[v5];
    *(void *)uint64_t v4 = *((void *)v8 + 1);
    double v9 = (double *)(v8 + 4);
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      if (dword_101DB66E8[v6] == a2)
      {
        unint64_t v7 = *(int *)(a1 + ((uint64_t)a2 << 6) + 8);
        if (*(void *)&dword_101DB66E8[v6 + 2] <= v7 && *(void *)&dword_101DB66E8[v6 + 4] > v7) {
          break;
        }
      }
      v6 += 10;
      if (v6 == 300) {
        return result;
      }
    }
    BOOL v10 = &dword_101DB66E8[v6];
    *(void *)uint64_t v4 = *((void *)v10 + 3);
    double v9 = (double *)(v10 + 8);
  }
  double result = *v9;
  *(double *)(v4 + 8) = *v9;
  return result;
}

void sub_1013F99A0(void *a1, unint64_t *a2, double a3)
{
  double v38 = a3;
  uint64_t v5 = a1[5];
  if (!v5)
  {
    sub_1013FA224(a1, a2, (unint64_t *)&v38);
    return;
  }
  unint64_t v7 = v5 + a1[4] - 1;
  uint64_t v8 = *(void *)(a1[1] + 8 * (v7 / 0xAA));
  unint64_t v9 = v7 % 0xAA;
  if (!sub_100B39178((void *)(v8 + 24 * (v7 % 0xAA)), a2))
  {
    uint64_t v10 = v8 + 24 * v9;
    double v12 = *(double *)(v10 + 8);
    uint64_t v11 = (std::string::size_type *)(v10 + 8);
    double v13 = v12;
    if (v12 <= a3)
    {
      *(double *)(v8 + 24 * v9 + 16) = a3;
      if (qword_1024193A0 != -1)
      {
        double v37 = v13;
        dispatch_once(&qword_1024193A0, &stru_102324818);
        double v13 = v37;
      }
      double v21 = a3 - v13;
      uint64_t v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100B39278(&buf);
        uint64_t v23 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "AssociatedApHistory, previous associated AP %{private}s lasted for %{private}.1fs", (uint8_t *)&__p, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102324818);
        }
        sub_100B39278(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(v39.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        WORD2(v39.__r_.__value_.__r.__words[1]) = 2049;
        *(double *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = v21;
        __int16 v34 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAssociatedApHistory::receiveAssociatedApNotification(const CLMacAddress &, const CFAbsoluteTime)", "%s\n", (const char *)v34);
        if (v34 != &buf) {
          free(v34);
        }
      }
      goto LABEL_55;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102324818);
    }
    unint64_t v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      double v15 = *(double *)v11;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = a3;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "AssociatedApHistory, warning, timestamp out of order, given timestamp %{private}.4f is less than last interval start timestamp, %{private}.4f", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102324818);
      }
      std::string::size_type v31 = *v11;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = a3;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v31;
      int v32 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAssociatedApHistory::receiveAssociatedApNotification(const CLMacAddress &, const CFAbsoluteTime)", "%s\n", (const char *)v32);
      if (v32 != &buf) {
        free(v32);
      }
    }
    double v16 = *(double *)v11 - a3;
    if (v16 < 300.0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102324818);
      }
      __n128 v17 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        sub_100B39278(&__p);
        unint64_t v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
        uint64_t v43 = 0x4072C00000000000;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "AssociatedApHistory, ignoring associated AP %{private}s as delta %{private}.1f is less than %{private}.1f", (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102324818);
        }
        sub_100B39278(&v39);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v19 = &v39;
        }
        else {
          int64_t v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v16;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
        uint64_t v41 = 0x4072C00000000000;
        uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAssociatedApHistory::receiveAssociatedApNotification(const CLMacAddress &, const CFAbsoluteTime)", "%s\n", (const char *)v20);
        if (v20 != &buf) {
          free(v20);
        }
      }
      return;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102324818);
    }
    int64_t v24 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      sub_100B39278(&__p);
      char v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
      uint64_t v43 = 0x4072C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "AssociatedApHistory, resetting history and adding associated AP %{private}s as delta %{private}.1f is no less than %{private}.1f", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102324818);
      }
      sub_100B39278(&v39);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v39;
      }
      else {
        uint64_t v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v16;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      uint64_t v41 = 0x4072C00000000000;
      __int16 v36 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAssociatedApHistory::receiveAssociatedApNotification(const CLMacAddress &, const CFAbsoluteTime)", "%s\n", (const char *)v36);
      if (v36 != &buf) {
        free(v36);
      }
    }
    int v26 = (void **)a1[1];
    uint64_t v27 = a1[2];
    a1[5] = 0;
    unint64_t v28 = v27 - (void)v26;
    if (v28 >= 0x11)
    {
      do
      {
        operator delete(*v26);
        uint64_t v29 = a1[2];
        int v26 = (void **)(a1[1] + 8);
        a1[1] = v26;
        unint64_t v28 = v29 - (void)v26;
      }
      while (v28 > 0x10);
    }
    if (v28 >> 3 == 1)
    {
      uint64_t v30 = 85;
    }
    else
    {
      if (v28 >> 3 != 2)
      {
LABEL_55:
        sub_1013FA224(a1, a2, (unint64_t *)&v38);
        return;
      }
      uint64_t v30 = 170;
    }
    a1[4] = v30;
    goto LABEL_55;
  }
}

void sub_1013FA224(void *a1, unint64_t *a2, unint64_t *a3)
{
  sub_100B39108();
  v7.n128_u64[0] = *a2;
  v7.n128_u64[1] = *a3;
  uint64_t v8 = 0x7FEFFFFFFFFFFFFFLL;
  sub_1013FA378(a1, &v7);
  unint64_t v6 = a1[5];
  if (v6 >= 0x15)
  {
    do
    {
      ++a1[4];
      a1[5] = v6 - 1;
      sub_10041FD7C((uint64_t)a1, 1);
      unint64_t v6 = a1[5];
    }
    while (v6 > 0x14);
  }
}

void sub_1013FA2B8(void *a1, double a2)
{
}

uint64_t sub_1013FA2C4(void *a1, double *a2)
{
  uint64_t v2 = a1[1];
  if (a1[2] == v2
    || (unint64_t v3 = a1[4],
        uint64_t v4 = (double *)(*(void *)(v2 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA)),
        unint64_t v5 = *(void *)(v2 + 8 * ((a1[5] + v3) / 0xAA)) + 24 * ((a1[5] + v3) % 0xAA),
        v4 == (double *)v5))
  {
    uint64_t v4 = (double *)&qword_102487960;
  }
  else
  {
    unint64_t v6 = (void *)(v2 + 8 * (v3 / 0xAA));
    double v7 = *a2;
    do
    {
      if (v7 < v4[1]) {
        break;
      }
      if (v7 < v4[2]) {
        return *(void *)v4;
      }
      v4 += 3;
      if ((double *)((char *)v4 - *v6) == (double *)4080)
      {
        uint64_t v8 = (double *)v6[1];
        ++v6;
        uint64_t v4 = v8;
      }
    }
    while (v4 != (double *)v5);
    uint64_t v4 = (double *)&qword_102487960;
  }
  return *(void *)v4;
}

__n128 sub_1013FA378(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1013FA458(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_1013FA428(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1013FA458(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float32x2_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float32x2_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1013FA724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1013FA770()
{
  uint64_t result = sub_100B39108();
  qword_102487960 = result;
  return result;
}

void sub_1013FA7D4(id a1)
{
  qword_102487968 = (uint64_t)objc_alloc_init((Class)CLPMeta);
  uint64_t v1 = sub_100103240();
  sub_10073B1A4(v1, (uint64_t)__p);
  if (v7 >= 0) {
    unint64_t v2 = (char *)__p;
  }
  else {
    unint64_t v2 = (char *)__p[0];
  }
  CFStringRef v3 = sub_1000B73E0(v2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  [(id)qword_102487968 setProductId:v3];
  CFRelease(v3);
  sub_100103240();
  sub_10073ADA8((uint64_t)__p);
  if (v7 >= 0) {
    unint64_t v4 = (char *)__p;
  }
  else {
    unint64_t v4 = (char *)__p[0];
  }
  CFStringRef v5 = sub_1000B73E0(v4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  [(id)qword_102487968 setSoftwareVersion:v5];
  CFRelease(v5);
}

void sub_1013FA8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1013FB07C(unsigned int a1)
{
  if (a1 >= 0xF) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = a1;
  }
  return dbl_101DB6BF8[v1];
}

double sub_1013FB098(unsigned int a1)
{
  if (a1 >= 0xF) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = a1;
  }
  return dbl_101DB6C78[v1];
}

void sub_1013FB0B4(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1000C571C(v3, a2);
    char v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1013FB168(uint64_t a1, void *a2)
{
  *(void *)a1 = off_102324868;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 30) = 0;
  sub_100134750((void *)(a1 + 64), "clhrseavl.avl");
  *(unsigned char *)(a1 + 88) = 0;
  sub_100513074(a1 + 96, "clhrse", 1, 1);
  sub_1005C3A50(a1 + 112, a2, (uint64_t)sub_1013FB4B0, a1);
}

void sub_1013FB3D0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 799) < 0) {
    operator delete(*v8);
  }
  sub_1013FC1E8(v7);
  if (*(char *)(v2 + 439) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 415) < 0) {
    operator delete(*v5);
  }
  uint64_t v10 = *(void *)(v2 + 368);
  *(void *)(v2 + 368) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_1005C3B7C(v4);
  sub_10051310C(v3);
  sub_10105704C(v1);
  _Unwind_Resume(a1);
}

void sub_1013FB4B0(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 360), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324888);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324888);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_1014014AC(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013FB66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013FB68C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 360), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324888);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHighResolutionSignalEnvironmentDataManager::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324888);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHighResolutionSignalEnvironmentDataManager::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101403B20(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1013FB848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1013FB868(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 439) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 416), *(void *)(a1 + 424));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 416);
    uint64_t v33 = *(void *)(a1 + 432);
  }
  sub_101065BB0(&v31);
  sub_1000C7F88(buf);
  BOOL v4 = sub_1004D1284(*(uint64_t *)buf, "HrseTilesServerUrl", &v31);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HRSE, server, %{public}s, overridden, 1", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v7 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
LABEL_89:
      *(_DWORD *)__int16 v34 = 136446210;
      *(void *)&v34[4] = v7;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      char v9 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "HRSE, server, %{public}s, overridden, 0", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v7 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      goto LABEL_89;
    }
  }
  std::string::append(&v31, "/");
  if (v33 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v11 = HIBYTE(v33);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v31, (const std::string::value_type *)v10, v11);
  __int16 v12 = (char *)sub_1000A6958();
  sub_1000A5670(v12, (uint64_t)&v30);
  if (v33 >= 0) {
    int v13 = __p;
  }
  else {
    int v13 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v14 = HIBYTE(v33);
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  std::string::append(&v30, (const std::string::value_type *)v13, v14);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  uint64_t v15 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v17;
    __int16 v40 = 2050;
    uint64_t v41 = 0x40AC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "HRSE,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v23 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    uint64_t v24 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int16 v34 = 136446722;
    *(void *)&v34[4] = v23;
    __int16 v35 = 2082;
    uint64_t v36 = v24;
    __int16 v37 = 2050;
    uint64_t v38 = 0x40AC200000000000;
    unint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v25);
    if (v25 != buf) {
      free(v25);
    }
  }
  *(void *)(a1 + 808) = *a2;
  *(void *)__int16 v34 = 0x404E000000000000;
  __int16 v18 = (double *)(a1 + 112);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v31;
  }
  else {
    uint64_t v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v20 = &v30;
  }
  else {
    int64_t v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (sub_1005C653C((uint64_t)v18, (const std::string::value_type *)v19, (const std::string::value_type *)v20, (double *)v34))
  {
    *(void *)std::string buf = sub_10140365C();
    v29[0] = sub_101403198();
    if (sub_1005C6BBC((uint64_t)v18, (double *)buf, v29))
    {
      *(double *)std::string buf = *(double *)a2 + 3600.0 + -0.5;
      sub_1005C6FFC(v18, (double *)buf);
      goto LABEL_66;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Warning,HRSE,downloadAvailabilityFile,could not setUpdateSource AVL file updater", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      LOWORD(v29[0]) = 0;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  unint64_t v22 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#Warning,HRSE,downloadAvailabilityFile,could not setUpdateRate AVl file updater", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(v29[0]) = 0;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v26);
    if (v26 != buf) {
      free(v26);
    }
  }
LABEL_66:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1013FC154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013FC1E8(uint64_t a1)
{
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1013FC230(uint64_t a1)
{
  *(void *)a1 = off_102324868;

  *(void *)(a1 + 384) = 0;
  sub_1013FC340(a1);
  if (*(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*(void **)(a1 + 744));
  }
  uint64_t v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(void *)(a1 + 704) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  uint64_t v3 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1005C3B7C(a1 + 112);
  sub_10051310C(a1 + 96);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  sub_1003B2350((void *)(a1 + 8));
  return a1;
}

uint64_t sub_1013FC340(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 16))(a1 + 96);
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 584) = 0u;
  *(void *)(v2 + 608) = *(void *)(v2 + 600);
  *(void *)(v2 + 624) = 0;
  *(void *)(v2 + 640) = 0;
  *(void *)(v2 + 632) = 0;
  if (*(char *)(v2 + 671) < 0)
  {
    **(unsigned char **)(a1 + 744) = 0;
    *(void *)(a1 + 752) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 744) = 0;
    *(unsigned char *)(a1 + 767) = 0;
  }
  *(unsigned char *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  if (*(char *)(a1 + 799) < 0)
  {
    **(unsigned char **)(a1 + 776) = 0;
    *(void *)(a1 + 784) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 776) = 0;
    *(unsigned char *)(a1 + 799) = 0;
  }
  sub_1005C70E0(a1 + 112);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_1013FC454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1013FC46C(uint64_t a1)
{
  sub_1013FC230(a1);

  operator delete();
}

uint64_t sub_1013FC4A4(double *a1, long double *a2)
{
  double v4 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      BOOL v8 = (*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      BOOL v9 = (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(_DWORD *)std::string buf = 67109376;
      LODWORD(v16[0]) = v8;
      WORD2(v16[0]) = 1024;
      *(_DWORD *)((char *)v16 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Error,HRSE,is latitude finite,%d,is longitude finite,%d", buf, 0xEu);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_20:
        std::string::size_type v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::isLatLonValid(const double &, double &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        return 0;
      }
LABEL_23:
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
      goto LABEL_20;
    }
  }
  else
  {
    if (v4 >= -90.0 && v4 <= 90.0)
    {
      sub_10005B720(*a2);
      *(void *)a2 = v5;
      return 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    std::string::size_type v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      double v12 = *a1;
      *(_DWORD *)std::string buf = 134283521;
      *(double *)__int16 v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Error,HRSE,latitude is beyond the valid range,lat,%{private}.7lf", buf, 0xCu);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_1013FC81C(uint64_t a1, double a2, double a3)
{
  double v47 = a3;
  double v48 = a2;
  if (!*(unsigned char *)(a1 + 264))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,invalid tile", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(v49) = 0;
    goto LABEL_103;
  }
  if (sub_1013FC4A4(&v48, &v47))
  {
    float v5 = *(float *)(a1 + 56);
    if (v5 == 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,cellsize is zero", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      LOWORD(v49) = 0;
      goto LABEL_103;
    }
    double v11 = *(double *)(a1 + 48);
    if (v11 > a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      double v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        double v13 = *(double *)(a1 + 48);
        *(_DWORD *)std::string buf = 134283777;
        double v66 = a2;
        __int16 v67 = 2049;
        double v68 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      double v14 = *(double *)(a1 + 48);
      int v49 = 134283777;
      double v50 = a2;
      __int16 v51 = 2049;
      double v52 = v14;
      goto LABEL_103;
    }
    double v15 = v11 + (float)(v5 * (float)*(unsigned int *)(a1 + 32));
    if (v15 < a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134283777;
        double v66 = a2;
        __int16 v67 = 2049;
        double v68 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v49 = 134283777;
      double v50 = a2;
      __int16 v51 = 2049;
      double v52 = v15;
      goto LABEL_103;
    }
    double v17 = v47;
    double v18 = *(double *)(a1 + 40);
    if (v47 < v18)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        double v20 = *(double *)(a1 + 40);
        *(_DWORD *)std::string buf = 134283777;
        double v66 = v17;
        __int16 v67 = 2049;
        double v68 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      double v21 = *(double *)(a1 + 40);
      int v49 = 134283777;
      double v50 = v17;
      __int16 v51 = 2049;
      double v52 = v21;
      goto LABEL_103;
    }
    unsigned int v22 = *(_DWORD *)(a1 + 36);
    double v23 = v18 + (float)(v5 * (float)v22);
    if (v47 > v23)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134283777;
        double v66 = v17;
        __int16 v67 = 2049;
        double v68 = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v49 = 134283777;
      double v50 = v17;
      __int16 v51 = 2049;
      double v52 = v23;
      goto LABEL_103;
    }
    double v25 = v5;
    double v26 = (v47 - v18) / v25;
    int v27 = (int)(floor(v26) + 0.5);
    double v28 = (a2 - v11) / v25;
    int v29 = (int)(floor(v28) + 0.5);
    int v30 = v27 + v22 * v29;
    if (v30 >= 0) {
      int v31 = v27 + v22 * v29;
    }
    else {
      int v31 = v30 + 1;
    }
    uint64_t v32 = *(void *)(a1 + 192);
    uint64_t v33 = *(void *)(a1 + 200);
    unint64_t v34 = v33 - v32;
    if (v33 != v32)
    {
      unint64_t v35 = (uint64_t)v31 >> 1;
      if (v34 > v35)
      {
        unsigned int v36 = *(unsigned __int8 *)(v32 + v35);
        int v37 = v36 & 0xF;
        unsigned int v38 = v36 >> 4;
        if (v30 - (v31 & 0xFFFFFFFE) == 1) {
          unsigned int v39 = v37;
        }
        else {
          unsigned int v39 = v38;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        __int16 v40 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134285313;
          double v66 = v26;
          __int16 v67 = 2049;
          double v68 = v28;
          __int16 v69 = 1025;
          int v70 = v27;
          __int16 v71 = 1025;
          int v72 = v29;
          __int16 v73 = 1025;
          int v74 = v30;
          __int16 v75 = 1025;
          int v76 = v31 >> 1;
          __int16 v77 = 1025;
          unsigned int v78 = v30 - (v31 & 0xFFFFFFFE);
          __int16 v79 = 1025;
          unsigned int v80 = v39;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironmentForTile,X,%{private}.7lf,Y,%{private}.7lf,x1,%{private}d,y1,%{private}d,iNibble,%{private}d,iByte,%{private}d,iNibbleInByte,%{private}d,typeNibble,%{private}d", buf, 0x3Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          int v49 = 134285313;
          double v50 = v26;
          __int16 v51 = 2049;
          double v52 = v28;
          __int16 v53 = 1025;
          int v54 = v27;
          __int16 v55 = 1025;
          int v56 = v29;
          __int16 v57 = 1025;
          int v58 = v30;
          __int16 v59 = 1025;
          int v60 = v31 >> 1;
          __int16 v61 = 1025;
          unsigned int v62 = v30 - (v31 & 0xFFFFFFFE);
          __int16 v63 = 1025;
          unsigned int v64 = v39;
          unint64_t v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        if (v39 < 7 && ((0x5Fu >> v39) & 1) != 0)
        {
          uint64_t v8 = dword_101DB6D30[v39];
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          uint64_t v43 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 67174657;
            LODWORD(v66) = v8;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironmentForTile,hrseType,%{private}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023248A8);
            }
            int v49 = 67174657;
            LODWORD(v50) = v8;
            long long v44 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n", v44);
            if (v44 != (char *)buf) {
              free(v44);
            }
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          uint64_t v41 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67174657;
            LODWORD(v66) = v39;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#Error,HRSE,getSignalEnvironmentForTile,unexpected signal environment type detected: %{private}d", buf, 8u);
          }
          uint64_t v8 = 0;
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023248A8);
            }
            int v49 = 67174657;
            LODWORD(v50) = v39;
LABEL_107:
            uint64_t v45 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n");
LABEL_108:
            if (v45 != buf) {
              free(v45);
            }
            return 0;
          }
        }
        return v8;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v42 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "#Warning,HRSE,getSignalEnvironmentForTile,invalid tile - unable to get data byte", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(v49) = 0;
LABEL_103:
    uint64_t v45 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironmentForTile(CLHRSETile &, double, double)", "%s\n");
    goto LABEL_108;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  BOOL v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134283777;
    double v66 = a2;
    __int16 v67 = 2049;
    double v68 = v47;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,HRSE,getSignalEnvironmentForTile,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
  }
  uint64_t v8 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v49 = 134283777;
    double v50 = a2;
    __int16 v51 = 2049;
    double v52 = v47;
    goto LABEL_107;
  }
  return v8;
}

uint64_t sub_1013FD600(uint64_t a1, double a2, double a3)
{
  double v52 = a3;
  double v53 = a2;
  uint64_t v5 = a1 + 96;
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v50 = a1 + 96;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 96);
  __int16 v51 = 256;
  sub_1000C7F88(buf);
  uint64_t v6 = (unsigned char *)(a1 + 825);
  int v7 = sub_1000D2988(*(uint64_t *)buf, "ForceDownloadHrseTiles", (BOOL *)(a1 + 825));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *v6;
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,fForceDownloadHrseTiles, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v41 = *v6;
      int v54 = 67109120;
      LODWORD(v55) = v41;
      uint64_t v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v42);
      if (v42 != buf) {
        free(v42);
      }
    }
  }
  if ((sub_1013FC4A4(&v53, &v52) & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283777;
      *(double *)&uint8_t buf[4] = v53;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&buf[14] = v52;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#Error,HRSE,getSignalEnvironment,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v54 = 134283777;
    double v55 = v53;
    __int16 v56 = 2049;
    double v57 = v52;
    unsigned int v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v39);
    goto LABEL_87;
  }
  if (*(unsigned char *)(a1 + 768))
  {
    long double v10 = *(double *)(a1 + 544);
    unsigned int v11 = *(_DWORD *)(a1 + 540);
    float v12 = *(float *)(a1 + 560);
    double v13 = *(double *)(a1 + 552);
    unsigned int v14 = *(_DWORD *)(a1 + 536);
    sub_10005B720(v10);
    double v16 = v15;
    sub_10005B720(v10 + (float)(v12 * (float)v11));
    double v18 = v17;
    double v19 = v13 + (float)(v12 * (float)v14);
    if (v53 >= v13 && v53 < v19 && v52 >= v16 && v52 < v17)
    {
      *(_DWORD *)(a1 + 816) = 0;
LABEL_16:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      double v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "HRSE,good to go!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        LOWORD(v54) = 0;
        uint64_t v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v45);
        if (v45 != buf) {
          free(v45);
        }
      }
      *(unsigned char *)(a1 + 440) = 0;
      uint64_t v21 = sub_1013FC81C(a1 + 504, v53, v52);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      unsigned int v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134284033;
        *(double *)&uint8_t buf[4] = v53;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&buf[14] = v52;
        __int16 v66 = 1025;
        *(_DWORD *)__int16 v67 = v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "HRSE,lat,%{private}.7lf,lon,%{private}.7lf,hrse,%{private}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        int v54 = 134284033;
        double v55 = v53;
        __int16 v56 = 2049;
        double v57 = v52;
        __int16 v58 = 1025;
        *(_DWORD *)__int16 v59 = v21;
        double v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v23);
        if (v23 != buf) {
          free(v23);
        }
      }
      goto LABEL_49;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    double v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134284801;
      *(double *)&uint8_t buf[4] = v53;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&buf[14] = v52;
      __int16 v66 = 2049;
      *(double *)__int16 v67 = v13;
      *(_WORD *)&v67[8] = 2049;
      double v68 = v19;
      __int16 v69 = 2049;
      double v70 = v16;
      __int16 v71 = 2049;
      double v72 = v18;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v54 = 134284801;
      double v55 = v53;
      __int16 v56 = 2049;
      double v57 = v52;
      __int16 v58 = 2049;
      *(double *)__int16 v59 = v13;
      *(_WORD *)&v59[8] = 2049;
      double v60 = v19;
      __int16 v61 = 2049;
      double v62 = v16;
      __int16 v63 = 2049;
      double v64 = v18;
      long long v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v44);
      if (v44 != buf) {
        free(v44);
      }
    }
  }
  if (!sub_10013DBF8(a1 + 8, &v53, &v52) || *v6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    double v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,tile not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      LOWORD(v54) = 0;
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v43);
      if (v43 != buf) {
        free(v43);
      }
    }
    uint64_t v21 = 0;
    *(_WORD *)(a1 + 440) = 0;
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
    goto LABEL_49;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  double v28 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,need to load tile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(v54) = 0;
    unint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v46);
    if (v46 != buf) {
      free(v46);
    }
  }
  int v29 = *(_DWORD *)(a1 + 816);
  if ((v29 & 7) == 0)
  {
    *(_DWORD *)(a1 + 816) = v29 + 1;
    __int16 v49 = 0;
    unsigned __int8 v32 = sub_1013FE628(a1, (unsigned char *)&v49 + 1, &v49, v53, v52);
    if (HIBYTE(v49))
    {
      *(unsigned char *)(a1 + 440) = 1;
      *(unsigned char *)(a1 + 441) = v49;
      double v33 = v52;
      *(double *)(a1 + 448) = v53;
      *(double *)(a1 + 456) = v33;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      unint64_t v34 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v35 = *(unsigned __int8 *)(a1 + 440);
        int v36 = *(unsigned __int8 *)(a1 + 441);
        *(_DWORD *)std::string buf = 134284289;
        *(double *)&uint8_t buf[4] = v53;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&buf[14] = v52;
        __int16 v66 = 1026;
        *(_DWORD *)__int16 v67 = v35;
        *(_WORD *)&v67[4] = 1026;
        *(_DWORD *)&v67[6] = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,tile download needed,lat,%{private}.7lf,lon,%{private}.7lf,is file needed,%{public}d,is bad tile,%{public}d", buf, 0x22u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v37 = *(unsigned __int8 *)(a1 + 440);
      int v38 = *(unsigned __int8 *)(a1 + 441);
      int v54 = 134284289;
      double v55 = v53;
      __int16 v56 = 2049;
      double v57 = v52;
      __int16 v58 = 1026;
      *(_DWORD *)__int16 v59 = v37;
      *(_WORD *)&v59[4] = 1026;
      *(_DWORD *)&v59[6] = v38;
      unsigned int v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v39);
    }
    else
    {
      if (v32) {
        goto LABEL_16;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      __int16 v40 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "HRSE,Tile not loaded yet", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_35:
        uint64_t v21 = 0;
        goto LABEL_49;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      LOWORD(v54) = 0;
      unsigned int v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v39);
    }
LABEL_87:
    if (v39 != buf) {
      free(v39);
    }
    goto LABEL_35;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  int v30 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(_DWORD *)(a1 + 816);
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "HRSE,getSignalEnvironment,skipping loadTile query,skipCount,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v47 = *(_DWORD *)(a1 + 816);
    int v54 = 67240192;
    LODWORD(v55) = v47;
    double v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnvironment(double, double)", "%s\n", v48);
    if (v48 != buf) {
      free(v48);
    }
  }
  uint64_t v21 = 0;
  ++*(_DWORD *)(a1 + 816);
LABEL_49:
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v21;
}

void sub_1013FE5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1013FE628(uint64_t a1, unsigned char *a2, unsigned char *a3, double a4, double a5)
{
  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  *a3 = 0;
  __int16 v33 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  long double v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283777;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = a4;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "HRSE,loadTile,lat,%{private}.7lf,lon,%{private}.7lf", (uint8_t *)buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v35 = 134283777;
    double v36 = a4;
    __int16 v37 = 2049;
    double v38 = a5;
    int v27 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", (const char *)v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  double v11 = sub_10016C458();
  id v12 = [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 360), "vendor"), "proxyForService:", @"CLTilesManager"), "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:", 2, (char *)&v33 + 1, &v33, a4, a5];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  double v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v14 = sub_10016C458();
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v14 - v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRSE,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    double v28 = sub_10016C458();
    int v35 = 134349056;
    double v36 = v28 - v11;
    int v29 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", (const char *)v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  if (!v12) {
    goto LABEL_47;
  }
  sub_100134750(buf, (char *)[v12 UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf[0];
  if (!HIBYTE(v33))
  {
LABEL_46:
    id v12 = 0;
LABEL_47:
    *a2 = 1;
    goto LABEL_48;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (!sub_1000A569C((const char *)p_p))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      double v25 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning,HRSE,loadTile,unexpected case,this tile should be on disk,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      *(double *)&data = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        data = (std::string *)__p.__r_.__value_.__l.__data_;
      }
      int v35 = 136446210;
      double v36 = *(double *)&data;
      int v31 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", (const char *)v31);
      if (v31 != buf) {
        free(v31);
      }
    }
    goto LABEL_46;
  }
  char v32 = 0;
  BOOL v16 = sub_1013FEDC8(a1 + 504, &__p, &v32);
  id v12 = (id)v16;
  if (v32) {
    char v17 = v16;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0)
  {
    id v18 = [[objc_msgSend(*(id *)(a1 + 360), "vendor") proxyForService:@"CLTilesManager"];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v19 = &__p;
    }
    else {
      double v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    [v18 syncgetDeleteTileFile:2 atPath:[NSString stringWithUTF8String:v19]];
    *a2 = 1;
    *a3 = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    double v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error,HRSE,loadTile,remove the corrupted tile from disk,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      *(double *)&unsigned int v22 = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v22 = (std::string *)__p.__r_.__value_.__l.__data_;
      }
      int v35 = 136446210;
      double v36 = *(double *)&v22;
      double v23 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLHighResolutionSignalEnvironmentDataManager::loadTile(double, double, BOOL &, BOOL &)", "%s\n", (const char *)v23);
      if (v23 != buf) {
        free(v23);
      }
    }
  }
LABEL_48:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1013FED84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1013FEDC8(uint64_t a1, const std::string *a2, char *a3)
{
  uint64_t v4 = a2;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  int v53 = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v6 = (unint64_t *)(a1 + 192);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0;
  int v7 = (void *)(a1 + 216);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  if (*(char *)(a1 + 263) < 0)
  {
    **(unsigned char **)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 240) = 0;
    *(unsigned char *)(a1 + 263) = 0;
  }
  *(unsigned char *)(a1 + 264) = 0;
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = (const char *)a2->__r_.__value_.__r.__words[0];
  }
  int v9 = fopen(v8, "rb");
  if (!v9)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    id v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v13 = v4;
      }
      else {
        double v13 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      int v14 = *__error();
      *(_DWORD *)std::string buf = 136446466;
      *(void *)double v60 = v13;
      *(_WORD *)&v60[8] = 1026;
      int v61 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,unable to load file,file path, %{public}s,errno, %{public}d", buf, 0x12u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      int v16 = *__error();
      int v56 = 136446466;
      *(void *)double v57 = v4;
      *(_WORD *)&v57[8] = 1026;
      int v58 = v16;
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v17);
      if (v17 == (char *)buf) {
        return 0;
      }
      goto LABEL_184;
    }
    return result;
  }
  long double v10 = v9;
  uint64_t v11 = ftell(v9);
  if (!sub_101400618((BOOL)v10, a1, &v54, &v55))
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    double v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v20 = v4;
      }
      else {
        double v20 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,unable to read file header,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      goto LABEL_182;
    }
    return result;
  }
  if (fseek(v10, 0, 2))
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    unsigned int v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v23 = v4;
      }
      else {
        double v23 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,fseek returned non-zero,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
LABEL_182:
      int v56 = 136446210;
      *(void *)double v57 = v21;
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v17);
      goto LABEL_183;
    }
    return result;
  }
  uint64_t v18 = ftell(v10) - v11;
  if (!v18)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v30 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = v4;
      }
      else {
        int v31 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,zero file size,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      goto LABEL_182;
    }
    return result;
  }
  uint64_t v24 = (*(_DWORD *)(a1 + 72) + *(_DWORD *)(a1 + 12));
  uint64_t v25 = v55;
  if (v18 != v55 + v24)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    char v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v33 = v4;
      }
      else {
        __int16 v33 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,invalid file size,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      goto LABEL_182;
    }
    return result;
  }
  if (*(_WORD *)(a1 + 16)) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = *(unsigned __int16 *)(a1 + 8) == 1;
  }
  char v27 = v26;
  *a3 = v27;
  if (!v26)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    unint64_t v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = v4;
      }
      else {
        int v35 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,file format not supported,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      goto LABEL_182;
    }
    return result;
  }
  if (v24 >= 0x1401)
  {
    fclose(v10);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    double v28 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v29 = v4;
      }
      else {
        int v29 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,tile is larger than the allowed maximum,file path, %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v49 = v4;
      }
      else {
        __int16 v49 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      int v56 = 136446210;
      *(void *)double v57 = v49;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    BOOL result = 0;
    *(unsigned char *)(a1 + 264) = 0;
    return result;
  }
  if (fseek(v10, 0, 0))
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    __int16 v37 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v38 = v4;
      }
      else {
        double v38 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,fseek returned non-zero,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      goto LABEL_182;
    }
    return result;
  }
  if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v36 = (const char *)v4;
  }
  else {
    double v36 = (const char *)v4->__r_.__value_.__r.__words[0];
  }
  if (sub_1004BF004(v36, 3)) {
    operator new[]();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  unsigned int v39 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,CLCommonSetFileProtectionClass failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(v56) = 0;
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  if (!*(void *)(a1 + 224) || !*v7 || *v7 != v18)
  {
    fclose(v10);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    long long v44 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v45 = v4;
      }
      else {
        uint64_t v45 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)double v60 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,failed to read tile,file path, %{public}s", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
      }
      goto LABEL_182;
    }
    return result;
  }
  fclose(v10);
  if ((sub_101400420(*(void *)(a1 + 224) + v25, (*(_DWORD *)(a1 + 72) + *(_DWORD *)(a1 + 12)), v54, &v53) & 1) == 0)
  {
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 200) = *(void *)(a1 + 192);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = 0;
    if (*(char *)(a1 + 263) < 0)
    {
      **(unsigned char **)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 263) = 0;
    }
    *(unsigned char *)(a1 + 264) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    unint64_t v46 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "#Warning,HRSE,readCLHRSETile,calculateCLHRSE_CRC returned false unexpectedly", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(v56) = 0;
    char v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v17);
LABEL_183:
    if (v17 == (char *)buf) {
      return 0;
    }
LABEL_184:
    free(v17);
    return 0;
  }
  int v40 = v53;
  if (v53 == *(_DWORD *)(a1 + 68))
  {
    unint64_t v41 = *(unsigned int *)(a1 + 72);
    if (v41)
    {
      *(void *)(a1 + 232) = *(void *)(a1 + 224) + v25 + *(unsigned int *)(a1 + 12);
      sub_101401484(v6, v41);
      uint64_t v42 = *(void *)(a1 + 192);
      if (*(void *)(a1 + 200) != v42)
      {
        unint64_t v43 = 0;
        do
        {
          *(unsigned char *)(v42 + v43) = *(unsigned char *)(*(void *)(a1 + 232) + v43);
          ++v43;
          uint64_t v42 = *(void *)(a1 + 192);
        }
        while (v43 < *(void *)(a1 + 200) - v42);
      }
    }
    *(unsigned char *)(a1 + 264) = 1;
    std::string::operator=((std::string *)(a1 + 240), v4);
    if (*(void *)(a1 + 224)) {
      operator delete[]();
    }
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    return 1;
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = 0;
  if (*(char *)(a1 + 263) < 0)
  {
    **(unsigned char **)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 240) = 0;
    *(unsigned char *)(a1 + 263) = 0;
  }
  *(unsigned char *)(a1 + 264) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  int v47 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v48 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)double v60 = v40;
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)&v60[6] = v48;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETile,invalid CLHRSE,crc fail,calculated,%X,received,%X", buf, 0xEu);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v52 = *(_DWORD *)(a1 + 68);
    int v56 = 67109376;
    *(_DWORD *)double v57 = v40;
    *(_WORD *)&v57[4] = 1024;
    *(_DWORD *)&v57[6] = v52;
    char v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETile(CLHRSETile &, const std::string &, BOOL &)", "%s\n", v17);
    goto LABEL_183;
  }
  return result;
}

uint64_t sub_101400420(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (result)
  {
    uint64_t v5 = a2 - 4;
    if (a2 - 4 <= a3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349312;
        unint64_t v10 = a3;
        __int16 v11 = 2050;
        uint64_t v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Error,HRSE,calculateCLHRSE_CRC,indexCrcInBuffer,%{public}zu,exceeds (bufferSize-4) bytes,%{public}zu", buf, 0x16u);
      }
      BOOL v7 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::calculateCLHRSE_CRC(unsigned char *, const size_t, const size_t, unsigned int &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return 0;
      }
    }
    else
    {
      *a4 = sub_100D5CFCC(result, a2, a3);
      return 1;
    }
  }
  return result;
}

BOOL sub_101400618(BOOL result, uint64_t a2, void *a3, void *a4)
{
  if (result)
  {
    BOOL v7 = (FILE *)result;
    if (!feof((FILE *)result))
    {
      uint64_t v11 = 0;
      while (1)
      {
        char __ptr = 0;
        if (fread(&__ptr, 1uLL, 1uLL, v7) != 1) {
          return 0;
        }
        uint64_t v12 = ftell(v7);
        if (__ptr == 67)
        {
          uint64_t v13 = v12;
          LOBYTE(v128) = 67;
          if (fread((char *)&v128 + 1, 1uLL, 5uLL, v7) != 5) {
            return 0;
          }
          *(_DWORD *)a2 = v128;
          *(_WORD *)(a2 + 4) = WORD2(v128);
          v14.i32[0] = *(_DWORD *)a2;
          if (vmovn_s16((int16x8_t)vmovl_u8(v14)).u32[0] == 1380469827
            && *(unsigned char *)(a2 + 4) == 83
            && *(unsigned char *)(a2 + 5) == 69)
          {
            *a4 = v11;
            if (fread((char *)&v128 + 6, 1uLL, 2uLL, v7) == 2)
            {
              *(void *)a2 = v128;
              if (fread(&v129, 1uLL, 6uLL, v7) == 6)
              {
                int v16 = v129;
                *(_WORD *)(a2 + 8) = __rev16(v129);
                if (v16 == 256)
                {
                  unsigned int v17 = v130;
                  *(_DWORD *)(a2 + 12) = bswap32(v130);
                  if (v17 == -1207959552)
                  {
                    size_t v18 = fread(&v131, 1uLL, 0xAAuLL, v7);
                    uint64_t v19 = *(unsigned int *)(a2 + 12);
                    if (v18 == v19 - 14)
                    {
                      *(_WORD *)(a2 + 16) = bswap32(v131) >> 16;
                      *(_DWORD *)(a2 + 20) = bswap32(v132);
                      *(void *)(a2 + 24) = bswap64(v133);
                      unsigned int v20 = bswap32(v134);
                      *(_DWORD *)(a2 + 32) = v20;
                      unsigned int v21 = bswap32(v135);
                      *(_DWORD *)(a2 + 36) = v21;
                      *(void *)(a2 + 40) = bswap64(v136);
                      *(void *)(a2 + 48) = bswap64(v137);
                      *(_DWORD *)(a2 + 56) = bswap32(v138);
                      *(_DWORD *)(a2 + 60) = bswap32(v139);
                      *(_DWORD *)(a2 + 64) = bswap32(v140);
                      *a3 = 64;
                      *(_DWORD *)(a2 + 68) = bswap32(v141);
                      unsigned int v22 = bswap32(v142);
                      *(_DWORD *)(a2 + 72) = v22;
                      *(_OWORD *)(a2 + 108) = v145;
                      *(_OWORD *)(a2 + 92) = v144;
                      *(_OWORD *)(a2 + 76) = v143;
                      *(_OWORD *)(a2 + 172) = v149;
                      *(_OWORD *)(a2 + 156) = v148;
                      *(_OWORD *)(a2 + 140) = v147;
                      *(_OWORD *)(a2 + 124) = v146;
                      if (v22 == (v21 * v20) >> 1)
                      {
                        if (v19 == 184)
                        {
                          if (qword_1024193D0 != -1) {
                            dispatch_once(&qword_1024193D0, &stru_1023248A8);
                          }
                          double v23 = qword_1024193D8;
                          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
                          {
                            int v24 = *(unsigned __int16 *)(a2 + 8);
                            int v25 = *(_DWORD *)(a2 + 12);
                            int v26 = *(unsigned __int16 *)(a2 + 16);
                            int v27 = *(_DWORD *)(a2 + 20);
                            uint64_t v28 = *(void *)(a2 + 24);
                            int v29 = *(_DWORD *)(a2 + 32);
                            int v30 = *(_DWORD *)(a2 + 36);
                            int v32 = *(_DWORD *)(a2 + 68);
                            int v31 = *(_DWORD *)(a2 + 72);
                            uint64_t v34 = *(void *)(a2 + 40);
                            uint64_t v33 = *(void *)(a2 + 48);
                            double v35 = *(float *)(a2 + 56);
                            double v36 = *(float *)(a2 + 60);
                            double v37 = *(float *)(a2 + 64);
                            *(_DWORD *)std::string buf = 67177985;
                            int v101 = v24;
                            __int16 v102 = 1025;
                            int v103 = v25;
                            __int16 v104 = 1025;
                            int v105 = v26;
                            __int16 v106 = 1025;
                            int v107 = v27;
                            __int16 v108 = 2049;
                            uint64_t v109 = v28;
                            __int16 v110 = 1025;
                            int v111 = v29;
                            __int16 v112 = 1025;
                            int v113 = v30;
                            __int16 v114 = 1025;
                            int v115 = v31;
                            __int16 v116 = 1025;
                            int v117 = v32;
                            __int16 v118 = 2049;
                            uint64_t v119 = v34;
                            __int16 v120 = 2049;
                            uint64_t v121 = v33;
                            __int16 v122 = 2049;
                            double v123 = v35;
                            __int16 v124 = 2049;
                            double v125 = v36;
                            __int16 v126 = 2049;
                            double v127 = v37;
                            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "HRSE,readCLHRSETileHeader,vers,%{private}d,headerLen,%{private}d,compressionType,%{private}d,expirationAge,%{private}d,timestamp,%{private}.1f,nrows,%{private}d,ncols,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d,xllcorner,%{private}.7lf,yllcorner,%{private}.7lf,cellsize,%{private}.7f,buildingMedianHeight,%{private}.7f,buildingMaximumHeight,%{private}.7f", buf, 0x6Eu);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1024193D0 != -1) {
                              dispatch_once(&qword_1024193D0, &stru_1023248A8);
                            }
                            int v56 = *(unsigned __int16 *)(a2 + 8);
                            int v57 = *(_DWORD *)(a2 + 12);
                            int v58 = *(unsigned __int16 *)(a2 + 16);
                            int v59 = *(_DWORD *)(a2 + 20);
                            uint64_t v60 = *(void *)(a2 + 24);
                            int v61 = *(_DWORD *)(a2 + 32);
                            int v62 = *(_DWORD *)(a2 + 36);
                            int v64 = *(_DWORD *)(a2 + 68);
                            int v63 = *(_DWORD *)(a2 + 72);
                            uint64_t v66 = *(void *)(a2 + 40);
                            uint64_t v65 = *(void *)(a2 + 48);
                            double v67 = *(float *)(a2 + 56);
                            double v68 = *(float *)(a2 + 60);
                            double v69 = *(float *)(a2 + 64);
                            int v72 = 67177985;
                            int v73 = v56;
                            __int16 v74 = 1025;
                            int v75 = v57;
                            __int16 v76 = 1025;
                            int v77 = v58;
                            __int16 v78 = 1025;
                            int v79 = v59;
                            __int16 v80 = 2049;
                            uint64_t v81 = v60;
                            __int16 v82 = 1025;
                            int v83 = v61;
                            __int16 v84 = 1025;
                            int v85 = v62;
                            __int16 v86 = 1025;
                            int v87 = v63;
                            __int16 v88 = 1025;
                            int v89 = v64;
                            __int16 v90 = 2049;
                            uint64_t v91 = v66;
                            __int16 v92 = 2049;
                            uint64_t v93 = v65;
                            __int16 v94 = 2049;
                            double v95 = v67;
                            __int16 v96 = 2049;
                            double v97 = v68;
                            __int16 v98 = 2049;
                            double v99 = v69;
                            double v70 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETileHeader(FILE *, CLHRSETileHeader &, size_t &, size_t &)", "%s\n", v70);
                            if (v70 != (char *)buf) {
                              free(v70);
                            }
                          }
                          return 1;
                        }
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1023248A8);
                        }
                        unint64_t v54 = qword_1024193D8;
                        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)std::string buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - incorrect headerLength", buf, 2u);
                        }
                        BOOL v55 = sub_10013D1A0(115, 0);
                        BOOL result = 0;
                        if (v55)
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1024193D0 != -1) {
                            dispatch_once(&qword_1024193D0, &stru_1023248A8);
                          }
                          LOWORD(v72) = 0;
                          goto LABEL_11;
                        }
                      }
                      else
                      {
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1023248A8);
                        }
                        int v53 = qword_1024193D8;
                        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                        {
                          *(_WORD *)std::string buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#Warning,HRSE,readCLHRSETileHeader,header.dataSizeBytes != header.nrows * header.ncols", buf, 2u);
                        }
                        BOOL result = sub_10013D1A0(115, 2);
                        if (result)
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1024193D0 != -1) {
                            dispatch_once(&qword_1024193D0, &stru_1023248A8);
                          }
                          LOWORD(v72) = 0;
                          unint64_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETileHeader(FILE *, CLHRSETileHeader &, size_t &, size_t &)", "%s\n");
                          goto LABEL_12;
                        }
                      }
                    }
                    else
                    {
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023248A8);
                      }
                      __int16 v51 = qword_1024193D8;
                      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)std::string buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - rest of header", buf, 2u);
                      }
                      BOOL v52 = sub_10013D1A0(115, 0);
                      BOOL result = 0;
                      if (v52)
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1023248A8);
                        }
                        LOWORD(v72) = 0;
                        goto LABEL_11;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1023248A8);
                    }
                    int v47 = qword_1024193D8;
                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                    {
                      int v48 = *(_DWORD *)(a2 + 12);
                      *(_DWORD *)std::string buf = 67109376;
                      int v101 = 184;
                      __int16 v102 = 1024;
                      int v103 = v48;
                      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid header length - expected,%d,got,%d", buf, 0xEu);
                    }
                    BOOL v49 = sub_10013D1A0(115, 0);
                    BOOL result = 0;
                    if (v49)
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023248A8);
                      }
                      int v50 = *(_DWORD *)(a2 + 12);
                      int v72 = 67109376;
                      int v73 = 184;
                      __int16 v74 = 1024;
                      int v75 = v50;
                      goto LABEL_11;
                    }
                  }
                }
                else
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023248A8);
                  }
                  unint64_t v43 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                  {
                    int v44 = *(unsigned __int16 *)(a2 + 8);
                    *(_DWORD *)std::string buf = 67109376;
                    int v101 = 1;
                    __int16 v102 = 1024;
                    int v103 = v44;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid tile version - expected,%d,got,%d", buf, 0xEu);
                  }
                  BOOL v45 = sub_10013D1A0(115, 0);
                  BOOL result = 0;
                  if (v45)
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1023248A8);
                    }
                    int v46 = *(unsigned __int16 *)(a2 + 8);
                    int v72 = 67109376;
                    int v73 = 1;
                    __int16 v74 = 1024;
                    int v75 = v46;
                    goto LABEL_11;
                  }
                }
              }
              else
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023248A8);
                }
                unint64_t v41 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)std::string buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - version and headerLength", buf, 2u);
                }
                BOOL v42 = sub_10013D1A0(115, 0);
                BOOL result = 0;
                if (v42)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023248A8);
                  }
                  LOWORD(v72) = 0;
                  goto LABEL_11;
                }
              }
            }
            else
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023248A8);
              }
              unsigned int v39 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,invalid CLHRSE tile file - header string", buf, 2u);
              }
              BOOL v40 = sub_10013D1A0(115, 0);
              BOOL result = 0;
              if (v40)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023248A8);
                }
                LOWORD(v72) = 0;
                goto LABEL_11;
              }
            }
            return result;
          }
          if (fseek(v7, v13, 0))
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023248A8);
            }
            double v38 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,fseek returned non-zero", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023248A8);
              }
              LOWORD(v72) = 0;
              goto LABEL_11;
            }
            return 0;
          }
        }
        if (!feof(v7) && v11++ < 0xFF) {
          continue;
        }
        break;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Error,HRSE,readCLHRSETileHeader,did not synchronize to tile header_string", buf, 2u);
    }
    BOOL v9 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      LOWORD(v72) = 0;
LABEL_11:
      unint64_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHighResolutionSignalEnvironmentDataManager::readCLHRSETileHeader(FILE *, CLHRSETileHeader &, size_t &, size_t &)", "%s\n");
LABEL_12:
      if (v10 != buf) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

void sub_101401484(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1004BFB3C(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_1014014AC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 96;
  (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 16))(a1 + 96);
  if (a2)
  {
    switch(a3)
    {
      case 0:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        BOOL v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HRSE,onAvlFileUpdated,avl download status,NONE", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          LOWORD(__p[0]) = 0;
          uint64_t v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
          break;
        }
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      case 1:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        int v26 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "HRSE,onAvlFileUpdated,avl download status,STARTED", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          LOWORD(__p[0]) = 0;
          int v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v44);
          if (v44 != buf) {
            free(v44);
          }
        }
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      case 2:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        unint64_t v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "HRSE,onAvlFileUpdated,avl download status,COMPLETED", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          LOWORD(__p[0]) = 0;
          BOOL v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v42);
          if (v42 != buf) {
            free(v42);
          }
        }
        sub_1005C768C(a2, (uint64_t)__p);
        *(_DWORD *)(a1 + 820) = 1;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        uint64_t v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = __p;
          if (v54 < 0) {
            uint64_t v12 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "HRSE,onAvlFileUpdated,avl downloaded,%{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          BOOL v45 = __p;
          if (v54 < 0) {
            BOOL v45 = (void **)__p[0];
          }
          LODWORD(v52.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
          int v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v46);
          if (v46 != buf) {
            free(v46);
          }
        }
        if (v54 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        if (!sub_1004BF004((const char *)v13, 4))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          uint8x8_t v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            double v15 = __p;
            if (v54 < 0) {
              double v15 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,HRSE,onAvlFileUpdated,Cannot set protection class for HRSE avl file,%{public}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023248A8);
            }
            BOOL v49 = __p;
            if (v54 < 0) {
              BOOL v49 = (void **)__p[0];
            }
            LODWORD(v52.__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
            int v50 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v50);
            if (v50 != buf) {
              free(v50);
            }
          }
        }
        int v16 = (char *)sub_1000A6958();
        sub_1000A5670(v16, (uint64_t)&v52);
        if (*(char *)(a1 + 415) < 0)
        {
          sub_1000DC48C(buf, *(void **)(a1 + 392), *(void *)(a1 + 400));
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 392);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 408);
        }
        if (buf[23] >= 0) {
          uint64_t v28 = buf;
        }
        else {
          uint64_t v28 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v29 = buf[23];
        }
        else {
          std::string::size_type v29 = *(void *)&buf[8];
        }
        std::string::append(&v52, v28, v29);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        if (v54 >= 0) {
          int v30 = __p;
        }
        else {
          int v30 = (void **)__p[0];
        }
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v31 = &v52;
        }
        else {
          int v31 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        sub_1004BC3D8((const char *)v30, (const char *)v31);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        int v32 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v33 = __p;
          if (v54 < 0) {
            uint64_t v33 = (void **)__p[0];
          }
          uint64_t v34 = &v52;
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v34 = (std::string *)v52.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v33;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v34;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "HRSE,onAvlFileUpdated,avl file decompressed,%{public}s,to,%{public}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          int v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v47);
          if (v47 != buf) {
            free(v47);
          }
        }
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v35 = &v52;
        }
        else {
          double v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        if (!sub_1004BF004((const char *)v35, 4))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          double v36 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            double v37 = &v52;
            if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              double v37 = (std::string *)v52.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = v37;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#Warning,HRSE,onAvlFileUpdated,Cannot set protection class for HRSE decompressed avl file,%{public}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023248A8);
            }
            __int16 v51 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v51);
            if (v51 != buf) {
              free(v51);
            }
          }
        }
        uint64_t v38 = a1 + 8;
        int v39 = sub_10046DE4C(v38);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        BOOL v40 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "HRSE,onAvlFileUpdated,is availability file valid,%{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          int v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v48);
          if (v48 != buf) {
            free(v48);
          }
        }
        sub_10046CC44(v38);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        goto LABEL_123;
      case 3:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        unsigned int v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,HRSE,onAvlFileUpdated,avl download status,FAILED", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          LOWORD(__p[0]) = 0;
          unint64_t v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v43);
          if (v43 != buf) {
            free(v43);
          }
        }
        int v18 = *(_DWORD *)(a1 + 820);
        if (v18 < 5) {
          int v19 = v18 + 1;
        }
        else {
          int v19 = v18 + 10;
        }
        *(_DWORD *)(a1 + 820) = v19;
        sub_1005C768C(a2, (uint64_t)__p);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        unsigned int v20 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = __p;
          if (v54 < 0) {
            unsigned int v21 = (void **)__p[0];
          }
          int v22 = *(_DWORD *)(a1 + 820);
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,HRSE,onAvlFileUpdated,avl download request failed,%{public}s,retryMultiplier,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          double v23 = __p;
          if (v54 < 0) {
            double v23 = (void **)__p[0];
          }
          int v24 = *(_DWORD *)(a1 + 820);
          LODWORD(v52.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
          WORD2(v52.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = v24;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v25);
          if (v25 != buf) {
            free(v25);
          }
        }
LABEL_123:
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      default:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        int v27 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = a3;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning,HRSE,onAvlFileUpdated,avl download status,%{public}d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a3;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
        break;
    }
LABEL_79:
    if (v8 != buf) {
      free(v8);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  BOOL v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,HRSE,onAvlFileUpdated,null pointer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
    goto LABEL_79;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_1014026D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1019DB560((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_101402798(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = a1 + 96;
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v42 = a1 + 96;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 96);
  __int16 v43 = 256;
  int v8 = sub_10046FF8C(v7 - 88);
  int v9 = *(unsigned __int8 *)(a1 + 440);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  unint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)int v48 = v8;
    *(_WORD *)&v48[4] = 1026;
    *(_DWORD *)&v48[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,needAvailability,%{public}d,needTile,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v44 = 67240448;
    *(_DWORD *)BOOL v45 = v8;
    *(_WORD *)&v45[4] = 1026;
    *(_DWORD *)&v45[6] = v9;
    std::string::size_type v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  if (((v9 == 0) & ~v8) == 0)
  {
    if (v8 && (uint64_t v11 = (void *)(a2 + 76), vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 808)) > 3600.0))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,download availability file", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        LOWORD(v44) = 0;
        int v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      sub_1013FB868(a1, v11);
    }
    else
    {
      if (*(unsigned char *)(a1 + 441))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        uint64_t v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134349056;
          *(void *)int v48 = 0x4122750000000000;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,corrupted tile, increase download retry interval to %{public}.5lf seconds", buf, 0xCu);
        }
        double v14 = 604800.0;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          int v44 = 134349056;
          *(void *)BOOL v45 = 0x4122750000000000;
          double v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      else
      {
        double v14 = 31.0;
      }
      if (v9)
      {
        double v16 = *(double *)(a2 + 76);
        if (vabdd_f64(v16, *(double *)(a1 + 800)) > v14)
        {
          *(double *)(a1 + 800) = v16;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023248A8);
          }
          unsigned int v17 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            uint64_t v18 = *(void *)(a1 + 448);
            uint64_t v19 = *(void *)(a1 + 456);
            *(_DWORD *)std::string buf = 134283777;
            *(void *)int v48 = v18;
            *(_WORD *)&v48[8] = 2049;
            uint64_t v49 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "HRSE,requestDownload,requesting HRSE tile download,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023248A8);
            }
            uint64_t v32 = *(void *)(a1 + 448);
            uint64_t v33 = *(void *)(a1 + 456);
            int v44 = 134283777;
            *(void *)BOOL v45 = v32;
            *(_WORD *)&v45[8] = 2049;
            uint64_t v46 = v33;
            uint64_t v34 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v34);
            if (v34 != (char *)buf) {
              free(v34);
            }
          }
          if (a3)
          {
            if (*(double *)(a2 + 20) <= 10.0)
            {
              LOBYTE(a3) = 0;
            }
            else
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023248A8);
              }
              unsigned int v20 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
              {
                uint64_t v21 = *(void *)(a2 + 20);
                *(_DWORD *)std::string buf = 134349312;
                *(void *)int v48 = v21;
                *(_WORD *)&v48[8] = 2050;
                uint64_t v49 = 0x4024000000000000;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "HRSE,allowing download request over cell due to large horizontal uncertainty, uncertainty,%{public}.5lf, uncertainty threshold,%{public}.5lf", buf, 0x16u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023248A8);
                }
                uint64_t v35 = *(void *)(a2 + 20);
                int v44 = 134349312;
                *(void *)BOOL v45 = v35;
                *(_WORD *)&v45[8] = 2050;
                uint64_t v46 = 0x4024000000000000;
                double v36 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v36);
                if (v36 != (char *)buf) {
                  free(v36);
                }
              }
              LOBYTE(a3) = 1;
            }
          }
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          char v23 = *(unsigned char *)(a1 + 825);
          if (v23) {
            LOBYTE(a3) = 1;
          }
          id v24 = [[[*(id *)(a1 + 360) vendor] proxyForService:@"CLTilesManager"];
          double v25 = *(double *)(a1 + 448);
          double v26 = *(double *)(a1 + 456);
          v37[0] = a3;
          v37[1] = v23;
          v37[2] = 0;
          unint64_t v38 = 0xBFF0000000000000;
          int v39 = 0;
          CFAbsoluteTime v40 = Current;
          __int16 v41 = 1;
          [v24 requestTileDownloadByType:2 lat:-1 lon:v37 seckey:v25 details:v26];
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "HRSE,downloadFileIfNeeded,tile download finished!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        LOWORD(v44) = 0;
        int v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::downloadFileIfNeeded(const CLDaemonLocation &, const BOOL)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_101403148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101403198()
{
  double v9 = 0.0;
  sub_1000C7F88(buf);
  int v0 = sub_1000A699C(*(uint64_t *)&buf[0], "HrseAvlFileUpdatePeriodOverWifi", &v9);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (v9 > 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v1 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        int v10 = 134349056;
        uint64_t v11 = *(void *)&v9;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return v9;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    BOOL v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#Warning,HRSE,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v10 = 134349056;
      uint64_t v11 = *(void *)&v9;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  size_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = 0x40F5180000000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  double v2 = 86400.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v10 = 134349056;
    uint64_t v11 = 0x40F5180000000000;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v2;
}

void sub_10140363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_10140365C()
{
  double v9 = 0.0;
  sub_1000C7F88(buf);
  int v0 = sub_1000A699C(*(uint64_t *)&buf[0], "HrseAvlFileUpdatePeriodOverCell", &v9);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (v9 > 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      uint64_t v1 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023248A8);
        }
        int v10 = 134349056;
        uint64_t v11 = *(void *)&v9;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverCell() const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return v9;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    BOOL v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#Warning,HRSE,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023248A8);
      }
      int v10 = 134349056;
      uint64_t v11 = *(void *)&v9;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverCell() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  size_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = 0x4122750000000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRSE,HrseAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  double v2 = 604800.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v10 = 134349056;
    uint64_t v11 = 0x4122750000000000;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLHighResolutionSignalEnvironmentDataManager::getAvlFileDownloadRateOverCell() const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v2;
}

void sub_101403B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101403B20(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 96;
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v25 = a1 + 96;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 96);
  __int16 v26 = 256;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023248A8);
  }
  double v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Notification,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023248A8);
    }
    int v20 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v20;
    uint64_t v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHighResolutionSignalEnvironmentDataManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", (const char *)v21);
    if (v21 != buf) {
      free(v21);
    }
  }
  if (*a3 == 4)
  {
    int v11 = *(_DWORD *)(a4 + 188);
    if (v11 == 1)
    {
      if (!*(unsigned char *)(a1 + 376))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_1013FB868(a1, buf);
        *(unsigned char *)(a1 + 376) = 1;
      }
    }
    else if (!v11)
    {
      uint64_t v12 = (char *)sub_1000A6958();
      sub_1000A5670(v12, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&__dst, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = buf[0];
      }
      if (*(char *)(a1 + 415) < 0) {
        sub_1000DC48C(&__p, *(void **)(a1 + 392), *(void *)(a1 + 400));
      }
      else {
        std::string __p = *(std::string *)(a1 + 392);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      sub_1004BEB14((const char *)p_dst);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&__p, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = buf[0];
      }
      if (*(char *)(a1 + 439) < 0)
      {
        sub_1000DC48C(v22, *(void **)(a1 + 416), *(void *)(a1 + 424));
      }
      else
      {
        *(_OWORD *)int v22 = *(_OWORD *)(a1 + 416);
        uint64_t v23 = *(void *)(a1 + 432);
      }
      if (v23 >= 0) {
        double v16 = v22;
      }
      else {
        double v16 = (void **)v22[0];
      }
      if (v23 >= 0) {
        std::string::size_type v17 = HIBYTE(v23);
      }
      else {
        std::string::size_type v17 = (std::string::size_type)v22[1];
      }
      std::string::append(&__p, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v18 = &__p;
      }
      else {
        uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1004BEB14((const char *)v18);
      *(unsigned char *)(a1 + 376) = 0;
      sub_1005C70E0(a1 + 112);
      sub_10046FF94(a1 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
}

void sub_101403F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void sub_101403FB8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101403FE8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101404018()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101404098()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101404128(_Unwind_Exception *a1)
{
}

uint64_t sub_10140424C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 24)) {
    return (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 448))();
  }
  return result;
}

void sub_1014042A4(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1023248D8;
  *(void *)(a1 + 8) = off_102324AB0;
  *(void *)(a1 + 16) = off_102324AD8;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v3 = a1 + 216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 224) = 0;
  [a2 silo];
  sub_100778920((void *)(v3 + 16));
  *(void *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  [*(id *)(a1 + 24) silo];
  *(void *)(a1 + 32) = -[CLHarvestExternalAdapter initWithHarvesterExternal:andSilo:]([CLHarvestExternalAdapter alloc], "initWithHarvesterExternal:andSilo:", a1, [*(id *)(a1 + 24) silo]);
  id v4 = [objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLRoutineMonitor"];
  *(void *)(a1 + 304) = v4;
  [v4 registerDelegate:*(void *)(a1 + 32) inSilo:objc_msgSend(*(id *)(a1 + 24), "silo")];
  [*(id *)(a1 + 304) setDelegateEntityName:"CLHarvestControllerExternal"];
  id v5 = [objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLClientAuthorizationCache"];
  *(void *)(a1 + 296) = v5;
  [v5 registerDelegate:*(void *)(a1 + 32) inSilo:[*(id *)(a1 + 24) silo]];
  [*(id *)(a1 + 296) setDelegateEntityName:"CLHarvestControllerExternal"];
  operator new();
}

void sub_101404720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  sub_1003C2C38(a14, 0);
  sub_101404B6C(a12);
  uint64_t v22 = *(void *)(v14 + 224);
  *(void *)(v14 + 224) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *v20;
  *int v20 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  sub_1000F5BB0(v19, *(void **)(v14 + 200));
  uint64_t v24 = *(void *)(v14 + 184);
  *(void *)(v14 + 184) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_1000F5BB0(v18, *(void **)(v14 + 168));
  uint64_t v25 = *(void *)(v14 + 152);
  *(void *)(v14 + 152) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *v15;
  uint64_t *v15 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  sub_1000F5BB0(v17, *(void **)(v14 + 128));
  uint64_t v27 = *(void *)(v14 + 112);
  *(void *)(v14 + 112) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_1000F5BB0(v16, *(void **)(v14 + 96));
  uint64_t v28 = *(void *)(v14 + 80);
  *(void *)(v14 + 80) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  sub_1000F5BB0(a13, *(void **)(v14 + 64));
  uint64_t v29 = *(void *)(v14 + 48);
  *(void *)(v14 + 48) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  _Unwind_Resume(a1);
}

void sub_101404930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 24), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onRegulatoryDomainUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onRegulatoryDomainUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 24) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1014076EC;
  void v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_101404B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101404B6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_101404BAC(uint64_t a1)
{
  *(void *)a1 = off_1023248D8;
  *(void *)(a1 + 8) = off_102324AB0;
  *(void *)(a1 + 16) = off_102324AD8;

  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 304) = 0;

  *(void *)(a1 + 296) = 0;
  if (objc_opt_class()) {
    [+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection") removeObserver:*(void *)(a1 + 32)];
  }
  [*(id *)(a1 + 32) invalidate];

  *(void *)(a1 + 32) = 0;
  sub_1003C2C38((uint64_t *)(a1 + 280), 0);
  sub_1000F5BB0(a1 + 256, *(void **)(a1 + 264));
  sub_1000F5BB0(a1 + 232, *(void **)(a1 + 240));
  uint64_t v2 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1000F5BB0(a1 + 192, *(void **)(a1 + 200));
  uint64_t v4 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1000F5BB0(a1 + 160, *(void **)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1000F5BB0(a1 + 120, *(void **)(a1 + 128));
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1000F5BB0(a1 + 88, *(void **)(a1 + 96));
  uint64_t v8 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_1000F5BB0(a1 + 56, *(void **)(a1 + 64));
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

uint64_t sub_101404E70(uint64_t a1)
{
  return sub_101404BAC(a1 - 8);
}

uint64_t sub_101404E78(uint64_t a1)
{
  return sub_101404BAC(a1 - 16);
}

void sub_101404E80(uint64_t a1)
{
  sub_101404BAC(a1);

  operator delete();
}

void sub_101404EB8(uint64_t a1)
{
  sub_101404BAC(a1 - 8);

  operator delete();
}

void sub_101404EF4(uint64_t a1)
{
  sub_101404BAC(a1 - 16);

  operator delete();
}

id sub_101404F30(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_101404F38(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = (uint64_t *)*a2;
  }
  return [*(id *)(a1 + 296) getAuthorizationContextOfNonZonalClient:_NSConcreteStackBlock withReply:3221225472 sub_101404FD4 &unk_102324AF8 +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2), a1];
}

void sub_101404FD4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = [a2 isAuthorizedForServiceType:4];
  uint64_t v5 = *(uint64_t ***)(v3 + 40);
  sub_100134750(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  sub_10054B1E8(v5, (uint64_t)__p, v4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_101405050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10140506C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a1 + 40) = a2;
    sub_100561580();
  }
  int v2 = sub_101AB3A48();
  sub_1014051B0(v2, v3, v4, v5);
}

void sub_1014051B0(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onTelephonyNotificationLegacy", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onTelephonyNotificationLegacy\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101405568(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10140537C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10140539C(void *a1)
{
  uint64_t v2 = a1[28];
  a1[28] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = a1[27];
  a1[27] = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  a1[5] = 0;
  return result;
}

id sub_101405420(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(void **)(v2 + 16);
    uint64_t v5 = sub_1000F1244(a2);
    return [v3 register:v4 forNotification:v5 registrationInfo:0];
  }
  else
  {
    uint64_t v7 = sub_101AB3BAC();
    return (id)sub_101405474(v7);
  }
}

id sub_101405474(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(void **)(v2 + 16);
    uint64_t v5 = sub_1000F1244(a2);
    return [v3 register:v4 forNotification:v5 registrationInfo:0];
  }
  else
  {
    uint64_t v7 = sub_101AB3D10();
    return (id)sub_1014054C8(v7);
  }
}

id sub_1014054C8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(void **)(v2 + 16);
    uint64_t v5 = sub_1000F1244(a2);
    return [v3 unregister:v4 forNotification:v5];
  }
  else
  {
    uint64_t v7 = sub_101AB3E74();
    return (id)sub_101405518(v7);
  }
}

void sub_101405518(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(void **)(v2 + 16);
    uint64_t v5 = sub_1000F1244(a2);
    [v3 unregister:v4 forNotification:v5];
  }
  else
  {
    uint64_t v6 = sub_101AB3FD8();
    sub_101405568(v6, v7, v8, v9);
  }
}

void sub_101405568(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    sub_1000C4F80(v4, a2, a3, a4, 1);
  }
  else
  {
    uint64_t v5 = sub_101AB42A0();
    sub_10140559C(v5);
  }
}

id sub_10140559C(uint64_t a1, unsigned char *a2)
{
  char v4 = 0;
  id result = [objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLTelephonyService"] syncgetActiveCall:&v4];
  *a2 = v4;
  return result;
}

void sub_1014055EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2)
  {
    [v2 fetchMostRecentConnectionWithReply:a2];
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102324B80);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "fVehicleConnectionNotifier is not initialized, skip fetching mostRecentConnection", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102324B80);
      }
      char v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLHarvestControllerExternal::fetchMostRecentConnectionWithReply(void (^)(CLVehicleConnection)) const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_1014057BC(uint64_t a1)
{
  id v1 = [[[*(id *)(a1 + 24) vendor] proxyForService:@"CLDaemonStatus"];

  return [v1 syncgetReachability];
}

void *sub_1014057F4@<X0>(uint64_t a1@<X8>)
{
  if (byte_10248798F < 0) {
    return sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102487978, *((unint64_t *)&xmmword_102487978 + 1));
  }
  *(_OWORD *)a1 = xmmword_102487978;
  *(void *)(a1 + 16) = unk_102487988;
  return result;
}

uint64_t sub_101405830(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "HarvestingThermalLevelHighThreshold", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_10140588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014058A4(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "HarvestingThermalLevelLowThreshold", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101405900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101405918(uint64_t a1, BOOL *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_1000D2988(v5, "IsHarvestAllLocations", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101405974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10140598C(uint64_t a1, void *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_1000A699C(v5, "MaxHarvestAge", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_1014059E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101405A00(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestPointsPer", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101405A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101405A74(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestPointsPerUpload", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101405AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101405AE8(uint64_t a1, void *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_1000A699C(v5, "DefaultHarvestUploadInterval", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101405B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_101405B5C(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  if (!*(void *)(a1 + 208)) {
    sub_10060F068();
  }
  [*(id *)(*(void *)(a1 + 184) + 16) register:*(void *)(*(void *)(a1 + 184) + 8) forNotification:a2 registrationInfo:0, v4];
  return sub_1000EDED4((uint64_t **)(a1 + 192), &v5, &v5);
}

void sub_101405C4C(int a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10054D934(*(unsigned __int8 **)(a4 + 40), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101405E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101405E38(uint64_t a1, uint64_t a2)
{
  int v4 = a2;
  [*(id *)(*(void *)(a1 + 184) + 16) unregister:*(void *)(*(void *)(a1 + 184) + 8) forNotification:a2];
  uint64_t result = sub_1000ED9F4(a1 + 192, &v4);
  if (!*(void *)(a1 + 208))
  {
    uint64_t result = *(void *)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

id sub_101405EB8(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLTelephonyService"];

  return _[v1 syncgetRegistrationStatus];
}

uint64_t **sub_101405EF0(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  if (!*(void *)(a1 + 136)) {
    sub_1007E0344();
  }
  if (!a2)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(&__p, (const std::string *)&xmmword_102487978);
    sub_101A2EE44();
  }
  [*(id *)(*(void *)(a1 + 112) + 16) register:*(void *)(*(void *)(a1 + 112) + 8) forNotification:a2 registrationInfo:0];
  return sub_1000EDED4((uint64_t **)(a1 + 120), &v5, &v5);
}

void sub_101406024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_101406040(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = a2;
  sub_1000ED9F4(a1 + 120, (int *)&v4);
  id result = [*(id *)(*(void *)(a1 + 112) + 16) unregister:*(void *)(*(void *)(a1 + 112) + 8) forNotification:v4];
  if (!*(void *)(a1 + 136))
  {
    id result = *(id *)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (result) {
      return (id)(*(uint64_t (**)(id))(*(void *)result + 8))(result);
    }
  }
  return result;
}

id sub_1014060C0(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLClientManager"];

  return _[v1 syncgetIsMapsANonSystemLocationClient];
}

BOOL sub_1014060F8(uint64_t a1, void *a2)
{
  id v3 = +[GEOCountryConfiguration sharedConfiguration];
  CFDictionaryRef v4 = (const __CFDictionary *)[v3 defaultForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_102478B40) defaultValue:0];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102324B80);
  }
  int v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289283;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2113;
    CFDictionaryRef v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"networkSettings\", \"networkHarvestRules\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
  }
  if (v4) {
    sub_100017FD4(a2, v4);
  }
  return v4 != 0;
}

uint64_t **sub_101406238(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  if (!*(void *)(a1 + 72)) {
    sub_100EB2E6C();
  }
  [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:a2 registrationInfo:0, v4];
  return sub_1000EDED4((uint64_t **)(a1 + 56), &v5, &v5);
}

void sub_101406328(int a1, int *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10054D16C(*(void *)(a4 + 40), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1014064F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101406514(uint64_t a1, uint64_t a2)
{
  int v4 = a2;
  [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:a2];
  uint64_t result = sub_1000ED9F4(a1 + 56, &v4);
  if (!*(void *)(a1 + 72))
  {
    uint64_t result = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t **sub_101406594(uint64_t a1, uint64_t a2)
{
  int v4 = a2;
  if (!*(void *)(a1 + 104)) {
    sub_100681630();
  }
  [*(id *)(*(void *)(a1 + 80) + 16) register:*(void *)(*(void *)(a1 + 80) + 8) forNotification:a2 registrationInfo:0];
  return sub_1000EDED4((uint64_t **)(a1 + 88), &v4, &v4);
}

void sub_101406730(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onGnssNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onGnssNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1014069C0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1014068EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10140690C(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  [*(id *)(*(void *)(a1 + 80) + 16) unregister:*(void *)(*(void *)(a1 + 80) + 8) forNotification:a2];
  uint64_t result = sub_1000ED9F4(a1 + 88, &v5);
  if (!*(void *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t result = *(void *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(_WORD *)(a1 + 288) = 0;
  }
  return result;
}

void sub_1014069C0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 13)
  {
    *(unsigned char *)(a1 + 289) = *(unsigned char *)(a4 + 824);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102324B80);
    }
    int v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      int v6 = *a3;
      *(_DWORD *)std::string buf = 67109376;
      int v9 = v6;
      __int16 v10 = 1024;
      int v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Sent unhandled notification 0x%04X (%d)", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102324B80);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLHarvestControllerExternal::onGnssNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t **sub_101406BA4(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  if (!*(void *)(a1 + 176)) {
    sub_1005AEEAC();
  }
  [*(id *)(*(void *)(a1 + 152) + 16) register:*(void *)(*(void *)(a1 + 152) + 8) forNotification:a2 registrationInfo:0, v4];
  return sub_1000EDED4((uint64_t **)(a1 + 160), &v5, &v5);
}

void sub_101406C94(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10054D514(*(unsigned char **)(a4 + 40), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101406E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101406E80(uint64_t a1, uint64_t a2)
{
  int v4 = a2;
  [*(id *)(*(void *)(a1 + 152) + 16) unregister:*(void *)(*(void *)(a1 + 152) + 8) forNotification:a2];
  uint64_t result = sub_1000ED9F4(a1 + 160, &v4);
  if (!*(void *)(a1 + 176))
  {
    uint64_t result = *(void *)(a1 + 152);
    *(void *)(a1 + 152) = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_101406F00(uint64_t a1)
{
  return sub_100016E64(*(void *)(a1 + 280));
}

id sub_101406F08(uint64_t a1, int *a2)
{
  return sub_1015766A4(*(void *)(a1 + 280), a2);
}

id sub_101406F10(uint64_t a1, int *a2)
{
  return sub_1015766FC(*(void *)(a1 + 280), a2);
}

void sub_101406F18(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
}

void sub_101406F20(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
}

void sub_101406F28(uint64_t a1, uint64_t *a2, void *a3)
{
  void (**v5)(_OWORD *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  void v17[3];
  void **v18;

  memset(v17, 0, sizeof(v17));
  int v5 = (void (**)(_OWORD *__return_ptr))[objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLWifiService") syncgetScanResult];
  if (v5)
  {
    v5[2](&v15);
    int v6 = v15;
  }
  else
  {
    char v15 = 0u;
    __int16 v16 = 0u;
    int v6 = 0;
  }
  *a3 = v6;
  if ((uint64_t *)((char *)&v15 + 8) != a2) {
    sub_1000DAC8C(a2, *((uint64_t *)&v15 + 1), v16, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - *((void *)&v15 + 1)) >> 3));
  }
  uint64_t v7 = *a2;
  __int16 v8 = a2[1];
  if (*a2 != v8)
  {
    while (!sub_10137D058(v7))
    {
      v7 += 88;
      if (v7 == v8)
      {
        uint64_t v7 = v8;
        goto LABEL_18;
      }
    }
    if (v7 != v8)
    {
      for (uint64_t i = v7 + 88; i != v8; i += 88)
      {
        if (!sub_10137D058(i))
        {
          *(void *)uint64_t v7 = *(void *)i;
          __int16 v10 = (void **)(v7 + 8);
          if (*(char *)(v7 + 31) < 0) {
            operator delete(*v10);
          }
          char v11 = *(_OWORD *)(i + 8);
          *(void *)(v7 + 24) = *(void *)(i + 24);
          *(_OWORD *)__int16 v10 = v11;
          *(unsigned char *)(i + 31) = 0;
          *(unsigned char *)(i + 8) = 0;
          id v12 = *(_OWORD *)(i + 32);
          int v13 = *(_OWORD *)(i + 48);
          __int16 v14 = *(_OWORD *)(i + 64);
          *(void *)(v7 + 80) = *(void *)(i + 80);
          *(_OWORD *)(v7 + 48) = v13;
          *(_OWORD *)(v7 + 64) = v14;
          *(_OWORD *)(v7 + 32) = v12;
          v7 += 88;
        }
      }
    }
  }
LABEL_18:
  sub_1014070F4((uint64_t)a2, v7, a2[1]);
  __int16 v18 = (void **)&v15 + 1;
  sub_1000D7F78(&v18);
  *(void *)&char v15 = v17;
  sub_1000D7F78((void ***)&v15);
}

void sub_1014070B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a9 = (void **)&a13;
  sub_1000D7F78(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1014070F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10093D2B0((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 57) < 0) {
          operator delete(*(void **)(v7 - 80));
        }
        v7 -= 88;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_10140717C()
{
}

void sub_101407244()
{
}

BOOL sub_101407268(uint64_t a1, void *a2)
{
  sub_1000C7F88(&v5);
  BOOL v3 = sub_100012960(v5, off_102478B38, a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_1014072C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014072DC(uint64_t a1, const __CFDictionary *a2, double *a3)
{
  uint64_t v4 = 0;
  uint64_t result = sub_1004BD564(a2, a3, (double *)&v4);
  if (result) {
    return TMSetSourceTime();
  }
  return result;
}

uint64_t *sub_10140732C(uint64_t a1, int a2)
{
  return sub_100778940((uint64_t *)(a1 + 232), a2, a1 + 8);
}

void sub_10140733C(uint64_t a1, int a2)
{
}

void sub_10140734C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10054DE2C(v3, a2, &v5);
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_1014073A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014073B8(uint64_t a1, int a2, uint64_t *a3)
{
}

id sub_1014073C0(uint64_t a1)
{
  return [*(id *)(a1 + 304) startLeechingVisitsForClient:*(void *)(a1 + 32)];
}

id sub_1014073D0(uint64_t a1)
{
  return [*(id *)(a1 + 304) stopLeechingVisitsForClient:*(void *)(a1 + 32)];
}

void *sub_1014073E0(void *result, void *a2)
{
  if (result[38])
  {
    uint64_t v3 = result;
    id v4 = objc_alloc((Class)CLLocation);
    [a2 coordinate];
    double v6 = v5;
    [a2 coordinate];
    id v7 = [v4 initWithLatitude:v6];
    __int16 v8 = (void *)v3[38];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1014074B0;
    void v9[3] = &unk_102305B68;
    v9[4] = a2;
    v9[5] = v3;
    return [v8 fetchLocationOfInterestAtLocation:v7 withReply:v9];
  }
  return result;
}

void sub_1014074B0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102324B80);
    }
    id v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received error when fetching LOI at location: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102324B80);
      }
      __int16 v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLHarvestControllerExternal::onVisit(CLVisit *)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 40);
    sub_10054DB84(v7, v6, a2);
  }
}

void sub_1014076AC(uint64_t a1)
{
}

void sub_1014076B4(uint64_t a1, void *a2, void *a3, void *a4)
{
}

void sub_1014076BC(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

id sub_1014076EC()
{
  return +[CLPMeta updateRegulatoryDomainEstimates];
}

void sub_1014076F8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void *sub_101407728(void *a1)
{
  *a1 = off_102324BD0;
  sub_100998C38(a1 + 1);
  return a1;
}

void sub_10140776C(void *a1)
{
  *a1 = off_102324BD0;
  sub_100998C38(a1 + 1);

  operator delete();
}

id sub_1014077D0(uint64_t a1)
{
  return sub_1001B0AE4(a1 + 8);
}

id sub_1014077D8(uint64_t a1, double a2)
{
  return sub_1001165F8(a1 + 8, a2);
}

void sub_1014077E0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101407848(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101AB4404(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101407860(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_101407890(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1014078D4()
{
  uint64_t v2 = *(NSObject **)(v0 + 1384);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1014078F0()
{
  uint64_t v2 = *(NSObject **)(v0 + 1384);
  return os_signpost_enabled(v2);
}

void sub_10140791C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DB6D6C;
      v0[3] = unk_101DB6D7C;
      v0[4] = xmmword_101DB6D8C;
      v0[0] = xmmword_101DB6D4C;
      v0[1] = unk_101DB6D5C;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1014079FC(_Unwind_Exception *a1)
{
}

void sub_101407A14()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101407A94()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101407B24(_Unwind_Exception *a1)
{
}

uint64_t sub_101407B3C()
{
  sub_100134750(&xmmword_102487978, "HarvestController");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102487978, (void *)&_mh_execute_header);
}

void sub_101407B9C(double *a1, uint64_t *a2, uint64_t a3)
{
  sub_10106EA88(a3, (uint64_t)v15);
  if (sub_1013F0F8C(*a2))
  {
    double v5 = sub_1013F11A8(*a2, (uint64_t)v15);
    double v6 = *a1;
    double v7 = a1[1];
    if (*a1 > v5 || v6 < 0.0) {
      double v6 = v5;
    }
    if (v7 >= v5 && v7 >= 0.0) {
      double v5 = a1[1];
    }
    *a1 = v6;
    a1[1] = v5;
  }
  if (sub_1013F1064(*a2))
  {
    double v10 = sub_1013F12A4(*a2, (uint64_t)v15);
    double v11 = a1[2];
    double v12 = a1[3];
    if (v11 > v10 || v11 < 0.0) {
      double v11 = v10;
    }
    if (v12 >= v10 && v12 >= 0.0) {
      double v10 = a1[3];
    }
    a1[2] = v11;
    a1[3] = v10;
  }
}

uint64_t sub_101407C5C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 96) = *a2;
  *(void *)(a1 + 104) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(CFAbsoluteTime *)(a1 + 120) = CFAbsoluteTimeGetCurrent();
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 128) = _Q0;
  *(_OWORD *)(a1 + 144) = _Q0;
  *(_OWORD *)(a1 + 160) = _Q0;
  *(_OWORD *)(a1 + 176) = _Q0;
  sub_101407D1C(a1);
  return a1;
}

void sub_101407CEC(_Unwind_Exception *a1)
{
  double v7 = *(std::__shared_weak_count **)(v3 + 104);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v5);
  sub_1000F5BB0(v1, *v4);
  _Unwind_Resume(a1);
}

__n128 sub_101407D1C(uint64_t a1)
{
  uint64_t v1 = (__n128 *)a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (void *)(a1 + 56);
  sub_1000F5BB0(a1 + 48, *(void **)(a1 + 56));
  v1[3].n128_u64[0] = (unint64_t)v2;
  void *v2 = 0;
  uint64_t v3 = (void *)v1[5].n128_u64[0];
  v1 += 5;
  v1[-1].n128_u64[0] = 0;
  sub_1000F5BB0((uint64_t)&v1[-1].n128_i64[1], v3);
  v1[-1].n128_u64[1] = (unint64_t)v1;
  v1->n128_u64[0] = 0;
  v1->n128_u64[1] = 0;
  v1[2].n128_f64[0] = CFAbsoluteTimeGetCurrent();
  __asm { FMOV            V0.2D, #-1.0 }
  v1[3] = result;
  v1[4] = result;
  v1[5] = result;
  v1[6] = result;
  v1[-3].n128_u64[0] = 0;
  v1[-3].n128_u32[2] = 0;
  return result;
}

uint64_t sub_101407D94(uint64_t a1)
{
  if (vabdd_f64(*(double *)(a1 + 120), *(double *)(a1 + 112)) < 0.0001) {
    sub_101407E04(a1, 0xE10uLL);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000F5BB0(a1 + 72, *(void **)(a1 + 80));
  sub_1000F5BB0(a1 + 48, *(void **)(a1 + 56));
  return a1;
}

CFAbsoluteTime sub_101407E04(uint64_t a1, unint64_t a2)
{
  CFAbsoluteTime result = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 112);
  if (result >= (double)a2 && *(_DWORD *)a1 + *(_DWORD *)(a1 + 4))
  {
    sub_101408050((double *)a1);
    *(void *)&CFAbsoluteTime result = sub_101407D1C(a1).n128_u64[0];
  }
  return result;
}

BOOL sub_101407E78(uint64_t a1)
{
  sub_101407E04(a1, 0x15180uLL);
  ++*(_DWORD *)(a1 + 12);
  BOOL result = sub_1013F113C(*(void *)(a1 + 96));
  if (!result)
  {
    uint64_t v3 = (_DWORD *)(a1 + 28);
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 24);
  if (sub_1013F0F8C(*(void *)(a1 + 96))) {
    ++*(_DWORD *)(a1 + 16);
  }
  BOOL result = sub_1013F1064(*(void *)(a1 + 96));
  if (result)
  {
    uint64_t v3 = (_DWORD *)(a1 + 20);
LABEL_7:
    ++*v3;
  }
  return result;
}

void sub_101407F04(uint64_t a1, uint64_t *a2)
{
  ++*(_DWORD *)a1;
  uint64_t v8 = *a2;
  sub_100589490((uint64_t **)(a1 + 48), &v8, &v8);
  id v4 = (double *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 96);
  double v6 = *(std::__shared_weak_count **)(a1 + 104);
  v7[0] = v5;
  v7[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101407B9C(v4, v7, (uint64_t)a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_101407F84(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101407F9C(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 4);
  uint64_t v3 = (double *)(a1 + 160);
  id v4 = *(std::__shared_weak_count **)(a1 + 104);
  v5[0] = *(void *)(a1 + 96);
  v5[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101407B9C(v3, v5, a2);
  if (v4)
  {
    sub_1000DB0A0(v4);
  }
}

void sub_101408020(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_101408038(uint64_t a1, uint64_t *a2)
{
  return sub_100589490((uint64_t **)(a1 + 72), a2, a2);
}

uint64_t sub_101408050(double *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 16);
  uint64_t v3 = *((unsigned int *)a1 + 22);
  CFAbsoluteTime v4 = (CFAbsoluteTimeGetCurrent() - a1[14]) / 3600.0;
  CFAbsoluteTime v5 = (CFAbsoluteTimeGetCurrent() - a1[15]) / 3600.0;
  v9[0] = @"numBadAps";
  v10[0] = +[NSNumber numberWithInt:*(unsigned int *)a1];
  v9[1] = @"numDistinctBadAps";
  v10[1] = +[NSNumber numberWithInt:v2];
  v9[2] = @"numGoodAps";
  v10[2] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 1)];
  void v9[3] = @"numApsRemovedFromDatabase";
  v10[3] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 2)];
  v9[4] = @"numDistinctApsRemovedFromDatabase";
  v10[4] = +[NSNumber numberWithInt:v3];
  v9[5] = @"numCrossCheckCentroidsRequests";
  v10[5] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 3)];
  void v9[6] = @"numCrossCheckCentroidsRequestsWithGps";
  v10[6] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 4)];
  v9[7] = @"numCrossCheckCentroidsRequestsWithCell";
  v10[7] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 5)];
  v9[8] = @"numCrossCheckCentroidsRequestsWithGpsOrCell";
  v10[8] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 6)];
  v9[9] = @"numCrossCheckCentroidsRequestsWithoutGpsOrCell";
  v10[9] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 7)];
  v9[10] = @"maxGpsDistanceToBadCentroids";
  v10[10] = +[NSNumber numberWithInt:(int)a1[17]];
  v9[11] = @"minGpsDistanceToBadCentroids";
  v10[11] = +[NSNumber numberWithInt:(int)a1[16]];
  v9[12] = @"maxCellDistanceToBadCentroids";
  v10[12] = +[NSNumber numberWithInt:(int)a1[19]];
  v9[13] = @"minCellDistanceToBadCentroids";
  v10[13] = +[NSNumber numberWithInt:(int)a1[18]];
  v9[14] = @"maxGpsDistanceToGoodCentroids";
  v10[14] = +[NSNumber numberWithInt:(int)a1[21]];
  v9[15] = @"minGpsDistanceToGoodCentroids";
  v10[15] = +[NSNumber numberWithInt:(int)a1[20]];
  unsigned char v9[16] = @"maxCellDistanceToGoodCentroids";
  v10[16] = +[NSNumber numberWithInt:(int)a1[23]];
  v9[17] = @"minCellDistanceToGoodCentroids";
  v10[17] = +[NSNumber numberWithInt:(int)a1[22]];
  v9[18] = @"eventDurationInHours";
  v10[18] = +[NSNumber numberWithDouble:v4];
  v9[19] = @"sessionDurationInHours";
  v10[19] = +[NSNumber numberWithDouble:v5];
  +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:20];
  AnalyticsSendEventLazy();
  v7[0] = @"bothCrossCheckersMatch";
  v8[0] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 8)];
  v7[1] = @"rejectedByGpsCrossCheck";
  v8[1] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 9)];
  uint64_t v7[2] = @"rejectedByCellCrossCheck";
  v8[2] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 10)];
  +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];
  return AnalyticsSendEventLazy();
}

uint64_t sub_101408460(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_101408468(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

_DWORD *sub_101408470(_DWORD *result, int a2, int a3)
{
  if (a2 == a3)
  {
    ++result[8];
  }
  else if (a2)
  {
    ++result[9];
  }
  else
  {
    ++result[10];
  }
  return result;
}

double sub_1014084AC(int a1, int a2)
{
  if (a1 == 2)
  {
    double v2 = -0.122;
    double v3 = 6.08;
  }
  else if (a1 == 1)
  {
    double v2 = -0.17;
    double v3 = 4.65;
  }
  else
  {
    double v2 = -0.12;
    double v3 = 4.63;
  }
  double v4 = (double)a2;
  if ((double)a2 < 20.0) {
    double v4 = 20.0;
  }
  double result = v3 + v2 * v4;
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

void sub_101408518(uint64_t a1, long long *a2)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  double v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)a2 + 1);
    int v6 = *((_DWORD *)a2 + 4);
    int v7 = *((_DWORD *)a2 + 5);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[live data] updating elevation anchor, startTime, %f, elevationAscended, %u, elevationDescended, %u", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::SourceData<CLElevationChangeEntry>::setAnchor(const CLElevationChangeEntry &) [T = CLElevationChangeEntry]", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  int v8 = *(unsigned __int8 *)(a1 + 64);
  long long v9 = a2[3];
  long long v11 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v10;
  if (!v8) {
    *(unsigned char *)(a1 + 64) = 1;
  }
}

void sub_101408720(uint64_t a1, uint64_t *a2)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  double v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[6];
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v19 = v5;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[live data] updating odometer anchor, startTime, %f, odometer, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::SourceData<CLOdometerEntry>::setAnchor(const CLOdometerEntry &) [T = CLOdometerEntry]", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  int v7 = *(unsigned __int8 *)(a1 + 192);
  long long v8 = *((_OWORD *)a2 + 3);
  long long v10 = *(_OWORD *)a2;
  long long v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v9;
  long long v11 = *((_OWORD *)a2 + 7);
  long long v13 = *((_OWORD *)a2 + 4);
  long long v12 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v12;
  long long v14 = *((_OWORD *)a2 + 11);
  long long v16 = *((_OWORD *)a2 + 8);
  long long v15 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v15;
  if (!v7) {
    *(unsigned char *)(a1 + 192) = 1;
  }
}

uint64_t sub_101408938(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(unsigned char *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  *(void *)(a1 + 912) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 873) = 0u;
  *(CFAbsoluteTime *)(a1 + 888) = CFAbsoluteTimeGetCurrent();
  *(unsigned char *)(a1 + 896) = 1;
  return a1;
}

void sub_1014089C0(uint64_t a1, uint64_t *a2, unsigned __int8 *src)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string __p = 0;
  int v56 = 0;
  uint64_t v57 = 0;
  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, src);
  if (sub_10107AF48(v4, dst, &__p) == 100)
  {
    int v7 = (double *)__p;
    uint64_t v6 = v56;
    if (__p == v56)
    {
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      int v53 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "[live data] no published runs exist yet, including missing anchor", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_102324C80);
        }
        LOWORD(v58) = 0;
        char v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v54);
        if (v54 != (char *)buf) {
          free(v54);
        }
      }
    }
    else
    {
      double v8 = 0.0;
      do
      {
        if (vabdd_f64(v7[6], v7[5]) >= 2.22044605e-16)
        {
          if (qword_102419180 != -1) {
            dispatch_once(&qword_102419180, &stru_102324C80);
          }
          uint64_t v23 = qword_102419188;
          if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = *(void *)v7;
            uint64_t v25 = *((void *)v7 + 5);
            uint64_t v26 = *((void *)v7 + 6);
            uint64_t v27 = *((void *)v7 + 7);
            uint64_t v28 = *((void *)v7 + 11);
            uint64_t v29 = *((void *)v7 + 9);
            *(_DWORD *)std::string buf = 134219264;
            *(void *)int v63 = v24;
            *(_WORD *)&v63[8] = 2048;
            *(void *)&v63[10] = v25;
            *(_WORD *)&v63[18] = 2048;
            *(void *)&v63[20] = v26;
            *(_WORD *)&v63[28] = 2048;
            *(void *)&v63[30] = v27;
            *(_WORD *)&v63[38] = 2048;
            *(void *)&v63[40] = v28;
            __int16 v64 = 2048;
            uint64_t v65 = v29;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[live data] query returned existing runs for workout,recordId,%llu,startTime,%f,endTime,%f,distance,%f,vertical,%f,maxSpeed,%f", buf, 0x3Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419180 != -1) {
              dispatch_once(&qword_102419180, &stru_102324C80);
            }
            uint64_t v31 = *(void *)v7;
            uint64_t v32 = *((void *)v7 + 5);
            uint64_t v33 = *((void *)v7 + 6);
            uint64_t v34 = *((void *)v7 + 7);
            uint64_t v35 = *((void *)v7 + 11);
            uint64_t v36 = *((void *)v7 + 9);
            int v58 = 134219264;
            *(void *)int v59 = v31;
            *(_WORD *)&v59[8] = 2048;
            *(void *)&unsigned char v59[10] = v32;
            *(_WORD *)&v59[18] = 2048;
            *(void *)&v59[20] = v33;
            *(_WORD *)&v59[28] = 2048;
            *(void *)&v59[30] = v34;
            *(_WORD *)&v59[38] = 2048;
            *(void *)&v59[40] = v35;
            __int16 v60 = 2048;
            uint64_t v61 = v36;
            double v37 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v37);
            if (v37 != (char *)buf) {
              free(v37);
            }
          }
          double v8 = v8 + vabdd_f64(v7[6], v7[5]);
          if (*(double *)(a1 + 912) >= v7[9]) {
            uint64_t v30 = *(void *)(a1 + 912);
          }
          else {
            uint64_t v30 = *((void *)v7 + 9);
          }
          *(void *)(a1 + 912) = v30;
          ++*(_DWORD *)(a1 + 904);
        }
        else
        {
          if (qword_102419180 != -1) {
            dispatch_once(&qword_102419180, &stru_102324C80);
          }
          long long v9 = qword_102419188;
          if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)v7;
            uint64_t v11 = *((void *)v7 + 5);
            uint64_t v12 = *((void *)v7 + 6);
            uint64_t v13 = *((void *)v7 + 7);
            uint64_t v14 = *((void *)v7 + 11);
            uint64_t v15 = *((void *)v7 + 9);
            *(_DWORD *)std::string buf = 134219264;
            *(void *)int v63 = v10;
            *(_WORD *)&v63[8] = 2048;
            *(void *)&v63[10] = v11;
            *(_WORD *)&v63[18] = 2048;
            *(void *)&v63[20] = v12;
            *(_WORD *)&v63[28] = 2048;
            *(void *)&v63[30] = v13;
            *(_WORD *)&v63[38] = 2048;
            *(void *)&v63[40] = v14;
            __int16 v64 = 2048;
            uint64_t v65 = v15;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[live data] got anchor run,recordId,%llu,startTime,%f,endTime,%f,distance,%f,vertical,%f,maxSpeed,%f", buf, 0x3Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419180 != -1) {
              dispatch_once(&qword_102419180, &stru_102324C80);
            }
            uint64_t v16 = *(void *)v7;
            uint64_t v17 = *((void *)v7 + 5);
            uint64_t v18 = *((void *)v7 + 6);
            uint64_t v19 = *((void *)v7 + 7);
            uint64_t v20 = *((void *)v7 + 11);
            uint64_t v21 = *((void *)v7 + 9);
            int v58 = 134219264;
            *(void *)int v59 = v16;
            *(_WORD *)&v59[8] = 2048;
            *(void *)&unsigned char v59[10] = v17;
            *(_WORD *)&v59[18] = 2048;
            *(void *)&v59[20] = v18;
            *(_WORD *)&v59[28] = 2048;
            *(void *)&v59[30] = v19;
            *(_WORD *)&v59[38] = 2048;
            *(void *)&v59[40] = v20;
            __int16 v60 = 2048;
            uint64_t v61 = v21;
            __int16 v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
          }
        }
        v7 += 12;
      }
      while (v7 != v6);
      double v40 = *(v56 - 5) - *((double *)__p + 7);
      double v41 = *(v56 - 1) - *((double *)__p + 11);
      *(double *)(a1 + 864) = v8;
      *(double *)(a1 + 872) = v40;
      *(double *)(a1 + 880) = v41;
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      uint64_t v42 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = *(_DWORD *)(a1 + 904);
        uint64_t v44 = *(void *)(a1 + 864);
        uint64_t v45 = *(void *)(a1 + 872);
        uint64_t v46 = *(void *)(a1 + 880);
        uint64_t v47 = *(void *)(a1 + 912);
        *(_DWORD *)std::string buf = 67110144;
        *(_DWORD *)int v63 = v43;
        *(_WORD *)&v63[4] = 2048;
        *(void *)&v63[6] = v44;
        *(_WORD *)&v63[14] = 2048;
        *(void *)&v63[16] = v45;
        *(_WORD *)&v63[24] = 2048;
        *(void *)&v63[26] = v46;
        *(_WORD *)&v63[34] = 2048;
        *(void *)&v63[36] = v47;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[live data] starting off with published run metrics,runCount,%d,publishedDuration,%f,publishedDistance,%f,publishedElevation,%f,maxSpeed,%f", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_102324C80);
        }
        int v48 = *(_DWORD *)(a1 + 904);
        uint64_t v49 = *(void *)(a1 + 864);
        uint64_t v50 = *(void *)(a1 + 872);
        uint64_t v51 = *(void *)(a1 + 880);
        uint64_t v52 = *(void *)(a1 + 912);
        int v58 = 67110144;
        *(_DWORD *)int v59 = v48;
        *(_WORD *)&v59[4] = 2048;
        *(void *)&v59[6] = v49;
        *(_WORD *)&v59[14] = 2048;
        *(void *)&v59[16] = v50;
        *(_WORD *)&v59[24] = 2048;
        *(void *)&v59[26] = v51;
        *(_WORD *)&v59[34] = 2048;
        *(void *)&v59[36] = v52;
        int v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v39);
LABEL_47:
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
    }
  }
  else
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    unint64_t v38 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "[live data] couldn't query db for published runs", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      LOWORD(v58) = 0;
      int v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSkiLiveDataController::setup(CLSkiDataStore &, const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v39);
      goto LABEL_47;
    }
  }
  if (__p)
  {
    int v56 = (double *)__p;
    operator delete(__p);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1014092A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014092F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 896);
  if (!v3) {
    goto LABEL_10;
  }
  if (!sub_1014095CC(a1))
  {
    char v3 = 0;
LABEL_10:
    *(unsigned char *)a2 = 0;
    goto LABEL_11;
  }
  double v5 = *(double *)(a1 + 832) + *(double *)(a1 + 856);
  double v6 = *(double *)(a1 + 816) + *(double *)(a1 + 840) + *(double *)(a1 + 864);
  double v7 = *(double *)(a1 + 824) + *(double *)(a1 + 848) + *(double *)(a1 + 872);
  double v8 = *(double *)(a1 + 880);
  uint64_t v9 = *(void *)(a1 + 616);
  int v10 = *(_DWORD *)(a1 + 904) + 1;
  uint64_t v11 = *(void *)(a1 + 912);
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  double v12 = v5 + v8;
  uint64_t v13 = qword_102419188;
  double v14 = v7 / v6;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 904) + 1;
    *(_DWORD *)std::string buf = 67110656;
    int v18 = v15;
    __int16 v19 = 2048;
    uint64_t v20 = v9;
    __int16 v21 = 2048;
    double v22 = v7;
    __int16 v23 = 2048;
    double v24 = v12;
    __int16 v25 = 2048;
    double v26 = v14;
    __int16 v27 = 2048;
    uint64_t v28 = v11;
    __int16 v29 = 1024;
    int v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[live data] sending update,pendingRunCount,%d,updateTime,%f,distance,%f,vertical,%f,speed,%f,maxSpeed,%f,runCount,%d", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<CLLiveSkiData> CLSkiLiveDataController::tick()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  *(void *)a2 = v9;
  *(double *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 32) = v10;
  char v3 = 1;
  *(void *)(a2 + 40) = v11;
LABEL_11:
  *(unsigned char *)(a2 + 48) = v3;
}

BOOL sub_1014095CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64)
    || !*(unsigned char *)(a1 + 136)
    || !*(unsigned char *)(a1 + 208)
    || !*(unsigned char *)(a1 + 408)
    || !*(unsigned char *)(a1 + 608)
    || !*(unsigned char *)(a1 + 808)
    || !*(unsigned char *)(a1 + 896))
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    uint64_t v9 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
    {
      int v10 = *(unsigned __int8 *)(a1 + 408);
      int v11 = *(unsigned __int8 *)(a1 + 808);
      int v12 = *(unsigned __int8 *)(a1 + 64);
      int v13 = *(unsigned __int8 *)(a1 + 208);
      int v14 = *(unsigned __int8 *)(a1 + 896);
      *(_DWORD *)std::string buf = 67110144;
      *(_DWORD *)uint64_t v49 = v10;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v11;
      *(_WORD *)&v49[10] = 1024;
      *(_DWORD *)&v49[12] = v12;
      *(_WORD *)&v49[16] = 1024;
      *(_DWORD *)&v49[18] = v13;
      *(_WORD *)&v49[22] = 1024;
      *(_DWORD *)&v49[24] = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[live data] invalid update, odometer validity, %d, %d, elevation validity, %d, %d, tracking state %d", buf, 0x20u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419180 == -1)
    {
LABEL_66:
      int v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
      return 0;
    }
    goto LABEL_81;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 160);
  unsigned int v3 = *(_DWORD *)(a1 + 164);
  double v4 = *(double *)(a1 + 152);
  double v5 = (double)(v3 - *(_DWORD *)(a1 + 92));
  double v6 = ((double)(v2 - *(_DWORD *)(a1 + 88)) - v5) / (v4 - *(double *)(a1 + 80));
  if (v6 <= -39.9287987)
  {
    *(double *)&unint64_t v15 = (double)v2;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    LODWORD(v15) = *(_DWORD *)(a1 + 20);
    double v16 = ((double)v3 - (double)v2 + (double)*(unint64_t *)&v5 - (double)v15) / 100.0;
    double v17 = *(double *)(a1 + 664) - *(double *)(a1 + 264);
    double v18 = v17 * v17 + v16 * v16;
    double v19 = vabdd_f64(*(double *)(a1 + 616), *(double *)(a1 + 216));
    double v20 = vabdd_f64(v4, *(double *)(a1 + 8));
    if (qword_102419180 != -1)
    {
      double v47 = v20;
      dispatch_once(&qword_102419180, &stru_102324C80);
      double v20 = v47;
    }
    double v21 = fabs(v16);
    double v22 = fmax(v19, v20);
    __int16 v23 = qword_102419188;
    double v24 = sqrt(v18);
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
    {
      int v25 = *(_DWORD *)(a1 + 904) + 1;
      double v26 = *(double *)(a1 + 8);
      *(void *)&v49[16] = *(void *)(a1 + 152);
      *(double *)&v49[6] = v26;
      double v27 = *(double *)&v49[16] - v26;
      double v28 = *(double *)(a1 + 216);
      double v51 = *(double *)(a1 + 616);
      *(double *)&v49[36] = v28;
      double v29 = v51 - v28;
      uint64_t v30 = *(void *)(a1 + 824);
      uint64_t v31 = *(void *)(a1 + 832);
      uint64_t v32 = *(void *)(a1 + 816);
      *(_DWORD *)std::string buf = 67112192;
      *(_DWORD *)uint64_t v49 = v25;
      *(_WORD *)&v49[4] = 2048;
      *(_WORD *)&v49[14] = 2048;
      *(_WORD *)&v49[24] = 2048;
      *(double *)&v49[26] = v27;
      *(_WORD *)&v49[34] = 2048;
      __int16 v50 = 2048;
      __int16 v52 = 2048;
      double v53 = v29;
      __int16 v54 = 2048;
      uint64_t v55 = v30;
      __int16 v56 = 2048;
      double v57 = v24;
      __int16 v58 = 2048;
      uint64_t v59 = v31;
      __int16 v60 = 2048;
      double v61 = v21;
      __int16 v62 = 2048;
      uint64_t v63 = v32;
      __int16 v64 = 2048;
      double v65 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "[live data] intermediates,pendingRunCount,%d, elevationAnchorTime,%f,elevationCurrentTime,%f,elevationDelta,%f,odometerAnchorTime,%f,odometerCurrentTime,%f,odometerDelta,%f,currentDistance,%f,proposedDistance,%f,currentVertical,%f,proposedVertical,%f,currentDuration,%f,proposedDuration,%f", buf, 0x80u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      uint64_t v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    double v33 = *(double *)(a1 + 848);
    if (v33 > 0.0 || *(double *)(a1 + 856) > 0.0)
    {
      if (v33 > v24 || *(double *)(a1 + 856) > v21)
      {
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_102324C80);
        }
        uint64_t v34 = qword_102419188;
        if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = *(void *)(a1 + 848);
          uint64_t v36 = *(void *)(a1 + 856);
          *(_DWORD *)std::string buf = 134218752;
          *(void *)uint64_t v49 = v35;
          *(_WORD *)&v49[8] = 2048;
          *(void *)&v49[10] = v36;
          *(_WORD *)&v49[18] = 2048;
          *(double *)&v49[20] = v24;
          *(_WORD *)&v49[28] = 2048;
          *(double *)&v49[30] = v21;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[live data] still have overhead to make up, overhead distance,%f,overhead vertical,%f,proposed distance,%f,proposed vertical,%f", buf, 0x2Au);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419180 == -1) {
          goto LABEL_66;
        }
        goto LABEL_81;
      }
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      double v37 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "[live data] resetting overhead as we've reconciled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_102324C80);
        }
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      *(void *)(a1 + 840) = 0;
      *(void *)(a1 + 848) = 0;
      *(void *)(a1 + 856) = 0;
    }
    if (v22 < *(double *)(a1 + 816)
      || (double v38 = *(double *)(a1 + 824), v24 < v38)
      || (double v39 = *(double *)(a1 + 832), v21 < v39))
    {
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      double v40 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "[live data] metrics should be monotonically increasing!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_102324C80);
        }
        uint64_t v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSkiLiveDataController::updateCurrentRun()", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
      goto LABEL_52;
    }
    if (v24 != v38 || v21 != v39)
    {
LABEL_52:
      *(double *)(a1 + 816) = v22;
      *(double *)(a1 + 824) = v24;
      BOOL result = 1;
      *(double *)(a1 + 832) = v21;
      return result;
    }
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    uint64_t v42 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[live data] skipping update because it's unchanged", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419180 == -1) {
      goto LABEL_66;
    }
LABEL_81:
    dispatch_once(&qword_102419180, &stru_102324C80);
    goto LABEL_66;
  }
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  double v7 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(double *)uint64_t v49 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[live data] sample failed descent rate threshold, %f", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 == -1) {
      goto LABEL_66;
    }
    goto LABEL_81;
  }
  return result;
}

void sub_10140A130(uint64_t a1, uint64_t a2)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  double v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] feeding elevation,startTime,%f,elevationUp,%u,elevationDown,%u", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedElevation(const CLElevationChangeEntry &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10140A328(a1, a1, (double *)a2);
}

void sub_10140A328(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(unsigned char *)(a1 + 896))
  {
    uint64_t v5 = (long long *)(a2 + 144);
    if (*(unsigned char *)(a2 + 208))
    {
      if (*(double *)(a2 + 152) != a3[1])
      {
        long long v6 = *v5;
        *(_OWORD *)(a2 + 88) = *(_OWORD *)(a2 + 160);
        long long v7 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a2 + 120) = v7;
        *(unsigned char *)(a2 + 136) = *(unsigned char *)(a2 + 208);
        *(_OWORD *)(a2 + 72) = v6;
        long long v9 = *((_OWORD *)a3 + 2);
        long long v8 = *((_OWORD *)a3 + 3);
        long long v10 = *((_OWORD *)a3 + 1);
        long long *v5 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 160) = v10;
        *(_OWORD *)(a2 + 176) = v9;
        *(_OWORD *)(a2 + 192) = v8;
      }
    }
    else
    {
      long long v11 = *(_OWORD *)a3;
      long long v12 = *((_OWORD *)a3 + 1);
      long long v13 = *((_OWORD *)a3 + 3);
      *(_OWORD *)(a2 + 176) = *((_OWORD *)a3 + 2);
      *(_OWORD *)(a2 + 192) = v13;
      long long *v5 = v11;
      *(_OWORD *)(a2 + 160) = v12;
      *(unsigned char *)(a2 + 208) = 1;
    }
    if (!*(unsigned char *)(a2 + 64) && sub_10140B29C(a1 + 72, a1 + 144))
    {
      sub_101408518(a2, (long long *)a3);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 64)) {
      *(unsigned char *)(a2 + 64) = 0;
    }
    if (*(unsigned char *)(a2 + 136)) {
      *(unsigned char *)(a2 + 136) = 0;
    }
    if (*(unsigned char *)(a2 + 208)) {
      *(unsigned char *)(a2 + 208) = 0;
    }
  }
}

void sub_10140A424(uint64_t a1, uint64_t *a2)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  double v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[6];
    uint64_t v7 = a2[4];
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] feeding odometer,startTime,%f,distance,%f,speed,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedOdometer(const CLOdometerEntry &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10140A624(a1, a1 + 216, a2);
}

void sub_10140A624(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 896))
  {
    uint64_t v5 = (double *)(a2 + 400);
    if (*(unsigned char *)(a2 + 592))
    {
      if (*v5 != *(double *)a3)
      {
        long long v6 = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a2 + 248) = *(_OWORD *)(a2 + 448);
        *(_OWORD *)(a2 + 232) = v6;
        long long v7 = *(_OWORD *)v5;
        *(_OWORD *)(a2 + 216) = *(_OWORD *)(a2 + 416);
        long long v8 = *(_OWORD *)(a2 + 512);
        *(_OWORD *)(a2 + 296) = *(_OWORD *)(a2 + 496);
        *(_OWORD *)(a2 + 312) = v8;
        long long v9 = *(_OWORD *)(a2 + 480);
        *(_OWORD *)(a2 + 264) = *(_OWORD *)(a2 + 464);
        *(_OWORD *)(a2 + 280) = v9;
        *(unsigned char *)(a2 + 392) = *(unsigned char *)(a2 + 592);
        long long v10 = *(_OWORD *)(a2 + 576);
        *(_OWORD *)(a2 + 360) = *(_OWORD *)(a2 + 560);
        *(_OWORD *)(a2 + 376) = v10;
        long long v11 = *(_OWORD *)(a2 + 544);
        *(_OWORD *)(a2 + 328) = *(_OWORD *)(a2 + 528);
        *(_OWORD *)(a2 + 344) = v11;
        *(_OWORD *)(a2 + 200) = v7;
        long long v12 = *(_OWORD *)a3;
        long long v13 = *((_OWORD *)a3 + 1);
        long long v14 = *((_OWORD *)a3 + 3);
        *(_OWORD *)(a2 + 432) = *((_OWORD *)a3 + 2);
        *(_OWORD *)(a2 + 448) = v14;
        *(_OWORD *)uint64_t v5 = v12;
        *(_OWORD *)(a2 + 416) = v13;
        long long v15 = *((_OWORD *)a3 + 4);
        long long v16 = *((_OWORD *)a3 + 5);
        long long v17 = *((_OWORD *)a3 + 7);
        *(_OWORD *)(a2 + 496) = *((_OWORD *)a3 + 6);
        *(_OWORD *)(a2 + 512) = v17;
        *(_OWORD *)(a2 + 464) = v15;
        *(_OWORD *)(a2 + 480) = v16;
        long long v18 = *((_OWORD *)a3 + 8);
        long long v19 = *((_OWORD *)a3 + 9);
        long long v20 = *((_OWORD *)a3 + 11);
        *(_OWORD *)(a2 + 560) = *((_OWORD *)a3 + 10);
        *(_OWORD *)(a2 + 576) = v20;
        *(_OWORD *)(a2 + 528) = v18;
        *(_OWORD *)(a2 + 544) = v19;
      }
    }
    else
    {
      long long v21 = *(_OWORD *)a3;
      long long v22 = *((_OWORD *)a3 + 1);
      long long v23 = *((_OWORD *)a3 + 3);
      *(_OWORD *)(a2 + 432) = *((_OWORD *)a3 + 2);
      *(_OWORD *)(a2 + 448) = v23;
      *(_OWORD *)uint64_t v5 = v21;
      *(_OWORD *)(a2 + 416) = v22;
      long long v24 = *((_OWORD *)a3 + 4);
      long long v25 = *((_OWORD *)a3 + 5);
      long long v26 = *((_OWORD *)a3 + 7);
      *(_OWORD *)(a2 + 496) = *((_OWORD *)a3 + 6);
      *(_OWORD *)(a2 + 512) = v26;
      *(_OWORD *)(a2 + 464) = v24;
      *(_OWORD *)(a2 + 480) = v25;
      long long v27 = *((_OWORD *)a3 + 8);
      long long v28 = *((_OWORD *)a3 + 9);
      long long v29 = *((_OWORD *)a3 + 11);
      *(_OWORD *)(a2 + 560) = *((_OWORD *)a3 + 10);
      *(_OWORD *)(a2 + 576) = v29;
      *(_OWORD *)(a2 + 528) = v27;
      *(_OWORD *)(a2 + 544) = v28;
      *(unsigned char *)(a2 + 592) = 1;
    }
    if (!*(unsigned char *)(a2 + 192) && sub_10140B29C(a1 + 72, a1 + 144))
    {
      sub_101408720(a2, a3);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 192)) {
      *(unsigned char *)(a2 + 192) = 0;
    }
    if (*(unsigned char *)(a2 + 392)) {
      *(unsigned char *)(a2 + 392) = 0;
    }
    if (*(unsigned char *)(a2 + 592)) {
      *(unsigned char *)(a2 + 592) = 0;
    }
  }
}

void sub_10140A784(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    unsigned int v3 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[live data] resumed tracking,now,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      CFAbsoluteTimeGetCurrent();
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedTrackingUpdate(BOOL)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(CFAbsoluteTime *)(a1 + 888) = CFAbsoluteTimeGetCurrent();
    *(unsigned char *)(a1 + 896) = 1;
  }
  else
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    double v4 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134217984;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] paused tracking,now,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      CFAbsoluteTimeGetCurrent();
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedTrackingUpdate(BOOL)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (*(unsigned char *)(a1 + 896)) {
      *(unsigned char *)(a1 + 896) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 64)) {
    *(unsigned char *)(a1 + 64) = 0;
  }
  if (*(unsigned char *)(a1 + 136)) {
    *(unsigned char *)(a1 + 136) = 0;
  }
  if (*(unsigned char *)(a1 + 208)) {
    *(unsigned char *)(a1 + 208) = 0;
  }
  if (*(unsigned char *)(a1 + 408)) {
    *(unsigned char *)(a1 + 408) = 0;
  }
  if (*(unsigned char *)(a1 + 608)) {
    *(unsigned char *)(a1 + 608) = 0;
  }
  if (*(unsigned char *)(a1 + 808)) {
    *(unsigned char *)(a1 + 808) = 0;
  }
}

void sub_10140AAF0(uint64_t a1, double *a2, int a3)
{
  if (a3)
  {
    ++*(_DWORD *)(a1 + 904);
    *(double *)(a1 + 864) = *(double *)(a1 + 864) + a2[6] - a2[5];
    *(double *)(a1 + 872) = a2[7] + *(double *)(a1 + 872);
    *(double *)(a1 + 880) = a2[11] + *(double *)(a1 + 880);
  }
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_102324C80);
  }
  long long v6 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 904);
    double v8 = *a2;
    double v9 = a2[5];
    double v10 = a2[6];
    uint64_t v11 = *((void *)a2 + 11);
    uint64_t v12 = *((void *)a2 + 7);
    uint64_t v13 = *((void *)a2 + 8);
    uint64_t v14 = *(void *)(a1 + 816);
    uint64_t v15 = *(void *)(a1 + 824);
    uint64_t v16 = *(void *)(a1 + 832);
    uint64_t v17 = *(void *)(a1 + 864);
    uint64_t v18 = *(void *)(a1 + 872);
    uint64_t v19 = *(void *)(a1 + 880);
    *(_DWORD *)std::string buf = 67112704;
    *(_DWORD *)long long v26 = a3;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)&v26[6] = v7;
    *(_WORD *)long long v27 = 2048;
    *(double *)&v27[2] = v8;
    __int16 v28 = 2048;
    double v29 = v9;
    __int16 v30 = 2048;
    double v31 = v10;
    __int16 v32 = 2048;
    double v33 = v10 - v9;
    __int16 v34 = 2048;
    uint64_t v35 = v12;
    __int16 v36 = 2048;
    uint64_t v37 = v11;
    __int16 v38 = 2048;
    uint64_t v39 = v13;
    __int16 v40 = 2048;
    uint64_t v41 = v14;
    __int16 v42 = 2048;
    uint64_t v43 = v15;
    __int16 v44 = 2048;
    uint64_t v45 = v16;
    __int16 v46 = 2048;
    uint64_t v47 = v17;
    __int16 v48 = 2048;
    uint64_t v49 = v18;
    __int16 v50 = 2048;
    uint64_t v51 = v19;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[live data] feeding published run,isValid,%d,runCount,%d,recordId,%llu,startTime,%f,endTime,%f,duration,%f,runDistance,%f,runVertical,%f,runSpeed,%f,currentDuration,%f,currentDistance,%f,currentVertical,%f,totalDuration,%f,totalDistance,%f,totalVertical,%f", buf, 0x90u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    long long v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedPublishedRun(const CLSkiEntry &, BOOL)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  double v20 = a2[7] - *(double *)(a1 + 824);
  double v21 = a2[11] - *(double *)(a1 + 832);
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 832) = 0;
  if (v20 < 0.0 || v21 < 0.0)
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    long long v22 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v26 = v20;
      *(_WORD *)&v26[8] = 2048;
      *(double *)long long v27 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[live data] we overestimated live updates, discounting from the next run,distanceDelta,%f,verticalDelta,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::feedPublishedRun(const CLSkiEntry &, BOOL)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    *(double *)(a1 + 848) = fabs(v20);
    *(double *)(a1 + 856) = fabs(v21);
  }
  else
  {
    *(void *)(a1 + 856) = 0;
    *(_OWORD *)(a1 + 840) = 0u;
  }
  if (*(unsigned char *)(a1 + 64)) {
    *(unsigned char *)(a1 + 64) = 0;
  }
  if (*(unsigned char *)(a1 + 136)) {
    *(unsigned char *)(a1 + 136) = 0;
  }
  if (*(unsigned char *)(a1 + 208)) {
    *(unsigned char *)(a1 + 208) = 0;
  }
  if (*(unsigned char *)(a1 + 408)) {
    *(unsigned char *)(a1 + 408) = 0;
  }
  if (*(unsigned char *)(a1 + 608)) {
    *(unsigned char *)(a1 + 608) = 0;
  }
  if (*(unsigned char *)(a1 + 808)) {
    *(unsigned char *)(a1 + 808) = 0;
  }
}

void sub_10140B044(uint64_t a1)
{
  memset(v1, 0, sizeof(v1));
  sub_10140AAF0(a1, (double *)v1, 0);
}

void sub_10140B0A8(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 912) < a2)
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_102324C80);
    }
    double v4 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 912);
      *(_DWORD *)std::string buf = 134218240;
      uint64_t v9 = v5;
      __int16 v10 = 2048;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[live data] updated max speed from %f to %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_102324C80);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiLiveDataController::updateMaxSpeed(double)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  double v6 = *(double *)(a1 + 912);
  if (v6 <= a2) {
    double v6 = a2;
  }
  *(double *)(a1 + 912) = v6;
}

BOOL sub_10140B29C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v2 = *(unsigned char *)(a2 + 64) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2
      && ((double)(*(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 16))
        - (double)(*(_DWORD *)(a2 + 20) - *(_DWORD *)(a1 + 20)))
       / (*(double *)(a2 + 8) - *(double *)(a1 + 8)) <= -39.9287987;
}

void sub_10140B300(id a1)
{
  qword_102419188 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_10140B3E0(id a1)
{
  qword_102487990 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLAudioAccessoryServiceSilo"];
}

void sub_10140B4A0(id a1)
{
  if (sub_10016CCBC()) {
    byte_1024879A0 = 1;
  }
}

id sub_10140B6A0(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAudioAccessoryInterfaceDailyUsageCallback:a1 data:a2];
}

void sub_10140C3A0(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_10140C79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10140C9F0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *((void *)__dst + 11) = 0;
  *((void *)__dst + 12) = 0xC08F380000000000;
  return __dst;
}

uint64_t sub_10140CA60(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v3 != v4)
  {
    double v6 = (void *)result;
    int v79 = (uint64_t *)(result + 24);
    do
    {
      unint64_t v7 = v6[3];
      unint64_t v8 = v6[4];
      __int16 v84 = *(void **)v3;
      if (*(char *)(v3 + 31) < 0)
      {
        sub_1000DC48C(&__p, *(void **)(v3 + 8), *(void *)(v3 + 16));
      }
      else
      {
        long long v9 = *(_OWORD *)(v3 + 8);
        uint64_t v86 = *(void *)(v3 + 24);
        long long __p = v9;
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 64);
      uint64_t v90 = *(void *)(v3 + 80);
      long long v88 = v11;
      long long v89 = v12;
      long long v87 = v10;
      if (v7 != v8)
      {
        while (1)
        {
          int v13 = *(_DWORD *)(v7 + 24);
          v80[0] = v84;
          unint64_t v14 = sub_1000D8908((uint64_t)v80);
          if (v13 == sub_10126D9E4(v14)) {
            break;
          }
          v7 += 80;
          if (v7 == v8)
          {
            unint64_t v7 = v8;
            break;
          }
        }
      }
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v15 = (int *)(v3 + 32);
      if (v7 == v6[4])
      {
        memset(v83, 0, sizeof(v83));
        long long v81 = 0u;
        *(_OWORD *)__int16 v82 = 0u;
        *(_OWORD *)__int16 v80 = 0u;
        if (v7 >= v6[5])
        {
          uint64_t v26 = sub_10140D33C(v79, (uint64_t)v80);
          long long v27 = v82[0];
          v6[4] = v26;
          if (v27)
          {
            v82[1] = v27;
            operator delete(v27);
          }
        }
        else
        {
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)unint64_t v7 = 0;
          *(_OWORD *)unint64_t v7 = *(_OWORD *)v80;
          *(void *)(v7 + 16) = v81;
          v80[0] = 0;
          v80[1] = 0;
          *(void *)&long long v81 = 0;
          *(_DWORD *)(v7 + 24) = DWORD2(v81);
          *(void *)(v7 + 40) = 0;
          *(void *)(v7 + 48) = 0;
          *(void *)(v7 + 32) = 0;
          *(_OWORD *)(v7 + 32) = *(_OWORD *)v82;
          *(void *)(v7 + 48) = *(void *)&v83[0];
          v82[0] = 0;
          v82[1] = 0;
          *(void *)&v83[0] = 0;
          long long v19 = *(_OWORD *)((char *)v83 + 8);
          *(_DWORD *)(v7 + 72) = DWORD2(v83[1]);
          *(_OWORD *)(v7 + 56) = v19;
          v6[4] = v7 + 80;
        }
        if (v80[0])
        {
          v80[1] = v80[0];
          operator delete(v80[0]);
        }
        uint64_t v28 = v6[4];
        v80[0] = *(void **)v3;
        unint64_t v29 = sub_1000D8908((uint64_t)v80);
        *(_DWORD *)(v28 - 56) = sub_10126D9E4(v29);
        __int16 v30 = *(double **)(v28 - 72);
        unint64_t v31 = *(void *)(v28 - 64);
        if ((unint64_t)v30 >= v31)
        {
          double v33 = *(double **)(v28 - 80);
          uint64_t v34 = v30 - v33;
          if ((unint64_t)(v34 + 1) >> 61) {
            goto LABEL_106;
          }
          unint64_t v35 = v31 - (void)v33;
          unint64_t v36 = (uint64_t)(v31 - (void)v33) >> 2;
          if (v36 <= v34 + 1) {
            unint64_t v36 = v34 + 1;
          }
          if (v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37)
          {
            __int16 v38 = (char *)sub_1000DA54C(v28 - 64, v37);
            double v33 = *(double **)(v28 - 80);
            __int16 v30 = *(double **)(v28 - 72);
          }
          else
          {
            __int16 v38 = 0;
          }
          double v53 = (double *)&v38[8 * v34];
          *double v53 = a3;
          __int16 v32 = v53 + 1;
          while (v30 != v33)
          {
            uint64_t v54 = *((void *)v30-- - 1);
            *((void *)v53-- - 1) = v54;
          }
          *(void *)(v28 - 80) = v53;
          *(void *)(v28 - 72) = v32;
          *(void *)(v28 - 64) = &v38[8 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          double *v30 = a3;
          __int16 v32 = v30 + 1;
        }
        unint64_t v55 = *(void *)(v28 - 32);
        *(void *)(v28 - 72) = v32;
        int v56 = *v15;
        double v57 = *(char **)(v28 - 40);
        if ((unint64_t)v57 >= v55)
        {
          uint64_t v59 = *(char **)(v28 - 48);
          uint64_t v60 = (v57 - v59) >> 2;
          if ((unint64_t)(v60 + 1) >> 62) {
LABEL_104:
          }
            sub_1001D7FD4();
          unint64_t v61 = v55 - (void)v59;
          unint64_t v62 = (uint64_t)(v55 - (void)v59) >> 1;
          if (v62 <= v60 + 1) {
            unint64_t v62 = v60 + 1;
          }
          if (v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v62;
          }
          if (v63)
          {
            __int16 v64 = (char *)sub_10017EA34(v28 - 32, v63);
            uint64_t v59 = *(char **)(v28 - 48);
            double v57 = *(char **)(v28 - 40);
          }
          else
          {
            __int16 v64 = 0;
          }
          double v65 = &v64[4 * v60];
          *(_DWORD *)double v65 = v56;
          __int16 v58 = v65 + 4;
          while (v57 != v59)
          {
            int v66 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          *(void *)(v28 - 48) = v65;
          *(void *)(v28 - 40) = v58;
          *(void *)(v28 - 32) = &v64[4 * v63];
          if (v59) {
            operator delete(v59);
          }
        }
        else
        {
          *(_DWORD *)double v57 = v56;
          __int16 v58 = v57 + 4;
        }
        *(void *)(v28 - 40) = v58;
      }
      else
      {
        unint64_t v16 = *(void *)(v7 + 16);
        uint64_t v17 = *(double **)(v7 + 8);
        if ((unint64_t)v17 >= v16)
        {
          double v20 = *(double **)v7;
          uint64_t v21 = ((uint64_t)v17 - *(void *)v7) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v23 = v16 - (void)v20;
          if (v23 >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            long long v25 = (char *)sub_1000DA54C(v7 + 16, v24);
            double v20 = *(double **)v7;
            uint64_t v17 = *(double **)(v7 + 8);
          }
          else
          {
            long long v25 = 0;
          }
          uint64_t v39 = (double *)&v25[8 * v21];
          *uint64_t v39 = a3;
          uint64_t v18 = v39 + 1;
          while (v17 != v20)
          {
            uint64_t v40 = *((void *)v17-- - 1);
            *((void *)v39-- - 1) = v40;
          }
          *(void *)unint64_t v7 = v39;
          *(void *)(v7 + 8) = v18;
          *(void *)(v7 + 16) = &v25[8 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          double *v17 = a3;
          uint64_t v18 = v17 + 1;
        }
        unint64_t v41 = *(void *)(v7 + 48);
        *(void *)(v7 + 8) = v18;
        int v42 = *v15;
        uint64_t v43 = *(char **)(v7 + 40);
        if ((unint64_t)v43 >= v41)
        {
          uint64_t v45 = *(char **)(v7 + 32);
          uint64_t v46 = (v43 - v45) >> 2;
          if ((unint64_t)(v46 + 1) >> 62) {
            goto LABEL_104;
          }
          unint64_t v47 = v41 - (void)v45;
          unint64_t v48 = (uint64_t)(v41 - (void)v45) >> 1;
          if (v48 <= v46 + 1) {
            unint64_t v48 = v46 + 1;
          }
          if (v47 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v48;
          }
          if (v49)
          {
            __int16 v50 = (char *)sub_10017EA34(v7 + 48, v49);
            uint64_t v45 = *(char **)(v7 + 32);
            uint64_t v43 = *(char **)(v7 + 40);
          }
          else
          {
            __int16 v50 = 0;
          }
          uint64_t v51 = &v50[4 * v46];
          *(_DWORD *)uint64_t v51 = v42;
          __int16 v44 = v51 + 4;
          while (v43 != v45)
          {
            int v52 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          *(void *)(v7 + 32) = v51;
          *(void *)(v7 + 40) = v44;
          *(void *)(v7 + 48) = &v50[4 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v43 = v42;
          __int16 v44 = v43 + 4;
        }
        *(void *)(v7 + 40) = v44;
      }
      v3 += 88;
    }
    while (v3 != v4);
    unint64_t v67 = v6[8];
    double v68 = (double *)v6[7];
    if ((unint64_t)v68 >= v67)
    {
      double v70 = (double *)v6[6];
      uint64_t v71 = v68 - v70;
      if ((unint64_t)(v71 + 1) >> 61) {
LABEL_106:
      }
        sub_1001D7FD4();
      unint64_t v72 = v67 - (void)v70;
      unint64_t v73 = (uint64_t)(v67 - (void)v70) >> 2;
      if (v73 <= v71 + 1) {
        unint64_t v73 = v71 + 1;
      }
      if (v72 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v73;
      }
      if (v74)
      {
        int v75 = (char *)sub_1000DA54C((uint64_t)(v6 + 8), v74);
        double v70 = (double *)v6[6];
        double v68 = (double *)v6[7];
      }
      else
      {
        int v75 = 0;
      }
      __int16 v76 = (double *)&v75[8 * v71];
      int v77 = &v75[8 * v74];
      *__int16 v76 = a3;
      double v69 = v76 + 1;
      while (v68 != v70)
      {
        uint64_t v78 = *((void *)v68-- - 1);
        *((void *)v76-- - 1) = v78;
      }
      v6[6] = v76;
      v6[7] = v69;
      v6[8] = v77;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      *double v68 = a3;
      double v69 = v68 + 1;
    }
    v6[7] = v69;
    return sub_10005DB28(v6, a3);
  }
  return result;
}

void sub_10140D000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

float sub_10140D02C(uint64_t *a1, uint64_t *a2, float a3)
{
  uint64_t v5 = *a2;
  double v6 = (int *)a2[1];
  uint64_t v7 = (uint64_t)v6 - *a2;
  if ((unint64_t)v7 > 7)
  {
    float v13 = (float)(a3 / 100.0) * (float)(unint64_t)((v7 >> 2) - 1);
    float v14 = floorf(v13);
    float v15 = ceilf(v13);
    if (v14 == v15)
    {
      unint64_t v16 = (int *)(v5 + 4 * (uint64_t)v13);
      if (v16 != v6)
      {
        sub_10140D770(v5, v16, v6);
        uint64_t v5 = *a2;
      }
      return (float)*(int *)(v5 + 4 * (unint64_t)v13);
    }
    else
    {
      uint64_t v17 = (int *)(v5 + 4 * (uint64_t)v14);
      if (v17 != v6)
      {
        sub_10140D770(v5, v17, v6);
        uint64_t v5 = *a2;
        double v6 = (int *)a2[1];
      }
      int v18 = *(_DWORD *)(v5 + 4 * (unint64_t)v14);
      long long v19 = (int *)(v5 + 4 * (uint64_t)v15);
      if (v19 != v6)
      {
        sub_10140D770(v5, v19, v6);
        uint64_t v5 = *a2;
      }
      return (float)((float)(v15 - v13) * (float)v18)
           + (float)((float)(v13 - v14) * (float)*(int *)(v5 + 4 * (unint64_t)v15));
    }
  }
  else
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_102324FE0);
    }
    unint64_t v8 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_ERROR))
    {
      long long v9 = a1;
      if (*((char *)a1 + 23) < 0) {
        long long v9 = (uint64_t *)*a1;
      }
      uint64_t v10 = (a2[1] - *a2) >> 2;
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v22 = v9;
      __int16 v23 = 2050;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "IndoorOutdoor, context, %s, can't compute percentile on buffer of this size %{public}zu", buf, 0x16u);
    }
    float v11 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_102324FE0);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "float CLIndoorOutdoorWifiModel::computePercentile(std::vector<int> &, float)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return v11;
}

void sub_10140D30C(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_10140D33C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100214C7C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  float v11 = &v10[80 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[80 * v9];
  *(void *)float v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(_OWORD *)float v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  long long v12 = *(_OWORD *)(a2 + 56);
  *((_DWORD *)v11 + 18) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(v11 + 56) = v12;
  double v15[2] = v11 + 80;
  sub_10140D48C(a1, v15);
  uint64_t v13 = a1[1];
  sub_10140D66C(v15);
  return v13;
}

void sub_10140D478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10140D66C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10140D48C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10140D504((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10140D504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _DWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      long long v8 = *(_OWORD *)(a3 - 80);
      a3 -= 80;
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 64) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 56) = *(_DWORD *)(a3 + 24);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 32) = *(void *)(a3 + 48);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      int v9 = *(_DWORD *)(a3 + 72);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 56);
      *(_DWORD *)(v7 - 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 80;
      *((void *)&v15 + 1) -= 80;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10140D5E0((uint64_t)v12);
  return v10;
}

uint64_t sub_10140D5E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10140D618((uint64_t *)a1);
  }
  return a1;
}

void sub_10140D618(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10054EB30(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_10140D66C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10140D6A0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_10054EB30(v4, i - 80);
  }
}

uint64_t sub_10140D6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_1000F4EBC(a4, (__n128 *)v5);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(v5 + 24);
    sub_1000F4EBC(a4 + 32, (__n128 *)(v5 + 32));
    long long v7 = *(_OWORD *)(v5 + 56);
    *(_DWORD *)(a4 + 72) = *(_DWORD *)(v5 + 72);
    *(_OWORD *)(a4 + 56) = v7;
    a4 += 80;
    v5 += 80;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10140D770(uint64_t result, int *a2, int *a3)
{
  if (a3 != a2)
  {
    uint64_t v3 = a3;
    uint64_t v5 = (int *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return sub_100274180(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        int v33 = *(v3 - 1);
        int v34 = *v5;
        if (v33 < *v5)
        {
          int *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 31)
      {
        return (uint64_t)sub_10140DA1C(v5, v3);
      }
      long long v7 = &v5[v6 >> 1];
      long long v8 = v3 - 1;
      uint64_t result = sub_100274180(v5, v7, v3 - 1);
      int v9 = *v5;
      if (*v5 >= *v7)
      {
        uint64_t v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            int *v5 = *v10;
            *uint64_t v10 = v9;
            uint64_t result = (result + 1);
            goto LABEL_13;
          }
        }
        unint64_t v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            int v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *long long v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          int v27 = *v5;
          do
          {
            int v29 = *v22++;
            int v28 = v29;
          }
          while (v27 >= v29);
          __int16 v30 = v22 - 1;
          do
          {
            int v32 = *--v8;
            int v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8) {
            break;
          }
          int *v30 = v31;
          *long long v8 = v28;
        }
        uint64_t v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }
      else
      {
        uint64_t v10 = v3 - 1;
LABEL_13:
        float v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          unint64_t v16 = v5 + 1;
        }
        else
        {
          long long v12 = v5 + 1;
          while (1)
          {
            int v13 = *v7;
            do
            {
              int v15 = *v12++;
              int v14 = v15;
            }
            while (v15 < v13);
            unint64_t v16 = v12 - 1;
            do
            {
              int v18 = *--v10;
              int v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10) {
              break;
            }
            *unint64_t v16 = v17;
            *uint64_t v10 = v14;
            uint64_t result = (result + 1);
            if (v16 == v7) {
              long long v7 = v10;
            }
          }
        }
        if (v16 != v7)
        {
          int v19 = *v16;
          if (*v7 < *v16)
          {
            *unint64_t v16 = *v7;
            int *v7 = v19;
            uint64_t result = (result + 1);
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!result)
        {
          if (v16 <= a2)
          {
            uint64_t v24 = v16 + 1;
            while (v24 != v3)
            {
              int v26 = *(v24 - 1);
              int v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v11 != v16)
            {
              int v21 = *(v11 - 1);
              int v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          uint64_t v5 = v16 + 1;
        }
        else {
          uint64_t v3 = v16;
        }
      }
    }
    while (v3 != a2);
  }
  return result;
}

int *sub_10140DA1C(int *result, int *a2)
{
  while (result != a2 - 1)
  {
    uint64_t v2 = result++;
    if (v2 != a2 && result != a2)
    {
      int v3 = *v2;
      uint64_t v4 = result;
      uint64_t v5 = v2;
      unint64_t v6 = result;
      do
      {
        int v8 = *v6++;
        int v7 = v8;
        if (v8 < v3)
        {
          int v3 = v7;
          uint64_t v5 = v4;
        }
        uint64_t v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        int v9 = *v2;
        int *v2 = *v5;
        int *v5 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_10140DA90(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_1001D7FD4();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)sub_100214C7C((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0;
  }
  uint64_t v10 = v7;
  float v11 = &v7[80 * v3];
  int v13 = &v7[80 * v6];
  sub_10140DBA0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 80;
  sub_10140D48C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10140D66C(&v10);
  return v8;
}

void sub_10140DB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10140D66C((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_10140DBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1001DD364((void *)a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  int v5 = *(_DWORD *)(a3 + 24);
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  sub_10010F834((void *)(a2 + 32), *(const void **)(a3 + 32), *(void *)(a3 + 40), (uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 2);
  __n128 result = *(__n128 *)(a3 + 56);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void sub_10140DC14(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10140DC30(long long *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = a1;
  long long v262 = a1;
  for (uint64_t i = (long long *)a2; ; a2 = (uint64_t)i)
  {
    uint64_t v9 = a2 - (void)v8;
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v8) >> 4);
    if (v5 || !v4)
    {
      switch(v10)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t i = (long long *)(a2 - 80);
          unint64_t v87 = (uint64_t)(*(void *)(a2 - 72) - *(void *)(a2 - 80)) >> 3;
          uint64_t v88 = *((void *)v8 + 1) - *(void *)v8;
          if (v87 == v88 >> 3)
          {
            double v89 = *(double *)(a2 - 24);
            double v90 = *((double *)v8 + 7);
            BOOL v91 = v89 <= v90;
            if (v89 == v90) {
              BOOL v91 = *(_DWORD *)(a2 - 8) <= *((_DWORD *)v8 + 18);
            }
            if (v91) {
              return;
            }
          }
          else if (v87 <= v88 >> 3)
          {
            return;
          }
          sub_10140EF74(&v262, (uint64_t *)&i);
          return;
        case 3uLL:
          uint64_t i = (long long *)(a2 - 80);
          sub_10140F230((uint64_t)v8, (uint64_t)(v8 + 5), a2 - 80);
          return;
        case 4uLL:
          uint64_t i = (long long *)(a2 - 80);
          sub_10140F77C((uint64_t)v8, (uint64_t)(v8 + 5), (uint64_t)(v8 + 10), a2 - 80);
          return;
        case 5uLL:
          uint64_t i = (long long *)(a2 - 80);
          sub_10140F06C((uint64_t)v8, (uint64_t)(v8 + 5), (uint64_t)(v8 + 10), (uint64_t)(v8 + 15), a2 - 80);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v9 <= 1919) {
      break;
    }
    if (!a3)
    {
      uint64_t v254 = a2;
      if (v8 == (long long *)a2) {
        return;
      }
      int64_t v115 = (v10 - 2) >> 1;
      while (2)
      {
        int64_t v116 = v115;
        if ((uint64_t)((v10 - 2) >> 1) < v115) {
          goto LABEL_231;
        }
        uint64_t v117 = (2 * v115) | 1;
        __int16 v118 = (__n128 *)&v8[5 * v117];
        if (2 * v115 + 2 < (uint64_t)v10)
        {
          unint64_t v119 = (uint64_t)(v118->n128_u64[1] - v118->n128_u64[0]) >> 3;
          uint64_t v120 = v118[5].n128_u64[1] - v118[5].n128_u64[0];
          if (v119 == v120 >> 3)
          {
            double v121 = *((double *)&v8[5 * v117 + 3] + 1);
            double v122 = v118[8].n128_f64[1];
            BOOL v123 = v121 <= v122;
            if (v121 == v122) {
              BOOL v123 = SDWORD2(v8[5 * v117 + 4]) <= (signed __int32)v118[9].n128_u32[2];
            }
            if (!v123)
            {
LABEL_199:
              v118 += 5;
              uint64_t v117 = 2 * v115 + 2;
            }
          }
          else if (v119 > v120 >> 3)
          {
            goto LABEL_199;
          }
        }
        __int16 v124 = &v8[5 * v115];
        unint64_t v125 = (uint64_t)(v118->n128_u64[1] - v118->n128_u64[0]) >> 3;
        unint64_t v126 = (uint64_t)(*((void *)v124 + 1) - *(void *)v124) >> 3;
        if (v125 == v126)
        {
          double v127 = v118[3].n128_f64[1];
          double v128 = *((double *)&v8[5 * v116 + 3] + 1);
          BOOL v129 = v127 <= v128;
          if (v127 == v128) {
            BOOL v129 = (signed __int32)v118[4].n128_u32[2] <= SDWORD2(v8[5 * v116 + 4]);
          }
          if (!v129) {
            goto LABEL_231;
          }
        }
        else
        {
          if (v125 > v126) {
            goto LABEL_231;
          }
          double v128 = *((double *)&v8[5 * v116 + 3] + 1);
        }
        unint64_t v238 = *(void *)v124;
        unint64_t v243 = *((void *)v124 + 1);
        unint64_t v225 = *((void *)v124 + 2);
        *(void *)__int16 v124 = 0;
        *((void *)v124 + 1) = 0;
        *((void *)v124 + 2) = 0;
        uint64_t v130 = (uint64_t)&v8[5 * v116];
        unint64_t v131 = *(void *)(v130 + 32);
        v130 += 32;
        unint64_t v233 = v131;
        unsigned __int32 v223 = *(_DWORD *)(v130 - 8);
        __n128 v228 = *(__n128 *)(v130 + 8);
        *(void *)uint64_t v130 = 0;
        *(void *)(v130 + 8) = 0;
        *(void *)(v130 + 16) = 0;
        uint64_t v132 = *(void *)(v130 + 32);
        signed __int32 v248 = *(_DWORD *)(v130 + 40);
        sub_1000F4EBC((uint64_t)v124, v118);
        *(_DWORD *)(v130 - 8) = v118[1].n128_u32[2];
        unint64_t v133 = v118 + 2;
        sub_1000F4EBC(v130, v118 + 2);
        unsigned int v134 = &v118[3].n128_i8[8];
        long long v135 = *(long long *)((char *)&v118[3] + 8);
        *(_DWORD *)(v130 + 40) = v118[4].n128_u32[2];
        *(_OWORD *)(v130 + 24) = v135;
        int64_t v136 = (v10 - 2) >> 1;
LABEL_208:
        if (v136 < v117) {
          goto LABEL_226;
        }
        uint64_t v137 = (uint64_t)v118;
        uint64_t v138 = 2 * v117;
        uint64_t v117 = (2 * v117) | 1;
        __int16 v118 = (__n128 *)&v8[5 * v117];
        if (v138 + 2 < (uint64_t)v10)
        {
          unint64_t v139 = (uint64_t)(v118->n128_u64[1] - v118->n128_u64[0]) >> 3;
          uint64_t v140 = v118[5].n128_u64[1] - v118[5].n128_u64[0];
          if (v139 == v140 >> 3)
          {
            double v141 = *((double *)&v8[5 * v117 + 3] + 1);
            double v142 = v118[8].n128_f64[1];
            BOOL v143 = v141 <= v142;
            if (v141 == v142) {
              BOOL v143 = SDWORD2(v8[5 * v117 + 4]) <= (signed __int32)v118[9].n128_u32[2];
            }
            if (!v143)
            {
LABEL_217:
              v118 += 5;
              uint64_t v117 = v138 + 2;
            }
          }
          else if (v139 > v140 >> 3)
          {
            goto LABEL_217;
          }
        }
        unint64_t v144 = (uint64_t)(v118->n128_u64[1] - v118->n128_u64[0]) >> 3;
        if (v144 == v126)
        {
          double v145 = v118[3].n128_f64[1];
          BOOL v146 = v145 <= v128;
          if (v145 == v128) {
            BOOL v146 = (signed __int32)v118[4].n128_u32[2] <= v248;
          }
          if (!v146)
          {
LABEL_225:
            __int16 v118 = (__n128 *)v137;
LABEL_226:
            long long v148 = (void *)v118->n128_u64[0];
            if (v118->n128_u64[0])
            {
              v118->n128_u64[1] = (unint64_t)v148;
              operator delete(v148);
            }
            v118->n128_u64[0] = v238;
            v118->n128_u64[1] = v243;
            v118[1].n128_u64[0] = v225;
            v118[1].n128_u32[2] = v223;
            long long v149 = (void *)v133->n128_u64[0];
            if (v133->n128_u64[0])
            {
              v118[2].n128_u64[1] = (unint64_t)v149;
              operator delete(v149);
              v133->n128_u64[1] = 0;
              v133[1].n128_u64[0] = 0;
            }
            v133->n128_u64[0] = v233;
            *(__n128 *)((char *)v118 + 40) = v228;
            *(double *)unsigned int v134 = v128;
            *((void *)v134 + 1) = v132;
            *((_DWORD *)v134 + 4) = v248;
LABEL_231:
            int64_t v115 = v116 - 1;
            if (v116) {
              continue;
            }
            int64_t v150 = v9 / 0x50uLL;
            while (2)
            {
              uint64_t v151 = 0;
              uint64_t v152 = v254;
              uint64_t v153 = *(void *)v8;
              uint64_t v234 = *((void *)v8 + 1);
              uint64_t v229 = *((void *)v8 + 2);
              *((void *)v8 + 1) = 0;
              *((void *)v8 + 2) = 0;
              *(void *)uint64_t v8 = 0;
              int v154 = *((_DWORD *)v8 + 6);
              uint64_t v258 = *((void *)v8 + 4);
              uint64_t v249 = *((void *)v8 + 5);
              uint64_t v239 = v153;
              uint64_t v244 = *((void *)v8 + 6);
              *((void *)v8 + 5) = 0;
              *((void *)v8 + 6) = 0;
              *((void *)v8 + 4) = 0;
              long long v155 = *(long long *)((char *)v8 + 56);
              int v264 = *((_DWORD *)v8 + 18);
              uint64_t v156 = (uint64_t)v8;
              long long v263 = v155;
LABEL_234:
              uint64_t v157 = v156;
              uint64_t v158 = v151 + 1;
              v156 += 80 * (v151 + 1);
              uint64_t v159 = 2 * v151;
              uint64_t v151 = (2 * v151) | 1;
              int64_t v160 = v159 + 2;
              if (v160 < v150)
              {
                unint64_t v161 = (uint64_t)(*(void *)(v156 + 8) - *(void *)v156) >> 3;
                uint64_t v162 = *(void *)(v156 + 88) - *(void *)(v156 + 80);
                if (v161 == v162 >> 3)
                {
                  double v163 = *(double *)(v157 + 80 * v158 + 56);
                  double v164 = *(double *)(v156 + 136);
                  BOOL v165 = v163 <= v164;
                  if (v163 == v164) {
                    BOOL v165 = *(_DWORD *)(v157 + 80 * v158 + 72) <= *(_DWORD *)(v156 + 152);
                  }
                  if (!v165)
                  {
LABEL_242:
                    v156 += 80;
                    uint64_t v151 = v160;
                  }
                }
                else if (v161 > v162 >> 3)
                {
                  goto LABEL_242;
                }
              }
              sub_1000F4EBC(v157, (__n128 *)v156);
              *(_DWORD *)(v157 + 24) = *(_DWORD *)(v156 + 24);
              uint64_t v166 = (void *)(v156 + 32);
              sub_1000F4EBC(v157 + 32, (__n128 *)(v156 + 32));
              long long v167 = *(_OWORD *)(v156 + 56);
              *(_DWORD *)(v157 + 72) = *(_DWORD *)(v156 + 72);
              *(_OWORD *)(v157 + 56) = v167;
              if (v151 > (uint64_t)((unint64_t)(v150 - 2) >> 1))
              {
                uint64_t v168 = v156 + 56;
                long long v169 = (__n128 *)(v254 - 80);
                v254 -= 80;
                if (v156 == v152 - 80)
                {
                  long long v184 = *(void **)v156;
                  if (*(void *)v156)
                  {
                    *(void *)(v156 + 8) = v184;
                    operator delete(v184);
                  }
                  *(void *)uint64_t v156 = v239;
                  *(void *)(v156 + 8) = v234;
                  *(void *)(v156 + 16) = v229;
                  *(_DWORD *)(v156 + 24) = v154;
                  long long v185 = *(void **)(v156 + 32);
                  if (v185)
                  {
                    *(void *)(v156 + 40) = v185;
                    operator delete(v185);
                  }
                  *(void *)(v156 + 32) = v258;
                  *(void *)(v156 + 40) = v249;
                  *(void *)(v156 + 48) = v244;
                  int v186 = v264;
                  *(_OWORD *)uint64_t v168 = v263;
                  *(_DWORD *)(v156 + 72) = v186;
                }
                else
                {
                  sub_1000F4EBC(v156, v169);
                  *(_DWORD *)(v156 + 24) = *(_DWORD *)(v152 - 56);
                  sub_1000F4EBC(v156 + 32, (__n128 *)(v152 - 48));
                  long long v170 = *(_OWORD *)(v152 - 24);
                  *(_DWORD *)(v156 + 72) = *(_DWORD *)(v152 - 8);
                  *(_OWORD *)uint64_t v168 = v170;
                  long long v171 = *(void **)(v152 - 80);
                  if (v171)
                  {
                    *(void *)(v152 - 72) = v171;
                    operator delete(v171);
                  }
                  *(void *)(v152 - 80) = v239;
                  *(void *)(v152 - 72) = v234;
                  *(void *)(v152 - 64) = v229;
                  *(_DWORD *)(v152 - 56) = v154;
                  long long v172 = *(void **)(v152 - 48);
                  if (v172)
                  {
                    *(void *)(v152 - 40) = v172;
                    operator delete(v172);
                  }
                  uint64_t v173 = v152 - 24;
                  *(void *)(v152 - 48) = v258;
                  *(void *)(v152 - 40) = v249;
                  *(void *)(v152 - 32) = v244;
                  *(_OWORD *)uint64_t v173 = v263;
                  *(_DWORD *)(v173 + 16) = v264;
                  uint64_t v174 = v156 + 80 - (void)v8;
                  if (v174 >= 81)
                  {
                    unint64_t v175 = v174 / 0x50uLL - 2;
                    unint64_t v176 = v175 >> 1;
                    uint64_t v177 = (uint64_t)&v8[5 * (v175 >> 1)];
                    unint64_t v178 = (uint64_t)(*(void *)(v177 + 8) - *(void *)v177) >> 3;
                    uint64_t v179 = *(void *)(v156 + 8);
                    unint64_t v180 = (v179 - *(void *)v156) >> 3;
                    if (v178 == v180)
                    {
                      double v181 = *((double *)&v8[5 * v176 + 3] + 1);
                      double v182 = *(double *)v168;
                      BOOL v183 = v181 <= *(double *)v168;
                      if (v181 == *(double *)v168) {
                        BOOL v183 = SDWORD2(v8[5 * v176 + 4]) <= *(_DWORD *)(v156 + 72);
                      }
                      if (!v183)
                      {
LABEL_263:
                        unint64_t v259 = (v179 - *(void *)v156) >> 3;
                        long long v240 = *(void **)v156;
                        uint64_t v245 = *(void *)(v156 + 8);
                        uint64_t v222 = *(void *)(v156 + 16);
                        *(void *)uint64_t v156 = 0;
                        *(void *)(v156 + 8) = 0;
                        *(void *)(v156 + 16) = 0;
                        int v221 = *(_DWORD *)(v156 + 24);
                        uint64_t v230 = *(void *)(v156 + 32);
                        long long v235 = *(_OWORD *)(v156 + 40);
                        *(void *)(v156 + 40) = 0;
                        *(void *)(v156 + 48) = 0;
                        *uint64_t v166 = 0;
                        uint64_t v187 = *(void *)(v156 + 64);
                        int v250 = *(_DWORD *)(v156 + 72);
                        unint64_t v220 = v175;
                        sub_1000F4EBC(v156, (__n128 *)&v8[5 * (v175 >> 1)]);
                        unint64_t v188 = &v8[5 * v176];
                        *(_DWORD *)(v156 + 24) = *((_DWORD *)v188 + 6);
                        double v189 = v188 + 2;
                        sub_1000F4EBC((uint64_t)v166, (__n128 *)v188 + 2);
                        uint64_t v190 = (char *)v188 + 56;
                        long long v191 = *(long long *)((char *)v188 + 56);
                        *(_DWORD *)(v168 + 16) = *((_DWORD *)v188 + 18);
                        *(_OWORD *)uint64_t v168 = v191;
                        if (v220 >= 2)
                        {
                          while (1)
                          {
                            unint64_t v193 = v176 - 1;
                            unint64_t v176 = (v176 - 1) >> 1;
                            long long v192 = &v8[5 * v176];
                            unint64_t v194 = (uint64_t)(*((void *)v192 + 1) - *(void *)v192) >> 3;
                            if (v194 == v259)
                            {
                              double v195 = *((double *)&v8[5 * v176 + 3] + 1);
                              BOOL v196 = v195 <= v182;
                              if (v195 == v182) {
                                BOOL v196 = SDWORD2(v8[5 * v176 + 4]) <= v250;
                              }
                              if (v196) {
                                break;
                              }
                            }
                            else if (v194 <= v259)
                            {
                              break;
                            }
                            sub_1000F4EBC(v177, (__n128 *)&v8[5 * v176]);
                            long long v197 = &v8[5 * v176];
                            *(_DWORD *)(v177 + 24) = *((_DWORD *)v197 + 6);
                            double v189 = v197 + 2;
                            sub_1000F4EBC(v177 + 32, (__n128 *)v197 + 2);
                            uint64_t v190 = (char *)v197 + 56;
                            long long v198 = *(long long *)((char *)v197 + 56);
                            *(_DWORD *)(v177 + 72) = *((_DWORD *)v197 + 18);
                            *(_OWORD *)(v177 + 56) = v198;
                            uint64_t v177 = (uint64_t)v197;
                            if (v193 <= 1) {
                              goto LABEL_273;
                            }
                          }
                        }
                        long long v192 = (long long *)v177;
LABEL_273:
                        long long v199 = *(void **)v192;
                        if (*(void *)v192)
                        {
                          *((void *)v192 + 1) = v199;
                          operator delete(v199);
                        }
                        *(void *)long long v192 = v240;
                        *((void *)v192 + 1) = v245;
                        *((void *)v192 + 2) = v222;
                        *((_DWORD *)v192 + 6) = v221;
                        unint64_t v200 = *(void **)v189;
                        if (*(void *)v189)
                        {
                          *((void *)v192 + 5) = v200;
                          operator delete(v200);
                          *((void *)v189 + 1) = 0;
                          *((void *)v189 + 2) = 0;
                        }
                        *(void *)double v189 = v230;
                        *(long long *)((char *)v192 + 40) = v235;
                        *(double *)uint64_t v190 = v182;
                        *((void *)v190 + 1) = v187;
                        *((_DWORD *)v190 + 4) = v250;
                      }
                    }
                    else if (v178 > v180)
                    {
                      double v182 = *(double *)v168;
                      goto LABEL_263;
                    }
                  }
                }
                BOOL v22 = v150-- <= 2;
                if (v22) {
                  return;
                }
                continue;
              }
              goto LABEL_234;
            }
          }
        }
        else if (v144 > v126)
        {
          goto LABEL_225;
        }
        break;
      }
      sub_1000F4EBC(v137, v118);
      *(_DWORD *)(v137 + 24) = v118[1].n128_u32[2];
      unint64_t v133 = v118 + 2;
      sub_1000F4EBC(v137 + 32, v118 + 2);
      unsigned int v134 = &v118[3].n128_i8[8];
      long long v147 = *(long long *)((char *)&v118[3] + 8);
      *(_DWORD *)(v137 + 72) = v118[4].n128_u32[2];
      *(_OWORD *)(v137 + 56) = v147;
      int64_t v136 = (v10 - 2) >> 1;
      goto LABEL_208;
    }
    unint64_t v11 = v10 >> 1;
    uint64_t v12 = a2 - 80;
    if ((unint64_t)v9 >= 0x2801)
    {
      sub_10140F230((uint64_t)v8, (uint64_t)&v8[5 * (v10 >> 1)], v12);
      uint64_t v13 = 5 * v11;
      uint64_t v14 = 5 * v11;
      uint64_t v15 = v14 * 16 - 80;
      sub_10140F230((uint64_t)(v262 + 5), (uint64_t)&v262[v14 - 5], (uint64_t)(i - 10));
      v14 += 5;
      sub_10140F230((uint64_t)(v262 + 10), (uint64_t)&v262[v14], (uint64_t)(i - 15));
      sub_10140F230((uint64_t)v262 + v15, (uint64_t)&v262[v13], (uint64_t)&v262[v14]);
      *(void *)&long long v263 = &v262[v13];
      sub_10140EF74(&v262, (uint64_t *)&v263);
    }
    else
    {
      sub_10140F230((uint64_t)&v8[5 * (v10 >> 1)], (uint64_t)v8, v12);
    }
    unint64_t v16 = v262;
    uint64_t v252 = a3 - 1;
    if (a4)
    {
      int v226 = a4;
      uint64_t v17 = *((void *)v262 + 1);
    }
    else
    {
      unint64_t v18 = (uint64_t)(*((void *)v262 - 9) - *((void *)v262 - 10)) >> 3;
      uint64_t v17 = *((void *)v262 + 1);
      uint64_t v19 = v17 - *(void *)v262;
      if (v18 == v19 >> 3)
      {
        double v20 = *((double *)v262 - 3);
        double v21 = *((double *)v262 + 7);
        BOOL v22 = v20 <= v21;
        if (v20 == v21) {
          BOOL v22 = *((_DWORD *)v262 - 2) <= *((_DWORD *)v262 + 18);
        }
        if (v22) {
          goto LABEL_80;
        }
      }
      else if (v18 <= v19 >> 3)
      {
        double v21 = *((double *)v262 + 7);
LABEL_80:
        unint64_t v55 = (unint64_t)i;
        v265[0] = (uint64_t)i;
        uint64_t v56 = *(void *)v262;
        uint64_t v57 = *((void *)v262 + 2);
        *((void *)v262 + 1) = 0;
        *((void *)v16 + 2) = 0;
        *(void *)unint64_t v16 = 0;
        long long v256 = v16[2];
        int v58 = *((_DWORD *)v16 + 6);
        uint64_t v59 = *((void *)v16 + 6);
        *((void *)v16 + 4) = 0;
        *((void *)v16 + 5) = 0;
        *((void *)v16 + 6) = 0;
        int v60 = *((_DWORD *)v16 + 18);
        unint64_t v61 = (v17 - v56) >> 3;
        uint64_t v62 = *(void *)(v55 - 80);
        uint64_t v63 = *(void *)(v55 - 72);
        if (v61 == (v63 - v62) >> 3)
        {
          double v64 = *(double *)(v55 - 24);
          BOOL v65 = v21 <= v64;
          if (v21 == v64) {
            BOOL v65 = v60 <= *(_DWORD *)(v55 - 8);
          }
          if (!v65) {
            goto LABEL_95;
          }
        }
        else if (v61 > (v63 - v62) >> 3)
        {
LABEL_95:
          for (uint64_t j = v16 + 5; ; j += 5)
          {
            uint64_t v70 = *((void *)j + 1) - *(void *)j;
            if (v61 == v70 >> 3)
            {
              double v71 = *((double *)j + 7);
              BOOL v72 = v21 <= v71;
              if (v21 == v71) {
                BOOL v72 = v60 <= *((_DWORD *)j + 18);
              }
              if (!v72) {
                goto LABEL_103;
              }
            }
            else if (v61 > v70 >> 3)
            {
              goto LABEL_103;
            }
          }
        }
        for (uint64_t j = v16 + 5; (unint64_t)j < v55; j += 5)
        {
          uint64_t v67 = *((void *)j + 1) - *(void *)j;
          if (v61 == v67 >> 3)
          {
            double v68 = *((double *)j + 7);
            BOOL v69 = v21 <= v68;
            if (v21 == v68) {
              BOOL v69 = v60 <= *((_DWORD *)j + 18);
            }
            if (!v69) {
              break;
            }
          }
          else if (v61 > v67 >> 3)
          {
            break;
          }
        }
LABEL_103:
        uint64_t v73 = *((void *)v16 + 8);
        *(void *)&long long v263 = j;
        if ((unint64_t)j >= v55) {
          goto LABEL_114;
        }
        v55 -= 80;
        while (2)
        {
          uint64_t v74 = v63 - v62;
          if (v61 != v74 >> 3)
          {
            if (v61 <= v74 >> 3) {
              break;
            }
            goto LABEL_112;
          }
          double v75 = *(double *)(v55 + 56);
          BOOL v76 = v21 <= v75;
          if (v21 == v75) {
            BOOL v76 = v60 <= *(_DWORD *)(v55 + 72);
          }
          if (!v76)
          {
LABEL_112:
            uint64_t v62 = *(void *)(v55 - 80);
            uint64_t v63 = *(void *)(v55 - 72);
            v55 -= 80;
            continue;
          }
          break;
        }
        v265[0] = v55;
LABEL_114:
        if ((unint64_t)j >= v55)
        {
          int v83 = (void **)(j - 5);
          BOOL v4 = j - 5 >= v16;
          BOOL v5 = j - 5 == v16;
          if (j - 5 != v16)
          {
            sub_1000F4EBC((uint64_t)v16, (__n128 *)j - 5);
            *((_DWORD *)v16 + 6) = *((_DWORD *)j - 14);
            sub_1000F4EBC((uint64_t)(v16 + 2), (__n128 *)j - 3);
            long long v84 = *(long long *)((char *)j - 24);
            *((_DWORD *)v16 + 18) = *((_DWORD *)j - 2);
            *(long long *)((char *)v16 + 56) = v84;
          }
          int v85 = *v83;
          if (*v83)
          {
            *((void *)j - 9) = v85;
            operator delete(v85);
          }
          *((void *)j - 10) = v56;
          *((void *)j - 9) = v17;
          *((void *)j - 8) = v57;
          *((_DWORD *)j - 14) = v58;
          uint64_t v86 = (void *)*((void *)j - 6);
          if (v86)
          {
            *((void *)j - 5) = v86;
            operator delete(v86);
          }
          a4 = 0;
          *(j - 3) = v256;
          *((void *)j - 4) = v59;
          *((double *)j - 3) = v21;
          *((void *)j - 2) = v73;
          *((_DWORD *)j - 2) = v60;
          uint64_t v8 = (long long *)v263;
LABEL_139:
          long long v262 = v8;
          goto LABEL_140;
        }
        sub_10140EF74((long long **)&v263, v265);
        for (uint64_t j = (long long *)(v263 + 80); ; j += 5)
        {
          uint64_t v77 = *((void *)j + 1) - *(void *)j;
          if (v61 == v77 >> 3)
          {
            double v78 = *((double *)j + 7);
            BOOL v79 = v21 <= v78;
            if (v21 == v78) {
              BOOL v79 = v60 <= *((_DWORD *)j + 18);
            }
            if (!v79)
            {
LABEL_123:
              *(void *)&long long v263 = j;
              unint64_t v55 = v265[0];
              do
              {
                while (1)
                {
                  v55 -= 80;
                  v265[0] = v55;
                  uint64_t v80 = *(void *)(v55 + 8) - *(void *)v55;
                  if (v61 == v80 >> 3) {
                    break;
                  }
                  if (v61 <= v80 >> 3) {
                    goto LABEL_114;
                  }
                }
                double v81 = *(double *)(v55 + 56);
                BOOL v82 = v21 <= v81;
                if (v21 == v81) {
                  BOOL v82 = v60 <= *(_DWORD *)(v55 + 72);
                }
              }
              while (!v82);
              goto LABEL_114;
            }
          }
          else if (v61 > v77 >> 3)
          {
            goto LABEL_123;
          }
        }
      }
      int v226 = a4;
    }
    uint64_t v23 = 0;
    unint64_t v24 = (unint64_t)i;
    v265[0] = (uint64_t)i;
    uint64_t v25 = *(void *)v262;
    uint64_t v26 = *((void *)v262 + 2);
    *((void *)v262 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(void *)unint64_t v16 = 0;
    int v231 = *((_DWORD *)v16 + 6);
    long long v246 = v16[2];
    uint64_t v236 = v26;
    uint64_t v241 = *((void *)v16 + 6);
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0;
    *((void *)v16 + 6) = 0;
    long long v27 = *(long long *)((char *)v16 + 56);
    int v28 = *((_DWORD *)v16 + 18);
    unint64_t v29 = (v17 - v25) >> 3;
    while (1)
    {
      unint64_t v30 = (uint64_t)(*((void *)&v16[v23 + 5] + 1) - *(void *)&v16[v23 + 5]) >> 3;
      if (v30 == v29) {
        break;
      }
      if (v30 <= v29) {
        goto LABEL_29;
      }
LABEL_28:
      v23 += 5;
    }
    double v31 = *((double *)&v16[v23 + 8] + 1);
    BOOL v32 = v31 <= *(double *)&v27;
    if (v31 == *(double *)&v27) {
      BOOL v32 = SDWORD2(v16[v23 + 9]) <= v28;
    }
    if (!v32) {
      goto LABEL_28;
    }
LABEL_29:
    unint64_t v33 = (unint64_t)&v16[v23 + 5];
    *(void *)&long long v263 = v33;
    if (v23 * 16)
    {
      do
      {
        while (1)
        {
          uint64_t v35 = *(void *)(v24 - 80);
          uint64_t v34 = *(void *)(v24 - 72);
          v24 -= 80;
          unint64_t v36 = (v34 - v35) >> 3;
          if (v36 == v29) {
            break;
          }
          if (v36 > v29) {
            goto LABEL_36;
          }
        }
        double v37 = *(double *)(v24 + 56);
        BOOL v38 = v37 <= *(double *)&v27;
        if (v37 == *(double *)&v27) {
          BOOL v38 = *(_DWORD *)(v24 + 72) <= v28;
        }
      }
      while (v38);
      goto LABEL_36;
    }
    if (v33 < v24)
    {
      do
      {
        while (1)
        {
          uint64_t v52 = *(void *)(v24 - 80);
          uint64_t v51 = *(void *)(v24 - 72);
          v24 -= 80;
          unint64_t v53 = (v51 - v52) >> 3;
          if (v53 != v29) {
            break;
          }
          double v54 = *(double *)(v24 + 56);
          if (v54 == *(double *)&v27)
          {
            if (v33 >= v24 || *(_DWORD *)(v24 + 72) > v28) {
              goto LABEL_36;
            }
          }
          else if (v33 >= v24 || v54 > *(double *)&v27)
          {
            goto LABEL_36;
          }
        }
      }
      while (v33 < v24 && v53 <= v29);
LABEL_36:
      v265[0] = v24;
    }
    uint64_t v8 = (long long *)v33;
    long long v255 = v27;
    if (v33 >= v24) {
      goto LABEL_55;
    }
    while (2)
    {
      sub_10140EF74((long long **)&v263, v265);
      uint64_t v8 = (long long *)(v263 + 80);
      while (2)
      {
        unint64_t v39 = (uint64_t)(*((void *)v8 + 1) - *(void *)v8) >> 3;
        if (v39 != v29)
        {
          if (v39 <= v29) {
            break;
          }
          goto LABEL_46;
        }
        double v40 = *((double *)v8 + 7);
        BOOL v41 = v40 <= *(double *)&v255;
        if (v40 == *(double *)&v255) {
          BOOL v41 = *((_DWORD *)v8 + 18) <= v28;
        }
        if (!v41)
        {
LABEL_46:
          v8 += 5;
          continue;
        }
        break;
      }
      *(void *)&long long v263 = v8;
      unint64_t v42 = v265[0];
      do
      {
        while (1)
        {
          v42 -= 80;
          v265[0] = v42;
          unint64_t v43 = (uint64_t)(*(void *)(v42 + 8) - *(void *)v42) >> 3;
          if (v43 == v29) {
            break;
          }
          if (v43 > v29) {
            goto LABEL_54;
          }
        }
        double v44 = *(double *)(v42 + 56);
        BOOL v45 = v44 <= *(double *)&v255;
        if (v44 == *(double *)&v255) {
          BOOL v45 = *(_DWORD *)(v42 + 72) <= v28;
        }
      }
      while (v45);
LABEL_54:
      if ((unint64_t)v8 < v42) {
        continue;
      }
      break;
    }
LABEL_55:
    uint64_t v46 = (void **)(v8 - 5);
    if (v8 - 5 != v16)
    {
      sub_1000F4EBC((uint64_t)v16, (__n128 *)v8 - 5);
      *((_DWORD *)v16 + 6) = *((_DWORD *)v8 - 14);
      sub_1000F4EBC((uint64_t)(v16 + 2), (__n128 *)v8 - 3);
      long long v47 = *(long long *)((char *)v8 - 24);
      *((_DWORD *)v16 + 18) = *((_DWORD *)v8 - 2);
      *(long long *)((char *)v16 + 56) = v47;
    }
    unint64_t v48 = *v46;
    if (*v46)
    {
      *((void *)v8 - 9) = v48;
      operator delete(v48);
    }
    *((void *)v8 - 10) = v25;
    *((void *)v8 - 9) = v17;
    *((void *)v8 - 8) = v236;
    *((_DWORD *)v8 - 14) = v231;
    unint64_t v49 = (void *)*((void *)v8 - 6);
    if (v49)
    {
      *((void *)v8 - 5) = v49;
      operator delete(v49);
    }
    *(v8 - 3) = v246;
    *((void *)v8 - 4) = v241;
    *(long long *)((char *)v8 - 24) = v255;
    *((_DWORD *)v8 - 2) = v28;
    BOOL v4 = v33 >= v24;
    a4 = v226;
    if (!v4)
    {
LABEL_79:
      a3 = v252;
      sub_10140DC30(v262, v8 - 5, v252, v226 & 1);
      a4 = 0;
      long long v262 = v8;
      continue;
    }
    BOOL v50 = sub_10140F3EC((uint64_t)v262, (uint64_t)(v8 - 5));
    if (!sub_10140F3EC((uint64_t)v8, (uint64_t)i))
    {
      if (!v50) {
        goto LABEL_79;
      }
      goto LABEL_139;
    }
    if (v50) {
      return;
    }
    uint64_t i = v8 - 5;
    uint64_t v8 = v262;
LABEL_140:
    a3 = v252;
  }
  __int16 v92 = v8 + 5;
  BOOL v94 = v8 == (long long *)a2 || v92 == (long long *)a2;
  long long v253 = (long long *)a2;
  if ((a4 & 1) == 0)
  {
    if (v94) {
      return;
    }
    for (uint64_t k = (char *)v8 + 136; ; k += 80)
    {
      long long v202 = v8;
      uint64_t v8 = v92;
      uint64_t v204 = *((void *)v202 + 10);
      uint64_t v203 = *((void *)v202 + 11);
      unint64_t v205 = (v203 - v204) >> 3;
      uint64_t v206 = *((void *)v202 + 1) - *(void *)v202;
      if (v205 == v206 >> 3) {
        break;
      }
      if (v205 > v206 >> 3) {
        goto LABEL_292;
      }
LABEL_306:
      __int16 v92 = v8 + 5;
      if (v8 + 5 == v253) {
        return;
      }
    }
    double v207 = *((double *)v202 + 17);
    double v208 = *((double *)v202 + 7);
    BOOL v209 = v207 <= v208;
    if (v207 == v208) {
      BOOL v209 = *((_DWORD *)v202 + 38) <= *((_DWORD *)v202 + 18);
    }
    if (v209) {
      goto LABEL_306;
    }
LABEL_292:
    uint64_t v210 = *((void *)v202 + 12);
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    int v211 = *((_DWORD *)v202 + 26);
    long long v251 = v202[7];
    uint64_t v212 = *((void *)v202 + 16);
    *((void *)v202 + 15) = 0;
    *((void *)v202 + 16) = 0;
    *((void *)v202 + 14) = 0;
    long long v260 = *(long long *)((char *)v202 + 136);
    long long v213 = k;
    int v214 = *((_DWORD *)v202 + 38);
    while (1)
    {
      sub_1000F4EBC((uint64_t)(v213 - 56), (__n128 *)(v213 - 136));
      *((_DWORD *)v213 - 8) = *((_DWORD *)v213 - 28);
      sub_1000F4EBC((uint64_t)(v213 - 24), (__n128 *)(v213 - 104));
      *(_OWORD *)long long v213 = *((_OWORD *)v213 - 5);
      *((_DWORD *)v213 + 4) = *((_DWORD *)v213 - 16);
      uint64_t v215 = *((void *)v213 - 26) - *((void *)v213 - 27);
      if (v205 == v215 >> 3)
      {
        double v216 = *((double *)v213 - 20);
        BOOL v217 = *(double *)&v260 <= v216;
        if (*(double *)&v260 == v216) {
          BOOL v217 = v214 <= *((_DWORD *)v213 - 36);
        }
        if (v217)
        {
LABEL_301:
          long long v218 = (void *)*((void *)v213 - 17);
          if (v218)
          {
            *((void *)v213 - 16) = v218;
            operator delete(v218);
          }
          *((void *)v213 - 17) = v204;
          *((void *)v213 - 16) = v203;
          *((void *)v213 - 15) = v210;
          *((_DWORD *)v213 - 28) = v211;
          long long v219 = (void *)*((void *)v213 - 13);
          if (v219)
          {
            *((void *)v213 - 12) = v219;
            operator delete(v219);
          }
          *(_OWORD *)(v213 - 104) = v251;
          *((void *)v213 - 11) = v212;
          *((_OWORD *)v213 - 5) = v260;
          *((_DWORD *)v213 - 16) = v214;
          goto LABEL_306;
        }
      }
      else if (v205 <= v215 >> 3)
      {
        goto LABEL_301;
      }
      v213 -= 80;
    }
  }
  if (v94) {
    return;
  }
  uint64_t v95 = 0;
  __int16 v96 = v8;
  while (2)
  {
    double v97 = v96;
    __int16 v96 = v92;
    uint64_t v98 = *((void *)v97 + 11);
    unint64_t v99 = (v98 - *((void *)v97 + 10)) >> 3;
    uint64_t v100 = *((void *)v97 + 1) - *(void *)v97;
    if (v99 == v100 >> 3)
    {
      double v101 = *((double *)v97 + 17);
      double v102 = *((double *)v97 + 7);
      BOOL v103 = v101 <= v102;
      if (v101 == v102) {
        BOOL v103 = *((_DWORD *)v97 + 38) <= *((_DWORD *)v97 + 18);
      }
      if (v103) {
        goto LABEL_185;
      }
    }
    else if (v99 <= v100 >> 3)
    {
      goto LABEL_185;
    }
    uint64_t v247 = *((void *)v97 + 10);
    uint64_t v232 = *((void *)v97 + 12);
    *(void *)__int16 v92 = 0;
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = 0;
    int v227 = *((_DWORD *)v97 + 26);
    uint64_t v237 = *((void *)v97 + 14);
    long long v242 = *(long long *)((char *)v97 + 120);
    *((void *)v97 + 15) = 0;
    *((void *)v97 + 16) = 0;
    *((void *)v97 + 14) = 0;
    double v104 = *((double *)v97 + 17);
    uint64_t v105 = *((void *)v97 + 18);
    int v257 = *((_DWORD *)v97 + 38);
    sub_1000F4EBC((uint64_t)v92, (__n128 *)v97);
    *((_DWORD *)v96 + 6) = *((_DWORD *)v97 + 6);
    uint64_t v106 = (uint64_t)(v97 + 2);
    sub_1000F4EBC((uint64_t)(v96 + 2), (__n128 *)v97 + 2);
    uint64_t v107 = (uint64_t)v97 + 56;
    *(long long *)((char *)v96 + 56) = *(long long *)((char *)v97 + 56);
    *((_DWORD *)v96 + 18) = *((_DWORD *)v97 + 18);
    if (v97 == v8)
    {
      double v97 = v8;
      goto LABEL_180;
    }
    uint64_t v224 = v98;
    uint64_t v108 = v95;
    while (2)
    {
      uint64_t v109 = (uint64_t)v8 + v108;
      uint64_t v110 = *(void *)((char *)v8 + v108 - 72) - *(void *)((char *)v8 + v108 - 80);
      if (v99 != v110 >> 3)
      {
        if (v99 <= v110 >> 3) {
          goto LABEL_178;
        }
LABEL_176:
        sub_1000F4EBC(v109, (__n128 *)((char *)v8 + v108 - 80));
        __int16 v112 = (char *)v8 + v108;
        *(_DWORD *)((char *)v8 + v108 + 24) = *(_DWORD *)((char *)v8 + v108 - 56);
        uint64_t v106 = (uint64_t)(v97 - 3);
        sub_1000F4EBC((uint64_t)v8 + v108 + 32, (__n128 *)((char *)v8 + v108 - 48));
        uint64_t v107 = (uint64_t)v97 - 24;
        *(_OWORD *)(v112 + 56) = *(_OWORD *)(v112 - 24);
        *((_DWORD *)v112 + 18) = *((_DWORD *)v112 - 2);
        v97 -= 5;
        v108 -= 80;
        if (!v108)
        {
          uint64_t v107 = (uint64_t)v8 + 56;
          double v97 = v8;
          goto LABEL_178;
        }
        continue;
      }
      break;
    }
    double v111 = *(double *)(v109 - 24);
    if (v104 == v111)
    {
      if (v257 <= *(_DWORD *)((char *)v8 + v108 - 8)) {
        goto LABEL_178;
      }
      goto LABEL_176;
    }
    if (v104 > v111) {
      goto LABEL_176;
    }
    double v97 = (long long *)((char *)v8 + v108);
    uint64_t v107 = (uint64_t)v8 + v108 + 56;
    uint64_t v106 = (uint64_t)v8 + v108 + 32;
LABEL_178:
    uint64_t v98 = v224;
LABEL_180:
    int v113 = *(void **)v97;
    if (*(void *)v97)
    {
      *((void *)v97 + 1) = v113;
      operator delete(v113);
    }
    *(void *)double v97 = v247;
    *((void *)v97 + 1) = v98;
    *((void *)v97 + 2) = v232;
    *((_DWORD *)v97 + 6) = v227;
    __int16 v114 = *(void **)v106;
    if (*(void *)v106)
    {
      *((void *)v97 + 5) = v114;
      operator delete(v114);
      *(void *)(v106 + 8) = 0;
      *(void *)(v106 + 16) = 0;
    }
    *(void *)uint64_t v106 = v237;
    *(long long *)((char *)v97 + 40) = v242;
    *(double *)uint64_t v107 = v104;
    *(void *)(v107 + 8) = v105;
    *(_DWORD *)(v107 + 16) = v257;
LABEL_185:
    __int16 v92 = v96 + 5;
    v95 += 80;
    if (v96 + 5 != v253) {
      continue;
    }
    break;
  }
}

__n128 sub_10140EF74(long long **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v4 = **a1;
  uint64_t v5 = *((void *)*a1 + 2);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = 0;
  int v6 = *((_DWORD *)v2 + 6);
  long long v12 = v4;
  long long v13 = v2[2];
  uint64_t v7 = *((void *)v2 + 6);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  __n128 v14 = *(__n128 *)((char *)v2 + 56);
  int v15 = *((_DWORD *)v2 + 18);
  sub_1000F4EBC((uint64_t)v2, (__n128 *)v3);
  *((_DWORD *)v2 + 6) = *(_DWORD *)(v3 + 24);
  sub_1000F4EBC((uint64_t)(v2 + 2), (__n128 *)(v3 + 32));
  long long v8 = *(_OWORD *)(v3 + 56);
  *((_DWORD *)v2 + 18) = *(_DWORD *)(v3 + 72);
  *(long long *)((char *)v2 + 56) = v8;
  uint64_t v9 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v9;
    operator delete(v9);
  }
  *(_OWORD *)uint64_t v3 = v12;
  *(void *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 24) = v6;
  unint64_t v10 = *(void **)(v3 + 32);
  if (v10)
  {
    *(void *)(v3 + 40) = v10;
    operator delete(v10);
  }
  *(_OWORD *)(v3 + 32) = v13;
  *(void *)(v3 + 48) = v7;
  __n128 result = v14;
  *(__n128 *)(v3 + 56) = v14;
  *(_DWORD *)(v3 + 72) = v15;
  return result;
}

double sub_10140F06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v30 = (long long *)a2;
  double v31 = (long long *)a1;
  int v28 = (long long *)a4;
  unint64_t v29 = (long long *)a3;
  uint64_t v27 = a5;
  double result = sub_10140F77C(a1, a2, a3, a4);
  unint64_t v11 = (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3;
  uint64_t v12 = *(void *)(a4 + 8) - *(void *)a4;
  if (v11 == v12 >> 3)
  {
    double result = *(double *)(a5 + 56);
    double v13 = *(double *)(a4 + 56);
    BOOL v14 = result <= v13;
    if (result == v13) {
      BOOL v14 = *(_DWORD *)(a5 + 72) <= *(_DWORD *)(a4 + 72);
    }
    if (v14) {
      return result;
    }
  }
  else if (v11 <= v12 >> 3)
  {
    return result;
  }
  *(void *)&double result = sub_10140EF74(&v28, &v27).n128_u64[0];
  unint64_t v15 = (uint64_t)(*((void *)v28 + 1) - *(void *)v28) >> 3;
  uint64_t v16 = *(void *)(a3 + 8) - *(void *)a3;
  if (v15 == v16 >> 3)
  {
    double result = *((double *)v28 + 7);
    double v17 = *(double *)(a3 + 56);
    BOOL v18 = result <= v17;
    if (result == v17) {
      BOOL v18 = *((_DWORD *)v28 + 18) <= *(_DWORD *)(a3 + 72);
    }
    if (v18) {
      return result;
    }
  }
  else if (v15 <= v16 >> 3)
  {
    return result;
  }
  *(void *)&double result = sub_10140EF74(&v29, (uint64_t *)&v28).n128_u64[0];
  unint64_t v19 = (uint64_t)(*((void *)v29 + 1) - *(void *)v29) >> 3;
  uint64_t v20 = *(void *)(a2 + 8) - *(void *)a2;
  if (v19 == v20 >> 3)
  {
    double result = *((double *)v29 + 7);
    double v21 = *(double *)(a2 + 56);
    BOOL v22 = result <= v21;
    if (result == v21) {
      BOOL v22 = *((_DWORD *)v29 + 18) <= *(_DWORD *)(a2 + 72);
    }
    if (v22) {
      return result;
    }
  }
  else if (v19 <= v20 >> 3)
  {
    return result;
  }
  *(void *)&double result = sub_10140EF74(&v30, (uint64_t *)&v29).n128_u64[0];
  unint64_t v23 = (uint64_t)(*((void *)v30 + 1) - *(void *)v30) >> 3;
  uint64_t v24 = *(void *)(a1 + 8) - *(void *)a1;
  if (v23 != v24 >> 3)
  {
    if (v23 <= v24 >> 3) {
      return result;
    }
    goto LABEL_29;
  }
  double result = *((double *)v30 + 7);
  double v25 = *(double *)(a1 + 56);
  BOOL v26 = result <= v25;
  if (result == v25) {
    BOOL v26 = *((_DWORD *)v30 + 18) <= *(_DWORD *)(a1 + 72);
  }
  if (!v26) {
LABEL_29:
  }
    *(void *)&double result = sub_10140EF74(&v31, (uint64_t *)&v30).n128_u64[0];
  return result;
}

double sub_10140F230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = (long long *)a1;
  uint64_t v25 = a3;
  BOOL v26 = (long long *)a2;
  unint64_t v3 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if (v3 == v4 >> 3)
  {
    double result = *(double *)(a2 + 56);
    double v6 = *(double *)(a1 + 56);
    BOOL v7 = result <= v6;
    if (result == v6) {
      BOOL v7 = *(_DWORD *)(a2 + 72) <= *(_DWORD *)(a1 + 72);
    }
    if (!v7) {
      goto LABEL_13;
    }
LABEL_6:
    unint64_t v8 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
    if (v8 == v3)
    {
      double result = *(double *)(a3 + 56);
      double v9 = *(double *)(a2 + 56);
      BOOL v10 = result <= v9;
      if (result == v9) {
        BOOL v10 = *(_DWORD *)(a3 + 72) <= *(_DWORD *)(a2 + 72);
      }
      if (v10) {
        return result;
      }
    }
    else if (v8 <= v3)
    {
      return result;
    }
    *(void *)&double result = sub_10140EF74(&v26, &v25).n128_u64[0];
    unint64_t v19 = (uint64_t)(*((void *)v26 + 1) - *(void *)v26) >> 3;
    uint64_t v20 = *((void *)v27 + 1) - *(void *)v27;
    if (v19 == v20 >> 3)
    {
      double result = *((double *)v26 + 7);
      double v21 = *((double *)v27 + 7);
      BOOL v22 = result <= v21;
      if (result == v21) {
        BOOL v22 = *((_DWORD *)v26 + 18) <= *((_DWORD *)v27 + 18);
      }
      if (v22) {
        return result;
      }
    }
    else if (v19 <= v20 >> 3)
    {
      return result;
    }
    unint64_t v23 = &v27;
    uint64_t v24 = (uint64_t *)&v26;
    goto LABEL_38;
  }
  if (v3 <= v4 >> 3) {
    goto LABEL_6;
  }
LABEL_13:
  unint64_t v11 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
  if (v11 == v3)
  {
    double v12 = *(double *)(a3 + 56);
    double v13 = *(double *)(a2 + 56);
    BOOL v14 = v12 <= v13;
    if (v12 == v13) {
      BOOL v14 = *(_DWORD *)(a3 + 72) <= *(_DWORD *)(a2 + 72);
    }
    if (!v14) {
      goto LABEL_32;
    }
  }
  else if (v11 > v3)
  {
LABEL_32:
    unint64_t v23 = &v27;
LABEL_35:
    uint64_t v24 = &v25;
LABEL_38:
    *(void *)&double result = sub_10140EF74(v23, v24).n128_u64[0];
    return result;
  }
  *(void *)&double result = sub_10140EF74(&v27, (uint64_t *)&v26).n128_u64[0];
  unint64_t v15 = (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 3;
  uint64_t v16 = *((void *)v26 + 1) - *(void *)v26;
  if (v15 != v16 >> 3)
  {
    if (v15 <= v16 >> 3) {
      return result;
    }
    goto LABEL_34;
  }
  double result = *(double *)(v25 + 56);
  double v17 = *((double *)v26 + 7);
  BOOL v18 = result <= v17;
  if (result == v17) {
    BOOL v18 = *(_DWORD *)(v25 + 72) <= *((_DWORD *)v26 + 18);
  }
  if (!v18)
  {
LABEL_34:
    unint64_t v23 = &v26;
    goto LABEL_35;
  }
  return result;
}

BOOL sub_10140F3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v39 = a2;
  double v40 = (long long *)a1;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(a2 - 80);
      uint64_t v39 = a2 - 80;
      unint64_t v7 = (*(void *)(a2 - 72) - v6) >> 3;
      uint64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
      if (v7 != v8 >> 3)
      {
        if (v7 <= v8 >> 3) {
          return result;
        }
LABEL_42:
        sub_10140EF74(&v40, &v39);
        return 1;
      }
      double v9 = *(double *)(a2 - 24);
      double v10 = *(double *)(a1 + 56);
      BOOL v11 = v9 <= v10;
      if (v9 == v10) {
        BOOL v11 = *(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 72);
      }
      if (!v11) {
        goto LABEL_42;
      }
      return result;
    case 3uLL:
      sub_10140F230(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      sub_10140F77C(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      sub_10140F06C(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      double v12 = (__n128 *)(a1 + 160);
      sub_10140F230(a1, a1 + 80, a1 + 160);
      uint64_t v13 = a1 + 240;
      if (a1 + 240 == v2) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = a1 + 216;
      break;
  }
LABEL_10:
  unint64_t v16 = (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3;
  uint64_t v17 = v12->n128_u64[1] - v12->n128_u64[0];
  if (v16 == v17 >> 3)
  {
    double v18 = *(double *)(v13 + 56);
    double v19 = v12[3].n128_f64[1];
    BOOL v20 = v18 <= v19;
    if (v18 == v19) {
      BOOL v20 = *(_DWORD *)(v13 + 72) <= (signed __int32)v12[4].n128_u32[2];
    }
    if (v20) {
      goto LABEL_36;
    }
  }
  else
  {
    if (v16 <= v17 >> 3) {
      goto LABEL_36;
    }
    double v18 = *(double *)(v13 + 56);
  }
  unint64_t v34 = *(void *)v13;
  unint64_t v35 = *(void *)(v13 + 8);
  unint64_t v37 = *(void *)(v13 + 16);
  *(void *)uint64_t v13 = 0;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  unsigned __int32 v36 = *(_DWORD *)(v13 + 24);
  unint64_t v33 = *(void *)(v13 + 32);
  __n128 v38 = *(__n128 *)(v13 + 40);
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = 0;
  uint64_t v21 = *(void *)(v13 + 64);
  int v22 = *(_DWORD *)(v13 + 72);
  sub_1000F4EBC(v13, v12);
  *(_DWORD *)(v13 + 24) = v12[1].n128_u32[2];
  unint64_t v23 = v12 + 2;
  sub_1000F4EBC(v13 + 32, v12 + 2);
  *(__n128 *)(v13 + 56) = *(__n128 *)((char *)v12 + 56);
  *(_DWORD *)(v13 + 72) = v12[4].n128_u32[2];
  uint64_t v24 = v40;
  if (v12 == (__n128 *)v40)
  {
    BOOL v26 = &v12[3].n128_f64[1];
    goto LABEL_31;
  }
  uint64_t v25 = (char *)v15;
  while (1)
  {
    BOOL v26 = (double *)v25;
    uint64_t v27 = (__n128 *)(v25 - 136);
    uint64_t v28 = *((void *)v25 - 16) - *((void *)v25 - 17);
    if (v16 == v28 >> 3)
    {
      double v29 = *(v26 - 10);
      BOOL v30 = v18 <= v29;
      if (v18 == v29) {
        BOOL v30 = v22 <= *((_DWORD *)v26 - 16);
      }
      if (v30) {
        goto LABEL_31;
      }
    }
    else if (v16 <= v28 >> 3)
    {
      unint64_t v23 = (__n128 *)(v26 - 3);
      double v12 = (__n128 *)(v26 - 7);
LABEL_31:
      double v31 = (void *)v12->n128_u64[0];
      if (v12->n128_u64[0])
      {
        v12->n128_u64[1] = (unint64_t)v31;
        operator delete(v31);
      }
      v12->n128_u64[0] = v34;
      v12->n128_u64[1] = v35;
      v12[1].n128_u64[0] = v37;
      v12[1].n128_u32[2] = v36;
      BOOL v32 = (void *)v23->n128_u64[0];
      if (v23->n128_u64[0])
      {
        v12[2].n128_u64[1] = (unint64_t)v32;
        operator delete(v32);
        v23->n128_u64[1] = 0;
        v23[1].n128_u64[0] = 0;
      }
      v23->n128_u64[0] = v33;
      *(__n128 *)((char *)v12 + 40) = v38;
      *BOOL v26 = v18;
      *((void *)v26 + 1) = v21;
      *((_DWORD *)v26 + 4) = v22;
      ++v14;
      uint64_t v2 = v39;
      if (v14 == 8) {
        return v13 + 80 == v39;
      }
LABEL_36:
      double v12 = (__n128 *)v13;
      v15 += 80;
      v13 += 80;
      if (v13 == v2) {
        return 1;
      }
      goto LABEL_10;
    }
    sub_1000F4EBC((uint64_t)&v27[5], v27);
    *((_DWORD *)v26 - 8) = *((_DWORD *)v26 - 28);
    unint64_t v23 = v12 - 3;
    sub_1000F4EBC((uint64_t)(v26 - 3), (__n128 *)(v26 - 13));
    uint64_t v25 = (char *)(v26 - 10);
    *(_OWORD *)BOOL v26 = *((_OWORD *)v26 - 5);
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 - 16);
    v12 -= 5;
    if (v26 - 17 == (double *)v24)
    {
      double v12 = (__n128 *)v24;
      v26 -= 10;
      goto LABEL_31;
    }
  }
}

double sub_10140F77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v23 = (long long *)a2;
  uint64_t v24 = (long long *)a1;
  uint64_t v21 = a4;
  int v22 = (long long *)a3;
  double result = sub_10140F230(a1, a2, a3);
  unint64_t v9 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3;
  uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
  if (v9 == v10 >> 3)
  {
    double result = *(double *)(a4 + 56);
    double v11 = *(double *)(a3 + 56);
    BOOL v12 = result <= v11;
    if (result == v11) {
      BOOL v12 = *(_DWORD *)(a4 + 72) <= *(_DWORD *)(a3 + 72);
    }
    if (v12) {
      return result;
    }
  }
  else if (v9 <= v10 >> 3)
  {
    return result;
  }
  *(void *)&double result = sub_10140EF74(&v22, &v21).n128_u64[0];
  unint64_t v13 = (uint64_t)(*((void *)v22 + 1) - *(void *)v22) >> 3;
  uint64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13 == v14 >> 3)
  {
    double result = *((double *)v22 + 7);
    double v15 = *(double *)(a2 + 56);
    BOOL v16 = result <= v15;
    if (result == v15) {
      BOOL v16 = *((_DWORD *)v22 + 18) <= *(_DWORD *)(a2 + 72);
    }
    if (v16) {
      return result;
    }
  }
  else if (v13 <= v14 >> 3)
  {
    return result;
  }
  *(void *)&double result = sub_10140EF74(&v23, (uint64_t *)&v22).n128_u64[0];
  unint64_t v17 = (uint64_t)(*((void *)v23 + 1) - *(void *)v23) >> 3;
  uint64_t v18 = *(void *)(a1 + 8) - *(void *)a1;
  if (v17 != v18 >> 3)
  {
    if (v17 <= v18 >> 3) {
      return result;
    }
    goto LABEL_22;
  }
  double result = *((double *)v23 + 7);
  double v19 = *(double *)(a1 + 56);
  BOOL v20 = result <= v19;
  if (result == v19) {
    BOOL v20 = *((_DWORD *)v23 + 18) <= *(_DWORD *)(a1 + 72);
  }
  if (!v20) {
LABEL_22:
  }
    *(void *)&double result = sub_10140EF74(&v24, (uint64_t *)&v23).n128_u64[0];
  return result;
}

double sub_10140F8D4(uint64_t a1)
{
  return *(double *)a1;
}

void sub_10140F8E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  v4[1] = *(_OWORD *)a2;
  *((void *)v4 + 4) = *(void *)(a2 + 16);
  uint64_t v5 = *a1;
  *(void *)uint64_t v4 = *a1;
  *((void *)v4 + 1) = a1;
  *(void *)(v5 + 8) = v4;
  *a1 = (uint64_t)v4;
  uint64_t v6 = a1[2];
  BOOL v7 = __CFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  a1[2] = v8;
  if (!v7)
  {
    do
    {
      unint64_t v9 = (double *)a1[1];
      if (vabdd_f64(v9[2], *(double *)a2) <= 10.0) {
        break;
      }
      double v10 = *v9;
      *(double *)(*(void *)&v10 + 8) = v9[1];
      **((double **)v9 + 1) = v10;
      a1[2] = v8 - 1;
      operator delete(v9);
      uint64_t v8 = a1[2];
    }
    while (v8);
  }
  uint64_t v11 = a1[1];
  if ((uint64_t *)v11 != a1)
  {
    int v12 = 0;
    double v13 = 0.0;
    do
    {
      double v14 = *(double *)(v11 + 24);
      v12 += v14 >= 0.0 && *(double *)(v11 + 32) <= 50.0;
      if (v14 < 0.0 || *(double *)(v11 + 32) > 50.0) {
        double v14 = -0.0;
      }
      double v13 = v13 + v14;
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while ((uint64_t *)v11 != a1);
  }
}

int64_t sub_10140FE9C(id a1, id a2, id a3)
{
  return (int64_t)[a2 compare:a3];
}

void sub_10140FF28(id a1)
{
  qword_1024879B0 = &off_102398178;
}

void sub_10140FFD4(id a1)
{
  qword_1024879C0 = &off_102398190;
}

void sub_101410080(id a1)
{
  qword_1024879D0 = &off_1023981A8;
}

void sub_10141012C(id a1)
{
  qword_1024879E0 = &off_1023981C0;
}

void sub_1014101D0(id a1)
{
  qword_1024879F0 = &off_1023981D8;
}

void sub_101410274(id a1)
{
  qword_102487A00 = &off_1023981F0;
}

void sub_10141029C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_1014102CC(void *a1@<X8>)
{
  v6[0] = 0;
  sub_1000C7F88(buf);
  int v2 = sub_10006EF84(*(uint64_t *)buf, "GpsAssistanceTime", v6);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v6[0] == 1) {
    int v3 = 1;
  }
  else {
    int v3 = v2 ^ 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102325100);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GpsAssistanceTime,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    v6[1] = 67109120;
    _DWORD v6[2] = v3;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssAssistanceTime> CLGnssAssistanceTime::create(id<CLIntersiloUniverse>, CLGnssAssistanceTime::GnssTimeAssistanceCallback)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (v3) {
    operator new();
  }
  *a1 = 0;
}

void sub_10141051C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100854D00((uint64_t *)va);
  operator delete();
}

void sub_10141056C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  sub_101411FE4(a1 + 24, a3);
  *(_OWORD *)(a1 + 56) = xmmword_101DB7060;
  if (*(void *)(a1 + 48))
  {
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101AB4428(qword_1024193D0 == -1);
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102325100);
LABEL_3:
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "initializing CLGnssAssistanceTime Feature", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceTime::CLGnssAssistanceTime(id<CLIntersiloUniverse>, GnssTimeAssistanceCallback)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100667D20();
}

void sub_1014107EC(_Unwind_Exception *a1)
{
  sub_100854D00(v2);
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_101410848(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102325120);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    BOOL v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceTime::onTimeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102325120);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      double v14 = "";
      __int16 v15 = 2082;
      BOOL v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceTime::onTimeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_1014119A4(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1014109FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101410A1C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102325100);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssAssistanceTime,singleShot", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::singleShot()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_101410BB8(a1);
}

void sub_101410BB8(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102487A18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102487A18))
  {
    int v21 = sub_10073DC4C();
    double v22 = 1.0;
    if (v21)
    {
      int v23 = sub_10073C62C();
      double v22 = 0.1;
      if (v23) {
        double v22 = 0.0;
      }
    }
    qword_102487A10 = *(void *)&v22;
    __cxa_guard_release(&qword_102487A18);
  }
  double v2 = sub_10016C458();
  double v25 = 0.0;
  double v26 = 0.0;
  int v24 = 0;
  if (off_102478C08((uint64_t)&v26, (uint64_t)&v25, (uint64_t)&v24)) {
    BOOL v3 = v24 == 1;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    double v6 = sub_10016C458();
    double v7 = v6 - v2;
    double v8 = v2 + v6;
    double v9 = *(double *)&qword_102487A10;
    double v10 = fmax(*(double *)&qword_102487A10, 2.0);
    if (v25 > 0.2) {
      double v9 = v10;
    }
    if (v7 * 0.5 + v25 * 2.0 >= v9) {
      double v11 = v7 * 0.5 + v25 * 2.0;
    }
    else {
      double v11 = v9;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    double v12 = v8 * 0.5;
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134350080;
      double v38 = v7;
      __int16 v39 = 2050;
      double v40 = v11;
      __int16 v41 = 2050;
      double v42 = v12;
      __int16 v43 = 2050;
      double v44 = v26;
      __int16 v45 = 2050;
      double v46 = v25;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "referenceTime,delaySec,%{public}.3f,netUnc,%{public}.3f,applicabilityMct,%{public}.3f,referenceTime,%{public}.3f,%{public}.3f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      int v27 = 134350080;
      double v28 = v7;
      __int16 v29 = 2050;
      double v30 = v11;
      __int16 v31 = 2050;
      double v32 = v12;
      __int16 v33 = 2050;
      double v34 = v26;
      __int16 v35 = 2050;
      double v36 = v25;
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (v25 <= *(double *)(a1 + 64))
    {
      if (v26 <= 0.0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102325100);
        }
        uint64_t v18 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 134349312;
          double v38 = v26;
          __int16 v39 = 2050;
          double v40 = v25;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,referenceTime before the 0 epoch for iPhoneTime", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102325100);
          }
          int v27 = 134349312;
          double v28 = v26;
          __int16 v29 = 2050;
          double v30 = v25;
          uint64_t v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v5);
          goto LABEL_57;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102325100);
        }
        __int16 v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134218240;
          double v38 = v26;
          __int16 v39 = 2048;
          double v40 = v25;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "feeding,referenceTime,%.6lf,referenceTimeUnc,%.6lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102325100);
          }
          int v27 = 134218240;
          double v28 = v26;
          __int16 v29 = 2048;
          double v30 = v25;
          BOOL v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        sub_101411E64(a1 + 24, v26, v11, v12);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      double v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v15 = *(double *)(a1 + 64);
        *(_DWORD *)std::string buf = 134349568;
        double v38 = v26;
        __int16 v39 = 2050;
        double v40 = v25;
        __int16 v41 = 2050;
        double v42 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,uncThreshold,%{public}.3lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102325100);
        }
        double v16 = *(double *)(a1 + 64);
        int v27 = 134349568;
        double v28 = v26;
        __int16 v29 = 2050;
        double v30 = v25;
        __int16 v31 = 2050;
        double v32 = v16;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v5);
        goto LABEL_57;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134349568;
      double v38 = v26;
      __int16 v39 = 2050;
      double v40 = v25;
      __int16 v41 = 1026;
      LODWORD(v42) = v24;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,referenceTimeReliability,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      int v27 = 134349568;
      double v28 = v26;
      __int16 v29 = 2050;
      double v30 = v25;
      __int16 v31 = 1026;
      LODWORD(v32) = v24;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v5);
LABEL_57:
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_101411474(_Unwind_Exception *a1)
{
}

unsigned char *sub_101411494(unsigned char *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102325100);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "feed assistance time when starting GPS session", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::start()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_101410BB8((uint64_t)a1);
  return sub_101411638(a1);
}

unsigned char *sub_101411638(unsigned char *result)
{
  if (!result[16])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registered for time notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      BOOL v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::registerForTimeNotifications()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    double result = [*(id *)(*(void *)v1 + 16) register:*(void *)(*(void *)v1 + 8) forNotification:0 registrationInfo:0];
    v1[16] = 1;
  }
  return result;
}

unsigned char *sub_1014117F4(unsigned char *result)
{
  if (result[16])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistered for time notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      BOOL v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::unregisterForTimeNotifications()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    double result = [*(id *)(*(void *)v1 + 16) unregister:*(void *)(*(void *)v1 + 8) forNotification:0];
    v1[16] = 0;
  }
  return result;
}

void sub_1014119A4(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *a3;
      *(_DWORD *)std::string buf = 67109120;
      int v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unexpected message received, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::onTimeNotification(int, const CLTimeManager_Type::Notification &, const CLTimeManager_Type::NotificationData &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "kNotificationReferenceTime message", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::onTimeNotification(int, const CLTimeManager_Type::Notification &, const CLTimeManager_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_101410BB8(a1);
  }
}

void sub_101411C94(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 48))
  {
    double v3 = sub_10016C458();
    double v4 = *(double *)(a1 + 56);
    BOOL v6 = v4 > 0.0;
    double v5 = vabdd_f64(v3, v4);
    BOOL v6 = v6 && v5 <= 15.0;
    if (!v6)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102325100);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceTime,refresh,feedAssistanceTime", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102325100);
        }
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      sub_101410BB8(a1);
      *(double *)(a1 + 56) = v3;
    }
  }
}

uint64_t sub_101411E64(uint64_t a1, double a2, double a3, double a4)
{
  double v8 = a2;
  double v6 = a4;
  double v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, double *, double *, double *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_101411EC4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101411EF4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101411F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102487A20 != -1) {
    dispatch_once(&qword_102487A20, &stru_102325140);
  }
  double v6 = (uint64_t (*)())dlsym((void *)qword_102487A28, "TMGetReferenceTime");
  off_102478C08 = v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void sub_101411FB8(id a1)
{
  qword_102487A28 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreTime.framework/CoreTime", 2);
}

uint64_t sub_101411FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10141207C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  do
  {
    v19[v3] = *(float *)(a1 + 4 * dword_101DB7070[v3]);
    ++v3;
  }
  while (v3 != 150);
  for (uint64_t i = 0; i != 1600; ++i)
  {
    int v5 = word_101DB72C8[i];
    if (v5 < 0)
    {
      ++v5;
    }
    else
    {
      do
      {
        if (v19[aM_0[v5]] <= flt_101DDA3B4[v5]) {
          double v6 = (__int16 *)((char *)&unk_101DC3616 + 2 * v5);
        }
        else {
          double v6 = &asc_101DB7F48[v5];
        }
        int v5 = *v6;
      }
      while (v5 > 0);
    }
    *((float *)&v17 + (i & 7)) = flt_101DF1150[-v5] + *((float *)&v17 + (i & 7));
  }
  float v7 = *(float *)&v17;
  for (uint64_t j = 4; j != 32; j += 4)
  {
    if (*(float *)((char *)&v17 + j) > v7) {
      float v7 = *(float *)((char *)&v17 + j);
    }
  }
  uint64_t v9 = 0;
  float v10 = 0.0;
  do
  {
    float v11 = expf(*(float *)((char *)&v17 + v9) - v7);
    *(float *)((char *)&v17 + v9) = v11;
    float v10 = v10 + v11;
    v9 += 4;
  }
  while (v9 != 32);
  uint64_t v12 = 0;
  __int16 v13 = 0;
  float v14 = -3.4028e38;
  do
  {
    float v15 = *((float *)&v17 + v12) / v10;
    *((float *)&v17 + v12) = v15;
    if (v15 > v14)
    {
      __int16 v13 = v12;
      float v14 = v15;
    }
    ++v12;
  }
  while (v12 != 8);
  *(void *)a2 = qword_101E097F0[v13];
  *(float *)(a2 + 8) = v14;
  long long v16 = v18;
  *(_OWORD *)(a2 + 12) = v17;
  *(_OWORD *)(a2 + 28) = v16;
}

uint64_t sub_101412254(uint64_t a1)
{
  sub_10051310C(a1 + 40);

  return sub_10087B3F8(a1);
}

long long *sub_101412290()
{
  return &xmmword_10248D460;
}

char *sub_10141229C()
{
  return &byte_102478C18;
}

uint64_t *sub_1014122A8()
{
  return &qword_102478C30;
}

BOOL sub_1014122B4@<W0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  switch(a2)
  {
    case -1:
      int v3 = a1[91];
      goto LABEL_7;
    case 0:
      return sub_101412328(a1);
    case 1:
      int v3 = a1[88];
      goto LABEL_7;
    case 2:
      int v3 = a1[89];
      goto LABEL_7;
    case 3:
      int v3 = a1[90];
LABEL_7:
      a3 = v3 != 0;
      break;
    default:
      return a3;
  }
  return a3;
}

BOOL sub_101412328(unsigned char *a1)
{
  if (a1[118])
  {
    int v2 = a1[117];
  }
  else
  {
    BOOL v10 = 0;
    sub_1000C7F88(buf);
    int v3 = sub_1000D2988(*(uint64_t *)&buf[0], "isWifiPositionWithAssociatedApHomeLoiEnabled", &v10);
    if (*((void *)&buf[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    }
    if (v3)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102325180);
      }
      uint64_t v4 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        if (v10) {
          int v5 = "true";
        }
        else {
          int v5 = "false";
        }
        LODWORD(buf[0]) = 136380675;
        *(void *)((char *)buf + 4) = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiPositionWithAssociatedApHomeLoiEnabled to %{private}s", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102325180);
        }
        if (v10) {
          double v8 = "true";
        }
        else {
          double v8 = "false";
        }
        int v11 = 136380675;
        uint64_t v12 = v8;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifi1Settings::WifiPositionWithAssociatedAp::isHomeLoiEnabledBySettings()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      double v6 = &v10;
    }
    else
    {
      double v6 = a1 + 114;
    }
    int v2 = *v6;
    *(_WORD *)(a1 + 117) = v2 | 0x100;
  }
  return v2 != 0;
}

void sub_101412574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_101412594(id a1)
{
  sub_1000C7F88(buf);
  int v1 = sub_1000D2988(*(uint64_t *)&buf[0], "isWifiPositionWithAssociatedApEnabled", (BOOL *)&byte_102487A32);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102325180);
    }
    int v2 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_102487A32) {
        int v3 = "true";
      }
      else {
        int v3 = "false";
      }
      LODWORD(buf[0]) = 136380675;
      *(void *)((char *)buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiPositionWithAssociatedApEnabled to %{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102325180);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> CLWifi1Settings::WifiPositionWithAssociatedAp::isEnabledByDefaultsWrite()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    word_102487A30 = byte_102487A32 | 0x100;
  }
}

void sub_1014127C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1014127E0(uint64_t a1)
{
  if (qword_102487A38 != -1) {
    dispatch_once(&qword_102487A38, &stru_102325160);
  }
  int v2 = &word_102487A30;
  if (!HIBYTE(word_102487A30)) {
    int v2 = (__int16 *)(a1 + 113);
  }
  return *(unsigned char *)v2 != 0;
}

uint64_t sub_10141284C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102487A48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102487A48))
  {
    unk_102487A40 = sub_1014128DC();
    __cxa_guard_release(&qword_102487A48);
  }
  int v2 = (unsigned __int8 *)&unk_102487A40;
  if (!byte_102487A41) {
    int v2 = (unsigned __int8 *)(a1 + 115);
  }
  return *v2;
}

void sub_1014128C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1014128DC()
{
  BOOL v8 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)&buf[0], "isWifiHarvestEnabled", &v8);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102325180);
    }
    int v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (v8) {
        int v2 = "true";
      }
      else {
        int v2 = "false";
      }
      LODWORD(buf[0]) = 136380675;
      *(void *)((char *)buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiHarvestEnabled to %{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102325180);
      }
      if (v8) {
        double v6 = "true";
      }
      else {
        double v6 = "false";
      }
      int v9 = 136380675;
      BOOL v10 = v6;
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> isWifiHarvestEnabledByDefaultsWrite()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v3 = 1;
    BOOL v4 = v8;
  }
  else
  {
    int v3 = 0;
    BOOL v4 = 0;
  }
  return v4 | (v3 << 8);
}

void sub_101412B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101412B24(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102487A58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102487A58))
  {
    unk_102487A50 = sub_101412BB4();
    __cxa_guard_release(&qword_102487A58);
  }
  int v2 = (unsigned __int8 *)&unk_102487A50;
  if (!byte_102487A51) {
    int v2 = (unsigned __int8 *)(a1 + 116);
  }
  return *v2;
}

void sub_101412B9C(_Unwind_Exception *a1)
{
}

uint64_t sub_101412BB4()
{
  BOOL v8 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)&buf[0], "isWifiHarvestUsed", &v8);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102325180);
    }
    int v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (v8) {
        int v2 = "true";
      }
      else {
        int v2 = "false";
      }
      LODWORD(buf[0]) = 136380675;
      *(void *)((char *)buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#Warning defaults write isWifiHarvestUsed to %{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102325180);
      }
      if (v8) {
        double v6 = "true";
      }
      else {
        double v6 = "false";
      }
      int v9 = 136380675;
      BOOL v10 = v6;
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> isWifiHarvestUsedByDefaultsWrite()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v3 = 1;
    BOOL v4 = v8;
  }
  else
  {
    int v3 = 0;
    BOOL v4 = 0;
  }
  return v4 | (v3 << 8);
}

void sub_101412DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

double sub_101412DFC(uint64_t *a1)
{
  int v1 = a1;
  uint64_t v6 = *a1;
  sub_1000C7F88(buf);
  int v2 = sub_1000A699C(*(uint64_t *)&buf[0], "databasePurgeThreshold", &v6);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102325180);
    }
    int v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134283521;
      *(void *)((char *)buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWifi1Settings, #Warning defaults write databasePurgeThreshold to %{private}.1f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102325180);
      }
      int v7 = 134283521;
      uint64_t v8 = v6;
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLWifi1Settings::WifiPositionWithAssociatedAp::getDatabasePurgeThreshold()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    int v1 = &v6;
  }
  return *(double *)v1;
}

void sub_101412FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10141300C()
{
  return &byte_102478CA8;
}

int *sub_101413018()
{
  return &dword_102478D08;
}

int *sub_101413024()
{
  return &dword_102478D28;
}

void *sub_101413030()
{
  return &unk_10248D6A0;
}

uint64_t *sub_10141303C()
{
  return &qword_102478D30;
}

int *sub_101413048()
{
  return &dword_102478D50;
}

__int16 *sub_101413054()
{
  return &word_102478D5C;
}

char *sub_101413060()
{
  return &byte_102478D64;
}

uint64_t sub_10141306C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v17 = a2;
  uint64_t v6 = a1 + 5;
  uint64_t v5 = a1[5];
  float v15 = a1 + 5;
  (*(void (**)(void *))(v5 + 16))(a1 + 5);
  __int16 v16 = 256;
  int v7 = sub_10065EA54(a1, &v17);
  if (!v7)
  {
LABEL_7:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  }
  long long __p = 0;
  __int16 v13 = 0;
  uint64_t v14 = 0;
  sub_10010F834(&__p, v7[3], (uint64_t)v7[4], ((char *)v7[4] - (char *)v7[3]) >> 2);
  uint64_t v8 = __p;
  uint64_t v9 = (uint64_t)v13;
  int64_t v10 = v13 - (unsigned char *)__p;
  if (v13 == __p)
  {
    if (v13) {
      operator delete(v13);
    }
    goto LABEL_7;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_10010F834((void *)a3, v8, v9, v10 >> 2);
  *(unsigned char *)(a3 + 24) = 1;
  if (__p)
  {
    __int16 v13 = __p;
    operator delete(__p);
  }
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_101413180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1014131B4(uint64_t a1, char a2, uint64_t a3)
{
  char v8 = a2;
  uint64_t v5 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  uint64_t v9 = &v8;
  uint64_t v6 = (char *)(sub_10141E324(a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 3);
  if (v6 != (char *)a3) {
    sub_1000FB43C(v6, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_101413290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014132A4(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_100513074(a1 + 40, "CLWifi1SettingsWifiService", 1, 1);
  return a1;
}

void sub_1014132F0(_Unwind_Exception *a1)
{
  sub_10087B3F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101413304(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v215);
  if (sub_100012960(a2, "Wifi1", v215))
  {
    sub_1000E9354(v214);
    if (sub_100012960((uint64_t)v215, "ZAxis", v214))
    {
      LODWORD(v213[0]) = 0;
      if (sub_1004D0870((uint64_t)v214, "MaxInputAps", v213))
      {
        if (LODWORD(v213[0]))
        {
          dword_10248D5B0 = LODWORD(v213[0]);
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v3 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = LODWORD(v213[0]);
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiMaxInputAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = LODWORD(v213[0]);
            uint64_t v187 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v187);
            if (v187 != buf) {
              free(v187);
            }
          }
        }
      }
      LODWORD(v212[0]) = 0;
      if (sub_10006EF84((uint64_t)v214, "iDefaultMinNumSufficientInputSlamAps", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v4 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDefaultMinNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            unint64_t v188 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v188);
            if (v188 != buf) {
              free(v188);
            }
          }
        }
        else
        {
          dword_10248D5C8 = v212[0];
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iFoliageMinNumSufficientInputSlamAps", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v5 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iFoliageMinNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            double v189 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v189);
            if (v189 != buf) {
              free(v189);
            }
          }
        }
        else
        {
          dword_10248D5CC = v212[0];
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iRuralMinNumSufficientInputSlamAps", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v6 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iRuralMinNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            uint64_t v190 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v190);
            if (v190 != buf) {
              free(v190);
            }
          }
        }
        else
        {
          dword_10248D5D0 = v212[0];
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iUrbanMinNumSufficientInputSlamAps", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v7 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iUrbanMinNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            long long v191 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v191);
            if (v191 != buf) {
              free(v191);
            }
          }
        }
        else
        {
          dword_10248D5D4 = v212[0];
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iDenseUrbanMinNumSufficientInputSlamAps", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          char v8 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDenseUrbanMinNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            long long v192 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v192);
            if (v192 != buf) {
              free(v192);
            }
          }
        }
        else
        {
          dword_10248D5D8 = v212[0];
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iDenseUrbanCanyonMinNumSufficientInputSlamAps", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v9 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iDenseUrbanCanyonMinNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            unint64_t v193 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v193);
            if (v193 != buf) {
              free(v193);
            }
          }
        }
        else
        {
          dword_10248D5DC = v212[0];
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iMaxScannedApRssiSpread", v212))
      {
        if ((v212[0] & 0x80000000) != 0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int64_t v10 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iMaxScannedApRssiSpread", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            unint64_t v194 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v194);
            if (v194 != buf) {
              free(v194);
            }
          }
        }
        else
        {
          dword_10248D600 = v212[0];
        }
      }
      *(void *)unint64_t v225 = 0;
      if (sub_1000A699C((uint64_t)v214, "dMaxAge_s_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v11 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAge_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v128 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v128);
            if (v128 != buf) {
              free(v128);
            }
          }
        }
        else
        {
          qword_10248D688 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxRSSImeas_dbm_v2", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v12 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            BOOL v129 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v129);
            if (v129 != buf) {
              free(v129);
            }
          }
        }
        else
        {
          qword_10248D658 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinAge_s_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v13 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAge_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v130 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v130);
            if (v130 != buf) {
              free(v130);
            }
          }
        }
        else
        {
          qword_10248D690 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinReach_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v14 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinReach_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v131 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v131);
            if (v131 != buf) {
              free(v131);
            }
          }
        }
        else
        {
          qword_10248D650 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinRSSImeas_dbm_v2", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          float v15 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v132 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v132);
            if (v132 != buf) {
              free(v132);
            }
          }
        }
        else
        {
          qword_10248D660 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinUnc_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v16 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinUnc_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v133 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v133);
            if (v133 != buf) {
              free(v133);
            }
          }
        }
        else
        {
          qword_10248D648 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dTauAge_s_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          char v17 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauAge_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unsigned int v134 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v134);
            if (v134 != buf) {
              free(v134);
            }
          }
        }
        else
        {
          qword_10248D680 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dTauReach_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          long long v18 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauReach_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v135 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v135);
            if (v135 != buf) {
              free(v135);
            }
          }
        }
        else
        {
          qword_10248D670 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinVerticalAccuracy_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v19 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVerticalAccuracy_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            int64_t v136 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v136);
            if (v136 != buf) {
              free(v136);
            }
          }
        }
        else
        {
          qword_10248D5B8 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dUncertaintyThreshold_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v20 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dUncertaintyThreshold_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v137 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v137);
            if (v137 != buf) {
              free(v137);
            }
          }
        }
        else
        {
          qword_10248D5F0 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dOutlierRejectionThreshold_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v21 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dOutlierRejectionThreshold_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v138 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v138);
            if (v138 != buf) {
              free(v138);
            }
          }
        }
        else
        {
          qword_10248D5F8 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinVerticalAccuracyForInsufficientData_m_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v22 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVerticalAccuracyForInsufficientData_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v139 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v139);
            if (v139 != buf) {
              free(v139);
            }
          }
        }
        else
        {
          qword_10248D5C0 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dVerticalAccuracyScaleFactor_v2", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v23 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dVerticalAccuracyScaleFactor", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v140 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v140);
            if (v140 != buf) {
              free(v140);
            }
          }
        }
        else
        {
          qword_10248D5E0 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinAllowedMaxRssi_dbm_v2", v225))
      {
        if (*(double *)v225 < *(double *)&qword_10248D660 || *(double *)v225 > *(double *)&qword_10248D658)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v24 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAllowedMaxRssi_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v141 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v141);
            if (v141 != buf) {
              free(v141);
            }
          }
        }
        else
        {
          qword_10248D4E0 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinAllowedMeanRssi_dbm", v225))
      {
        if (*(double *)v225 < *(double *)&qword_10248D660 || *(double *)v225 > *(double *)&qword_10248D658)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v25 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAllowedMeanRssi_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v142 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v142);
            if (v142 != buf) {
              free(v142);
            }
          }
        }
        else
        {
          qword_10248D4E8 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAllowedMeanMaxRssiDiff", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D4F0 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v26 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedMeanMaxRssiDiff", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            int v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v27);
            if (v27 != buf) {
              free(v27);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dDiffMaxRssisDivisor", v225))
      {
        if (*(double *)v225 == 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v28 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dDiffMaxRssisDivisor", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v195 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v195);
            if (v195 != buf) {
              free(v195);
            }
          }
        }
        else
        {
          qword_10248D608 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dStarvationRatioScaleFactor", v225)) {
        qword_10248D610 = *(void *)v225;
      }
      if (sub_1000A699C((uint64_t)v214, "dHighVisibilityScaleFactor", v225)) {
        qword_10248D618 = *(void *)v225;
      }
      if (sub_1000A699C((uint64_t)v214, "dSingleShotUncAvgWeightFactor", v225))
      {
        if (*(double *)v225 < 0.0 || *(double *)v225 > 1.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v29 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dSingleShotUncAvgWeightFactor", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            BOOL v143 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v143);
            if (v143 != buf) {
              free(v143);
            }
          }
        }
        else
        {
          qword_10248D620 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxTimeBetweenTwoFixes_s", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D628 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v30 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxTimeBetweenTwoFixes_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            __int16 v31 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v31);
            if (v31 != buf) {
              free(v31);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dTauUncert_m", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v32 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauUncert_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v144 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v144);
            if (v144 != buf) {
              free(v144);
            }
          }
        }
        else
        {
          qword_10248D668 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dTauRSSI_dbm", v225)) {
        qword_10248D678 = *(void *)v225;
      }
      if (sub_1000A699C((uint64_t)v214, "dYieldBaroOverWifiUncertaintyThreshold_m", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v33 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dYieldBaroOverWifiUncertaintyThreshold_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v145 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v145);
            if (v145 != buf) {
              free(v145);
            }
          }
        }
        else
        {
          qword_10248D640 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinAcceptableRssi_dbm", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v34 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAcceptableRssi_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            BOOL v146 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v146);
            if (v146 != buf) {
              free(v146);
            }
          }
        }
        else
        {
          qword_10248D5E8 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAltitudeSpread_m", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D5A8 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v35 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeSpread_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v36 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v36);
            if (v36 != buf) {
              free(v36);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dInitialAltUncAverage_m", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D630 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v37 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dInitialAltUncAverage_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v38 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v38);
            if (v38 != buf) {
              free(v38);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxPrevCurAltDiffToAvg", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D638 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v39 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxPrevCurAltDiffToAvg", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v40 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v40);
            if (v40 != buf) {
              free(v40);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dStableProcessNoiseVariance", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v41 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dStableProcessNoiseVariance", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v147 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v147);
            if (v147 != buf) {
              free(v147);
            }
          }
        }
        else
        {
          qword_10248D4F8 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dUnstableProcessNoiseVariance", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v42 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dUnstableProcessNoiseVariance", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v148 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v148);
            if (v148 != buf) {
              free(v148);
            }
          }
        }
        else
        {
          qword_10248D500 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAltitudeVelocity", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v43 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeVelocity", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v149 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v149);
            if (v149 != buf) {
              free(v149);
            }
          }
        }
        else
        {
          qword_10248D510 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAltitudeVelocityForUpdate", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v44 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAltitudeVelocityForUpdate", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v151 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v151);
            if (v151 != buf) {
              free(v151);
            }
          }
        }
        else
        {
          qword_10248D560 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMeasurementUncScaleFactor", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v45 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMeasurementUncScaleFactor", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v153 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v153);
            if (v153 != buf) {
              free(v153);
            }
          }
        }
        else
        {
          qword_10248D518 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dReportingUncScaleFactor", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v46 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dReportingUncScaleFactor", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v155 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v155);
            if (v155 != buf) {
              free(v155);
            }
          }
        }
        else
        {
          qword_10248D520 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinVuncToReport_m", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          long long v47 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVuncToReport_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v157 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v157);
            if (v157 != buf) {
              free(v157);
            }
          }
        }
        else
        {
          qword_10248D528 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinRssiToInitialize_dBm", v225))
      {
        if (*(double *)v225 < *(double *)&qword_10248D660 || *(double *)v225 > *(double *)&qword_10248D658)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v48 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRssiToInitialize_dBm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v159 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v159);
            if (v159 != buf) {
              free(v159);
            }
          }
        }
        else
        {
          qword_10248D530 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinVuncToInitialize_m", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v49 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinVuncToInitialize_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v161 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v161);
            if (v161 != buf) {
              free(v161);
            }
          }
        }
        else
        {
          qword_10248D538 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinNoPropagateWaitTimeToStop_s", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v50 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinNoPropagateWaitTimeToStop_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v162 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v162);
            if (v162 != buf) {
              free(v162);
            }
          }
        }
        else
        {
          qword_10248D540 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinNoUpdateWaitTimeToStop_s", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v51 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinNoUpdateWaitTimeToStop_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v163 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v163);
            if (v163 != buf) {
              free(v163);
            }
          }
        }
        else
        {
          qword_10248D548 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dNormalizedInnovSquaredThreshold", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D580 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v52 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dNormalizedInnovSquaredThreshold", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v53 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v53);
            if (v53 != buf) {
              free(v53);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dProcessNoiseCovarianceScalingFactor", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D588 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v54 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dProcessNoiseCovarianceScalingFactor", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            unint64_t v55 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v55);
            if (v55 != buf) {
              free(v55);
            }
          }
        }
      }
      if (sub_10006EF84((uint64_t)v214, "iMaxNumberOfClusters", v212))
      {
        if (SLODWORD(v212[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v56 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to iMaxNumberOfClusters", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 67174657;
            LODWORD(v227) = v212[0];
            long long v198 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v198);
            if (v198 != buf) {
              free(v198);
            }
          }
        }
        else
        {
          dword_10248D590 = v212[0];
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAllowedClustersDistance_m", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v57 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedClustersDistance_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            double v164 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v164);
            if (v164 != buf) {
              free(v164);
            }
          }
        }
        else
        {
          qword_10248D598 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinStrongestClusterWeightToTotalWeight", v225))
      {
        if (*(double *)v225 < 0.0 || *(double *)v225 > 1.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v58 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinStrongestClusterWeightToTotalWeight", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            BOOL v165 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v165);
            if (v165 != buf) {
              free(v165);
            }
          }
        }
        else
        {
          qword_10248D5A0 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAcceptableBaroWifiTimeDiffToInitialize_s", v225))
      {
        if (*(double *)v225 >= 0.0)
        {
          qword_10248D550 = *(void *)v225;
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v59 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAcceptableBaroWifiTimeDiffToInitialize_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            int v60 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v60);
            if (v60 != buf) {
              free(v60);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxPropagationTimeDuringBaroOutage_s", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v61 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxPropagationTimeDuringBaroOutage_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v166 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v166);
            if (v166 != buf) {
              free(v166);
            }
          }
        }
        else
        {
          qword_10248D558 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMinMeanRssiToInitialize_dbm", v225))
      {
        if (*(double *)v225 < *(double *)&qword_10248D660 || *(double *)v225 > *(double *)&qword_10248D658)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v62 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinMeanRssiToInitialize_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v167 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v167);
            if (v167 != buf) {
              free(v167);
            }
          }
        }
        else
        {
          qword_10248D570 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxAllowedMeanMaxRssiDiffToInitialize", v225))
      {
        if (*(double *)v225 < *(double *)&qword_10248D660 || *(double *)v225 > *(double *)&qword_10248D658)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v63 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAllowedMeanMaxRssiDiffToInitialize", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            uint64_t v168 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v168);
            if (v168 != buf) {
              free(v168);
            }
          }
        }
        else
        {
          qword_10248D568 = *(void *)v225;
        }
      }
      if (sub_1000A699C((uint64_t)v214, "dMaxInnovation_m", v225))
      {
        if (*(double *)v225 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v64 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v225;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxInnovation_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v226 = 134283521;
            uint64_t v227 = *(void *)v225;
            long long v169 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v169);
            if (v169 != buf) {
              free(v169);
            }
          }
        }
        else
        {
          qword_10248D578 = *(void *)v225;
        }
      }
    }
    sub_1000E9354(&v226);
    if (sub_100012960((uint64_t)v215, "LatLon", &v226))
    {
      LODWORD(v212[0]) = 0;
      v213[0] = 0.0;
      LOBYTE(v211[0]) = 0;
      if (sub_1004D0870((uint64_t)&v226, "uiMaxOutlierCntHS", v212)) {
        LODWORD(qword_10248D4B0) = v212[0];
      }
      if (sub_1004D0870((uint64_t)&v226, "uiMaxInputAps", v212))
      {
        if (LODWORD(v212[0]))
        {
          HIDWORD(qword_10248D4B0) = v212[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v65 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiMaxInputAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 67174657;
            *(_DWORD *)&v225[4] = v212[0];
            BOOL v196 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v196);
            if (v196 != buf) {
              free(v196);
            }
          }
        }
      }
      if (sub_1004D0870((uint64_t)&v226, "uiReqMinNumAP", v212)) {
        dword_10248D4B8 = v212[0];
      }
      if (sub_1004D0870((uint64_t)&v226, "uiSingleAPConfidence", v212))
      {
        if (LODWORD(v212[0]))
        {
          HIDWORD(qword_10248D4C8) = v212[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v66 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v212[0];
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to uiSingleAPConfidence", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 67174657;
            *(_DWORD *)&v225[4] = v212[0];
            long long v197 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v197);
            if (v197 != buf) {
              free(v197);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMaxLocationHintAge", v213))
      {
        if (v213[0] >= 0.0)
        {
          qword_10248D4D0 = *(void *)&v213[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v67 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxLocationHintAge", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            double v68 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v68);
            if (v68 != buf) {
              free(v68);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMinHintUnc", v213))
      {
        if (v213[0] >= 0.0)
        {
          qword_10248D4C0 = *(void *)&v213[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v69 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinHintUnc", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            uint64_t v70 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v70);
            if (v70 != buf) {
              free(v70);
            }
          }
        }
      }
      if (sub_1004D0870((uint64_t)&v226, "uiNumOfAPsToIgnoreHint", v212)) {
        LODWORD(qword_10248D4C8) = v212[0];
      }
      if (sub_1000A699C((uint64_t)&v226, "dMinUnc_m", v213))
      {
        if (v213[0] >= 0.0)
        {
          *(double *)&xmmword_10248D460 = v213[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v71 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinUnc_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            BOOL v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v72);
            if (v72 != buf) {
              free(v72);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMinReach_m", v213))
      {
        if (v213[0] >= 0.0)
        {
          *((double *)&xmmword_10248D460 + 1) = v213[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v73 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinReach_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            uint64_t v74 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v74);
            if (v74 != buf) {
              free(v74);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMaxRSSImeas_dbm", v213))
      {
        if (v213[0] >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v75 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            int64_t v150 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v150);
            if (v150 != buf) {
              free(v150);
            }
          }
        }
        else
        {
          qword_10248D470 = *(void *)&v213[0];
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMinRSSImeas_dbm", v213))
      {
        if (v213[0] >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v76 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinRSSImeas_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            uint64_t v152 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v152);
            if (v152 != buf) {
              free(v152);
            }
          }
        }
        else
        {
          qword_10248D478 = *(void *)&v213[0];
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dTauUncert_m", v213))
      {
        if (v213[0] <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v77 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauUncert_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            int v154 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v154);
            if (v154 != buf) {
              free(v154);
            }
          }
        }
        else
        {
          *(double *)&xmmword_10248D480 = v213[0];
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dTauReach_m", v213))
      {
        if (v213[0] <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v78 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauReach_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            uint64_t v156 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v156);
            if (v156 != buf) {
              free(v156);
            }
          }
        }
        else
        {
          *((double *)&xmmword_10248D480 + 1) = v213[0];
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dTauRSSI_dbm", v213))
      {
        if (v213[0] <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v79 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauRSSI_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            uint64_t v158 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v158);
            if (v158 != buf) {
              free(v158);
            }
          }
        }
        else
        {
          qword_10248D490 = *(void *)&v213[0];
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dTauAge_s", v213))
      {
        if (v213[0] <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v80 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dTauAge_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            int64_t v160 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v160);
            if (v160 != buf) {
              free(v160);
            }
          }
        }
        else
        {
          qword_10248D498 = *(void *)&v213[0];
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMaxAge_s", v213))
      {
        if (v213[0] >= 0.0)
        {
          *(double *)&xmmword_10248D4A0 = v213[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v81 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMaxAge_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            BOOL v82 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v82);
            if (v82 != buf) {
              free(v82);
            }
          }
        }
      }
      if (sub_1000A699C((uint64_t)&v226, "dMinAge_s", v213))
      {
        if (v213[0] >= 0.0)
        {
          *((double *)&xmmword_10248D4A0 + 1) = v213[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v83 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v213[0];
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to dMinAge_s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)unint64_t v225 = 134283521;
            *(double *)&v225[4] = v213[0];
            long long v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v84);
            if (v84 != buf) {
              free(v84);
            }
          }
        }
      }
      if (sub_1000D2988((uint64_t)&v226, "useIterativeOutlierRejectionAlg", (BOOL *)v211)) {
        byte_10248D4D8 = v211[0];
      }
    }
    sub_1000E9354(v225);
    if (sub_100012960((uint64_t)v215, "E911Scan", v225))
    {
      buf[0] = 0;
      if (sub_1000D2988((uint64_t)v225, "AlwaysScan5GHz", buf)) {
        byte_102478C18 = buf[0];
      }
    }
    sub_1000E9354(v213);
    if (sub_100012960((uint64_t)v215, "MovingApDetector", v213))
    {
      LOBYTE(v212[0]) = 0;
      *(void *)std::string buf = 0;
      if (sub_1000D2988((uint64_t)v213, "isEnabled", (BOOL *)v212)) {
        byte_102478C20 = v212[0];
      }
      if (sub_1000D2988((uint64_t)v213, "isCellFixUsedForCrossCheck", (BOOL *)v212)) {
        byte_102478C21 = v212[0];
      }
      if (sub_1000A699C((uint64_t)v213, "maxAllowedDistanceChange", buf)) {
        qword_102478C28 = *(void *)buf;
      }
    }
    sub_1000E9354(v212);
    if (sub_100012960((uint64_t)v215, "ALSQuery", v212))
    {
      *(_DWORD *)std::string buf = 0;
      if (sub_1004D0870((uint64_t)v212, "desiredKnownWifiAps", buf)) {
        dword_102478D58 = *(_DWORD *)buf;
      }
    }
    sub_1000E9354(v211);
    if (sub_100012960((uint64_t)v215, "WifiPositionWithAssociatedAp", v211))
    {
      LOBYTE(v220[0]) = 0;
      *(void *)uint64_t v222 = 0;
      *(_DWORD *)int v221 = 0;
      if (sub_1000D2988((uint64_t)v211, "isEnabled", (BOOL *)v220)) {
        byte_102478CA0 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "isWifiHarvestEnabled", (BOOL *)v220)) {
        byte_102478CA3 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "isWifiHarvestUsed", (BOOL *)v220)) {
        byte_102478CA4 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, off_102478C10, (BOOL *)v220)) {
        byte_102478CA1 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "IsHomeLoiEnabled", (BOOL *)v220)) {
        byte_102478CA2 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "isWorkLoiEnabled", (BOOL *)v220)) {
        byte_102478C88 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "isSchoolLoiEnabled", (BOOL *)v220)) {
        byte_102478C89 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "isGymLoiEnabled", (BOOL *)v220)) {
        byte_102478C8A = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "isUnknownLoiEnabled", (BOOL *)v220)) {
        byte_102478C8B = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "skipWifiScanIfPossible", (BOOL *)v220)) {
        byte_102478C8C = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForIphone", (BOOL *)v220)) {
        byte_102478C8D = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForIpadWithGnss", (BOOL *)v220)) {
        byte_102478C8E = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForIpadWithoutGnss", (BOOL *)v220)) {
        byte_102478C8F = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForWatch", (BOOL *)v220)) {
        byte_102478C90 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForMacOS", (BOOL *)v220)) {
        byte_102478C91 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForAppleTV", (BOOL *)v220)) {
        byte_102478C92 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForHomePod", (BOOL *)v220)) {
        byte_102478C93 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForTVOS", (BOOL *)v220)) {
        byte_102478C94 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForVisionPro", (BOOL *)v220)) {
        byte_102478C95 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "iCloudSharingEnabledForAllOtherPlatforms", (BOOL *)v220)) {
        byte_102478C96 = LOBYTE(v220[0]);
      }
      if (sub_1000D2988((uint64_t)v211, "applyPrivacyPoliciesWheniCloudSharingIsDisabled", (BOOL *)v220)) {
        byte_102478C97 = LOBYTE(v220[0]);
      }
      if (sub_1000A699C((uint64_t)v211, "iCloudSyncTimeIntervalInSecs", v222))
      {
        if (*(double *)v222 <= 0.0 || (*(void *)v222 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v85 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to iCloudSyncTimeIntervalInSecs", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            BOOL v123 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v123);
            if (v123 != buf) {
              free(v123);
            }
          }
        }
        else
        {
          qword_102478C98 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "databasePurgeThreshold", v222))
      {
        if (*(double *)v222 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v86 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to databasePurgeThreshold", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            long long v171 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v171);
            if (v171 != buf) {
              free(v171);
            }
          }
        }
        else
        {
          qword_102478C30 = *(void *)v222;
        }
      }
      if (sub_10006EF84((uint64_t)v211, "maxSamplePointsPerAp", v221))
      {
        if (*(int *)v221 < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v87 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)v221;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxSamplePointsPerAp", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 67174657;
            LODWORD(v224) = *(_DWORD *)v221;
            long long v199 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v199);
            if (v199 != buf) {
              free(v199);
            }
          }
        }
        else
        {
          dword_102478C38 = *(_DWORD *)v221;
        }
      }
      if (sub_10006EF84((uint64_t)v211, "maxNumDistinctAps", v221))
      {
        if (*(int *)v221 < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v88 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)v221;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumDistinctAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 67174657;
            LODWORD(v224) = *(_DWORD *)v221;
            unint64_t v200 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v200);
            if (v200 != buf) {
              free(v200);
            }
          }
        }
        else
        {
          dword_102478C3C = *(_DWORD *)v221;
        }
      }
      if (sub_10006EF84((uint64_t)v211, "minStationaryTimeInSeconds", v221))
      {
        if (*(int *)v221 < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v89 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)v221;
            _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minStationaryTimeInSeconds", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 67174657;
            LODWORD(v224) = *(_DWORD *)v221;
            double v201 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v201);
            if (v201 != buf) {
              free(v201);
            }
          }
        }
        else
        {
          dword_102478C40 = *(_DWORD *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "minTimelapseInSecondsSinceLastHarvest", v222))
      {
        if (*(double *)v222 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v90 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minTimelapseInSecondsSinceLastHarvest", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            unint64_t v176 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v176);
            if (v176 != buf) {
              free(v176);
            }
          }
        }
        else
        {
          qword_102478C48 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "maxTimelapseInSecondsSinceLastHarvest", v222))
      {
        if (*(double *)v222 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v91 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxTimelapseInSecondsSinceLastHarvest", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            unint64_t v178 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v178);
            if (v178 != buf) {
              free(v178);
            }
          }
        }
        else
        {
          qword_102478C50 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "maxDistanceBetweenServerSideCentroidAndClientSideCentroid", v222))
      {
        if (*(double *)v222 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v92 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxDistanceBetweenServerSideCentroidAndClientSideCentroid", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            unint64_t v180 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v180);
            if (v180 != buf) {
              free(v180);
            }
          }
        }
        else
        {
          qword_102478C58 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "maxAllowedHorizontalAccuracy", v222))
      {
        if (*(double *)v222 <= 0.0 || (*(void *)v222 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v93 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedHorizontalAccuracy", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            __int16 v124 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v124);
            if (v124 != buf) {
              free(v124);
            }
          }
        }
        else
        {
          qword_102478C60 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "maxAllowedAgeOfLatestWifiHarvest", v222))
      {
        if (*(double *)v222 <= 0.0 || (*(void *)v222 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v94 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedAgeOfLatestWifiHarvest", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            unint64_t v125 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v125);
            if (v125 != buf) {
              free(v125);
            }
          }
        }
        else
        {
          qword_102478C68 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "maxAllowedAgeOfLatestGpsHarvest", v222))
      {
        if (*(double *)v222 <= 0.0 || (*(void *)v222 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v95 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxAllowedAgeOfLatestGpsHarvest", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            unint64_t v126 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v126);
            if (v126 != buf) {
              free(v126);
            }
          }
        }
        else
        {
          qword_102478C70 = *(void *)v222;
        }
      }
      if (sub_1000A699C((uint64_t)v211, "minDistanceToPurgeLocalAssociatedApCentroids", v222))
      {
        if (*(double *)v222 <= 0.0 || (*(void *)v222 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v96 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v222;
            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minDistanceToPurgeLocalAssociatedApCentroids", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v223 = 134283521;
            uint64_t v224 = *(void *)v222;
            double v127 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v127);
            if (v127 != buf) {
              free(v127);
            }
          }
        }
        else
        {
          qword_102478C80 = *(void *)v222;
        }
      }
    }
    sub_1000E9354(&v223);
    if (sub_100012960((uint64_t)v215, "WifiCentroidCalculator", &v223))
    {
      LOBYTE(v210[0]) = 0;
      *(void *)int v221 = 0;
      LODWORD(v220[0]) = 0;
      if (sub_1000D2988((uint64_t)&v223, "rssiWeightEnabled", (BOOL *)v210)) {
        byte_102478CA8 = v210[0];
      }
      if (sub_1000A699C((uint64_t)&v223, "minRssi_dbm", v221))
      {
        if (*(double *)v221 >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v97 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minRssi_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            long long v170 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v170);
            if (v170 != buf) {
              free(v170);
            }
          }
        }
        else
        {
          qword_102478CB0 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "maxRssi_dbm", v221))
      {
        if (*(double *)v221 >= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v98 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to maxRssi_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            long long v172 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v172);
            if (v172 != buf) {
              free(v172);
            }
          }
        }
        else
        {
          qword_102478CB8 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "rssiWeight_Tau_dbm", v221))
      {
        if (*(double *)v221 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v99 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to rssiWeight_Tau_dbm", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            uint64_t v173 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v173);
            if (v173 != buf) {
              free(v173);
            }
          }
        }
        else
        {
          qword_102478CC0 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "vAcc_validthres_m", v221))
      {
        if (*(double *)v221 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v100 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to vAcc_validthres_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            uint64_t v174 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v174);
            if (v174 != buf) {
              free(v174);
            }
          }
        }
        else
        {
          qword_102478CC8 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "alt_diversity_m", v221))
      {
        if (*(double *)v221 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v101 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to alt_diversity_m", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            unint64_t v175 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v175);
            if (v175 != buf) {
              free(v175);
            }
          }
        }
        else
        {
          qword_102478CD0 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "invalidAltitude", v221))
      {
        if (*(double *)v221 >= -420.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v102 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to invalidAltitude", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            uint64_t v177 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v177);
            if (v177 != buf) {
              free(v177);
            }
          }
        }
        else
        {
          qword_102478CD8 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "minHorizontalAccuracy", v221))
      {
        if (*(double *)v221 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          BOOL v103 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to minHorizontalAccuracy", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            uint64_t v179 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v179);
            if (v179 != buf) {
              free(v179);
            }
          }
        }
        else
        {
          qword_102478CE0 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "apOutlierThresholdMeters", v221))
      {
        if (*(double *)v221 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v104 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to apOutlierThresholdMeters", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            double v181 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v181);
            if (v181 != buf) {
              free(v181);
            }
          }
        }
        else
        {
          qword_102478CE8 = *(void *)v221;
        }
      }
      if (sub_1000A699C((uint64_t)&v223, "movingApDistanceThreshold", v221))
      {
        if (*(double *)v221 <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v105 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(void *)&uint8_t buf[4] = *(void *)v221;
            _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to movingApDistanceThreshold", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 134283521;
            *(void *)&v222[4] = *(void *)v221;
            double v182 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v182);
            if (v182 != buf) {
              free(v182);
            }
          }
        }
        else
        {
          qword_102478CF8 = *(void *)v221;
        }
      }
      if (sub_10006EF84((uint64_t)&v223, "minStationaryPoints", v220))
      {
        if (SLODWORD(v220[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v106 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = LODWORD(v220[0]);
            _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minStationaryPoints", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 67174657;
            *(_DWORD *)&v222[4] = LODWORD(v220[0]);
            uint64_t v203 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v203);
            if (v203 != buf) {
              free(v203);
            }
          }
        }
        else
        {
          dword_102478CF0 = LODWORD(v220[0]);
        }
      }
      if (sub_10006EF84((uint64_t)&v223, "maxNumMovesAllowed", v220))
      {
        if ((LODWORD(v220[0]) & 0x80000000) != 0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v107 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = LODWORD(v220[0]);
            _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumMovesAllowed", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)uint64_t v222 = 67174657;
            *(_DWORD *)&v222[4] = LODWORD(v220[0]);
            uint64_t v204 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v204);
            if (v204 != buf) {
              free(v204);
            }
          }
        }
        else
        {
          dword_102478D00 = LODWORD(v220[0]);
        }
      }
    }
    sub_1000E9354(v222);
    if (sub_100012960((uint64_t)v215, "WifiLocationIntegrityCalculator", v222))
    {
      v220[0] = 0.0;
      LODWORD(v210[0]) = 0;
      if (sub_10006EF84((uint64_t)v222, "minNumAps", v210))
      {
        if (SLODWORD(v210[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v108 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v210[0];
            _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to minNumAps", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)int v221 = 67174657;
            *(_DWORD *)&v221[4] = v210[0];
            long long v202 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v202);
            if (v202 != buf) {
              free(v202);
            }
          }
        }
        else
        {
          dword_102478D08 = v210[0];
        }
      }
      v220[0] = 0.0;
      if (sub_1000A699C((uint64_t)v222, "cellCrossCheckDistanceThreshold", v220))
      {
        if (v220[0] > 0.0 && (*(void *)&v220[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          qword_102478D10 = *(void *)&v220[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v109 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v220[0];
            _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to cellCrossCheckDistanceThreshold", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)int v221 = 134283521;
            *(double *)&v221[4] = v220[0];
            uint64_t v110 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v110);
            if (v110 != buf) {
              free(v110);
            }
          }
        }
      }
      v220[0] = 0.0;
      if (sub_1000A699C((uint64_t)v222, "multiApWifiCrossCheckDistanceThreshold", v220))
      {
        if (v220[0] > 0.0 && (*(void *)&v220[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          qword_102478D18 = *(void *)&v220[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v111 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v220[0];
            _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to multiApWifiCrossCheckDistanceThreshold", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)int v221 = 134283521;
            *(double *)&v221[4] = v220[0];
            __int16 v112 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v112);
            if (v112 != buf) {
              free(v112);
            }
          }
        }
      }
      v220[0] = 0.0;
      if (sub_1000A699C((uint64_t)v222, "referenceLocationAgeThreshold", v220))
      {
        if (v220[0] > 0.0 && (*(void *)&v220[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          qword_102478D20 = *(void *)&v220[0];
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int v113 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v220[0];
            _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}0.1f, to referenceLocationAgeThreshold", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            *(_DWORD *)int v221 = 134283521;
            *(double *)&v221[4] = v220[0];
            __int16 v114 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v114);
            if (v114 != buf) {
              free(v114);
            }
          }
        }
      }
    }
    sub_1000E9354(v221);
    if (sub_100012960((uint64_t)v215, "WifiCoreAnalytics", v221))
    {
      LODWORD(v210[0]) = 0;
      if (sub_10006EF84((uint64_t)v221, "wifiPositionAnalyticsDownsamplingFactor", v210))
      {
        if (SLODWORD(v210[0]) < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          int64_t v115 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v210[0];
            _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to wifiPositionAnalyticsDownsamplingFactor", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            LODWORD(v220[0]) = 67174657;
            HIDWORD(v220[0]) = v210[0];
            unint64_t v205 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v205);
            if (v205 != buf) {
              free(v205);
            }
          }
        }
        else
        {
          dword_102478D28 = v210[0];
        }
      }
    }
    sub_1000E9354(v220);
    BOOL v116 = sub_100012960((uint64_t)v215, "WifiService", v220);
    if (v116) {
      sub_10141DBC0(v116, (uint64_t)v220);
    }
    sub_1000E9354(v210);
    if (sub_100012960((uint64_t)v215, "wifiTilesManager", v210))
    {
      v209[0] = 0.0;
      if (sub_1000A699C((uint64_t)v210, "maxTileAccessAge", v209))
      {
        if (v209[0] <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v117 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v209[0];
            _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}.1f, to maxTileAccessAge", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v218 = 134283521;
            double v219 = v209[0];
            BOOL v183 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v183);
            if (v183 != buf) {
              free(v183);
            }
          }
        }
        else
        {
          qword_102478D30 = *(void *)&v209[0];
        }
      }
      if (sub_1000A699C((uint64_t)v210, "maxTileDownloadAge", v209))
      {
        if (v209[0] <= 0.0)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          __int16 v118 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134283521;
            *(double *)&uint8_t buf[4] = v209[0];
            _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}.1f, to maxTileDownloadAge", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            int v218 = 134283521;
            double v219 = v209[0];
            long long v184 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v184);
            if (v184 != buf) {
              free(v184);
            }
          }
        }
        else
        {
          qword_102478D38 = *(void *)&v209[0];
        }
      }
      buf[0] = 0;
      if (sub_1000D2988((uint64_t)v210, "isEnabledForIphone", buf)) {
        byte_102478D40 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForIpadWithGnss", buf)) {
        byte_102478D41 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForIpadWithoutGnss", buf)) {
        byte_102478D42 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForWatch", buf)) {
        byte_102478D43 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForMacOS", buf)) {
        byte_102478D44 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForAppleTV", buf)) {
        byte_102478D45 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForHomePod", buf)) {
        byte_102478D46 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForVisionPro", buf)) {
        byte_102478D47 = buf[0];
      }
      if (sub_1000D2988((uint64_t)v210, "isEnabledForAllOtherPlatforms", buf)) {
        byte_102478D48 = buf[0];
      }
    }
    sub_1000E9354(&v218);
    if (sub_100012960((uint64_t)v215, "WifiGpsTransition", &v218))
    {
      *(_DWORD *)std::string buf = 0;
      if (sub_1004D0870((uint64_t)&v218, "gpsWarmupTimeoutSecs", buf)) {
        dword_102478D50 = *(_DWORD *)buf;
      }
      if (sub_1004D0870((uint64_t)&v218, "wifiAgeThresholdSecs", buf)) {
        dword_102478D54 = *(_DWORD *)buf;
      }
    }
    sub_1000E9354(v209);
    if (sub_100012960((uint64_t)v215, "WifiVisibilityIntersection", v209))
    {
      LOWORD(v216[0]) = word_102478D5C;
      if (sub_1004D0240((uint64_t)v209, "visibilityIntersectionType", v216))
      {
        if (LOWORD(v216[0]) > 2u)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          uint64_t v120 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = LOWORD(v216[0]);
            _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_ERROR, "#Warning, out of valid range OTA value, failed to assign, %{public}hu, to visibilityIntersectionType", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            LODWORD(v217[0]) = 67240192;
            HIDWORD(v217[0]) = LOWORD(v216[0]);
            int v186 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v186);
            if (v186 != buf) {
              free(v186);
            }
          }
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          unint64_t v119 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = LOWORD(v216[0]);
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_INFO, "CLWifi1Settings, overriding visibilityIntersectionType with %{public}hu", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            LODWORD(v217[0]) = 67240192;
            HIDWORD(v217[0]) = LOWORD(v216[0]);
            long long v185 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v185);
            if (v185 != buf) {
              free(v185);
            }
          }
          word_102478D5C = v216[0];
        }
      }
      *(_DWORD *)std::string buf = dword_102478D60;
      if (sub_10006EF84((uint64_t)v209, "conservativeValidCentroidCountUpperBound", buf)) {
        dword_102478D60 = *(_DWORD *)buf;
      }
    }
    sub_1000E9354(v217);
    if (sub_100012960((uint64_t)v215, "Wsb", v217))
    {
      char v208 = 0;
      if (sub_1000D2988((uint64_t)v217, "skipAonsensedScansForBarometerCalibration", (BOOL *)&v208)) {
        byte_102478D66 = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipWifiManagerScansForBarometerCalibration", (BOOL *)&v208)) {
        byte_102478D67 = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipAonsensedScansForTransitMacMonitor", (BOOL *)&v208)) {
        byte_102478D64 = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipWifiManagerScansForTransitMacMonitor", (BOOL *)&v208)) {
        byte_102478D65 = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipAonsensedScansForWsbFixOnLegacyDevices", (BOOL *)&v208)) {
        byte_102478D68 = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipWifiManagerScansForWsbFixOnLegacyDevices", (BOOL *)&v208)) {
        byte_102478D69 = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipAonsensedScansForWsbFixOnNewDevices", (BOOL *)&v208)) {
        byte_102478D6A = v208;
      }
      if (sub_1000D2988((uint64_t)v217, "skipWifiManagerScansForWsbFixOnNewDevices", (BOOL *)&v208)) {
        byte_102478D6B = v208;
      }
      int v207 = 0;
      if (sub_10006EF84((uint64_t)v217, "maxNumWsbReprocessGroups", &v207))
      {
        if (v207 < 1)
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          double v121 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v207;
            _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "#Warning, out of valid range OTA value, failed to assign, %{private}d, to maxNumWsbReprocessGroups", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1023251A0);
            }
            v216[0] = 67174657;
            v216[1] = v207;
            uint64_t v206 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateSettings(const CLNameValuePair &)", "%s\n", v206);
            if (v206 != buf) {
              free(v206);
            }
          }
        }
        else
        {
          dword_102478D6C = v207;
        }
      }
    }
    sub_10013F3C4(v217);
    sub_10013F3C4(v209);
    sub_10013F3C4(&v218);
    sub_10013F3C4(v210);
    sub_10013F3C4(v220);
    sub_10013F3C4(v221);
    sub_10013F3C4(v222);
    sub_10013F3C4(&v223);
    sub_10013F3C4(v211);
    sub_10013F3C4(v212);
    sub_10013F3C4(v213);
    sub_10013F3C4(v225);
    sub_10013F3C4(&v226);
    sub_10013F3C4(v214);
  }
  return sub_10013F3C4(v215);
}

void sub_10141D8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
}

uint64_t sub_10141DBC0(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v29);
  CFArrayRef theArray = 0;
  if (sub_100012960(a2, "Default5GHzStage1Channels", v29))
  {
    id v3 = +[GEOCountryConfiguration sharedConfiguration];
    if (v3)
    {
      CFStringRef v4 = (const __CFString *)[v3 countryCode];
      if (v4) {
        sub_1004D1D1C((uint64_t)v29, v4, (CFTypeRef *)&theArray);
      }
    }
    CFArrayRef v5 = theArray;
    if (theArray || (sub_1004D1D1C((uint64_t)v29, @"Default", (CFTypeRef *)&theArray), (CFArrayRef v5 = theArray) != 0))
    {
      context = 0;
      double v26 = 0;
      uint64_t v27 = 0;
      v33.length = CFArrayGetCount(v5);
      v33.location = 0;
      CFArrayApplyFunction(v5, v33, (CFArrayApplierFunction)sub_10141E1F8, &context);
      uint64_t v6 = v26;
      if (v26 != context)
      {
        long long __p = 0;
        int v23 = 0;
        uint64_t v24 = 0;
        sub_10010F834(&__p, context, (uint64_t)v26, v26 - context);
        sub_1014131B4((uint64_t)&unk_10248D6A0, 12, (uint64_t)&__p);
        if (__p)
        {
          int v23 = __p;
          operator delete(__p);
        }
        int v7 = v26;
        char v8 = context + 1;
        std::to_string(&v20, *context);
        for (; v8 != v7; ++v8)
        {
          int v9 = *v8;
          sub_100111050((const void **)&v20.__r_.__value_.__l.__data_, 44, (uint64_t)&v30);
          std::to_string(&v32, v9);
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64_t v10 = &v32;
          }
          else {
            int64_t v10 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v32.__r_.__value_.__l.__size_;
          }
          uint64_t v12 = std::string::append(&v30, (const std::string::value_type *)v10, size);
          std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
          v31[0] = v12->__r_.__value_.__l.__size_;
          *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
          char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          v20.__r_.__value_.__r.__words[0] = v13;
          v20.__r_.__value_.__l.__size_ = v31[0];
          *(std::string::size_type *)((char *)&v20.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
          *((unsigned char *)&v20.__r_.__value_.__s + 23) = v14;
        }
        std::string v21 = v20;
        memset(&v20, 0, sizeof(v20));
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1023251A0);
        }
        float v15 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          __int16 v16 = &v21;
          if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
          }
          LODWORD(v30.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#Mobile Asset Wifi1 Settings Wifi Service updated default 5GHz channels: %{private}s", (uint8_t *)&v30, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v30, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1023251A0);
          }
          long long v18 = &v21;
          if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
          }
          LODWORD(v32.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          double v19 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1Settings::updateWifiServiceSettings(const CLNameValuePair &)", "%s\n", (const char *)v19);
          if (v19 != &v30) {
            free(v19);
          }
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        uint64_t v6 = context;
      }
      if (v6)
      {
        double v26 = v6;
        operator delete(v6);
      }
    }
  }
  return sub_10013F3C4(v29);
}

void sub_10141DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  sub_10013F3C4(&a31);
  _Unwind_Resume(a1);
}

BOOL sub_10141E05C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) > 0;
}

double sub_10141E06C(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101E09840;
  *(_OWORD *)(a1 + 16) = xmmword_101E09850;
  *(_OWORD *)(a1 + 32) = xmmword_101E09860;
  *(_OWORD *)(a1 + 48) = xmmword_101E09870;
  *(_OWORD *)(a1 + 64) = xmmword_101E09880;
  *(_OWORD *)(a1 + 80) = xmmword_101E09890;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(0x405E000000000000uLL);
  *(_OWORD *)(a1 + 112) = xmmword_101E098A0;
  *(_OWORD *)(a1 + 128) = xmmword_101E098B0;
  *(_OWORD *)(a1 + 144) = xmmword_101E098C0;
  *(_OWORD *)(a1 + 160) = xmmword_101D81980;
  *(_DWORD *)(a1 + 176) = 3;
  *(_OWORD *)(a1 + 184) = xmmword_101E098D0;
  *(void *)(a1 + 200) = 0x402E000000000000;
  *(_DWORD *)(a1 + 208) = 18;
  *(_OWORD *)(a1 + 216) = xmmword_101E098E0;
  *(void *)&long long v1 = 0xA0000000ALL;
  *((void *)&v1 + 1) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 232) = v1;
  *(void *)(a1 + 248) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 256) = xmmword_101E098F0;
  *(_OWORD *)(a1 + 272) = xmmword_101E09900;
  *(_DWORD *)(a1 + 288) = 10;
  *(void *)(a1 + 296) = 0x4008000000000000;
  *(_OWORD *)(a1 + 304) = xmmword_101D81980;
  *(_OWORD *)(a1 + 320) = xmmword_101E09910;
  *(_OWORD *)(a1 + 336) = xmmword_101E09920;
  *(_OWORD *)(a1 + 352) = xmmword_101E09950;
  *(_OWORD *)(a1 + 384) = xmmword_101E09940;
  *(_OWORD *)(a1 + 400) = xmmword_101E09930;
  *(_OWORD *)(a1 + 416) = xmmword_101E09970;
  *(_OWORD *)(a1 + 432) = xmmword_101E09960;
  double result = 100000000.0;
  *(_OWORD *)(a1 + 368) = xmmword_101E09980;
  return result;
}

void sub_10141E198(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10141E1C8(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10141E1F8(const void *a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    int valuePtr = 0;
    if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr))
    {
      if ((valuePtr & 0x80000000) == 0 && !sub_100D550A4(valuePtr))
      {
        unint64_t v5 = *(void *)(a2 + 16);
        uint64_t v6 = *(_DWORD **)(a2 + 8);
        if ((unint64_t)v6 >= v5)
        {
          char v8 = *(_DWORD **)a2;
          uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 2;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v11 = v5 - (void)v8;
          if (v11 >> 1 > v10) {
            unint64_t v10 = v11 >> 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          if (v12)
          {
            std::string::size_type v13 = (char *)sub_10017EA34(a2 + 16, v12);
            char v8 = *(_DWORD **)a2;
            uint64_t v6 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            std::string::size_type v13 = 0;
          }
          char v14 = &v13[4 * v9];
          float v15 = &v13[4 * v12];
          *(_DWORD *)char v14 = valuePtr;
          int v7 = v14 + 4;
          while (v6 != v8)
          {
            int v16 = *--v6;
            *((_DWORD *)v14 - 1) = v16;
            v14 -= 4;
          }
          *(void *)a2 = v14;
          *(void *)(a2 + 8) = v7;
          *(void *)(a2 + 16) = v15;
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *uint64_t v6 = valuePtr;
          int v7 = v6 + 1;
        }
        *(void *)(a2 + 8) = v7;
      }
    }
  }
}

void *sub_10141E324(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  std::string::size_type v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::string v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    *std::string v21 = v11;
    goto LABEL_39;
  }
  void *v11 = *v13;
  *std::string::size_type v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    std::string v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10141E55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10087B810(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10141E578()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10141E630(_Unwind_Exception *a1)
{
}

void sub_10141E648()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10141E6F0(_Unwind_Exception *a1)
{
}

uint64_t sub_10141E708()
{
  xmmword_10248D460 = xmmword_101E09990;
  *(_OWORD *)&qword_10248D470 = xmmword_101E099A0;
  xmmword_10248D480 = xmmword_101E099B0;
  *(_OWORD *)&qword_10248D490 = xmmword_101E099C0;
  xmmword_10248D4A0 = xmmword_101D8B400;
  qword_10248D4B0 = 0x120000000ALL;
  dword_10248D4B8 = 2;
  qword_10248D4C0 = 0x40E1170000000000;
  qword_10248D4C8 = 0x4100000004;
  qword_10248D4D0 = 0x408C200000000000;
  byte_10248D4D8 = 0;
  sub_10141E06C((uint64_t)&qword_10248D4E0);
  sub_1014132A4((uint64_t)&unk_10248D6A0);

  return __cxa_atexit((void (*)(void *))sub_101412254, &unk_10248D6A0, (void *)&_mh_execute_header);
}

void sub_10141E9DC(uint64_t a1)
{
  int v2 = +[NSBundle bundleWithPath:@"/System/Library/LocationBundles/AppleWatchWorkout.bundle"];
  if (v2)
  {
    id v3 = v2;
    *(void *)(*(void *)(a1 + 32) + 16) = [objc_alloc((Class)CLLocationManager) initWithEffectiveBundlePath:@"/System/Library/LocationBundles/AppleWatchWorkout.bundle" delegate:*(id *)(a1 + 40) onQueue:[*(id *)(a1 + 40) queue]];
    [*(id *)(*(void *)(a1 + 32) + 16) setDesiredAccuracy:kCLLocationAccuracyHundredMeters];
  }
}

void sub_10141EB70(uint64_t a1)
{
}

void sub_10141EEE0(dispatch_source_t *a1, uint64_t a2, void *a3, void *a4)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1023251C0);
  }
  unint64_t v8 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gfc Scheduling timer with timeout %llu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023251C0);
    }
    std::string::size_type v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void scheduleTimer(dispatch_source_t *, const uint64_t, CLDispatchSilo *, void (^)(void))", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint8x8_t v9 = *a1;
  if (*a1)
  {
    dispatch_time_t v10 = dispatch_time(0x8000000000000000, 1000000000 * a2);
    dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(*a1, a4);
  }
  else
  {
    uint64_t v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[a3 queue]);
    *a1 = v11;
    dispatch_time_t v12 = dispatch_time(0x8000000000000000, 1000000000 * a2);
    dispatch_source_set_timer(v11, v12, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(*a1, a4);
    dispatch_resume(*a1);
  }
}

id sub_10141F144(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onLocationUpdateTimerFire];
}

void sub_10141FA8C(dispatch_source_t *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1023251C0);
  }
  int v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gfc Canceling timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023251C0);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cancelTimer(dispatch_source_t *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*a1)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023251C0);
    }
    id v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gfc Timer existed, canceling now", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023251C0);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cancelTimer(dispatch_source_t *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    dispatch_source_cancel(*a1);
    dispatch_release(*a1);
    *a1 = 0;
  }
}

id sub_101420BA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onGeoFenceTimerFire];
}

void sub_101421088(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_1014210B8()
{
  if (qword_10248D6D8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D6D8 + 8))(qword_10248D6D8);
  }
  if (qword_10248D6E0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D6E0 + 8))(qword_10248D6E0);
  }
  if (qword_10248D6E8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D6E8 + 8))(qword_10248D6E8);
  }
  if (qword_10248D6F0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D6F0 + 8))(qword_10248D6F0);
  }
  if (qword_10248D6F8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D6F8 + 8))(qword_10248D6F8);
  }
  if (qword_10248D700) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D700 + 8))(qword_10248D700);
  }
  uint64_t result = qword_10248D708;
  if (qword_10248D708)
  {
    long long v1 = *(uint64_t (**)(void))(*(void *)qword_10248D708 + 8);
    return v1();
  }
  return result;
}

void sub_101421230(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102487A60 & 1) == 0)
  {
    byte_102487A60 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTileData.pb.cc", a4);
    operator new();
  }
}

void *sub_101421574(void *result)
{
  *uint64_t result = off_1023251F0;
  result[1] = 0;
  result[2] = 0;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  return result;
}

void sub_1014215A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248D6D8 + 8);
      }
      sub_101422160(v5, v6);
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_18;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D6D8 + 16);
    }
    sub_101422300(v7, v8);
    if ((*(_DWORD *)(a2 + 36) & 4) != 0)
    {
LABEL_18:
      uint8x8_t v9 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 4u;
      dispatch_time_t v10 = *(std::string **)(a1 + 24);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v10, v9);
    }
  }
}

void sub_10142179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1014217B4(void *result)
{
  long long v1 = result;
  uint64_t v2 = result[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  if ((void *)qword_10248D6D8 != result)
  {
    uint64_t v4 = result[1];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_101421894(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023251F0;
  sub_1014217B4(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1014218E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023251F0;
  sub_1014217B4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_101421950(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248D6D8;
  if (!qword_10248D6D8)
  {
    sub_101421230(0, a2, a3, a4);
    return qword_10248D6D8;
  }
  return result;
}

void sub_101421980()
{
}

uint64_t sub_1014219D8(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 36);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(result + 36))
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_101421A64(result);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_101421A9C(result);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_101421A64(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    if (*(unsigned char *)(result + 48))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_101421A9C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 212))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      int v3 = *(_DWORD *)(v2 + 72);
      if ((_BYTE)v3)
      {
        *(_OWORD *)(v2 + 24) = 0u;
        *(_OWORD *)(v2 + 8) = 0u;
        *(_DWORD *)(v2 + 40) = 1;
      }
      if ((v3 & 0xFF00) != 0)
      {
        *(void *)(v2 + 52) = 0;
        *(void *)(v2 + 44) = 0;
        *(void *)(v2 + 60) = 0;
      }
      *(_DWORD *)(v2 + 72) = 0;
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  sub_10026DEDC(a1 + 88);
  sub_10026DEDC(a1 + 112);
  sub_10026DEDC(a1 + 136);
  sub_10026DEDC(a1 + 160);
  uint64_t result = sub_10026DEDC(a1 + 184);
  *(_DWORD *)(a1 + 212) = 0;
  return result;
}

uint64_t sub_101421B3C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          TagFallbacuint64_t k = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          operator new();
        }
        unsigned int v29 = 0;
        dispatch_time_t v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0; {
        }
          }
        else
        {
          unsigned int v29 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v11 = *((_DWORD *)this + 14);
        int v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0;
        }
        int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
        if (!sub_101422DCC(v9, this, v14) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        int v15 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)this + 14) = v17;
        }
        unint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 18)
        {
          *((void *)this + 1) = v18 + 1;
          goto LABEL_32;
        }
      }
      if (v7 == 2) {
        break;
      }
      if (v7 == 3)
      {
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_46;
        }
      }
      else
      {
        int v8 = TagFallback & 7;
      }
LABEL_20:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_20;
    }
LABEL_32:
    *(_DWORD *)(a1 + 36) |= 2u;
    uint64_t v19 = *(void *)(a1 + 16);
    if (!v19) {
      operator new();
    }
    unsigned int v30 = 0;
    uint64_t v20 = (char *)*((void *)this + 1);
    if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30)) {
        return 0;
      }
    }
    else
    {
      unsigned int v30 = *v20;
      *((void *)this + 1) = v20 + 1;
    }
    int v21 = *((_DWORD *)this + 14);
    int v22 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v21 + 1;
    if (v21 >= v22) {
      return 0;
    }
    int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
    if (!sub_1014255B8(v19, this, v24) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
    int v25 = *((_DWORD *)this + 14);
    BOOL v16 = __OFSUB__(v25, 1);
    int v26 = v25 - 1;
    if (v26 < 0 == v16) {
      *((_DWORD *)this + 14) = v26;
    }
    uint64_t v27 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v27 < *((void *)this + 2) && *v27 == 26)
    {
      *((void *)this + 1) = v27 + 1;
LABEL_46:
      *(_DWORD *)(a1 + 36) |= 4u;
      if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_101421F00(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D6D8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248D6D8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
  {
LABEL_11:
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  return result;
}

uint64_t sub_101421FAC(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248D6D8 + 8);
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014232E4(v5, a2);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    }
    else {
      int v8 = 1;
    }
    uint64_t v4 = (v7 + v8 + 1);
    int v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = 0;
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248D6D8 + 16);
    }
    dispatch_time_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10142650C(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    int v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v4 = (v4 + v18 + v14 + 1);
  }
LABEL_28:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_1014220D8(uint64_t a1, void *lpsrc)
{
  sub_1014215A4(a1, (uint64_t)lpsrc);
}

double sub_101422160(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 48);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248D6E8 + 8);
      }
      double result = sub_10142296C(v6, v7);
      int v5 = *(_DWORD *)(a2 + 48);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_18;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 16) = v8;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
LABEL_18:
    int v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
LABEL_19:
    int v10 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 40) = v10;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return result;
      }
      goto LABEL_10;
    }
LABEL_20:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 48) & 0x20) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

void sub_1014222E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101422300(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    sub_10026DE30(a1 + 16, *(_DWORD *)(a1 + 24) + v4);
    memcpy((void *)(*(void *)(a1 + 16) + 8 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  int v5 = *(_DWORD *)(a2 + 48);
  if (v5)
  {
    sub_100221DFC(a1 + 40, *(_DWORD *)(a1 + 48) + v5);
    memcpy((void *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 48)), *(const void **)(a2 + 40), 4 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  int v6 = *(_DWORD *)(a2 + 72);
  if (v6)
  {
    sub_100221DFC(a1 + 64, *(_DWORD *)(a1 + 72) + v6);
    memcpy((void *)(*(void *)(a1 + 64) + 4 * *(int *)(a1 + 72)), *(const void **)(a2 + 64), 4 * *(int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) += *(_DWORD *)(a2 + 72);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), *(_DWORD *)(a2 + 96) + *(_DWORD *)(a1 + 96));
  if (*(int *)(a2 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 88) + 8 * v7);
      int v9 = *(_DWORD *)(a1 + 100);
      uint64_t v10 = *(int *)(a1 + 96);
      if ((int)v10 >= v9)
      {
        if (v9 == *(_DWORD *)(a1 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), v9 + 1);
          int v9 = *(_DWORD *)(a1 + 100);
        }
        *(_DWORD *)(a1 + 100) = v9 + 1;
        operator new();
      }
      uint64_t v11 = *(void *)(a1 + 88);
      *(_DWORD *)(a1 + 96) = v10 + 1;
      sub_101424C88(*(void *)(v11 + 8 * v10), v8);
      ++v7;
    }
    while (v7 < *(int *)(a2 + 96));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), *(_DWORD *)(a2 + 120) + *(_DWORD *)(a1 + 120));
  if (*(int *)(a2 + 120) >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(*(void *)(a2 + 112) + 8 * v12);
      int v14 = *(_DWORD *)(a1 + 124);
      uint64_t v15 = *(int *)(a1 + 120);
      if ((int)v15 >= v14)
      {
        if (v14 == *(_DWORD *)(a1 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), v14 + 1);
          int v14 = *(_DWORD *)(a1 + 124);
        }
        *(_DWORD *)(a1 + 124) = v14 + 1;
        operator new();
      }
      uint64_t v16 = *(void *)(a1 + 112);
      *(_DWORD *)(a1 + 120) = v15 + 1;
      sub_101424320(*(void *)(v16 + 8 * v15), v13);
      ++v12;
    }
    while (v12 < *(int *)(a2 + 120));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 136), *(_DWORD *)(a2 + 144) + *(_DWORD *)(a1 + 144));
  if (*(int *)(a2 + 144) >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(void *)(*(void *)(a2 + 136) + 8 * v17);
      int v19 = *(_DWORD *)(a1 + 148);
      uint64_t v20 = *(int *)(a1 + 144);
      if ((int)v20 >= v19)
      {
        if (v19 == *(_DWORD *)(a1 + 152))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 136), v19 + 1);
          int v19 = *(_DWORD *)(a1 + 148);
        }
        *(_DWORD *)(a1 + 148) = v19 + 1;
        operator new();
      }
      uint64_t v21 = *(void *)(a1 + 136);
      *(_DWORD *)(a1 + 144) = v20 + 1;
      sub_101424320(*(void *)(v21 + 8 * v20), v18);
      ++v17;
    }
    while (v17 < *(int *)(a2 + 144));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 160), *(_DWORD *)(a2 + 168) + *(_DWORD *)(a1 + 168));
  if (*(int *)(a2 + 168) >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(*(void *)(a2 + 160) + 8 * v22);
      int v24 = *(_DWORD *)(a1 + 172);
      uint64_t v25 = *(int *)(a1 + 168);
      if ((int)v25 >= v24)
      {
        if (v24 == *(_DWORD *)(a1 + 176))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 160), v24 + 1);
          int v24 = *(_DWORD *)(a1 + 172);
        }
        *(_DWORD *)(a1 + 172) = v24 + 1;
        operator new();
      }
      uint64_t v26 = *(void *)(a1 + 160);
      *(_DWORD *)(a1 + 168) = v25 + 1;
      sub_101424320(*(void *)(v26 + 8 * v25), v23);
      ++v22;
    }
    while (v22 < *(int *)(a2 + 168));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184), *(_DWORD *)(a2 + 192) + *(_DWORD *)(a1 + 192));
  if (*(int *)(a2 + 192) >= 1)
  {
    uint64_t v27 = 0;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a2 + 184) + 8 * v27);
      int v29 = *(_DWORD *)(a1 + 196);
      uint64_t v30 = *(int *)(a1 + 192);
      if ((int)v30 >= v29)
      {
        if (v29 == *(_DWORD *)(a1 + 200))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184), v29 + 1);
          int v29 = *(_DWORD *)(a1 + 196);
        }
        *(_DWORD *)(a1 + 196) = v29 + 1;
        operator new();
      }
      uint64_t v31 = *(void *)(a1 + 184);
      *(_DWORD *)(a1 + 192) = v30 + 1;
      sub_101424320(*(void *)(v31 + 8 * v30), v28);
      ++v27;
    }
    while (v27 < *(int *)(a2 + 192));
  }
  if (*(unsigned char *)(a2 + 212))
  {
    *(_DWORD *)(a1 + 212) |= 1u;
    uint64_t v32 = *(void *)(a1 + 8);
    if (!v32) {
      operator new();
    }
    uint64_t v33 = *(void *)(a2 + 8);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_10248D708 + 8);
    }
    sub_101423490(v32, v33);
  }
}

void sub_10142293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101422954()
{
  return 1;
}

void *sub_10142295C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.LogEntry");
}

double sub_10142296C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    double result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_1014229F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101422A10(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102325268;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_101422A30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102325268;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_101422A84()
{
}

uint64_t sub_101422AD0(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_101422AE4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        TagFallbacuint64_t k = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 9) {
        break;
      }
      unint64_t v8 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0) {
        return 0;
      }
      *(void *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_101422BD8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(unsigned char *)(result + 20)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  }
  return result;
}

uint64_t sub_101422BF0(uint64_t a1)
{
  uint64_t v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_101422C0C(uint64_t a1, void *lpsrc)
{
  return sub_10142296C(a1, (uint64_t)lpsrc);
}

uint64_t sub_101422C94()
{
  return 1;
}

void *sub_101422C9C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTileTimestamp");
}

void sub_101422CAC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023252E0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248D6E8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_101422D3C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_101422CAC(a1);

  operator delete();
}

void sub_101422D74()
{
}

uint64_t sub_101422DCC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 16);
  int v6 = (unsigned int *)(a1 + 20);
  uint64_t v7 = (unsigned int *)(a1 + 40);
  while (2)
  {
    unint64_t v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v8;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_24;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        if (!v11) {
          operator new();
        }
        v30[0] = 0;
        uint64_t v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30))return 0; {
        }
          }
        else
        {
          v30[0] = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v17 = *((_DWORD *)this + 14);
        int v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18) {
          return 0;
        }
        int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        if (!sub_101422AE4(v11, this, v20) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        int v21 = *((_DWORD *)this + 14);
        BOOL v22 = __OFSUB__(v21, 1);
        int v23 = v21 - 1;
        if (v23 < 0 == v22) {
          *((_DWORD *)this + 14) = v23;
        }
        int v24 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v24 >= v13 || *v24 != 16) {
          continue;
        }
        int v14 = v24 + 1;
        *((void *)this + 1) = v14;
        goto LABEL_36;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
LABEL_36:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          uint64_t v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v5 = *v14;
          uint64_t v25 = v14 + 1;
          *((void *)this + 1) = v25;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        if ((unint64_t)v25 >= v13 || *v25 != 24) {
          continue;
        }
        uint64_t v15 = v25 + 1;
        *((void *)this + 1) = v15;
LABEL_44:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          uint64_t v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v15;
          uint64_t v27 = v15 + 1;
          *((void *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 48) |= 4u;
        if ((unint64_t)v27 >= v13 || *v27 != 32) {
          continue;
        }
        uint64_t v16 = v27 + 1;
        *((void *)this + 1) = v16;
LABEL_52:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          uint64_t v28 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v7 = *v16;
          uint64_t v28 = v16 + 1;
          *((void *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 48) |= 8u;
        if ((unint64_t)v28 >= v13 || *v28 != 41) {
          continue;
        }
        *((void *)this + 1) = v28 + 1;
LABEL_60:
        *(void *)uint64_t v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 24) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 48) |= 0x10u;
        int v29 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 != 49) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_64:
        *(void *)uint64_t v30 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30))
        {
          *(void *)(a1 + 32) = *(void *)v30;
          *(_DWORD *)(a1 + 48) |= 0x20u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_44;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_52;
      case 5u:
        int v10 = TagFallback & 7;
        if (v10 == 1) {
          goto LABEL_60;
        }
        goto LABEL_24;
      case 6u:
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_24;
        }
        goto LABEL_64;
      default:
        int v10 = TagFallback & 7;
LABEL_24:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1014231F4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D6E8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 24), a3);
    if ((*(_DWORD *)(v5 + 48) & 0x20) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 40), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_15:
  double v8 = *(double *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, v8, a3);
}

uint64_t sub_1014232E4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_29;
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248D6E8 + 8);
  }
  int v7 = ((int)(*(_DWORD *)(v6 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v6 + 16) = v7;
  int v4 = v7 | 2;
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_9:
    double v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v8 >= 0x80)
    {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v9 = 2;
    }
    v4 += v9;
  }
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    int v11 = 2;
  }
  v4 += v11;
  if ((v3 & 8) != 0)
  {
LABEL_20:
    uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v13 = 2;
    }
    v4 += v13;
  }
LABEL_24:
  unsigned int v14 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    unsigned int v14 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t result = v14 + 9;
  }
  else {
    uint64_t result = v14;
  }
LABEL_29:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

double sub_1014233F0(uint64_t a1, void *lpsrc)
{
  return sub_101422160(a1, (uint64_t)lpsrc);
}

uint64_t sub_101423478()
{
  return 1;
}

void *sub_101423480@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTileHeader");
}

void sub_101423490(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  int v4 = *(_DWORD *)(a2 + 72);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(void *)(a1 + 8) = v7;
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 16) = v8;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 20) = v9;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 24) = v10;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_27:
    int v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v12;
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_26:
  int v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v11;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x20) != 0) {
    goto LABEL_27;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_28:
  int v13 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v13;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    int v5 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v5;
    int v4 = *(_DWORD *)(a2 + 72);
  }
LABEL_13:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    int v14 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v14;
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 0x200) == 0)
    {
LABEL_16:
      if ((v4 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  int v15 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v15;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v16 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 72) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v16;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v17 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v17;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      return;
    }
    goto LABEL_20;
  }
LABEL_34:
  int v18 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 72) |= 0x1000u;
  *(_DWORD *)(a1 + 60) = v18;
  if ((*(_DWORD *)(a2 + 72) & 0x2000) == 0) {
    return;
  }
LABEL_20:
  int v6 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) |= 0x2000u;
  *(_DWORD *)(a1 + 64) = v6;
}

void sub_1014236D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1014236E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102325358;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_101423708(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102325358;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10142375C()
{
}

uint64_t sub_1014237C8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 72);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 1;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 52) = 0;
    *(void *)(result + 44) = 0;
    *(void *)(result + 60) = 0;
  }
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_101423804(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  __int16 v41 = (unint64_t *)(a1 + 2);
  int v5 = a1 + 4;
  int v6 = a1 + 10;
  uint64_t v7 = a1 + 11;
  int v8 = a1 + 12;
  int v9 = a1 + 13;
  int v10 = a1 + 14;
  int v11 = a1 + 15;
  int v12 = a1 + 16;
  while (2)
  {
    int v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v13;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v13 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v15 = TagFallback & 7;
        if (v15 != 1) {
          goto LABEL_42;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v41);
        if (result)
        {
          a1[18] |= 1u;
          int v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
          if ((unint64_t)v18 < v17 && *v18 == 16)
          {
            int v19 = v18 + 1;
            *((void *)this + 1) = v19;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        int v19 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
LABEL_16:
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          unsigned int v20 = (unsigned char *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v5 = *v19;
          unsigned int v20 = v19 + 1;
          *((void *)this + 1) = v20;
        }
        a1[18] |= 2u;
        if ((unint64_t)v20 < v17 && *v20 == 29)
        {
          *((void *)this + 1) = v20 + 1;
          goto LABEL_51;
        }
        continue;
      case 3u:
        int v15 = TagFallback & 7;
        if (v15 != 5) {
          goto LABEL_42;
        }
LABEL_51:
        unsigned int v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0) {
          return 0;
        }
        a1[5] = v42;
        a1[18] |= 4u;
        int v29 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 != 37) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_55:
        unsigned int v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0) {
          return 0;
        }
        a1[6] = v42;
        a1[18] |= 8u;
        uint64_t v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 45) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_59:
        unsigned int v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0) {
          return 0;
        }
        a1[7] = v42;
        a1[18] |= 0x10u;
        uint64_t v31 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v31 >= *((void *)this + 2) || *v31 != 53) {
          continue;
        }
        *((void *)this + 1) = v31 + 1;
LABEL_63:
        unsigned int v42 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42) & 1) == 0) {
          return 0;
        }
        a1[8] = v42;
        a1[18] |= 0x20u;
        uint64_t v32 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 != 61) {
          continue;
        }
        *((void *)this + 1) = v32 + 1;
LABEL_67:
        unsigned int v42 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v42))
        {
          a1[9] = v42;
          a1[18] |= 0x40u;
          uint64_t v33 = (unsigned char *)*((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          if ((unint64_t)v33 < v21 && *v33 == 64)
          {
            BOOL v22 = v33 + 1;
            *((void *)this + 1) = v22;
LABEL_71:
            if ((unint64_t)v22 >= v21 || *v22 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
              if (!result) {
                return result;
              }
              double v34 = (unsigned char *)*((void *)this + 1);
              unint64_t v21 = *((void *)this + 2);
            }
            else
            {
              *int v6 = *v22;
              double v34 = v22 + 1;
              *((void *)this + 1) = v34;
            }
            a1[18] |= 0x80u;
            if ((unint64_t)v34 < v21 && *v34 == 72)
            {
              int v23 = v34 + 1;
              *((void *)this + 1) = v23;
LABEL_79:
              if ((unint64_t)v23 >= v21 || *v23 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
                if (!result) {
                  return result;
                }
                __int16 v35 = (unsigned char *)*((void *)this + 1);
                unint64_t v21 = *((void *)this + 2);
              }
              else
              {
                unsigned int *v7 = *v23;
                __int16 v35 = v23 + 1;
                *((void *)this + 1) = v35;
              }
              a1[18] |= 0x100u;
              if ((unint64_t)v35 < v21 && *v35 == 80)
              {
                int v24 = v35 + 1;
                *((void *)this + 1) = v24;
LABEL_87:
                if ((unint64_t)v24 >= v21 || *v24 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
                  if (!result) {
                    return result;
                  }
                  double v36 = (unsigned char *)*((void *)this + 1);
                  unint64_t v21 = *((void *)this + 2);
                }
                else
                {
                  *int v8 = *v24;
                  double v36 = v24 + 1;
                  *((void *)this + 1) = v36;
                }
                a1[18] |= 0x200u;
                if ((unint64_t)v36 < v21 && *v36 == 88)
                {
                  uint64_t v25 = v36 + 1;
                  *((void *)this + 1) = v25;
LABEL_95:
                  if ((unint64_t)v25 >= v21 || *v25 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
                    if (!result) {
                      return result;
                    }
                    unint64_t v37 = (unsigned char *)*((void *)this + 1);
                    unint64_t v21 = *((void *)this + 2);
                  }
                  else
                  {
                    *int v9 = *v25;
                    unint64_t v37 = v25 + 1;
                    *((void *)this + 1) = v37;
                  }
                  a1[18] |= 0x400u;
                  if ((unint64_t)v37 < v21 && *v37 == 96)
                  {
                    uint64_t v26 = v37 + 1;
                    *((void *)this + 1) = v26;
LABEL_103:
                    if ((unint64_t)v26 >= v21 || *v26 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
                      if (!result) {
                        return result;
                      }
                      double v38 = (unsigned char *)*((void *)this + 1);
                      unint64_t v21 = *((void *)this + 2);
                    }
                    else
                    {
                      *int v10 = *v26;
                      double v38 = v26 + 1;
                      *((void *)this + 1) = v38;
                    }
                    a1[18] |= 0x800u;
                    if ((unint64_t)v38 < v21 && *v38 == 104)
                    {
                      uint64_t v27 = v38 + 1;
                      *((void *)this + 1) = v27;
LABEL_111:
                      if ((unint64_t)v27 >= v21 || *v27 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
                        if (!result) {
                          return result;
                        }
                        __int16 v39 = (unsigned char *)*((void *)this + 1);
                        unint64_t v21 = *((void *)this + 2);
                      }
                      else
                      {
                        unsigned int *v11 = *v27;
                        __int16 v39 = v27 + 1;
                        *((void *)this + 1) = v39;
                      }
                      a1[18] |= 0x1000u;
                      if ((unint64_t)v39 < v21 && *v39 == 112)
                      {
                        uint64_t v28 = v39 + 1;
                        *((void *)this + 1) = v28;
LABEL_119:
                        if ((unint64_t)v28 >= v21 || *v28 < 0)
                        {
                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v12);
                          if (!result) {
                            return result;
                          }
                          double v40 = (unsigned __int8 *)*((void *)this + 1);
                          unint64_t v21 = *((void *)this + 2);
                        }
                        else
                        {
                          *int v12 = *v28;
                          double v40 = (unsigned __int8 *)(v28 + 1);
                          *((void *)this + 1) = v40;
                        }
                        a1[18] |= 0x2000u;
                        if (v40 == (unsigned __int8 *)v21
                          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                        {
                          *((_DWORD *)this + 8) = 0;
                          uint64_t result = 1;
                          *((unsigned char *)this + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 4u:
        int v15 = TagFallback & 7;
        if (v15 == 5) {
          goto LABEL_55;
        }
        goto LABEL_42;
      case 5u:
        int v15 = TagFallback & 7;
        if (v15 == 5) {
          goto LABEL_59;
        }
        goto LABEL_42;
      case 6u:
        int v15 = TagFallback & 7;
        if (v15 == 5) {
          goto LABEL_63;
        }
        goto LABEL_42;
      case 7u:
        int v15 = TagFallback & 7;
        if (v15 == 5) {
          goto LABEL_67;
        }
        goto LABEL_42;
      case 8u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        BOOL v22 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_71;
      case 9u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        int v23 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_79;
      case 0xAu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        int v24 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_87;
      case 0xBu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        uint64_t v25 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_95;
      case 0xCu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        uint64_t v26 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_103;
      case 0xDu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        uint64_t v27 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_111;
      case 0xEu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        uint64_t v28 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_119;
      default:
        int v15 = TagFallback & 7;
LABEL_42:
        if (v15 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_101423EE0(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), v4, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, *(float *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v4, *(float *)(v5 + 28), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v4, *(float *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v4, *(float *)(v5 + 36), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 40), v4, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 44), v4, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 48), v4, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 52), v4, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 60), v4, a4);
    if ((*(_DWORD *)(v5 + 72) & 0x2000) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 56), v4, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return result;
  }
LABEL_29:
  int v7 = *(_DWORD *)(v5 + 64);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v7, v4, a4);
}

uint64_t sub_1014240A0(unsigned int *a1, unsigned int a2)
{
  unsigned int v3 = a1[18];
  if ((_BYTE)v3)
  {
    int v4 = ((int)(v3 << 31) >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
      if (v5 >= 0x80)
      {
        int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        unsigned int v3 = a1[18];
      }
      else
      {
        int v6 = 2;
      }
      v4 += v6;
    }
    unsigned int v8 = v4 + 5;
    if ((v3 & 4) == 0) {
      unsigned int v8 = v4;
    }
    if ((v3 & 8) != 0) {
      v8 += 5;
    }
    if ((v3 & 0x10) != 0) {
      v8 += 5;
    }
    if ((v3 & 0x20) != 0) {
      v8 += 5;
    }
    if ((v3 & 0x40) != 0) {
      uint64_t v7 = v8 + 5;
    }
    else {
      uint64_t v7 = v8;
    }
    if ((v3 & 0x80) != 0)
    {
      int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
      if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
        unsigned int v3 = a1[18];
      }
      else
      {
        int v10 = 2;
      }
      uint64_t v7 = (v10 + v7);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_56;
  }
  if ((v3 & 0x100) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      unsigned int v3 = a1[18];
    }
    else
    {
      int v12 = 2;
    }
    uint64_t v7 = (v12 + v7);
    if ((v3 & 0x200) == 0)
    {
LABEL_27:
      if ((v3 & 0x400) == 0) {
        goto LABEL_28;
      }
      goto LABEL_40;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_27;
  }
  int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    unsigned int v3 = a1[18];
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v7 = (v14 + v7);
  if ((v3 & 0x400) == 0)
  {
LABEL_28:
    if ((v3 & 0x800) == 0) {
      goto LABEL_29;
    }
LABEL_44:
    unint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[14];
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      unsigned int v3 = a1[18];
    }
    else
    {
      int v18 = 2;
    }
    uint64_t v7 = (v18 + v7);
    if ((v3 & 0x1000) == 0)
    {
LABEL_30:
      if ((v3 & 0x2000) == 0) {
        goto LABEL_56;
      }
      goto LABEL_52;
    }
    goto LABEL_48;
  }
LABEL_40:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    unsigned int v3 = a1[18];
  }
  else
  {
    int v16 = 2;
  }
  uint64_t v7 = (v16 + v7);
  if ((v3 & 0x800) != 0) {
    goto LABEL_44;
  }
LABEL_29:
  if ((v3 & 0x1000) == 0) {
    goto LABEL_30;
  }
LABEL_48:
  int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[15];
  if (v19 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    unsigned int v3 = a1[18];
  }
  else
  {
    int v20 = 2;
  }
  uint64_t v7 = (v20 + v7);
  if ((v3 & 0x2000) != 0)
  {
LABEL_52:
    unint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[16];
    if (v21 >= 0x80) {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    }
    else {
      int v22 = 2;
    }
    uint64_t v7 = (v22 + v7);
  }
LABEL_56:
  a1[17] = v7;
  return v7;
}

void sub_101424280(uint64_t a1, void *lpsrc)
{
  sub_101423490(a1, (uint64_t)lpsrc);
}

uint64_t sub_101424308()
{
  return 1;
}

void *sub_101424310@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTilePayloadMetaData");
}

void sub_101424320(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    sub_100221DFC(a1 + 16, *(_DWORD *)(a1 + 24) + v4);
    memcpy((void *)(*(void *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
    }
  }
}

void sub_101424410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101424428(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023253D0;
  if (*((void *)this + 2)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_101424498(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_101424428(a1);

  operator delete();
}

void sub_1014244D0()
{
}

uint64_t sub_101424520(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_101424538(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  int v6 = (unsigned int *)(a1 + 12);
  do
  {
    while (1)
    {
      while (1)
      {
        int v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          TagFallbacuint64_t k = *v7;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v9 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unsigned int v25 = 0;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!result) {
            return result;
          }
          unsigned int v14 = v25;
          int v15 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v14 = *v13;
          int v15 = v13 + 1;
          *((void *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 8) = -(v14 & 1) ^ (v14 >> 1);
        *(_DWORD *)(a1 + 40) |= 1u;
        if ((unint64_t)v15 < v11 && *v15 == 16)
        {
          int v16 = v15 + 1;
          *((void *)this + 1) = v16;
          goto LABEL_30;
        }
      }
      if (v9 != 2) {
        break;
      }
      int v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_20;
      }
      int v16 = (char *)*((void *)this + 1);
      unint64_t v11 = *((void *)this + 2);
LABEL_30:
      if ((unint64_t)v16 >= v11 || *v16 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!result) {
          return result;
        }
        int v18 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
      }
      else
      {
        *int v6 = *v16;
        int v18 = v16 + 1;
        *((void *)this + 1) = v18;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if ((unint64_t)v18 < v11 && *v18 == 26)
      {
        int v12 = v18 + 1;
        *((void *)this + 1) = v12;
LABEL_38:
        unsigned int v27 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0; {
          unsigned int v19 = v27;
          }
        }
        else
        {
          unsigned int v19 = *v12;
          unsigned int v27 = v19;
          *((void *)this + 1) = v12 + 1;
        }
        int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v19);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
        {
          unsigned int v26 = 0;
          unint64_t v21 = (char *)*((void *)this + 1);
          if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0; {
          }
            }
          else
          {
            unsigned int v26 = *v21;
            *((void *)this + 1) = v21 + 1;
          }
          int v22 = *(_DWORD *)(a1 + 24);
          if (v22 == *(_DWORD *)(a1 + 28))
          {
            sub_100221DFC(v5, v22 + 1);
            int v22 = *(_DWORD *)(a1 + 24);
          }
          unsigned int v23 = v26;
          uint64_t v24 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v22 + 1;
          *(_DWORD *)(v24 + 4 * v22) = v23;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
LABEL_53:
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v9 == 3)
    {
      int v10 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t result = sub_10142482C(1, 0x1Au, this, v5);
        if (!result) {
          return result;
        }
        goto LABEL_53;
      }
      if (v10 == 2)
      {
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_38;
      }
    }
    else
    {
      int v10 = TagFallback & 7;
    }
LABEL_20:
    if (v10 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10142482C(int a1, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a4)
{
  unsigned int v21 = 0;
  int v7 = (char *)*((void *)this + 1);
  if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
    if (!result) {
      return result;
    }
  }
  else
  {
    unsigned int v21 = *v7;
    *((void *)this + 1) = v7 + 1;
  }
  int v9 = *(_DWORD *)(a4 + 8);
  if (v9 == *(_DWORD *)(a4 + 12))
  {
    sub_100221DFC(a4, v9 + 1);
    int v9 = *(_DWORD *)(a4 + 8);
  }
  unsigned int v10 = v21;
  uint64_t v11 = *(void *)a4;
  *(_DWORD *)(a4 + 8) = v9 + 1;
  *(_DWORD *)(v11 + 4 * v9) = v10;
  int v12 = *(_DWORD *)(a4 + 12) - *(_DWORD *)(a4 + 8);
  if (v12 >= 1)
  {
    int v13 = v12 + 1;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14) {
          return 1;
        }
        unint64_t v17 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        if ((int)v14 - (int)v17 < 2 || (a2 & 0x7F | 0x80) != *v17 || v17[1] != (a2 >> 7)) {
          return 1;
        }
        int v16 = (char *)(v17 + 2);
      }
      else
      {
        int v15 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        if ((unint64_t)v15 >= v14 || *v15 != a2) {
          return 1;
        }
        int v16 = (char *)(v15 + 1);
      }
      *((void *)this + 1) = v16;
      if ((unint64_t)v16 >= v14 || *v16 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if (!result) {
          return result;
        }
      }
      else
      {
        unsigned int v21 = *v16;
        *((void *)this + 1) = v16 + 1;
      }
      int v18 = *(_DWORD *)(a4 + 8);
      if (v18 >= *(_DWORD *)(a4 + 12))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
        int v18 = *(_DWORD *)(a4 + 8);
      }
      unsigned int v19 = v21;
      uint64_t v20 = *(void *)a4;
      *(_DWORD *)(a4 + 8) = v18 + 1;
      *(_DWORD *)(v20 + 4 * v18) = v19;
      --v13;
    }
    while (v13 > 1);
  }
  return 1;
}

void sub_101424A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101424A24(uint64_t result, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
  }
  if ((v6 & 2) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x1Au);
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      uint64_t v7 = 0;
      do
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(void *)(v5 + 16) + 4 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return result;
}

uint64_t sub_101424AD4(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 40);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(a1 + 8)) ^ (*(int *)(a1 + 8) >> 31));
    if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_14;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  }
  else {
    int v7 = 2;
  }
  v4 += v7;
LABEL_14:
  int v8 = *(_DWORD *)(a1 + 24);
  if (v8 < 1)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 16)
                                                                                             + 4 * v9);
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        int v8 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        int v12 = 1;
      }
      unsigned int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v12 + v10);
      ++v9;
    }
    while (v9 < v8);
    if ((int)v10 > 0)
    {
      if (v10 >= 0x80) {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }
      else {
        int v13 = 2;
      }
      v4 += v13;
    }
  }
  uint64_t result = (v4 + v10);
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_101424BE8(uint64_t a1, void *lpsrc)
{
  sub_101424320(a1, (uint64_t)lpsrc);
}

uint64_t sub_101424C70()
{
  return 1;
}

void *sub_101424C78@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.PointFacetVisibilityData");
}

void sub_101424C88(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    sub_100221DFC(a1 + 16, *(_DWORD *)(a1 + 24) + v4);
    memcpy((void *)(*(void *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
    }
  }
}

void sub_101424D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101424D90(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102325448;
  if (*((void *)this + 2)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_101424E00(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_101424D90(a1);

  operator delete();
}

void sub_101424E38()
{
}

uint64_t sub_101424E88(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_101424EA0(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  int v6 = (unsigned int *)(a1 + 8);
  int v7 = (unsigned int *)(a1 + 12);
  do
  {
    while (1)
    {
      while (1)
      {
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          TagFallbacuint64_t k = *v8;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v8 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v10 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          int v15 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v14;
          int v15 = v14 + 1;
          *((void *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        if ((unint64_t)v15 < v12 && *v15 == 16)
        {
          int v16 = v15 + 1;
          *((void *)this + 1) = v16;
          goto LABEL_30;
        }
      }
      if (v10 != 2) {
        break;
      }
      int v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_20;
      }
      int v16 = (char *)*((void *)this + 1);
      unint64_t v12 = *((void *)this + 2);
LABEL_30:
      if ((unint64_t)v16 >= v12 || *v16 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
        if (!result) {
          return result;
        }
        int v18 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
      }
      else
      {
        unsigned int *v7 = *v16;
        int v18 = v16 + 1;
        *((void *)this + 1) = v18;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if ((unint64_t)v18 < v12 && *v18 == 26)
      {
        int v13 = v18 + 1;
        *((void *)this + 1) = v13;
LABEL_38:
        unsigned int v26 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0; {
          unsigned int v19 = v26;
          }
        }
        else
        {
          unsigned int v19 = *v13;
          unsigned int v26 = v19;
          *((void *)this + 1) = v13 + 1;
        }
        int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v19);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
        {
          unsigned int v25 = 0;
          unsigned int v21 = (char *)*((void *)this + 1);
          if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25))return 0; {
          }
            }
          else
          {
            unsigned int v25 = *v21;
            *((void *)this + 1) = v21 + 1;
          }
          int v22 = *(_DWORD *)(a1 + 24);
          if (v22 == *(_DWORD *)(a1 + 28))
          {
            sub_100221DFC(v5, v22 + 1);
            int v22 = *(_DWORD *)(a1 + 24);
          }
          unsigned int v23 = v25;
          uint64_t v24 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v22 + 1;
          *(_DWORD *)(v24 + 4 * v22) = v23;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
LABEL_53:
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v10 == 3)
    {
      int v11 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t result = sub_10142482C(1, 0x1Au, this, v5);
        if (!result) {
          return result;
        }
        goto LABEL_53;
      }
      if (v11 == 2)
      {
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_38;
      }
    }
    else
    {
      int v11 = TagFallback & 7;
    }
LABEL_20:
    if (v11 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_101425184(uint64_t result, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
  }
  if ((v6 & 2) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x1Au);
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      uint64_t v7 = 0;
      do
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(void *)(v5 + 16) + 4 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return result;
}

uint64_t sub_101425234(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 40);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_14;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  }
  else {
    int v7 = 2;
  }
  v4 += v7;
LABEL_14:
  int v8 = *(_DWORD *)(a1 + 24);
  if (v8 < 1)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 16)
                                                                                             + 4 * v9);
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        int v8 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        int v12 = 1;
      }
      unsigned int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v12 + v10);
      ++v9;
    }
    while (v9 < v8);
    if ((int)v10 > 0)
    {
      if (v10 >= 0x80) {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }
      else {
        int v13 = 2;
      }
      v4 += v13;
    }
  }
  uint64_t result = (v4 + v10);
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_101425340(uint64_t a1, void *lpsrc)
{
  sub_101424C88(a1, (uint64_t)lpsrc);
}

uint64_t sub_1014253C8()
{
  return 1;
}

void *sub_1014253D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.FacetInterVisibilityData");
}

void sub_1014253E0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1023254C0;
  if ((uint64_t *)qword_10248D708 != a1)
  {
    uint64_t v2 = a1[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  sub_10016B2E8(a1 + 23);
  sub_10016B2E8(a1 + 20);
  sub_10016B2E8(a1 + 17);
  sub_10016B2E8(a1 + 14);
  sub_10016B2E8(a1 + 11);
  if (a1[8]) {
    operator delete[]();
  }
  if (a1[5]) {
    operator delete[]();
  }
  if (a1[2]) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_101425500(uint64_t *a1)
{
  sub_1014253E0(a1);

  operator delete();
}

void sub_101425538()
{
}

uint64_t sub_1014255B8(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = a1 + 16;
  int v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88);
  uint64_t v9 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112);
  __int16 v112 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 160);
  int v113 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 136);
  unsigned int v10 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 184);
LABEL_2:
  while (2)
  {
    int v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v11;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v11 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 212) |= 1u;
        unint64_t v14 = *(_DWORD **)(a1 + 8);
        if (!v14) {
          operator new();
        }
        v114[0] = 0;
        int v15 = (char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
        }
          }
        else
        {
          v114[0] = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        int v23 = *((_DWORD *)this + 14);
        int v24 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v23 + 1;
        if (v23 >= v24) {
          return 0;
        }
        int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
        if (!sub_101423804(v14, this, v26) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
        int v27 = *((_DWORD *)this + 14);
        BOOL v28 = __OFSUB__(v27, 1);
        int v29 = v27 - 1;
        if (v29 < 0 == v28) {
          *((_DWORD *)this + 14) = v29;
        }
        uint64_t v30 = (unsigned char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        if ((unint64_t)v30 >= v17 || *v30 != 18) {
          continue;
        }
        int v16 = v30 + 1;
        *((void *)this + 1) = v16;
        goto LABEL_51;
      case 2u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          uint64_t result = sub_10062CFF0(1, 0x12u, this, v7);
          if (!result) {
            return result;
          }
LABEL_66:
          unint64_t v37 = (unsigned char *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
          if ((unint64_t)v37 < v19 && *v37 == 26)
          {
            int v18 = v37 + 1;
            *((void *)this + 1) = v18;
LABEL_69:
            v114[0] = 0;
            if ((unint64_t)v18 >= v19 || *v18 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
              int v38 = v114[0];
              }
            }
            else
            {
              int v38 = *v18;
              v114[0] = v38;
              *((void *)this + 1) = v18 + 1;
            }
            int v39 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v38);
            while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
            {
              unsigned int v115 = 0;
              double v40 = (char *)*((void *)this + 1);
              if ((unint64_t)v40 >= *((void *)this + 2) || *v40 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v115))return 0; {
              }
                }
              else
              {
                unsigned int v115 = *v40;
                *((void *)this + 1) = v40 + 1;
              }
              int v41 = *(_DWORD *)(a1 + 48);
              if (v41 == *(_DWORD *)(a1 + 52))
              {
                sub_100221DFC(v6, v41 + 1);
                int v41 = *(_DWORD *)(a1 + 48);
              }
              unsigned int v42 = v115;
              uint64_t v43 = *(void *)(a1 + 40);
              *(_DWORD *)(a1 + 48) = v41 + 1;
              *(_DWORD *)(v43 + 4 * v41) = v42;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v39);
            goto LABEL_84;
          }
          continue;
        }
        if (v13 == 2)
        {
          int v16 = (char *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
LABEL_51:
          unsigned int v115 = 0;
          if ((unint64_t)v16 >= v17 || *v16 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v115))return 0; {
            unsigned int v31 = v115;
            }
          }
          else
          {
            unsigned int v31 = *v16;
            unsigned int v115 = v31;
            *((void *)this + 1) = v16 + 1;
          }
          int v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            *(void *)__int16 v114 = 0;
            uint64_t v33 = (char *)*((void *)this + 1);
            if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v114))return 0; {
            }
              }
            else
            {
              *(void *)__int16 v114 = *v33;
              *((void *)this + 1) = v33 + 1;
            }
            int v34 = *(_DWORD *)(a1 + 24);
            if (v34 == *(_DWORD *)(a1 + 28))
            {
              sub_10026DE30(v7, v34 + 1);
              int v34 = *(_DWORD *)(a1 + 24);
            }
            uint64_t v35 = *(void *)v114;
            uint64_t v36 = *(void *)(a1 + 16);
            *(_DWORD *)(a1 + 24) = v34 + 1;
            *(void *)(v36 + 8 * v34) = v35;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
          goto LABEL_66;
        }
LABEL_33:
        if (v13 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
          continue;
          }
        }
        return 1;
      case 3u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
        {
          if (v13 == 2)
          {
            int v18 = (char *)*((void *)this + 1);
            unint64_t v19 = *((void *)this + 2);
            goto LABEL_69;
          }
          goto LABEL_33;
        }
        uint64_t result = sub_10142482C(1, 0x1Au, this, v6);
        if (!result) {
          return result;
        }
LABEL_84:
        double v44 = (unsigned char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        if ((unint64_t)v44 < v21 && *v44 == 34)
        {
          int v20 = v44 + 1;
          *((void *)this + 1) = v20;
LABEL_87:
          v114[0] = 0;
          if ((unint64_t)v20 >= v21 || *v20 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
            int v45 = v114[0];
            }
          }
          else
          {
            int v45 = *v20;
            v114[0] = v45;
            *((void *)this + 1) = v20 + 1;
          }
          int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            unsigned int v115 = 0;
            long long v47 = (char *)*((void *)this + 1);
            if ((unint64_t)v47 >= *((void *)this + 2) || *v47 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v115))return 0; {
            }
              }
            else
            {
              unsigned int v115 = *v47;
              *((void *)this + 1) = v47 + 1;
            }
            int v48 = *(_DWORD *)(a1 + 72);
            if (v48 == *(_DWORD *)(a1 + 76))
            {
              sub_100221DFC(v5, v48 + 1);
              int v48 = *(_DWORD *)(a1 + 72);
            }
            unsigned int v49 = v115;
            uint64_t v50 = *(void *)(a1 + 64);
            *(_DWORD *)(a1 + 72) = v48 + 1;
            *(_DWORD *)(v50 + 4 * v48) = v49;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
LABEL_102:
          uint64_t v51 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v51 < *((void *)this + 2) && *v51 == 42)
          {
            do
            {
              *((void *)this + 1) = v51 + 1;
LABEL_105:
              int v52 = *(_DWORD *)(a1 + 100);
              uint64_t v53 = *(int *)(a1 + 96);
              if ((int)v53 >= v52)
              {
                if (v52 == *(_DWORD *)(a1 + 104))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v52 + 1);
                  int v52 = *(_DWORD *)(a1 + 100);
                }
                *(_DWORD *)(a1 + 100) = v52 + 1;
                operator new();
              }
              uint64_t v54 = *(void *)(a1 + 88);
              *(_DWORD *)(a1 + 96) = v53 + 1;
              uint64_t v55 = *(void *)(v54 + 8 * v53);
              v114[0] = 0;
              uint64_t v56 = (char *)*((void *)this + 1);
              if ((unint64_t)v56 >= *((void *)this + 2) || *v56 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
              }
                }
              else
              {
                v114[0] = *v56;
                *((void *)this + 1) = v56 + 1;
              }
              int v57 = *((_DWORD *)this + 14);
              int v58 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v57 + 1;
              if (v57 >= v58) {
                return 0;
              }
              int v59 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
              if (!sub_101424EA0(v55, this, v60) || !*((unsigned char *)this + 36)) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v59);
              int v61 = *((_DWORD *)this + 14);
              BOOL v28 = __OFSUB__(v61, 1);
              int v62 = v61 - 1;
              if (v62 < 0 == v28) {
                *((_DWORD *)this + 14) = v62;
              }
              uint64_t v51 = (unsigned char *)*((void *)this + 1);
              if ((unint64_t)v51 >= *((void *)this + 2)) {
                goto LABEL_2;
              }
              int v63 = *v51;
            }
            while (v63 == 42);
            if (v63 == 50)
            {
              do
              {
                *((void *)this + 1) = v51 + 1;
LABEL_123:
                int v64 = *(_DWORD *)(a1 + 124);
                uint64_t v65 = *(int *)(a1 + 120);
                if ((int)v65 >= v64)
                {
                  if (v64 == *(_DWORD *)(a1 + 128))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v64 + 1);
                    int v64 = *(_DWORD *)(a1 + 124);
                  }
                  *(_DWORD *)(a1 + 124) = v64 + 1;
                  operator new();
                }
                uint64_t v66 = *(void *)(a1 + 112);
                *(_DWORD *)(a1 + 120) = v65 + 1;
                uint64_t v67 = *(void *)(v66 + 8 * v65);
                v114[0] = 0;
                double v68 = (char *)*((void *)this + 1);
                if ((unint64_t)v68 >= *((void *)this + 2) || *v68 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
                }
                  }
                else
                {
                  v114[0] = *v68;
                  *((void *)this + 1) = v68 + 1;
                }
                int v69 = *((_DWORD *)this + 14);
                int v70 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v69 + 1;
                if (v69 >= v70) {
                  return 0;
                }
                int v71 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                if (!sub_101424538(v67, this, v72) || !*((unsigned char *)this + 36)) {
                  return 0;
                }
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v71);
                int v73 = *((_DWORD *)this + 14);
                BOOL v28 = __OFSUB__(v73, 1);
                int v74 = v73 - 1;
                if (v74 < 0 == v28) {
                  *((_DWORD *)this + 14) = v74;
                }
                uint64_t v51 = (unsigned char *)*((void *)this + 1);
                if ((unint64_t)v51 >= *((void *)this + 2)) {
                  goto LABEL_2;
                }
                int v75 = *v51;
              }
              while (v75 == 50);
              if (v75 == 58)
              {
                do
                {
                  *((void *)this + 1) = v51 + 1;
LABEL_141:
                  int v76 = *(_DWORD *)(a1 + 148);
                  uint64_t v77 = *(int *)(a1 + 144);
                  if ((int)v77 >= v76)
                  {
                    if (v76 == *(_DWORD *)(a1 + 152))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v113, v76 + 1);
                      int v76 = *(_DWORD *)(a1 + 148);
                    }
                    *(_DWORD *)(a1 + 148) = v76 + 1;
                    operator new();
                  }
                  uint64_t v78 = *(void *)(a1 + 136);
                  *(_DWORD *)(a1 + 144) = v77 + 1;
                  uint64_t v79 = *(void *)(v78 + 8 * v77);
                  v114[0] = 0;
                  uint64_t v80 = (char *)*((void *)this + 1);
                  if ((unint64_t)v80 >= *((void *)this + 2) || *v80 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
                  }
                    }
                  else
                  {
                    v114[0] = *v80;
                    *((void *)this + 1) = v80 + 1;
                  }
                  int v81 = *((_DWORD *)this + 14);
                  int v82 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v81 + 1;
                  if (v81 >= v82) {
                    return 0;
                  }
                  int v83 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                  if (!sub_101424538(v79, this, v84) || !*((unsigned char *)this + 36)) {
                    return 0;
                  }
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v83);
                  int v85 = *((_DWORD *)this + 14);
                  BOOL v28 = __OFSUB__(v85, 1);
                  int v86 = v85 - 1;
                  if (v86 < 0 == v28) {
                    *((_DWORD *)this + 14) = v86;
                  }
                  uint64_t v51 = (unsigned char *)*((void *)this + 1);
                  if ((unint64_t)v51 >= *((void *)this + 2)) {
                    goto LABEL_2;
                  }
                  int v87 = *v51;
                }
                while (v87 == 58);
                if (v87 == 66)
                {
                  do
                  {
                    *((void *)this + 1) = v51 + 1;
LABEL_159:
                    int v88 = *(_DWORD *)(a1 + 172);
                    uint64_t v89 = *(int *)(a1 + 168);
                    if ((int)v89 >= v88)
                    {
                      if (v88 == *(_DWORD *)(a1 + 176))
                      {
                        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v88 + 1);
                        int v88 = *(_DWORD *)(a1 + 172);
                      }
                      *(_DWORD *)(a1 + 172) = v88 + 1;
                      operator new();
                    }
                    uint64_t v90 = *(void *)(a1 + 160);
                    *(_DWORD *)(a1 + 168) = v89 + 1;
                    uint64_t v91 = *(void *)(v90 + 8 * v89);
                    v114[0] = 0;
                    __int16 v92 = (char *)*((void *)this + 1);
                    if ((unint64_t)v92 >= *((void *)this + 2) || *v92 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
                    }
                      }
                    else
                    {
                      v114[0] = *v92;
                      *((void *)this + 1) = v92 + 1;
                    }
                    int v93 = *((_DWORD *)this + 14);
                    int v94 = *((_DWORD *)this + 15);
                    *((_DWORD *)this + 14) = v93 + 1;
                    if (v93 >= v94) {
                      return 0;
                    }
                    int v95 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                    if (!sub_101424538(v91, this, v96) || !*((unsigned char *)this + 36)) {
                      return 0;
                    }
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v95);
                    int v97 = *((_DWORD *)this + 14);
                    BOOL v28 = __OFSUB__(v97, 1);
                    int v98 = v97 - 1;
                    if (v98 < 0 == v28) {
                      *((_DWORD *)this + 14) = v98;
                    }
                    uint64_t v51 = (unsigned char *)*((void *)this + 1);
                    if ((unint64_t)v51 >= *((void *)this + 2)) {
                      goto LABEL_2;
                    }
                    int v99 = *v51;
                  }
                  while (v99 == 66);
                  if (v99 == 74)
                  {
                    do
                    {
                      *((void *)this + 1) = v51 + 1;
LABEL_177:
                      int v100 = *(_DWORD *)(a1 + 196);
                      uint64_t v101 = *(int *)(a1 + 192);
                      if ((int)v101 >= v100)
                      {
                        if (v100 == *(_DWORD *)(a1 + 200))
                        {
                          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v100 + 1);
                          int v100 = *(_DWORD *)(a1 + 196);
                        }
                        *(_DWORD *)(a1 + 196) = v100 + 1;
                        operator new();
                      }
                      uint64_t v102 = *(void *)(a1 + 184);
                      *(_DWORD *)(a1 + 192) = v101 + 1;
                      uint64_t v103 = *(void *)(v102 + 8 * v101);
                      v114[0] = 0;
                      double v104 = (char *)*((void *)this + 1);
                      if ((unint64_t)v104 >= *((void *)this + 2) || *v104 < 0)
                      {
                        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v114))return 0; {
                      }
                        }
                      else
                      {
                        v114[0] = *v104;
                        *((void *)this + 1) = v104 + 1;
                      }
                      int v105 = *((_DWORD *)this + 14);
                      int v106 = *((_DWORD *)this + 15);
                      *((_DWORD *)this + 14) = v105 + 1;
                      if (v105 >= v106) {
                        return 0;
                      }
                      int v107 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v114[0]);
                      if (!sub_101424538(v103, this, v108) || !*((unsigned char *)this + 36)) {
                        return 0;
                      }
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v107);
                      int v109 = *((_DWORD *)this + 14);
                      BOOL v28 = __OFSUB__(v109, 1);
                      int v110 = v109 - 1;
                      if (v110 < 0 == v28) {
                        *((_DWORD *)this + 14) = v110;
                      }
                      uint64_t v51 = (unsigned char *)*((void *)this + 1);
                      double v111 = (unsigned char *)*((void *)this + 2);
                    }
                    while (v51 < v111 && *v51 == 74);
                    if (v51 == v111 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1;
                      *((unsigned char *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
        }
        continue;
      case 4u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          uint64_t result = sub_10142482C(1, 0x22u, this, v5);
          if (!result) {
            return result;
          }
          goto LABEL_102;
        }
        if (v13 != 2) {
          goto LABEL_33;
        }
        int v20 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_87;
      case 5u:
        int v13 = TagFallback & 7;
        if (v13 == 2) {
          goto LABEL_105;
        }
        goto LABEL_33;
      case 6u:
        int v13 = TagFallback & 7;
        if (v13 == 2) {
          goto LABEL_123;
        }
        goto LABEL_33;
      case 7u:
        int v13 = TagFallback & 7;
        if (v13 == 2) {
          goto LABEL_141;
        }
        goto LABEL_33;
      case 8u:
        int v13 = TagFallback & 7;
        if (v13 == 2) {
          goto LABEL_159;
        }
        goto LABEL_33;
      case 9u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_33;
        }
        goto LABEL_177;
      default:
        int v13 = TagFallback & 7;
        goto LABEL_33;
    }
  }
}

uint64_t sub_1014262B8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 212))
  {
    uint64_t v6 = *(void *)(result + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248D708 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x12u);
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      uint64_t v7 = 0;
      do
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a2, *(void *)(*(void *)(v5 + 16) + 8 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  if (*(int *)(v5 + 48) > 0)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x1Au);
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 56));
    if (*(int *)(v5 + 48) >= 1)
    {
      uint64_t v8 = 0;
      do
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(void *)(v5 + 40) + 4 * v8++));
      while (v8 < *(int *)(v5 + 48));
    }
  }
  if (*(int *)(v5 + 72) > 0)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x22u);
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 80));
    if (*(int *)(v5 + 72) >= 1)
    {
      uint64_t v9 = 0;
      do
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(*(void *)(v5 + 64) + 4 * v9++));
      while (v9 < *(int *)(v5 + 72));
    }
  }
  if (*(int *)(v5 + 96) >= 1)
  {
    uint64_t v10 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(*(void *)(v5 + 88) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 96));
  }
  if (*(int *)(v5 + 120) >= 1)
  {
    uint64_t v11 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(void *)(*(void *)(v5 + 112) + 8 * v11++), a2, a4);
    while (v11 < *(int *)(v5 + 120));
  }
  if (*(int *)(v5 + 144) >= 1)
  {
    uint64_t v12 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(void *)(*(void *)(v5 + 136) + 8 * v12++), a2, a4);
    while (v12 < *(int *)(v5 + 144));
  }
  if (*(int *)(v5 + 168) >= 1)
  {
    uint64_t v13 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(void *)(*(void *)(v5 + 160) + 8 * v13++), a2, a4);
    while (v13 < *(int *)(v5 + 168));
  }
  if (*(int *)(v5 + 192) >= 1)
  {
    uint64_t v14 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(void *)(*(void *)(v5 + 184) + 8 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 192));
  }
  return result;
}

uint64_t sub_10142650C(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 212))
  {
    int v4 = *(unsigned int **)(a1 + 8);
    if (!v4) {
      int v4 = *(unsigned int **)(qword_10248D708 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014240A0(v4, a2);
    int v6 = (int)v5;
    if (v5 >= 0x80) {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    }
    else {
      int v7 = 1;
    }
    int v3 = v6 + v7 + 1;
  }
  else
  {
    int v3 = 0;
  }
  if (*(int *)(a1 + 24) < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    do
      uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*(void *)(a1 + 16) + 8 * v8++), a2)+ v9);
    while (v8 < *(int *)(a1 + 24));
    if ((int)v9 > 0)
    {
      if (v9 >= 0x80) {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      }
      else {
        int v10 = 1;
      }
      v3 += v10 + 1;
    }
  }
  *(_DWORD *)(a1 + 32) = v9;
  int v11 = v3 + v9;
  int v12 = *(_DWORD *)(a1 + 48);
  if (v12 < 1)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    LODWORD(v14) = 0;
    do
    {
      int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 40)
                                                                                             + 4 * v13);
      if (v15 >= 0x80)
      {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        int v12 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        int v16 = 1;
      }
      uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v16 + v14);
      ++v13;
    }
    while (v13 < v12);
    if ((int)v14 > 0)
    {
      if (v14 >= 0x80) {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
      }
      else {
        int v17 = 1;
      }
      v11 += v17 + 1;
    }
  }
  *(_DWORD *)(a1 + 56) = v14;
  int v18 = v11 + v14;
  int v19 = *(_DWORD *)(a1 + 72);
  if (v19 < 1)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    uint64_t v20 = 0;
    LODWORD(v21) = 0;
    do
    {
      int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 64)
                                                                                             + 4 * v20);
      if (v22 >= 0x80)
      {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
        int v19 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        int v23 = 1;
      }
      unint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v23 + v21);
      ++v20;
    }
    while (v20 < v19);
    if ((int)v21 > 0)
    {
      if (v21 >= 0x80) {
        int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      }
      else {
        int v24 = 2;
      }
      v18 += v24;
    }
  }
  *(_DWORD *)(a1 + 80) = v21;
  int v25 = *(_DWORD *)(a1 + 96);
  int v26 = v18 + v21 + v25;
  if (v25 >= 1)
  {
    uint64_t v27 = 0;
    do
    {
      BOOL v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101425234(*(void *)(*(void *)(a1 + 88) + 8 * v27), a2);
      int v29 = (int)v28;
      if (v28 >= 0x80) {
        int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
      }
      else {
        int v30 = 1;
      }
      v26 += v29 + v30;
      ++v27;
    }
    while (v27 < *(int *)(a1 + 96));
  }
  int v31 = *(_DWORD *)(a1 + 120);
  int v32 = v31 + v26;
  if (v31 >= 1)
  {
    uint64_t v33 = 0;
    do
    {
      int v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101424AD4(*(void *)(*(void *)(a1 + 112)+ 8 * v33), a2);
      int v35 = (int)v34;
      if (v34 >= 0x80) {
        int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
      }
      else {
        int v36 = 1;
      }
      v32 += v35 + v36;
      ++v33;
    }
    while (v33 < *(int *)(a1 + 120));
  }
  int v37 = *(_DWORD *)(a1 + 144);
  int v38 = v37 + v32;
  if (v37 >= 1)
  {
    uint64_t v39 = 0;
    do
    {
      double v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101424AD4(*(void *)(*(void *)(a1 + 136)+ 8 * v39), a2);
      int v41 = (int)v40;
      if (v40 >= 0x80) {
        int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40, a2);
      }
      else {
        int v42 = 1;
      }
      v38 += v41 + v42;
      ++v39;
    }
    while (v39 < *(int *)(a1 + 144));
  }
  int v43 = *(_DWORD *)(a1 + 168);
  int v44 = v43 + v38;
  if (v43 >= 1)
  {
    uint64_t v45 = 0;
    do
    {
      int v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101424AD4(*(void *)(*(void *)(a1 + 160)+ 8 * v45), a2);
      int v47 = (int)v46;
      if (v46 >= 0x80) {
        int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
      }
      else {
        int v48 = 1;
      }
      v44 += v47 + v48;
      ++v45;
    }
    while (v45 < *(int *)(a1 + 168));
  }
  int v49 = *(_DWORD *)(a1 + 192);
  uint64_t v50 = (v49 + v44);
  if (v49 >= 1)
  {
    uint64_t v51 = 0;
    do
    {
      int v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101424AD4(*(void *)(*(void *)(a1 + 184)+ 8 * v51), a2);
      int v53 = (int)v52;
      if (v52 >= 0x80) {
        int v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, a2);
      }
      else {
        int v54 = 1;
      }
      uint64_t v50 = (v53 + v50 + v54);
      ++v51;
    }
    while (v51 < *(int *)(a1 + 192));
  }
  *(_DWORD *)(a1 + 208) = v50;
  return v50;
}

void sub_101426890(uint64_t a1, void *lpsrc)
{
  sub_101422300(a1, (uint64_t)lpsrc);
}

uint64_t sub_101426918()
{
  return 1;
}

void *sub_101426920@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTileData.RayTracingTilePayload");
}

uint64_t sub_101426930(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

void sub_10142740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_101427444(id a1)
{
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, v4, objc_opt_class(), 0);
  qword_102487A68 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CLEEDMediaServiceProtocol];
  [(id)qword_102487A68 setClasses:v5 forSelector:"processMediaServicesForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:" argumentIndex:6 ofReply:0];
  [(id)qword_102487A68 setClasses:v5 forSelector:"processMediaServicesMitigations:" argumentIndex:0 ofReply:0];
  [(id)qword_102487A68 setClasses:v5 forSelector:"connectToMediaService:uploadConfig:" argumentIndex:0 ofReply:0];
  qword_102487A70 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CLEEDMediaServiceDelegate];
}

void sub_101427570(id a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102325638);
  }
  uint64_t v1 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v4 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke_2";
    __int16 v5 = 2114;
    int v6 = +[NSXPCConnection currentConnection];
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, Connection[%{public}@] invalidated", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102325638);
    }
    +[NSXPCConnection currentConnection];
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_101427750(uint64_t a1)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    uint64_t v3 = Weak;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102325638);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136446210;
      int v15 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s, Connection interrupted", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102325638);
      }
      int v12 = 136446210;
      uint64_t v13 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 32) + 16))();
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40) + 16))();
    int v7 = (void *)v3[6];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_101427AFC;
    v11[3] = &unk_1022B8750;
    v11[4] = v3;
    [objc_msgSend(v7, "remoteObjectProxyWithErrorHandler:", v11) connectToMediaService:v5 uploadConfig:v6];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102325638);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      int v15 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, reconnecting to EEDMediaService", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102325638);
      }
      int v12 = 136446210;
      uint64_t v13 = "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke";
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDMediaServiceHandler connectToMediaService]_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

id sub_101427AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  id v4 = [v3[6] processIdentifier];

  return _[v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

id sub_101427B44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  id v4 = [v3[6] processIdentifier];

  return _[v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

id sub_1014284D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  id v4 = [v3[6] processIdentifier];

  return _[v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

uint64_t sub_101428518(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102325638);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v8 = "-[CLEEDMediaServiceHandler processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:me"
         "diaList:mitigation:completion:]_block_invoke_2";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102325638);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDMediaServiceHandler processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_101428C58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  id v4 = [v3[6] processIdentifier];

  return _[v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

id sub_10142900C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  id v4 = [v3[6] processIdentifier];

  return _[v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

void sub_101429054(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_101429084(uint64_t a1)
{
  double v2 = sub_100B5C30C(a1);
  sub_100EFC3E0(v3 + 824, a1, v2);
  sub_1006587CC(a1 + 912, 1);
  sub_1012F6DB4(a1 + 1776, a1 + 912);
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 1888) = 0;
  sub_100658844(a1 + 912);
  sub_1006599B4(a1 + 912, (uint64_t)sub_1014291A0, a1);
  *(void *)(a1 + 1824) = 0;
  *(void *)(a1 + 1832) = 0;
  *(unsigned char *)(a1 + 1848) = 0;
  *(void *)(a1 + 1840) = 0;
  sub_100AD63C4((uint64_t *)(a1 + 1776), a1 + 1824);
  sub_100B5C3AC((_DWORD *)a1, 0x2710u);
  sub_1006599C0(a1 + 912, 0);
  return a1;
}

void sub_101429140(_Unwind_Exception *exception_object)
{
  void *v2 = off_1022C0070;
  *uint64_t v1 = off_1022E7AD8;
  _Unwind_Resume(exception_object);
}

float sub_1014291A0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 468)) {
    return sub_100B5CC6C(a4, a1, a2);
  }
  return result;
}

void *sub_1014291C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result = sub_1014291F0((void *)(a1 + 1864), a2);
  *(void *)(a1 + 1896) = a3;
  return result;
}

void *sub_1014291F0(void *a1, uint64_t a2)
{
  sub_1014294BC((uint64_t)v4, a2);
  sub_101429554(v4, a1);
  sub_100F03190(v4);
  return a1;
}

void sub_101429264(uint64_t a1, float32x2_t *a2, double a3)
{
  unint64_t v4 = (unint64_t)(a3 * 1000000.0);
  unint64_t v9 = v4;
  float v5 = a2[1].f32[0];
  float32x2_t v7 = vmul_f32(*a2, (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  float v8 = v5 * 0.017453;
  uint64_t v6 = *(void *)(a1 + 1856);
  if (v6 && v6 + 1000000 < v4)
  {
    sub_100658878(a1 + 912, v4 - v6);
    sub_100AD63C4((uint64_t *)(a1 + 1776), a1 + 1824);
  }
  *(void *)(a1 + 1856) = v4;
  sub_100AD65B4(a1 + 1776, 29.0);
  sub_100658E3C(a1 + 912, (uint64_t)&v7, &v9);
  sub_100EFD190(a1 + 824, &v7, v9);
  sub_100B5C97C(a1, &v7, v9);
  if (*(unsigned char *)(a1 + 1656)) {
    sub_101429350((void *)a1, v9);
  }
}

void *sub_101429350(void *result, unint64_t a2)
{
  if (result[236])
  {
    uint64_t v2 = result[237];
    if (v2)
    {
      double v3 = (double)a2 / 1000000.0;
      uint64_t v4 = (uint64_t)(result + 233);
      uint64_t v5 = (uint64_t)result + 836;
      uint64_t v6 = result[110] + 432;
      sub_100EFCE18((uint64_t)(result + 103));
      v10[0] = v7;
      v10[1] = v8;
      v10[2] = v9;
      return (void *)sub_101429460(v4, v2, v5, v6, (uint64_t)v10, v3);
    }
  }
  return result;
}

uint64_t sub_1014293E4(float32x2_t *a1, float32x2_t *a2, double a3)
{
  uint64_t v8 = (unint64_t)(a3 * 1000000.0);
  __int32 v4 = a2[1].i32[0];
  float32x2_t v6 = *a2;
  __int32 v7 = v4;
  sub_100658E04((uint64_t)&a1[114], (uint64_t)&v6);
  sub_100B5C608((uint64_t)a1, &v6, v8);
  return sub_100EFD6D4(a1 + 103, (uint64_t)&v6, v8);
}

uint64_t sub_101429460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9 = a2;
  double v8 = a6;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, double *))(*(void *)v6 + 48))(v6, &v9, a3, a4, a5, &v8);
}

uint64_t sub_1014294BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101429554(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    __int32 v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1014297B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1014297C0(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)sub_1005AD2A8(a1, a2);
  void *v2 = off_102325668;
  v2[53] = 0;
  operator new();
}

void sub_10142A074(_Unwind_Exception *a1)
{
  uint64_t v5 = v1[77];
  v1[77] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  v1[70] = &off_10230A708;
  sub_1003B2350(v1 + 72);
  __int32 v7 = (std::__shared_weak_count *)v1[64];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1003B278C(v2);
  double v8 = (std::__shared_weak_count *)v1[56];
  if (v8) {
    sub_1000DB0A0(v8);
  }
  sub_1005AD6B0(v1);
  _Unwind_Resume(a1);
}

void sub_10142A21C(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    double v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    __int32 v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        int v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        int v15 = 0;
      }
      int v16 = &v15[24 * v11];
      int v17 = &v15[24 * v14];
      *(double *)int v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      int v19 = (char *)*a1;
      int v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        int v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102325880);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102325880);
      }
      __int32 v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::setExpirationRule(CFTimeInterval) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10142A4D4(uint64_t a1)
{
  int v12 = 86400;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, &v10);
  int v3 = sub_10006EF84(v10, "MotionStateAggregateTimerInterval", &v12);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v3) {
    uint64_t v4 = 1000000000 * v12;
  }
  else {
    uint64_t v4 = 86400000000000;
  }
  uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
  *(void *)(a1 + 520) = v5;
  dispatch_source_set_timer(v5, 0, v4, 0xDF8475800uLL);
  char v6 = *(unsigned char *)(a1 + 529);
  __int32 v7 = *(NSObject **)(a1 + 520);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10142B2C4;
  handler[3] = &unk_1022BBA18;
  handler[4] = a1;
  char v9 = v6;
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 520));
}

void sub_10142A5FC(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 32);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_10142A614(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100FF6F68(v1 + 560, (uint64_t)&v6, Current);
  int v3 = v6;
  uint64_t v4 = v7;
  if (v6 != v7)
  {
    do
    {
      sub_10142A6B8(v1 + 456, (uint64_t)v3);
      v3 += 160;
    }
    while (v3 != v4);
    int v3 = v6;
  }
  if (v3)
  {
    __int32 v7 = v3;
    operator delete(v3);
  }
  return sub_10142A720(v1);
}

void sub_10142A69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10142A6B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10142C534(*(void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 41))
  {
    uint64_t result = sub_100082064(*(void *)(a1 + 24) + 72);
    if (result)
    {
      *(unsigned char *)(a1 + 41) = 1;
      return sub_10142B468(a1);
    }
  }
  return result;
}

id sub_10142A720(uint64_t a1)
{
  if (sub_100FF7610(a1 + 560, &v3)) {
    return [*(id *)(a1 + 552) setNextFireTime:*((double *)&v3 + 1) + 75.0];
  }
  else {
    return [*(id *)(a1 + 552) setNextFireDelay:1.79769313e308];
  }
}

void sub_10142A784(_OWORD *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023257A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionState7::onOldActivityData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023257A8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      unint64_t v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionState7::onOldActivityData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10142C2F4(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_10142A938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10142A958(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 624), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")) isAuthorizedForServiceTypeMask:16];
  if ((v1 & 1) == 0)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102325788);
    }
    uint64_t v2 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102325788);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionState7::checkAuthorization() const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return v1;
}

void sub_10142AB20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)sub_100A26784();
  uint64_t v5 = 0x40000000DLL;
  char v6 = 0;
  sub_101A46D60(v2, (uint64_t)&v5, (uint64_t *)&v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 512);
  *(_OWORD *)(v1 + 504) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v7 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_100A2932C(*(uint64_t **)(v1 + 504), (uint64_t)sub_1000D5E48, v1);
}

id sub_10142ABAC(uint64_t a1)
{
  return sub_10142ABB8(*(id *)(a1 + 32), 0);
}

id sub_10142ABB8(id result, int a2)
{
  long long v3 = result;
  if (a2) {
    uint64_t result = [*((id *)result + 83) setNextFireDelay:5.0];
  }
  if (v3[660] != a2)
  {
    v3[660] = a2;
    if (v3[528])
    {
      char v6 = off_1022E7400;
      char v8 = a2;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v4 = sub_101282D9C();
      sub_10128431C(v4, (uint64_t)&v6);
      sub_10170140C(v9);
      sub_101727BD8((uint64_t)v9);
      v11 |= 1u;
      *(CFAbsoluteTime *)&v9[77] = Current;
      uint64_t v5 = v10;
      *(unsigned char *)(v10 + 12) |= 1u;
      *(unsigned char *)(v5 + 8) = a2;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1023257E8);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v9);
      }
      sub_101706914((PB::Base *)v9);
    }
    LOBYTE(v9[0]) = a2;
    LODWORD(v6) = 5;
    return (id)(*(uint64_t (**)(unsigned char *, uint64_t (***)(), void *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, &v6, v9, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10142AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_10142AD64(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  uint64_t v2 = *(int **)(a1 + 40);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10142AF98;
  handler[3] = &unk_1022BA9F0;
  handler[4] = v2;
  uint32_t v3 = notify_register_dispatch("com.apple.coreaudio.VibratorState", v2 + 168, v1, handler);
  if (v3)
  {
    uint32_t v4 = v3;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023257C8);
    }
    uint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Could not register for device vibration state notification error %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023257C8);
      }
      int v9 = 67240192;
      uint32_t v10 = v4;
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLMotionState7::CLMotionState7(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  *(void *)std::string buf = 0;
  notify_get_state(v2[168], (uint64_t *)buf);
  return sub_10142ABB8(v2, *(void *)buf != 0);
}

id sub_10142AF98(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint32_t v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10142B010;
  v5[3] = &unk_1022B2410;
  v5[4] = v2;
  int v6 = a2;
  return [v3 async:v5];
}

id sub_10142B010(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t state64 = 0;
  notify_get_state(*(_DWORD *)(a1 + 40), &state64);
  return sub_10142ABB8(v1, state64 != 0);
}

uint64_t sub_10142B060(uint64_t a1)
{
  *(void *)a1 = off_102325668;
  sub_10142BA20(a1);

  *(void *)(a1 + 624) = 0;
  uint64_t v2 = sub_1000D2E34(0);
  sub_1009D26C4(v2, 0, *(void *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 424);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(a1 + 424) = 0;
  uint64_t v4 = sub_1000D2E34(0);
  sub_1009D26C4(v4, 0, *(void *)(a1 + 432));
  uint64_t v5 = *(void *)(a1 + 432);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 432) = 0;
  uint64_t v6 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  if (notify_is_valid_token(*(_DWORD *)(a1 + 672)))
  {
    notify_cancel(*(_DWORD *)(a1 + 672));
    *(_DWORD *)(a1 + 672) = -1;
  }
  uint64_t v8 = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *(void *)(a1 + 560) = &off_10230A708;
  sub_1003B2350((void *)(a1 + 576));
  uint32_t v10 = *(std::__shared_weak_count **)(a1 + 512);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  sub_1003B278C(a1 + 456);
  char v11 = *(std::__shared_weak_count **)(a1 + 448);
  if (v11) {
    sub_1000DB0A0(v11);
  }

  return sub_1005AD6B0((void *)a1);
}

void sub_10142B28C(uint64_t a1)
{
  sub_10142B060(a1);

  operator delete();
}

uint64_t sub_10142B2C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102325788);
    }
    uint64_t v2 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records due to timer!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102325788);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionState7::setUpAggregateOnTimer()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return sub_10142B468(v1 + 456);
}

uint64_t sub_10142B468(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102325880);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)unint64_t v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102325880);
      }
      sub_1000D3E50();
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::aggregateRecords() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102325880);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)unint64_t v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102325880);
      }
      sub_1000D3E50();
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::aggregateRecords() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_10142CB04(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102325880);
      }
      char v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_10142CB04(v12, (double **)a1);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)unint64_t v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102325880);
        }
        sub_10142CB04(*(void *)(a1 + 24), (double **)a1);
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMotionCoprocessorInterface::MotionState>::aggregateRecords() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    int v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_10142BA20(uint64_t a1)
{
  sub_1005AD7CC(a1);
  uint64_t v2 = *(NSObject **)(a1 + 520);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 520));
    *(void *)(a1 + 520) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t sub_10142BAD4(uint64_t a1, int a2, void **a3, double a4, double a5)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v11 = Current;
  if (a2) {
    double Current = *(double *)(a1 + 536);
  }
  BOOL v12 = *(unsigned __int8 *)(a1 + 531) != 0;
  char v13 = sub_1001BA49C(a1, Current, v11);
  sub_1001BA134(a1, v12, v13);
  uint64_t v56 = 0;
  int v57 = 0;
  uint64_t v58 = 0;
  sub_1004F03A8(*(void **)(a1 + 440), &v56, a4, a5);
  int v14 = v56;
  if (v56 == v57)
  {
    uint64_t v15 = 0;
    if (!v56) {
      return v15;
    }
    goto LABEL_23;
  }
  LODWORD(v15) = 0;
  do
  {
    sub_100052E44((uint64_t)v14, (uint64_t)&v47);
    int v16 = (char *)a3[1];
    int v17 = (char *)a3[2];
    if (v16 >= v17)
    {
      unint64_t v25 = 0xF0F0F0F0F0F0F0F1 * ((v16 - (unsigned char *)*a3) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 > 0x1E1E1E1E1E1E1E1) {
        sub_1001D7FD4();
      }
      unint64_t v27 = 0xF0F0F0F0F0F0F0F1 * ((v17 - (unsigned char *)*a3) >> 3);
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      if (v27 >= 0xF0F0F0F0F0F0F0) {
        unint64_t v28 = 0x1E1E1E1E1E1E1E1;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28) {
        int v29 = (char *)sub_10023372C((uint64_t)(a3 + 2), v28);
      }
      else {
        int v29 = 0;
      }
      int v30 = &v29[136 * v25];
      *(_OWORD *)int v30 = v47;
      long long v31 = v48;
      long long v32 = v49;
      long long v33 = v51;
      *((_OWORD *)v30 + 3) = v50;
      *((_OWORD *)v30 + 4) = v33;
      *((_OWORD *)v30 + 1) = v31;
      *((_OWORD *)v30 + 2) = v32;
      long long v34 = v52;
      long long v35 = v53;
      long long v36 = v54;
      *((void *)v30 + 16) = v55;
      *((_OWORD *)v30 + 6) = v35;
      *((_OWORD *)v30 + 7) = v36;
      *((_OWORD *)v30 + 5) = v34;
      int v38 = (char *)*a3;
      int v37 = (char *)a3[1];
      uint64_t v39 = v30;
      if (v37 != *a3)
      {
        do
        {
          *(_OWORD *)(v39 - 136) = *(_OWORD *)(v37 - 136);
          long long v40 = *(_OWORD *)(v37 - 120);
          long long v41 = *(_OWORD *)(v37 - 104);
          long long v42 = *(_OWORD *)(v37 - 88);
          *(_OWORD *)(v39 - 72) = *(_OWORD *)(v37 - 72);
          *(_OWORD *)(v39 - 88) = v42;
          *(_OWORD *)(v39 - 104) = v41;
          *(_OWORD *)(v39 - 120) = v40;
          long long v43 = *(_OWORD *)(v37 - 56);
          long long v44 = *(_OWORD *)(v37 - 40);
          long long v45 = *(_OWORD *)(v37 - 24);
          *((void *)v39 - 1) = *((void *)v37 - 1);
          *(_OWORD *)(v39 - 24) = v45;
          *(_OWORD *)(v39 - 40) = v44;
          *(_OWORD *)(v39 - 56) = v43;
          v39 -= 136;
          v37 -= 136;
        }
        while (v37 != v38);
        int v37 = (char *)*a3;
      }
      int v24 = v30 + 136;
      *a3 = v39;
      a3[1] = v30 + 136;
      a3[2] = &v29[136 * v28];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(_OWORD *)int v16 = v47;
      long long v18 = v48;
      long long v19 = v49;
      long long v20 = v51;
      *((_OWORD *)v16 + 3) = v50;
      *((_OWORD *)v16 + 4) = v20;
      *((_OWORD *)v16 + 1) = v18;
      *((_OWORD *)v16 + 2) = v19;
      long long v21 = v52;
      long long v22 = v53;
      long long v23 = v54;
      *((void *)v16 + 16) = v55;
      *((_OWORD *)v16 + 6) = v22;
      *((_OWORD *)v16 + 7) = v23;
      *((_OWORD *)v16 + 5) = v21;
      int v24 = v16 + 136;
    }
    a3[1] = v24;
    uint64_t v15 = (v15 + 1);
    v14 += 160;
  }
  while (v14 != v57);
  int v14 = v56;
  if (v56)
  {
LABEL_23:
    int v57 = v14;
    operator delete(v14);
  }
  return v15;
}

void sub_10142BD5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10142BD80(uint64_t a1, int *a2)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102325788);
  }
  int v4 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
  {
    int v5 = *a2;
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Client registered for notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102325788);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMotionState7::registerForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1005AD8FC(a1, a2);
  return sub_1005ADE00(a1, a2);
}

uint64_t sub_10142BF50(uint64_t a1, int *a2)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102325788);
  }
  int v4 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client unregistered for notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102325788);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMotionState7::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return sub_1005AE0E8(a1, a2);
}

id sub_10142C114(uint64_t a1, uint64_t a2)
{
  if ((sub_1000A16E8() & 0x800000000) != 0)
  {
    return (id)sub_10142A6B8(a1 + 456, a2);
  }
  else
  {
    sub_100FF656C(a1 + 560, a2, (uint64_t)&v7);
    int v4 = v7;
    int v5 = v8;
    if (v7 != v8)
    {
      do
      {
        sub_10142A6B8(a1 + 456, (uint64_t)v4);
        v4 += 160;
      }
      while (v4 != v5);
      int v4 = v7;
    }
    if (v4)
    {
      int v8 = v4;
      operator delete(v4);
    }
    return sub_10142A720(a1);
  }
}

void sub_10142C1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10142C1EC(uint64_t a1)
{
}

void sub_10142C1F4(uint64_t a1, uint64_t a2)
{
  int v4 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v4 setTimestamp:*(double *)(a2 + 8)];
  [(ALActivityLog *)v4 setMotionState:objc_alloc_init(ALMotionState)];
  [(ALMotionState *)[(ALActivityLog *)v4 motionState] setMotion:objc_alloc_init(ALCMMotionContextMotionState)];
  [(ALCMMotionContextMotionState *)[(ALMotionState *)[(ALActivityLog *)v4 motionState] motion] setType:*(unsigned int *)(a2 + 24)];
  [(ALCMMotionContextMotionState *)[(ALMotionState *)[(ALActivityLog *)v4 motionState] motion] setConfidence:*(unsigned __int8 *)(a2 + 28)];
  [(ALMotionState *)[(ALActivityLog *)v4 motionState] setRegularEntry:1];
  [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v4;
}

double sub_10142C2F4(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[7];
  v11[6] = a2[6];
  v11[7] = v3;
  long long v4 = a2[9];
  v11[8] = a2[8];
  v11[9] = v4;
  long long v5 = a2[3];
  v11[2] = a2[2];
  v11[3] = v5;
  long long v6 = a2[5];
  v11[4] = a2[4];
  void v11[5] = v6;
  long long v7 = a2[1];
  v11[0] = *a2;
  v11[1] = v7;
  sub_10142C114(a1, (uint64_t)v11);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  sub_100052E44((uint64_t)v11, (uint64_t)v9);
  return sub_1005AE3E8(a1, (uint64_t)v9);
}

void sub_10142C37C(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_10142C3AC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10142C3DC(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10142C410(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10142C478(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10142C490(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10142C4C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10142C504(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10142C534(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      BOOL v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 384))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_10017D570(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023258A0);
        }
        int v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1023258A0);
          }
          long long v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::addSuspectRecord(const T &) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1023258C0);
      }
      uint64_t v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1023258C0);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::addSuspectRecord(const T &) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_100175F20(v12, a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023258A0);
    }
    int v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      int v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        int v9 = (void *)*v9;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      int v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      unint64_t v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023258A0);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      double v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        double v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      int v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      unint64_t v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_10142CA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10142CAA4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10142CAD4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10142CB04(uint64_t a1, double **a2)
{
  long long v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  uint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023258A0);
    }
    double v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023258A0);
      }
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_10142CD04(uint64_t a1, long long *a2, int a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  long long v4 = *a2;
  *(_OWORD *)(a1 + 28) = a2[1];
  *(_OWORD *)(a1 + 12) = v4;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)(a1 + 44) = v4;
  *(_OWORD *)(a1 + 60) = v4;
  sub_10013FA84(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 > 7 || ((1 << v5) & 0x87) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_10142D00C(a1);
      double v8 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "bad RAT for GSM: %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023258E0);
      }
      sub_10142D00C(a1);
      if (v12 >= 0) {
        double v9 = buf;
      }
      else {
        double v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      double v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::Cell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_10142CFEC(_Unwind_Exception *a1)
{
  sub_1006302A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10142D00C(uint64_t a1)
{
  sub_10010F274((uint64_t)v20);
  sub_100132EFC(v21, (uint64_t)"Cell, RAT, ", 11);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = sub_100132EFC(v2, (uint64_t)", ", 2);
  long long v4 = sub_10011BA84(*(_DWORD *)(a1 + 8));
  size_t v5 = strlen(v4);
  uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
  sub_100132EFC(v6, (uint64_t)", valid , ", 10);
  uint64_t v7 = (void *)std::ostream::operator<<();
  double v8 = sub_100132EFC(v7, (uint64_t)", cellType , ", 13);
  double v9 = sub_10011BA60(*(_DWORD *)(a1 + 4));
  size_t v10 = strlen(v9);
  sub_100132EFC(v8, (uint64_t)v9, v10);
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  if (v11 < 3)
  {
LABEL_4:
    char v12 = sub_100132EFC(v21, (uint64_t)", ", 2);
    sub_100614504(&__p);
    if ((v19 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = v18;
    }
    goto LABEL_37;
  }
  if (v11 == 9)
  {
    char v12 = sub_100132EFC(v21, (uint64_t)", ", 2);
    sub_100614504(&__p);
    if ((v19 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = v18;
    }
  }
  else
  {
    if (v11 == 7) {
      goto LABEL_4;
    }
    if (v11 - 3 > 2)
    {
      if (v11 == 10)
      {
        char v12 = sub_100132EFC(v21, (uint64_t)", ", 2);
        sub_100614EB8(&__p);
        if ((v19 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v19 & 0x80u) == 0) {
          uint64_t v14 = v19;
        }
        else {
          uint64_t v14 = v18;
        }
      }
      else
      {
        if (v11 != 6)
        {
          sub_100132EFC(v21, (uint64_t)", Unknow / Invalid Cell", 23);
          goto LABEL_39;
        }
        char v12 = sub_100132EFC(v21, (uint64_t)", ", 2);
        sub_1000AAEBC(&__p);
        if ((v19 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v19 & 0x80u) == 0) {
          uint64_t v14 = v19;
        }
        else {
          uint64_t v14 = v18;
        }
      }
    }
    else
    {
      char v12 = sub_100132EFC(v21, (uint64_t)", ", 2);
      sub_100613DB4(a1 + 80, &__p);
      if ((v19 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v19 & 0x80u) == 0) {
        uint64_t v14 = v19;
      }
      else {
        uint64_t v14 = v18;
      }
    }
  }
LABEL_37:
  sub_100132EFC(v12, (uint64_t)p_p, v14);
  if ((char)v19 < 0) {
    operator delete(__p);
  }
LABEL_39:
  std::stringbuf::str();
  *(void *)((char *)v20
  v21[0] = v15;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10142D3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10142D438(uint64_t a1, long long *a2, int a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v4;
  *(_OWORD *)(a1 + 28) = v4;
  long long v5 = *a2;
  *(_OWORD *)(a1 + 60) = a2[1];
  *(_OWORD *)(a1 + 44) = v5;
  sub_10013FA84(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  if (*(_DWORD *)(a1 + 8) != 9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_10142D00C(a1);
      uint64_t v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "bad RAT for SCDMA: %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023258E0);
      }
      sub_10142D00C(a1);
      if (v12 >= 0) {
        double v9 = buf;
      }
      else {
        double v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      uint64_t v14 = v9;
      size_t v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::ScdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_10142D70C(_Unwind_Exception *a1)
{
  sub_1006302A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10142D730(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 224);
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 60) = v6;
  *(_OWORD *)(a1 + 44) = v6;
  *(_OWORD *)(a1 + 28) = v6;
  *(_OWORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  uint64_t v7 = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_10010F834((void *)(a1 + 88), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  long long v11 = *(_OWORD *)(a2 + 112);
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  long long v14 = *(_OWORD *)(a2 + 176);
  long long v15 = *(_OWORD *)(a2 + 192);
  long long v16 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v7 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 272) = v15;
  *(_OWORD *)(a1 + 288) = v16;
  *(_OWORD *)(a1 + 256) = v14;
  int v17 = (unsigned char *)(a1 + 320);
  if (*(char *)(a2 + 263) < 0)
  {
    sub_1000DC48C(v17, *(void **)(a2 + 240), *(void *)(a2 + 248));
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 336) = *(void *)(a2 + 256);
    *(_OWORD *)int v17 = v18;
  }
  long long v19 = *(_OWORD *)(a2 + 264);
  long long v20 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 376) = v20;
  *(_OWORD *)(a1 + 344) = v19;
  long long v21 = *(_OWORD *)(a2 + 312);
  long long v22 = *(_OWORD *)(a2 + 328);
  long long v23 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 440) = v23;
  *(_OWORD *)(a1 + 392) = v21;
  *(_OWORD *)(a1 + 408) = v22;
  long long v24 = *(_OWORD *)(a2 + 376);
  long long v25 = *(_OWORD *)(a2 + 392);
  long long v26 = *(_OWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 472) = v25;
  *(_OWORD *)(a1 + 488) = v26;
  *(_OWORD *)(a1 + 456) = v24;
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  int v27 = *(_DWORD *)(a2 + 224);
  if (v27 < 0 || v27 == 11)
  {
    *(_DWORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 304) = a3;
  }
  else
  {
    a3 = *(_DWORD *)(a1 + 8);
  }
  if ((a3 - 3) >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    unint64_t v28 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_10142D00C(a1);
      int v29 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "bad RAT for CDMA: %{public}s", buf, 0xCu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023258E0);
      }
      sub_10142D00C(a1);
      if (v34 >= 0) {
        long long v31 = buf;
      }
      else {
        long long v31 = *(unsigned char **)buf;
      }
      int v35 = 136446210;
      long long v36 = v31;
      long long v32 = (char *)_os_log_send_and_compose_impl();
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::CdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v32);
      if (v32 != (char *)__p) {
        free(v32);
      }
    }
  }
  return a1;
}

void sub_10142DAFC(_Unwind_Exception *a1)
{
  sub_1006302A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10142DB38(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v5;
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 44) = v5;
  *(_OWORD *)(a1 + 60) = v5;
  sub_10013FA84(a1 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 528) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 592) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 560) = v8;
  *(_OWORD *)(a1 + 576) = v9;
  *(_OWORD *)(a1 + 544) = v7;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  if (*(_DWORD *)(a1 + 8) != 6)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    long long v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_10142D00C(a1);
      long long v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "bad RAT for LTE: %{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023258E0);
      }
      sub_10142D00C(a1);
      if (v16 >= 0) {
        long long v13 = buf;
      }
      else {
        long long v13 = *(unsigned char **)buf;
      }
      int v17 = 136446210;
      long long v18 = v13;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      if (v16 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::LteCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v14);
      if (v14 != (char *)__p) {
        free(v14);
      }
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_10142DDF8(_Unwind_Exception *a1)
{
  sub_1006302A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10142DE1C(uint64_t a1, _OWORD *a2, int a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v5;
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 44) = v5;
  *(_OWORD *)(a1 + 60) = v5;
  sub_10013FA84(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  long long v6 = a2[1];
  *(_OWORD *)(a1 + 600) = *a2;
  *(_OWORD *)(a1 + 616) = v6;
  long long v7 = a2[2];
  long long v8 = a2[3];
  long long v9 = a2[5];
  *(_OWORD *)(a1 + 664) = a2[4];
  *(_OWORD *)(a1 + 680) = v9;
  *(_OWORD *)(a1 + 632) = v7;
  *(_OWORD *)(a1 + 648) = v8;
  if (*(_DWORD *)(a1 + 8) != 10)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    long long v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_10142D00C(a1);
      long long v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "bad RAT for NR: %{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023258E0);
      }
      sub_10142D00C(a1);
      if (v16 >= 0) {
        long long v13 = buf;
      }
      else {
        long long v13 = *(unsigned char **)buf;
      }
      int v17 = 136446210;
      long long v18 = v13;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      if (v16 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLCell::CLCell(const CLTelephonyService_Type::NrCell &, CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v14);
      if (v14 != (char *)__p) {
        free(v14);
      }
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_10142E0D0(_Unwind_Exception *a1)
{
  sub_1006302A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10142E0F4(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0xB00000003;
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v2;
  *(_OWORD *)(a1 + 28) = v2;
  *(_OWORD *)(a1 + 44) = v2;
  *(_OWORD *)(a1 + 60) = v2;
  sub_10013FA84(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  return a1;
}

BOOL sub_10142E1E8(uint64_t a1, uint64_t a2)
{
  return !sub_10011FF34(a1, a2);
}

void sub_10142E204(uint64_t a1, uint64_t a2)
{
  long long v3 = (char *)(a1 + 88);
  if (v3 != (char *)a2) {
    sub_1000FB43C(v3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023258E0);
  }
  long long v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = *(int **)(a1 + 88);
    long long v5 = *(int **)(a1 + 96);
    unint64_t v7 = (char *)v5 - (char *)v6;
    if (v5 == v6)
    {
      int v8 = -1;
    }
    else
    {
      int v8 = *v6;
      if (v7 >= 5)
      {
        int v9 = v6[1];
LABEL_11:
        *(_DWORD *)std::string buf = 67109376;
        int v12 = v8;
        __int16 v13 = 1024;
        int v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CELL_LOC: set derivedMcc, derivedMcc, %d, %d", buf, 0xEu);
        goto LABEL_12;
      }
    }
    int v9 = -1;
    goto LABEL_11;
  }
LABEL_12:
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCell::setDerivedMCC(const CLTelephonyService_Type::DerivedMccVector &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_10142E438(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10142E468(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_10142E498(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 166080;
  *(void *)sub_10096A580(a1, a2) = off_102325998;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(void *)(v3 + 80) = 0;
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1023259D0);
  }
  long long v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLSwimOpenWaterSessionSimulator Instantiated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1023259D0);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSwimOpenWaterSessionSimulator::CLSwimOpenWaterSessionSimulator(CLSwimDataStore *, float)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  long long v17 = xmmword_101E09EA0;
  long long v18 = unk_101E09EB0;
  long long v19 = xmmword_101E09EC0;
  uint64_t v20 = 0x404E000000000000;
  long long v13 = xmmword_101E09E60;
  long long v14 = unk_101E09E70;
  long long v15 = xmmword_101E09E80;
  long long v16 = unk_101E09E90;
  long long v9 = xmmword_101E09E20;
  long long v10 = unk_101E09E30;
  long long v11 = xmmword_101E09E40;
  long long v12 = unk_101E09E50;
  *(_OWORD *)std::string buf = xmmword_101E09E00;
  long long v8 = unk_101E09E10;
  sub_1002A9098((char *)v3, (char *)buf, (uint64_t)&v21, 9uLL);
  sub_10142E728(a1, v3);
  return a1;
}

void sub_10142E6D8(_Unwind_Exception *exception_object)
{
  long long v4 = *(void **)(v2 + 24);
  if (v4)
  {
    *(void *)(v2 + 32) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }
  *uint64_t v1 = off_1022D4F38;
  _Unwind_Resume(exception_object);
}

char *sub_10142E728(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 166104;
  long long v4 = (_OWORD *)(a1 + 166136);
  uint64_t result = (char *)(a1 + 166080);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  if (result != (char *)a2) {
    uint64_t result = sub_1002A9098(result, *(char **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  *(void *)(v3 + 24) = 0;
  long long v6 = *(char **)a2;
  unint64_t v7 = *(char **)(a2 + 8);
  if (*(char **)a2 != v7)
  {
    int v8 = 0;
    int v9 = 0;
    do
    {
      int v9 = (int)(*((double *)v6 + 2) + (double)v9);
      v8 += *((_DWORD *)v6 + 1);
      v6 += 24;
    }
    while (v6 != v7);
    *(_DWORD *)(v3 + 24) = v8;
    *(_DWORD *)(v3 + 28) = v9;
  }
  *(void *)(v3 + 8) = *(void *)v3;
  return result;
}

uint64_t sub_10142E7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10041DA28(*(void *)(a1 + 8));
  if (result)
  {
    unint64_t v7 = (char **)(a1 + 166104);
    uint64_t v8 = *(void *)(a1 + 166080);
    if (*(void *)(a1 + 166112) - *(void *)(a1 + 166104) != *(void *)(a1 + 166088) - v8)
    {
      uint64_t v9 = *(void *)(a1 + 166160);
      long long v10 = (long long *)(v8 + 24 * v9);
      int v11 = *((_DWORD *)v10 + 1);
      if (v11 <= 0)
      {
        uint64_t v19 = v8 + 24 * v9;
        double v20 = *(double *)(v19 + 16);
        long long v13 = (double *)(v19 + 16);
        double v17 = v20 / *(v13 - 1);
      }
      else
      {
        uint64_t v12 = v8 + 24 * v9;
        double v14 = *(double *)(v12 + 16);
        long long v13 = (double *)(v12 + 16);
        double v15 = *(v13 - 1);
        double v16 = v15 / (double)v11;
        double v17 = v14 / v15;
        if (v16 > 0.0)
        {
          double v18 = *(double *)(a2 + 56);
          if (vabdd_f64(v18, *(double *)(a1 + 166144)) > v16)
          {
            sub_10041C4AC(*(void *)(a1 + 8), *(_DWORD *)v10, 1, v18);
            *(void *)(a1 + 166144) = *(void *)(a2 + 56);
          }
        }
      }
      if (vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 166152)) >= 1.0)
      {
        sub_10041EAAC(*(void *)(a1 + 8), v17);
        double v21 = v17 + *(double *)(a1 + 166136);
        *(double *)(a1 + 166136) = v21;
        *(void *)(a1 + 166152) = *(void *)(a2 + 56);
        if (v21 >= *v13)
        {
          unint64_t v22 = *(void *)(a1 + 166120);
          unint64_t v23 = *(void *)(a1 + 166112);
          if (v23 >= v22)
          {
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)*v7) >> 3);
            unint64_t v27 = v26 + 1;
            if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)*v7) >> 3);
            if (2 * v28 > v27) {
              unint64_t v27 = 2 * v28;
            }
            if (v28 >= 0x555555555555555) {
              unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29) {
              int v30 = (char *)sub_1000DA5D8(a1 + 166120, v29);
            }
            else {
              int v30 = 0;
            }
            long long v31 = &v30[24 * v26];
            long long v32 = &v30[24 * v29];
            long long v33 = *v10;
            *((void *)v31 + 2) = *((void *)v10 + 2);
            *(_OWORD *)long long v31 = v33;
            long long v25 = v31 + 24;
            int v35 = *(char **)(a1 + 166104);
            char v34 = *(char **)(a1 + 166112);
            if (v34 != v35)
            {
              do
              {
                long long v36 = *(_OWORD *)(v34 - 24);
                *((void *)v31 - 1) = *((void *)v34 - 1);
                *(_OWORD *)(v31 - 24) = v36;
                v31 -= 24;
                v34 -= 24;
              }
              while (v34 != v35);
              char v34 = *v7;
            }
            *(void *)(a1 + 166104) = v31;
            *(void *)(a1 + 166112) = v25;
            *(void *)(a1 + 166120) = v32;
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            long long v24 = *v10;
            *(void *)(v23 + 16) = *((void *)v10 + 2);
            *(_OWORD *)unint64_t v23 = v24;
            long long v25 = (char *)(v23 + 24);
          }
          *(void *)(a1 + 166112) = v25;
          ++*(void *)(a1 + 166160);
          *(void *)(a1 + 166136) = 0;
        }
      }
    }
    sub_10041EAB4(*(void *)(a1 + 8), *(double *)(a2 + 64), *(double *)(a2 + 56));
    if (vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 720)) <= 2.56)
    {
      return 0;
    }
    else
    {
      uint64_t result = sub_10096BBA4(a1, a3);
      if (result)
      {
        *(void *)(a1 + 720) = *(void *)(a2 + 56);
        return 1;
      }
    }
  }
  return result;
}

void *sub_10142EA74(void *a1)
{
  uint64_t v2 = (void **)(a1 + 20760);
  *a1 = off_102325998;
  uint64_t v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  long long v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_1022D4F38;
  return a1;
}

void sub_10142EAF8(void *a1)
{
  uint64_t v2 = (void **)(a1 + 20760);
  *a1 = off_102325998;
  uint64_t v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  long long v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_1022D4F38;

  operator delete();
}

void sub_10142EB9C(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_10142EBCC(uint64_t a1)
{
  if (*(double *)&qword_102478E30 == 1.79769313e308 || *(double *)(a1 + 8) - *(double *)&qword_102478E30 >= 0.850000024)
  {
    qword_102478E30 = *(void *)(a1 + 8);
    if (qword_102487A80 != -1) {
      dispatch_once(&qword_102487A80, &stru_1023259F0);
    }
    long long v2 = *(_OWORD *)(a1 + 16);
    v3[0] = *(_OWORD *)a1;
    v3[1] = v2;
    v3[2] = *(_OWORD *)(a1 + 32);
    sub_10142EC70(qword_10248D710, v3);
  }
}

void sub_10142EC70(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v4 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v5 = a2[1];
  long long v7 = *a2;
  long long v8 = v5;
  block[2] = sub_10143316C;
  block[3] = &unk_102325A90;
  block[4] = a1;
  long long v9 = a2[2];
  dispatch_async(v4, block);
}

void sub_10142ED08(void *a1)
{
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  a1[1] = 0xBFF0000000000000;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *(void *)((char *)a1 + 37) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0xFFFFFFFF00000000;
  *((_DWORD *)a1 + 21) = 300;
  *((unsigned char *)a1 + 92) = 0;
  *(void *)((char *)a1 + 100) = 0xFFFFFFFF00000000;
  *((_DWORD *)a1 + 27) = -1;
  a1[14] = 0;
  *(void *)((char *)a1 + 118) = 0;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  long long v2 = a1 + 29;
  *(void *)((char *)a1 + 209) = 0;
  *(void *)((char *)a1 + 204) = 0;
  a1[28] = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)a1 + 75) = 0;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)((char *)a1 + 277) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *((_DWORD *)a1 + 102) = 0;
  *((_WORD *)a1 + 206) = 257;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  a1[60] = dispatch_queue_create("com.apple.CLFitnessTrackingAWD", 0);
  v2[32] = 0x10000000000000;
  *(_OWORD *)(v2 + 33) = xmmword_101D2A460;
  v2[35] = 0x7FEFFFFFFFFFFFFFLL;
  *((_DWORD *)v2 + 72) = 0;
  v2[37] = 0x4072C00000000000;
  *((_DWORD *)v2 + 76) = 0;
  *((unsigned char *)v2 + 308) = 0;
  sub_100134750(v2 + 39, "");
  *(_OWORD *)((char *)a1 + 673) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 93) = 0u;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 99) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_OWORD *)(a1 + 103) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *(_OWORD *)(a1 + 107) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 115) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  *(_OWORD *)(a1 + 119) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 123) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_OWORD *)(a1 + 127) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 131) = 0u;
  *(_OWORD *)(a1 + 133) = 0u;
  *(_OWORD *)(a1 + 135) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 139) = 0u;
  *(_OWORD *)(a1 + 141) = 0u;
  *(_OWORD *)(a1 + 143) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(_OWORD *)(a1 + 147) = 0u;
  *(_DWORD *)((char *)a1 + 1191) = 0;
  sub_10098C604((uint64_t)(a1 + 150), 0, 0.0);
  *((_DWORD *)a1 + 324) = 0;
  a1[195] = 0;
  *(_OWORD *)(a1 + 191) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_OWORD *)(a1 + 187) = 0u;
  *(_OWORD *)(a1 + 189) = 0u;
  *(_OWORD *)(a1 + 183) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 179) = 0u;
  *(_OWORD *)(a1 + 181) = 0u;
  *(_OWORD *)(a1 + 175) = 0u;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_OWORD *)(a1 + 171) = 0u;
  *(_OWORD *)(a1 + 173) = 0u;
  *(_OWORD *)(a1 + 167) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_OWORD *)(a1 + 165) = 0u;
  *((_DWORD *)a1 + 331) = -1082130432;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)((char *)v2 + 1100) = _Q0;
  *(_OWORD *)((char *)v2 + 1116) = _Q0;
  *(_OWORD *)((char *)v2 + 1132) = _Q0;
  *(_OWORD *)((char *)v2 + 1148) = _Q0;
  *(_OWORD *)((char *)v2 + 1164) = _Q0;
  *(_OWORD *)((char *)v2 + 1180) = _Q0;
  *(_OWORD *)((char *)v2 + 1196) = _Q0;
  *((_DWORD *)a1 + 361) = -1082130432;
  a1[182] = -1;
  a1[181] = -1;
  *((_OWORD *)v2 + 77) = _Q0;
  *((_OWORD *)v2 + 78) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  a1[187] = _Q0;
  a1[188] = 66;
  *(void *)((char *)a1 + 1525) = 0;
  a1[190] = 0;
  a1[193] = 0;
  a1[192] = 0;
  a1[194] = 0;
  *((_DWORD *)a1 + 390) = -1082130432;
  a1[196] = _Q0;
  a1[197] = 0;
  *((unsigned char *)a1 + 1584) = 1;
  int64x2_t v8 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((int64x2_t *)a1 + 100) = v8;
  *((int64x2_t *)a1 + 101) = v8;
  *((int64x2_t *)a1 + 102) = v8;
  *(int32x2_t *)v8.i8 = vdup_n_s32(0x7F7FFFFFu);
  a1[206] = v8.i64[0];
  a1[207] = 0;
  a1[208] = v8.i64[0];
  a1[209] = 0;
  id v9 = (id)objc_opt_class();
  if (v9)
  {
    if (+[HKHealthStore isHealthDataAvailable]) {
      id v9 = objc_alloc_init((Class)HKHealthStore);
    }
    else {
      id v9 = 0;
    }
  }
  a1[199] = v9;
  uint64_t v10 = sub_1000D3E78();
  sub_10006B564(v10, &block);
  int v11 = v2 + 37;
  char v12 = sub_1000A699C((uint64_t)block, "MinSessionLengthAWD", v11);
  if (v16) {
    sub_1000DB0A0((std::__shared_weak_count *)v16);
  }
  if ((v12 & 1) == 0) {
    void *v11 = 0x4072C00000000000;
  }
  if (&MCEffectiveSettingsChangedNotification)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_10142F1F0, MCEffectiveSettingsChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  double v14 = a1[60];
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472;
  double v17 = sub_101432AD4;
  double v18 = &unk_1022A3020;
  uint64_t v19 = a1;
  dispatch_async(v14, &block);
  sub_10142F260();
}

void sub_10142F14C()
{
}

void sub_10142F1F0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(NSObject **)(a2 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101432AD4;
  block[3] = &unk_1022A3020;
  block[4] = a2;
  dispatch_async(v2, block);
}

void sub_10142F260()
{
}

uint64_t sub_10142F2A0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(void *)(a1 + 320) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10142F2F4()
{
}

void sub_10142F338()
{
}

void sub_10142F360(uint64_t a1, char a2, uint64_t a3, char a4)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  int64x2_t v8 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10142F400;
  block[3] = &unk_102325A10;
  char v10 = a2;
  char v11 = a4;
  block[4] = a1;
  void block[5] = a3;
  dispatch_sync(v8, block);
}

double sub_10142F400(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  double v4 = *(double *)(v2 + 504);
  if (v4 >= Current)
  {
    int v5 = *(unsigned __int8 *)(a1 + 48);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(v2 + 537);
    if (*(unsigned char *)(v2 + 537))
    {
      double v6 = *(double *)(v2 + 488);
      if (v4 >= v6) {
        double v6 = *(double *)(v2 + 504);
      }
      *(double *)(v2 + 496) = *(double *)(v2 + 496) + Current - v6;
    }
    int v7 = *(unsigned __int8 *)(a1 + 48);
    if (v5 != v7)
    {
      ++*(_DWORD *)(v2 + 520);
      int v5 = v7;
    }
  }
  if (v5) {
    LOBYTE(v5) = *(unsigned char *)(a1 + 49) != 0;
  }
  *(unsigned char *)(v2 + 538) = v5;
  if (v4 != 1.79769313e308)
  {
    if (*(unsigned char *)(v2 + 540)) {
      LOBYTE(v5) = 1;
    }
    *(unsigned char *)(v2 + 540) = v5;
  }
  *(unsigned char *)(v2 + 537) = *(unsigned char *)(a1 + 48);
  sub_100134750(&v10, *(char **)(a1 + 40));
  int64x2_t v8 = (void **)(v2 + 544);
  if (*(char *)(v2 + 567) < 0) {
    operator delete(*v8);
  }
  double result = *(double *)&v10;
  *(_OWORD *)int64x2_t v8 = v10;
  *(void *)(v2 + 560) = v11;
  *(double *)(v2 + 488) = Current;
  return result;
}

double sub_10142F4FC(uint64_t a1)
{
  double v2 = *(double *)(a1 + 504);
  double v1 = *(double *)(a1 + 512);
  if (*(unsigned char *)(a1 + 537))
  {
    double v3 = *(double *)(a1 + 488);
    if (v2 >= v3) {
      double v3 = *(double *)(a1 + 504);
    }
    double v4 = *(double *)(a1 + 496) + v1 - v3;
    *(double *)(a1 + 496) = v4;
  }
  else
  {
    double v4 = *(double *)(a1 + 496);
  }
  double result = v4 / (v1 - v2) * 100.0;
  *(_DWORD *)(a1 + 76) = (int)result;
  return result;
}

void sub_10142F548(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  LOWORD(v26) = 0;
  BYTE2(v26) = 0;
  memset(v27, 0, 17);
  *(void *)((char *)&v26 + 3) = 0;
  *((void *)&v26 + 1) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  double v2 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v2);
  }
  double v3 = (void **)(a1 + 48);
  void *v2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 37) = 0;
  *(void *)(a1 + 32) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v3);
  }
  void *v3 = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 76) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 84) = 300;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = -1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 118) = 0;
  *(_WORD *)(a1 + 126) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = v27[0];
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  long long v4 = 0uLL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 201) = v26;
  *(_DWORD *)(a1 + 217) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(void *)(a1 + 224) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  int v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
    long long v4 = 0uLL;
  }
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 376) = v4;
  *(_OWORD *)(a1 + 392) = v4;
  *(_OWORD *)(a1 + 344) = v4;
  *(_OWORD *)(a1 + 360) = v4;
  *(_OWORD *)(a1 + 312) = v4;
  *(_OWORD *)(a1 + 328) = v4;
  *(_DWORD *)(a1 + 412) = 257;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 512) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 1192) = 0;
  *(unsigned char *)(a1 + 1194) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_101D2A460;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 568) = v4;
  *(_OWORD *)(a1 + 584) = v4;
  *(_OWORD *)(a1 + 600) = v4;
  *(_OWORD *)(a1 + 616) = v4;
  *(_OWORD *)(a1 + 648) = v4;
  *(_OWORD *)(a1 + 664) = v4;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 696) = v4;
  *(_OWORD *)(a1 + 712) = v4;
  *(_OWORD *)(a1 + 728) = v4;
  *(_OWORD *)(a1 + 744) = v4;
  *(_OWORD *)(a1 + 760) = v4;
  *(_OWORD *)(a1 + 776) = v4;
  *(_OWORD *)(a1 + 792) = v4;
  *(_OWORD *)(a1 + 808) = v4;
  *(_OWORD *)(a1 + 824) = v4;
  *(_OWORD *)(a1 + 840) = v4;
  *(_OWORD *)(a1 + 856) = v4;
  *(_OWORD *)(a1 + 872) = v4;
  *(_OWORD *)(a1 + 888) = v4;
  *(_OWORD *)(a1 + 904) = v4;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = v4;
  *(_OWORD *)(a1 + 1120) = v4;
  *(_OWORD *)(a1 + 1104) = v4;
  *(_OWORD *)(a1 + 1088) = v4;
  *(_OWORD *)(a1 + 1072) = v4;
  *(_OWORD *)(a1 + 1056) = v4;
  *(_OWORD *)(a1 + 1040) = v4;
  *(_OWORD *)(a1 + 1008) = v4;
  *(_OWORD *)(a1 + 1024) = v4;
  *(_OWORD *)(a1 + 976) = v4;
  *(_OWORD *)(a1 + 992) = v4;
  *(_OWORD *)(a1 + 944) = v4;
  *(_OWORD *)(a1 + 960) = v4;
  *(_OWORD *)(a1 + 928) = v4;
  double v6 = *(void **)(a1 + 1160);
  if (v6)
  {
    int v7 = (void *)v6[14];
    if (v7)
    {
      v6[15] = v7;
      operator delete(v7);
    }
    int64x2_t v8 = (void *)v6[11];
    if (v8)
    {
      v6[12] = v8;
      operator delete(v8);
    }
    id v9 = (void *)v6[8];
    if (v9)
    {
      v6[9] = v9;
      operator delete(v9);
    }
    long long v10 = (void *)v6[4];
    if (v10)
    {
      _DWORD v6[5] = v10;
      operator delete(v10);
    }
    operator delete();
  }
  *(void *)(a1 + 1160) = 0;
  uint64_t v11 = *(void **)(a1 + 1176);
  if (v11)
  {
    char v12 = (void *)v11[14];
    if (v12)
    {
      v11[15] = v12;
      operator delete(v12);
    }
    long long v13 = (void *)v11[11];
    if (v13)
    {
      v11[12] = v13;
      operator delete(v13);
    }
    double v14 = (void *)v11[8];
    if (v14)
    {
      v11[9] = v14;
      operator delete(v14);
    }
    double v15 = (void *)v11[4];
    if (v15)
    {
      void v11[5] = v15;
      operator delete(v15);
    }
    operator delete();
  }
  *(void *)(a1 + 1176) = 0;
  uint64_t v16 = *(void **)(a1 + 1168);
  if (v16)
  {
    double v17 = (void *)v16[14];
    if (v17)
    {
      v16[15] = v17;
      operator delete(v17);
    }
    double v18 = (void *)v16[11];
    if (v18)
    {
      v16[12] = v18;
      operator delete(v18);
    }
    uint64_t v19 = (void *)v16[8];
    if (v19)
    {
      v16[9] = v19;
      operator delete(v19);
    }
    double v20 = (void *)v16[4];
    if (v20)
    {
      v16[5] = v20;
      operator delete(v20);
    }
    operator delete();
  }
  *(void *)(a1 + 1168) = 0;
  double v21 = *(void **)(a1 + 1184);
  if (v21)
  {
    unint64_t v22 = (void *)v21[14];
    if (v22)
    {
      v21[15] = v22;
      operator delete(v22);
    }
    unint64_t v23 = (void *)v21[11];
    if (v23)
    {
      void v21[12] = v23;
      operator delete(v23);
    }
    long long v24 = (void *)v21[8];
    if (v24)
    {
      v21[9] = v24;
      operator delete(v24);
    }
    long long v25 = (void *)v21[4];
    if (v25)
    {
      v21[5] = v25;
      operator delete(v25);
    }
    operator delete();
  }
  *(void *)(a1 + 1184) = 0;
  sub_10142F260();
}

void sub_10142F924(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  if (qword_102419140 != -1) {
    dispatch_once(&qword_102419140, &stru_102325AB0);
  }
  double v2 = qword_102419148;
  if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 44);
    long long v4 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      long long v4 = (void *)*v4;
    }
    int v74 = *(_DWORD *)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 80);
    int v6 = *(_DWORD *)(a1 + 84);
    int v76 = v3;
    __int16 v77 = 2080;
    *(void *)uint64_t v78 = v4;
    int v7 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)uint64_t v79 = *(_DWORD *)(a1 + 72);
    int v8 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)&v79[6] = v5;
    int v9 = *(unsigned __int8 *)(a1 + 92);
    *(_DWORD *)uint64_t v80 = v6;
    *(_DWORD *)&v80[6] = v8;
    int v10 = *(_DWORD *)(a1 + 96);
    int v11 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)&v80[12] = v9;
    *(_DWORD *)int v81 = v10;
    int v12 = *(_DWORD *)(a1 + 112);
    int v13 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)int v82 = v11;
    int v14 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)int v83 = v12;
    int v15 = *(unsigned __int8 *)(a1 + 124);
    *(_DWORD *)unsigned int v84 = v13;
    *(_DWORD *)int v85 = v14;
    int v16 = *(_DWORD *)(a1 + 140);
    int v86 = *(_DWORD *)(a1 + 136);
    int v17 = *(unsigned __int8 *)(a1 + 125);
    int v88 = v15;
    int v90 = v17;
    int v18 = *(_DWORD *)(a1 + 132);
    int v92 = *(_DWORD *)(a1 + 128);
    int v94 = v18;
    int v96 = v16;
    int v98 = v7;
    int v19 = *(_DWORD *)(a1 + 108);
    int v100 = *(_DWORD *)(a1 + 104);
    int v102 = v19;
    int v20 = *(_DWORD *)(a1 + 148);
    int v104 = *(_DWORD *)(a1 + 144);
    int v106 = v20;
    int v21 = *(_DWORD *)(a1 + 156);
    int v108 = *(_DWORD *)(a1 + 152);
    int v110 = v21;
    int v22 = *(_DWORD *)(a1 + 164);
    int v112 = *(_DWORD *)(a1 + 160);
    int v114 = v22;
    int v23 = *(_DWORD *)(a1 + 172);
    int v116 = *(_DWORD *)(a1 + 168);
    int v24 = *(_DWORD *)(a1 + 176);
    int v118 = v23;
    int v25 = *(unsigned __int8 *)(a1 + 200);
    int v120 = v24;
    int v126 = v25;
    int v26 = *(_DWORD *)(a1 + 208);
    int v128 = *(_DWORD *)(a1 + 204);
    int v130 = v26;
    int v132 = *(_DWORD *)(a1 + 212);
    int v142 = *(_DWORD *)(a1 + 340);
    int v146 = *(_DWORD *)(a1 + 348);
    int v150 = *(_DWORD *)(a1 + 356);
    int v27 = *(_DWORD *)(a1 + 196);
    int v134 = *(_DWORD *)(a1 + 192);
    int v136 = v27;
    __int16 v121 = 2048;
    __int16 v123 = 2048;
    __int16 v137 = 2048;
    uint64_t v138 = *(void *)(a1 + 224);
    int v140 = *(_DWORD *)(a1 + 336);
    int v144 = *(_DWORD *)(a1 + 344);
    int v148 = *(_DWORD *)(a1 + 352);
    __int16 v75 = 1024;
    *(_WORD *)&v78[8] = 1024;
    *(_WORD *)&v79[4] = 1024;
    *(_WORD *)&v79[10] = 1024;
    *(_WORD *)&v80[4] = 1024;
    *(_WORD *)&v80[10] = 1024;
    *(_WORD *)&v80[16] = 1024;
    *(_WORD *)&v81[4] = 1024;
    *(_WORD *)&v82[4] = 1024;
    *(_WORD *)&v83[4] = 1024;
    *(_WORD *)&v84[4] = 1024;
    *(_WORD *)&v85[4] = 1024;
    __int16 v87 = 1024;
    __int16 v89 = 1024;
    __int16 v91 = 1024;
    __int16 v93 = 1024;
    __int16 v95 = 1024;
    __int16 v97 = 1024;
    __int16 v99 = 1024;
    __int16 v101 = 1024;
    __int16 v103 = 1024;
    __int16 v105 = 1024;
    __int16 v107 = 1024;
    __int16 v109 = 1024;
    __int16 v111 = 1024;
    __int16 v113 = 1024;
    __int16 v115 = 1024;
    __int16 v117 = 1024;
    __int16 v119 = 1024;
    __int16 v125 = 1024;
    __int16 v127 = 1024;
    __int16 v129 = 1024;
    __int16 v131 = 1024;
    __int16 v133 = 1024;
    __int16 v135 = 1024;
    __int16 v139 = 1024;
    __int16 v141 = 1024;
    __int16 v143 = 1024;
    __int16 v145 = 1024;
    __int16 v147 = 1024;
    __int16 v149 = 1024;
    double v28 = *(float *)(a1 + 180);
    double v29 = *(float *)(a1 + 184);
    *(_DWORD *)std::string buf = 67120642;
    double v122 = v28;
    double v124 = v29;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AWD: workout:%d, companion:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, VO2Grade:%d, idsAvail:%d, defaultUtil:%d, WRHR:%d, PedGPSAvailable:%d, DistTrackUsed:%d, DistTrackInvalidGradient:%d, DistTrackInvalidGain:%d, DistTrackInvalidSpeed:%d, DistTrackInvalidLength:%d, SeshDuration:%d, PedCalibrated:%d, PaceFail:%d, PedMetSourceDiff:%f, PedMetSourceDiff:%f, HrBoundsFail:%d, SeshUp:%d, SeshDown:%d, SeshCaloriesFromGrade:%d, SeshGPSSourcePhone:%d, SeshGPSSourceWatch:%d, ElevationError:%lld, HRSamplesValidMin: %d, HRSamplesValidMax: %d, METSamplesWithRecentHR: %d, METSamplesValidDelta: %d, VO2DeltaPercentage: %d, HRMetPairs: %d", buf, 0x126u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    int v69 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v69);
    if (v69 != (char *)buf) {
      free(v69);
    }
  }
  if (qword_102419140 != -1) {
    dispatch_once(&qword_102419140, &stru_102325AB0);
  }
  int v30 = qword_102419148;
  if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(_DWORD *)(a1 + 40);
    int v32 = *(_DWORD *)(a1 + 360);
    int v33 = *(_DWORD *)(a1 + 364);
    int v34 = *(_DWORD *)(a1 + 368);
    int v35 = *(_DWORD *)(a1 + 372);
    int v36 = *(_DWORD *)(a1 + 376);
    int v37 = *(_DWORD *)(a1 + 380);
    int v38 = *(_DWORD *)(a1 + 384);
    int v39 = *(_DWORD *)(a1 + 388);
    int v40 = *(_DWORD *)(a1 + 392);
    int v41 = *(_DWORD *)(a1 + 396);
    int v42 = *(_DWORD *)(a1 + 400);
    int v43 = *(_DWORD *)(a1 + 404);
    int v44 = *(_DWORD *)(a1 + 408);
    *(_DWORD *)std::string buf = 67112448;
    int v74 = v31;
    __int16 v75 = 1024;
    int v76 = v32;
    __int16 v77 = 1024;
    *(_DWORD *)uint64_t v78 = v33;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v34;
    *(_WORD *)uint64_t v79 = 1024;
    *(_DWORD *)&v79[2] = v35;
    *(_WORD *)&v79[6] = 1024;
    *(_DWORD *)&v79[8] = v36;
    *(_WORD *)uint64_t v80 = 1024;
    *(_DWORD *)&v80[2] = v37;
    *(_WORD *)&v80[6] = 1024;
    *(_DWORD *)&v80[8] = v38;
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = v39;
    *(_WORD *)int v81 = 1024;
    *(_DWORD *)&v81[2] = v40;
    *(_WORD *)int v82 = 1024;
    *(_DWORD *)&v82[2] = v41;
    *(_WORD *)int v83 = 1024;
    *(_DWORD *)&_OWORD v83[2] = v42;
    *(_WORD *)unsigned int v84 = 1024;
    *(_DWORD *)&v84[2] = v43;
    *(_WORD *)int v85 = 1024;
    *(_DWORD *)&v85[2] = v44;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,WorkoutType,%d,BaroGood,%d,BaroUnkDEMAgree,%d,DEMBaroUnk,%d,BaroUnkDEMDisagree,%d,BaroUnkNoDEM,%d,DEMBaroBad,%d,None,%d,GPSBaroGood,%d,GPSBaroUnk,%d,GPSBaroBad,%d,GPSUnvailBaroGood,%d,GPSUnvailBaroUnk,%d,GPSUnvailBaroBad,%d", buf, 0x56u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    int v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v70);
    if (v70 != (char *)buf) {
      free(v70);
    }
  }
  int v45 = *(_DWORD *)(a1 + 40);
  if ((v45 - 4) >= 2)
  {
    if (v45 == 11)
    {
      if (qword_102419140 != -1) {
        dispatch_once(&qword_102419140, &stru_102325AB0);
      }
      long long v51 = qword_102419148;
      if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
      {
        int v52 = *(_DWORD *)(a1 + 232);
        int v53 = *(_DWORD *)(a1 + 236);
        int v54 = *(_DWORD *)(a1 + 240);
        int v55 = *(_DWORD *)(a1 + 244);
        int v56 = *(_DWORD *)(a1 + 248);
        int v57 = *(_DWORD *)(a1 + 252);
        *(_DWORD *)std::string buf = 67110400;
        int v74 = v52;
        __int16 v75 = 1024;
        int v76 = v53;
        __int16 v77 = 1024;
        *(_DWORD *)uint64_t v78 = v54;
        *(_WORD *)&v78[4] = 1024;
        *(_DWORD *)&v78[6] = v55;
        *(_WORD *)uint64_t v79 = 1024;
        *(_DWORD *)&v79[2] = v56;
        *(_WORD *)&v79[6] = 1024;
        *(_DWORD *)&v79[8] = v57;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Swimmming: Free:%d, Breast:%d, Butter:%d, Back:%d, Other:%d, Swimming:%d", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419140 == -1) {
          goto LABEL_46;
        }
        goto LABEL_48;
      }
    }
  }
  else
  {
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    int v46 = qword_102419148;
    if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
    {
      int v47 = *(unsigned __int8 *)(a1 + 292);
      int v48 = *(_DWORD *)(a1 + 296);
      int v49 = *(_DWORD *)(a1 + 300);
      int v50 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)std::string buf = 67109888;
      int v74 = v47;
      __int16 v75 = 1024;
      int v76 = v48;
      __int16 v77 = 1024;
      *(_DWORD *)uint64_t v78 = v49;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v50;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Auto-pause: Enabled:%d, WillResume:%d, WillPause:%d, ResumeFalse:%d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419140 == -1)
      {
LABEL_46:
        unsigned int v72 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v72);
        if (v72 != (char *)buf) {
          free(v72);
        }
        goto LABEL_27;
      }
LABEL_48:
      dispatch_once(&qword_102419140, &stru_102325AB0);
      goto LABEL_46;
    }
  }
LABEL_27:
  if (qword_102419140 != -1) {
    dispatch_once(&qword_102419140, &stru_102325AB0);
  }
  uint64_t v58 = qword_102419148;
  if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
  {
    int v59 = *(unsigned __int8 *)(a1 + 412);
    int v60 = *(unsigned __int8 *)(a1 + 413);
    int v61 = *(_DWORD *)(a1 + 416);
    int v62 = *(_DWORD *)(a1 + 420);
    uint64_t v63 = *(void *)(a1 + 424);
    uint64_t v64 = *(void *)(a1 + 432);
    uint64_t v65 = *(void *)(a1 + 440);
    int v66 = *(_DWORD *)(a1 + 448);
    int v67 = *(_DWORD *)(a1 + 452);
    int v68 = *(_DWORD *)(a1 + 456);
    *(_DWORD *)std::string buf = 67111424;
    int v74 = v59;
    __int16 v75 = 1024;
    int v76 = v60;
    __int16 v77 = 1024;
    *(_DWORD *)uint64_t v78 = v61;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v62;
    *(_WORD *)uint64_t v79 = 2048;
    *(void *)&v79[2] = v63;
    *(_WORD *)&v79[10] = 2048;
    *(void *)uint64_t v80 = v64;
    *(_WORD *)&v80[8] = 2048;
    *(void *)&v80[10] = v65;
    *(_WORD *)int v81 = 1024;
    *(_DWORD *)&v81[2] = v66;
    *(_WORD *)int v82 = 1024;
    *(_DWORD *)&v82[2] = v67;
    *(_WORD *)int v83 = 1024;
    *(_DWORD *)&_OWORD v83[2] = v68;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "WorkoutSessionStatistics,isStopAlertEnabled,%d,isStartAlertEnabled,%d,activtyTypeWhenStopDisabled,%d,activityTypeWhenStartDisabled,%d,coarseLocationLat,%lld,coarseLocationLong,%lld,timeSinceLastDetectedStopToWorkoutEnd,%f,numAlertsDetectedStops,%d,numStopAlertRetractions,%d,indoorOutdoorState,%d", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    int v71 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::describe()", "%s\n", v71);
    if (v71 != (char *)buf) {
      free(v71);
    }
  }
}

void sub_1014306B0(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  *(unsigned char *)a1 = 1;
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  sub_10142F4FC(a1);
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a1 + 537);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a1 + 544));
  int v2 = *(_DWORD *)(a1 + 596);
  if (v2 >= 1)
  {
    float v3 = (float)v2;
    int v4 = llroundf((float)((float)*(int *)(a1 + 584) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 72) = llroundf((float)((float)*(int *)(a1 + 568) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 88) = v4;
    *(_DWORD *)(a1 + 120) = llroundf((float)((float)*(int *)(a1 + 592) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 144) = llroundf((float)((float)*(int *)(a1 + 572) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 172) = llroundf((float)((float)*(int *)(a1 + 576) * 100.0) / (float)v2);
    int v5 = llroundf((float)((float)*(int *)(a1 + 612) * 100.0) / (float)v2);
    unsigned int v6 = llroundf((float)((float)*(int *)(a1 + 588) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 204) = llroundf((float)((float)*(int *)(a1 + 608) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 208) = v5;
    *(_DWORD *)(a1 + 104) = v6;
    float v7 = (float)((float)*(int *)(a1 + 624) * 100.0) / (float)v2;
    *(_DWORD *)(a1 + 192) = llroundf((float)((float)*(int *)(a1 + 628) * 100.0) / (float)v2);
    *(_DWORD *)(a1 + 196) = llroundf(v7);
    if (*(_DWORD *)(a1 + 40) == 11)
    {
      int v8 = llroundf((float)((float)*(int *)(a1 + 668) * 100.0) / v3);
      int v9 = llroundf((float)((float)*(int *)(a1 + 672) * 100.0) / v3);
      int v10 = llroundf((float)((float)*(int *)(a1 + 676) * 100.0) / v3);
      float v11 = (float)*(int *)(a1 + 680) * 100.0;
      float v12 = (float)*(int *)(a1 + 684);
      *(_DWORD *)(a1 + 232) = llroundf((float)((float)*(int *)(a1 + 664) * 100.0) / v3);
      *(_DWORD *)(a1 + 236) = v8;
      *(_DWORD *)(a1 + 240) = v9;
      *(_DWORD *)(a1 + 244) = v10;
      *(_DWORD *)(a1 + 248) = llroundf(v11 / v3);
      *(_DWORD *)(a1 + 252) = 100 - llroundf((float)(v12 * 100.0) / v3);
    }
  }
  *(unsigned char *)(a1 + 124) = [+[CMPedometerTableRawSpeedToKValue sharedInstance] isWalkCalibrationAvailable];
  uint64_t v13 = [+[CMPedometerTableRawSpeedToKValue sharedInstance] isRunCalibrationAvailable];
  *(unsigned char *)(a1 + 125) = v13;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 1536);
  *(void *)(a1 + 352) = *(void *)(a1 + 1552);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a1 + 1564);
  int v14 = sub_101430D90(v13, *(_DWORD *)(a1 + 1516));
  int v15 = llroundf(*(float *)(a1 + 1560));
  *(_DWORD *)(a1 + 116) = v14;
  *(_DWORD *)(a1 + 100) = v15;
  int v16 = llroundf(*(float *)(a1 + 1568));
  *(_DWORD *)(a1 + 136) = llroundf(*(float *)(a1 + 1572));
  *(_DWORD *)(a1 + 140) = v16;
  float v17 = *(float *)(a1 + 600);
  if (v17 <= 0.0) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = llroundf((float)((float)(*(float *)(a1 + 604) - v17) * 100.0) / v17);
  }
  *(_DWORD *)(a1 + 108) = v18;
  double v19 = *(double *)(a1 + 1288);
  if (v19 > 0.0)
  {
    int v20 = llround(*(double *)(a1 + 1256) * 100.0 / v19);
    *(_DWORD *)(a1 + 148) = llround(*(double *)(a1 + 1224) * 100.0 / v19);
    *(_DWORD *)(a1 + 152) = v20;
    int v21 = llround(*(double *)(a1 + 1272) * 100.0 / v19);
    *(_DWORD *)(a1 + 156) = llround(*(double *)(a1 + 1264) * 100.0 / v19);
    *(_DWORD *)(a1 + 160) = v21;
    *(_DWORD *)(a1 + 164) = llround(*(double *)(a1 + 1280) * 100.0 / v19);
  }
  *(_DWORD *)(a1 + 168) = sub_101430DB4(a1);
  int v22 = *(_DWORD *)(a1 + 1296);
  if (v22 <= 0)
  {
    *(_DWORD *)(a1 + 180) = 0;
    double v24 = 0.0;
  }
  else
  {
    float v23 = *(double *)(a1 + 1304);
    *(float *)(a1 + 180) = v23;
    double v24 = 0.0;
    int v25 = v22 - 1;
    if (v25) {
      double v24 = *(double *)(a1 + 1312) / (double)v25;
    }
  }
  float v26 = sqrt(v24);
  *(float *)(a1 + 184) = v26;
  int v27 = *(_DWORD *)(a1 + 616);
  if (v27 >= 1) {
    *(_DWORD *)(a1 + 212) = llroundf((float)((float)*(int *)(a1 + 620) * 100.0) / (float)v27);
  }
  *(unsigned char *)(a1 + 292) = *(unsigned char *)(a1 + 688);
  sub_101430E30(a1);
  double v28 = *(double *)(a1 + 512) - *(double *)(a1 + 504);
  *(unsigned char *)(a1 + 216) = v28 > 1200.0;
  if (*(unsigned char *)(a1 + 1584)) {
    uint64_t v29 = (*(void *)(a1 + 656) - *(void *)(a1 + 648)) / 100;
  }
  else {
    uint64_t v29 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)(a1 + 224) = v29;
  *(_DWORD *)(a1 + 460) = (int)(float)((float)(*(float *)(a1 + 1652) - *(float *)(a1 + 1648)) / 10.0);
  if (*(unsigned char *)(a1 + 539) || *(unsigned char *)(a1 + 540))
  {
    int v30 = 0x80000000;
  }
  else
  {
    double v37 = *(double *)(a1 + 1640);
    if (v37 == 3.40282347e38 || (double v38 = *(double *)(a1 + 1632), v38 == 3.40282347e38)) {
      int v30 = 0x7FFFFFFF;
    }
    else {
      int v30 = (int)(v37 - v38);
    }
  }
  *(_DWORD *)(a1 + 464) = v30;
  float v31 = *(float *)(a1 + 1668);
  if (v31 == 3.4028e38 || (float v32 = *(float *)(a1 + 1664), v32 == 3.4028e38)) {
    int v33 = 0x7FFFFFFF;
  }
  else {
    int v33 = (int)(float)((float)(v31 - v32) / 10.0);
  }
  *(_DWORD *)(a1 + 468) = v33;
  *(_DWORD *)(a1 + 472) = sub_1000A3D9C(*(double *)(a1 + 1608), *(double *)(a1 + 1624), *(double *)(a1 + 1600), *(double *)(a1 + 1616));
  *(_DWORD *)(a1 + 476) = (float)(*(float *)(a1 + 1672) / 10.0);
  if (*(_DWORD *)(a1 + 40) == 12 && !*(unsigned char *)(a1 + 536) || v28 <= *(double *)(a1 + 528))
  {
    int v34 = 0;
  }
  else
  {
    sub_10142F924(a1);
    int v34 = 1;
  }
  if (qword_102419140 != -1) {
    dispatch_once(&qword_102419140, &stru_102325AB0);
  }
  int v35 = qword_102419148;
  if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
  {
    int v36 = "NOT ";
    if (v34) {
      int v36 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    int v41 = v36;
    __int16 v42 = 2048;
    double v43 = v28;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%sSubmitted session stats; session length, %f",
      buf,
      0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    int v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::submitSessionStats()", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
}

uint64_t sub_101430D90(uint64_t a1, unsigned int a2)
{
  if (a2 < 0xFFFFFFF3) {
    return 1;
  }
  else {
    return dword_101E09FA0[a2 + 13];
  }
}

uint64_t sub_101430DB4(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 40) - 2) > 3) {
    return 0;
  }
  uint64_t result = ((double)(uint64_t)llround(*(double *)(a1 + 512) - *(double *)(a1 + 504)) / 60.0);
  if (result)
  {
    if (result <= 0x3C)
    {
      unsigned int v2 = (unsigned __int16)result % 0xAu;
      if (v2) {
        return result - v2 + 10;
      }
    }
    else
    {
      return 70;
    }
  }
  return result;
}

void sub_101430E30(uint64_t a1)
{
  sub_101432950((void *)a1, *(unint64_t **)(a1 + 1160));
  sub_101432950((void *)a1, *(unint64_t **)(a1 + 1176));
  sub_101432950((void *)a1, *(unint64_t **)(a1 + 1168));
  unsigned int v2 = *(unint64_t **)(a1 + 1184);

  sub_101432950((void *)a1, v2);
}

void sub_101430E88(uint64_t a1, unint64_t a2, uint64_t a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 40) = sub_101430F10(v6, a2, a3);
  if (sub_10092C998(a2) - 17 <= 1)
  {
    sub_101431158(a1);
  }
}

uint64_t sub_101430F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 7;
  switch(a2)
  {
    case 0:
    case 8:
    case 10:
    case 13:
    case 25:
    case 26:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
      return 0;
    case 1:
      if (a3 == 2) {
        unsigned int v4 = 3;
      }
      else {
        unsigned int v4 = 0;
      }
      BOOL v5 = a3 == 1;
      unsigned int v6 = 2;
      goto LABEL_28;
    case 2:
      if (a3 == 2) {
        unsigned int v4 = 5;
      }
      else {
        unsigned int v4 = 0;
      }
      BOOL v5 = a3 == 1;
      unsigned int v6 = 4;
      goto LABEL_28;
    case 3:
      if (a3 == 2) {
        unsigned int v4 = 7;
      }
      else {
        unsigned int v4 = 0;
      }
      BOOL v5 = a3 == 1;
      unsigned int v6 = 6;
      goto LABEL_28;
    case 5:
      return 6;
    case 6:
      return 14;
    case 7:
      return 19;
    case 9:
      return 8;
    case 11:
      return 10;
    case 12:
    case 35:
      return 9;
    case 14:
      return 1;
    case 15:
      return 3;
    case 16:
      return 2;
    case 17:
      return 5;
    case 18:
      return 4;
    case 19:
      BOOL v5 = a3 == 2;
      unsigned int v4 = 11;
      unsigned int v6 = 13;
LABEL_28:
      if (v5) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v4;
      }
      break;
    case 20:
    case 21:
      uint64_t result = 12;
      break;
    case 22:
      uint64_t result = 15;
      break;
    case 23:
      uint64_t result = 18;
      break;
    case 24:
      uint64_t result = 16;
      break;
    case 27:
      uint64_t result = 17;
      break;
    case 28:
      uint64_t result = 20;
      break;
    case 29:
      uint64_t result = 21;
      break;
    case 30:
      uint64_t result = 22;
      break;
    case 31:
      uint64_t result = 23;
      break;
    case 32:
      uint64_t result = 24;
      break;
    default:
      return result;
  }
  return result;
}

void sub_101431158(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014322E4;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1014311DC(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101431268;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_101431268(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 96) = *(_DWORD *)(result + 40);
  return result;
}

void sub_101431278(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101431304;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_101431304(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 112) = *(_DWORD *)(result + 40);
  return result;
}

void sub_101431314(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1014313A0;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_1014313A0(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 128) = *(_DWORD *)(result + 40);
  return result;
}

void sub_1014313B0(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10143143C;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10143143C(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 132) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10143144C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  if (*(unsigned char *)(a1 + 1192) && *(unsigned char *)(a1 + 1193) && *(unsigned char *)(a1 + 1194))
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      sub_1014306B0(a1);
      sub_10142F548(a1);
    }
    sub_1014314E0(a1);
  }
}

void sub_1014314E0(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  sub_1014316E8(a1);
  unsigned int v2 = *(NSObject **)(a1 + 1576);
  if (!v2)
  {
    float v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 480));
    *(void *)(a1 + 1576) = v3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101431728;
    handler[3] = &unk_1022A3020;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    unsigned int v2 = *(NSObject **)(a1 + 1576);
  }
  dispatch_time_t v4 = dispatch_time(0, 30000000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_resume(*(dispatch_object_t *)(a1 + 1576));
}

void sub_1014315C0(uint64_t a1)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101431644;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void sub_101431644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 1192) = 1;
  sub_10143144C(v1);
}

void sub_101431654(uint64_t a1)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014316D8;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void sub_1014316D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 1193) = 1;
  sub_10143144C(v1);
}

void sub_1014316E8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
  unsigned int v2 = *(NSObject **)(a1 + 1576);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1576));
    *(void *)(a1 + 1576) = 0;
  }
}

void sub_101431728(uint64_t a1)
{
}

void sub_101431730(uint64_t a1)
{
  if (objc_opt_class())
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 480));
    v4[0] = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 504)), +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 512)], 0);
    v4[1] = +[HKQuery _predicateForObjectsFromAppleWatches];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1014318B4;
    long long v3[3] = &unk_102318160;
    v3[4] = a1;
    id v2 = [objc_alloc((Class)HKSampleQuery) initWithSampleType:+[HKSampleType workoutType](HKSampleType, "workoutType") predicate:+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2)) limit:1 sortDescriptors:0 resultsHandler:v3];
    [*(id *)(a1 + 1592) executeQuery:v2];
  }
}

void sub_1014318B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (!a4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [a3 filteredArrayUsingPredicate:+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_102325A50)];
    int v9 = *(NSObject **)(v7 + 480);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101431C7C;
    block[3] = &unk_1022A56E0;
    block[4] = v8;
    void block[5] = v7;
    dispatch_sync(v9, block);
    return;
  }
  if ([a4 code] == (id)6)
  {
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    BOOL v5 = qword_102419148;
    if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      id v15 = [a4 code];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning HealthKit Inaccessible error,%ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419140 != -1) {
        dispatch_once(&qword_102419140, &stru_102325AB0);
      }
      int v12 = 134217984;
      id v13 = [a4 code];
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke", "%s\n");
LABEL_21:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    int v10 = qword_102419148;
    if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      id v15 = [a4 code];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Warning HealthKit query error,%ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419140 != -1) {
        dispatch_once(&qword_102419140, &stru_102325AB0);
      }
      int v12 = 134217984;
      id v13 = [a4 code];
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke", "%s\n");
      goto LABEL_21;
    }
  }
}

BOOL sub_101431C4C(id a1, HKWorkout *a2, NSDictionary *a3)
{
  id v3 = [[-[HKWorkout sourceRevision](a2, "sourceRevision", a3) source]

  return _[v3 _isPreferredSource];
}

void sub_101431C7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ([*(id *)(a1 + 32) count])
  {
    id v3 = [*(id *)(a1 + 32) objectAtIndex:0];
    if (qword_102419140 != -1) {
      dispatch_once(&qword_102419140, &stru_102325AB0);
    }
    dispatch_time_t v4 = qword_102419148;
    if (os_log_type_enabled((os_log_t)qword_102419148, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      unsigned int v7 = [v3 workoutActivityType];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Setting otherWorkoutLabel: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419140 != -1) {
        dispatch_once(&qword_102419140, &stru_102325AB0);
      }
      [v3 workoutActivityType];
      BOOL v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(v2 + 188) = [v3 workoutActivityType];
  }
  sub_1014306B0(v2);
  sub_10142F548(v2);
}

void sub_101431E74(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  dispatch_time_t v4 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v5 = a2[3];
  long long v11 = a2[2];
  long long v12 = v5;
  long long v6 = a2[5];
  long long v13 = a2[4];
  long long v14 = v6;
  long long v7 = a2[1];
  long long v9 = *a2;
  long long v10 = v7;
  block[2] = sub_101431F14;
  block[3] = &unk_10230D4E0;
  block[4] = a1;
  dispatch_sync(v4, block);
}

__n128 sub_101431F14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v1 + 1216) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v1 + 1200) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  long long v4 = *(_OWORD *)(a1 + 88);
  long long v5 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v1 + 1280) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v1 + 1264) = v5;
  *(_OWORD *)(v1 + 1248) = v4;
  *(__n128 *)(v1 + 1232) = result;
  return result;
}

void sub_101431F4C(uint64_t a1, float a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101431FE0;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  float v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_101431FE0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  double v2 = *(float *)(result + 40);
  int v3 = *(_DWORD *)(v1 + 1296);
  *(_DWORD *)(v1 + 1296) = v3 + 1;
  if (v3)
  {
    double v4 = *(double *)(v1 + 1304);
    double v5 = v2 - v4;
    double v6 = v4 + (v2 - v4) / (double)(v3 + 1);
    double v7 = *(double *)(v1 + 1312) + v5 * (v2 - v6);
    *(double *)(v1 + 1304) = v6;
    *(double *)(v1 + 1312) = v7;
  }
  else
  {
    *(double *)(v1 + 1304) = v2;
    *(void *)(v1 + 1312) = 0;
  }
  return result;
}

void sub_101432034(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  double v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1014320C0;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_1014320C0(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 32);
  switch(*(_DWORD *)(result + 40))
  {
    case 1:
      ++v1[166];
      break;
    case 2:
      ++v1[169];
      break;
    case 3:
      ++v1[167];
      break;
    case 4:
      ++v1[168];
      break;
    case 5:
      ++v1[170];
      break;
    default:
      return result;
  }
  return result;
}

void sub_101432158(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  double v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1014321E0;
  v5[3] = &unk_1022B8660;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

__n128 sub_1014321E0(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v1[16].n128_u64[0] = *(void *)(v2 + 16);
  v1[16].n128_u32[2] = *(_DWORD *)(v2 + 24);
  v1[16].n128_u32[3] = *(_DWORD *)(v2 + 28);
  __n128 result = *(__n128 *)(v2 + 36);
  v1[17] = result;
  v1[18].n128_u32[0] = *(_DWORD *)(v2 + 52);
  return result;
}

void sub_101432210(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  double v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101432298;
  v5[3] = &unk_1022B8660;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

__n128 sub_101432298(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32) + 1320;
  long long v3 = *(_OWORD *)(v1 + 112);
  long long v5 = *(_OWORD *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v2 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v2 + 112) = v3;
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 80) = v4;
  long long v6 = *(_OWORD *)(v1 + 176);
  long long v8 = *(_OWORD *)(v1 + 128);
  long long v7 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v2 + 160) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v2 + 176) = v6;
  *(_OWORD *)(v2 + 128) = v8;
  *(_OWORD *)(v2 + 144) = v7;
  long long v9 = *(_OWORD *)(v1 + 240);
  long long v11 = *(_OWORD *)(v1 + 192);
  long long v10 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(v2 + 224) = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(v2 + 240) = v9;
  *(_OWORD *)(v2 + 192) = v11;
  *(_OWORD *)(v2 + 208) = v10;
  __n128 result = *(__n128 *)v1;
  long long v13 = *(_OWORD *)(v1 + 16);
  long long v14 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v2 + 48) = v14;
  *(__n128 *)uint64_t v2 = result;
  *(_OWORD *)(v2 + 16) = v13;
  return result;
}

void sub_1014322E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyValue(@"EnableAutoPause", @"com.apple.nanolifestyle.sessiontrackerapp", @"mobile", kCFPreferencesAnyHost);
  if (v2)
  {
    CFBooleanRef v3 = v2;
    *(unsigned char *)(v1 + 688) = CFBooleanGetValue(v2) != 0;
    CFRelease(v3);
  }
}

__n128 sub_101432364(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v4 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v5 = a2[10];
  long long v26 = a2[11];
  long long v6 = a2[13];
  long long v27 = a2[12];
  long long v28 = v6;
  long long v7 = a2[6];
  long long v22 = a2[7];
  long long v8 = a2[9];
  long long v23 = a2[8];
  long long v24 = v8;
  long long v25 = v5;
  long long v9 = a2[2];
  long long v10 = a2[4];
  long long v11 = a2[5];
  long long v18 = a2[3];
  long long v19 = v10;
  long long v20 = v11;
  long long v21 = v7;
  long long v12 = a2[1];
  long long v15 = *a2;
  long long v16 = v12;
  block[2] = sub_101432474;
  block[3] = &unk_1022E8A28;
  block[4] = a1;
  uint64_t v29 = *((void *)a2 + 28);
  long long v17 = v9;
  dispatch_sync(v4, block);
  return result;
}

void sub_101432474(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v5 = *(void *)(v3 + 944);
    double v1 = *(double *)(v3 + 952);
    long long v6 = *(_OWORD *)(a1 + 56);
    long long v7 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(v3 + 928) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v3 + 960) = v7;
    long long v8 = *(_OWORD *)(a1 + 104);
    long long v9 = *(_OWORD *)(a1 + 136);
    long long v10 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v3 + 1008) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v3 + 1024) = v9;
    *(_OWORD *)(v3 + 976) = v10;
    *(_OWORD *)(v3 + 992) = v8;
    long long v11 = *(_OWORD *)(a1 + 168);
    long long v12 = *(_OWORD *)(a1 + 184);
    long long v13 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(v3 + 1040) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(v3 + 1088) = v13;
    *(_OWORD *)(v3 + 1072) = v12;
    *(_OWORD *)(v3 + 1056) = v11;
    long long v14 = *(_OWORD *)(a1 + 232);
    long long v15 = *(_OWORD *)(a1 + 248);
    uint64_t v16 = *(void *)(a1 + 264);
    *(_OWORD *)(v3 + 1104) = *(_OWORD *)(a1 + 216);
    *(void *)(v3 + 1152) = v16;
    *(_OWORD *)(v3 + 1136) = v15;
    *(_OWORD *)(v3 + 1120) = v14;
    *(_OWORD *)(v3 + 944) = v6;
  }
  else
  {
    uint64_t v5 = 23;
  }
  switch(v4)
  {
    case 0:
      if (uuid_is_null((const unsigned __int8 *)(v3 + 632))
        || uuid_compare((const unsigned __int8 *)(v3 + 632), (const unsigned __int8 *)(a1 + 104)))
      {
        if (sub_1000D2E34(0))
        {
          uint64_t v17 = sub_1000D2E34(0);
          sub_1009D1EC4(v17, 30, *(void *)(v3 + 1656), -1.0);
        }
        sub_1014316E8(v3);
        sub_10143144C(v3);
        uuid_copy((unsigned __int8 *)(v3 + 632), (const unsigned __int8 *)(a1 + 104));
        *(void *)(v3 + 504) = *(void *)(a1 + 64);
        *(unsigned char *)(v3 + 539) = *(unsigned char *)(v3 + 538);
        unint64_t v18 = *(void *)(a1 + 152);
        uint64_t v19 = *(void *)(a1 + 160);
        sub_101430E88(v3, v18, v19);
      }
      break;
    case 1:
      if (!uuid_compare((const unsigned __int8 *)(v3 + 632), (const unsigned __int8 *)(a1 + 104)))
      {
        if (sub_1000D2E34(0))
        {
          uint64_t v20 = sub_1000D2E34(0);
          sub_1009D26C4(v20, 30, *(void *)(v3 + 1656));
        }
        *(unsigned char *)(v3 + 1194) = 1;
        *(void *)(v3 + 512) = *(void *)(a1 + 64);
        sub_10143144C(v3);
      }
      break;
    case 2:
      ++*(_DWORD *)(v3 + 300);
      if (v5 == 3)
      {
        uint64_t v22 = *(void *)(v3 + 1168);
        double v23 = *(double *)(a1 + 64) - v1;
        long long v24 = &v23;
        uint64_t v25 = v22;
        long long v26 = &v24;
        sub_1014333E8(v22, &v26);
        if (*(double *)(a1 + 64) - v1 < 5.76000023) {
          ++*(_DWORD *)(v3 + 304);
        }
      }
      else if (v5 == 2)
      {
        uint64_t v21 = *(void *)(v3 + 1160);
        goto LABEL_27;
      }
      break;
    case 3:
      ++*(_DWORD *)(v3 + 296);
      if (v5 == 3)
      {
        uint64_t v21 = *(void *)(v3 + 1184);
      }
      else
      {
        if (v5 != 2) {
          return;
        }
        uint64_t v21 = *(void *)(v3 + 1176);
      }
LABEL_27:
      double v23 = *(double *)(a1 + 64) - v1;
      long long v24 = &v23;
      uint64_t v25 = v21;
      long long v26 = &v24;
      sub_1014333E8(v21, &v26);
      break;
    default:
      return;
  }
}

void sub_101432740(uint64_t a1)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  CFBooleanRef v2 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014327C4;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_sync(v2, block);
}

uint64_t sub_1014327C4(uint64_t result)
{
  return result;
}

void sub_1014327D8(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  uint64_t v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101432860;
  v5[3] = &unk_1022B8660;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_101432860(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 616) += *(_DWORD *)(result + 40);
  return result;
}

void sub_101432878()
{
}

void sub_10143292C()
{
}

void sub_101432950(void *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v20 = a2;
  uint64_t v20 = (unint64_t *)sub_101433BD0((uint64_t)(a2 + 3), &v20);
  uint64_t v21 = v4;
  if (v20 != v4)
  {
    unint64_t v5 = 0;
    double v6 = (double)v3;
    long long v7 = (void **)(a1 + 39);
    do
    {
      unsigned int v8 = (*(double *)(sub_101432AA0(&v20, v5) + 8) * v6);
      long long v10 = (unsigned int *)a1[40];
      unint64_t v9 = a1[41];
      if ((unint64_t)v10 >= v9)
      {
        long long v12 = (unsigned int *)*v7;
        uint64_t v13 = ((char *)v10 - (unsigned char *)*v7) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v15 = v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v17 = (char *)sub_10017EA34((uint64_t)(a1 + 41), v16);
          long long v12 = (unsigned int *)a1[39];
          long long v10 = (unsigned int *)a1[40];
        }
        else
        {
          uint64_t v17 = 0;
        }
        unint64_t v18 = (unsigned int *)&v17[4 * v13];
        *unint64_t v18 = v8;
        long long v11 = v18 + 1;
        while (v10 != v12)
        {
          unsigned int v19 = *--v10;
          *--unint64_t v18 = v19;
        }
        a1[39] = v18;
        a1[40] = v11;
        a1[41] = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *long long v10 = v8;
        long long v11 = v10 + 1;
      }
      a1[40] = v11;
      ++v5;
    }
    while (v5 < ((char *)v21 - (char *)v20) >> 4);
  }
}

uint64_t sub_101432AA0(void *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    sub_101AB47B8();
  }
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4) {
    sub_101AB47E4();
  }
  return *a1 + 16 * a2;
}

void sub_101432AD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (objc_opt_class())
  {
    unsigned int v2 = [[+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection") isWheelchairDataSubmissionAllowed];
    *(unsigned char *)(v1 + 536) = v2;
    if (v2) {
      return;
    }
  }
  else if (*(unsigned char *)(v1 + 536))
  {
    return;
  }
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, &v4);
  sub_1000D2988(v4, "EnableWheelchairAWDCollection", (BOOL *)(v1 + 536));
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_101432B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_101432B78(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  uint64_t v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101432C04;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_101432C04(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 648) = *(unsigned int *)(result + 40);
  return result;
}

void sub_101432C14(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  uint64_t v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101432CA0;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_101432CA0(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 656) = *(unsigned int *)(result + 40);
  return result;
}

void sub_101432CB0(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  uint64_t v4 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v5 = a2[1];
  long long v8 = *a2;
  long long v9 = v5;
  long long v6 = a2[3];
  long long v10 = a2[2];
  long long v11 = v6;
  block[2] = sub_101432D48;
  block[3] = &unk_1022DB3E0;
  block[4] = a1;
  dispatch_sync(v4, block);
}

__n128 sub_101432D48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_OWORD *)(v1 + 360) = *(_OWORD *)(a1 + 44);
  *(_OWORD *)(v1 + 376) = *(_OWORD *)(a1 + 60);
  __n128 result = *(__n128 *)(a1 + 76);
  *(__n128 *)(v1 + 392) = result;
  *(_DWORD *)(v1 + 408) = *(_DWORD *)(a1 + 92);
  return result;
}

__n128 sub_101432D74(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v8 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v9 = a3[10];
  long long v40 = a3[11];
  long long v10 = a3[13];
  long long v41 = a3[12];
  long long v42 = v10;
  long long v11 = a3[6];
  long long v36 = a3[7];
  long long v12 = a3[9];
  long long v37 = a3[8];
  long long v38 = v12;
  long long v39 = v9;
  long long v13 = a3[2];
  long long v14 = a3[4];
  long long v15 = a3[5];
  long long v32 = a3[3];
  long long v33 = v14;
  long long v34 = v15;
  long long v35 = v11;
  long long v16 = a3[1];
  long long v29 = *a3;
  long long v30 = v16;
  block[2] = sub_101432F3C;
  block[3] = &unk_102325A70;
  block[4] = a1;
  uint64_t v43 = *((void *)a3 + 28);
  long long v31 = v13;
  long long v17 = a4[13];
  long long v56 = a4[12];
  long long v57 = v17;
  uint64_t v18 = *((void *)a4 + 28);
  long long v19 = a4[9];
  long long v52 = a4[8];
  long long v53 = v19;
  long long v20 = a4[10];
  long long v55 = a4[11];
  long long v54 = v20;
  long long v21 = a4[5];
  long long v48 = a4[4];
  long long v49 = v21;
  long long v22 = a4[6];
  long long v51 = a4[7];
  long long v50 = v22;
  long long v23 = a4[1];
  long long v44 = *a4;
  long long v45 = v23;
  long long v24 = a4[2];
  long long v47 = a4[3];
  long long v46 = v24;
  long long v25 = a2[1];
  long long v59 = *a2;
  long long v60 = v25;
  uint64_t v26 = *((void *)a2 + 4);
  uint64_t v58 = v18;
  uint64_t v61 = v26;
  dispatch_sync(v8, block);
  return result;
}

double sub_101432F3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_101430F10(a1, *(void *)(a1 + 152), *(void *)(a1 + 160));
  *(_DWORD *)(v2 + 416) = v3;
  *(_DWORD *)(v2 + 420) = sub_101430F10(v3, *(void *)(a1 + 384), *(void *)(a1 + 392));
  *(_WORD *)(v2 + 412) = *(_WORD *)(a1 + 504);
  double result = *(double *)(a1 + 520);
  uint64_t v5 = *(void *)(a1 + 528);
  *(double *)(v2 + 440) = result;
  *(void *)(v2 + 448) = v5;
  *(_DWORD *)(v2 + 456) = *(_DWORD *)(a1 + 536);
  return result;
}

void sub_101432F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v6 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10143302C;
  block[3] = &unk_1022B8680;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v6, block);
}

void *sub_10143302C(void *result)
{
  uint64_t v1 = result[4];
  *(void *)(v1 + 424) = result[5];
  *(void *)(v1 + 432) = result[6];
  return result;
}

void sub_101433040(uint64_t a1, double a2, double a3, double a4, double a5)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v10 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014330EC;
  block[3] = &unk_1022ACFE0;
  block[4] = a1;
  *(double *)&void block[5] = a2;
  *(double *)&void block[6] = a3;
  *(double *)&void block[7] = a5;
  *(double *)&block[8] = a4;
  dispatch_async(v10, block);
}

double sub_1014330EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double result = *(double *)(v1 + 504);
  if (result != 1.79769313e308)
  {
    if (*(double *)(v1 + 1600) == 1.79769313e308)
    {
      *(void *)(v1 + 1600) = *(void *)(a1 + 40);
      *(void *)(v1 + 1616) = *(void *)(a1 + 48);
    }
    *(void *)(v1 + 1608) = *(void *)(a1 + 40);
    *(void *)(v1 + 1624) = *(void *)(a1 + 48);
    double result = *(double *)(a1 + 56);
    if (result > -1.0)
    {
      if (*(double *)(v1 + 1632) == 1.79769313e308) {
        *(void *)(v1 + 1632) = *(void *)(a1 + 64);
      }
      double result = *(double *)(a1 + 64);
      *(double *)(v1 + 1640) = result;
    }
  }
  return result;
}

float sub_10143316C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  float v2 = *(float *)(a1 + 40);
  *(float *)(v1 + 1652) = v2;
  if (*(double *)(v1 + 504) != 1.79769313e308 && *(float *)(v1 + 1648) == 3.4028e38) {
    *(float *)(v1 + 1648) = v2;
  }
  unsigned int v3 = *(_DWORD *)(v1 + 1676);
  float v4 = v2 + (float)(*(float *)(v1 + 1672) * (float)v3++);
  float result = v4 / (float)v3;
  *(float *)(v1 + 1672) = result;
  *(_DWORD *)(v1 + 1676) = v3;
  return result;
}

void sub_1014331CC(uint64_t a1, float a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  float v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101433260;
  v5[3] = &unk_1022B2410;
  v5[4] = a1;
  float v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_101433260(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(result + 40);
  if (*(float *)(v1 + 1664) == 3.4028e38) {
    *(_DWORD *)(v1 + 1664) = v2;
  }
  else {
    *(_DWORD *)(v1 + 1668) = v2;
  }
  return result;
}

void *sub_10143328C(void *a1)
{
  int v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  float v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_1014332F0(void *a1)
{
  int v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  float v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_101433354(void *a1)
{
  int v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  float v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1014333B8(id a1)
{
  qword_102419148 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AWD");
}

double sub_1014333E8(uint64_t a1, double ***a2)
{
  int v2 = *a2;
  ++*(void *)a1;
  unsigned int v3 = *v2;
  double v4 = **v2;
  if (v4 < *(double *)(a1 + 8))
  {
    *(double *)(a1 + 8) = v4;
    double v4 = *v3;
  }
  if (v4 > *(double *)(a1 + 16)) {
    *(double *)(a1 + 16) = v4;
  }
  return sub_10143342C((uint64_t *)(a1 + 24), (uint64_t)v2);
}

double sub_10143342C(uint64_t *a1, uint64_t a2)
{
  *((unsigned char *)a1 + 112) = 1;
  int v2 = *(double **)(a2 + 8);
  double v3 = *v2;
  uint64_t v4 = *a1;
  v5.i64[0] = **(void **)a2;
  if (*(void *)v2 <= (unint64_t)*a1)
  {
    long long v8 = (double *)a1[1];
    v8[*(void *)&v3 - 1] = *(double *)v5.i64;
    if (*(void *)&v3 == v4)
    {
      unint64_t v9 = a1[4];
      if (v9 != -2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *((uint64_t *)v2 + 1);
        *(double *)&uint64_t v12 = (v2[2] - *(double *)&v11) / (double)v9;
        uint64_t v13 = a1[8];
        uint64x2_t v5 = (uint64x2_t)vdupq_n_s64(v9 + 1);
        int64x2_t v14 = (int64x2_t)xmmword_101D07560;
        int64x2_t v15 = vdupq_n_s64(2uLL);
        float64x2_t v16 = (float64x2_t)vdupq_lane_s64(v12, 0);
        float64x2_t v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
        __asm { FMOV            V5.2D, #-1.0 }
        do
        {
          uint64_t v23 = v10 + 1;
          v24.i64[0] = v10;
          v24.i64[1] = v10 + 1;
          int32x2_t v25 = vmovn_s64((int64x2_t)vcgeq_u64(v5, (uint64x2_t)v14));
          float64x2_t v26 = vmlaq_f64(v17, v16, vaddq_f64(vcvtq_f64_u64(v24), _Q5));
          if (v25.i8[0]) {
            *(float64_t *)(v13 + 8 * v10) = v26.f64[0];
          }
          if (v25.i8[4]) {
            *(float64_t *)(v13 + 8 * v10 + 8) = v26.f64[1];
          }
          int64x2_t v14 = vaddq_s64(v14, v15);
          v10 += 2;
        }
        while (v23 + 1 != ((v9 + 3) & 0xFFFFFFFFFFFFFFFELL));
      }
      long long v27 = (double *)a1[2];
      if (v8 != v27)
      {
        long long v28 = (double *)a1[8];
        unint64_t v29 = v9 + 1;
        v5.i64[0] = 1.0;
        do
        {
          double v30 = *v8;
          if (*v8 >= v28[1])
          {
            if (v30 >= v28[v29])
            {
              long long v31 = (double *)(a1[5] + 8 * v29);
            }
            else
            {
              long long v32 = (double *)a1[9];
              if (v32 != v28)
              {
                unint64_t v33 = v32 - v28;
                long long v32 = v28;
                do
                {
                  unint64_t v34 = v33 >> 1;
                  long long v35 = &v32[v33 >> 1];
                  double v37 = *v35;
                  long long v36 = v35 + 1;
                  v33 += ~(v33 >> 1);
                  if (v30 < v37) {
                    unint64_t v33 = v34;
                  }
                  else {
                    long long v32 = v36;
                  }
                }
                while (v33);
              }
              long long v31 = (double *)((char *)v32 - (char *)v28 + a1[5] - 8);
            }
          }
          else
          {
            long long v31 = (double *)a1[5];
          }
          double *v31 = *v31 + 1.0;
          ++v8;
        }
        while (v8 != v27);
      }
    }
  }
  else
  {
    float v6 = (double *)a1[8];
    if (*(double *)v5.i64 >= v6[1])
    {
      uint64_t v38 = a1[4] + 1;
      if (*(double *)v5.i64 >= v6[v38])
      {
        long long v7 = (double *)(a1[5] + 8 * v38);
      }
      else
      {
        long long v39 = (double *)a1[9];
        if (v39 != v6)
        {
          unint64_t v40 = v39 - v6;
          long long v39 = (double *)a1[8];
          do
          {
            unint64_t v41 = v40 >> 1;
            long long v42 = &v39[v40 >> 1];
            double v44 = *v42;
            uint64_t v43 = v42 + 1;
            v40 += ~(v40 >> 1);
            if (*(double *)v5.i64 < v44) {
              unint64_t v40 = v41;
            }
            else {
              long long v39 = v43;
            }
          }
          while (v40);
        }
        long long v7 = (double *)((char *)v39 - (char *)v6 + a1[5] - 8);
      }
    }
    else
    {
      long long v7 = (double *)a1[5];
    }
    *(double *)v5.i64 = *v7 + 1.0;
    double *v7 = *(double *)v5.i64;
  }
  return *(double *)v5.i64;
}

void sub_10143364C(int **a1@<X0>, uint64_t a2@<X8>)
{
  sub_1014336F0(a1, &v3);
  *(void *)a2 = 0;
  *(_OWORD *)(a2 + 8) = v3;
  sub_101433A40(a2 + 24, (uint64_t)&v4);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    long long v8 = v7;
    operator delete(v7);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
}

void sub_1014336DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10143328C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1014336F0(int **a1@<X0>, void *a2@<X8>)
{
  sub_101433794(a1, &v4);
  uint64_t v3 = v4;
  *a2 = 0x7FEFFFFFFFFFFFFFLL;
  a2[1] = v3;
  sub_101433A40((uint64_t)(a2 + 2), (uint64_t)&v5);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    unint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    long long v7 = v6;
    operator delete(v6);
  }
}

void sub_101433780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1014332F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101433794(int **a1@<X0>, void *a2@<X8>)
{
  sub_101433830(a1, (uint64_t)v3);
  *a2 = 0xFFEFFFFFFFFFFFFFLL;
  sub_101433A40((uint64_t)(a2 + 1), (uint64_t)v3);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    unint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    long long v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
}

void sub_10143381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101433354((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101433830(int **a1@<X0>, uint64_t a2@<X8>)
{
  sub_1014338C4((uint64_t)v3, a1);
  sub_101433A40(a2, (uint64_t)v3);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    unint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    long long v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
}

void sub_1014338B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101433354((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014338C4(uint64_t a1, int **a2)
{
  unint64_t v4 = *a2[2];
  *(void *)a1 = v4;
  sub_1001DCFA4((void *)(a1 + 8), v4);
  uint64_t v5 = **a2;
  *(void *)(a1 + 32) = v5;
  *(void *)&long long v8 = 0;
  sub_1001DCEDC((void *)(a1 + 40), v5 + 2, &v8);
  sub_1001DCFA4((void *)(a1 + 64), *(void *)(a1 + 32) + 2);
  unint64_t v6 = *(void *)(a1 + 32) + 2;
  long long v8 = 0uLL;
  sub_1014339BC((void *)(a1 + 88), v6, &v8);
  *(unsigned char *)(a1 + 112) = 1;
  return a1;
}

void sub_10143396C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = v4;
  long long v7 = *v5;
  if (*v5)
  {
    v1[9] = v7;
    operator delete(v7);
  }
  long long v8 = *v3;
  if (*v3)
  {
    _OWORD v1[6] = v8;
    operator delete(v8);
  }
  unint64_t v9 = *v2;
  if (*v2)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1014339BC(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10022F168(a1, a2);
    unint64_t v6 = (_OWORD *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_101433A24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101433A40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_1001DD364((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_1001DD364((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_1001DD364((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_101433B5C((char *)(a1 + 88), *(long long **)(a2 + 88), *(long long **)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

void sub_101433B10(_Unwind_Exception *exception_object)
{
  unint64_t v6 = *v4;
  if (*v4)
  {
    v1[9] = v6;
    operator delete(v6);
  }
  long long v7 = *v3;
  if (*v3)
  {
    _OWORD v1[6] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

char *sub_101433B5C(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_10022F168(result, a4);
    long long v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_101433BB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101433BD0(uint64_t a1, unint64_t **a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    *(unsigned char *)(a1 + 112) = 0;
    uint64_t v2 = *(void *)(a1 + 32) + 2;
    if (*(void *)(a1 + 32) != -2)
    {
      uint64_t v3 = *(uint64_t **)(a1 + 64);
      uint64_t v4 = *(double **)(a1 + 40);
      double v5 = (double)**a2;
      unint64_t v6 = (double *)(*(void *)(a1 + 88) + 8);
      do
      {
        double v7 = *v4++;
        double v8 = v7;
        uint64_t v9 = *v3++;
        *((void *)v6 - 1) = v9;
        *unint64_t v6 = v8 / v5;
        v6 += 2;
        --v2;
      }
      while (v2);
    }
  }
  return *(void *)(a1 + 88);
}

uint64_t sub_101433C2C(uint64_t a1, int a2, long long *a3)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 2139095039;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 2139095039;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 44) = a2;
  uint64_t v4 = a1 + 48;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(v4 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

uint64_t sub_101433C9C()
{
  qword_102487A88 = 0;
  qword_102487A90 = 0;
  qword_102487A98 = 0;
  int v0 = operator new(0x5CuLL);
  qword_102487A90 = (uint64_t)v0 + 92;
  qword_102487A98 = (uint64_t)v0 + 92;
  v0[2] = xmmword_101E09FF4;
  v0[3] = unk_101E0A004;
  v0[4] = xmmword_101E0A014;
  *(_OWORD *)((char *)v0 + 76) = *(long long *)((char *)&xmmword_101E0A014 + 12);
  _OWORD *v0 = xmmword_101E09FD4;
  v0[1] = unk_101E09FE4;
  qword_102487A88 = (uint64_t)v0;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102487A88, (void *)&_mh_execute_header);
}

void *sub_101433D30(void *a1, uint64_t *a2)
{
  uint64_t v3 = sub_10156C66C(a1, a2);
  void *v3 = off_102325B30;
  v3[11] = 0;
  v3[12] = 0;
  int64x2_t v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v3 + 13) = v4;
  v3[15] = 0xBFF0000000000000;
  v3[16] = 0;
  *(int64x2_t *)(v3 + 17) = v4;
  v3[19] = 0xBFF0000000000000;
  v3[20] = 0;
  *(int64x2_t *)(v3 + 21) = v4;
  v3[23] = 0xBFF0000000000000;
  v3[24] = 0;
  *(int64x2_t *)(v3 + 25) = v4;
  v3[27] = 0xBFF0000000000000;
  v3[28] = 0;
  sub_1014361F4(v3 + 29);
  a1[31] = 0x4334000042820000;
  return a1;
}

void sub_101433DD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[12];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  *uint64_t v1 = off_1022FA060;
  int64x2_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101433E1C()
{
  return 1;
}

uint64_t sub_101433E24(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  long long v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v4 + 16))(buf);
  uint64_t v7 = *(void *)buf;
  unint64_t v6 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v8 = (std::__shared_weak_count *)a1[12];
  a1[11] = v7;
  a1[12] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v9 = sub_100A67B58(a1[29], a1 + 11, a2);
  if ((v9 & 1) == 0)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    uint64_t v10 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Bouts FTP Estimator failed to setup cache", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102325B90);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCyclingFTPBoutBasedEstimateModel::setupFTP(const double, const double, const CLBodyMetrics &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return v9;
}

void sub_10143405C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143407C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    sub_100EC8B00(v1);
  }
  return 1;
}

void sub_1014340A0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x7FF8000000000000;
  *(_DWORD *)(a3 + 24) = 0;
  sub_1014343E4(a2, 13, 0, (uint64_t)&v24);
  int v6 = (int)(v25 / 2.56);
  int v7 = v24;
  if (v24 <= v6) {
    int v8 = (int)(v25 / 2.56);
  }
  else {
    int v8 = v24;
  }
  int v9 = v27;
  BOOL v10 = v8 <= 0 || v27 <= 0;
  int v11 = !v10;
  if (v10)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 28) = 4;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    double v12 = v26 / (double)v8;
    *(double *)a3 = v12;
    *(_DWORD *)(a3 + 28) = 4;
    *(void *)(a3 + 16) = 0;
    if (v12 > 0.0)
    {
      if (v29 <= 0)
      {
        double v14 = 0.0;
      }
      else
      {
        float v13 = v28 / (double)v29;
        double v14 = v13;
      }
      double v19 = 0.0;
      if ((double)v29 / (double)v8 > 0.5)
      {
        float v20 = (*(float *)(a1 + 252) - v14) / (*(float *)(a1 + 252) - *(float *)(a1 + 248));
        float v21 = 1.0 - v20;
        if (v21 >= 1.0) {
          float v21 = 1.0;
        }
        double v19 = v21;
        if (v19 < 0.0) {
          double v19 = 0.0;
        }
      }
      *(double *)(a3 + 16) = v19;
      goto LABEL_35;
    }
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102325B90);
  }
  int64x2_t v15 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    double v16 = 0.0;
    if (v11) {
      double v16 = v26 / (double)v8;
    }
    *(_DWORD *)std::string buf = 134218752;
    double v39 = v16;
    __int16 v40 = 1024;
    int v41 = v6;
    __int16 v42 = 1024;
    int v43 = v7;
    __int16 v44 = 1024;
    int v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not able to compute FTP for 60 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    double v17 = 0.0;
    if (v11) {
      double v17 = v26 / (double)v8;
    }
    int v30 = 134218752;
    double v31 = v17;
    __int16 v32 = 1024;
    int v33 = v6;
    __int16 v34 = 1024;
    int v35 = v7;
    __int16 v36 = 1024;
    int v37 = v9;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getFTPEstimateFor60Min(const CLCyclingFTPBoutStatistics &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
LABEL_35:
  double v22 = sub_101434620(a2, 13);
  sub_10143466C(v22, v23, (uint64_t)&v24, (uint64_t *)a3);
}

void *sub_1014343E4@<X0>(void *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 56) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 48) = 0;
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 72) = 0;
  if (a3)
  {
    long long v5 = (char *)a1[8];
    int v6 = (char *)a1[9];
    if (v5 != v6)
    {
      int v7 = 0;
      int v8 = (double *)&v30[6 * a2];
      do
      {
        float result = memcpy(v30, v5, sizeof(v30));
        int v10 = (int)(*(double *)(a4 + 8) / 2.56);
        if (v7 > v10) {
          int v10 = v7;
        }
        double v11 = 0.0;
        BOOL v12 = v10 < 1 || *(_DWORD *)(a4 + 24) < 1;
        double v13 = 0.0;
        if (!v12) {
          double v13 = *(double *)(a4 + 16) / (double)v10;
        }
        int v14 = (int)(v8[1] / 2.56);
        if (*(_DWORD *)v8 > v14) {
          int v14 = *(_DWORD *)v8;
        }
        if (v14 >= 1 && *((int *)v8 + 6) >= 1) {
          double v11 = v8[2] / (double)v14;
        }
        if (v13 < v11)
        {
          long long v15 = *((_OWORD *)v8 + 3);
          *(_OWORD *)(a4 + 32) = *((_OWORD *)v8 + 2);
          *(_OWORD *)(a4 + 48) = v15;
          long long v16 = *((_OWORD *)v8 + 5);
          *(_OWORD *)(a4 + 64) = *((_OWORD *)v8 + 4);
          *(_OWORD *)(a4 + 80) = v16;
          long long v17 = *((_OWORD *)v8 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v8;
          *(_OWORD *)(a4 + 16) = v17;
          int v7 = *(_DWORD *)a4;
        }
        v5 += 1344;
      }
      while (v5 != v6);
    }
  }
  else
  {
    uint64_t v18 = (char *)a1[5];
    double v19 = (char *)a1[6];
    if (v18 != v19)
    {
      int v20 = 0;
      float v21 = (double *)&v30[6 * a2];
      do
      {
        float result = memcpy(v30, v18, sizeof(v30));
        int v22 = (int)(*(double *)(a4 + 8) / 2.56);
        if (v20 > v22) {
          int v22 = v20;
        }
        double v23 = 0.0;
        BOOL v24 = v22 < 1 || *(_DWORD *)(a4 + 24) < 1;
        double v25 = 0.0;
        if (!v24) {
          double v25 = *(double *)(a4 + 16) / (double)v22;
        }
        int v26 = (int)(v21[1] / 2.56);
        if (*(_DWORD *)v21 > v26) {
          int v26 = *(_DWORD *)v21;
        }
        if (v26 >= 1 && *((int *)v21 + 6) >= 1) {
          double v23 = v21[2] / (double)v26;
        }
        if (v25 < v23)
        {
          long long v27 = *((_OWORD *)v21 + 3);
          *(_OWORD *)(a4 + 32) = *((_OWORD *)v21 + 2);
          *(_OWORD *)(a4 + 48) = v27;
          long long v28 = *((_OWORD *)v21 + 5);
          *(_OWORD *)(a4 + 64) = *((_OWORD *)v21 + 4);
          *(_OWORD *)(a4 + 80) = v28;
          long long v29 = *((_OWORD *)v21 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v21;
          *(_OWORD *)(a4 + 16) = v29;
          int v20 = *(_DWORD *)a4;
        }
        v18 += 1344;
      }
      while (v18 != v19);
    }
  }
  return result;
}

double sub_101434620(void *a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = sub_10011853C(a1, &v4);
  if (!v2) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 0.953066667;
}

void sub_10143466C(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102325B90);
  }
  int v7 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = (int)(*(double *)(a3 + 8) / 2.56);
    int v9 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= v8) {
      int v10 = (int)(*(double *)(a3 + 8) / 2.56);
    }
    else {
      int v10 = *(_DWORD *)a3;
    }
    int v11 = *(_DWORD *)(a3 + 24);
    if (v10 <= 0)
    {
      int v13 = *(_DWORD *)(a3 + 48);
      double v12 = 0.0;
      double v14 = 0.0;
    }
    else
    {
      if (v11 <= 0) {
        double v12 = 0.0;
      }
      else {
        double v12 = *(double *)(a3 + 16) / (double)v10;
      }
      int v13 = *(_DWORD *)(a3 + 48);
      double v14 = (double)v13 / (double)v10;
    }
    uint64_t v15 = *a4;
    uint64_t v16 = a4[2];
    if (v13 < 1) {
      double v17 = 0.0;
    }
    else {
      double v17 = *(double *)(a3 + 32) / (double)v13;
    }
    uint64_t v18 = *(void *)(a3 + 80);
    uint64_t v19 = *(void *)(a3 + 88);
    *(_DWORD *)std::string buf = 134220544;
    double v22 = a1;
    __int16 v23 = 2048;
    uint64_t v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v16;
    __int16 v27 = 2048;
    double v28 = v12;
    __int16 v29 = 1024;
    int v30 = v8;
    __int16 v31 = 1024;
    int v32 = v9;
    __int16 v33 = 1024;
    int v34 = v11;
    __int16 v35 = 2048;
    double v36 = v14;
    __int16 v37 = 2048;
    double v38 = v17;
    __int16 v39 = 2048;
    uint64_t v40 = v18;
    __int16 v41 = 2048;
    uint64_t v42 = v19;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "boutDuration,%f,ftp,%f,confidence,%f,averagePower,%f,numExpectedSamples,%d,numObservedSamples,%d,observevalidPowerSampleCount,%d,fractionValidHR,%f,averageHR,%f,startTime,%f,endTime,%f", buf, 0x64u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCyclingFTPBoutBasedEstimateModel::logMaxBoutFTPEstimate(const CFTimeInterval, const CLCyclingFTPBoutStatistics::Bout &, const CLCyclingFTPValue &) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

void sub_1014349FC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x7FF8000000000000;
  *(_DWORD *)(a3 + 24) = 0;
  sub_1014343E4(a2, 12, 0, (uint64_t)&v24);
  int v6 = (int)(v25 / 2.56);
  int v7 = v24;
  if (v24 <= v6) {
    int v8 = (int)(v25 / 2.56);
  }
  else {
    int v8 = v24;
  }
  int v9 = v27;
  BOOL v10 = v8 <= 0 || v27 <= 0;
  int v11 = !v10;
  if (v10)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 28) = 3;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    double v12 = v26 / (double)v8;
    *(double *)a3 = v12;
    *(_DWORD *)(a3 + 28) = 3;
    *(void *)(a3 + 16) = 0;
    if (v12 > 0.0)
    {
      if (v29 <= 0)
      {
        double v14 = 0.0;
      }
      else
      {
        float v13 = v28 / (double)v29;
        double v14 = v13;
      }
      double v19 = 0.0;
      if ((double)v29 / (double)v8 > 0.5)
      {
        float v20 = (*(float *)(a1 + 252) - v14) / (*(float *)(a1 + 252) - *(float *)(a1 + 248));
        float v21 = 1.0 - v20;
        if (v21 >= 1.0) {
          float v21 = 1.0;
        }
        double v19 = v21;
        if (v19 < 0.0) {
          double v19 = 0.0;
        }
      }
      *(double *)(a3 + 16) = v19;
      goto LABEL_35;
    }
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102325B90);
  }
  uint64_t v15 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    double v16 = 0.0;
    if (v11) {
      double v16 = v26 / (double)v8;
    }
    *(_DWORD *)std::string buf = 134218752;
    double v39 = v16;
    __int16 v40 = 1024;
    int v41 = v6;
    __int16 v42 = 1024;
    int v43 = v7;
    __int16 v44 = 1024;
    int v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not able to compute FTP for 20 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    double v17 = 0.0;
    if (v11) {
      double v17 = v26 / (double)v8;
    }
    int v30 = 134218752;
    double v31 = v17;
    __int16 v32 = 1024;
    int v33 = v6;
    __int16 v34 = 1024;
    int v35 = v7;
    __int16 v36 = 1024;
    int v37 = v9;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getFTPEstimateFor20Min(const CLCyclingFTPBoutStatistics &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
LABEL_35:
  double v22 = sub_101434620(a2, 12);
  sub_10143466C(v22, v23, (uint64_t)&v24, (uint64_t *)a3);
}

void sub_101434D40(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0x7FF8000000000000;
  *(_DWORD *)(a3 + 24) = 0;
  sub_1014343E4(a2, 7, 0, (uint64_t)&v24);
  int v6 = (int)(v25 / 2.56);
  int v7 = v24;
  if (v24 <= v6) {
    int v8 = (int)(v25 / 2.56);
  }
  else {
    int v8 = v24;
  }
  int v9 = v27;
  BOOL v10 = v8 <= 0 || v27 <= 0;
  int v11 = !v10;
  if (v10)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 28) = 8;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    double v12 = v26 / (double)v8;
    *(double *)a3 = v12;
    *(_DWORD *)(a3 + 28) = 8;
    *(void *)(a3 + 16) = 0;
    if (v12 > 0.0)
    {
      if (v29 <= 0)
      {
        double v14 = 0.0;
      }
      else
      {
        float v13 = v28 / (double)v29;
        double v14 = v13;
      }
      double v19 = 0.0;
      if ((double)v29 / (double)v8 > 0.5)
      {
        float v20 = (*(float *)(a1 + 252) - v14) / (*(float *)(a1 + 252) - *(float *)(a1 + 248));
        float v21 = 1.0 - v20;
        if (v21 >= 1.0) {
          float v21 = 1.0;
        }
        double v19 = v21;
        if (v19 < 0.0) {
          double v19 = 0.0;
        }
      }
      *(double *)(a3 + 16) = v19;
      goto LABEL_35;
    }
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102325B90);
  }
  uint64_t v15 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    double v16 = 0.0;
    if (v11) {
      double v16 = v26 / (double)v8;
    }
    *(_DWORD *)std::string buf = 134218752;
    double v39 = v16;
    __int16 v40 = 1024;
    int v41 = v6;
    __int16 v42 = 1024;
    int v43 = v7;
    __int16 v44 = 1024;
    int v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not able to compute FTP for 8 Mins estimates. maxAvePower.averagePower, %f,maxAvePowerBout.numExpectedSamples,%d,maxAvePowerBout.numObservedSamples,%d,maxAvePowerBout.numValidPowerSamples,%d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    double v17 = 0.0;
    if (v11) {
      double v17 = v26 / (double)v8;
    }
    int v30 = 134218752;
    double v31 = v17;
    __int16 v32 = 1024;
    int v33 = v6;
    __int16 v34 = 1024;
    int v35 = v7;
    __int16 v36 = 1024;
    int v37 = v9;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getFTPEstimateFor8Min(const CLCyclingFTPBoutStatistics &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
LABEL_35:
  double v22 = sub_101434620(a2, 7);
  sub_10143466C(v22, v23, (uint64_t)&v24, (uint64_t *)a3);
}

void sub_101435084(uint64_t a1@<X0>, void *a2@<X1>, int64x2_t *a3@<X8>)
{
  *a3 = vdupq_n_s64(0x7FF8000000000000uLL);
  a3[1].i64[0] = 0xBFF0000000000000;
  a3[1].i64[1] = 0;
  long long __p = 0;
  long long v53 = 0;
  long long v54 = 0;
  int v6 = &dword_101E0A040;
  double v51 = 0.0;
  double v7 = 0.0;
  double v49 = 0.0;
  double v50 = 0.0;
  do
  {
    int v8 = *v6;
    sub_1014343E4(a2, *v6, 1, (uint64_t)buf);
    double v9 = 0.0;
    if (SHIDWORD(v80) >= 1) {
      double v9 = *(double *)v78 / (double)SHIDWORD(v80);
    }
    float v10 = *(float *)(a1 + 248);
    float v11 = *(float *)(a1 + 252);
    int v12 = (int)(*(double *)&v76[4] / 2.56);
    if (*(int *)buf > v12) {
      int v12 = *(_DWORD *)buf;
    }
    double v13 = 0.0;
    if (v12 >= 1 && SLODWORD(v77) >= 1) {
      double v13 = *(double *)&v76[12] / (double)v12;
    }
    double v15 = sub_1014358A8(a2, v8);
    if (v13 > 0.0)
    {
      float v16 = v9;
      float v17 = (v11 - v16) / (v11 - v10);
      double v18 = (float)(1.0 - v17);
      if (v18 > 0.7)
      {
        float v19 = v15;
        double v20 = (float)(1.0 / v19);
        float v21 = v53;
        if (v53 >= v54)
        {
          uint64_t v23 = (double *)__p;
          uint64_t v24 = ((char *)v53 - (unsigned char *)__p) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v26 = (char *)v54 - (unsigned char *)__p;
          if (((char *)v54 - (unsigned char *)__p) >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            double v28 = (char *)sub_1000C571C((uint64_t)&v54, v27);
            uint64_t v23 = (double *)__p;
            float v21 = v53;
          }
          else
          {
            double v28 = 0;
          }
          int v29 = (double *)&v28[16 * v24];
          *int v29 = v20;
          v29[1] = v13;
          int v30 = v29;
          if (v21 != v23)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
              v30 -= 2;
              v21 -= 2;
            }
            while (v21 != v23);
            uint64_t v23 = (double *)__p;
          }
          double v22 = v29 + 2;
          long long __p = v30;
          long long v53 = v29 + 2;
          long long v54 = (double *)&v28[16 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *long long v53 = v20;
          v21[1] = v13;
          double v22 = v21 + 2;
        }
        long long v53 = v22;
        double v32 = v50;
        double v31 = v51;
        double v33 = v49;
        if (v19 > 450.0) {
          double v33 = v49 + v18;
        }
        else {
          double v32 = v50 + v18;
        }
        double v49 = v33;
        double v50 = v32;
        if (v19 > 450.0) {
          double v31 = v51 + 1.0;
        }
        else {
          double v7 = v7 + 1.0;
        }
        double v51 = v31;
      }
    }
    ++v6;
  }
  while (v6 != (int *)"34CLCyclingFTPBoutBasedEstimateModel");
  if ((unint64_t)((char *)v53 - (unsigned char *)__p) <= 0x20)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    double v39 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Not enough points for Critical Power Computation", buf, 2u);
    }
    double v35 = 0.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102325B90);
      }
      LOWORD(v55) = 0;
      long long v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getCriticalPowerEstimate(const CLCyclingFTPBoutStatistics &)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    double v36 = 0.0;
    goto LABEL_59;
  }
  double v35 = sub_10126D5B4((double **)&__p, 0);
  if (v35 <= 0.0)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    __int16 v40 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Unable to make CP estimate, first Point of Critical Power curve is <= 0.", buf, 2u);
    }
    double v36 = 0.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102325B90);
      }
      LOWORD(v55) = 0;
      long long v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getCriticalPowerEstimate(const CLCyclingFTPBoutStatistics &)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    goto LABEL_59;
  }
  a3->i64[0] = v34;
  a3[1].i64[0] = 0;
  double v36 = 0.0;
  if (v51 <= 0.0)
  {
LABEL_59:
    double v37 = 0.0;
    goto LABEL_60;
  }
  double v37 = v49 / v51;
  if (v7 <= 0.0) {
    double v36 = 0.0;
  }
  else {
    double v36 = v50 / v7;
  }
  double v38 = (v37 + v36) * 0.5;
  if (v38 > 1.0) {
    double v38 = 1.0;
  }
  if (v38 < 0.0) {
    double v38 = 0.0;
  }
  *(double *)a3[1].i64 = v38;
LABEL_60:
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102325B90);
  }
  int v41 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v42 = a3->i64[0];
    uint64_t v43 = a3[1].i64[0];
    *(_DWORD *)std::string buf = 134220288;
    *(void *)int v76 = v42;
    *(_WORD *)&v76[8] = 2048;
    *(void *)&v76[10] = v43;
    *(_WORD *)&v76[18] = 2048;
    double v77 = v51;
    *(_WORD *)uint64_t v78 = 2048;
    *(double *)&v78[2] = v7;
    __int16 v79 = 2048;
    double v80 = v49;
    __int16 v81 = 2048;
    double v82 = v50;
    __int16 v83 = 2048;
    double v84 = v37;
    __int16 v85 = 2048;
    double v86 = v36;
    __int16 v87 = 2048;
    uint64_t v88 = ((char *)v53 - (unsigned char *)__p) >> 4;
    __int16 v89 = 2048;
    double v90 = v35;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "criticalPower,%f,confidence,%f,longBoutsCount,%f,shortBoutsCount,%f,longBoutsFHRSum,%f,shortBoutsFHRSum,%f,longBoutsAverageFHR,%f,shortBoutsAverageFHR,%f,totalPoints,%zu,slope,%f", buf, 0x66u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102325B90);
    }
    uint64_t v44 = a3->i64[0];
    uint64_t v45 = a3[1].i64[0];
    int v55 = 134220288;
    uint64_t v56 = v44;
    __int16 v57 = 2048;
    uint64_t v58 = v45;
    __int16 v59 = 2048;
    double v60 = v51;
    __int16 v61 = 2048;
    double v62 = v7;
    __int16 v63 = 2048;
    double v64 = v49;
    __int16 v65 = 2048;
    double v66 = v50;
    __int16 v67 = 2048;
    double v68 = v37;
    __int16 v69 = 2048;
    double v70 = v36;
    __int16 v71 = 2048;
    uint64_t v72 = ((char *)v53 - (unsigned char *)__p) >> 4;
    __int16 v73 = 2048;
    double v74 = v35;
    long long v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPValue CLCyclingFTPBoutBasedEstimateModel::getCriticalPowerEstimate(const CLCyclingFTPBoutStatistics &)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  a3[1].i32[3] = 9;
  if (__p)
  {
    long long v53 = (double *)__p;
    operator delete(__p);
  }
}

void sub_101435870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1014358A8(void *a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = sub_10011853C(a1, &v4);
  if (!v2) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 57.184;
}

uint64_t sub_1014358F4(uint64_t a1)
{
  sub_100A67BBC(*(void **)(a1 + 232));
  int64x2_t v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 104) = v2;
  *(void *)(a1 + 120) = 0xBFF0000000000000;
  *(void *)(a1 + 128) = 0;
  *(int64x2_t *)(a1 + 136) = v2;
  *(void *)(a1 + 152) = 0xBFF0000000000000;
  *(void *)(a1 + 160) = 0;
  *(int64x2_t *)(a1 + 168) = v2;
  *(void *)(a1 + 184) = 0xBFF0000000000000;
  *(void *)(a1 + 192) = 0;
  *(int64x2_t *)(a1 + 200) = v2;
  *(void *)(a1 + 216) = 0xBFF0000000000000;
  *(void *)(a1 + 224) = 0;
  return 1;
}

uint64_t sub_101435960(uint64_t a1, float64x2_t *a2)
{
  *(float32x2_t *)(a1 + 248) = vcvt_f32_f64(a2[4]);
  return 1;
}

uint64_t sub_10143599C(uint64_t a1)
{
  sub_100A68730(*(void *)(a1 + 232), v67);
  sub_1014349FC(a1, v67, (uint64_t)buf);
  long long v2 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 152) = v2;
  sub_1014340A0(a1, v67, (uint64_t)buf);
  long long v3 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 120) = v3;
  sub_101434D40(a1, v67, (uint64_t)buf);
  long long v4 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 184) = v4;
  sub_101435084(a1, v67, (int64x2_t *)buf);
  long long v5 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 216) = v5;
  int v6 = v74;
  if (v74 != v73)
  {
    unint64_t v7 = 0;
    int v6 = v73;
    do
    {
      int v8 = v68;
      if (v68)
      {
        double v9 = &v6[40 * v7];
        __int16 v65 = (uint64_t *)(v9 + 24);
        double v66 = (uint64_t *)(v9 + 16);
        double v64 = (uint64_t *)(v9 + 32);
        do
        {
          uint64_t v10 = *((int *)v8 + 4);
          float v11 = (char *)v69;
          int v12 = (char *)__p;
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_102325B90);
          }
          double v13 = &v11[1344 * v7];
          double v14 = (int *)&v13[96 * v10];
          double v15 = &v12[1344 * v7];
          float v16 = (int *)&v15[96 * v10];
          float v17 = qword_1024192F8;
          if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
          {
            int v18 = *(_DWORD *)&v13[96 * (int)v10 + 48];
            double v19 = 0.0;
            double v20 = 0.0;
            double v21 = 0.0;
            if (v18 >= 1)
            {
              double v22 = &v13[96 * (int)v10];
              double v20 = *((double *)v22 + 4) / (double)v18;
              double v21 = *((double *)v22 + 5) / (double)v18;
            }
            int v23 = *v14;
            int v24 = (int)(*(double *)&v13[96 * (int)v10 + 8] / 2.56);
            if (*v14 <= v24) {
              int v25 = (int)(*(double *)&v13[96 * (int)v10 + 8] / 2.56);
            }
            else {
              int v25 = *v14;
            }
            if (v25 < 1)
            {
              double v26 = 0.0;
            }
            else
            {
              double v26 = (double)v18 / (double)v25;
              if (*(int *)&v13[96 * (int)v10 + 24] >= 1) {
                double v19 = *(double *)&v13[96 * (int)v10 + 16] / (double)v25;
              }
            }
            int v27 = *(_DWORD *)&v15[96 * (int)v10 + 48];
            double v28 = 0.0;
            double v29 = 0.0;
            double v30 = 0.0;
            if (v27 >= 1)
            {
              double v31 = &v15[96 * (int)v10];
              double v29 = *((double *)v31 + 4) / (double)v27;
              double v30 = *((double *)v31 + 5) / (double)v27;
            }
            int v32 = *v16;
            int v33 = (int)(*(double *)&v15[96 * (int)v10 + 8] / 2.56);
            if (*v16 <= v33) {
              int v34 = (int)(*(double *)&v15[96 * (int)v10 + 8] / 2.56);
            }
            else {
              int v34 = *v16;
            }
            if (v34 < 1)
            {
              double v35 = 0.0;
            }
            else
            {
              double v35 = (double)v27 / (double)v34;
              if (*(int *)&v15[96 * (int)v10 + 24] >= 1) {
                double v28 = *(double *)&v15[96 * (int)v10 + 16] / (double)v34;
              }
            }
            uint64_t v36 = *v66;
            uint64_t v37 = *v65;
            uint64_t v38 = *v64;
            double v39 = v8[5];
            *(_DWORD *)std::string buf = 134222592;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v36;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&buf[24] = v37;
            __int16 v114 = 2048;
            uint64_t v115 = v38;
            __int16 v116 = 2048;
            double v117 = v39;
            __int16 v118 = 1024;
            int v119 = v23;
            __int16 v120 = 2048;
            double v121 = v20;
            __int16 v122 = 2048;
            double v123 = v21;
            __int16 v124 = 1024;
            int v125 = v24;
            __int16 v126 = 1024;
            int v127 = v25;
            __int16 v128 = 2048;
            double v129 = v26;
            __int16 v130 = 2048;
            double v131 = v19;
            __int16 v132 = 1024;
            int v133 = v32;
            __int16 v134 = 2048;
            double v135 = v29;
            __int16 v136 = 2048;
            double v137 = v30;
            __int16 v138 = 1024;
            int v139 = v33;
            __int16 v140 = 1024;
            int v141 = v34;
            __int16 v142 = 2048;
            double v143 = v35;
            __int16 v144 = 2048;
            double v145 = v28;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "sessionId,%zu,sessionStart,%f,sessionEnd,%f,workoutType,%ld,durationMin,%f,n,%d,hr,%f,hrConf,%f,nexpected,%d,nMax,%d,validHRFraction,%f,power,%f,goodHR_n,%d,goodHR_hr,%f,goodHR_hrConf,%f,goodHR_nexpected,%d,goodHR_nMax,%d,goodHR_validHRFraction,%f,goodHR_power,%f", buf, 0xA8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192F0 != -1) {
              dispatch_once(&qword_1024192F0, &stru_102325B90);
            }
            uint64_t v40 = *v66;
            uint64_t v41 = *v65;
            uint64_t v42 = *v64;
            int v43 = *v14;
            int v44 = *(_DWORD *)&v13[96 * (int)v10 + 48];
            double v45 = 0.0;
            double v46 = 0.0;
            double v47 = 0.0;
            if (v44 >= 1)
            {
              long long v48 = &v13[96 * (int)v10];
              double v46 = *((double *)v48 + 4) / (double)v44;
              double v47 = *((double *)v48 + 5) / (double)v44;
            }
            int v49 = (int)(*(double *)&v13[96 * (int)v10 + 8] / 2.56);
            if (v43 <= v49) {
              int v50 = (int)(*(double *)&v13[96 * (int)v10 + 8] / 2.56);
            }
            else {
              int v50 = *v14;
            }
            if (v50 < 1)
            {
              double v51 = 0.0;
            }
            else
            {
              double v51 = (double)v44 / (double)v50;
              if (*(int *)&v13[96 * (int)v10 + 24] >= 1) {
                double v45 = *(double *)&v13[96 * (int)v10 + 16] / (double)v50;
              }
            }
            int v52 = *v16;
            int v53 = *(_DWORD *)&v15[96 * (int)v10 + 48];
            double v54 = 0.0;
            double v55 = 0.0;
            double v56 = 0.0;
            if (v53 >= 1)
            {
              __int16 v57 = &v15[96 * (int)v10];
              double v55 = *((double *)v57 + 4) / (double)v53;
              double v56 = *((double *)v57 + 5) / (double)v53;
            }
            int v58 = (int)(*(double *)&v15[96 * (int)v10 + 8] / 2.56);
            if (v52 <= v58) {
              int v59 = (int)(*(double *)&v15[96 * (int)v10 + 8] / 2.56);
            }
            else {
              int v59 = *v16;
            }
            if (v59 < 1)
            {
              double v60 = 0.0;
            }
            else
            {
              double v60 = (double)v53 / (double)v59;
              if (*(int *)&v15[96 * (int)v10 + 24] >= 1) {
                double v54 = *(double *)&v15[96 * (int)v10 + 16] / (double)v59;
              }
            }
            double v61 = v8[5];
            int v75 = 134222592;
            unint64_t v76 = v7;
            __int16 v77 = 2048;
            uint64_t v78 = v40;
            __int16 v79 = 2048;
            uint64_t v80 = v41;
            __int16 v81 = 2048;
            uint64_t v82 = v42;
            __int16 v83 = 2048;
            double v84 = v61;
            __int16 v85 = 1024;
            int v86 = v43;
            __int16 v87 = 2048;
            double v88 = v46;
            __int16 v89 = 2048;
            double v90 = v47;
            __int16 v91 = 1024;
            int v92 = v49;
            __int16 v93 = 1024;
            int v94 = v50;
            __int16 v95 = 2048;
            double v96 = v51;
            __int16 v97 = 2048;
            double v98 = v45;
            __int16 v99 = 1024;
            int v100 = v52;
            __int16 v101 = 2048;
            double v102 = v55;
            __int16 v103 = 2048;
            double v104 = v56;
            __int16 v105 = 1024;
            int v106 = v58;
            __int16 v107 = 1024;
            int v108 = v59;
            __int16 v109 = 2048;
            double v110 = v60;
            __int16 v111 = 2048;
            double v112 = v54;
            double v62 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCyclingFTPBoutBasedEstimateModel::execute()", "%s\n", v62);
            if (v62 != buf) {
              free(v62);
            }
          }
          int v8 = *(float **)v8;
        }
        while (v8);
      }
      ++v7;
      int v6 = v73;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((v74 - v73) >> 3));
  }
  if (v6)
  {
    double v74 = v6;
    operator delete(v6);
  }
  if (__p)
  {
    uint64_t v72 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    double v70 = v69;
    operator delete(v69);
  }
  sub_1000D7D80((uint64_t)v67);
  return 1;
}

void sub_101436040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_101436070((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101436070(void *a1)
{
  long long v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }

  return sub_1000D7D80((uint64_t)a1);
}

__n128 sub_1014360D4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 80) = v2;
  long long v3 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 112) = v3;
  long long v4 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 136);
  long long v6 = *(_OWORD *)(a1 + 152);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

void sub_10143610C(void *a1)
{
  sub_101436174(a1);

  operator delete();
}

void sub_101436144(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void *sub_101436174(void *a1)
{
  *a1 = off_102325B30;
  long long v2 = (std::__shared_weak_count *)a1[30];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[12];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  *a1 = off_1022FA060;
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

uint64_t sub_1014361F4@<X0>(void *a1@<X8>)
{
  long long v2 = (char *)operator new(0xD8uLL);
  uint64_t result = sub_101436240((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_10143622C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101436240(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_102325BC0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  sub_101436370(a1 + 24);
  return a1;
}

void sub_1014362BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1014362D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102325BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014362F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102325BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101436344(uint64_t a1)
{
  sub_1014364A8((uint64_t)&v1, (void *)(a1 + 24));
}

uint64_t sub_101436370(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  v3[4] = xmmword_101E0A12C;
  void v3[5] = unk_101E0A13C;
  v3[6] = xmmword_101E0A14C;
  v3[0] = xmmword_101E0A0EC;
  v3[1] = unk_101E0A0FC;
  v3[2] = xmmword_101E0A10C;
  long long v3[3] = unk_101E0A11C;
  sub_101436430(a1 + 16, (int *)v3, 14);
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_101436418(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101436430(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      sub_10045B3D0(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_101436494(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void sub_1014364A8(uint64_t a1, void *a2)
{
  long long v3 = (void *)a2[13];
  if (v3)
  {
    a2[14] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a2[10];
  if (v4)
  {
    a2[11] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5)
  {
    a2[8] = v5;
    operator delete(v5);
  }
  sub_1000D7D80((uint64_t)(a2 + 2));
  long long v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    sub_1000DB0A0(v6);
  }
}

void *sub_101436528(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_101436628((uint64_t)a1, "HRRecoveryInputHRHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102325C10;
  a1[9] = off_102325CD8;
  a1[42] = off_102325D28;
  sub_101437138((uint64_t)a1);
  return a1;
}

void sub_1014365FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_101436AD8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101436628(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *int v12 = off_1022ADB08;
  *(void *)a1 = off_102325F08;
  *(void *)(a1 + 72) = off_102325FB0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102325F08;
  *(void *)(a1 + 72) = off_102325FB0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_101436A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *int v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  *int v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101436AD0()
{
}

void *sub_101436AD8(void *a1)
{
  *a1 = off_102325F08;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102325FB0;
  a1[33] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_101436B9C(uint64_t a1)
{
  return sub_101436AD8((void *)(a1 - 72));
}

void *sub_101436BA4(uint64_t a1)
{
  return sub_101436AD8((void *)(a1 - 336));
}

void sub_101436BAC(void *a1)
{
  sub_101436AD8(a1);

  operator delete();
}

void sub_101436BE4(uint64_t a1)
{
  sub_101436AD8((void *)(a1 - 72));

  operator delete();
}

void sub_101436C20(uint64_t a1)
{
  sub_101436AD8((void *)(a1 - 336));

  operator delete();
}

uint64_t sub_101436C5C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM HRRecoveryInputHRHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_101436DA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101436DC0(uint64_t a1, uint64_t a2)
{
  return sub_101436C5C(a1 - 72, a2);
}

uint64_t sub_101436DC8(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from HRRecoveryInputHRHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_101436F70(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101436FB0(uint64_t *a1, uint64_t a2)
{
  long long v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_1014373C4(a1, a2);
  return 0;
}

uint64_t sub_101437010(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM HRRecoveryInputHRHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1014370CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101437108(uint64_t a1)
{
  return sub_101437010(a1 - 72);
}

uint64_t sub_101437110(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_101437138(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "HRRecoveryInputHRHistory", (const char **)&off_102325DC8, (const std::string::value_type **)&off_102478E38, 0);
  }
  return result;
}

void *sub_1014371A0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "HRRecoveryInputHRHistory");
}

void *sub_1014371B0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "HRRecoveryInputHRHistory");
}

uint64_t sub_1014371C0(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM HRRecoveryInputHRHistory");
  }
  return result;
}

void sub_101437270(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101437288(uint64_t a1)
{
  return sub_1014371C0(a1 - 72);
}

uint64_t sub_101437290(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_1000E1294(&v3, (uint64_t)"CLHRRecoveryInputHRRecorderDb.insertRecord", 0);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO HRRecoveryInputHRHistory (startTime, hr, hrConfidence) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_101437390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_1014373B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1014373C4(uint64_t *a1, uint64_t a2)
{
  long long v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  int v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  unint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
}

uint64_t sub_10143743C(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM HRRecoveryInputHRHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_102325EB8);
  }
  long long v4 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRRecoveryInputHRHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_102325EB8);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputHRRecorderDb::queryHRRecoveryInputHRInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoveryInputHR> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_101437800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101437864(uint64_t a1)
{
  return sub_10143743C(a1 - 336);
}

uint64_t sub_10143786C(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from HRRecoveryInputHRHistory ORDER BY startTime ASC");
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102325ED8);
  }
  long long v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRRecoveryInputHRHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102325ED8);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputHRRecorderDb::queryHRRecoveryInputHRAllRecords(std::vector<HRRecoveryInputHR> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_101437BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101437C4C(uint64_t a1)
{
  return sub_10143786C(a1 - 336);
}

uint64_t sub_101437C54(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        long long v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        unint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          double v9 = __p;
        }
        else {
          double v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AB4810(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_101438060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1014380E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_101439FCC(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102325FF0);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102325FF0);
    }
    unint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102325FF0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101438834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101438868(uint64_t a1, uint64_t a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v28 = 0;
  double v29 = 0.0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102325FF0);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102325FF0);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102325FF0);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)std::string buf = 134349312;
        double v36 = v29;
        __int16 v37 = 2050;
        uint64_t v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102325FF0);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v31 = 134349312;
        double v32 = v29;
        __int16 v33 = 2050;
        uint64_t v34 = v22;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102325FF0);
        }
        int v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)std::string buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102325FF0);
          }
          double v24 = *(double *)(a2 + 8);
          int v31 = 134217984;
          double v32 = v24;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102325FF0);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102325FF0);
        }
        int v31 = 134217984;
        double v32 = v18;
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_10143906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101439098(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB4980(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  int v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_10143940C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB4AF0(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101439738(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB4C60(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_101439A5C(uint64_t a1)
{
  return sub_1014380E0(a1 - 72);
}

void sub_101439A64(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_101439A94(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101439AC4(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB4DD0(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_101439E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_101439F0C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101439F3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_101439FCC(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10143A04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143A068@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v3 = *(double *)(a2 + 1024);
  if (*(double *)(a2 + 112) >= v3)
  {
    double v4 = *(double *)(result + 24);
    if (v3 > v4)
    {
      uint64_t v5 = *(void *)(a2 + 1032);
      if ((!*(unsigned char *)(a2 + 352) || *(unsigned char *)(result + 48)) && (v5 - *(_DWORD *)(result + 32)) >= 0xC8)
      {
        double v6 = v3 - v4;
        double v7 = *(double *)(result + 40);
        if (v6 <= 180.0)
        {
          if (v7 >= v6) {
            double v7 = v6;
          }
          *(double *)uint64_t result = *(double *)result + v7;
        }
        else
        {
          *(double *)(result + 8) = v7 + *(double *)(result + 8);
          *(double *)(result + 16) = v3;
        }
      }
      *(double *)(result + 24) = v3;
      *(void *)(result + 32) = v5;
    }
  }
  double v8 = *(double *)result;
  if (*(double *)result <= 0.0)
  {
    double v9 = *(double *)(result + 8);
    if (v9 <= 0.0)
    {
      char v10 = 0;
      goto LABEL_21;
    }
    if (*(double *)(a2 + 112) - *(double *)(result + 16) > 900.0)
    {
      char v10 = 0;
      *(void *)(result + 8) = 0;
      double v9 = 0.0;
      goto LABEL_21;
    }
    double v9 = v9 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
    if (v9 < 0.0) {
      double v9 = 0.0;
    }
    *(double *)(result + 8) = v9;
  }
  else
  {
    double v8 = v8 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
    if (v8 < 0.0) {
      double v8 = 0.0;
    }
    *(double *)uint64_t result = v8;
    double v9 = *(double *)(result + 8);
  }
  char v10 = 1;
LABEL_21:
  *(unsigned char *)a3 = v10;
  *(double *)(a3 + 8) = v9;
  *(double *)(a3 + 16) = v8;
  return result;
}

void *sub_10143A188(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_10143A32C((uint64_t)a1, "CLSedentaryAlarmRecorderDb", a2, (uint64_t)__p, 1, 0.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102326020;
  a1[9] = off_1023260D8;
  sub_100F03BA0(a1 + 42, 0, 0);
  sub_100F03BA0(a1 + 44, 0, 0);
  sub_100F03BA0(a1 + 46, 0, 0);
  sub_100F03BA0(a1 + 48, 0, 0);
  sub_100F03BA0(a1 + 50, 0, 0);
  sub_100F03BA0(a1 + 52, 0, 0);
  sub_100F03BA0(a1 + 54, 0, 0);
  sub_100F03BA0(a1 + 56, 0, 0);
  sub_100F03BA0(a1 + 58, 0, 0);
  sub_100F03BA0(a1 + 60, 0, 0);
  a1[62] = 0;
  a1[63] = 0;
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_10143A300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143A32C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *uint64_t v12 = &off_1022B2C68;
  *(void *)a1 = off_102326198;
  *(void *)(a1 + 72) = off_102326240;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102326198;
  *(void *)(a1 + 72) = off_102326240;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_10143A73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *double v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  *int v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_10143A7D0()
{
}

void *sub_10143A7D8(void *a1)
{
  *a1 = off_102326198;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102326240;
  a1[33] = off_1022B2C20;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_10143A898(void *a1)
{
  *a1 = off_102326020;
  a1[9] = off_1023260D8;
  sub_10143A918((uint64_t)a1, 0, 0);

  return sub_10143A7D8(a1);
}

void sub_10143A918(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 496) = a2;
    char v6 = *(const void **)(a1 + 504);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 504) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101AB4F40();
    sub_10143A990(v7);
  }
}

void *sub_10143A994(uint64_t a1)
{
  return sub_10143A898((void *)(a1 - 72));
}

void sub_10143A99C(void *a1)
{
  sub_10143A898(a1);

  operator delete();
}

void sub_10143A9D4(uint64_t a1)
{
  sub_10143A898((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_10143AA10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  v16[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v17 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_100082068((void *)(a1 + 384), v16);
    char v6 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    if (sub_100055D58(v6, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
    {
      uint64_t v8 = *(void *)(a1 + 80);
      double v9 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
      sub_10001FEB0(v8, v9);
      uint64_t v10 = *(void *)(a1 + 80);
      if (*(uint64_t *)(v10 + 88) <= 0) {
        uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 88);
      }
      sub_10003CC68(v10, v11);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
      *(_DWORD *)(a1 + 132) = v12;
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v16[0];
    v16[0] = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    uint64_t v13 = -1;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v13;
}

void sub_10143ABA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10143ABD8(uint64_t a1, uint64_t a2)
{
  return sub_10143AA10(a1 - 72, a2);
}

uint64_t sub_10143ABE0(uint64_t a1, void **a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v31[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v32 = 256;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 352), v31);
    while (!sub_10143AE2C(v31, (uint64_t)&v26))
    {
      uint64_t v8 = v27;
      uint64_t v7 = v28;
      int v9 = v29;
      BOOL v10 = v30 != 0;
      uint64_t v11 = (char *)a2[1];
      int v12 = (char *)a2[2];
      if (v11 >= v12)
      {
        uint64_t v14 = (v11 - (unsigned char *)*a2) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v16 = v12 - (unsigned char *)*a2;
        if (v16 >> 4 > v15) {
          unint64_t v15 = v16 >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          __int16 v18 = (char *)sub_1001D9EDC((uint64_t)(a2 + 2), v17);
        }
        else {
          __int16 v18 = 0;
        }
        uint64_t v19 = &v18[32 * v14];
        *(void *)uint64_t v19 = v8;
        *((void *)v19 + 1) = v7;
        *((_DWORD *)v19 + 4) = v9;
        v19[20] = v10;
        double v21 = (char *)*a2;
        long long v20 = (char *)a2[1];
        uint64_t v22 = v19;
        if (v20 != *a2)
        {
          do
          {
            long long v23 = *((_OWORD *)v20 - 1);
            *((_OWORD *)v22 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 32;
            v20 -= 32;
          }
          while (v20 != v21);
          long long v20 = (char *)*a2;
        }
        uint64_t v13 = v19 + 32;
        *a2 = v22;
        a2[1] = v19 + 32;
        a2[2] = &v18[32 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)uint64_t v11 = v27;
        *((void *)v11 + 1) = v7;
        *((_DWORD *)v11 + 4) = v9;
        uint64_t v13 = v11 + 32;
        v11[20] = v10;
      }
      a2[1] = v13;
    }
    uint64_t v24 = v31[0];
    v31[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_10143ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10143AE2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  int v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  BOOL v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v11 = sqlite3_column_int(v10, 4);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 28) = v11;
  return result;
}

uint64_t sub_10143AEE8(uint64_t a1, void **a2, double a3)
{
  uint64_t v7 = a1 + 112;
  uint64_t v6 = *(void *)(a1 + 112);
  v37[2] = (id)(a1 + 112);
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  __int16 v38 = 256;
  sub_1000E1294((uint64_t *)v37, (uint64_t)"CLSedentaryAlarmRecorderDb.querySedentaryAlarmDataSince", 0);
  if (sub_100082064(a1 + 72))
  {
    sub_100082068((void *)(a1 + 480), &v36);
    uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v36);
    if (sub_100055D58(v8, 1, a3))
    {
      int v9 = (sqlite3_stmt *)sub_10014D19C(v36);
      double Current = CFAbsoluteTimeGetCurrent();
      if (sub_100055D58(v9, 2, Current))
      {
        while (!sub_10143AE2C(&v36, (uint64_t)&v31))
        {
          uint64_t v12 = v32;
          uint64_t v11 = v33;
          int v13 = v34;
          BOOL v14 = v35 != 0;
          unint64_t v15 = (char *)a2[1];
          uint64_t v16 = (char *)a2[2];
          if (v15 >= v16)
          {
            uint64_t v18 = (v15 - (unsigned char *)*a2) >> 5;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 59) {
              sub_1001D7FD4();
            }
            uint64_t v20 = v16 - (unsigned char *)*a2;
            if (v20 >> 4 > v19) {
              unint64_t v19 = v20 >> 4;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21) {
              uint64_t v22 = (char *)sub_1001D9EDC((uint64_t)(a2 + 2), v21);
            }
            else {
              uint64_t v22 = 0;
            }
            long long v23 = &v22[32 * v18];
            *(void *)long long v23 = v12;
            *((void *)v23 + 1) = v11;
            *((_DWORD *)v23 + 4) = v13;
            v23[20] = v14;
            int v25 = (char *)*a2;
            uint64_t v24 = (char *)a2[1];
            uint64_t v26 = v23;
            if (v24 != *a2)
            {
              do
              {
                long long v27 = *((_OWORD *)v24 - 1);
                *((_OWORD *)v26 - 2) = *((_OWORD *)v24 - 2);
                *((_OWORD *)v26 - 1) = v27;
                v26 -= 32;
                v24 -= 32;
              }
              while (v24 != v25);
              uint64_t v24 = (char *)*a2;
            }
            unint64_t v17 = v23 + 32;
            *a2 = v26;
            a2[1] = v23 + 32;
            a2[2] = &v22[32 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(void *)unint64_t v15 = v32;
            *((void *)v15 + 1) = v11;
            *((_DWORD *)v15 + 4) = v13;
            unint64_t v17 = v15 + 32;
            v15[20] = v14;
          }
          a2[1] = v17;
        }
      }
    }
    uint64_t v29 = v36;
    uint64_t v36 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t v28 = 100;
  }
  else
  {
    uint64_t v28 = 109;
  }
  sub_1000E1098(v37);
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  return v28;
}

void sub_10143B140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  id v7 = va_arg(va1, id);
  uint64_t v9 = va_arg(va1, void);
  sub_1000E1098((id *)va);
  sub_1019DB560((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10143B1AC(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 336), &v8);
  double v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_10143B258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143B298(uint64_t a1)
{
  return sub_10143B1AC(a1 - 72);
}

uint64_t sub_10143B2A0(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1005F7B0C(*(void *)(a1 + 80), "SedentaryAlarmHistory", (const char **)&qword_102487AA0, (const std::string::value_type **)&qword_102487BC0, 0);
    *(void *)(a1 + 336) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM SedentaryAlarmHistory");
    *(void *)(a1 + 344) = v3;
    *(void *)(a1 + 352) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SedentaryAlarmHistory ORDER BY startTime ASC");
    *(void *)(a1 + 360) = v4;
    *(void *)(a1 + 384) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SedentaryAlarmHistory WHERE startTime < ?");
    *(void *)(a1 + 392) = v5;
    *(void *)(a1 + 400) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SedentaryAlarmHistory WHERE startTime > ?");
    *(void *)(a1 + 408) = v6;
    *(void *)(a1 + 416) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SedentaryAlarmHistory");
    *(void *)(a1 + 424) = v7;
    *(void *)(a1 + 432) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO SedentaryAlarmHistory (startTime, firedTime, alarmType, didWake) VALUES (?, ?, ?, ?)");
    *(void *)(a1 + 440) = v8;
    *(void *)(a1 + 464) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SedentaryAlarmHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 472) = v9;
    *(void *)(a1 + 480) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SedentaryAlarmHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC");
    *(void *)(a1 + 488) = v10;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
    *(_DWORD *)(a1 + 132) = result;
  }
  return result;
}

uint64_t sub_10143B3BC(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 416), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(v7);
    sub_10001FEB0(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0) {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_10003CC68(v5, v6);
    *(_DWORD *)(a1 + 132) = 0;
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_10143B460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143B47C(uint64_t a1)
{
  return sub_10143B3BC(a1 - 72);
}

uint64_t sub_10143B484(uint64_t a1, double *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    (*(void (**)(uint64_t, double *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
    sub_100082068((void *)(a1 + 400), &v12);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v12);
    if (sub_100055D58(v5, 1, *a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v12);
      sub_10001FEB0(v6, v7);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      uint64_t v8 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to delete records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::deleteRecordsAfterInsertUL(const CLSedentaryAlarmData &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    uint64_t v9 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v9 + 88) <= 0) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    sub_10003CC68(v9, v10);
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_10143B70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143B754(uint64_t a1, double a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (a2 < 0.0 && result != 0)
  {
    sub_100082068((void *)(a1 + 400), &v16);
    uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v16);
    double Current = CFAbsoluteTimeGetCurrent();
    if (sub_100055D58(v6, 1, Current))
    {
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v16);
      sub_10001FEB0(v8, v9);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning SedentaryAlarm, Time rolled back, deleting records in the future", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        unint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSedentaryAlarmRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(uint64_t *)(v11 + 88) <= 0) {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v12 = *(void *)(v11 + 88);
      }
      sub_10003CC68(v11, v12);
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      int v13 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to shift records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        BOOL v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_10143BAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10143BB14(uint64_t a1, long long *a2)
{
  if (sub_100082064(a1 + 72))
  {
    sub_100082068((void *)(a1 + 432), buf);
    uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
    if (sub_100055D58(v4, 1, *(double *)a2))
    {
      uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
      if (sub_100055D58(v5, 2, *((double *)a2 + 1)))
      {
        uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
        if (sub_10014D1A4(v6, 3, *((_DWORD *)a2 + 4)))
        {
          uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
          if (sub_10014D1A4(v7, 4, *((unsigned __int8 *)a2 + 20)))
          {
            uint64_t v8 = *(void *)(a1 + 80);
            uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
            sub_10001FEB0(v8, v9);
            ++*(_DWORD *)(a1 + 132);
            uint64_t v10 = *(void **)(a1 + 496);
            if (v10)
            {
              if (*(void *)(a1 + 504))
              {
                long long v11 = a2[1];
                long long v16 = *a2;
                long long v17 = v11;
                v15[0] = _NSConcreteStackBlock;
                v15[1] = 3221225472;
                double v15[2] = sub_10143BE24;
                v15[3] = &unk_1022ACFE0;
                v15[4] = a1;
                [v10 async:v15];
              }
            }
          }
        }
      }
    }
    uint64_t v12 = *(void *)buf;
    *(void *)std::string buf = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326168);
    }
    int v13 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to insert record", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::insertRecordUL(const CLSedentaryAlarmData &, BOOL)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_10143BDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143BE24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 504);
  long long v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v4);
}

uint64_t sub_10143BE68(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 464), &v12);
  uint64_t v4 = sub_10143AE2C(&v12, (uint64_t)v8);
  if (!v4)
  {
    *(_OWORD *)a2 = v9;
    int v5 = v11;
    *(_DWORD *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 20) = v5 != 0;
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_10143BF18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_10143BF34(uint64_t a1, unint64_t *a2)
{
  int v4 = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 104))(a1, v8);
  if (v4 == 1) {
    goto LABEL_5;
  }
  if (!v4)
  {
    v5.n128_u64[0] = *a2;
    if (*(double *)a2 < v8[0] + -2.56) {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v5.n128_f64[0] - v8[0]);
    }
LABEL_5:
    (*(void (**)(uint64_t, unint64_t *, void, __n128))(*(void *)a1 + 120))(a1, a2, 0, v5);
    return;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102326168);
  }
  uint64_t v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "SedentaryAlarm, Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326168);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryAlarmRecorderDb::sanitizeAndStoreRecordUL(const CLSedentaryAlarmData &, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

uint64_t sub_10143C174(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    int v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          __n128 v5 = __p;
        }
        else {
          __n128 v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          long long v9 = __p;
        }
        else {
          long long v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AB50A4(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_10143C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10143C5FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_10143E480(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102326168);
  }
  __n128 v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)int v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326168);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSedentaryAlarmData>::setDatabaseAccessible() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_10143CD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10143CD84(uint64_t a1)
{
  return sub_10143C5FC(a1 - 72);
}

void sub_10143CD8C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10143CDBC(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB5210(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    long long v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_10143D180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

id *sub_10143D200(uint64_t a1, uint64_t a2, char a3)
{
  v29[0] = (id)os_transaction_create();
  v29[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v29);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 104))(a1, v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      unsigned __int8 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        LOWORD(v30) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)a2;
    double v8 = v28[0];
    double v9 = *(double *)a2 - v28[0];
    if (v9 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326168);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(double *)a2;
        *(_DWORD *)std::string buf = 134349312;
        double v35 = v28[0];
        __int16 v36 = 2050;
        double v37 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        double v22 = *(double *)a2;
        int v30 = 134349312;
        double v31 = v28[0];
        __int16 v32 = 2050;
        double v33 = v22;
        long long v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)a2;
      double v8 = v28[0];
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)a2;
          *(_DWORD *)std::string buf = 134217984;
          double v35 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102326168);
          }
          double v24 = *(double *)a2;
          int v30 = 134217984;
          double v31 = v24;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102326168);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v35 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102326168);
        }
        int v30 = 134217984;
        double v31 = v18;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, double *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v29);
}

void sub_10143DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10143DA2C(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB537C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_10143DDA0(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101AB54E8(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      __n128 v5 = __p;
    }
    else {
      __n128 v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_10143E0CC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101AB5654(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_10143E3F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_10143E480(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10143E500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10143E51C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10143E54C()
{
  qword_102487AA0 = (uint64_t)"id";
  dword_102487AA8 = 1;
  word_102487AAC = 1;
  byte_102487AB0 = 0;
  byte_102487AC8 = 0;
  qword_102487AD0 = (uint64_t)"startTime";
  dword_102487AD8 = 2;
  word_102487ADC = 0;
  byte_102487AE0 = 0;
  byte_102487AF8 = 0;
  qword_102487B00 = (uint64_t)"firedTime";
  dword_102487B08 = 2;
  word_102487B0C = 0;
  byte_102487B10 = 0;
  byte_102487B28 = 0;
  qword_102487B30 = (uint64_t)"alarmType";
  dword_102487B38 = 1;
  word_102487B3C = 0;
  byte_102487B40 = 0;
  byte_102487B58 = 0;
  qword_102487B60 = (uint64_t)"didWake";
  dword_102487B68 = 1;
  word_102487B6C = 0;
  byte_102487B70 = 0;
  byte_102487B88 = 0;
  qword_102487B90 = 0;
  dword_102487B98 = 5;
  word_102487B9C = 0;
  byte_102487BA0 = 0;
  byte_102487BB8 = 0;
  qword_102487BC0 = (uint64_t)"startTime";
  *(void *)algn_102487BC8 = 0;
}

uint64_t sub_10143E610()
{
  if (sub_10143E648()) {
    return 1;
  }

  return sub_10143E850();
}

uint64_t sub_10143E648()
{
  sub_1000C7F88(buf);
  LOBYTE(v5[0]) = 0;
  unsigned int v0 = sub_1000D2988(*(uint64_t *)buf, "EnableTrackRunProtoToOsLog", (BOOL *)v5);
  if (LOBYTE(v5[0])) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1023262D8);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun: EnableTrackRunProtoToOsLog,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1023262D8);
    }
    v5[0] = 67240192;
    v5[1] = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTrackRunSerializer::isOsLogEnabled()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

void sub_10143E830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10143E850()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  sub_100103240();
  unsigned int v1 = sub_10073E30C();
  LOBYTE(v6[0]) = 0;
  if (sub_1000D2988(v0, "EnableTrackRunRecorder", (BOOL *)v6)) {
    uint64_t v2 = LOBYTE(v6[0]) != 0;
  }
  else {
    uint64_t v2 = v1;
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1023262D8);
  }
  uint64_t v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun: EnableTrackRunRecorder,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1023262D8);
    }
    v6[0] = 67240192;
    v6[1] = v2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTrackRunSerializer::isDiskEnabled()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return v2;
}

void sub_10143EA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_10143EA70@<X0>(std::string *a1@<X8>)
{
  uint64_t v2 = (std::string *)sub_10042885C((uint64_t)a1);
  std::string::assign(v2, "trackrun");
  sub_1000C7F88(buf);
  v11[0] = 0;
  int v3 = sub_1000D2988(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v11);
  if (v11[0]) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v4) {
    uint64_t v5 = "/var/mobile/Library/Logs/CrashReporter/com.apple.locationd";
  }
  else {
    uint64_t v5 = "/var/mobile/Library/Logs/locationd";
  }
  std::string::assign(a1 + 2, v5);
  std::string::assign(a1 + 3, "trackrun");
  sub_1000C7F88(buf);
  v11[0] = 0;
  int v6 = sub_1000D2988(*(uint64_t *)buf, "EnableLargeTrackRunLogs", v11);
  if (v11[0]) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v7)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1023262D8);
    }
    uint64_t v8 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "EnableLargeTrackRunLogs is set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1023262D8);
      }
      *(_WORD *)double v11 = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLTrackRunSerializer::generateConfig()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    a1[4].__r_.__value_.__l.__size_ *= 16;
  }
  a1[4].__r_.__value_.__s.__data_[21] = sub_10143E648();
  uint64_t result = sub_10143E850();
  a1[4].__r_.__value_.__s.__data_[22] = result;
  a1[4].__r_.__value_.__r.__words[0] = 0x4122750000000000;
  a1[4].__r_.__value_.__s.__data_[20] = 0;
  return result;
}

void sub_10143ECF0(_Unwind_Exception *a1)
{
  sub_1004284E0(v1);
  _Unwind_Resume(a1);
}

void *sub_10143ED30(void *a1)
{
  sub_10143EA70(&v3);
  sub_10120E0E0((uint64_t)a1, (long long *)&v3);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  *a1 = &off_1023262B0;
  return a1;
}

void sub_10143EDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10143EDE4(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void *sub_10143EE28(void *a1, uint64_t a2, void *a3)
{
  a1[1] = a2;
  a1[2] = a3;
  *a1 = off_102326308;
  CLConnection::setDefaultMessageHandler();
  char v5 = objc_alloc_init(CLDaemonSpringTrackingClientAdapter);
  a1[4] = v5;
  [(CLDaemonSpringTrackingClientAdapter *)v5 setValid:1];
  id v6 = [[objc_msgSend(a3, "vendor") proxyForService:@"CLSpringTrackingNotifier"];
  a1[3] = v6;
  [v6 registerDelegate:a1[4] inSilo:[a3 silo]];
  return a1;
}

void sub_10143EF2C(_Unwind_Exception *a1)
{
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void sub_10143EF40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::string v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  char v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_10143EFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10143EFD0(uint64_t a1)
{
  *(void *)a1 = off_102326308;

  [*(id *)(a1 + 32) setValid:0];
  *(void *)(a1 + 32) = 0;

  return sub_100426880((void *)a1);
}

void sub_10143F048(uint64_t a1)
{
  sub_10143EFD0(a1);

  operator delete();
}

void sub_10143F080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 58) {
      goto LABEL_7;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 58)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "SpringTracking/kCLConnectionMessageSpringTrackerIsTracking", 0x3AuLL))
  {
    double v18 = *(CLConnectionMessage **)a2;
    uint64_t v19 = *(std::__shared_weak_count **)(a2 + 8);
    void v23[6] = v18;
    v23[7] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10143F474(a1);
    goto LABEL_52;
  }
LABEL_7:
  id v6 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v7 = *((char *)v6 + 23);
  if (v7 < 0)
  {
    if (v6[1] != 53) {
      goto LABEL_13;
    }
    id v6 = (void *)*v6;
  }
  else if (v7 != 53)
  {
    goto LABEL_13;
  }
  if (!memcmp(v6, "SpringTracking/kCLConnectionMessageSpringTrackerStart", 0x35uLL))
  {
    long long v20 = *(CLConnectionMessage **)a2;
    uint64_t v19 = *(std::__shared_weak_count **)(a2 + 8);
    _DWORD v23[4] = v20;
    v23[5] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10143F5B8(a1);
    goto LABEL_52;
  }
LABEL_13:
  uint64_t v8 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] != 52) {
      goto LABEL_19;
    }
    uint64_t v8 = (void *)*v8;
  }
  else if (v9 != 52)
  {
    goto LABEL_19;
  }
  if (!memcmp(v8, "SpringTracking/kCLConnectionMessageSpringTrackerStop", 0x34uLL))
  {
    unint64_t v21 = *(CLConnectionMessage **)a2;
    uint64_t v19 = *(std::__shared_weak_count **)(a2 + 8);
    v23[2] = v21;
    v23[3] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10143F94C(a1);
    goto LABEL_52;
  }
LABEL_19:
  uint64_t v10 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v11 = *((char *)v10 + 23);
  if (v11 < 0)
  {
    if (v10[1] != 53)
    {
LABEL_25:
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102326378);
      }
      uint64_t v12 = qword_102419378;
      if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_FAULT))
      {
        uint64_t v13 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v13 + 23) >= 0) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = *(void *)v13;
        }
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419370 != -1) {
          dispatch_once(&qword_102419370, &stru_102326378);
        }
        uint64_t v15 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v15 + 23) >= 0) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = *(void *)v15;
        }
        int v24 = 136446210;
        uint64_t v25 = v16;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLDaemonSpringTrackingClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      return;
    }
    uint64_t v10 = (void *)*v10;
  }
  else if (v11 != 53)
  {
    goto LABEL_25;
  }
  if (memcmp(v10, "SpringTracking/kCLConnectionMessageSpringTrackerQuery", 0x35uLL)) {
    goto LABEL_25;
  }
  double v22 = *(CLConnectionMessage **)a2;
  uint64_t v19 = *(std::__shared_weak_count **)(a2 + 8);
  v23[0] = v22;
  v23[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10143FCE0(a1, (uint64_t)v23);
LABEL_52:
  if (v19)
  {
    sub_1000DB0A0(v19);
  }
}

void sub_10143F448(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10143F474(uint64_t a1)
{
  unsigned int v5 = 0;
  if (sub_101440074(a1, (int *)&v5))
  {
    sub_1000E1294((uint64_t *)v4, (uint64_t)"CLDaemonClient.SpringTrackingNotifierIsTracking", 0);
    id v2 = [*(id *)(a1 + 24) syncgetIsTracking];
    uint64_t v6 = CMReturnCode;
    int v7 = +[NSNumber numberWithBool:v2];
    +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    CLConnectionMessage::sendReply();
    return sub_1000E1098(v4);
  }
  else
  {
    uint64_t v8 = CMErrorMessage;
    int v9 = +[NSNumber numberWithUnsignedInt:v5];
    +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    return (id *)CLConnectionMessage::sendReply();
  }
}

void sub_10143F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

id *sub_10143F5B8(uint64_t a1)
{
  unsigned int v17 = 0;
  if (sub_101440074(a1, (int *)&v17))
  {
    sub_1000E1294((uint64_t *)v16, (uint64_t)"CLDaemonClient.SpringTrackingNotifierStart", 0);
    id v2 = [*(id *)(a1 + 24) syncgetStartTracking];
    uint64_t v33 = CMErrorMessage;
    int v34 = +[NSNumber numberWithUnsignedInt:v2];
    +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    CLConnectionMessage::sendReply();
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102326378);
    }
    std::string v3 = qword_102419378;
    if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      int v4 = SBYTE3(v22);
      unsigned int v5 = *(unsigned char **)__p;
      int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      int v7 = __p;
      *(_DWORD *)std::string buf = 136315906;
      if (v4 < 0) {
        int v7 = v5;
      }
      uint64_t v26 = v7;
      __int16 v27 = 1024;
      int v28 = RemotePid;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 1024;
      int v32 = (int)v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tracking START, %s, %d, %p, %d", buf, 0x22u);
      if (SBYTE3(v22) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102326378);
      }
      CLConnection::getName((uint64_t *)v14, *(CLConnection **)(a1 + 8));
      int v9 = v15;
      uint64_t v10 = (void **)v14[0];
      int v11 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      uint64_t v12 = v14;
      *(_DWORD *)long long __p = 136315906;
      if (v9 < 0) {
        uint64_t v12 = v10;
      }
      *(void *)&__p[4] = v12;
      __int16 v19 = 1024;
      int v20 = v11;
      __int16 v21 = 2048;
      uint64_t v22 = a1;
      __int16 v23 = 1024;
      int v24 = (int)v2;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerStart(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return sub_1000E1098(v16);
  }
  else
  {
    uint64_t v35 = CMErrorMessage;
    __int16 v36 = +[NSNumber numberWithUnsignedInt:v17];
    +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    return (id *)CLConnectionMessage::sendReply();
  }
}

void sub_10143F8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

id *sub_10143F94C(uint64_t a1)
{
  unsigned int v17 = 0;
  if (sub_101440074(a1, (int *)&v17))
  {
    sub_1000E1294((uint64_t *)v16, (uint64_t)"CLDaemonClient.SpringTrackingNotifierStop", 0);
    id v2 = [*(id *)(a1 + 24) syncgetStopTracking];
    uint64_t v33 = CMErrorMessage;
    int v34 = +[NSNumber numberWithUnsignedInt:v2];
    +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    CLConnectionMessage::sendReply();
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102326378);
    }
    std::string v3 = qword_102419378;
    if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      int v4 = SBYTE3(v22);
      unsigned int v5 = *(unsigned char **)__p;
      int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      int v7 = __p;
      *(_DWORD *)std::string buf = 136315906;
      if (v4 < 0) {
        int v7 = v5;
      }
      uint64_t v26 = v7;
      __int16 v27 = 1024;
      int v28 = RemotePid;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 1024;
      int v32 = (int)v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tracking STOP, %s, %d, %p, %d", buf, 0x22u);
      if (SBYTE3(v22) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102326378);
      }
      CLConnection::getName((uint64_t *)v14, *(CLConnection **)(a1 + 8));
      int v9 = v15;
      uint64_t v10 = (void **)v14[0];
      int v11 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      uint64_t v12 = v14;
      *(_DWORD *)long long __p = 136315906;
      if (v9 < 0) {
        uint64_t v12 = v10;
      }
      *(void *)&__p[4] = v12;
      __int16 v19 = 1024;
      int v20 = v11;
      __int16 v21 = 2048;
      uint64_t v22 = a1;
      __int16 v23 = 1024;
      int v24 = (int)v2;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerStop(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return sub_1000E1098(v16);
  }
  else
  {
    uint64_t v35 = CMErrorMessage;
    __int16 v36 = +[NSNumber numberWithUnsignedInt:v17];
    +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    return (id *)CLConnectionMessage::sendReply();
  }
}

void sub_10143FC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

id *sub_10143FCE0(uint64_t a1, uint64_t a2)
{
  unsigned int v18 = 0;
  if (sub_101440074(a1, (int *)&v18))
  {
    uint64_t v4 = objc_opt_class();
    unsigned int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v5);
    if (DictionaryOfClasses
      && (int v7 = DictionaryOfClasses,
          uint64_t v8 = CMSpringKeyDataRecord,
          [DictionaryOfClasses objectForKeyedSubscript:CMSpringKeyDataRecord]))
    {
      sub_1000E1294((uint64_t *)v17, (uint64_t)"CLDaemonClient.SpringTrackingNotifierQuery", 0);
      [objc_msgSend(v7, "objectForKeyedSubscript:", v8) convertToSpringTrackerEntry:buf];
      int v9 = *(void **)(a1 + 24);
      v19[0] = buf[0];
      v19[1] = buf[1];
      v19[2] = buf[2];
      uint64_t v20 = v24;
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768;
      double v15[2] = sub_101440128;
      v15[3] = &unk_102326330;
      int v11 = *(CLConnectionMessage **)a2;
      uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
      v15[4] = a1;
      void v15[5] = v11;
      uint64_t v16 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v9 querySinceRecord:v19 withReply:v15];
      if (v16) {
        sub_1000DB0A0(v16);
      }
      return sub_1000E1098(v17);
    }
    else
    {
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102326378);
      }
      uint64_t v13 = qword_102419378;
      if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Error in query request.", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419370 != -1) {
          dispatch_once(&qword_102419370, &stru_102326378);
        }
        LOWORD(v17[0]) = 0;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v21 = CMErrorMessage;
      uint64_t v22 = &off_102395030;
      +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      return (id *)CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v25 = CMErrorMessage;
    uint64_t v26 = +[NSNumber numberWithUnsignedInt:v18];
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    return (id *)CLConnectionMessage::sendReply();
  }
}

void sub_101440044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, ...)
{
  va_start(va, a11);
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101440074(uint64_t a1, int *a2)
{
  sub_100134750(&__p, "com.apple.locationd.activity");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (v9 < 0)
  {
    operator delete(__p);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    int v7 = 105;
    goto LABEL_8;
  }
  if ((isEntitled & 1) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (sub_10133B680(*(void *)(a1 + 16))) {
    return 1;
  }
  int v7 = 104;
LABEL_8:
  uint64_t result = 0;
  *a2 = v7;
  return result;
}

void sub_10144010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101440128(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = &__NSArray0__struct;
  }
  uint64_t v35 = CMSpringKeyDataArray;
  __int16 v36 = v4;
  +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
  sub_100103240();
  if (sub_10073E30C() && [a2 count])
  {
    if (qword_102419370 != -1) {
      dispatch_once(&qword_102419370, &stru_102326378);
    }
    char v5 = qword_102419378;
    if (os_log_type_enabled((os_log_t)qword_102419378, OS_LOG_TYPE_INFO))
    {
      id v6 = [a2 lastObject];
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(v3 + 8));
      int v7 = SHIBYTE(v23);
      uint64_t v8 = *(unsigned char **)__p;
      int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(v3 + 8));
      uint64_t v10 = __p;
      *(_DWORD *)std::string buf = 138413058;
      if (v7 < 0) {
        uint64_t v10 = v8;
      }
      id v28 = v6;
      __int16 v29 = 2080;
      uint64_t v30 = v10;
      __int16 v31 = 1024;
      int v32 = RemotePid;
      __int16 v33 = 2048;
      uint64_t v34 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@, %s, %d, %p", buf, 0x26u);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419370 != -1) {
        dispatch_once(&qword_102419370, &stru_102326378);
      }
      id v12 = [a2 lastObject];
      CLConnection::getName((uint64_t *)v18, *(CLConnection **)(v3 + 8));
      int v13 = v19;
      uint64_t v14 = (void **)v18[0];
      int v15 = CLConnection::getRemotePid(*(CLConnection **)(v3 + 8));
      uint64_t v16 = v18;
      *(_DWORD *)long long __p = 138413058;
      if (v13 < 0) {
        uint64_t v16 = v14;
      }
      *(void *)&__p[4] = v12;
      __int16 v21 = 2080;
      uint64_t v22 = v16;
      __int16 v23 = 1024;
      int v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v3;
      unsigned int v17 = (char *)_os_log_send_and_compose_impl();
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonSpringTrackingClient::handleMessageSpringTrackerQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  return CLConnectionMessage::sendReply();
}

void sub_10144042C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101440464(id a1)
{
  qword_102419378 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

uint64_t sub_101440494(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100538CA8(a1, a3);
  *(void *)uint64_t v5 = off_1023263A8;
  *(void *)(v5 + 200) = off_102326410;
  sub_100E16F9C(v5 + 200, *(unsigned __int8 *)(v5 + 8), 0);
  *(void *)a1 = off_1023263A8;
  *(void *)(a1 + 200) = off_102326410;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v6 = sub_100A08A84();
  double v12 = sub_100A09AFC(v6, (double *)(a1 + 24));
  sub_100B06E80(a1 + 296, &v12, a1 + 16, a2);
  sub_100103240();
  int v7 = sub_1001B7C64();
  double v8 = 0.25;
  if (v7) {
    double v8 = 0.5;
  }
  *(double *)(a1 + 920) = v8;
  *(_OWORD *)(a1 + 928) = xmmword_101E0A2C0;
  sub_100103240();
  int v9 = sub_1001B7C64();
  float v10 = 0.00035;
  if (v9) {
    float v10 = 0.00015;
  }
  *(float *)(a1 + 944) = v10;
  return a1;
}

void sub_1014405B0(_Unwind_Exception *a1)
{
  sub_1005395A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1014405E8(void *a1)
{
  *a1 = off_1023263A8;
  id v2 = a1 + 25;
  a1[25] = off_102326410;
  sub_101440ACC(a1);
  sub_100B06F10(a1 + 37);
  sub_100E16FDC(v2);

  return sub_1005395A0((uint64_t)a1);
}

uint64_t sub_101440674(uint64_t a1)
{
  return sub_1014405E8((void *)(a1 - 200));
}

void sub_10144067C(void *a1)
{
  sub_1014405E8(a1);

  operator delete();
}

void sub_1014406B4(uint64_t a1)
{
  sub_1014405E8((void *)(a1 - 200));

  operator delete();
}

void sub_1014406F0(uint64_t a1)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_102326478);
  }
  id v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    sub_1000D3E78();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = sub_1009E9388();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%{public}s is enabling power conservative device motion for parallax.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_102326478);
    }
    sub_1000D3E78();
    LODWORD(v6[0]) = 136446210;
    *(void *)((char *)v6 + 4) = sub_1009E9388();
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::start()", "%s\n", v3);
    if (v3 != buf) {
      free(v3);
    }
  }
  sub_100B06F54(a1 + 296);
  *(void *)std::string buf = 0;
  unint64_t v5 = 0xBFF0000000000000;
  v6[0] = 0.0;
  double v4 = sub_1000D3E50();
  sub_100B0889C(a1 + 296, (double *)buf, v6, (double *)&v5, &v4);
  operator new();
}

void sub_101440A9C()
{
}

uint64_t sub_101440ACC(void *a1)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_102326478);
  }
  id v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    sub_1000D3E78();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v8 = sub_1009E9388();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%{public}s is disabling power conservation for parallax.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_102326478);
    }
    sub_1000D3E78();
    sub_1009E9388();
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::stop()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_100E17364((uint64_t)(a1 + 25));
  sub_100E17034(a1 + 25);
  if (a1[36])
  {
    uint64_t v3 = sub_100A08A84();
    sub_1009D26C4(v3, 0, a1[36]);
    uint64_t v4 = a1[36];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    a1[36] = 0;
  }
  sub_100E1709C(a1 + 25);
  uint64_t result = a1[35];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    a1[35] = 0;
  }
  return result;
}

BOOL sub_101440D20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 280);
  unint64_t v2 = *(void *)(v1 + 80);
  if (v2 < *(void *)(v1 + 24)) {
    return 1;
  }
  float v4 = 0.0;
  float v5 = 0.0;
  if (v2 >= 2)
  {
    float v6 = (float)((float)v2 * *(float *)(v1 + 36)) - (float)(*(float *)(v1 + 32) * *(float *)(v1 + 32));
    float v5 = 0.0;
    if (v6 >= 0.0) {
      float v5 = v6 / (float)((v2 - 1) * v2);
    }
  }
  unint64_t v7 = *(void *)(v1 + 152);
  if (v7 >= 2)
  {
    float v8 = (float)((float)v7 * *(float *)(v1 + 108)) - (float)(*(float *)(v1 + 104) * *(float *)(v1 + 104));
    if (v8 >= 0.0) {
      float v4 = v8 / (float)((v7 - 1) * v7);
    }
  }
  unint64_t v9 = *(void *)(v1 + 224);
  float v10 = 0.0;
  if (v9 >= 2)
  {
    float v11 = (float)((float)v9 * *(float *)(v1 + 180)) - (float)(*(float *)(v1 + 176) * *(float *)(v1 + 176));
    if (v11 >= 0.0) {
      float v10 = v11 / (float)((v9 - 1) * v9);
    }
  }
  if (v5 >= v4) {
    float v4 = v5;
  }
  if (v4 < v10) {
    float v4 = v10;
  }
  return v4 > *(float *)(a1 + 944);
}

void sub_101440E04(float32x2_t *a1, uint64_t a2)
{
  double v4 = *(float *)(a2 + 8);
  float v5 = a1 + 39;
  uint64_t v6 = (uint64_t)&a1[37];
  *(double *)v15.i64 = *(float *)(a2 + 12);
  double v16 = *(float *)(a2 + 16);
  *(double *)unsigned int v17 = v4;
  sub_100B07064((uint64_t)&a1[37], (float64x2_t *)v17, (uint64_t)&v15, &v16, (void *)a2);
  *(float32x2_t *)v7.f32 = a1[59];
  if (*(double *)v7.i64 <= 0.0)
  {
    float32x2_t v8 = 0;
    float v9 = 0.0;
  }
  else
  {
    sub_100B07F84((double *)v17, (double *)v5);
    float32x4_t v7 = (float32x4_t)vsubq_f64(vcvtq_f64_f32(a1[60]), *(float64x2_t *)v17);
    float32x2_t v8 = vcvt_f32_f64((float64x2_t)v7);
    *(double *)v7.i64 = a1[61].f32[0] - *(double *)&v17[16];
    float v9 = *(double *)v7.i64;
  }
  __int32 v10 = a1[57].i32[1];
  *(void *)&v17[16] = 0;
  *(_OWORD *)unsigned int v17 = 0xBFF0000000000000;
  uint64_t v11 = *(uint64_t *)((char *)&v5[17] + 4);
  sub_100B9BEAC((float32x4_t *)&v17[8], v7);
  memset(&v17[24], 0, 36);
  *(_OWORD *)&v17[60] = xmmword_101D1F280;
  uint64_t v18 = 0x1FF00000000;
  int v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  *(void *)unsigned int v17 = *(void *)a2;
  float32x4_t v12 = *(float32x4_t *)v5[2].f32;
  float32x4_t v15 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v5->f32), (float64x2_t)v12);
  sub_100B9BEAC(&v15, v12);
  *(float32x4_t *)&v17[8] = v15;
  *(float32x2_t *)&v17[24] = v8;
  *(float *)&v17[32] = v9;
  *(void *)&v17[36] = v11;
  *(_DWORD *)&v17[44] = v10;
  BYTE4(v18) = -1;
  *(_OWORD *)&v17[48] = xmmword_101D1F290;
  *(_DWORD *)&v17[64] = -1082130432;
  __int16 v13 = HIWORD(v18) & 0xFFE7;
  if (a1[31].i8[4]) {
    __int16 v13 = HIWORD(v18) & 0xFFE7 | 0x10;
  }
  HIWORD(v18) = v13;
  if (sub_100B06F4C(v6)) {
    __int16 v14 = 256;
  }
  else {
    __int16 v14 = 0;
  }
  HIWORD(v18) = HIWORD(v18) & 0xFEFF | v14;
  int v19 = 2;
  uint64_t v21 = 0;
  char v20 = 0;
  sub_10053987C((uint64_t)a1, (uint64_t)v17);
}

void sub_101441004(uint64_t a1, uint64_t a2)
{
}

double sub_10144100C(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100B07B6C(a1 + 296, a2, a3);
}

double sub_101441014(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100B07B6C(a1 + 96, a2, a3);
}

void sub_10144101C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 280);
  sub_1001A44F4(v4 + 16, (float *)(a2 + 8));
  sub_1001A44F4(v4 + 88, (float *)(a2 + 12));
  sub_1001A44F4(v4 + 160, (float *)(a2 + 16));
  if (sub_101440D20(a1))
  {
    *(void *)(a1 + 936) = *(void *)a2;
    if (*(void *)(a1 + 48) == 2) {
      return;
    }
    uint64_t v5 = sub_1000D3E78();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1014411E8;
    _DWORD v10[3] = &unk_1022A3020;
    v10[4] = a1;
    uint64_t v6 = v10;
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 == 1)
  {
    if (*(double *)a2 <= *(double *)(a1 + 936) + *(double *)(a1 + 928)) {
      return;
    }
    uint64_t v5 = sub_1000D3E78();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_101441334;
    void v8[3] = &unk_1022A3020;
    double v8[4] = a1;
    uint64_t v6 = v8;
    goto LABEL_10;
  }
  if (v7 == 2 && *(double *)a2 > *(double *)(a1 + 936) + *(double *)(a1 + 920))
  {
    uint64_t v5 = sub_1000D3E78();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1014412F0;
    void v9[3] = &unk_1022A3020;
    v9[4] = a1;
    uint64_t v6 = v9;
LABEL_10:
    sub_1009E8F7C(v5, (uint64_t)v6);
  }
}

uint64_t sub_1014411E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100E171B4(v1 + 200);
  if (!*(void *)(v1 + 288)) {
    operator new();
  }
  sub_100E172D8(v1 + 200);
  uint64_t v3 = 2;
  return sub_10053A1D0(v1, &v3);
}

void sub_1014412CC()
{
}

uint64_t sub_1014412F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100E17034((void *)(v1 + 200));
  uint64_t v3 = 1;
  return sub_10053A1D0(v1, &v3);
}

uint64_t sub_101441334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_102326478);
  }
  unint64_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_102326478);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::feedAccelerometerData(const CLAccelerometer::Sample *)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(void *)(v1 + 288))
  {
    uint64_t v3 = sub_100A08A84();
    sub_1009D26C4(v3, 0, *(void *)(v1 + 288));
    uint64_t v4 = *(void *)(v1 + 288);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(v1 + 288) = 0;
  }
  sub_100E17364(v1 + 200);
  *(void *)std::string buf = 0;
  return sub_10053A1D0(v1, buf);
}

void sub_101441528(uint64_t a1, uint64_t a2)
{
}

void sub_101441530(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

double sub_101441560(uint64_t a1, double a2, double a3)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = (unint64_t)(a2 * 100.0 + 1.0);
  *(void *)&double result = 0x26200000000;
  *(void *)(a1 + 88) = 0x26200000000;
  *(void *)(a1 + 7416) = 0x26200000000;
  *(void *)(a1 + 14744) = 0x26200000000;
  *(void *)(a1 + 22072) = 0x5100000000;
  *(void *)(a1 + 23052) = 0x5100000000;
  *(void *)(a1 + 24032) = 0x26200000000;
  return result;
}

uint64_t sub_1014415C8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = (unsigned __int16 *)(a1 + 22072);
  sub_100659A48((unsigned __int16 *)(a1 + 22072), a2);
  sub_100659A48((unsigned __int16 *)(a1 + 23052), a2 + 12);
  float32x2_t v8 = sub_100659A48((unsigned __int16 *)(a1 + 24032), a2 + 12);
  unsigned __int32 v9 = sub_101441750((uint64_t)v8, v7).u32[0];
  unsigned int v21 = v10;
  unsigned __int32 v22 = v9;
  float v12 = v11;
  unint64_t v26 = __PAIR64__(v10, v9);
  float v27 = v11;
  v25[0] = sub_101441750(v13, (unsigned __int16 *)(a1 + 23052)).u32[0];
  v25[1] = v14;
  v25[2] = v15;
  double v16 = vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 48));
  if (v16 < 0.001) {
    double v16 = 0.001;
  }
  *(float *)&double v16 = v16;
  float v17 = (float)(v12 - *(float *)(a1 + 72)) / *(float *)&v16;
  float32x2_t v23 = vdiv_f32(vsub_f32((float32x2_t)__PAIR64__(v21, v22), *(float32x2_t *)(a1 + 64)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v16, 0));
  float v24 = v17;
  sub_100659A48((unsigned __int16 *)(a1 + 88), (uint64_t)&v26);
  sub_100659A48((unsigned __int16 *)(a1 + 7416), (uint64_t)v25);
  sub_100659A48((unsigned __int16 *)(a1 + 14744), (uint64_t)&v23);
  *(void *)(a1 + 64) = v26;
  *(float *)(a1 + 72) = v27;
  double v18 = *(double *)(a2 + 56);
  *(double *)(a1 + 48) = v18;
  if (*(void *)(a1 + 80) < (unint64_t)*(unsigned __int16 *)(a1 + 90)
    && v18 - *(double *)(a1 + 56) > *(double *)(a1 + 40))
  {
    sub_101441828(a1);
    *(_DWORD *)a1 = v19;
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(float *)(a1 + 16) = sub_101441B3C(a1);
  }
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 24) = a4;
  return 1;
}

float32x2_t sub_101441750(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v3 = 0;
  float32x2_t v4 = 0;
  float v5 = 0.0;
  unint64_t v6 = 80;
  do
  {
    uint64_t v7 = (float32x2_t *)sub_100659D10(a2, v3);
    float32x2_t v8 = (float32x2_t *)sub_100659D10(a2, v6);
    float v9 = flt_101E0A328[v6];
    float32x2_t v4 = vadd_f32(v4, vmul_n_f32(vadd_f32(*v7, *v8), v9));
    float v5 = v5 + (float)((float)(v7[1].f32[0] + v8[1].f32[0]) * v9);
    ++v3;
    --v6;
  }
  while (v3 != 40);
  return vadd_f32(v4, vmul_f32(*(float32x2_t *)sub_100659D10(a2, 0x28uLL), 0));
}

void sub_101441828(uint64_t a1)
{
  int v68 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  unint64_t v64 = 0;
  float v65 = 0.0;
  unint64_t v1 = *(unsigned __int16 *)(a1 + 90);
  unint64_t v2 = v1 - 1;
  unint64_t v3 = *(void *)(a1 + 80);
  BOOL v5 = v1 >= v3;
  unint64_t v4 = v1 - v3;
  BOOL v5 = v5 && v2 >= v4;
  if (v5)
  {
    uint64_t v7 = (unsigned __int16 *)(a1 + 88);
    float32x2_t v8 = (unsigned __int16 *)(a1 + 14744);
    float v9 = (unsigned __int16 *)(a1 + 7416);
    float v10 = 0.0;
    float v11 = 0.0;
    float v12 = 0.0;
    do
    {
      uint64_t v13 = sub_100659D10(v7, v2);
      float v15 = *(float *)(v13 + 4);
      float v14 = *(float *)(v13 + 8);
      float v16 = *(float *)v13;
      float v17 = -*(float *)v13;
      LODWORD(v61) = 0;
      *((float *)&v61 + 1) = v14;
      *((float *)&v61 + 2) = -v15;
      *((float *)&v61 + 3) = -v14;
      LODWORD(v62) = 0;
      *(void *)((char *)&v62 + 4) = __PAIR64__(LODWORD(v15), LODWORD(v16));
      *((float *)&v62 + 3) = v17;
      int v63 = 0;
      uint64_t v18 = sub_100659D10(v8, v2);
      float v20 = *(float *)(v18 + 4);
      float v19 = *(float *)(v18 + 8);
      float v21 = *(float *)v18;
      float v22 = -*(float *)v18;
      v60[0] = 0;
      *(float *)&v60[1] = v19;
      *(float *)&double v60[2] = -v20;
      *(float *)&v60[3] = -v19;
      v60[4] = 0;
      *(float *)&v60[5] = v21;
      *(float *)&v60[6] = v20;
      *(float *)&v60[7] = v22;
      v60[8] = 0;
      sub_100B5D33C((uint64_t)&v61, (uint64_t)&v61, (uint64_t)&v55);
      for (unint64_t i = 0; i != 9; ++i)
        *((float *)&v55 + i) = sub_10080FD50((uint64_t)v60, i) + *((float *)&v55 + i);
      v58[0] = v55;
      v58[1] = v56;
      int v59 = v57;
      v50[0] = v55;
      v50[1] = v56;
      int v51 = v57;
      sub_1004E2FA0((uint64_t)v50, (uint64_t)&v52);
      sub_100B5D33C((uint64_t)&v52, (uint64_t)v58, (uint64_t)v49);
      for (unint64_t j = 0; j != 9; ++j)
        *((float *)&v66 + j) = sub_10080FD50((uint64_t)v49, j) + *((float *)&v66 + j);
      __int16 v25 = (float *)sub_100659D10(v9, v2);
      float v12 = v12 + sub_1004E301C((uint64_t)&v52, v25);
      float v11 = v11 + v26;
      float v10 = v27 + v10;
      unint64_t v64 = __PAIR64__(LODWORD(v11), LODWORD(v12));
      float v65 = v10;
      --v2;
      unint64_t v28 = *(unsigned __int16 *)(a1 + 90);
      unint64_t v29 = *(void *)(a1 + 80);
      BOOL v5 = v28 >= v29;
      unint64_t v30 = v28 - v29;
    }
    while (v5 && v2 >= v30);
  }
  v47[0] = v66;
  v47[1] = v67;
  int v48 = v68;
  sub_10080FF2C((uint64_t)v47, (uint64_t)&v61);
  *(void *)&v58[0] = __PAIR64__(LODWORD(v32), LODWORD(v34));
  *((float *)v58 + 2) = v33;
  if (fabsf(v34) >= 0.001 && fabsf(v32) >= 0.001 && fabsf(v33) >= 0.001)
  {
    v45[0] = v61;
    v45[1] = v62;
    int v46 = v63;
    sub_1004E2FA0((uint64_t)v45, (uint64_t)v60);
    unint64_t v35 = 0;
    float v52 = sub_1004E301C((uint64_t)v60, (float *)&v64);
    int v53 = v36;
    int v54 = v37;
    do
    {
      float v38 = sub_1004E30E4((uint64_t)v58, v35);
      double v39 = (float *)sub_1004E4930((uint64_t)&v52, v35);
      *double v39 = *v39 / v38;
      ++v35;
    }
    while (v35 != 3);
    float v40 = sub_1004E301C((uint64_t)&v61, &v52);
    uint64_t v41 = 0;
    float v52 = v40;
    int v53 = v42;
    int v54 = v43;
    float v44 = 0.0;
    do
    {
      float v44 = v44 + (float)(*(float *)((char *)&v52 + v41) * *(float *)((char *)&v52 + v41));
      v41 += 4;
    }
    while (v41 != 12);
  }
}

float sub_101441B3C(uint64_t a1)
{
  unint64_t v1 = (unsigned __int16 *)(a1 + 24032);
  uint64_t v2 = *(unsigned int *)(a1 + 24036);
  if (v2)
  {
    unint64_t v3 = 0;
    float v5 = 0.0;
    float v6 = 0.0;
    float v7 = 0.0;
    float v8 = 0.0;
    do
    {
      float v9 = (float *)sub_100659D10(v1, v3);
      float v11 = *v9;
      float v10 = v9[1];
      float v12 = v9[2];
      float v4 = 6.28318531 / (double)(unint64_t)(v2 - 1);
      float v13 = cosf(v4 * (float)(int)v3) * -0.46 + 0.54;
      float v8 = v8 + (float)((float)(v11 * v13) * (float)(v11 * v13));
      float v7 = v7 + (float)((float)(v10 * v13) * (float)(v10 * v13));
      float v6 = v6 + (float)((float)(v12 * v13) * (float)(v12 * v13));
      float v5 = v5 + v13;
      ++v3;
    }
    while (v2 != v3);
    float v14 = (float)(v8 + v7) + v6;
  }
  else
  {
    float v5 = 0.0;
    float v14 = 0.0;
  }
  return sqrtf(v14) / v5;
}

uint64_t sub_101441C50(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  *(void *)a1 = off_1023264A8;
  *(void *)(a1 + 8) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = *a3;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = *a4;
  uint64_t v8 = a4[1];
  *(void *)(a1 + 48) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = *a5;
  uint64_t v9 = a5[1];
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0x40C5180000000000;
  float v10 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(void *)(a1 + 624) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  sub_1000C7F88(buf);
  char v11 = sub_1000A699C(*(uint64_t *)&buf[0], "MaxTripDuration", (void *)(a1 + 72));
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if ((v11 & 1) == 0) {
    *float v10 = 0x40C5180000000000;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102326550);
  }
  float v12 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *v10;
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLPolicyTrip: duration,%.2fs", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326550);
    }
    float v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPolicyTrip::CLPolicyTrip(std::shared_ptr<CLPolicyTripInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLHarvestMonitorInterface::Gps>, std::shared_ptr<CLHarvestPolicyInterface::Proactive>)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return a1;
}

void sub_101441F40(_Unwind_Exception *a1)
{
  sub_1000D80C4(v3);
  sub_100F89374(v2 + 8);
  float v5 = (std::__shared_weak_count *)v1[8];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[6];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[4];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[2];
  if (v8) {
    sub_1000DB0A0(v8);
  }
  _Unwind_Resume(a1);
}

void sub_101441FB0(uint64_t a1)
{
  CFUUIDRef v2 = CFUUIDCreate(0);
  CFStringRef v3 = CFUUIDCreateString(0, v2);
  sub_1000FECE0(v3, (uint64_t)buf);
  float v4 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)float v4 = *(_OWORD *)buf;
  *(void *)(a1 + 104) = *(void *)&buf[16];
  CFRelease(v2);
  CFRelease(v3);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40));
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102326550);
  }
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v7 = *v4;
    }
    double v8 = *(double *)(v5 + 76);
    double v9 = v8 - *(double *)(a1 + 80);
    double v10 = v8 - *(double *)(a1 + 600);
    int v11 = *(unsigned __int8 *)(a1 + 632);
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2048;
    double v31 = v9;
    __int16 v32 = 2048;
    double v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "using trip id %s at time %.2fs (previous trip duration %.3fs and gap %.3fs) or triggerNewTripIdByProactive,%d", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326550);
    }
    if (*(char *)(a1 + 111) < 0) {
      float v4 = (void **)*v4;
    }
    double v16 = *(double *)(v5 + 76);
    double v17 = v16 - *(double *)(a1 + 80);
    double v18 = v16 - *(double *)(a1 + 600);
    int v19 = *(unsigned __int8 *)(a1 + 632);
    *(_DWORD *)float v21 = 136316162;
    *(void *)&v21[4] = v4;
    __int16 v22 = 2048;
    double v23 = v16;
    __int16 v24 = 2048;
    double v25 = v17;
    __int16 v26 = 2048;
    double v27 = v18;
    __int16 v28 = 1024;
    int v29 = v19;
    float v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPolicyTrip::createNewTripId()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  *(void *)(a1 + 80) = *(void *)(v5 + 76);
  if (*(unsigned char *)(a1 + 632)) {
    *(unsigned char *)(a1 + 632) = 0;
  }
  memset(buf, 0, sizeof(buf));
  if ((*(unsigned int (**)(void, uint8_t *, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), buf, 0))
  {
    uint64_t v12 = *(void *)buf;
    if (*(void *)buf != *(void *)&buf[8])
    {
      if (**(unsigned char **)buf)
      {
        unsigned int v13 = *(_DWORD *)(*(void *)buf + 8);
        *(_DWORD *)(a1 + 112) = v13;
        if (v13 < 3) {
          goto LABEL_18;
        }
        if (v13 == 9)
        {
          *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_1006E744C(v12);
          uint64_t v14 = sub_1006E744C(*(uint64_t *)buf);
          goto LABEL_20;
        }
        if (v13 == 7)
        {
LABEL_18:
          *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_1006E6690(v12);
          uint64_t v14 = sub_1006E6690(*(uint64_t *)buf);
        }
        else
        {
          if (v13 - 3 <= 2)
          {
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(sub_1006E58D4(v12) + 32);
            int v15 = *(_DWORD *)(sub_1006E58D4(*(uint64_t *)buf) + 36);
            goto LABEL_21;
          }
          if (v13 == 10)
          {
            *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_1006E8278(v12);
            uint64_t v14 = sub_1006E8278(*(uint64_t *)buf);
          }
          else
          {
            if (v13 != 6)
            {
              int v15 = -1;
              *(_DWORD *)(a1 + 116) = -1;
              goto LABEL_21;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)sub_100117098(v12);
            uint64_t v14 = sub_100117098(*(uint64_t *)buf);
          }
        }
LABEL_20:
        int v15 = *(_DWORD *)(v14 + 4);
LABEL_21:
        *(_DWORD *)(a1 + 120) = v15;
      }
    }
  }
  *(unsigned char *)(a1 + 592) = 1;
  *(void *)float v21 = buf;
  sub_1000FA7C8((void ***)v21);
}

void sub_1014423C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000FA7C8((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_1014423E8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[111] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 11), *((void *)result + 12));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 88);
  *(void *)(a2 + 16) = *((void *)result + 13);
  return result;
}

BOOL sub_101442414(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (*(char *)(a1 + 111) < 0)
  {
    if (!*(void *)(a1 + 96)) {
      return 1;
    }
  }
  else if (!*(unsigned char *)(a1 + 111))
  {
    return 1;
  }
  if (*(unsigned char *)(a1 + 632)) {
    return 1;
  }
  double v4 = *(double *)(a2 + 76);
  if (v4 - a3 > 900.0 && v4 - a4 > 900.0) {
    return 1;
  }
  return v4 - *(double *)(a1 + 80) > *(double *)(a1 + 72);
}

uint64_t sub_101442478(uint64_t result, double a2)
{
  *(double *)(result + 600) = a2;
  return result;
}

uint64_t sub_101442480(uint64_t result, double a2)
{
  *(double *)(result + 608) = a2;
  return result;
}

__n128 sub_101442488(uint64_t a1)
{
  *(unsigned char *)(a1 + 181) = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 208))(*(void *)(a1 + 24));
  *(unsigned char *)(a1 + 182) = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 216))(*(void *)(a1 + 24));
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)v2;
  long long v3 = *(_OWORD *)(v2 + 48);
  long long v4 = *(_OWORD *)(v2 + 64);
  long long v5 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(a1 + 248) = v4;
  *(_OWORD *)(a1 + 232) = v3;
  *(_OWORD *)(a1 + 216) = v5;
  long long v7 = *(_OWORD *)(v2 + 96);
  long long v6 = *(_OWORD *)(v2 + 112);
  uint64_t v8 = *(void *)(v2 + 128);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(v2 + 80);
  *(void *)(a1 + 312) = v8;
  *(_OWORD *)(a1 + 296) = v6;
  *(_OWORD *)(a1 + 280) = v7;
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24));
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v9;
  long long v10 = *(_OWORD *)(v9 + 64);
  long long v12 = *(_OWORD *)(v9 + 16);
  long long v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(a1 + 384) = v10;
  *(_OWORD *)(a1 + 336) = v12;
  *(_OWORD *)(a1 + 352) = v11;
  long long v14 = *(_OWORD *)(v9 + 96);
  long long v13 = *(_OWORD *)(v9 + 112);
  long long v15 = *(_OWORD *)(v9 + 80);
  *(void *)(a1 + 448) = *(void *)(v9 + 128);
  *(_OWORD *)(a1 + 416) = v14;
  *(_OWORD *)(a1 + 432) = v13;
  *(_OWORD *)(a1 + 400) = v15;
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24));
  *(_OWORD *)(a1 + 456) = *(_OWORD *)v16;
  long long v17 = *(_OWORD *)(v16 + 64);
  long long v19 = *(_OWORD *)(v16 + 16);
  long long v18 = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(a1 + 520) = v17;
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 488) = v18;
  long long v21 = *(_OWORD *)(v16 + 96);
  __n128 result = *(__n128 *)(v16 + 112);
  long long v22 = *(_OWORD *)(v16 + 80);
  *(void *)(a1 + 584) = *(void *)(v16 + 128);
  *(_OWORD *)(a1 + 552) = v21;
  *(__n128 *)(a1 + 568) = result;
  *(_OWORD *)(a1 + 536) = v22;
  return result;
}

uint64_t sub_10144261C(uint64_t a1)
{
  uint64_t v2 = sub_101069E70();
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40)) & 1) != 0
    || ((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 128))(*(void *)(a1 + 24)) & 1) != 0
    || v2[1] && ((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24)) & 1) != 0
    || v2[2] && ((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24)) & 1) != 0)
  {
    return 1;
  }
  if (!v2[3]) {
    return 0;
  }
  long long v4 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 144);

  return v4();
}

BOOL sub_101442758(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)
      && (*sub_101069E70() || !*(unsigned char *)(a1 + 616))
      && *(double *)(a2 + 44) >= 0.0
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) & 1) != 0;
}

BOOL sub_101442810(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 112))(*(void *)(a1 + 24))
      && (*sub_101069FAC() || !*(unsigned char *)(a1 + 616))
      && *(double *)(a2 + 44) >= 0.0
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) & 1) != 0;
}

void sub_1014428CC(uint64_t a1, double *a2)
{
  if (*(_DWORD *)a2 == 1)
  {
    *(unsigned char *)(a1 + 616) = 0;
    *(void *)(a1 + 624) = 0xBFF0000000000000;
    double Current = CFAbsoluteTimeGetCurrent();
    double v8 = Current;
    double v9 = Current - a2[1] + -3.0;
    uint64_t v10 = *(void *)(a1 + 648);
    if (*(void *)(a1 + 656) == v10
      || (unint64_t v11 = *(void *)(a1 + 672),
          long long v12 = (void *)(v10 + 8 * (v11 >> 8)),
          uint64_t v13 = *v12 + 16 * v11,
          uint64_t v14 = *(void *)(v10 + (((*(void *)(a1 + 680) + v11) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (*(unsigned char *)(a1 + 680) + v11),
          v13 == v14))
    {
      double v16 = *(double *)(a1 + 80);
LABEL_29:
      double v17 = -1.0;
    }
    else
    {
      double v15 = Current + 0.001;
      double v16 = *(double *)(a1 + 80);
      while (1)
      {
        double v17 = *(double *)v13;
        if (*(double *)v13 >= v9 && v17 <= v15) {
          *(unsigned char *)(v13 + 8) = 0;
        }
        BOOL v19 = v17 > v16 && v17 < v9;
        if (v19 && *(unsigned char *)(v13 + 8)) {
          break;
        }
        v13 += 16;
        if (v13 - *v12 == 4096)
        {
          uint64_t v20 = v12[1];
          ++v12;
          uint64_t v13 = v20;
        }
        if (v13 == v14) {
          goto LABEL_29;
        }
      }
    }
    double v21 = vabdd_f64(v8, v16);
    double v22 = vabdd_f64(v8, v17);
    if (v17 <= 0.0) {
      double v23 = v21;
    }
    else {
      double v23 = v22;
    }
    if (v21 > 900.0 && v23 > 900.0) {
      *(unsigned char *)(a1 + 632) = 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326550);
    }
    __int16 v24 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = *(void *)(a1 + 80);
      int v26 = *(unsigned __int8 *)(a1 + 632);
      uint64_t v27 = *((void *)a2 + 1);
      *(_DWORD *)std::string buf = 134350848;
      *(double *)unint64_t v30 = v9;
      *(_WORD *)&v30[8] = 2050;
      *(double *)&v30[10] = v8;
      __int16 v31 = 2050;
      uint64_t v32 = v25;
      __int16 v33 = 2050;
      double v34 = v17;
      __int16 v35 = 2050;
      double v36 = v21;
      __int16 v37 = 2050;
      double v38 = v23;
      __int16 v39 = 1026;
      int v40 = v26;
      __int16 v41 = 2050;
      uint64_t v42 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "MapsHarvest,proactiveSessionEnd,start,%{public}.2fs,end,%{public}.2fs,tripTime,%{public}.2fs,lastRegularTime,%{public}.2fs,tripInterval,%{public}.2fs,lastRegularInterval,%{public}.2fs,TriggerId,%{public}d,sessionSec,%{public}.2lf", buf, 0x4Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1) {
        goto LABEL_43;
      }
      goto LABEL_45;
    }
  }
  else if (!*(_DWORD *)a2)
  {
    *(unsigned char *)(a1 + 616) = 1;
    *(CFAbsoluteTime *)(a1 + 624) = CFAbsoluteTimeGetCurrent();
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326550);
    }
    long long v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v5 = *(_DWORD *)a2;
      uint64_t v6 = *(void *)(a1 + 624);
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)unint64_t v30 = v5;
      *(_WORD *)&v30[4] = 2050;
      *(void *)&v30[6] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "MapsHarvest,proactiveSessionStart,state,%{public}d,state,%{public}.2fs", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1)
      {
LABEL_43:
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyTrip::updateProactiveLocationSession(const CLLocationProvider_Type::ProactiveLocationSessionStats &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
        return;
      }
LABEL_45:
      dispatch_once(&qword_102419560, &stru_102326550);
      goto LABEL_43;
    }
  }
}

void *sub_101442DB0(void *result, double a2)
{
  uint64_t v2 = result;
  double v6 = a2;
  long long v3 = result + 80;
  unint64_t v4 = result[85];
  if (!v4
    || *(double *)(*(void *)(result[81] + ((result[84] >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * result[84]) < a2)
  {
    char v5 = 1;
    __n128 result = (void *)sub_101442E54((uint64_t)(result + 80), &v6, &v5);
    unint64_t v4 = v2[85];
  }
  if (v4 >= 0xB5)
  {
    do
    {
      v2[85] = v4 - 1;
      __n128 result = (void *)sub_100446B90(v3, 1);
      unint64_t v4 = v2[85];
    }
    while (v4 > 0xB4);
  }
  return result;
}

uint64_t sub_101442E54(uint64_t a1, void *a2, char *a3)
{
  unint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_101443188((void **)a1);
    unint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  double v9 = (void *)(v7 + 8 * (v6 >> 8));
  uint64_t v10 = *v9 + 16 * v6;
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  if (v10 == *v9) {
    uint64_t v10 = *(v9 - 1) + 4096;
  }
  char v11 = *a3;
  *(void *)(v10 - 16) = *a2;
  *(unsigned char *)(v10 - 8) = v11;
  unint64_t v12 = v6 - 1;
  uint64_t v13 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  if (v8 == v7) {
    return 0;
  }
  else {
    return *(void *)(v7 + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12;
  }
}

uint64_t sub_101442F04(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 616))
  {
    double v4 = *(double *)(a1 + 624);
    if (v4 > 0.0 && *(double *)(a2 + 76) > v4 + 300.0)
    {
      *(unsigned char *)(a1 + 616) = 0;
      *(void *)(a1 + 624) = 0xBFF0000000000000;
    }
  }
  sub_101442DB0((void *)a1, *(double *)(a2 + 76));
  if (sub_101442414(a1, a2, *(double *)(a1 + 600), *(double *)(a1 + 608))) {
    sub_101441FB0(a1);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2) & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2), result))
  {
    __n128 v6 = sub_101442488(a1);
    uint64_t result = (*(uint64_t (**)(void, uint64_t, __n128))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1 + 80, v6);
    *(unsigned char *)(a1 + 180) = *(unsigned char *)(a1 + 616);
  }
  return result;
}

void sub_10144302C(uint64_t a1)
{
  sub_1014430E0(a1);

  operator delete();
}

uint64_t sub_101443064(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 592);
}

uint64_t sub_10144306C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_101443074(uint64_t result)
{
  if (*(char *)(result + 111) < 0)
  {
    **(unsigned char **)(result + 88) = 0;
    *(void *)(result + 96) = 0;
  }
  else
  {
    *(unsigned char *)(result + 88) = 0;
    *(unsigned char *)(result + 111) = 0;
  }
  return result;
}

uint64_t sub_101443098(uint64_t a1)
{
  return a1 + 600;
}

uint64_t sub_1014430A0(uint64_t a1)
{
  return a1 + 608;
}

uint64_t sub_1014430A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 616);
}

void sub_1014430B0(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1014430E0(uint64_t a1)
{
  *(void *)a1 = off_1023264A8;
  sub_1000D80C4((void *)(a1 + 640));
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  double v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  char v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  return a1;
}

void sub_101443188(void **a1)
{
  uint64_t v2 = a1[1];
  long long v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  __n128 v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x100)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    double v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      int v46 = a1 + 3;
      long long __p = sub_1000DA54C(v7, v11);
      int v43 = (char *)__p;
      float v44 = (char *)__p;
      double v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0x1000uLL);
      sub_1000DA434(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        __int16 v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              __int16 v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              int v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)int v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              __int16 v31 = __p;
              long long __p = v24;
              int v43 = &v24[8 * (v23 >> 2)];
              float v44 = v14;
              double v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              double v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              int v43 = v22;
              float v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        __int16 v33 = (char *)a1[1];
      }
      double v36 = *a1;
      __int16 v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      long long __p = v36;
      int v43 = v33;
      double v38 = (char *)a1[3];
      __int16 v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      float v44 = v13;
      double v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 128;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        float v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        long long __p = operator new(0x1000uLL);
        sub_10017F0B4(a1, &__p);
        double v34 = a1[2];
        long long __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        long long __p = operator new(0x1000uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 128;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    long long __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_101443450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101443538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_101E0A4A0;
  uint64_t v5 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  sub_10077B4F4(a1 + 72, a4);
  return a1;
}

void sub_10144358C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *unint64_t v1 = 0;
  if (v3) {
    sub_101AB57C0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014435AC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1014435DC(uint64_t result, long long *a2)
{
  uint64_t v2 = (uint64_t *)result;
  if (*((unsigned char *)a2 + 9) && !*(unsigned char *)(result + 41))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326570);
    }
    unint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v2[2];
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,charging,type,%ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102326570);
      }
      __n128 v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::updateChargingState(const CLWorkoutPredictorCharging &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_101444ACC(v2, 0, 0, 0);
    CFAbsoluteTimeGetCurrent();
    return sub_10077AD10((uint64_t)(v2 + 9), 1);
  }
  else
  {
    long long v3 = *a2;
    *(void *)(result + 48) = *((void *)a2 + 2);
    *(_OWORD *)(result + 32) = v3;
  }
  return result;
}

void *sub_101443828(void *result, _DWORD *a2)
{
  uint64_t v2 = result[2];
  if (v2) {
    BOOL v3 = v2 == 26;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = 0;
    if (*a2 != 1) {
      uint64_t v4 = *(void *)(result[1] + 296);
    }
    result[7] = v4;
  }
  return result;
}

uint64_t sub_10144385C(uint64_t *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102326590);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[2];
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WorkoutStopDetected,geoFence,type,%ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102326590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::didExitGeoFence()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101444ACC(a1, 0, 0, 0);
  return sub_10077AD10((uint64_t)(a1 + 9), 1);
}

BOOL sub_101443A88(double *a1)
{
  unint64_t v2 = *((void *)a1 + 2);
  BOOL v3 = v2 > 0x25;
  uint64_t v4 = (1 << v2) & 0x3000800000;
  if (!v3 && v4 != 0)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326570);
    }
    __n128 v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(*((void *)a1 + 1) + 296);
      uint64_t v8 = *((void *)a1 + 7);
      *(_DWORD *)std::string buf = 134218240;
      uint64_t v17 = v7;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Confirmed offWrist, Not triggering WorkoutStopDetected for snowsports, currentTime %f, fLastUnknownOrOffTime %f", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326570);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutStopDetector::isConfirmedOffWrist() const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  double v10 = a1[7];
  if (v10 == 0.0 || vabdd_f64(*(double *)(*((void *)a1 + 1) + 296), v10) <= 60.0) {
    return 0;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102326570);
  }
  unint64_t v11 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = *(void *)(*((void *)a1 + 1) + 296);
    uint64_t v13 = *((void *)a1 + 7);
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v17 = v12;
    __int16 v18 = 2048;
    uint64_t v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Triggering WorkoutStopDetected, currentTime %f, fLastUnknownOrOffTime %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326570);
    }
    int64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutStopDetector::isConfirmedOffWrist() const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return 1;
}

uint64_t sub_101443E30(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 64) = v2;
  if (v2 == 4)
  {
    BOOL v3 = (uint64_t *)result;
    if (*(void *)(result + 16) != 27)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102326590);
      }
      uint64_t v4 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = v3[2];
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v8 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,connectedVehicle,type,%ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102326590);
        }
        __n128 v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::updateVehicularState(const CLWorkoutPredictorVehicular &)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      sub_101444ACC(v3, 0, 0, 0);
      return sub_10077AD10((uint64_t)(v3 + 9), 1);
    }
  }
  return result;
}

uint64_t sub_101444078(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1) {
    BOOL v2 = v1 == 26;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return result;
  }
  uint64_t v3 = result;
  if (!sub_101443A88((double *)result))
  {
    if (*(_DWORD *)(v3 + 64) == 2)
    {
      unint64_t v7 = *(void *)(v3 + 16);
      char v8 = (v7 > 0x31) | (0x1BF87F77FFFEFuLL >> v7);
      BOOL v9 = v7 != 14;
      if (v8)
      {
        if (v9 | (*(void *)(v3 + 24) > 0x2DuLL) | (0x1FBFFFD5DFFFuLL >> *(void *)(v3 + 24)) & 1)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_102487C00, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(qword_102487C00))
          {
            *(_DWORD *)std::string buf = 8;
            sub_1004F7D80(qword_102487BE8, buf, 1uLL);
            __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_102487BE8, (void *)&_mh_execute_header);
            __cxa_guard_release(qword_102487C00);
          }
          __int16 v33 = 0;
          *(_OWORD *)uint64_t v25 = xmmword_101D1E250;
          *(_OWORD *)&v25[16] = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          memset(v32, 0, sizeof(v32));
          long long v34 = xmmword_101D1E250;
          uint64_t v35 = 0;
          int v36 = 0;
          v38[0] = 0;
          uint64_t v37 = 0;
          *(void *)((char *)v38 + 5) = 0;
          *(void *)((char *)&v38[1] + 6) = 0;
          char v39 = 0;
          memset(&v38[3], 0, 24);
          long long v40 = xmmword_101D1E250;
          uint64_t v41 = 0;
          int v42 = 0;
          unint64_t v43 = 0xFFEFFFFFFFFFFFFFLL;
          int v54 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          int v49 = 0;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          memset(v53, 0, sizeof(v53));
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          unint64_t v57 = 0xFFEFFFFFFFFFFFFFLL;
          uint64_t v58 = 0;
          int v59 = 0;
          uint64_t v65 = 0;
          __int16 v66 = 0;
          int v71 = 0;
          int v64 = 0;
          long long v63 = 0u;
          long long v62 = 0u;
          long long v61 = 0u;
          long long v60 = 0u;
          long long v68 = 0u;
          long long v67 = 0u;
          char v69 = 0;
          memset(v70, 0, sizeof(v70));
          unint64_t v72 = 0xFFEFFFFFFFFFFFFFLL;
          long long v91 = 0u;
          long long v90 = 0u;
          long long v89 = 0u;
          long long v88 = 0u;
          long long v87 = 0u;
          long long v86 = 0u;
          long long v85 = 0u;
          long long v84 = 0u;
          long long v83 = 0u;
          long long v82 = 0u;
          long long v81 = 0u;
          long long v80 = 0u;
          long long v79 = 0u;
          long long v78 = 0u;
          long long v77 = 0u;
          long long v76 = 0u;
          long long v75 = 0u;
          long long v74 = 0u;
          long long v73 = 0u;
          uint64_t v92 = 0;
          unint64_t v93 = 0xFFEFFFFFFFFFFFFFLL;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          unint64_t v98 = 0xFFEFFFFFFFFFFFFFLL;
          uint64_t v99 = 0;
          int v100 = 0;
          uint64_t v101 = 0;
          char v102 = 0;
          unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
          uint64_t v105 = 0;
          uint64_t v104 = 0;
          uint64_t v106 = 0x80000000800000;
          uint64_t v108 = 0;
          uint64_t v107 = 0;
          long long v109 = xmmword_101D1E260;
          uint64_t v110 = 0x80000000800000;
          long long v111 = 0u;
          long long v112 = 0u;
          uint64_t v113 = 0;
          unint64_t v114 = 0xFFEFFFFFFFFFFFFFLL;
          long long v115 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          int v121 = 0;
          unint64_t v122 = 0xFFEFFFFFFFFFFFFFLL;
          __int16 v123 = 0;
          int v124 = 0;
          unint64_t v125 = 0xFFEFFFFFFFFFFFFFLL;
          uint64_t v126 = 7;
          unint64_t v127 = 0xFFEFFFFFFFFFFFFFLL;
          char v128 = 0;
          uint64_t v130 = 0;
          uint64_t v129 = 0;
          uint64_t v131 = 0;
          if (sub_100174478(*(double **)(v3 + 8), qword_102487BE8, (uint64_t)v25))
          {
            int v10 = BYTE8(v82);
            if (BYTE8(v82))
            {
              if (qword_1024191C0 != -1) {
                dispatch_once(&qword_1024191C0, &stru_102326590);
              }
              unint64_t v11 = qword_1024191C8;
              if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v12 = *(void *)(v3 + 16);
                *(_DWORD *)std::string buf = 134218240;
                uint64_t v149 = v12;
                __int16 v150 = 1024;
                int v151 = v10;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,vehicleSpeedConstrainedArm,type,%ld,constrainedState,%d", buf, 0x12u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024191C0 != -1) {
                  dispatch_once(&qword_1024191C0, &stru_102326590);
                }
                __int16 v24 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v24);
                if (v24 != (char *)buf) {
                  free(v24);
                }
              }
              goto LABEL_25;
            }
          }
          else
          {
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102326590);
            }
            uint64_t v13 = qword_1024191C8;
            if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to get constrainedArm state", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024191C0 != -1) {
                dispatch_once(&qword_1024191C0, &stru_102326590);
              }
              unint64_t v23 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v23);
              if (v23 != (char *)buf) {
                free(v23);
              }
            }
          }
        }
      }
    }
    BOOL result = *(void *)v3;
    if (!*(void *)v3) {
      return result;
    }
    BOOL result = (**(uint64_t (***)(uint64_t, void))result)(result, *(void *)(v3 + 8));
    int v15 = result;
    if (!result) {
      return result;
    }
    uint64_t v16 = v14;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102326590);
    }
    uint64_t v17 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(v3 + 16);
      *(_DWORD *)std::string buf = 134218496;
      uint64_t v149 = v18;
      __int16 v150 = 1024;
      int v151 = v15;
      __int16 v152 = 2048;
      uint64_t v153 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "WorkoutStopDetected,type,%ld,stopReason,%d,stopTimestamp,%f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102326590);
      }
      uint64_t v21 = *(void *)(v3 + 16);
      *(_DWORD *)uint64_t v25 = 134218496;
      *(void *)&v25[4] = v21;
      *(_WORD *)&v25[12] = 1024;
      *(_DWORD *)&v25[14] = v15;
      *(_WORD *)&v25[18] = 2048;
      *(void *)&v25[20] = v16;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
LABEL_25:
    sub_101444ACC((uint64_t *)v3, 0, 0, 0);
    return sub_10077AD10(v3 + 72, 1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102326570);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(v3 + 16);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v149 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WorkoutStopDetected,wrist,type,%ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102326570);
    }
    uint64_t v19 = *(void *)(v3 + 16);
    *(_DWORD *)uint64_t v25 = 134217984;
    *(void *)&v25[4] = v19;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::update()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  sub_101444ACC((uint64_t *)v3, 0, 0, 0);
  *(void *)(v3 + 56) = 0;
  uint64_t v147 = 0;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v134 = 0u;
  int v132 = 3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  return sub_10077AD10(v3 + 72, 1);
}

void sub_101444AA8(_Unwind_Exception *a1)
{
}

void sub_101444ACC(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102326590);
  }
  char v8 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 134349568;
    *(void *)&buf[1] = a2;
    __int16 v19 = 2050;
    uint64_t v20 = a3;
    __int16 v21 = 2050;
    uint64_t v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector::selectModel,type,%{public}ld,location,%{public}ld,startType,%{public}ld", (uint8_t *)buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102326590);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::selectModel(CMWorkoutType, CMWorkoutLocationType, CLWorkoutStopModel::StartType)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  uint64_t v9 = sub_101014448(a2, a3);
  if (a1[2] == v9)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102326590);
    }
    int v10 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[2];
      buf[0] = 134349312;
      *(void *)&buf[1] = v11;
      __int16 v19 = 2050;
      uint64_t v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector,workout type did not change,not updating models,currentTypeWithLocation,%{public}ld,newTypeWithLocation,%{public}ld", (uint8_t *)buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102326590);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::selectModel(CMWorkoutType, CMWorkoutLocationType, CLWorkoutStopModel::StartType)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102326590);
    }
    uint64_t v13 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 134218496;
      *(void *)&buf[1] = a2;
      __int16 v19 = 2048;
      uint64_t v20 = a3;
      __int16 v21 = 2048;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector::selectModel,workoutType,%ld,locationType,%ld,typeWithLocation,%ld", (uint8_t *)buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102326590);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutStopDetector::selectModel(CMWorkoutType, CMWorkoutLocationType, CLWorkoutStopModel::StartType)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    a1[2] = v9;
    switch(v9)
    {
      case 0:
      case 66:
        uint64_t v15 = *a1;
        *a1 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
        }
        a1[2] = 0;
        break;
      case 1:
      case 2:
        sub_101445568();
      case 3:
      case 7:
      case 8:
      case 10:
      case 13:
      case 20:
      case 21:
      case 23:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
        uint64_t v14 = *a1;
        *a1 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
        }
        break;
      case 4:
        sub_101445808();
      case 5:
        sub_101445738();
      case 6:
        operator new();
      case 9:
        sub_101445658();
      case 11:
        sub_1014457A0();
      case 12:
        sub_1014455E0();
      case 14:
      case 22:
        sub_1014458B4();
      case 15:
      case 17:
      case 24:
        operator new();
      case 16:
      case 18:
        sub_1014456D0();
      case 19:
        sub_10144592C();
      default:
        return;
    }
  }
}

void sub_1014451A0()
{
}

double sub_1014452D8(uint64_t a1, uint64_t a2)
{
  double result = -1.0;
  char v3 = a1 - 5;
  if ((unint64_t)(a1 - 5) <= 0x3C)
  {
    if (((1 << v3) & 0x1FFFE00000000200) != 0)
    {
      return sub_101445350(a2);
    }
    else if (((1 << v3) & 0x2B800057) != 0)
    {
      return 200.0;
    }
    else if (((1 << v3) & 0x1DBC04000000) != 0)
    {
      return 1000.0;
    }
  }
  return result;
}

double sub_101445350(uint64_t a1)
{
  uint64_t v8 = 0;
  if (sub_101014848(a1, &v8))
  {
    if ((unint64_t)(v8 - 13) <= 0x3E && ((1 << (v8 - 13)) & 0x464585930F4C2951) != 0
      || v8 == 2)
    {
      return -1.0;
    }
    else
    {
      return 1000.0;
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102326590);
    }
    uint64_t v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutStopDetector,invalid generic workout label received,%lu", buf, 0xCu);
    }
    double v6 = 1000.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102326590);
      }
      int v9 = 134217984;
      uint64_t v10 = a1;
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static double CLWorkoutStopDetector::getGeoFenceRadiusForGenericWorkout(unsigned long)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return v6;
}

void sub_101445568()
{
}

void sub_1014455BC()
{
}

void sub_1014455E0()
{
}

void sub_101445634()
{
}

void sub_101445658()
{
}

void sub_1014456AC()
{
}

void sub_1014456D0()
{
}

void sub_101445714()
{
}

void sub_101445738()
{
}

void sub_10144577C()
{
}

void sub_1014457A0()
{
}

void sub_1014457E4()
{
}

void sub_101445808()
{
}

void sub_101445890()
{
}

void sub_1014458B4()
{
}

void sub_101445908()
{
}

void sub_10144592C()
{
}

void sub_1014459C0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1014459F0(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_101445A20(uint64_t a1, int a2)
{
  sub_100563DD8(a1);
  void *v4 = off_1023265C0;
  if (a2 == 1) {
    sub_1001A34E0(a1 + 8, 1, (uint64_t)&v6);
  }
  return a1;
}

void sub_101445A88(_Unwind_Exception *a1)
{
  sub_101445A9C(v1);
  _Unwind_Resume(a1);
}

void *sub_101445A9C(void *a1)
{
  *a1 = off_1022BB728;
  a1[56] = off_1022D4E20;
  BOOL v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101445B0C(void *a1)
{
  *a1 = off_1022BB728;
  a1[56] = off_1022D4E20;
  BOOL v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_101445B9C(uint64_t result, uint64_t a2)
{
  *(void *)double result = off_1022D4E20;
  *(_OWORD *)(result + 8) = xmmword_101D1E240;
  *(void *)(result + 24) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(result + 32) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 64) = 1;
  *(_DWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 84) = 75;
  *(_DWORD *)(result + 76) = 0;
  *(void *)(result + 392) = 0;
  *(void *)(result + 400) = 0;
  *(void *)(result + 408) = 0xC08F380000000000;
  *(void *)(result + 416) = 0xC08F380000000000;
  *(unsigned char *)(result + 424) = 0;
  *(void *)(result + 432) = 0;
  *(unsigned char *)(result + 440) = 0;
  if (a2 == 22 || a2 == 11) {
    *(void *)(result + 8) = 0x4049000000000000;
  }
  return result;
}

uint64_t sub_101445C24()
{
  sub_100134750(qword_102487BD0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487BD0, (void *)&_mh_execute_header);
}

uint64_t sub_101445C90()
{
  v0.n128_u64[0] = 0x5A5A5A5A5A5A5A5ALL;
  v0.n128_u64[1] = 0x5A5A5A5A5A5A5A5ALL;
  v1.n128_u64[0] = 0x5555555555555555;
  v1.n128_u64[1] = 0x5555555555555555;
  v2.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
  v2.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
  v3.n128_u64[0] = 0x5555555555555555;
  v3.n128_u64[1] = 0x5555555555555555;
  v4.n128_u64[0] = 0x1111111111111111;
  v4.n128_u64[1] = 0x1111111111111111;
  v5.n128_u64[0] = 0x2222222222222222;
  v5.n128_u64[1] = 0x2222222222222222;
  v6.n128_u64[0] = 0x3333333333333333;
  v6.n128_u64[1] = 0x3333333333333333;
  return sub_101445D64(v0, v1, v2, v3, (__n128)0, v4, v5, v6);
}

float64x2_t *sub_101445D64@<X0>(float64x2_t *result@<X0>, float64x2_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unsigned int a7@<W7>, unsigned int a8@<W8>, float64x2_t a9@<Q1>, float64x2_t a10@<Q4>, float64x2_t a11@<Q5>, float64x2_t a12@<Q6>, float64x2_t a13@<Q7>)
{
  do
  {
    float64x2_t v43 = *result;
    float64x2_t v44 = result[1];
    float64x2_t v45 = vmlaq_f64(a10, a9, v33);
    float64x2_t v46 = vmlaq_f64(a11, a9, v34);
    float64x2_t v47 = result[2];
    float64x2_t v48 = result[3];
    float64x2_t v49 = vmlaq_f64(a12, v35, a9);
    float64x2_t v50 = vmlaq_f64(a13, v36, a9);
    float64x2_t v51 = result[4];
    float64x2_t v52 = result[5];
    float64x2_t v53 = vmlaq_f64(v23, a9, v37);
    float64x2_t v54 = vmlaq_f64(v24, a9, v38);
    float64x2_t v55 = result[6];
    float64x2_t v56 = result[7];
    float64x2_t v57 = vmlaq_f64(v25, v39, a9);
    float64x2_t v58 = vmlaq_f64(v26, v40, a9);
    float64x2_t v59 = result[8];
    float64x2_t v60 = result[9];
    float64x2_t v61 = vmlaq_f64(v27, a9, v41);
    float64x2_t v62 = vmlaq_f64(v28, a9, v42);
    *a2 = *result;
    a2[1] = v44;
    float64x2_t v63 = vmlaq_f64(v31, a9, v44);
    float64x2_t v64 = vmlaq_f64(v32, v41, a9);
    uint64_t v65 = a4 - 64;
    float64x2_t v66 = result[10];
    float64x2_t v67 = result[11];
    float64x2_t v68 = vmlaq_f64(v29, v43, a9);
    float64x2_t v69 = vmlaq_f64(v30, v44, a9);
    float64x2_t v70 = *result;
    float64x2_t v71 = result[1];
    float64x2_t v72 = vmlaq_f64(v45, a9, v47);
    float64x2_t v73 = vmlaq_f64(v46, a9, v48);
    float64x2_t v74 = result[2];
    float64x2_t v75 = result[3];
    float64x2_t v76 = vmlaq_f64(v49, v51, a9);
    float64x2_t v77 = vmlaq_f64(v50, v52, a9);
    float64x2_t v78 = result[4];
    float64x2_t v79 = result[5];
    float64x2_t v80 = vmlaq_f64(v53, a9, v55);
    float64x2_t v81 = vmlaq_f64(v54, a9, v56);
    float64x2_t v82 = result[6];
    float64x2_t v83 = result[7];
    float64x2_t v84 = vmlaq_f64(v57, v59, a9);
    float64x2_t v85 = vmlaq_f64(v58, v60, a9);
    a2[2] = v66;
    a2[3] = v67;
    float64x2_t v86 = vmlaq_f64(v63, v67, a9);
    float64x2_t v87 = vmlaq_f64(v64, a9, v59);
    float64x2_t v88 = result[8];
    float64x2_t v89 = result[9];
    float64x2_t v90 = vmlaq_f64(v61, a9, v66);
    float64x2_t v91 = vmlaq_f64(v62, a9, v67);
    float64x2_t v92 = result[10];
    float64x2_t v93 = result[11];
    float64x2_t v94 = vmlaq_f64(v68, v70, a9);
    for (float64x2_t i = vmlaq_f64(v69, v71, a9); v65 >= 0; float64x2_t i = vmlaq_f64(v253, v255, a9))
    {
      float64x2_t v96 = *result;
      float64x2_t v97 = result[1];
      float64x2_t v98 = vmlaq_f64(v72, a9, v74);
      float64x2_t v99 = vmlaq_f64(v73, a9, v75);
      float64x2_t v100 = result[2];
      float64x2_t v101 = result[3];
      float64x2_t v102 = vmlaq_f64(v76, v78, a9);
      float64x2_t v103 = vmlaq_f64(v77, v79, a9);
      float64x2_t v104 = result[4];
      float64x2_t v105 = result[5];
      float64x2_t v106 = vmlaq_f64(v80, a9, v82);
      float64x2_t v107 = vmlaq_f64(v81, a9, v83);
      a2[4] = v88;
      a2[5] = v89;
      float64x2_t v108 = vmlaq_f64(v86, a9, v89);
      float64x2_t v109 = vmlaq_f64(v87, v82, a9);
      float64x2_t v110 = result[6];
      float64x2_t v111 = result[7];
      float64x2_t v112 = vmlaq_f64(v84, v88, a9);
      float64x2_t v113 = vmlaq_f64(v85, v89, a9);
      float64x2_t v114 = result[8];
      float64x2_t v115 = result[9];
      float64x2_t v116 = vmlaq_f64(v90, a9, v92);
      float64x2_t v117 = vmlaq_f64(v91, a9, v93);
      float64x2_t v118 = result[10];
      float64x2_t v119 = result[11];
      float64x2_t v120 = vmlaq_f64(v94, v96, a9);
      float64x2_t v121 = vmlaq_f64(i, v97, a9);
      float64x2_t v122 = *result;
      float64x2_t v123 = result[1];
      float64x2_t v124 = vmlaq_f64(v98, a9, v100);
      float64x2_t v125 = vmlaq_f64(v99, a9, v101);
      float64x2_t v126 = result[2];
      float64x2_t v127 = result[3];
      float64x2_t v128 = vmlaq_f64(v102, v104, a9);
      float64x2_t v129 = vmlaq_f64(v103, v105, a9);
      a2[6] = v110;
      a2[7] = v111;
      float64x2_t v130 = vmlaq_f64(v108, v111, a9);
      float64x2_t v131 = vmlaq_f64(v109, a9, v104);
      float64x2_t v132 = result[4];
      float64x2_t v133 = result[5];
      float64x2_t v134 = vmlaq_f64(v106, a9, v110);
      float64x2_t v135 = vmlaq_f64(v107, a9, v111);
      float64x2_t v136 = result[6];
      float64x2_t v137 = result[7];
      float64x2_t v138 = vmlaq_f64(v112, v114, a9);
      float64x2_t v139 = vmlaq_f64(v113, v115, a9);
      float64x2_t v140 = result[8];
      float64x2_t v141 = result[9];
      float64x2_t v142 = vmlaq_f64(v116, a9, v118);
      float64x2_t v143 = vmlaq_f64(v117, a9, v119);
      float64x2_t v144 = result[10];
      float64x2_t v145 = result[11];
      float64x2_t v146 = vmlaq_f64(v120, v122, a9);
      float64x2_t v147 = vmlaq_f64(v121, v123, a9);
      float64x2_t v148 = *result;
      float64x2_t v149 = result[1];
      float64x2_t v150 = vmlaq_f64(v124, a9, v126);
      float64x2_t v151 = vmlaq_f64(v125, a9, v127);
      a2[8] = v132;
      a2[9] = v133;
      float64x2_t v152 = vmlaq_f64(v130, a9, v133);
      float64x2_t v153 = vmlaq_f64(v131, v126, a9);
      float64x2_t v154 = result[2];
      float64x2_t v155 = result[3];
      float64x2_t v156 = vmlaq_f64(v128, v132, a9);
      float64x2_t v157 = vmlaq_f64(v129, v133, a9);
      float64x2_t v158 = result[4];
      float64x2_t v159 = result[5];
      float64x2_t v160 = vmlaq_f64(v134, a9, v136);
      float64x2_t v161 = vmlaq_f64(v135, a9, v137);
      float64x2_t v162 = result[6];
      float64x2_t v163 = result[7];
      float64x2_t v164 = vmlaq_f64(v138, v140, a9);
      float64x2_t v165 = vmlaq_f64(v139, v141, a9);
      float64x2_t v166 = result[8];
      float64x2_t v167 = result[9];
      float64x2_t v168 = vmlaq_f64(v142, a9, v144);
      float64x2_t v169 = vmlaq_f64(v143, a9, v145);
      float64x2_t v170 = result[10];
      float64x2_t v171 = result[11];
      float64x2_t v172 = vmlaq_f64(v146, v148, a9);
      float64x2_t v173 = vmlaq_f64(v147, v149, a9);
      a2[10] = v154;
      a2[11] = v155;
      float64x2_t v174 = vmlaq_f64(v152, v155, a9);
      float64x2_t v175 = vmlaq_f64(v153, a9, v148);
      float64x2_t v176 = result[12];
      float64x2_t v177 = result[13];
      float64x2_t v178 = vmlaq_f64(v150, a9, v154);
      float64x2_t v179 = vmlaq_f64(v151, a9, v155);
      float64x2_t v180 = result[2];
      float64x2_t v181 = result[3];
      float64x2_t v182 = vmlaq_f64(v156, v158, a9);
      float64x2_t v183 = vmlaq_f64(v157, v159, a9);
      float64x2_t v184 = result[4];
      float64x2_t v185 = result[5];
      float64x2_t v186 = vmlaq_f64(v160, a9, v162);
      float64x2_t v187 = vmlaq_f64(v161, a9, v163);
      float64x2_t v188 = result[6];
      float64x2_t v189 = result[7];
      float64x2_t v190 = vmlaq_f64(v164, v166, a9);
      float64x2_t v191 = vmlaq_f64(v165, v167, a9);
      float64x2_t v192 = result[8];
      float64x2_t v193 = result[9];
      float64x2_t v194 = vmlaq_f64(v168, a9, v170);
      float64x2_t v195 = vmlaq_f64(v169, a9, v171);
      a2[12] = v176;
      a2[13] = v177;
      float64x2_t v196 = vmlaq_f64(v174, a9, v177);
      float64x2_t v197 = vmlaq_f64(v175, v170, a9);
      float64x2_t v198 = result[14];
      float64x2_t v199 = result[15];
      float64x2_t v200 = vmlaq_f64(v172, v176, a9);
      float64x2_t v201 = vmlaq_f64(v173, v177, a9);
      float64x2_t v202 = *result;
      float64x2_t v203 = result[1];
      float64x2_t v204 = vmlaq_f64(v178, a9, v180);
      float64x2_t v205 = vmlaq_f64(v179, a9, v181);
      float64x2_t v206 = result[2];
      float64x2_t v207 = result[3];
      float64x2_t v208 = vmlaq_f64(v182, v184, a9);
      float64x2_t v209 = vmlaq_f64(v183, v185, a9);
      float64x2_t v210 = result[4];
      float64x2_t v211 = result[5];
      float64x2_t v212 = vmlaq_f64(v186, a9, v188);
      float64x2_t v213 = vmlaq_f64(v187, a9, v189);
      float64x2_t v214 = result[6];
      float64x2_t v215 = result[7];
      float64x2_t v216 = vmlaq_f64(v190, v192, a9);
      float64x2_t v217 = vmlaq_f64(v191, v193, a9);
      a2[14] = v198;
      a2[15] = v199;
      float64x2_t v218 = vmlaq_f64(v196, v199, a9);
      float64x2_t v219 = vmlaq_f64(v197, a9, v192);
      a2 += 16;
      float64x2_t v220 = result[8];
      float64x2_t v221 = result[9];
      float64x2_t v222 = vmlaq_f64(v194, a9, v198);
      float64x2_t v223 = vmlaq_f64(v195, a9, v199);
      float64x2_t v224 = result[10];
      float64x2_t v225 = result[11];
      float64x2_t v226 = vmlaq_f64(v200, v202, a9);
      float64x2_t v227 = vmlaq_f64(v201, v203, a9);
      result += 16;
      float64x2_t v228 = *result;
      float64x2_t v229 = result[1];
      float64x2_t v230 = vmlaq_f64(v204, a9, v206);
      float64x2_t v231 = vmlaq_f64(v205, a9, v207);
      float64x2_t v232 = result[2];
      float64x2_t v233 = result[3];
      float64x2_t v234 = vmlaq_f64(v208, v210, a9);
      float64x2_t v235 = vmlaq_f64(v209, v211, a9);
      float64x2_t v236 = result[4];
      float64x2_t v237 = result[5];
      float64x2_t v238 = vmlaq_f64(v212, a9, v214);
      float64x2_t v239 = vmlaq_f64(v213, a9, v215);
      float64x2_t v240 = result[6];
      float64x2_t v241 = result[7];
      float64x2_t v242 = vmlaq_f64(v216, v220, a9);
      float64x2_t v243 = vmlaq_f64(v217, v221, a9);
      float64x2_t v244 = result[8];
      float64x2_t v245 = result[9];
      float64x2_t v246 = vmlaq_f64(v222, a9, v224);
      float64x2_t v247 = vmlaq_f64(v223, a9, v225);
      *a2 = *result;
      a2[1] = v229;
      float64x2_t v248 = vmlaq_f64(v218, a9, v229);
      float64x2_t v249 = vmlaq_f64(v219, v224, a9);
      v65 -= 32;
      float64x2_t v250 = result[10];
      float64x2_t v251 = result[11];
      float64x2_t v252 = vmlaq_f64(v226, v228, a9);
      float64x2_t v253 = vmlaq_f64(v227, v229, a9);
      float64x2_t v254 = *result;
      float64x2_t v255 = result[1];
      float64x2_t v72 = vmlaq_f64(v230, a9, v232);
      float64x2_t v73 = vmlaq_f64(v231, a9, v233);
      float64x2_t v74 = result[2];
      float64x2_t v75 = result[3];
      float64x2_t v76 = vmlaq_f64(v234, v236, a9);
      float64x2_t v77 = vmlaq_f64(v235, v237, a9);
      float64x2_t v78 = result[4];
      float64x2_t v79 = result[5];
      float64x2_t v80 = vmlaq_f64(v238, a9, v240);
      float64x2_t v81 = vmlaq_f64(v239, a9, v241);
      float64x2_t v82 = result[6];
      float64x2_t v83 = result[7];
      float64x2_t v84 = vmlaq_f64(v242, v244, a9);
      float64x2_t v85 = vmlaq_f64(v243, v245, a9);
      a2[2] = v250;
      a2[3] = v251;
      float64x2_t v86 = vmlaq_f64(v248, v251, a9);
      float64x2_t v87 = vmlaq_f64(v249, a9, v244);
      float64x2_t v88 = result[8];
      float64x2_t v89 = result[9];
      float64x2_t v90 = vmlaq_f64(v246, a9, v250);
      float64x2_t v91 = vmlaq_f64(v247, a9, v251);
      float64x2_t v92 = result[10];
      float64x2_t v93 = result[11];
      float64x2_t v94 = vmlaq_f64(v252, v254, a9);
    }
    float64x2_t v256 = *result;
    float64x2_t v257 = result[1];
    float64x2_t v258 = vmlaq_f64(v72, a9, v74);
    float64x2_t v259 = vmlaq_f64(v73, a9, v75);
    float64x2_t v260 = result[2];
    float64x2_t v261 = result[3];
    float64x2_t v262 = vmlaq_f64(v76, v78, a9);
    float64x2_t v263 = vmlaq_f64(v77, v79, a9);
    float64x2_t v264 = result[4];
    float64x2_t v265 = result[5];
    float64x2_t v266 = vmlaq_f64(v80, a9, v82);
    float64x2_t v267 = vmlaq_f64(v81, a9, v83);
    a2[4] = v88;
    a2[5] = v89;
    float64x2_t v268 = vmlaq_f64(v86, a9, v89);
    float64x2_t v269 = vmlaq_f64(v87, v82, a9);
    float64x2_t v270 = result[6];
    float64x2_t v271 = result[7];
    float64x2_t v272 = vmlaq_f64(v84, v88, a9);
    float64x2_t v273 = vmlaq_f64(v85, v89, a9);
    float64x2_t v274 = result[8];
    float64x2_t v275 = result[9];
    float64x2_t v276 = vmlaq_f64(v90, a9, v92);
    float64x2_t v277 = vmlaq_f64(v91, a9, v93);
    float64x2_t v278 = result[10];
    float64x2_t v279 = result[11];
    float64x2_t v280 = vmlaq_f64(v94, v256, a9);
    float64x2_t v281 = vmlaq_f64(i, v257, a9);
    float64x2_t v282 = *result;
    float64x2_t v283 = result[1];
    float64x2_t v284 = vmlaq_f64(v258, a9, v260);
    float64x2_t v285 = vmlaq_f64(v259, a9, v261);
    float64x2_t v286 = result[2];
    float64x2_t v287 = result[3];
    float64x2_t v288 = vmlaq_f64(v262, v264, a9);
    float64x2_t v289 = vmlaq_f64(v263, v265, a9);
    a2[6] = v270;
    a2[7] = v271;
    float64x2_t v290 = vmlaq_f64(v268, v271, a9);
    float64x2_t v291 = vmlaq_f64(v269, a9, v264);
    float64x2_t v292 = result[4];
    float64x2_t v293 = result[5];
    float64x2_t v294 = vmlaq_f64(v266, a9, v270);
    float64x2_t v295 = vmlaq_f64(v267, a9, v271);
    float64x2_t v296 = result[6];
    float64x2_t v297 = result[7];
    float64x2_t v298 = vmlaq_f64(v272, v274, a9);
    float64x2_t v299 = vmlaq_f64(v273, v275, a9);
    float64x2_t v300 = result[8];
    float64x2_t v301 = result[9];
    float64x2_t v302 = vmlaq_f64(v276, a9, v278);
    float64x2_t v303 = vmlaq_f64(v277, a9, v279);
    float64x2_t v304 = result[10];
    float64x2_t v305 = result[11];
    float64x2_t v306 = vmlaq_f64(v280, v282, a9);
    float64x2_t v307 = vmlaq_f64(v281, v283, a9);
    float64x2_t v308 = *result;
    float64x2_t v309 = result[1];
    float64x2_t v310 = vmlaq_f64(v284, a9, v286);
    float64x2_t v311 = vmlaq_f64(v285, a9, v287);
    a2[8] = v292;
    a2[9] = v293;
    float64x2_t v312 = vmlaq_f64(v290, a9, v293);
    float64x2_t v313 = vmlaq_f64(v291, v286, a9);
    float64x2_t v314 = result[2];
    float64x2_t v315 = result[3];
    float64x2_t v316 = vmlaq_f64(v288, v292, a9);
    float64x2_t v317 = vmlaq_f64(v289, v293, a9);
    float64x2_t v318 = result[4];
    float64x2_t v319 = result[5];
    float64x2_t v320 = vmlaq_f64(v294, a9, v296);
    float64x2_t v321 = vmlaq_f64(v295, a9, v297);
    float64x2_t v322 = result[6];
    float64x2_t v323 = result[7];
    float64x2_t v324 = vmlaq_f64(v298, v300, a9);
    float64x2_t v325 = vmlaq_f64(v299, v301, a9);
    float64x2_t v326 = result[8];
    float64x2_t v327 = result[9];
    float64x2_t v328 = vmlaq_f64(v302, a9, v304);
    float64x2_t v329 = vmlaq_f64(v303, a9, v305);
    float64x2_t v330 = result[10];
    float64x2_t v331 = result[11];
    float64x2_t v332 = vmlaq_f64(v306, v308, a9);
    float64x2_t v333 = vmlaq_f64(v307, v309, a9);
    a2[10] = v314;
    a2[11] = v315;
    float64x2_t v334 = vmlaq_f64(v312, v315, a9);
    float64x2_t v335 = vmlaq_f64(v313, a9, v308);
    float64x2_t v336 = result[12];
    float64x2_t v337 = result[13];
    float64x2_t v338 = vmlaq_f64(v310, a9, v314);
    float64x2_t v339 = vmlaq_f64(v311, a9, v315);
    float64x2_t v340 = result[2];
    float64x2_t v341 = result[3];
    float64x2_t v342 = vmlaq_f64(v316, v318, a9);
    float64x2_t v343 = vmlaq_f64(v317, v319, a9);
    float64x2_t v344 = result[4];
    float64x2_t v345 = result[5];
    float64x2_t v346 = vmlaq_f64(v320, a9, v322);
    float64x2_t v347 = vmlaq_f64(v321, a9, v323);
    float64x2_t v348 = result[6];
    float64x2_t v349 = result[7];
    float64x2_t v350 = vmlaq_f64(v324, v326, a9);
    float64x2_t v351 = vmlaq_f64(v325, v327, a9);
    float64x2_t v352 = result[8];
    float64x2_t v353 = result[9];
    float64x2_t v354 = vmlaq_f64(v328, a9, v330);
    float64x2_t v355 = vmlaq_f64(v329, a9, v331);
    v15 += a7 * (unint64_t)v19;
    a2[12] = v336;
    a2[13] = v337;
    float64x2_t v356 = vmlaq_f64(v334, a9, v337);
    float64x2_t v357 = vmlaq_f64(v335, v330, a9);
    a4 = a6;
    v16 += a8 * (unint64_t)v20;
    float64x2_t v358 = result[14];
    float64x2_t v359 = result[15];
    float64x2_t v360 = vmlaq_f64(v332, v336, a9);
    float64x2_t v361 = vmlaq_f64(v333, v337, a9);
    float64x2_t v362 = *result;
    float64x2_t v363 = result[1];
    v17 += v20 * (unint64_t)a7;
    a10 = vmlaq_f64(v338, a9, v340);
    a11 = vmlaq_f64(v339, a9, v341);
    float64x2_t v33 = result[2];
    float64x2_t v34 = result[3];
    BOOL v364 = a5-- <= 1;
    a12 = vmlaq_f64(v342, v344, a9);
    a13 = vmlaq_f64(v343, v345, a9);
    float64x2_t v35 = result[4];
    float64x2_t v36 = result[5];
    float64x2_t v23 = vmlaq_f64(v346, a9, v348);
    float64x2_t v24 = vmlaq_f64(v347, a9, v349);
    float64x2_t v37 = result[6];
    float64x2_t v38 = result[7];
    float64x2_t v25 = vmlaq_f64(v350, v352, a9);
    float64x2_t v26 = vmlaq_f64(v351, v353, a9);
    a2[14] = v358;
    a2[15] = v359;
    float64x2_t v31 = vmlaq_f64(v356, v359, a9);
    float64x2_t v32 = vmlaq_f64(v357, a9, v352);
    float64x2_t v39 = result[8];
    float64x2_t v40 = result[9];
    float64x2_t v27 = vmlaq_f64(v354, a9, v358);
    float64x2_t v28 = vmlaq_f64(v355, a9, v359);
    a2 = v22;
    float64x2_t v41 = result[10];
    float64x2_t v42 = result[11];
    float64x2_t v29 = vmlaq_f64(v360, v362, a9);
    float64x2_t v30 = vmlaq_f64(v361, v363, a9);
    double result = v21;
  }
  while (!v364);
  if (a3)
  {
    *(float64x2_t *)a3 = a10;
    *(float64x2_t *)(a3 + 16) = a11;
    *(float64x2_t *)(a3 + 32) = a12;
    *(float64x2_t *)(a3 + 48) = a13;
    *(float64x2_t *)(a3 + 64) = v23;
    *(float64x2_t *)(a3 + 80) = v24;
    *(float64x2_t *)(a3 + 96) = v25;
    *(float64x2_t *)(a3 + 112) = v26;
    *(float64x2_t *)(a3 + 128) = v27;
    *(float64x2_t *)(a3 + 144) = v28;
    *(float64x2_t *)(a3 + 160) = v29;
    *(float64x2_t *)(a3 + 176) = v30;
    *(float64x2_t *)(a3 + 192) = v31;
    *(float64x2_t *)(a3 + 208) = v32;
    *(float64x2_t *)(a3 + 224) = v362;
    *(float64x2_t *)(a3 + 240) = v363;
    *(float64x2_t *)(a3 + 256) = vmlaq_f64(v363, v363, a9);
    *(float64x2_t *)(a3 + 272) = v33;
    *(float64x2_t *)(a3 + 288) = v34;
    *(float64x2_t *)(a3 + 304) = v35;
    *(float64x2_t *)(a3 + 320) = v36;
    *(float64x2_t *)(a3 + 336) = v37;
    *(float64x2_t *)(a3 + 352) = v39;
    *(float64x2_t *)(a3 + 368) = v40;
    *(float64x2_t *)(a3 + 384) = v41;
    *(float64x2_t *)(a3 + 400) = v42;
    *(void *)(a3 + 416) = v13;
    *(void *)(a3 + 424) = v14;
    *(void *)(a3 + 432) = v15;
    *(void *)(a3 + 440) = v16;
    *(void *)(a3 + 448) = v17;
    *(void *)(a3 + 456) = v18;
  }
  return result;
}

BOOL sub_101446790(void *a1, void *a2)
{
  [a2 latitude];
  double v5 = v4;
  [a2 longitude];
  double v7 = v6;
  [objc_msgSend(a1, "location") latitude];
  double v9 = v8;
  [objc_msgSend(a1, "location") longitude];
  double v11 = sub_100CF5880(v5, v7, v9, v10);
  [objc_msgSend(a1, "location") horizontalUncertainty];
  return v12 + 50.0 >= v11;
}

void sub_101446D54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_101446D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(unsigned char **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326640);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching home locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102326640);
      }
    }
    double v7 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching home locations of interest", "{\"msg%{public}.0s\":\"error fetching home locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    [v4 setHomeLocations:a2];
    double v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    dispatch_group_leave(v8);
  }
}

void sub_101446F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(unsigned char **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326640);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching work locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102326640);
      }
    }
    double v7 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching work locations of interest", "{\"msg%{public}.0s\":\"error fetching work locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    [v4 setWorkLocations:a2];
    double v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    dispatch_group_leave(v8);
  }
}

void sub_101447154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(unsigned char **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326640);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching school locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102326640);
      }
    }
    double v7 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching school locations of interest", "{\"msg%{public}.0s\":\"error fetching school locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    [v4 setSchoolLocations:a2];
    double v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    dispatch_group_leave(v8);
  }
}

void sub_101447344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(unsigned char **)(a1 + 32);
  if (a3)
  {
    v4[32] = 1;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326640);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error fetching gym locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102326640);
      }
    }
    double v7 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      double v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error fetching gym locations of interest", "{\"msg%{public}.0s\":\"error fetching gym locations of interest\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    [v4 setGymLocations:a2];
    double v8 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    dispatch_group_leave(v8);
  }
}

void sub_101447534(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(unsigned char *)(v2 + 32))
  {
    ++*(_DWORD *)(v2 + 36);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326640);
    }
    __n128 v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      double v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"error fetching locations of interest\"}", (uint8_t *)&v5, 0x12u);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 36) = 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102326640);
    }
    double v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      double v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"finished fetching locations of interest\"}", (uint8_t *)&v5, 0x12u);
    }
    (*(void (**)(void))(a1[5] + 16))();
  }
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1[6] + 8) + 40));
}

void sub_101447AAC(id a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102326640);
  }
  uint64_t v1 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    __int16 v3 = 2082;
    double v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locations of interest have been fetched\"}", (uint8_t *)v2, 0x12u);
  }
}

NSDictionary *sub_101447F50(void *a1)
{
  v3[0] = @"loiType";
  v4[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a1 type]);
  v3[1] = @"loiTypeSource";
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a1 typeSource]);
  v3[2] = @"lat";
  [objc_msgSend(a1, "location") latitude];
  id v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  long long v3[3] = @"lon";
  [objc_msgSend(a1, "location") longitude];
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v3[4] = @"uncertainty";
  [objc_msgSend(a1, "location") horizontalUncertainty];
  void v4[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  void v3[5] = @"confidence";
  [a1 confidence];
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

void sub_101448100(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_101448130(uint64_t a1)
{
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v2 = (void *)(a1 + 40);
  *(_OWORD *)(a1 + 88) = 0u;
  __int16 v3 = (void *)(a1 + 88);
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v5.n128_u64[0] = CFAbsoluteTimeGetCurrent();
  v5.n128_u64[1] = 0x7FEFFFFFFFFFFFFFLL;
  int v6 = 0;
  sub_1014481F4(v2, &v5);
  v5.n128_u64[0] = CFAbsoluteTimeGetCurrent();
  v5.n128_u64[1] = 0x7FEFFFFFFFFFFFFFLL;
  int v6 = 1;
  sub_1014482A4(v3, &v5);
  return a1;
}

void sub_1014481D4(_Unwind_Exception *a1)
{
  sub_1000D816C(v2);
  sub_1000D816C(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1014481F4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101448F48(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *double v8 = result;
  ++a1[5];
  return result;
}

__n128 sub_1014482A4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101449260(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *double v8 = result;
  ++a1[5];
  return result;
}

void sub_101448358(uint64_t a1, int a2, int a3, double a4)
{
  int v23 = a2;
  int v7 = sub_1008AFBAC(&v23);
  int v8 = v7;
  if (*(_DWORD *)(a1 + 32) == v7 && *(unsigned char *)a1)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102326660);
    }
    int v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)std::string buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)float64x2_t v25 = 2082;
      *(void *)&v25[2] = "";
      *(_WORD *)&v25[10] = 1025;
      int v26 = v10;
      __int16 v11 = "{\"msg%{public}.0s\":\"On wrist status did not change\", \"status\":%{private}d}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v11, buf, 0x18u);
    }
  }
  else
  {
    *(double *)(a1 + 16) = a4;
    *(_DWORD *)(a1 + 32) = v7;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102326660);
    }
    int v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)std::string buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)float64x2_t v25 = 2082;
      *(void *)&v25[2] = "";
      *(_WORD *)&v25[10] = 1025;
      int v26 = v12;
      __int16 v11 = "{\"msg%{public}.0s\":\"On wrist status changed\", \"status\":%{private}d}";
      goto LABEL_11;
    }
  }
  unint64_t v13 = *(void *)(a1 + 80);
  if (!v13) {
    sub_101AB59BC();
  }
  uint64_t v14 = *(void *)(a1 + 72);
  unint64_t v15 = v14 + v13 - 1;
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8 * (v15 / 0xAA));
  unint64_t v17 = v15 % 0xAA;
  if (v8 != *(_DWORD *)(v16 + 24 * v17 + 16))
  {
    *(double *)(v16 + 24 * v17 + 8) = a4;
    if (v13 >= 0x3C)
    {
      *(void *)(a1 + 72) = v14 + 1;
      *(void *)(a1 + 80) = v13 - 1;
      sub_10041FD7C(a1 + 40, 1);
    }
    *(double *)std::string buf = a4;
    *(void *)float64x2_t v25 = 0x7FEFFFFFFFFFFFFFLL;
    *(_DWORD *)&v25[8] = v8;
    sub_1014486E0((void *)(a1 + 40), (long long *)buf);
  }
  if (*(unsigned __int8 *)(a1 + 3) == a3)
  {
    uint64_t v18 = qword_1024190F0;
    if (*(unsigned char *)(a1 + 1))
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102326660);
      }
      unsigned int v19 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *(unsigned __int8 *)(a1 + 3);
        *(_DWORD *)std::string buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)float64x2_t v25 = 2082;
        *(void *)&v25[2] = "";
        *(_WORD *)&v25[10] = 1025;
        int v26 = v20;
        __int16 v21 = "{\"msg%{public}.0s\":\"On charger status did not change\", \"status\":%{private}d}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, v21, buf, 0x18u);
        goto LABEL_29;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v18 = qword_1024190F0;
  }
  *(double *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 3) = a3;
  *(unsigned char *)(a1 + 1) = 1;
  if (v18 != -1) {
    dispatch_once(&qword_1024190F0, &stru_102326660);
  }
  unsigned int v19 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(unsigned __int8 *)(a1 + 3);
    *(_DWORD *)std::string buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)float64x2_t v25 = 2082;
    *(void *)&v25[2] = "";
    *(_WORD *)&v25[10] = 1025;
    int v26 = v22;
    __int16 v21 = "{\"msg%{public}.0s\":\"On charger status changed\", \"status\":%{private}d}";
    goto LABEL_28;
  }
LABEL_29:
  *(unsigned char *)a1 = 1;
}

uint64_t sub_1014486E0(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101448F48(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  uint64_t v14 = (void *)(v13 + 8 * (v12 / 0xAA));
  uint64_t v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13) {
    uint64_t v15 = 0;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4080;
  }
  return v15 - 24;
}

uint64_t sub_1014487CC(uint64_t result, int a2, double a3)
{
  unint64_t v3 = *(void *)(result + 128);
  if (!v3) {
    sub_101AB5B40();
  }
  uint64_t v5 = *(void *)(result + 120);
  unint64_t v6 = v5 + v3 - 1;
  uint64_t v7 = *(void *)(*(void *)(result + 96) + 8 * (v6 / 0xAA));
  unint64_t v8 = v6 % 0xAA;
  if (*(_DWORD *)(v7 + 24 * v8 + 16) != a2)
  {
    uint64_t v10 = (void *)(result + 88);
    *(double *)(result + 24) = a3;
    *(double *)(v7 + 24 * v8 + 8) = a3;
    if (v3 >= 0xA)
    {
      *(void *)(result + 120) = v5 + 1;
      *(void *)(result + 128) = v3 - 1;
      sub_10041FD7C(result + 88, 1);
    }
    *(double *)&long long v11 = a3;
    *((void *)&v11 + 1) = 0x7FEFFFFFFFFFFFFFLL;
    int v12 = a2;
    return sub_101448898(v10, &v11);
  }
  return result;
}

uint64_t sub_101448898(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101449260(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  uint64_t v14 = (void *)(v13 + 8 * (v12 / 0xAA));
  uint64_t v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13) {
    uint64_t v15 = 0;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4080;
  }
  return v15 - 24;
}

uint64_t sub_101448984(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (CFAbsoluteTimeGetCurrent() <= *(double *)(a1 + 16)
    || ((v31 = 2, int v19 = sub_101448CA4(a3 + a6, a3 + a7, v18, a1 + 40, &v31), *(unsigned char *)(a1 + 2))
      ? (BOOL v20 = v19 == 0)
      : (BOOL v20 = 1),
        v20))
  {
    uint64_t v21 = 0;
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102326660);
    }
    int v22 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = 68289283;
      int v32 = 0;
      __int16 v33 = 2082;
      float64x2_t v34 = "";
      __int16 v35 = 2049;
      double v36 = a3;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Canceling alert because watch goes off-wrist after impact\", \"timeOfImpact\":\"%{private}f\"}", (uint8_t *)&v31, 0x1Cu);
    }
    uint64_t v21 = 2;
  }
  if (CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 16))
  {
    int v31 = 2;
    int v24 = sub_101448D44(a3 + a4, a3 + a5, v23, a1 + 40, &v31);
    if (*(unsigned char *)(a1 + 2))
    {
      if (v24)
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_102326660);
        }
        float64x2_t v25 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 68289283;
          int v32 = 0;
          __int16 v33 = 2082;
          float64x2_t v34 = "";
          __int16 v35 = 2049;
          double v36 = a3;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Canceling alert because watch was off-wrist before impact\", \"timeOfImpact\":\"%{private}f\"}", (uint8_t *)&v31, 0x1Cu);
        }
        uint64_t v21 = 1;
      }
    }
  }
  int v26 = *(unsigned __int8 *)(a2 + 147);
  if (CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 24))
  {
    int v31 = 0;
    int v28 = sub_101448D44(a3 + a8, a3 + a9, v27, a1 + 88, &v31);
    if (!v26 && *(unsigned char *)(a1 + 2) && v28)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102326660);
      }
      float64x2_t v29 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 68289283;
        int v32 = 0;
        __int16 v33 = 2082;
        float64x2_t v34 = "";
        __int16 v35 = 2049;
        double v36 = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Canceling alert because watch was locked and had no motion before impact\", \"timeOfImpact\":\"%{private}f\"}", (uint8_t *)&v31, 0x1Cu);
      }
      return 3;
    }
  }
  return v21;
}

uint64_t sub_101448CA4(double a1, double a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = *(unsigned int *)(a4 + 40);
  uint64_t v6 = *(void *)(a4 + 32) - 1;
  while (1)
  {
    if ((int)v5 < 1) {
      return 0;
    }
    uint64_t v7 = *(void *)(*(void *)(a4 + 8) + 8 * ((v6 + v5) / 0xAAuLL));
    unint64_t v8 = (v6 + v5) % 0xAAuLL;
    long long v9 = (double *)(v7 + 24 * v8);
    double v10 = *v9;
    double v11 = v9[1];
    if (*v9 > v11) {
      return 0;
    }
    BOOL v12 = v10 > a1 || v11 < a1;
    if (!v12 || (v10 <= a2 ? (BOOL v13 = v11 < a2) : (BOOL v13 = 1), !v13 || (v10 >= a1 ? (v14 = v11 > a2) : (v14 = 1), !v14)))
    {
      if (*(_DWORD *)(v7 + 24 * v8 + 16) == *a5) {
        break;
      }
    }
    --v5;
    if (v10 < a1) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_101448D44(double a1, double a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = *(unsigned int *)(a4 + 40);
  uint64_t v6 = *(void *)(a4 + 32) - 1;
  while (1)
  {
    if ((int)v5 < 1) {
      return 0;
    }
    uint64_t v7 = *(void *)(*(void *)(a4 + 8) + 8 * ((v6 + v5) / 0xAAuLL));
    unint64_t v8 = (v6 + v5) % 0xAAuLL;
    long long v9 = (double *)(v7 + 24 * v8);
    double v10 = *v9;
    double v11 = v9[1];
    if (*v9 > v11) {
      return 0;
    }
    BOOL v12 = v11 < a2 || v10 > a2;
    BOOL v13 = v12 || v10 > a1;
    BOOL v14 = v13 || v11 < a1;
    if (!v14 && *(_DWORD *)(v7 + 24 * v8 + 16) == *a5) {
      break;
    }
    --v5;
    if (v10 < a1) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_101448DD4(uint64_t a1, int a2)
{
  double v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 8);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_102326660);
  }
  double v5 = fmax(v4, 0.0);
  uint64_t v6 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 3);
    v10[0] = 68289539;
    v10[1] = 0;
    __int16 v11 = 2082;
    BOOL v12 = "";
    __int16 v13 = 1025;
    int v14 = v7;
    __int16 v15 = 2049;
    double v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against charger status\", \"status\":%{private}d, \"duration\":\"%{private}f\"}", (uint8_t *)v10, 0x22u);
  }
  if (*(unsigned char *)(a1 + 3)) {
    return 1;
  }
  return v5 < (double)a2 && *(unsigned char *)(a1 + 2) != 0;
}

void sub_101448F18(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_101448F48(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float64x2_t v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      float64x2_t v37 = &v34[8 * v36];
      float64x2_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float64x2_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float64x2_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    float64x2_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float64x2_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      float64x2_t v37 = &v34[8 * v47];
      float64x2_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float64x2_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float64x2_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float64x2_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float64x2_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float64x2_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  float64x2_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_101449214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_101449260(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float64x2_t v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      float64x2_t v37 = &v34[8 * v36];
      float64x2_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float64x2_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float64x2_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    float64x2_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float64x2_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      float64x2_t v37 = &v34[8 * v47];
      float64x2_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float64x2_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float64x2_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float64x2_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float64x2_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float64x2_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  float64x2_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10144952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_101449578()
{
  uint64_t v1 = qword_1024190F8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

double sub_101449598(uint64_t a1, uint64_t a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102326708);
  }
  unint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    int v8 = *(_DWORD *)a2;
    int v9 = *(_DWORD *)(a2 + 4);
    uint64_t v10 = *(void *)(a1 + 8);
    *(_DWORD *)std::string buf = 134219266;
    uint64_t v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 1024;
    int v22 = v9;
    __int16 v23 = 2080;
    uint64_t v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Input, HR = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieInputBuffer<CLCatherineData>::add(const CLCatherineData &) [Data_T = CLCatherineData]", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  *(void *)&double result = sub_100507F8C((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

double sub_1014497DC(uint64_t a1, long long *a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102326708);
  }
  unint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v7 = *((void *)a2 + 3);
    uint64_t v9 = *((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7);
    uint64_t v11 = *((void *)a2 + 8);
    uint64_t v12 = *((void *)a2 + 4);
    uint64_t v13 = *((void *)a2 + 5);
    uint64_t v14 = *(void *)(a1 + 8);
    int v15 = *((unsigned __int8 *)a2 + 168);
    *(_DWORD *)std::string buf = 134220546;
    uint64_t v19 = v5;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = v7;
    __int16 v24 = 2048;
    uint64_t v25 = v12;
    __int16 v26 = 2048;
    uint64_t v27 = v9;
    __int16 v28 = 2048;
    uint64_t v29 = v8;
    __int16 v30 = 2048;
    uint64_t v31 = v10;
    __int16 v32 = 2048;
    uint64_t v33 = v11;
    __int16 v34 = 2048;
    uint64_t v35 = v13;
    __int16 v36 = 2080;
    uint64_t v37 = v14;
    __int16 v38 = 1026;
    int v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Input, Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s, trackRunOdometerHasBeenCorrected, %{public}d", buf, 0x6Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieInputBuffer<CLOdometerEntry>::add(const CLOdometerEntry &) [Data_T = CLOdometerEntry]", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  *(void *)&double result = sub_1006B5BA0((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

double sub_101449A8C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 144);
  long long v22 = *(_OWORD *)(a2 + 128);
  long long v23 = v2;
  uint64_t v3 = *(void *)(a2 + 160);
  long long v4 = *(_OWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 64);
  long long v19 = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v20 = *(_OWORD *)(a2 + 96);
  long long v21 = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v14 = *(_OWORD *)a2;
  long long v15 = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v16 = *(_OWORD *)(a2 + 32);
  long long v17 = v7;
  *((void *)&v23 + 1) = 0;
  uint64_t v24 = v3;
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8)
  {
    uint64_t v9 = (double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v8 + *(void *)(a1 + 56) - 1) / 0x18uLL))
                  + 168 * ((v8 + *(void *)(a1 + 56) - 1) % 0x18uLL));
    double v10 = v9[19];
    double v11 = *((double *)&v14 + 1) - v9[1];
    if (v11 > 0.0 && v11 <= *(double *)(a1 + 16)) {
      double v10 = (*((double *)&v15 + 1) - v9[3]) * *((double *)&v22 + 1) / 100.0 / v11;
    }
    *((double *)&v23 + 1) = v10;
  }
  uint64_t v12 = (void *)(a1 + 24);
  sub_101449B80((uint64_t *)&v14);
  *(void *)&double result = sub_101449E54(v12, &v14).n128_u64[0];
  return result;
}

void sub_101449B80(uint64_t *a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102326708);
  }
  long long v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[6];
    uint64_t v10 = a1[7];
    uint64_t v11 = a1[8];
    uint64_t v12 = a1[11];
    uint64_t v13 = a1[14];
    uint64_t v14 = a1[17];
    uint64_t v15 = a1[18];
    uint64_t v16 = a1[19];
    *(_DWORD *)std::string buf = 134221312;
    uint64_t v19 = v3;
    __int16 v20 = 2048;
    uint64_t v21 = v4;
    __int16 v22 = 2048;
    uint64_t v23 = v5;
    __int16 v24 = 2048;
    uint64_t v25 = v6;
    __int16 v26 = 2048;
    uint64_t v27 = v7;
    __int16 v28 = 2048;
    uint64_t v29 = v8;
    __int16 v30 = 2048;
    uint64_t v31 = v9;
    __int16 v32 = 2048;
    uint64_t v33 = v10;
    __int16 v34 = 2048;
    uint64_t v35 = v11;
    __int16 v36 = 2048;
    uint64_t v37 = v12;
    __int16 v38 = 2048;
    uint64_t v39 = v13;
    __int16 v40 = 2048;
    uint64_t v41 = v14;
    __int16 v42 = 2048;
    uint64_t v43 = v15;
    __int16 v44 = 2048;
    uint64_t v45 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fitness Machine datum,startTime,%.3f,elapsedTime,%.3f,calories,%f,distance,%f,elevationAscended,%f,strideCount,%ld,strokeCount,%ld,floors,%ld,speed,%f,cadence,%f,power,%f,incline,%f,resistance,%f,verticalSpeed,%f", buf, 0x8Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void _CLFitnessMachineData::log() const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

__n128 sub_101449E54(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 24 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10144A780(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18);
  long long v9 = *a2;
  long long v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  long long v11 = a2[3];
  long long v12 = a2[4];
  long long v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  __n128 result = (__n128)a2[7];
  long long v15 = a2[8];
  long long v16 = a2[9];
  *(void *)(v8 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  *(__n128 *)(v8 + 112) = result;
  ++a1[5];
  return result;
}

uint64_t sub_101449F2C(uint64_t a1, const char *a2, char a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231C650;
  if (a2) {
    long long v11 = a2;
  }
  else {
    long long v11 = "NatalieInputSrc";
  }
  long long v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_102326690;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 121) = a3;
  sub_1006AE7FC(a1 + 128);
  if (*(unsigned char *)(a1 + 121))
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

void sub_10144A014(_Unwind_Exception *a1)
{
  sub_1012A572C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10144A02C(uint64_t a1, double a2)
{
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  if (sub_1001858D0(a1, (uint64_t)&v21, v20, a2))
  {
    uint64_t v4 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) == *(void *)v22) {
      uint64_t v4 = *(void *)(v22 - 8) + 4096;
    }
    if (!*(_DWORD *)(v4 - 40) && *(double *)(a1 + 104) - *(double *)(a1 + 96) < a2)
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102326708);
      }
      uint64_t v5 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v28 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Input, Elevation, not ready at time, %.2f ", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_102326708);
        }
        int v23 = 134217984;
        double v24 = a2;
LABEL_42:
        long long v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
        return 0;
      }
      return result;
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    long long v9 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *((void *)&v22 + 1);
      if (*((void *)&v22 + 1) == *(void *)v22) {
        uint64_t v10 = *(void *)(v22 - 8) + 4096;
      }
      uint64_t v11 = *(void *)(v10 - 56);
      *(_DWORD *)std::string buf = 134218240;
      double v28 = a2;
      __int16 v29 = 2048;
      uint64_t v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Input, Elevation, ready at time, %.2f, nearest data point at time, %.2f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    uint64_t v12 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) == *(void *)v22) {
      uint64_t v12 = *(void *)(v22 - 8) + 4096;
    }
    uint64_t v13 = *(void *)(v12 - 56);
    int v23 = 134218240;
    double v24 = a2;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
LABEL_55:
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
    return 1;
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7) {
    double v8 = *(double *)(*(void *)(*(void *)(a1 + 32)
  }
                               + (((unint64_t)(v7 + *(void *)(a1 + 56) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v7 + *(void *)(a1 + 56) - 1) & 0x3F) << 6)
                   + 8);
  else {
    double v8 = -1.79769313e308;
  }
  if (!*(unsigned char *)(a1 + 80)
    || v8 >= a2
    || (double v14 = *(double *)(a1 + 16), *(double *)(a1 + 72) - v14 >= a2)
    || v14 + *(double *)(a1 + 88) <= a2
    || (double v15 = *(double *)(a1 + 104),
        v15 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) >= a2))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    long long v18 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      double v28 = a2;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Input, Elevation, ready at time, %.2f, no data point", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    int v23 = 134217984;
    double v24 = a2;
    goto LABEL_55;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102326708);
  }
  long long v16 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Input, Elevation, not ready at time, %.2f ", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102326708);
    }
    int v23 = 134217984;
    double v24 = a2;
    goto LABEL_42;
  }
  return result;
}

uint64_t sub_10144A650(uint64_t a1)
{
  *(void *)a1 = off_102326690;
  sub_1006ABD84((void *)(a1 + 128));
  *(void *)a1 = off_10231C650;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));
  return a1;
}

void sub_10144A6C0(uint64_t a1)
{
  *(void *)a1 = off_102326690;
  sub_1006ABD84((void *)(a1 + 128));
  *(void *)a1 = off_10231C650;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));

  operator delete();
}

void sub_10144A750(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10144A780(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x18;
  unint64_t v4 = v2 - 24;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      float64x2_t v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float64x2_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float64x2_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float64x2_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float64x2_t v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10144AA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10144AAB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_102326728;
  *(void *)(a1 + 8) = 19;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 24) = 0x5000000000;
  *(_OWORD *)(a1 + 1952) = 0u;
  for (uint64_t i = 1992; i != 2184; i += 32)
    *(void *)(a1 + i) = 0;
  *(unsigned char *)(a1 + 2240) = 0;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(void *)(a1 + 2296) = 0;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(void *)(a1 + 2304) = off_102326920;
  *(void *)(a1 + 2328) = a1 + 2304;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = xmmword_101D0BD20;
  *(void *)(a1 + 2368) = 0;
  *(void *)(a1 + 2384) = 0;
  *(void *)(a1 + 2376) = 0;
  *(void *)(a1 + 2392) = a2;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(void *)(a1 + 2464) = 0;
  *(void *)(a1 + 2472) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2480) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2488) = 0;
  *(void *)(a1 + 2496) = 0;
  *(_DWORD *)(a1 + 2504) = 0x80000000;
  *(_OWORD *)(a1 + 2508) = 0u;
  *(_OWORD *)(a1 + 2524) = 0u;
  *(_OWORD *)(a1 + 2540) = 0u;
  *(_OWORD *)(a1 + 2556) = 0u;
  *(_DWORD *)(a1 + 2572) = 0;
  sub_10144AC6C((_DWORD *)a1);
  sub_10144ADE0();
}

void sub_10144AC04(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 2376) = v6;
    operator delete(v6);
  }
  sub_10144C320(v2);
  sub_1003BE294(v3);
  for (uint64_t i = 0; i != -64; i -= 8)
    sub_10144C3A4((uint64_t *)(v1 + 2216 + i), 0);
  uint64_t v8 = 0;
  uint64_t v9 = v1 + 2128;
  do
  {
    sub_10144C320((void *)(v9 + v8));
    v8 -= 32;
  }
  while (v8 != -192);
  _Unwind_Resume(a1);
}

_DWORD *sub_10144AC6C(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  result[488] = 67371265;
  result[489] = 16843009;
  result[490] = 1178289687;
  BOOL v3 = result + 492;
  result[491] = 134744072;
  do
  {
    switch((char)v2)
    {
      case 0:
      case 3:
      case 5:
        v5[0] = off_1023269B0;
        goto LABEL_8;
      case 1:
        unint64_t v4 = off_102326AB0;
        goto LABEL_7;
      case 2:
        unint64_t v4 = off_102326A30;
        goto LABEL_7;
      case 4:
        unint64_t v4 = off_102326B30;
LABEL_7:
        v5[0] = v4;
        v5[1] = v1;
LABEL_8:
        v5[3] = v5;
        sub_10144C0B4(v5, v3);
        BOOL result = sub_10144C320(v5);
        break;
      default:
        break;
    }
    ++v2;
    v3 += 4;
  }
  while (v2 != 6);
  return result;
}

void sub_10144ADE0()
{
}

void sub_10144B32C(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10043C994((uint64_t *)va);
  sub_10144D99C((uint64_t *)va1);
  operator delete();
}

uint64_t sub_10144B38C(uint64_t a1)
{
  if (*(_WORD *)(a1 + 26))
  {
    unint64_t v2 = *(unsigned __int16 *)(a1 + 26) + (unint64_t)*(unsigned __int16 *)(a1 + 24) - 1;
    unint64_t v3 = *(unsigned int *)(a1 + 28);
    if (v2 < v3) {
      unint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(a1 + 24 + 24 * (v2 - v3) + 8);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4;
  sub_1001A34E0(a1, 7, (uint64_t)&v9);
  uint64_t v5 = *(void **)(a1 + 2368);
  if (v5)
  {
    *(void *)(a1 + 2376) = v5;
    operator delete(v5);
  }
  sub_10144C320((void *)(a1 + 2304));
  sub_1003BE294((void *)(a1 + 2248));
  for (uint64_t i = 2216; i != 2152; i -= 8)
    sub_10144C3A4((uint64_t *)(a1 + i), 0);
  for (uint64_t j = 2128; j != 1936; j -= 32)
    sub_10144C320((void *)(a1 + j));
  return a1;
}

double sub_10144B464(uint64_t a1, uint64_t a2)
{
  int v4 = sub_10101439C(a2);
  if (v4 == 1)
  {
    unint64_t v6 = sub_101014448(*(void *)(a2 + 112), *(void *)(a2 + 120));
    if (v6 <= 0x1B && ((1 << v6) & 0x9B28010) != 0)
    {
      double result = *(double *)a2;
      *(void *)(a1 + 2352) = *(void *)a2;
      *(void *)(a1 + 2360) = 0x7FEFFFFFFFFFFFFFLL;
    }
  }
  else if (v4 == 2)
  {
    double result = *(double *)(a1 + 2360);
    if (result == 1.79769313e308)
    {
      double result = *(double *)(a2 + 24);
      *(double *)(a1 + 2360) = result;
    }
  }
  return result;
}

void sub_10144B4F8(uint64_t a1, double a2, double a3)
{
  if (a2 >= a3) {
    double v4 = a2;
  }
  else {
    double v4 = a3;
  }
  if (a2 <= a3) {
    double v5 = a2;
  }
  else {
    double v5 = v4;
  }
  if (a2 <= a3) {
    double v6 = a3;
  }
  else {
    double v6 = v4;
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1023268F0);
  }
  uint64_t v7 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134218240;
    double v22 = v5;
    __int16 v23 = 2048;
    double v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "daylightTimeEstimate,startTime,%f,endTime,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023268F0);
    }
    int64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaylightEstimator::enqueueResult(Result)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  double v8 = *(double *)(a1 + 2336);
  if (v8 < v6) {
    double v8 = v6;
  }
  *(double *)(a1 + 2336) = v8;
  *(double *)(a1 + 2464) = v6 - v5 + *(double *)(a1 + 2464);
  uint64_t v9 = *(double **)(a1 + 2376);
  unint64_t v10 = *(void *)(a1 + 2384);
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = *(double **)(a1 + 2368);
    uint64_t v13 = ((char *)v9 - (char *)v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_1000C571C(a1 + 2384, v16);
      uint64_t v9 = *(double **)(a1 + 2376);
      uint64_t v12 = *(double **)(a1 + 2368);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (double *)&v17[16 * v13];
    uint64_t v19 = &v17[16 * v16];
    *uint64_t v18 = v5;
    v18[1] = v6;
    uint64_t v11 = v18 + 2;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v12);
      uint64_t v12 = *(double **)(a1 + 2368);
    }
    *(void *)(a1 + 2368) = v18;
    *(void *)(a1 + 2376) = v11;
    *(void *)(a1 + 2384) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *uint64_t v9 = v5;
    v9[1] = v6;
    uint64_t v11 = v9 + 2;
  }
  *(void *)(a1 + 2376) = v11;
}

void sub_10144B7CC(uint64_t a1, int a2, int a3, double a4, double a5)
{
  uint64_t v9 = 0;
  memset(&v67, 0, sizeof(v67));
  uint64_t v10 = a1 + 2508;
  do
  {
    std::string::append(&v67, "bin");
    std::to_string(&v122, (int)dword_101E0A548[v9]);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v122;
    }
    else {
      uint64_t v11 = (std::string *)v122.__r_.__value_.__r.__words[0];
    }
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v122.__r_.__value_.__l.__size_;
    }
    std::string::append(&v67, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    std::string::append(&v67, ",");
    std::to_string(&v122, *(_DWORD *)(v10 + v9 * 4));
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v122;
    }
    else {
      uint64_t v13 = (std::string *)v122.__r_.__value_.__r.__words[0];
    }
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = v122.__r_.__value_.__l.__size_;
    }
    std::string::append(&v67, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    std::string::append(&v67, ",");
    ++v9;
  }
  while (v9 != 17);
  uint64_t v15 = *(void *)(a1 + 2496);
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1023268F0);
  }
  unint64_t v16 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v17 = *(void *)(a1 + 2496);
    std::string::size_type v18 = *(void *)(a1 + 2400);
    uint64_t v19 = *(void *)(a1 + 2408);
    uint64_t v20 = *(void *)(a1 + 2416);
    uint64_t v21 = *(void *)(a1 + 2424);
    int v22 = *(_DWORD *)(a1 + 2436);
    int v23 = *(_DWORD *)(a1 + 2432);
    if (v15)
    {
      uint64_t v24 = *(void *)(a1 + 2472);
      uint64_t v25 = *(void *)(a1 + 2480);
      if (v17) {
        double v26 = *(double *)(a1 + 2488) / (double)v17;
      }
      else {
        double v26 = 0.0;
      }
      int v27 = *(_DWORD *)(a1 + 2504);
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v27 = 0;
      double v26 = 0.0;
    }
    uint64_t v28 = &v67;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v28 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    uint64_t v29 = *(void *)(a1 + 32 + 24 * *(unsigned __int16 *)(a1 + 24));
    unint64_t v30 = *(unsigned __int16 *)(a1 + 24) + (unint64_t)*(unsigned __int16 *)(a1 + 26) - 1;
    unint64_t v31 = *(unsigned int *)(a1 + 28);
    if (v30 < v31) {
      unint64_t v31 = 0;
    }
    uint64_t v32 = *(void *)(a1 + 32 + 24 * (v30 - v31));
    uint64_t v33 = *(void *)(a1 + 2224);
    uint64_t v34 = *(void *)(a1 + 2464);
    int v35 = *(_DWORD *)(a1 + 2440);
    int v36 = *(_DWORD *)(a1 + 2444);
    int v37 = *(_DWORD *)(a1 + 2448);
    int v38 = *(_DWORD *)(a1 + 2452);
    int v39 = *(_DWORD *)(a1 + 2456);
    int v40 = *(_DWORD *)(a1 + 2460);
    LODWORD(v122.__r_.__value_.__l.__data_) = 134224642;
    *(std::string::size_type *)((char *)v122.__r_.__value_.__r.__words + 4) = v17;
    WORD2(v122.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 6) = v18;
    HIWORD(v122.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v123 = v19;
    __int16 v124 = 2048;
    uint64_t v125 = v20;
    __int16 v126 = 2048;
    uint64_t v127 = v21;
    __int16 v128 = 1024;
    int v129 = v22;
    __int16 v130 = 1024;
    int v131 = v23;
    __int16 v132 = 2048;
    uint64_t v133 = v24;
    __int16 v134 = 2048;
    uint64_t v135 = v25;
    __int16 v136 = 2048;
    double v137 = v26;
    __int16 v138 = 1024;
    int v139 = v27;
    __int16 v140 = 2080;
    float64x2_t v141 = v28;
    __int16 v142 = 2048;
    uint64_t v143 = v29;
    __int16 v144 = 2048;
    uint64_t v145 = v32;
    __int16 v146 = 2048;
    uint64_t v147 = v33;
    __int16 v148 = 2048;
    double v149 = a4;
    __int16 v150 = 2048;
    double v151 = a5;
    __int16 v152 = 2048;
    double v153 = a5 - a4;
    __int16 v154 = 2048;
    uint64_t v155 = v34;
    __int16 v156 = 1024;
    int v157 = a2;
    __int16 v158 = 1024;
    int v159 = a3;
    __int16 v160 = 1024;
    int v161 = v35;
    __int16 v162 = 1024;
    int v163 = v36;
    __int16 v164 = 1024;
    int v165 = v37;
    __int16 v166 = 1024;
    int v167 = v38;
    __int16 v168 = 1024;
    int v169 = v39;
    __int16 v170 = 1024;
    int v171 = v40;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "DaylightEstimatorStateChange,numOutdoorUpdates,%lu,firstMedConf,%.2f,lastMedConf,%.2f,firstHighConf,%.2f,lastHighConf,%.2f,numMedConf,%d,numHighConf,%d,maxOutdoor,%.2f,minOutdoor,%.2f,meanOutdoor,%.2f,maxLux,%d,%sfrontOfBuffer,%.2f,endOfBuffer,%.2f,currentTime,%.2f,stateStart,%.2f,stateEnd,%.2f,duration,%.2f,daylight,%.2f,from,%d,to,%d,totalEpochs,%d,totalStepEpochs,%d,totalDriving,%d,totalCycling,%d,totalFrozen,%d,totalInWorkout,%d", (uint8_t *)&v122, 0xE4u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v122, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1023268F0);
    }
    unint64_t v41 = *(void *)(a1 + 2496);
    uint64_t v42 = *(void *)(a1 + 2400);
    uint64_t v43 = *(void *)(a1 + 2408);
    uint64_t v44 = *(void *)(a1 + 2416);
    uint64_t v45 = *(void *)(a1 + 2424);
    int v46 = *(_DWORD *)(a1 + 2436);
    int v47 = *(_DWORD *)(a1 + 2432);
    if (v15)
    {
      uint64_t v48 = *(void *)(a1 + 2472);
      uint64_t v49 = *(void *)(a1 + 2480);
      if (v41) {
        double v50 = *(double *)(a1 + 2488) / (double)v41;
      }
      else {
        double v50 = 0.0;
      }
      int v51 = *(_DWORD *)(a1 + 2504);
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      int v51 = 0;
      double v50 = 0.0;
    }
    uint64_t v52 = &v67;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    uint64_t v53 = *(void *)(a1 + 32 + 24 * *(unsigned __int16 *)(a1 + 24));
    unint64_t v54 = *(unsigned __int16 *)(a1 + 24) + (unint64_t)*(unsigned __int16 *)(a1 + 26) - 1;
    unint64_t v55 = *(unsigned int *)(a1 + 28);
    if (v54 < v55) {
      unint64_t v55 = 0;
    }
    uint64_t v56 = *(void *)(a1 + 32 + 24 * (v54 - v55));
    uint64_t v57 = *(void *)(a1 + 2224);
    uint64_t v58 = *(void *)(a1 + 2464);
    int v59 = *(_DWORD *)(a1 + 2440);
    int v60 = *(_DWORD *)(a1 + 2444);
    int v61 = *(_DWORD *)(a1 + 2448);
    int v62 = *(_DWORD *)(a1 + 2452);
    int v63 = *(_DWORD *)(a1 + 2456);
    int v64 = *(_DWORD *)(a1 + 2460);
    int v68 = 134224642;
    unint64_t v69 = v41;
    __int16 v70 = 2048;
    uint64_t v71 = v42;
    __int16 v72 = 2048;
    uint64_t v73 = v43;
    __int16 v74 = 2048;
    uint64_t v75 = v44;
    __int16 v76 = 2048;
    uint64_t v77 = v45;
    __int16 v78 = 1024;
    int v79 = v46;
    __int16 v80 = 1024;
    int v81 = v47;
    __int16 v82 = 2048;
    uint64_t v83 = v48;
    __int16 v84 = 2048;
    uint64_t v85 = v49;
    __int16 v86 = 2048;
    double v87 = v50;
    __int16 v88 = 1024;
    int v89 = v51;
    __int16 v90 = 2080;
    float64x2_t v91 = v52;
    __int16 v92 = 2048;
    uint64_t v93 = v53;
    __int16 v94 = 2048;
    uint64_t v95 = v56;
    __int16 v96 = 2048;
    uint64_t v97 = v57;
    __int16 v98 = 2048;
    double v99 = a4;
    __int16 v100 = 2048;
    double v101 = a5;
    __int16 v102 = 2048;
    double v103 = a5 - a4;
    __int16 v104 = 2048;
    uint64_t v105 = v58;
    __int16 v106 = 1024;
    int v107 = a2;
    __int16 v108 = 1024;
    int v109 = a3;
    __int16 v110 = 1024;
    int v111 = v59;
    __int16 v112 = 1024;
    int v113 = v60;
    __int16 v114 = 1024;
    int v115 = v61;
    __int16 v116 = 1024;
    int v117 = v62;
    __int16 v118 = 1024;
    int v119 = v63;
    __int16 v120 = 1024;
    int v121 = v64;
    uint64_t v65 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaylightEstimator::logStateChange(CFAbsoluteTime, CFAbsoluteTime, State, State) const", "%s\n", (const char *)v65);
    if (v65 != &v122) {
      free(v65);
    }
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
}

void sub_10144BDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10144BE2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2[1];
  *(_DWORD *)(a1 + 8) = *a2;
  sub_10144D904(a1 + 16, a3);
  sub_100ED9118(a1 + 48, a4);
  return a1;
}

void sub_10144BE88(_Unwind_Exception *a1)
{
  sub_10144D99C(v1);
  _Unwind_Resume(a1);
}

void sub_10144BE9C(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void *sub_10144BECC(uint64_t a1, double *a2)
{
  sub_100176E04(a1, *a2);
  sub_10144B4F8(a1, *a2, *a2);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  sub_10144B7CC(a1, *(unsigned __int8 *)(a1 + 2240), *(unsigned __int8 *)(a1 + 16), *(double *)(a1 + 2232), *a2);
  *(void *)(a1 + 2296) = 0;
  *(double *)(a1 + 2232) = *a2;
  *(unsigned char *)(a1 + 2240) = v4;
  *(void *)(a1 + 2464) = 0;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(void *)(a1 + 2472) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2480) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2488) = 0;
  *(void *)(a1 + 2496) = 0;
  *(_DWORD *)(a1 + 2504) = 0x80000000;
  *(_DWORD *)(a1 + 2572) = 0;
  *(_OWORD *)(a1 + 2556) = 0u;
  *(_OWORD *)(a1 + 2540) = 0u;
  *(_OWORD *)(a1 + 2524) = 0u;
  *(_OWORD *)(a1 + 2508) = 0u;

  return sub_10144BFA8((void *)(a1 + 2304), a1 + 32 * v4 + 1968);
}

void *sub_10144BFA8(void *a1, uint64_t a2)
{
  sub_10144C01C((uint64_t)v4, a2);
  sub_10144C0B4(v4, a1);
  sub_10144C320(v4);
  return a1;
}

uint64_t sub_10144C01C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10144C0B4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    double v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        long long v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        long long v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        long long v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      long long v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10144C314(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10144C320(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10144C3A4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    sub_10043C994((void *)(v2 + 48));
    sub_10144D99C((void *)(v2 + 16));
    operator delete();
  }
  return result;
}

void sub_10144C40C()
{
}

void *sub_10144C420()
{
  double result = operator new(0x10uLL);
  *double result = off_102326920;
  return result;
}

void sub_10144C458(uint64_t a1, void *a2)
{
  *a2 = off_102326920;
}

double sub_10144C480()
{
  return 1.79769313e308;
}

uint64_t sub_10144C494(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102326990)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10144C4D4()
{
  return &off_102326990;
}

void sub_10144C4E4()
{
}

void *sub_10144C4F8()
{
  double result = operator new(0x10uLL);
  *double result = off_1023269B0;
  return result;
}

void sub_10144C530(uint64_t a1, void *a2)
{
  *a2 = off_1023269B0;
}

uint64_t sub_10144C558(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10144C598()
{
}

void sub_10144C5A8()
{
}

void *sub_10144C5BC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326A30;
  result[1] = v3;
  return result;
}

uint64_t sub_10144C604(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326A30;
  a2[1] = v2;
  return result;
}

double sub_10144C630(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return v2 + -150.0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  double result = *(double *)(v4 + 2352);
  if (v2 < result) {
    return 1.79769313e308;
  }
  if (v2 > *(double *)(v4 + 2360) || *(unsigned char *)(a2 + 32) == 0) {
    return 1.79769313e308;
  }
  return result;
}

uint64_t sub_10144C6B8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10144C6F8()
{
}

void sub_10144C708()
{
}

void *sub_10144C71C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326AB0;
  result[1] = v3;
  return result;
}

uint64_t sub_10144C764(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326AB0;
  a2[1] = v2;
  return result;
}

double sub_10144C790(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return v2 + -450.0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  double result = *(double *)(v4 + 2352);
  if (v2 < result) {
    return 1.79769313e308;
  }
  if (v2 > *(double *)(v4 + 2360) || *(unsigned char *)(a2 + 32) == 0) {
    return 1.79769313e308;
  }
  return result;
}

uint64_t sub_10144C818(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10144C858()
{
}

void sub_10144C868()
{
}

void *sub_10144C87C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326B30;
  result[1] = v3;
  return result;
}

uint64_t sub_10144C8C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326B30;
  a2[1] = v2;
  return result;
}

double sub_10144C8F0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return v2 + -900.0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  double result = *(double *)(v4 + 2352);
  if (v2 < result) {
    return 1.79769313e308;
  }
  if (v2 > *(double *)(v4 + 2360) || *(unsigned char *)(a2 + 32) == 0) {
    return 1.79769313e308;
  }
  return result;
}

uint64_t sub_10144C978(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10144C9B8()
{
}

void sub_10144C9C4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10144CC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10144CCE0()
{
}

void *sub_10144CCF4()
{
  double result = operator new(0x10uLL);
  *double result = off_102326BB0;
  return result;
}

void sub_10144CD2C(uint64_t a1, void *a2)
{
  *a2 = off_102326BB0;
}

uint64_t sub_10144CD54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144CD94()
{
}

void sub_10144CDA4()
{
}

void *sub_10144CDB8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326C40;
  result[1] = v3;
  return result;
}

uint64_t sub_10144CE00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326C40;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144CE2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  return sub_1001A34E0(v2, 1, (uint64_t)&v4);
}

uint64_t sub_10144CE60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144CEA0()
{
}

void sub_10144CEB0()
{
}

void *sub_10144CEC4()
{
  double result = operator new(0x10uLL);
  *double result = off_102326CC0;
  return result;
}

void sub_10144CEFC(uint64_t a1, void *a2)
{
  *a2 = off_102326CC0;
}

uint64_t sub_10144CF24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144CF64()
{
}

void sub_10144CF74()
{
}

void *sub_10144CF88(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326D40;
  result[1] = v3;
  return result;
}

uint64_t sub_10144CFD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326D40;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144CFFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D03C()
{
}

void sub_10144D04C()
{
}

void *sub_10144D060()
{
  double result = operator new(0x10uLL);
  *double result = off_102326DC0;
  return result;
}

void sub_10144D098(uint64_t a1, void *a2)
{
  *a2 = off_102326DC0;
}

uint64_t sub_10144D0C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D100()
{
}

void sub_10144D110()
{
}

void *sub_10144D124(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326E40;
  result[1] = v3;
  return result;
}

uint64_t sub_10144D16C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326E40;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144D198(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  return sub_1001A34E0(v2, 3, (uint64_t)&v4);
}

uint64_t sub_10144D1CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D20C()
{
}

void sub_10144D21C()
{
}

void *sub_10144D230()
{
  double result = operator new(0x10uLL);
  *double result = off_102326EC0;
  return result;
}

void sub_10144D268(uint64_t a1, void *a2)
{
  *a2 = off_102326EC0;
}

uint64_t sub_10144D290(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D2D0()
{
}

void sub_10144D2E0()
{
}

void *sub_10144D2F4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326F40;
  result[1] = v3;
  return result;
}

uint64_t sub_10144D33C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326F40;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144D368(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D3A8()
{
}

void sub_10144D3B8()
{
}

void *sub_10144D3CC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102326FC0;
  result[1] = v3;
  return result;
}

uint64_t sub_10144D414(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102326FC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144D440(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  return sub_1001A34E0(v2, 5, (uint64_t)&v4);
}

uint64_t sub_10144D474(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D4B4()
{
}

void sub_10144D4C4()
{
}

void *sub_10144D4D8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102327040;
  result[1] = v3;
  return result;
}

uint64_t sub_10144D520(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102327040;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144D54C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D58C()
{
}

void sub_10144D59C()
{
}

void *sub_10144D5B0()
{
  double result = operator new(0x10uLL);
  *double result = off_1023270C0;
  return result;
}

void sub_10144D5E8(uint64_t a1, void *a2)
{
  *a2 = off_1023270C0;
}

uint64_t sub_10144D610(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D650()
{
}

void sub_10144D660()
{
}

void *sub_10144D674(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102327140;
  result[1] = v3;
  return result;
}

uint64_t sub_10144D6BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102327140;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144D6E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D728()
{
}

void sub_10144D738()
{
}

void *sub_10144D74C()
{
  double result = operator new(0x10uLL);
  *double result = off_1023271C0;
  return result;
}

void sub_10144D784(uint64_t a1, void *a2)
{
  *a2 = off_1023271C0;
}

uint64_t sub_10144D7AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D7EC()
{
}

void sub_10144D7FC()
{
}

void *sub_10144D810(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102327240;
  result[1] = v3;
  return result;
}

uint64_t sub_10144D858(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102327240;
  a2[1] = v2;
  return result;
}

uint64_t sub_10144D884(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  return sub_1001A34E0(v2, 8, (uint64_t)&v4);
}

uint64_t sub_10144D8B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10144D8F8()
{
}

uint64_t sub_10144D904(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10144D99C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10144DA20(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10144DA50(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102487C30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102487C30))
  {
    __cxa_atexit((void (*)(void *))sub_10144DB0C, &xmmword_102487C20, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102487C30);
  }
  if (qword_102487C38 != -1) {
    dispatch_once(&qword_102487C38, &stru_1023272D0);
  }
  uint64_t v2 = *((void *)&xmmword_102487C20 + 1);
  *a1 = xmmword_102487C20;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t sub_10144DB0C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_10144DB3C(id a1)
{
}

void sub_10144DBA0(uint64_t a1)
{
  *(void *)a1 = off_102327300;
  uint64_t v2 = qword_102487C10;
  *(void *)(a1 + 8) = off_102327358;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = qword_102487C18;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = 200;
  *(_WORD *)(a1 + 52) = 0;
  sub_100513074(a1 + 56, "CLWifiAccessPointLocationService", 1, 1);
  *(_DWORD *)(a1 + 72) = 0;
  operator new();
}

void sub_10144E290(_Unwind_Exception *a1)
{
  sub_1014553E8(v2 + 19, 0);
  uint64_t v9 = (std::__shared_weak_count *)v2[18];
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1006FE1A8(v6, *v7);
  sub_1013719D4(v5);
  sub_101455198(v4, 0);
  uint64_t v10 = *v3;
  uint64_t *v3 = 0;
  if (v10) {
    sub_10145544C((uint64_t)v3, v10);
  }
  uint64_t v11 = v2[10];
  v2[10] = 0;
  if (v11) {
    operator delete();
  }
  sub_10051310C(v1);
  _Unwind_Resume(a1);
}

void sub_10144E3A4(uint64_t a1)
{
  uint64_t v9 = 0;
  sub_1000C7F88(buf);
  int v2 = sub_1000A699C(*(uint64_t *)buf, "MaxTileAge", &v9);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v2) {
    *(void *)(a1 + 16) = v9;
  }
  sub_1000C7F88(buf);
  sub_1004D0870(*(uint64_t *)buf, "MaxNumOfTiles", (_DWORD *)(a1 + 48));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  sub_1004D0B90(*(uint64_t *)buf, "WifiLocationSizeLimit", (void *)(a1 + 40));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
  uint64_t v3 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "tiles defaults applied, maxTileAccessAge, %.0f, maxTileCount, %du", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    uint64_t v6 = *(void *)(a1 + 16);
    int v7 = *(_DWORD *)(a1 + 48);
    int v10 = 134218240;
    uint64_t v11 = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAccessPointLocationService::processDefaultsWrites()", "%s\n", v8);
    if (v8 != buf) {
      free(v8);
    }
  }
}

void sub_10144E610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10144E638(uint64_t a1, void *a2, void *a3)
{
  *a2 = 0;
  *a3 = 0;
  operator new();
}

void sub_10144E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1014554E4(&a9, 0);
  sub_10121DC20(&a10, 0);
  uint64_t v18 = a11;
  a11 = 0;
  if (v18) {
    sub_10145544C((uint64_t)&a11, v18);
  }
  _Unwind_Resume(a1);
}

void sub_10144E7A8()
{
}

void sub_10144E858(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operator delete();
}

void sub_10144E8AC()
{
}

void sub_10144E94C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operator delete();
}

void sub_10144E9A0()
{
  char v0 = 1;
  sub_10144E7A8();
}

void sub_10144EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10121DC20(&a10, 0);
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    sub_10145544C((uint64_t)&a12, v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10144EA74(uint64_t a1)
{
  *(void *)a1 = off_102327300;
  *(void *)(a1 + 8) = off_102327358;
  int v2 = *(void **)(a1 + 160);
  if (v2)
  {

    *(void *)(a1 + 160) = 0;
  }
  sub_1014553E8((uint64_t *)(a1 + 152), 0);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 144);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1006FE1A8(a1 + 112, *(void **)(a1 + 120));
  sub_1013719D4((uint64_t *)(a1 + 104));
  sub_101455198((uint64_t **)(a1 + 96), 0);
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    sub_10145544C(a1 + 88, v4);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v5) {
    operator delete();
  }
  sub_10051310C(a1 + 56);
  return a1;
}

uint64_t sub_10144EB60(uint64_t a1)
{
  return sub_10144EA74(a1 - 8);
}

void sub_10144EB68(uint64_t a1)
{
  sub_10144EA74(a1);

  operator delete();
}

void sub_10144EBA0(uint64_t a1)
{
  sub_10144EA74(a1 - 8);

  operator delete();
}

void sub_10144EBDC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = a1[7];
  uint64_t v36 = a1 + 7;
  (*(void (**)(void))(v10 + 16))();
  __int16 v38 = 256;
  long long __p = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  uint64_t v11 = *(void **)a2;
  __int16 v12 = *(void **)(a2 + 8);
  if (*(void **)a2 != v12)
  {
    do
    {
      uint64_t v13 = (void **)*v11;
      BOOL v14 = v34;
      if (v34 >= v35)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v34 - (unsigned char *)__p) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v19 = v35 - (unsigned char *)__p;
        if ((v35 - (unsigned char *)__p) >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_1000DA54C((uint64_t)&v35, v20);
          uint64_t v16 = (char *)__p;
          BOOL v14 = v34;
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[8 * v17];
        *(void *)unint64_t v22 = v13;
        uint64_t v15 = v22 + 8;
        while (v14 != v16)
        {
          uint64_t v23 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v22 - 1) = v23;
          v22 -= 8;
        }
        long long __p = v22;
        uint64_t v34 = v15;
        int v35 = &v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)uint64_t v34 = v13;
        uint64_t v15 = v14 + 8;
      }
      uint64_t v34 = v15;
      uint64_t v29 = (void **)*v11;
      sub_100FED428((uint64_t)v31, &v29, &v29, (uint64_t)v11);
      v11 += 11;
    }
    while (v11 != v12);
  }
  (*(void (**)(void ***__return_ptr, void *, void **, uint64_t, double))(*a1 + 16))(&v29, a1, &__p, a3, a5);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = a4 + 8;
  uint64_t v24 = v29;
  if (v29 != v30)
  {
    do
    {
      unint64_t v25 = sub_10058A478(v31, v24 + 4);
      if (!v25) {
        sub_10000EDDC("unordered_map::at: key not found");
      }
      sub_101455534((uint64_t **)a4, v25 + 3, (uint64_t)(v25 + 3), (long long *)(v24 + 5));
      uint64_t v26 = v24[1];
      if (v26)
      {
        do
        {
          int v27 = (void **)v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (void **)v24[2];
          BOOL v28 = *v27 == v24;
          uint64_t v24 = v27;
        }
        while (!v28);
      }
      uint64_t v24 = v27;
    }
    while (v27 != v30);
  }
  sub_1000F5BB0((uint64_t)&v29, v30[0]);
  sub_1000D82B4((uint64_t)v31);
  if (__p)
  {
    uint64_t v34 = (char *)__p;
    operator delete(__p);
  }
  if (HIBYTE(v38))
  {
    if ((_BYTE)v38) {
      pthread_mutex_unlock(v37);
    }
    else {
      (*(void (**)(void *))(*v36 + 24))(v36);
    }
  }
}

void sub_10144EEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_10144EF04(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  v47[0] = 0;
  v47[1] = 0;
  unint64_t v46 = (uint64_t *)v47;
  uint64_t v9 = *(void **)a3;
  double v8 = *(void **)(a3 + 8);
  if (*(void **)a3 != v8)
  {
    do
    {
      *(void *)std::string buf = v9;
      uint64_t v10 = sub_1014556E8(&v46, v9, (uint64_t)&unk_101D0B290, (void **)buf);
      if (*((unsigned char *)v10 + 60)) {
        *((unsigned char *)v10 + 60) = 0;
      }
      ++v9;
    }
    while (v9 != v8);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102327408);
  }
  uint64_t v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v12 = -1431655765 * ((a2[1] - *a2) >> 4);
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tilesearch, num tiles, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102327408);
    }
    int v44 = -1431655765 * ((a2[1] - *a2) >> 4);
    LODWORD(__p) = 67240192;
    HIDWORD(__p) = v44;
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiAccessPointLocationService::_searchTilesForMacs(const std::vector<TileId> &, const std::vector<CLMacAddress> &) const", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  if (*a2 != a2[1])
  {
    long long __p = 0;
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    BOOL v14 = *(void **)a3;
    uint64_t v13 = *(void **)(a3 + 8);
    if (*(void **)a3 != v13)
    {
      do
      {
        if (v47 == sub_100529674((uint64_t)&v46, v14))
        {
          sub_101AB5CC4();
          abort_report_np();
          __break(1u);
        }
        if (!*(unsigned char *)(sub_1005294BC((uint64_t)&v46, v14) + 20))
        {
          uint64_t v15 = v49;
          if ((unint64_t)v49 >= v50)
          {
            uint64_t v17 = __p;
            int64_t v18 = (v49 - (unsigned char *)__p) >> 3;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v20 = v50 - (void)__p;
            if ((uint64_t)(v50 - (void)__p) >> 2 > v19) {
              unint64_t v19 = v20 >> 2;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              unint64_t v22 = (char *)sub_1000DA54C((uint64_t)&v50, v21);
              uint64_t v17 = __p;
              uint64_t v15 = v49;
            }
            else
            {
              unint64_t v22 = 0;
            }
            uint64_t v23 = &v22[8 * v18];
            *(void *)uint64_t v23 = *v14;
            uint64_t v16 = v23 + 8;
            while (v15 != v17)
            {
              uint64_t v24 = *((void *)v15 - 1);
              v15 -= 8;
              *((void *)v23 - 1) = v24;
              v23 -= 8;
            }
            long long __p = v23;
            uint64_t v49 = v16;
            unint64_t v50 = (unint64_t)&v22[8 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(void *)uint64_t v49 = *v14;
            uint64_t v16 = v15 + 8;
          }
          uint64_t v49 = v16;
        }
        ++v14;
      }
      while (v14 != v13);
      if (__p != v49) {
        sub_10121EB34(*(uint64_t **)(a1 + 96));
      }
      if (v49) {
        operator delete(v49);
      }
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v25 = *(void **)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = sub_1005294BC((uint64_t)&v46, &v25[v26]);
      uint64_t v28 = v27;
      long long v30 = (char *)a4[1];
      uint64_t v29 = (char *)a4[2];
      if (v30 >= v29)
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (unsigned char *)*a4) >> 3);
        unint64_t v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (unsigned char *)*a4) >> 3);
        if (2 * v35 > v34) {
          unint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x555555555555555) {
          unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36) {
          int v37 = (char *)sub_1000DA5D8((uint64_t)(a4 + 2), v36);
        }
        else {
          int v37 = 0;
        }
        __int16 v38 = &v37[24 * v33];
        long long v39 = *(_OWORD *)v28;
        *((void *)v38 + 2) = *(void *)(v28 + 16);
        *(_OWORD *)__int16 v38 = v39;
        unint64_t v41 = (char *)*a4;
        uint64_t v40 = (char *)a4[1];
        uint64_t v42 = v38;
        if (v40 != *a4)
        {
          do
          {
            long long v43 = *(_OWORD *)(v40 - 24);
            *((void *)v42 - 1) = *((void *)v40 - 1);
            *(_OWORD *)(v42 - 24) = v43;
            v42 -= 24;
            v40 -= 24;
          }
          while (v40 != v41);
          uint64_t v40 = (char *)*a4;
        }
        int v32 = v38 + 24;
        *a4 = v42;
        a4[1] = v38 + 24;
        a4[2] = &v37[24 * v36];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        long long v31 = *(_OWORD *)v27;
        *((void *)v30 + 2) = *(void *)(v27 + 16);
        *(_OWORD *)long long v30 = v31;
        int v32 = v30 + 24;
      }
      a4[1] = v32;
      ++v26;
      unint64_t v25 = *(void **)a3;
    }
    while (v26 < (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  }
  sub_1000F5BB0((uint64_t)&v46, v47[0]);
}

void sub_10144F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
}

void sub_10144F7C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v68 = a1 + 56;
  (*(void (**)(void))(v10 + 16))();
  *(void *)(a4 + 8) = 0;
  uint64_t v11 = (double *)(a4 + 8);
  __int16 v70 = 256;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  if (*a2 == a2[1])
  {
LABEL_58:
    if ((_BYTE)v70) {
      pthread_mutex_unlock(v69);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v68 + 24))(v68);
    }
    return;
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 32))(buf, a1, a2);
  sub_1000F5BB0(a4, *(void **)(a4 + 8));
  int v12 = *(void **)&buf[8];
  *(void *)a4 = *(void *)buf;
  *(void *)(a4 + 8) = v12;
  uint64_t v13 = *(void *)&buf[16];
  *(void *)(a4 + 16) = *(void *)&buf[16];
  if (v13)
  {
    _DWORD v12[2] = v11;
    *(void *)std::string buf = &buf[8];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    int v12 = 0;
  }
  else
  {
    *(void *)a4 = v11;
  }
  sub_1000F5BB0((uint64_t)buf, v12);
  int v51 = *(_DWORD *)(a4 + 16);
  long long v14 = *(_OWORD *)(a3 + 112);
  long long v65 = *(_OWORD *)(a3 + 96);
  long long v66 = v14;
  *(_OWORD *)std::string v67 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)&v67[12] = *(_OWORD *)(a3 + 140);
  long long v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v64[32] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v64[48] = v15;
  long long v16 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v64[64] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)&v64[80] = v16;
  long long v17 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)int v64 = *(_OWORD *)a3;
  *(_OWORD *)&v64[16] = v17;
  double v18 = (double)((unint64_t)3600.0 >> 1);
  if (*(double *)(a3 + 20) <= 0.0 || a5 - *(double *)(a3 + 76) >= v18)
  {
    unint64_t v19 = *(double **)a4;
    if (*(double **)a4 != v11)
    {
      while (1)
      {
        if (!sub_10106EB0C((uint64_t)(v19 + 5)))
        {
          double v20 = v19[9];
          if (v20 > 0.0 && a5 - a5 < v18) {
            break;
          }
        }
        unint64_t v22 = (double *)*((void *)v19 + 1);
        if (v22)
        {
          do
          {
            uint64_t v23 = v22;
            unint64_t v22 = *(double **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            uint64_t v23 = (double *)*((void *)v19 + 2);
            _ZF = *(void *)v23 == (void)v19;
            unint64_t v19 = v23;
          }
          while (!_ZF);
        }
        unint64_t v19 = v23;
        if (v23 == v11) {
          goto LABEL_25;
        }
      }
      long long v25 = *((_OWORD *)v19 + 3);
      long long v65 = 0uLL;
      memset(v67, 0, 25);
      *(_OWORD *)&v64[4] = v25;
      *(double *)&v64[20] = v20;
      *(_OWORD *)&v64[28] = xmmword_101D1C570;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v64[44] = _Q0;
      *(_OWORD *)&v64[60] = _Q0;
      *(double *)&v64[76] = a5;
      *(_DWORD *)int v64 = 0xFFFF;
      *(_DWORD *)&v64[84] = 0;
      *(void *)&v64[88] = 0xBFF0000000000000;
      *(void *)((char *)&v66 + 4) = 0xBFF0000000000000;
      LODWORD(v66) = 0;
      HIDWORD(v66) = 0x7FFFFFFF;
      *(_WORD *)&v67[25] = v75;
      v67[27] = BYTE2(v75);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023273C8);
      }
      a3 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)a3, OS_LOG_TYPE_INFO, "@TileSearch, wifi, use ALS results for location hint", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023273C8);
        }
        v54[0] = 0;
        a3 = _os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", (const char *)a3);
        if ((unsigned char *)a3 != buf) {
          free((void *)a3);
        }
      }
    }
  }
LABEL_25:
  sub_101371A28((void *)(a1 + 104), a2, a1 + 8, &v62, a5);
  uint64_t v29 = *a2;
  uint64_t v30 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v63 - (unsigned char *)v62) >> 3) != (v30 - *a2) >> 3)
  {
    uint64_t v45 = &qword_102419000;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102327408);
    }
    uint64_t v42 = &qword_102419000;
    uint64_t v41 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = (a2[1] - *a2) >> 3;
      *(_DWORD *)std::string buf = 134349312;
      *(void *)&uint8_t buf[4] = v49;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v63 - (unsigned char *)v62) >> 3);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v41, OS_LOG_TYPE_ERROR, "expecting equal length, input, %{public}lu, output, %{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102327408);
      }
      uint64_t v50 = (a2[1] - *a2) >> 3;
      int v75 = 134349312;
      uint64_t v76 = v50;
      __int16 v77 = 2050;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (unsigned char *)v62) >> 3);
      uint64_t v45 = (uint64_t *)buf;
      a2 = (uint64_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", (const char *)a2);
      if (a2 != (uint64_t *)buf) {
        free(a2);
      }
    }
    sub_101AB5E20();
    abort_report_np();
    __break(1u);
LABEL_75:
    dispatch_once(&qword_1024193A0, &stru_1023273C8);
LABEL_63:
    unint64_t v47 = (unint64_t)(a2[1] - *a2) >> 3;
    int v75 = 67240704;
    LODWORD(v76) = v47;
    WORD2(v76) = 1026;
    *(_DWORD *)((char *)v45 + 218) = a3;
    LOWORD(v78) = 1026;
    *(_DWORD *)((char *)&v78 + 2) = v42;
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", v48);
    if (v48 != buf) {
      free(v48);
    }
    goto LABEL_53;
  }
  v61[0] = 0;
  v61[1] = 0;
  v59[1] = 0;
  int v60 = (uint64_t *)v61;
  uint64_t v58 = v59;
  v59[0] = 0;
  if (v30 != v29)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    int v52 = 0;
    while (1)
    {
      unint64_t v34 = (char *)v62 + v32;
      if (*((unsigned char *)v62 + v32 + 20))
      {
        unint64_t v35 = (uint64_t *)(v29 + v31);
        unsigned int v36 = *(_DWORD *)(v34 + 6);
        uint64_t v37 = *(void *)(v34 + 12);
        if (v11 == (double *)sub_100529674(a4, (void *)(v29 + v31))) {
          break;
        }
      }
LABEL_36:
      ++v33;
      uint64_t v29 = *a2;
      v31 += 8;
      v32 += 24;
      if (v33 >= (a2[1] - *a2) >> 3) {
        goto LABEL_48;
      }
    }
    uint64_t v57 = v37;
    sub_100C09054((uint64_t)v54, 0, v37, SHIDWORD(v37));
    sub_10014F464((uint64_t **)&v58, (uint64_t)v54, (uint64_t)v54);
    if (v61 == (void **)sub_101455778((uint64_t)&v60, (int *)&v57))
    {
      sub_10121EB64(*(uint64_t **)(a1 + 96), &v75);
      if (!v79)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023273C8);
        }
        long long v39 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 67174913;
          *(_DWORD *)&uint8_t buf[4] = v57;
          *(_WORD *)&uint8_t buf[8] = 1025;
          *(_DWORD *)&buf[10] = HIDWORD(v57);
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "tile header missing from returned mac, x, %{private}d, y, %{private}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023273C8);
          }
          int v71 = 67174913;
          int v72 = v57;
          __int16 v73 = 1025;
          int v74 = HIDWORD(v57);
          uint64_t v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", v40);
          if (v40 != buf) {
            free(v40);
          }
        }
        goto LABEL_34;
      }
      sub_1014557EC(&v60, (int *)&v57, &v57, (long long *)&v75);
      ++v52;
    }
    uint64_t v38 = sub_1014503D4((uint64_t)&v60, (int *)&v57);
    sub_101010EAC((uint64_t)&v75, *v35, (v36 >> 12) & 0xFFF, v36 & 0xFFF, HIBYTE(v36) & 0xF, v36 >> 28);
    sub_101450414(v38, (uint64_t)&v75, (uint64_t)buf);
    sub_10052952C((uint64_t **)a4, v35, v35, buf);
LABEL_34:
    if (v56 < 0) {
      operator delete(__p);
    }
    goto LABEL_36;
  }
  int v52 = 0;
LABEL_48:
  uint64_t v41 = a1;
  sub_10014B230(a1, &v58, (unint64_t)*(double *)&qword_102477288, v53, a5);
  LODWORD(v42) = v51;
  LODWORD(a3) = v52;
  *(void *)std::string buf = v53;
  sub_10017C62C((void ***)buf);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023273C8);
  }
  long long v43 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    unint64_t v44 = (unint64_t)(a2[1] - *a2) >> 3;
    *(_DWORD *)std::string buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v44;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v52;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = v51;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "@TileSearch, wifi, results, searched, %{public}d, in_tiles, %{public}d, ALS, %{public}d", buf, 0x14u);
  }
  uint64_t v45 = (uint64_t *)v64;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_63;
    }
    goto LABEL_75;
  }
LABEL_53:
  sub_100611E80(*(_DWORD **)(v41 + 80), (unint64_t)(a2[1] - *a2) >> 3, (int)v42, a3);
  uint64_t v46 = *(void *)(v41 + 152);
  if (v46) {
    sub_1005291A4(v46, (void *)a4);
  }
  sub_10014F400((uint64_t)&v58, v59[0]);
  sub_1000F5BB0((uint64_t)&v60, v61[0]);
  if (v62)
  {
    int v63 = v62;
    operator delete(v62);
  }
  if (HIBYTE(v70)) {
    goto LABEL_58;
  }
}

void sub_101450314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_1000F5BB0(v61, *(void **)(v61 + 8));
  sub_1019DB560((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1014503D4(uint64_t a1, int *a2)
{
  uint64_t v2 = *sub_1014558B4(a1, &v4, a2);
  if (!v2) {
    sub_10000EDDC("map::at:  key not found");
  }
  return v2 + 40;
}

uint64_t sub_101450414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = sub_101010EF4(a2);
  double v7 = sub_100C8D894(a1);
  double v8 = sub_100B0AA48(a1);
  double v9 = v7 + (double)v6 * 0.000244140625 * v8 + v8 * 0.000244140625 * 0.5;
  unsigned int v10 = sub_101010EEC(a2);
  double v11 = sub_100B0AA40(a1);
  double v12 = sub_100B0AA50(a1);
  double v13 = v11 + (double)v10 * 0.000244140625 * v12 + v12 * 0.000244140625 * 0.5;
  double v14 = sub_1000E6F24(a1);
  unsigned int v15 = sub_101010ED4(a2);
  double v16 = sub_1010AC6C8(v15);
  double v17 = sub_100939FB0(a1);
  double v18 = vabdd_f64(v17, sub_100C8D89C(a1));
  unsigned int v19 = sub_101010EDC(a2);
  double v20 = sub_1010AC6E4(v19);
  double v21 = sub_100C8D8A4(a1);
  uint64_t v22 = sub_101010EE4(a2);
  uint64_t result = sub_10106DFF4(a3, v22, (int)v20, -1, 0, 64, -1, v9, v13, v14, v16, v18, v21);
  *(unsigned char *)(a3 + 88) = 1;
  return result;
}

void sub_101450580(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>, double a6@<D0>)
{
  int v63 = 0;
  uint64_t v64 = 0;
  int v62 = (uint64_t *)&v63;
  memset(v61, 0, sizeof(v61));
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  sub_100181F80(a1, v58);
  sub_10014E7F8((int *)(a1 + 72), (double **)v58, a3, buf, a6);
  int v51 = (int *)(a1 + 72);
  long long v55 = v61;
  char v56 = v60;
  uint64_t v57 = v59;
  sub_101455934((uint64_t **)&v55, (uint64_t)buf);
  long long v55 = &v69;
  sub_10014FEE0((void ***)&v55);
  long long v55 = &v68;
  sub_10014FEE0((void ***)&v55);
  long long v55 = buf;
  sub_10014FEE0((void ***)&v55);
  uint64_t v50 = a1;
  sub_10144EF04(a1, v61, (uint64_t)a2, &v55);
  long long __p = 0;
  uint64_t v53 = 0;
  long long v54 = 0;
  uint64_t v12 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v13 = 0;
    do
    {
      double v14 = (void *)(v12 + 8 * v13);
      unsigned int v15 = (char *)v55 + 24 * v13;
      if (v15[20])
      {
        v65[0] = (uint64_t *)(v12 + 8 * v13);
        double v16 = sub_101372990(&v62, v14, (uint64_t)&unk_101D0B290, v65);
        uint64_t v17 = *(void *)v15;
        v16[24] = *((_WORD *)v15 + 4);
        *((void *)v16 + 5) = v17;
        *(void *)(v16 + 26) = *(void *)(v15 + 12);
      }
      else
      {
        double v18 = v53;
        if (v53 >= v54)
        {
          double v20 = (char *)__p;
          uint64_t v21 = (v53 - (unsigned char *)__p) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v23 = v54 - (unsigned char *)__p;
          if ((v54 - (unsigned char *)__p) >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            long long v25 = (char *)sub_1000DA54C((uint64_t)&v54, v24);
            double v20 = (char *)__p;
            double v18 = v53;
          }
          else
          {
            long long v25 = 0;
          }
          unint64_t v26 = &v25[8 * v21];
          *(void *)unint64_t v26 = *v14;
          unsigned int v19 = v26 + 8;
          while (v18 != v20)
          {
            uint64_t v27 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v26 - 1) = v27;
            v26 -= 8;
          }
          long long __p = v26;
          uint64_t v53 = v19;
          long long v54 = &v25[8 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)uint64_t v53 = *v14;
          unsigned int v19 = v18 + 8;
        }
        uint64_t v53 = v19;
      }
      ++v13;
      uint64_t v12 = *a2;
    }
    while (v13 < (a2[1] - *a2) >> 3);
  }
  uint64_t v28 = v64;
  if (a4)
  {
    uint64_t v29 = v51;
    if (v64)
    {
LABEL_39:
      sub_101450E38(v29, (uint64_t)"Hit");
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v29 = v51;
    if (!v64)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
      uint64_t v30 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "No Mac addresses found in neighbor list, will search remaining tiles", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1023273E8);
        }
        LOWORD(v65[0]) = 0;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiAccessPointLocationService::findCentroidsInTiles(const std::vector<CLMacAddress> &, const CLDaemonLocation &, uint32_t, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", v49);
        if (v49 != (char *)buf) {
          free(v49);
        }
      }
      sub_101450C5C(v51);
      sub_10144EF04(v50, v60, (uint64_t)&__p, (void **)buf);
      uint64_t v32 = (char *)__p;
      uint64_t v31 = v53;
      if (v53 != __p)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        do
        {
          unsigned int v36 = *(char **)buf;
          uint64_t v37 = (uint64_t *)(*(void *)buf + v34);
          if (*(unsigned char *)(*(void *)buf + v34 + 20))
          {
            v65[0] = (uint64_t *)&v32[v33];
            uint64_t v38 = sub_101372990(&v62, &v32[v33], (uint64_t)&unk_101D0B290, v65);
            uint64_t v39 = *v37;
            v38[24] = *((_WORD *)v37 + 4);
            *((void *)v38 + 5) = v39;
            *(void *)(v38 + 26) = *(void *)&v36[v34 + 12];
            uint64_t v32 = (char *)__p;
            uint64_t v31 = v53;
          }
          ++v35;
          v34 += 24;
          v33 += 8;
        }
        while (v35 < (v31 - v32) >> 3);
      }
      if (*(void *)buf)
      {
        std::string v67 = *(char **)buf;
        operator delete(*(void **)buf);
      }
      uint64_t v28 = v64;
    }
    if (v28) {
      goto LABEL_39;
    }
  }
  sub_101450C5C(v29);
LABEL_42:
  sub_101372914(a5, (a2[1] - *a2) >> 3);
  uint64_t v40 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    do
    {
      unint64_t v44 = sub_100529674((uint64_t)&v62, (void *)(v40 + v41));
      if (&v63 != v44)
      {
        uint64_t v45 = v44 + 5;
        uint64_t v46 = *a5 + v42;
        if (*(unsigned char *)(v46 + 20))
        {
          uint64_t v47 = *v45;
          *(_WORD *)(v46 + 8) = *((_WORD *)v44 + 24);
          *(void *)uint64_t v46 = v47;
          *(void *)(v46 + 12) = *(void *)((char *)v44 + 52);
        }
        else
        {
          long long v48 = *(_OWORD *)v45;
          *(_DWORD *)(v46 + 16) = *((_DWORD *)v44 + 14);
          *(_OWORD *)uint64_t v46 = v48;
          *(unsigned char *)(v46 + 20) = 1;
        }
      }
      ++v43;
      uint64_t v40 = *a2;
      v42 += 24;
      v41 += 8;
    }
    while (v43 < (a2[1] - *a2) >> 3);
  }
  if (__p)
  {
    uint64_t v53 = (char *)__p;
    operator delete(__p);
  }
  if (v55)
  {
    char v56 = v55;
    operator delete(v55);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  *(void *)std::string buf = v59;
  sub_10014FEE0((void ***)buf);
  *(void *)std::string buf = v60;
  sub_10014FEE0((void ***)buf);
  *(void *)std::string buf = v61;
  sub_10014FEE0((void ***)buf);
  sub_1000F5BB0((uint64_t)&v62, v63);
}

void sub_101450B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  a39 = &a24;
  sub_10014FEE0((void ***)&a39);
  a39 = &a27;
  sub_10014FEE0((void ***)&a39);
  a39 = &a30;
  sub_10014FEE0((void ***)&a39);
  sub_1000F5BB0((uint64_t)&a33, a34);
  _Unwind_Resume(a1);
}

void **sub_101450C04(void **a1)
{
  uint64_t v3 = a1 + 6;
  sub_10014FEE0(&v3);
  uint64_t v3 = a1 + 3;
  sub_10014FEE0(&v3);
  uint64_t v3 = a1;
  sub_10014FEE0(&v3);
  return a1;
}

void sub_101450C5C(int *a1)
{
  ++*a1;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023273C8);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    int v3 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@TileSearch, wifi, misscount, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023273C8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTileQueryLogic::incrementScanMisses()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*a1 >= 255) {
    sub_101450E38(a1, (uint64_t)"Rollover");
  }
}

void sub_101450E38(_DWORD *a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023273C8);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@TileSearch, wifi, missreset, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023273C8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTileQueryLogic::resetScanMisses(const char *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *a1 = 0;
}

void sub_101450FEC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>, double a6@<D0>)
{
}

void sub_101450FF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1 + 56;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v16 = a1 + 56;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 56);
  __int16 v18 = 256;
  sub_100DED1BC(*(void *)(v7 + 32), a2, (uint64_t)&v14);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  double v8 = v14;
  if (v14 != v15)
  {
    do
    {
      sub_101451198((uint64_t)(v8 + 5), (uint64_t)v13);
      sub_10052952C((uint64_t **)a3, v8 + 4, v8 + 4, v13);
      double v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = (void **)v9;
          double v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unsigned int v10 = (void **)v8[2];
          BOOL v11 = *v10 == v8;
          double v8 = v10;
        }
        while (!v11);
      }
      double v8 = v10;
    }
    while (v10 != v15);
  }
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12) {
    sub_1005291A4(v12, (void *)a3);
  }
  sub_1000F5BB0((uint64_t)&v14, v15[0]);
  if (HIBYTE(v18))
  {
    if ((_BYTE)v18) {
      pthread_mutex_unlock(v17);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
    }
  }
}

void sub_10145115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
  sub_1000F5BB0(v22, *(void **)(v22 + 8));
  sub_1000F5BB0((uint64_t)&a21, a22);
  sub_1019DB560(v23 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_101451198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10106DFF4(a2, *(void *)a1, *(_DWORD *)(a1 + 172), *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 164), *(_DWORD *)(a1 + 184), *(double *)(a1 + 12), *(double *)(a1 + 20), *(double *)(a1 + 36), *(double *)(a1 + 28), *(double *)(a1 + 44), *(double *)(a1 + 84));
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

uint64_t sub_1014511EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1 + 56;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v18 = a1 + 56;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 56);
  __int16 v19 = 256;
  uint64_t v10 = *(void *)(a1 + 120);
  uint64_t v9 = a1 + 120;
  uint64_t v8 = v10;
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = v9;
  do
  {
    int v12 = *(_DWORD *)(v8 + 32);
    BOOL v13 = v12 < a2;
    if (v12 >= a2) {
      double v14 = (uint64_t *)v8;
    }
    else {
      double v14 = (uint64_t *)(v8 + 8);
    }
    if (!v13) {
      uint64_t v11 = v8;
    }
    uint64_t v8 = *v14;
  }
  while (*v14);
  if (v11 != v9 && *(_DWORD *)(v11 + 32) <= a2)
  {
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    sub_10010F834(&v16, *(const void **)(v11 + 40), *(void *)(v11 + 48), (uint64_t)(*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 2);
    *(_OWORD *)a3 = v16;
    *(void *)(a3 + 16) = v17;
    *(unsigned char *)(a3 + 24) = 1;
  }
  else
  {
LABEL_11:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_101451300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101451318@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_100DED1B4(v3[4], a2);
  return (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
}

void sub_101451408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10145141C(uint64_t a1, uint64_t *a2, int **a3, int a4, double a5)
{
  v69[0] = a4;
  if (a3[1] == *a3) {
    sub_101AB60F0();
  }
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v66 = a1 + 56;
  (*(void (**)(void))(v9 + 16))();
  __int16 v68 = 256;
  long long __p = 0;
  uint64_t v64 = 0;
  long long v65 = 0;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 == v11)
  {
    uint64_t v22 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      if (v12 >= v65)
      {
        BOOL v13 = (char *)__p;
        uint64_t v14 = (v12 - (unsigned char *)__p) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v16 = v65 - (unsigned char *)__p;
        if ((v65 - (unsigned char *)__p) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_10017EA34((uint64_t)&v65, v17);
          BOOL v13 = (char *)__p;
          int v12 = (char *)v64;
        }
        else
        {
          uint64_t v18 = 0;
        }
        __int16 v19 = &v18[4 * v14];
        *(_DWORD *)__int16 v19 = *(_DWORD *)(v10 + 160);
        double v20 = (int *)(v19 + 4);
        while (v12 != v13)
        {
          int v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        long long __p = v19;
        uint64_t v64 = v20;
        long long v65 = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
        int v12 = (char *)v20;
      }
      else
      {
        *(_DWORD *)int v12 = *(_DWORD *)(v10 + 160);
        v12 += 4;
      }
      uint64_t v64 = (int *)v12;
      v10 += 184;
    }
    while (v10 != v11);
    uint64_t v22 = (int *)__p;
    if (__p == v12)
    {
LABEL_34:
      uint64_t v22 = (int *)v12;
    }
    else
    {
      int v23 = v69[0];
      if ((v69[0] - 1) <= 2)
      {
        while (1)
        {
          int v24 = *v22;
          if (v23 == 3)
          {
            if (v24 < 1) {
              break;
            }
          }
          else if (v23 == 1)
          {
            if (v24 < 1 || !sub_100D550A4(v24)) {
              break;
            }
          }
          else if (v24 <= 0 || sub_100D550A4(v24))
          {
            break;
          }
          if (++v22 == (int *)v12) {
            goto LABEL_34;
          }
        }
      }
      if (v22 != (int *)v12)
      {
        for (uint64_t i = v22 + 1; ; ++i)
        {
          if (i == (int *)v12) {
            goto LABEL_36;
          }
          int v51 = *i;
          if (v23 == 3) {
            break;
          }
          if (v23 == 2)
          {
            if (v51 > 0 && !sub_100D550A4(v51)) {
              goto LABEL_75;
            }
          }
          else if (v23 == 1 && v51 >= 1 && sub_100D550A4(v51))
          {
            goto LABEL_75;
          }
LABEL_76:
          ;
        }
        if (v51 < 1) {
          goto LABEL_76;
        }
LABEL_75:
        *v22++ = *i;
        goto LABEL_76;
      }
    }
  }
LABEL_36:
  if (v22 != v64) {
    uint64_t v64 = v22;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
  long long v25 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v69[0];
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = ((char *)v64 - (unsigned char *)__p) >> 2;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "@WifiChannel, surroundingWifiBand, %d, # of aps on band, %lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    v77[0] = 67109376;
    v77[1] = v69[0];
    __int16 v78 = 2048;
    uint64_t v79 = ((char *)v64 - (unsigned char *)__p) >> 2;
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, const std::vector<int> &, CLNetworkLocationRequest_Type::CLAlsWifiBand, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v53);
    if (v53 != buf) {
      free(v53);
    }
  }
  *(void *)std::string buf = v69;
  unint64_t v26 = (char *)(sub_1000EAEE4((uint64_t **)(a1 + 112), v69, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5);
  if (v26 != (char *)&__p) {
    sub_1000FB43C(v26, (char *)__p, (uint64_t)v64, ((char *)v64 - (unsigned char *)__p) >> 2);
  }
  sub_100DED354(*(void *)(a1 + 88), (uint64_t)v77);
  int v62 = sub_100DED8BC(*(void *)(a1 + 88));
  unint64_t v27 = *(void *)(a1 + 40);
  if ((v27 & 0x8000000000000000) == 0) {
    sub_100DED2E4(*(void *)(a1 + 88), v27);
  }
  uint64_t v28 = *a3;
  uint64_t v29 = a3[1];
  if (*a3 != v29)
  {
    do
    {
      uint64_t v30 = *a2;
      uint64_t v31 = a2[1];
      if (*a2 != v31)
      {
        int v32 = *v28;
        do
        {
          int v33 = *(_DWORD *)(v30 + 164);
          *(void *)std::string buf = *(void *)(v30 + 176);
          uint64_t v34 = *(void *)(v30 + 156);
          long long v35 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)v30;
          long long v81 = v35;
          long long v36 = *(_OWORD *)(v30 + 32);
          long long v37 = *(_OWORD *)(v30 + 48);
          long long v38 = *(_OWORD *)(v30 + 80);
          long long v84 = *(_OWORD *)(v30 + 64);
          long long v85 = v38;
          long long v82 = v36;
          long long v83 = v37;
          long long v39 = *(_OWORD *)(v30 + 96);
          long long v40 = *(_OWORD *)(v30 + 112);
          long long v41 = *(_OWORD *)(v30 + 128);
          *(_OWORD *)&v88[12] = *(_OWORD *)(v30 + 140);
          long long v87 = v40;
          *(_OWORD *)__int16 v88 = v41;
          long long v86 = v39;
          uint64_t v89 = v34;
          int v90 = v33;
          int v91 = v32;
          int32x2_t v92 = vrev64_s32(*(int32x2_t *)(v30 + 168));
          sub_100DED2DC(*(void *)(a1 + 88));
          v30 += 184;
        }
        while (v30 != v31);
      }
      ++v28;
    }
    while (v28 != v29);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
  uint64_t v42 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v44 = *a2;
    uint64_t v43 = a2[1];
    uint64_t v46 = *a3;
    uint64_t v45 = a3[1];
    int v47 = sub_100DED8BC(*(void *)(a1 + 88));
    uint64_t v48 = (a2[1] - *a2) >> 3;
    *(_DWORD *)std::string buf = 134349824;
    *(void *)&uint8_t buf[4] = 0xD37A6F4DE9BD37A7 * ((v43 - v44) >> 3) * (v45 - v46);
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v62;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v47;
    LOWORD(v81) = 2050;
    *(void *)((char *)&v81 + 2) = 0xD37A6F4DE9BD37A7 * v48;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u, aps, %{public}lu", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    uint64_t v55 = *a2;
    uint64_t v54 = a2[1];
    uint64_t v58 = a3;
    char v56 = *a3;
    uint64_t v57 = v58[1];
    int v59 = sub_100DED8BC(*(void *)(a1 + 88));
    uint64_t v60 = (a2[1] - *a2) >> 3;
    v69[1] = 134349824;
    unint64_t v70 = 0xD37A6F4DE9BD37A7 * ((v54 - v55) >> 3) * (v57 - v56);
    __int16 v71 = 1026;
    int v72 = v62;
    __int16 v73 = 1026;
    int v74 = v59;
    __int16 v75 = 2050;
    unint64_t v76 = 0xD37A6F4DE9BD37A7 * v60;
    uint64_t v61 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, const std::vector<int> &, CLNetworkLocationRequest_Type::CLAlsWifiBand, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v61);
    if (v61 != buf) {
      free(v61);
    }
  }
  sub_1001A8894(v77);
  *(double *)(a1 + 32) = a5;
  *(double *)(*(void *)(a1 + 96) + 32) = a5;
  uint64_t v49 = -373475417 * ((unint64_t)(a2[1] - *a2) >> 3);
  if (__p)
  {
    uint64_t v64 = (int *)__p;
    operator delete(__p);
  }
  if (HIBYTE(v68))
  {
    if ((_BYTE)v68) {
      pthread_mutex_unlock(v67);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v66 + 24))(v66);
    }
  }
  return v49;
}

#error "101451E40: call analysis failed (funcsize=121)"

void sub_101451E98(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  v5[7] = a1 + 56;
  (*(void (**)(void))(v3 + 16))();
  __int16 v6 = 256;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_101452590;
  v5[3] = &unk_1022F2D48;
  *(double *)&void v5[4] = a2;
  void v5[5] = mach_absolute_time();
  void v5[6] = v5;
  sub_1000E1294(&v4, (uint64_t)"upgrade-wifi-tiles-schema", 0);
  sub_10121E7A0(a2);
}

void sub_10145204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_101452590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
  uint64_t v7 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    BOOL v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLWifiAccessPointLocationService::saveWifiTileAccessPointEntries\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

uint64_t sub_1014526C8(uint64_t a1, uint64_t a2)
{
  return sub_10121DF90(*(uint64_t **)(a1 + 96), a2);
}

uint64_t sub_1014526D0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (uint64_t **)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_10121EB64(v3[5], a2);
  return ((uint64_t (*)(uint64_t **))(*v3)[3])(v3);
}

void sub_101452780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101452794(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 56;
  uint64_t v4 = *(void *)(a1 + 56);
  v8[1] = a1 + 56;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 56);
  __int16 v9 = 256;
  if (*(_DWORD *)a2)
  {
    sub_101AB5F7C();
    uint64_t result = abort_report_np();
    __break(1u);
  }
  else
  {
    v8[0] = *(void *)(a2 + 4);
    uint64_t v6 = sub_10121EB7C(*(uint64_t **)(a1 + 96), (int)v8);
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    return v6;
  }
  return result;
}

void sub_101452894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014528AC(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  uint64_t v2 = sub_100DED2EC(v1[4]);
  (*(void (**)(uint64_t *))(*v1 + 24))(v1);
  return v2;
}

void sub_10145294C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101452960(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_100DED35C(v1[4]);
  return (*(uint64_t (**)(uint64_t *))(*v1 + 24))(v1);
}

void sub_1014529F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101452A04(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_100DED318(v1[4]);
  return (*(uint64_t (**)(uint64_t *))(*v1 + 24))(v1);
}

void sub_101452A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101452AA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  if (v1) {
    sub_1009356E8(v1);
  }
}

uint64_t sub_101452AB8(uint64_t a1, double a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_100DED324(v3[4], a2);
  return (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
}

void sub_101452B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101452B6C(uint64_t a1, double *a2)
{
  uint64_t v5 = a1 + 56;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v12 = a1 + 56;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 56);
  __int16 v13 = 256;
  uint64_t v11 = sub_10121DB98(a2);
  sub_10121EB64(*(uint64_t **)(a1 + 96), v10);
  if (v10[144])
  {
    uint64_t v6 = sub_100416DC4((uint64_t)v10);
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    uint64_t v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67174913;
      int v19 = v11;
      __int16 v20 = 1025;
      int v21 = HIDWORD(v11);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#warning, tile does not exists to query num inputs, x, %{private}d, y, %{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
      int v14 = 67174913;
      int v15 = v11;
      __int16 v16 = 1025;
      int v17 = HIDWORD(v11);
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLWifiAccessPointLocationService::numberOfInputApsUsedInWifiTileForCoordinate(const CLClientLocationCoordinate &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v6;
}

void sub_101452DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_101452E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = (uint64_t **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v12 = a1 + 56;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 56);
  __int16 v13 = 256;
  uint64_t v11 = 0;
  uint64_t v10 = *(void *)(a2 + 4);
  sub_10121EB64(v7[5], v9);
  if (v9[144]) {
    sub_10121EB84(*(uint64_t **)(a1 + 96));
  }
  *a3 = v11;
  return ((uint64_t (*)(uint64_t **))(*v7)[3])(v7);
}

void sub_101452EFC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 64);
  *(void *)(v1 - 64) = 0;
  if (v3) {
    sub_100436D2C(v1 - 64, v3);
  }
  sub_1019DB560(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_101452F24(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 80);
  if (v1)
  {
    sub_100612110(v1);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023273C8);
    }
    uint64_t v2 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "fWifiApLocationLookupMetrics is null.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023273C8);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiAccessPointLocationService::submitWifiApLocationLookupMetrics() const", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_1014530F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_101450E38(v3 + 4, a2);
  return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 24))(v3);
}

void sub_101453188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10145319C(uint64_t a1)
{
  uint64_t v2 = (uint64_t **)(a1 + 56);
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  sub_10121DC74(v2[5]);
  if (sub_10121EB5C(*(uint64_t **)(a1 + 96)))
  {
    sub_1014533D8(a1);
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    uint64_t v3 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "failed to establish a valid database connection, expect wifi positioning accuracy to be significantly degraded", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiAccessPointLocationService::establishWifiTileDatabaseConnectionsIfNecessary()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return ((uint64_t (*)(uint64_t **))(*v2)[3])(v2);
}

void sub_1014533B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014533D8(uint64_t a1)
{
  uint64_t v3 = a1 + 56;
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  if (!*(unsigned char *)(v3 - 3))
  {
    if (sub_10121EB5C(*(uint64_t **)(a1 + 96)))
    {
      [[CLOSTransaction alloc] initWithDescription:"upgrade-wifi-tiles-schema"];
      sub_10121EB6C(*(uint64_t **)(a1 + 96));
      uint64_t v1 = &qword_102419000;
      if (qword_1024193B0 == -1) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_101AB6384();
      abort_report_np();
      __break(1u);
    }
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
LABEL_4:
    uint64_t v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "unconditionally removing all #tile tables in favor of new schema", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v1[118] != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAccessPointLocationService::dropTilesIfWifiTilesHeaderSchemaChanged()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_10121DF88(*(uint64_t **)(a1 + 96));
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_1014538D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10145391C(uint64_t a1)
{
  uint64_t v3 = a1 + 56;
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v11 = a1 + 56;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 56);
  __int16 v13 = 256;
  sub_10019DAB0(*(uint64_t **)(v3 + 40), (uint64_t)v10);
  unsigned int v4 = sub_10121DC7C(*(uint64_t **)(a1 + 96));
  uint64_t v5 = sub_100DED8BC(*(void *)(a1 + 88));
  if (v5)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    uint64_t v6 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67174657;
      int v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "remaining entries in als db, deleting, %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
      int v14 = 67174657;
      int v15 = v5;
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<int, int> CLWifiAccessPointLocationService::errorOnRemainingAndDelete()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_100DED318(*(void *)(a1 + 88));
  }
  sub_1001A8894(v10);
  uint64_t v7 = v5 << 32;
  if (HIBYTE(v13))
  {
    if ((_BYTE)v13) {
      pthread_mutex_unlock(v12);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
  }
  return v7 | v4;
}

void sub_101453B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int buf,int a22,long long a23)
{
  sub_1001A8894(&a11);
  if (a2 == 3)
  {
    long long v25 = __cxa_begin_catch(a1);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    unint64_t v26 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
      std::string buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(void *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(void *)((char *)&a23 + 12) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"sqlite error deleting remaining tiles.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
    }
    uint64_t v28 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
      std::string buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(void *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(void *)((char *)&a23 + 12) = v29;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "sqlite error deleting remaining tiles.", "{\"msg%{public}.0s\":\"sqlite error deleting remaining tiles.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else if (a2 == 2)
  {
    uint64_t v30 = __cxa_begin_catch(a1);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    uint64_t v31 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      std::string buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(void *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(void *)((char *)&a23 + 12) = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"no database connection.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
    }
    int v33 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      std::string buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(void *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(void *)((char *)&a23 + 12) = v34;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "no database connection.", "{\"msg%{public}.0s\":\"no database connection.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else
  {
    if (a2 != 1)
    {
      sub_1019DB560((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
    long long v35 = __cxa_begin_catch(a1);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
    long long v36 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
      std::string buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(void *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(void *)((char *)&a23 + 12) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"runtime error deleting tile.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
    }
    long long v38 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      uint64_t v39 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
      std::string buf = 68289283;
      a22 = 0;
      LOWORD(a23) = 2082;
      *(void *)((char *)&a23 + 2) = "";
      WORD5(a23) = 2081;
      *(void *)((char *)&a23 + 12) = v39;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "runtime error deleting tile.", "{\"msg%{public}.0s\":\"runtime error deleting tile.\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x101453A34);
}

void sub_1014540C4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  sub_10019DAA8(*(uint64_t **)(a1 + 96), &v122);
  long long __p = 0;
  __int16 v120 = 0;
  unint64_t v121 = 0;
  uint64_t v6 = (char *)v122;
  uint64_t v7 = v123;
  if (v122 != v123)
  {
    while (*(double *)(a1 + 16) >= vabdd_f64(a3, sub_100C8D8BC((uint64_t)v6)))
    {
      v6 += 144;
      if (v6 == v7)
      {
        uint64_t v6 = v7;
        goto LABEL_38;
      }
    }
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v120 - (unsigned char *)__p) >> 4) + 1;
    if (v8 > 0x1C71C71C71C71C7) {
LABEL_102:
    }
      sub_1001D7FD4();
    if (0x1C71C71C71C71C72 * ((uint64_t)(v121 - (void)__p) >> 4) > v8) {
      unint64_t v8 = 0x1C71C71C71C71C72 * ((uint64_t)(v121 - (void)__p) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v121 - (void)__p) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v9 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9) {
      uint64_t v10 = (char *)sub_10014E7AC((uint64_t)&v121, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = &v10[16 * ((v120 - (unsigned char *)__p) >> 4)];
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v6;
    long long v12 = *((_OWORD *)v6 + 1);
    long long v13 = *((_OWORD *)v6 + 2);
    long long v14 = *((_OWORD *)v6 + 4);
    *((_OWORD *)v11 + 3) = *((_OWORD *)v6 + 3);
    *((_OWORD *)v11 + 4) = v14;
    *((_OWORD *)v11 + 1) = v12;
    *((_OWORD *)v11 + 2) = v13;
    long long v15 = *((_OWORD *)v6 + 5);
    long long v16 = *((_OWORD *)v6 + 6);
    long long v17 = *((_OWORD *)v6 + 8);
    *((_OWORD *)v11 + 7) = *((_OWORD *)v6 + 7);
    *((_OWORD *)v11 + 8) = v17;
    *((_OWORD *)v11 + 5) = v15;
    *((_OWORD *)v11 + 6) = v16;
    long long __p = v11;
    unint64_t v121 = (unint64_t)&v10[144 * v9];
    __int16 v120 = v11 + 144;
    if (v6 != v7)
    {
      __int16 v18 = v6 + 144;
      if (v6 + 144 != v7)
      {
        do
        {
          if (*(double *)(a1 + 16) >= vabdd_f64(a3, sub_100C8D8BC((uint64_t)v18)))
          {
            *(_OWORD *)uint64_t v6 = *v18;
            long long v26 = v18[1];
            long long v27 = v18[2];
            long long v28 = v18[4];
            *((_OWORD *)v6 + 3) = v18[3];
            *((_OWORD *)v6 + 4) = v28;
            *((_OWORD *)v6 + 1) = v26;
            *((_OWORD *)v6 + 2) = v27;
            long long v29 = v18[5];
            long long v30 = v18[6];
            long long v31 = v18[7];
            *(_OWORD *)(v6 + 124) = *(_OWORD *)((char *)v18 + 124);
            *((_OWORD *)v6 + 6) = v30;
            *((_OWORD *)v6 + 7) = v31;
            *((_OWORD *)v6 + 5) = v29;
            v6 += 144;
          }
          else
          {
            int v19 = v120;
            if ((unint64_t)v120 >= v121)
            {
              uint64_t v32 = (char *)__p;
              unint64_t v33 = 0x8E38E38E38E38E39 * ((v120 - (unsigned char *)__p) >> 4);
              unint64_t v34 = v33 + 1;
              if (v33 + 1 > 0x1C71C71C71C71C7) {
                goto LABEL_102;
              }
              if (0x1C71C71C71C71C72 * ((uint64_t)(v121 - (void)__p) >> 4) > v34) {
                unint64_t v34 = 0x1C71C71C71C71C72 * ((uint64_t)(v121 - (void)__p) >> 4);
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v121 - (void)__p) >> 4) >= 0xE38E38E38E38E3) {
                unint64_t v35 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v35 = v34;
              }
              if (v35)
              {
                long long v36 = (char *)sub_10014E7AC((uint64_t)&v121, v35);
                uint64_t v32 = (char *)__p;
                int v19 = v120;
              }
              else
              {
                long long v36 = 0;
              }
              uint64_t v37 = &v36[16 * ((v120 - (unsigned char *)__p) >> 4)];
              *(_OWORD *)uint64_t v37 = *v18;
              long long v38 = v18[1];
              long long v39 = v18[2];
              long long v40 = v18[4];
              *((_OWORD *)v37 + 3) = v18[3];
              *((_OWORD *)v37 + 4) = v40;
              *((_OWORD *)v37 + 1) = v38;
              *((_OWORD *)v37 + 2) = v39;
              long long v41 = v18[5];
              long long v42 = v18[6];
              long long v43 = v18[8];
              *((_OWORD *)v37 + 7) = v18[7];
              *((_OWORD *)v37 + 8) = v43;
              *((_OWORD *)v37 + 5) = v41;
              *((_OWORD *)v37 + 6) = v42;
              if (v19 == v32)
              {
                int v51 = &v36[144 * v33];
              }
              else
              {
                uint64_t v44 = &v36[144 * v33];
                do
                {
                  *((_OWORD *)v44 - 9) = *((_OWORD *)v19 - 9);
                  long long v45 = *((_OWORD *)v19 - 8);
                  long long v46 = *((_OWORD *)v19 - 7);
                  long long v47 = *((_OWORD *)v19 - 5);
                  *((_OWORD *)v44 - 6) = *((_OWORD *)v19 - 6);
                  *((_OWORD *)v44 - 5) = v47;
                  *((_OWORD *)v44 - 8) = v45;
                  *((_OWORD *)v44 - 7) = v46;
                  long long v48 = *((_OWORD *)v19 - 4);
                  long long v49 = *((_OWORD *)v19 - 3);
                  long long v50 = *((_OWORD *)v19 - 2);
                  int v51 = v44 - 144;
                  *(_OWORD *)(v44 - 20) = *(_OWORD *)(v19 - 20);
                  *((_OWORD *)v44 - 3) = v49;
                  *((_OWORD *)v44 - 2) = v50;
                  *((_OWORD *)v44 - 4) = v48;
                  v19 -= 144;
                  v44 -= 144;
                }
                while (v19 != v32);
              }
              int v52 = v37 + 144;
              long long __p = v51;
              __int16 v120 = v37 + 144;
              unint64_t v121 = (unint64_t)&v36[144 * v35];
              if (v32) {
                operator delete(v32);
              }
              __int16 v120 = v52;
            }
            else
            {
              *(_OWORD *)__int16 v120 = *v18;
              long long v20 = v18[1];
              long long v21 = v18[2];
              long long v22 = v18[4];
              *((_OWORD *)v19 + 3) = v18[3];
              *((_OWORD *)v19 + 4) = v22;
              *((_OWORD *)v19 + 1) = v20;
              *((_OWORD *)v19 + 2) = v21;
              long long v23 = v18[5];
              long long v24 = v18[6];
              long long v25 = v18[8];
              *((_OWORD *)v19 + 7) = v18[7];
              *((_OWORD *)v19 + 8) = v25;
              *((_OWORD *)v19 + 5) = v23;
              *((_OWORD *)v19 + 6) = v24;
              __int16 v120 = v19 + 144;
            }
          }
          v18 += 9;
        }
        while (v18 != (_OWORD *)v7);
      }
    }
  }
LABEL_38:
  uint64_t v53 = (char *)v122;
  if (v6 != v123) {
    uint64_t v123 = v6;
  }
  __int16 v116 = 0;
  int v117 = 0;
  unint64_t v118 = 0;
  if (v122 == v6)
  {
LABEL_43:
    uint64_t v53 = v6;
  }
  else
  {
    while (*(double *)(a1 + 24) >= vabdd_f64(a3, sub_100C8D8A4((uint64_t)v53)))
    {
      v53 += 144;
      if (v53 == v6) {
        goto LABEL_43;
      }
    }
    unint64_t v65 = 0x8E38E38E38E38E39 * ((v117 - (unsigned char *)v116) >> 4) + 1;
    if (v65 > 0x1C71C71C71C71C7) {
LABEL_103:
    }
      sub_1001D7FD4();
    if (0x1C71C71C71C71C72 * ((uint64_t)(v118 - (void)v116) >> 4) > v65) {
      unint64_t v65 = 0x1C71C71C71C71C72 * ((uint64_t)(v118 - (void)v116) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v118 - (void)v116) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v66 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66) {
      std::string v67 = (char *)sub_10014E7AC((uint64_t)&v118, v66);
    }
    else {
      std::string v67 = 0;
    }
    __int16 v68 = &v67[16 * ((v117 - (unsigned char *)v116) >> 4)];
    *(_OWORD *)__int16 v68 = *(_OWORD *)v53;
    long long v69 = *((_OWORD *)v53 + 1);
    long long v70 = *((_OWORD *)v53 + 2);
    long long v71 = *((_OWORD *)v53 + 4);
    *((_OWORD *)v68 + 3) = *((_OWORD *)v53 + 3);
    *((_OWORD *)v68 + 4) = v71;
    *((_OWORD *)v68 + 1) = v69;
    *((_OWORD *)v68 + 2) = v70;
    long long v72 = *((_OWORD *)v53 + 5);
    long long v73 = *((_OWORD *)v53 + 6);
    long long v74 = *((_OWORD *)v53 + 8);
    *((_OWORD *)v68 + 7) = *((_OWORD *)v53 + 7);
    *((_OWORD *)v68 + 8) = v74;
    *((_OWORD *)v68 + 5) = v72;
    *((_OWORD *)v68 + 6) = v73;
    __int16 v116 = v68;
    unint64_t v118 = (unint64_t)&v67[144 * v66];
    int v117 = v68 + 144;
    if (v53 != v6)
    {
      for (uint64_t i = v53 + 144; i != v6; i += 144)
      {
        if (*(double *)(a1 + 24) >= vabdd_f64(a3, sub_100C8D8A4((uint64_t)i)))
        {
          *(_OWORD *)uint64_t v53 = *(_OWORD *)i;
          long long v83 = *((_OWORD *)i + 1);
          long long v84 = *((_OWORD *)i + 2);
          long long v85 = *((_OWORD *)i + 4);
          *((_OWORD *)v53 + 3) = *((_OWORD *)i + 3);
          *((_OWORD *)v53 + 4) = v85;
          *((_OWORD *)v53 + 1) = v83;
          *((_OWORD *)v53 + 2) = v84;
          long long v86 = *((_OWORD *)i + 5);
          long long v87 = *((_OWORD *)i + 6);
          long long v88 = *((_OWORD *)i + 7);
          *(_OWORD *)(v53 + 124) = *(_OWORD *)(i + 124);
          *((_OWORD *)v53 + 6) = v87;
          *((_OWORD *)v53 + 7) = v88;
          *((_OWORD *)v53 + 5) = v86;
          v53 += 144;
        }
        else
        {
          unint64_t v76 = v117;
          if ((unint64_t)v117 >= v118)
          {
            uint64_t v89 = (char *)v116;
            unint64_t v90 = 0x8E38E38E38E38E39 * ((v117 - (unsigned char *)v116) >> 4);
            unint64_t v91 = v90 + 1;
            if (v90 + 1 > 0x1C71C71C71C71C7) {
              goto LABEL_103;
            }
            if (0x1C71C71C71C71C72 * ((uint64_t)(v118 - (void)v116) >> 4) > v91) {
              unint64_t v91 = 0x1C71C71C71C71C72 * ((uint64_t)(v118 - (void)v116) >> 4);
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v118 - (void)v116) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v92 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v92 = v91;
            }
            if (v92)
            {
              uint64_t v93 = (char *)sub_10014E7AC((uint64_t)&v118, v92);
              uint64_t v89 = (char *)v116;
              unint64_t v76 = v117;
            }
            else
            {
              uint64_t v93 = 0;
            }
            __int16 v94 = &v93[16 * ((v117 - (unsigned char *)v116) >> 4)];
            *(_OWORD *)__int16 v94 = *(_OWORD *)i;
            long long v95 = *((_OWORD *)i + 1);
            long long v96 = *((_OWORD *)i + 2);
            long long v97 = *((_OWORD *)i + 4);
            *((_OWORD *)v94 + 3) = *((_OWORD *)i + 3);
            *((_OWORD *)v94 + 4) = v97;
            *((_OWORD *)v94 + 1) = v95;
            *((_OWORD *)v94 + 2) = v96;
            long long v98 = *((_OWORD *)i + 5);
            long long v99 = *((_OWORD *)i + 6);
            long long v100 = *((_OWORD *)i + 8);
            *((_OWORD *)v94 + 7) = *((_OWORD *)i + 7);
            *((_OWORD *)v94 + 8) = v100;
            *((_OWORD *)v94 + 5) = v98;
            *((_OWORD *)v94 + 6) = v99;
            if (v76 == v89)
            {
              __int16 v108 = &v93[144 * v90];
            }
            else
            {
              double v101 = &v93[144 * v90];
              do
              {
                *((_OWORD *)v101 - 9) = *((_OWORD *)v76 - 9);
                long long v102 = *((_OWORD *)v76 - 8);
                long long v103 = *((_OWORD *)v76 - 7);
                long long v104 = *((_OWORD *)v76 - 5);
                *((_OWORD *)v101 - 6) = *((_OWORD *)v76 - 6);
                *((_OWORD *)v101 - 5) = v104;
                *((_OWORD *)v101 - 8) = v102;
                *((_OWORD *)v101 - 7) = v103;
                long long v105 = *((_OWORD *)v76 - 4);
                long long v106 = *((_OWORD *)v76 - 3);
                long long v107 = *((_OWORD *)v76 - 2);
                __int16 v108 = v101 - 144;
                *(_OWORD *)(v101 - 20) = *(_OWORD *)(v76 - 20);
                *((_OWORD *)v101 - 3) = v106;
                *((_OWORD *)v101 - 2) = v107;
                *((_OWORD *)v101 - 4) = v105;
                v76 -= 144;
                v101 -= 144;
              }
              while (v76 != v89);
            }
            int v109 = v94 + 144;
            __int16 v116 = v108;
            int v117 = v94 + 144;
            unint64_t v118 = (unint64_t)&v93[144 * v92];
            if (v89) {
              operator delete(v89);
            }
            int v117 = v109;
          }
          else
          {
            *(_OWORD *)int v117 = *(_OWORD *)i;
            long long v77 = *((_OWORD *)i + 1);
            long long v78 = *((_OWORD *)i + 2);
            long long v79 = *((_OWORD *)i + 4);
            *((_OWORD *)v76 + 3) = *((_OWORD *)i + 3);
            *((_OWORD *)v76 + 4) = v79;
            *((_OWORD *)v76 + 1) = v77;
            *((_OWORD *)v76 + 2) = v78;
            long long v80 = *((_OWORD *)i + 5);
            long long v81 = *((_OWORD *)i + 6);
            long long v82 = *((_OWORD *)i + 8);
            *((_OWORD *)v76 + 7) = *((_OWORD *)i + 7);
            *((_OWORD *)v76 + 8) = v82;
            *((_OWORD *)v76 + 5) = v80;
            *((_OWORD *)v76 + 6) = v81;
            int v117 = v76 + 144;
          }
        }
      }
    }
  }
  if (v53 != v123) {
    uint64_t v123 = v53;
  }
  unint64_t v54 = 0x8E38E38E38E38E39 * ((v53 - (unsigned char *)v122) >> 4);
  int v113 = 0;
  __int16 v114 = 0;
  uint64_t v115 = 0;
  if (v54 > *(unsigned int *)(a1 + 48))
  {
    unint64_t v55 = 126 - 2 * __clz(v54);
    uint64_t v56 = v53 == v122 ? 0 : v55;
    sub_101455A50((long long *)v122, (long long *)v53, v56, 1);
    unint64_t v57 = 0x8E38E38E38E38E39 * ((v123 - (unsigned char *)v122) >> 4);
    uint64_t v58 = *(unsigned int *)(a1 + 48);
    uint64_t v59 = v57 - v58;
    sub_1014572F0(v122, (_OWORD *)v122 + 9 * (v57 - v58), &v113);
    if (v57 != v58)
    {
      uint64_t v60 = (char *)v122;
      uint64_t v61 = (char *)v122 + 144 * v59;
      uint64_t v62 = v123 - v61;
      if (v123 != v61) {
        memmove(v122, v61, v62 - 4);
      }
      uint64_t v123 = &v60[v62];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1014572F0(__p, v120, (void **)a2);
  sub_1014572F0(v116, v117, (void **)a2);
  sub_1014572F0(v113, v114, (void **)a2);
  int v63 = *(double **)a2;
  uint64_t v64 = *(double **)(a2 + 8);
  while (v63 != v64)
  {
    sub_10014F62C(v63, (uint64_t)v110);
    sub_10121DF90(*(uint64_t **)(a1 + 96), (uint64_t)v110);
    if (v112 < 0) {
      operator delete(v111);
    }
    v63 += 18;
  }
  if (v113)
  {
    __int16 v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    int v117 = (char *)v116;
    operator delete(v116);
  }
  if (__p)
  {
    __int16 v120 = (char *)__p;
    operator delete(__p);
  }
  if (v122)
  {
    uint64_t v123 = (char *)v122;
    operator delete(v122);
  }
}

void sub_101454A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_101454AB8(uint64_t a1, int a2)
{
  return sub_1006120F4(*(_DWORD **)(a1 + 80), a2);
}

uint64_t sub_101454AC0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      long long v15 = (char *)sub_10014F86C(result, v14);
    }
    else {
      long long v15 = 0;
    }
    long long v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    _OWORD v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v16 = v17;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_10014F8B4(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_10014FA14((uint64_t)v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_101454C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10014FA14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101454C1C(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 + 7;
  (*(void (**)(void *))(a1[7] + 16))(a1 + 7);
  sub_101372728((uint64_t)(v2 + 6));
  uint64_t v3 = (void *)v1[15];
  v1 += 15;
  sub_1006FE1A8((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  return (*(uint64_t (**)(void *))(*(v1 - 8) + 24))(v2);
}

void sub_101454CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101454CD8(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    sub_100935724(v2, a2);
  }
}

BOOL sub_101454CE8(uint64_t a1)
{
  return *(void *)(a1 + 136) != 0;
}

uint64_t sub_101454CF8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 144);
  *a2 = *(void *)(result + 136);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_101454D14(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 136);
  if (v3) {
    sub_100938F40(v3, a2, a3);
  }
  else {
    sub_1005296F0(a3, (uint64_t)a2);
  }
}

uint64_t sub_101454D28(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 16))(a1 + 56);
  if (sub_100B393B0())
  {
    uint64_t v3 = *(void **)(a1 + 160);
    if (v3)
    {
      [v3 reInitializeDatabasesAndSyncEngineIfNeeded];
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023273C8);
      }
      unsigned int v4 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "WifiAssociatedApCentroidStore, did we forget to initialize it in constructor?", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023273C8);
        }
        unint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiAccessPointLocationService::reInitializeWifiAssociatedApCentroidStoreIfInvalid()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_101454F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101454F5C(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

void sub_101454F64(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101454F94(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_101454FC4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101454FF4()
{
  char v0 = operator new(0xC0uLL);
  sub_101455040(v0);
}

void sub_10145502C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_101455040(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102327438;
  sub_10144E9A0();
}

void sub_101455088(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10145509C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102327438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014550BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102327438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101455110(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_101455138(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  sub_100513074(a1 + 1, "CLWifiTileDataRepository", 1, 1);
  a1[4] = 0;
  return a1;
}

void sub_101455180(_Unwind_Exception *a1)
{
  sub_10121DC20(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_101455198(uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10121DC70(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_1014551E8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t sub_101455268(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1014552F4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1014552B0(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_1014552F4(uint64_t a1)
{
  sub_101407E74(a1 + 168);
  *(void *)(a1 + 72) = off_1023274E8;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_1014553E8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_1000F5BB0(v2, *(void **)(v2 + 8));
    operator delete();
  }
  return result;
}

void sub_10145544C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100DED8CC((uint64_t *)(a2 + 56), 0);
    uint64_t v3 = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    operator delete();
  }
}

uint64_t sub_1014554E4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1014552F4(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_101455534(uint64_t **a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  unint64_t v7 = (uint64_t **)sub_100CC9448((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    sub_1014555BC((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000EDF90(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t sub_1014555BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = operator new(0xD8uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_101455648((uint64_t)v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10145562C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10078A750(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101455648(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v6, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 32) = v8;
  long long v11 = a3[4];
  long long v12 = a3[5];
  long long v13 = a3[3];
  *(_OWORD *)(a1 + 120) = a3[2];
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v13;
  long long v14 = *a3;
  *(_OWORD *)(a1 + 104) = a3[1];
  *(_OWORD *)(a1 + 88) = v14;
  return a1;
}

void *sub_1014556E8(uint64_t **a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (void **)sub_1005295E0((uint64_t)a1, &v10, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    long long v7 = operator new(0x40uLL);
    v7[4] = **a4;
    *((unsigned char *)v7 + 40) = 0;
    *((unsigned char *)v7 + 60) = 0;
    sub_1000EDF90(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t sub_101455778(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  int v5 = *a2;
  int v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    int v8 = *(_DWORD *)(v3 + 32);
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = *(_DWORD *)(v3 + 36) < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      long long v11 = (uint64_t *)(v3 + 8);
    }
    else {
      long long v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  int v12 = *(_DWORD *)(v7 + 32);
  BOOL v13 = v6 < *(_DWORD *)(v7 + 36);
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

char *sub_1014557EC(uint64_t **a1, int *a2, void *a3, long long *a4)
{
  uint64_t v7 = sub_1014558B4((uint64_t)a1, &v15, a2);
  int v8 = (char *)*v7;
  if (!*v7)
  {
    BOOL v9 = (uint64_t **)v7;
    int v8 = (char *)operator new(0xB8uLL);
    long long v10 = a4[4];
    *(_OWORD *)(v8 + 120) = a4[5];
    long long v11 = a4[7];
    *(_OWORD *)(v8 + 136) = a4[6];
    *(_OWORD *)(v8 + 152) = v11;
    *(_OWORD *)(v8 + 168) = a4[8];
    long long v12 = *a4;
    *(_OWORD *)(v8 + 56) = a4[1];
    long long v13 = a4[3];
    *(_OWORD *)(v8 + 72) = a4[2];
    *(_OWORD *)(v8 + 88) = v13;
    *(_OWORD *)(v8 + 104) = v10;
    *((void *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 40) = v12;
    sub_1000EDF90(a1, v15, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t *sub_1014558B4(uint64_t a1, void *a2, int *a3)
{
  int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    do
    {
      while (1)
      {
        int v8 = v4;
        int v9 = *((_DWORD *)v4 + 8);
        int v10 = *((_DWORD *)v8 + 9);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

__n128 sub_101455934(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  sub_1014559CC(*a1);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  id v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v5 = a1[1];
  sub_1014559CC(v5);
  *(_OWORD *)int v5 = *(_OWORD *)(a2 + 24);
  uint64_t v5[2] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  int v6 = a1[2];
  sub_1014559CC(v6);
  __n128 result = *(__n128 *)(a2 + 48);
  *(__n128 *)int v6 = result;
  double v6[2] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return result;
}

void sub_1014559CC(uint64_t *a1)
{
  if (*a1)
  {
    sub_10014FF34(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_101455A08(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    v1 += 56;
  }
}

void sub_101455A50(long long *a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v10 = a2 - 9;
    float64x2_t v292 = a2 - 27;
    float64x2_t v293 = a2 - 18;
    BOOL v11 = a1;
    float64x2_t v294 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = 0x8E38E38E38E38E39 * (a2 - v11);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                double v130 = sub_100C8D8BC((uint64_t)v10);
                if (v130 < sub_100C8D8BC((uint64_t)a1))
                {
                  long long v303 = *a1;
                  long long v131 = a1[1];
                  long long v132 = a1[2];
                  long long v133 = a1[4];
                  long long v306 = a1[3];
                  long long v307 = v133;
                  long long v304 = v131;
                  long long v305 = v132;
                  long long v134 = a1[5];
                  long long v135 = a1[6];
                  long long v136 = a1[8];
                  *(_OWORD *)float64x2_t v310 = a1[7];
                  *(_OWORD *)&v310[16] = v136;
                  long long v308 = v134;
                  long long v309 = v135;
                  *a1 = *v10;
                  long long v137 = v10[1];
                  long long v138 = v10[2];
                  long long v139 = v10[4];
                  a1[3] = v10[3];
                  a1[4] = v139;
                  a1[1] = v137;
                  a1[2] = v138;
                  long long v140 = v10[5];
                  long long v141 = v10[6];
                  long long v142 = v10[7];
                  *(long long *)((char *)a1 + 124) = *(long long *)((char *)v10 + 124);
                  a1[6] = v141;
                  a1[7] = v142;
                  a1[5] = v140;
                  *int v10 = v303;
                  long long v143 = v304;
                  long long v144 = v305;
                  long long v145 = v307;
                  _DWORD v10[3] = v306;
                  v10[4] = v145;
                  v10[1] = v143;
                  _DWORD v10[2] = v144;
                  long long v146 = v308;
                  long long v147 = v309;
                  long long v148 = *(_OWORD *)v310;
                  *(long long *)((char *)v10 + 124) = *(_OWORD *)&v310[12];
                  v10[6] = v147;
                  v10[7] = v148;
                  void v10[5] = v146;
                }
                break;
              case 3:
                sub_101456AD4(a1, a1 + 9, v10);
                break;
              case 4:
                sub_1014570D4(a1, a1 + 9, a1 + 18, v10);
                break;
              case 5:
                sub_101456810(a1, a1 + 9, a1 + 18, a1 + 27, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 3455)
          {
            uint64_t v149 = (uint64_t)(a1 + 9);
            BOOL v151 = a1 == a2 || v149 == (void)a2;
            if (a4)
            {
              if (!v151)
              {
                uint64_t v152 = 0;
                double v153 = a1;
                do
                {
                  uint64_t v154 = (uint64_t)v153;
                  double v153 = (long long *)v149;
                  double v155 = sub_100C8D8BC(v149);
                  if (v155 < sub_100C8D8BC(v154))
                  {
                    long long v303 = *v153;
                    long long v156 = v153[1];
                    long long v157 = v153[2];
                    long long v158 = v153[4];
                    long long v306 = v153[3];
                    long long v307 = v158;
                    long long v304 = v156;
                    long long v305 = v157;
                    long long v159 = v153[5];
                    long long v160 = v153[6];
                    long long v161 = v153[8];
                    *(_OWORD *)float64x2_t v310 = v153[7];
                    *(_OWORD *)&v310[16] = v161;
                    long long v308 = v159;
                    long long v309 = v160;
                    uint64_t v162 = v152;
                    while (1)
                    {
                      int v163 = (long long *)((char *)a1 + v162);
                      long long v164 = *(long long *)((char *)a1 + v162 + 112);
                      v163[15] = *(long long *)((char *)a1 + v162 + 96);
                      v163[16] = v164;
                      *(long long *)((char *)a1 + v162 + 268) = *(long long *)((char *)a1 + v162 + 124);
                      long long v165 = *(long long *)((char *)a1 + v162 + 48);
                      v163[11] = *(long long *)((char *)a1 + v162 + 32);
                      v163[12] = v165;
                      long long v166 = *(long long *)((char *)a1 + v162 + 80);
                      v163[13] = *(long long *)((char *)a1 + v162 + 64);
                      v163[14] = v166;
                      long long v167 = *(long long *)((char *)a1 + v162 + 16);
                      v163[9] = *(long long *)((char *)a1 + v162);
                      v163[10] = v167;
                      if (!v162) {
                        break;
                      }
                      v162 -= 144;
                      double v168 = sub_100C8D8BC((uint64_t)&v303);
                      if (v168 >= sub_100C8D8BC((uint64_t)a1 + v162))
                      {
                        int v169 = (long long *)((char *)a1 + v162 + 144);
                        goto LABEL_74;
                      }
                    }
                    int v169 = a1;
LABEL_74:
                    *int v169 = v303;
                    long long v170 = v304;
                    long long v171 = v305;
                    long long v172 = v307;
                    v169[3] = v306;
                    v169[4] = v172;
                    v169[1] = v170;
                    v169[2] = v171;
                    long long v173 = v308;
                    long long v174 = v309;
                    long long v175 = *(_OWORD *)v310;
                    *(long long *)((char *)v169 + 124) = *(_OWORD *)&v310[12];
                    v169[6] = v174;
                    v169[7] = v175;
                    v169[5] = v173;
                    a2 = v294;
                  }
                  uint64_t v149 = (uint64_t)(v153 + 9);
                  v152 += 144;
                }
                while (v153 + 9 != a2);
              }
            }
            else if (!v151)
            {
              float64x2_t v270 = a1 - 9;
              do
              {
                uint64_t v271 = (uint64_t)a1;
                a1 = (long long *)v149;
                double v272 = sub_100C8D8BC(v149);
                if (v272 < sub_100C8D8BC(v271))
                {
                  long long v303 = *a1;
                  long long v273 = a1[1];
                  long long v274 = a1[2];
                  long long v275 = a1[4];
                  long long v306 = a1[3];
                  long long v307 = v275;
                  long long v304 = v273;
                  long long v305 = v274;
                  long long v276 = a1[5];
                  long long v277 = a1[6];
                  long long v278 = a1[8];
                  *(_OWORD *)float64x2_t v310 = a1[7];
                  *(_OWORD *)&v310[16] = v278;
                  long long v308 = v276;
                  long long v309 = v277;
                  float64x2_t v279 = v270;
                  do
                  {
                    long long v280 = v279[16];
                    v279[24] = v279[15];
                    v279[25] = v280;
                    long long v281 = v279[12];
                    v279[20] = v279[11];
                    v279[21] = v281;
                    long long v282 = v279[14];
                    v279[22] = v279[13];
                    v279[23] = v282;
                    long long v283 = v279[10];
                    v279[18] = v279[9];
                    v279[19] = v283;
                    *(long long *)((char *)v279 + 412) = *(long long *)((char *)v279 + 268);
                    double v284 = sub_100C8D8BC((uint64_t)&v303);
                    double v285 = sub_100C8D8BC((uint64_t)v279);
                    v279 -= 9;
                  }
                  while (v284 < v285);
                  v279[18] = v303;
                  long long v286 = v304;
                  long long v287 = v305;
                  long long v288 = v307;
                  v279[21] = v306;
                  v279[22] = v288;
                  v279[19] = v286;
                  v279[20] = v287;
                  long long v289 = *(_OWORD *)&v310[12];
                  long long v290 = v308;
                  long long v291 = *(_OWORD *)v310;
                  v279[24] = v309;
                  v279[25] = v291;
                  v279[23] = v290;
                  *(long long *)((char *)v279 + 412) = v289;
                }
                uint64_t v149 = (uint64_t)(a1 + 9);
                v270 += 9;
              }
              while (a1 + 9 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v176 = (unint64_t)(v13 - 2) >> 1;
              int64_t v177 = v176;
              do
              {
                int64_t v178 = v177;
                if (v176 >= v177)
                {
                  uint64_t v179 = (2 * v177) | 1;
                  float64x2_t v180 = &a1[9 * v179];
                  if (2 * v177 + 2 < v13)
                  {
                    double v181 = sub_100C8D8BC((uint64_t)&a1[9 * v179]);
                    if (v181 < sub_100C8D8BC((uint64_t)(v180 + 9)))
                    {
                      v180 += 9;
                      uint64_t v179 = 2 * v178 + 2;
                    }
                  }
                  float64x2_t v182 = &a1[9 * v178];
                  double v183 = sub_100C8D8BC((uint64_t)v180);
                  if (v183 >= sub_100C8D8BC((uint64_t)v182))
                  {
                    long long v303 = *v182;
                    long long v184 = v182[1];
                    long long v185 = v182[2];
                    long long v186 = v182[4];
                    long long v306 = v182[3];
                    long long v307 = v186;
                    long long v304 = v184;
                    long long v305 = v185;
                    long long v187 = v182[5];
                    long long v188 = v182[6];
                    long long v189 = v182[8];
                    *(_OWORD *)float64x2_t v310 = v182[7];
                    *(_OWORD *)&v310[16] = v189;
                    long long v308 = v187;
                    long long v309 = v188;
                    do
                    {
                      float64x2_t v190 = v180;
                      *float64x2_t v182 = *v180;
                      long long v191 = v180[1];
                      long long v192 = v180[2];
                      long long v193 = v180[4];
                      v182[3] = v180[3];
                      v182[4] = v193;
                      v182[1] = v191;
                      v182[2] = v192;
                      long long v194 = v180[5];
                      long long v195 = v180[6];
                      long long v196 = v180[7];
                      *(long long *)((char *)v182 + 124) = *(long long *)((char *)v180 + 124);
                      v182[6] = v195;
                      v182[7] = v196;
                      v182[5] = v194;
                      if (v176 < v179) {
                        break;
                      }
                      uint64_t v197 = (2 * v179) | 1;
                      float64x2_t v180 = &a1[9 * v197];
                      uint64_t v198 = 2 * v179 + 2;
                      if (v198 < v13)
                      {
                        double v199 = sub_100C8D8BC((uint64_t)&a1[9 * v197]);
                        if (v199 < sub_100C8D8BC((uint64_t)(v180 + 9)))
                        {
                          v180 += 9;
                          uint64_t v197 = v198;
                        }
                      }
                      double v200 = sub_100C8D8BC((uint64_t)v180);
                      float64x2_t v182 = v190;
                      uint64_t v179 = v197;
                    }
                    while (v200 >= sub_100C8D8BC((uint64_t)&v303));
                    *float64x2_t v190 = v303;
                    long long v201 = v304;
                    long long v202 = v305;
                    long long v203 = v307;
                    v190[3] = v306;
                    v190[4] = v203;
                    v190[1] = v201;
                    v190[2] = v202;
                    long long v204 = v308;
                    long long v205 = v309;
                    long long v206 = *(_OWORD *)v310;
                    *(long long *)((char *)v190 + 124) = *(_OWORD *)&v310[12];
                    v190[6] = v205;
                    v190[7] = v206;
                    v190[5] = v204;
                  }
                }
                int64_t v177 = v178 - 1;
              }
              while (v178);
              int64_t v207 = v12 / 0x90uLL;
              float64x2_t v208 = v294;
              do
              {
                uint64_t v209 = 0;
                long long v295 = *a1;
                long long v210 = a1[1];
                long long v211 = a1[2];
                long long v212 = a1[4];
                long long v298 = a1[3];
                long long v299 = v212;
                long long v296 = v210;
                long long v297 = v211;
                long long v213 = a1[5];
                long long v214 = a1[6];
                long long v215 = a1[8];
                *(_OWORD *)float64x2_t v302 = a1[7];
                *(_OWORD *)&v302[16] = v215;
                long long v300 = v213;
                long long v301 = v214;
                float64x2_t v216 = a1;
                do
                {
                  float64x2_t v217 = &v216[9 * v209 + 9];
                  uint64_t v218 = (2 * v209) | 1;
                  uint64_t v219 = 2 * v209 + 2;
                  if (v219 < v207)
                  {
                    double v220 = sub_100C8D8BC((uint64_t)&v216[9 * v209 + 9]);
                    if (v220 < sub_100C8D8BC((uint64_t)(v217 + 9)))
                    {
                      v217 += 9;
                      uint64_t v218 = v219;
                    }
                  }
                  *float64x2_t v216 = *v217;
                  long long v221 = v217[1];
                  long long v222 = v217[2];
                  long long v223 = v217[4];
                  v216[3] = v217[3];
                  _DWORD v216[4] = v223;
                  v216[1] = v221;
                  v216[2] = v222;
                  long long v224 = v217[5];
                  long long v225 = v217[6];
                  long long v226 = v217[7];
                  *(long long *)((char *)v216 + 124) = *(long long *)((char *)v217 + 124);
                  v216[6] = v225;
                  v216[7] = v226;
                  v216[5] = v224;
                  float64x2_t v216 = v217;
                  uint64_t v209 = v218;
                }
                while (v218 <= (uint64_t)((unint64_t)(v207 - 2) >> 1));
                v208 -= 9;
                if (v217 == v208)
                {
                  *float64x2_t v217 = v295;
                  long long v263 = v296;
                  long long v264 = v297;
                  long long v265 = v299;
                  v217[3] = v298;
                  v217[4] = v265;
                  v217[1] = v263;
                  void v217[2] = v264;
                  long long v266 = v300;
                  long long v267 = v301;
                  long long v268 = *(_OWORD *)v302;
                  *(long long *)((char *)v217 + 124) = *(_OWORD *)&v302[12];
                  v217[6] = v267;
                  v217[7] = v268;
                  v217[5] = v266;
                }
                else
                {
                  *float64x2_t v217 = *v208;
                  long long v227 = v208[1];
                  long long v228 = v208[2];
                  long long v229 = v208[4];
                  v217[3] = v208[3];
                  v217[4] = v229;
                  v217[1] = v227;
                  void v217[2] = v228;
                  long long v230 = v208[5];
                  long long v231 = v208[6];
                  long long v232 = v208[7];
                  *(long long *)((char *)v217 + 124) = *(long long *)((char *)v208 + 124);
                  v217[6] = v231;
                  v217[7] = v232;
                  v217[5] = v230;
                  *float64x2_t v208 = v295;
                  long long v233 = v296;
                  long long v234 = v297;
                  long long v235 = v299;
                  v208[3] = v298;
                  v208[4] = v235;
                  v208[1] = v233;
                  v208[2] = v234;
                  long long v236 = v300;
                  long long v237 = v301;
                  long long v238 = *(_OWORD *)v302;
                  *(long long *)((char *)v208 + 124) = *(_OWORD *)&v302[12];
                  v208[6] = v237;
                  v208[7] = v238;
                  v208[5] = v236;
                  uint64_t v239 = (char *)v217 - (char *)a1 + 144;
                  if (v239 >= 145)
                  {
                    unint64_t v240 = (v239 / 0x90uLL - 2) >> 1;
                    float64x2_t v241 = &a1[9 * v240];
                    double v242 = sub_100C8D8BC((uint64_t)v241);
                    if (v242 < sub_100C8D8BC((uint64_t)v217))
                    {
                      long long v303 = *v217;
                      long long v243 = v217[1];
                      long long v244 = v217[2];
                      long long v245 = v217[4];
                      long long v306 = v217[3];
                      long long v307 = v245;
                      long long v304 = v243;
                      long long v305 = v244;
                      long long v246 = v217[5];
                      long long v247 = v217[6];
                      long long v248 = v217[8];
                      *(_OWORD *)float64x2_t v310 = v217[7];
                      *(_OWORD *)&v310[16] = v248;
                      long long v308 = v246;
                      long long v309 = v247;
                      do
                      {
                        float64x2_t v249 = v241;
                        *float64x2_t v217 = *v241;
                        long long v250 = v241[1];
                        long long v251 = v241[2];
                        long long v252 = v241[4];
                        v217[3] = v241[3];
                        v217[4] = v252;
                        v217[1] = v250;
                        void v217[2] = v251;
                        long long v253 = v241[5];
                        long long v254 = v241[6];
                        long long v255 = v241[7];
                        *(long long *)((char *)v217 + 124) = *(long long *)((char *)v241 + 124);
                        v217[6] = v254;
                        v217[7] = v255;
                        v217[5] = v253;
                        if (!v240) {
                          break;
                        }
                        unint64_t v240 = (v240 - 1) >> 1;
                        float64x2_t v241 = &a1[9 * v240];
                        double v256 = sub_100C8D8BC((uint64_t)v241);
                        float64x2_t v217 = v249;
                      }
                      while (v256 < sub_100C8D8BC((uint64_t)&v303));
                      *float64x2_t v249 = v303;
                      long long v257 = v304;
                      long long v258 = v305;
                      long long v259 = v307;
                      v249[3] = v306;
                      v249[4] = v259;
                      v249[1] = v257;
                      v249[2] = v258;
                      long long v260 = v308;
                      long long v261 = v309;
                      long long v262 = *(_OWORD *)v310;
                      *(long long *)((char *)v249 + 124) = *(_OWORD *)&v310[12];
                      v249[6] = v261;
                      v249[7] = v262;
                      v249[5] = v260;
                    }
                  }
                }
              }
              while (v207-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &a1[9 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x4801)
          {
            sub_101456AD4(v15, a1, v10);
          }
          else
          {
            sub_101456AD4(a1, v15, v10);
            uint64_t v16 = 9 * v14;
            sub_101456AD4(a1 + 9, &a1[v16 - 9], v293);
            sub_101456AD4(a1 + 18, &a1[v16 + 9], v292);
            sub_101456AD4(&a1[v16 - 9], v15, &a1[v16 + 9]);
            long long v303 = *a1;
            long long v17 = a1[1];
            long long v18 = a1[2];
            long long v19 = a1[4];
            long long v306 = a1[3];
            long long v307 = v19;
            long long v304 = v17;
            long long v305 = v18;
            long long v20 = a1[5];
            long long v21 = a1[6];
            long long v22 = a1[8];
            *(_OWORD *)float64x2_t v310 = a1[7];
            *(_OWORD *)&v310[16] = v22;
            long long v308 = v20;
            long long v309 = v21;
            *a1 = *v15;
            long long v23 = v15[1];
            long long v24 = v15[2];
            long long v25 = v15[4];
            a1[3] = v15[3];
            a1[4] = v25;
            a1[1] = v23;
            a1[2] = v24;
            long long v26 = v15[5];
            long long v27 = v15[6];
            long long v28 = v15[7];
            *(long long *)((char *)a1 + 124) = *(long long *)((char *)v15 + 124);
            a1[6] = v27;
            a1[7] = v28;
            a1[5] = v26;
            long long *v15 = v303;
            long long v29 = v304;
            long long v30 = v305;
            long long v31 = v307;
            v15[3] = v306;
            v15[4] = v31;
            v15[1] = v29;
            double v15[2] = v30;
            long long v32 = v308;
            long long v33 = v309;
            long long v34 = *(_OWORD *)v310;
            *(long long *)((char *)v15 + 124) = *(_OWORD *)&v310[12];
            void v15[6] = v33;
            v15[7] = v34;
            void v15[5] = v32;
          }
          --a3;
          if (a4) {
            break;
          }
          double v35 = sub_100C8D8BC((uint64_t)(a1 - 9));
          if (v35 < sub_100C8D8BC((uint64_t)a1)) {
            break;
          }
          long long v295 = *a1;
          long long v84 = a1[1];
          long long v85 = a1[2];
          long long v86 = a1[4];
          long long v298 = a1[3];
          long long v299 = v86;
          long long v296 = v84;
          long long v297 = v85;
          long long v87 = a1[5];
          long long v88 = a1[6];
          long long v89 = a1[8];
          *(_OWORD *)float64x2_t v302 = a1[7];
          *(_OWORD *)&v302[16] = v89;
          long long v300 = v87;
          long long v301 = v88;
          double v90 = sub_100C8D8BC((uint64_t)&v295);
          if (v90 >= sub_100C8D8BC((uint64_t)v10))
          {
            unint64_t v92 = a1 + 9;
            a2 = v294;
            do
            {
              BOOL v11 = v92;
              if (v92 >= v294) {
                break;
              }
              double v93 = sub_100C8D8BC((uint64_t)&v295);
              double v94 = sub_100C8D8BC((uint64_t)v11);
              unint64_t v92 = v11 + 9;
            }
            while (v93 >= v94);
          }
          else
          {
            BOOL v11 = a1;
            a2 = v294;
            do
            {
              v11 += 9;
              double v91 = sub_100C8D8BC((uint64_t)&v295);
            }
            while (v91 >= sub_100C8D8BC((uint64_t)v11));
          }
          long long v95 = a2;
          if (v11 < a2)
          {
            long long v95 = a2;
            do
            {
              v95 -= 9;
              double v96 = sub_100C8D8BC((uint64_t)&v295);
            }
            while (v96 < sub_100C8D8BC((uint64_t)v95));
          }
          while (v11 < v95)
          {
            long long v303 = *v11;
            long long v97 = v11[1];
            long long v98 = v11[2];
            long long v99 = v11[4];
            long long v306 = v11[3];
            long long v307 = v99;
            long long v304 = v97;
            long long v305 = v98;
            long long v100 = v11[5];
            long long v101 = v11[6];
            long long v102 = v11[8];
            *(_OWORD *)float64x2_t v310 = v11[7];
            *(_OWORD *)&v310[16] = v102;
            long long v308 = v100;
            long long v309 = v101;
            long long *v11 = *v95;
            long long v103 = v95[1];
            long long v104 = v95[2];
            long long v105 = v95[4];
            v11[3] = v95[3];
            v11[4] = v105;
            v11[1] = v103;
            v11[2] = v104;
            long long v106 = v95[5];
            long long v107 = v95[6];
            long long v108 = v95[7];
            *(long long *)((char *)v11 + 124) = *(long long *)((char *)v95 + 124);
            v11[6] = v107;
            v11[7] = v108;
            void v11[5] = v106;
            *long long v95 = v303;
            long long v109 = v304;
            long long v110 = v305;
            long long v111 = v307;
            v95[3] = v306;
            v95[4] = v111;
            v95[1] = v109;
            v95[2] = v110;
            long long v112 = v308;
            long long v113 = v309;
            long long v114 = *(_OWORD *)v310;
            *(long long *)((char *)v95 + 124) = *(_OWORD *)&v310[12];
            v95[6] = v113;
            v95[7] = v114;
            v95[5] = v112;
            do
            {
              v11 += 9;
              double v115 = sub_100C8D8BC((uint64_t)&v295);
            }
            while (v115 >= sub_100C8D8BC((uint64_t)v11));
            do
            {
              v95 -= 9;
              double v116 = sub_100C8D8BC((uint64_t)&v295);
            }
            while (v116 < sub_100C8D8BC((uint64_t)v95));
          }
          int v117 = v11 - 9;
          BOOL v4 = v11 - 9 >= a1;
          BOOL v5 = v11 - 9 == a1;
          if (v11 - 9 != a1)
          {
            *a1 = *v117;
            long long v118 = *(v11 - 8);
            long long v119 = *(v11 - 7);
            long long v120 = *(v11 - 5);
            a1[3] = *(v11 - 6);
            a1[4] = v120;
            a1[1] = v118;
            a1[2] = v119;
            long long v121 = *(v11 - 4);
            long long v122 = *(v11 - 3);
            long long v123 = *(v11 - 2);
            *(long long *)((char *)a1 + 124) = *(long long *)((char *)v11 - 20);
            a1[6] = v122;
            a1[7] = v123;
            a1[5] = v121;
          }
          a4 = 0;
          *int v117 = v295;
          long long v124 = v296;
          long long v125 = v297;
          long long v126 = v299;
          *(v11 - 6) = v298;
          *(v11 - 5) = v126;
          *(v11 - 8) = v124;
          *(v11 - 7) = v125;
          long long v127 = v300;
          long long v128 = v301;
          long long v129 = *(_OWORD *)v302;
          *(long long *)((char *)v11 - 20) = *(_OWORD *)&v302[12];
          *(v11 - 3) = v128;
          *(v11 - 2) = v129;
          *(v11 - 4) = v127;
        }
        uint64_t v36 = 0;
        long long v295 = *a1;
        long long v37 = a1[1];
        long long v38 = a1[2];
        long long v39 = a1[4];
        long long v298 = a1[3];
        long long v299 = v39;
        long long v296 = v37;
        long long v297 = v38;
        long long v40 = a1[5];
        long long v41 = a1[6];
        long long v42 = a1[8];
        *(_OWORD *)float64x2_t v302 = a1[7];
        *(_OWORD *)&v302[16] = v42;
        long long v300 = v40;
        long long v301 = v41;
        do
        {
          v36 += 9;
          double v43 = sub_100C8D8BC((uint64_t)&a1[v36]);
        }
        while (v43 < sub_100C8D8BC((uint64_t)&v295));
        uint64_t v44 = &a1[v36];
        unint64_t v45 = (unint64_t)v294;
        BOOL v5 = v36 == 9;
        a2 = v294;
        if (v5)
        {
          unint64_t v45 = (unint64_t)v294;
          do
          {
            if ((unint64_t)v44 >= v45) {
              break;
            }
            v45 -= 144;
            double v47 = sub_100C8D8BC(v45);
          }
          while (v47 >= sub_100C8D8BC((uint64_t)&v295));
        }
        else
        {
          do
          {
            v45 -= 144;
            double v46 = sub_100C8D8BC(v45);
          }
          while (v46 >= sub_100C8D8BC((uint64_t)&v295));
        }
        if ((unint64_t)v44 >= v45)
        {
          long long v70 = v44 - 9;
        }
        else
        {
          long long v48 = v44;
          long long v49 = (long long *)v45;
          do
          {
            long long v303 = *v48;
            long long v50 = v48[1];
            long long v51 = v48[2];
            long long v52 = v48[4];
            long long v306 = v48[3];
            long long v307 = v52;
            long long v304 = v50;
            long long v305 = v51;
            long long v53 = v48[5];
            long long v54 = v48[6];
            long long v55 = v48[8];
            *(_OWORD *)float64x2_t v310 = v48[7];
            *(_OWORD *)&v310[16] = v55;
            long long v308 = v53;
            long long v309 = v54;
            long long *v48 = *v49;
            long long v56 = v49[1];
            long long v57 = v49[2];
            long long v58 = v49[4];
            v48[3] = v49[3];
            v48[4] = v58;
            v48[1] = v56;
            v48[2] = v57;
            long long v59 = v49[5];
            long long v60 = v49[6];
            long long v61 = v49[7];
            *(long long *)((char *)v48 + 124) = *(long long *)((char *)v49 + 124);
            v48[6] = v60;
            v48[7] = v61;
            v48[5] = v59;
            long long *v49 = v303;
            long long v62 = v304;
            long long v63 = v305;
            long long v64 = v307;
            v49[3] = v306;
            v49[4] = v64;
            v49[1] = v62;
            v49[2] = v63;
            long long v65 = v308;
            long long v66 = v309;
            long long v67 = *(_OWORD *)v310;
            *(long long *)((char *)v49 + 124) = *(_OWORD *)&v310[12];
            v49[6] = v66;
            v49[7] = v67;
            v49[5] = v65;
            do
            {
              v48 += 9;
              double v68 = sub_100C8D8BC((uint64_t)v48);
            }
            while (v68 < sub_100C8D8BC((uint64_t)&v295));
            do
            {
              v49 -= 9;
              double v69 = sub_100C8D8BC((uint64_t)v49);
            }
            while (v69 >= sub_100C8D8BC((uint64_t)&v295));
          }
          while (v48 < v49);
          long long v70 = v48 - 9;
        }
        if (v70 != a1)
        {
          *a1 = *v70;
          long long v71 = v70[1];
          long long v72 = v70[2];
          long long v73 = v70[4];
          a1[3] = v70[3];
          a1[4] = v73;
          a1[1] = v71;
          a1[2] = v72;
          long long v74 = v70[5];
          long long v75 = v70[6];
          long long v76 = v70[7];
          *(long long *)((char *)a1 + 124) = *(long long *)((char *)v70 + 124);
          a1[6] = v75;
          a1[7] = v76;
          a1[5] = v74;
        }
        *long long v70 = v295;
        long long v77 = v296;
        long long v78 = v297;
        long long v79 = v299;
        v70[3] = v298;
        v70[4] = v79;
        v70[1] = v77;
        v70[2] = v78;
        long long v80 = v300;
        long long v81 = v301;
        long long v82 = *(_OWORD *)v302;
        *(long long *)((char *)v70 + 124) = *(_OWORD *)&v302[12];
        v70[6] = v81;
        v70[7] = v82;
        v70[5] = v80;
        if ((unint64_t)v44 >= v45) {
          break;
        }
LABEL_32:
        sub_101455A50(a1, v70, a3, a4 & 1);
        a4 = 0;
        BOOL v11 = v70 + 9;
      }
      BOOL v83 = sub_101456DF8(a1, v70);
      BOOL v11 = v70 + 9;
      if (sub_101456DF8(v70 + 9, v294)) {
        break;
      }
      if (!v83) {
        goto LABEL_32;
      }
    }
    a2 = v70;
    if (!v83) {
      continue;
    }
    break;
  }
}

void sub_101456810(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  sub_1014570D4(a1, a2, a3, a4);
  double v10 = sub_100C8D8BC((uint64_t)a5);
  if (v10 < sub_100C8D8BC((uint64_t)a4))
  {
    long long v62 = a4[6];
    *(_OWORD *)long long v66 = a4[7];
    *(_OWORD *)&v66[16] = a4[8];
    long long v46 = a4[2];
    long long v50 = a4[3];
    long long v54 = a4[4];
    long long v58 = a4[5];
    long long v38 = *a4;
    long long v42 = a4[1];
    *a4 = *a5;
    long long v11 = a5[1];
    long long v12 = a5[2];
    long long v13 = a5[4];
    a4[3] = a5[3];
    a4[4] = v13;
    a4[1] = v11;
    a4[2] = v12;
    long long v14 = a5[5];
    long long v15 = a5[6];
    long long v16 = a5[7];
    *(long long *)((char *)a4 + 124) = *(long long *)((char *)a5 + 124);
    a4[6] = v15;
    a4[7] = v16;
    a4[5] = v14;
    a5[6] = v62;
    a5[7] = *(_OWORD *)v66;
    *(long long *)((char *)a5 + 124) = *(_OWORD *)&v66[12];
    a5[2] = v46;
    a5[3] = v50;
    a5[4] = v54;
    a5[5] = v58;
    *a5 = v38;
    a5[1] = v42;
    double v17 = sub_100C8D8BC((uint64_t)a4);
    if (v17 < sub_100C8D8BC((uint64_t)a3))
    {
      long long v63 = a3[6];
      *(_OWORD *)long long v67 = a3[7];
      *(_OWORD *)&v67[16] = a3[8];
      long long v47 = a3[2];
      long long v51 = a3[3];
      long long v55 = a3[4];
      long long v59 = a3[5];
      long long v39 = *a3;
      long long v43 = a3[1];
      *a3 = *a4;
      long long v18 = a4[1];
      long long v19 = a4[2];
      long long v20 = a4[4];
      a3[3] = a4[3];
      a3[4] = v20;
      a3[1] = v18;
      a3[2] = v19;
      long long v21 = a4[5];
      long long v22 = a4[6];
      long long v23 = a4[7];
      *(long long *)((char *)a3 + 124) = *(long long *)((char *)a4 + 124);
      a3[6] = v22;
      a3[7] = v23;
      a3[5] = v21;
      a4[6] = v63;
      a4[7] = *(_OWORD *)v67;
      *(long long *)((char *)a4 + 124) = *(_OWORD *)&v67[12];
      a4[2] = v47;
      a4[3] = v51;
      a4[4] = v55;
      a4[5] = v59;
      *a4 = v39;
      a4[1] = v43;
      double v24 = sub_100C8D8BC((uint64_t)a3);
      if (v24 < sub_100C8D8BC((uint64_t)a2))
      {
        long long v64 = a2[6];
        *(_OWORD *)double v68 = a2[7];
        *(_OWORD *)&v68[16] = a2[8];
        long long v48 = a2[2];
        long long v52 = a2[3];
        long long v56 = a2[4];
        long long v60 = a2[5];
        long long v40 = *a2;
        long long v44 = a2[1];
        *a2 = *a3;
        long long v25 = a3[1];
        long long v26 = a3[2];
        long long v27 = a3[4];
        a2[3] = a3[3];
        a2[4] = v27;
        a2[1] = v25;
        a2[2] = v26;
        long long v28 = a3[5];
        long long v29 = a3[6];
        long long v30 = a3[7];
        *(long long *)((char *)a2 + 124) = *(long long *)((char *)a3 + 124);
        a2[6] = v29;
        a2[7] = v30;
        a2[5] = v28;
        a3[6] = v64;
        a3[7] = *(_OWORD *)v68;
        *(long long *)((char *)a3 + 124) = *(_OWORD *)&v68[12];
        a3[2] = v48;
        a3[3] = v52;
        a3[4] = v56;
        a3[5] = v60;
        *a3 = v40;
        a3[1] = v44;
        double v31 = sub_100C8D8BC((uint64_t)a2);
        if (v31 < sub_100C8D8BC((uint64_t)a1))
        {
          long long v65 = a1[6];
          *(_OWORD *)double v69 = a1[7];
          *(_OWORD *)&v69[16] = a1[8];
          long long v49 = a1[2];
          long long v53 = a1[3];
          long long v57 = a1[4];
          long long v61 = a1[5];
          long long v41 = *a1;
          long long v45 = a1[1];
          *a1 = *a2;
          long long v32 = a2[1];
          long long v33 = a2[2];
          long long v34 = a2[4];
          a1[3] = a2[3];
          a1[4] = v34;
          a1[1] = v32;
          a1[2] = v33;
          long long v35 = a2[5];
          long long v36 = a2[6];
          long long v37 = a2[7];
          *(long long *)((char *)a1 + 124) = *(long long *)((char *)a2 + 124);
          a1[6] = v36;
          a1[7] = v37;
          a1[5] = v35;
          a2[6] = v65;
          a2[7] = *(_OWORD *)v69;
          *(long long *)((char *)a2 + 124) = *(_OWORD *)&v69[12];
          a2[2] = v49;
          a2[3] = v53;
          a2[4] = v57;
          a2[5] = v61;
          *a2 = v41;
          a2[1] = v45;
        }
      }
    }
  }
}

void sub_101456AD4(long long *a1, long long *a2, long long *a3)
{
  double v6 = sub_100C8D8BC((uint64_t)a2);
  double v7 = sub_100C8D8BC((uint64_t)a1);
  double v8 = sub_100C8D8BC((uint64_t)a3);
  double v9 = sub_100C8D8BC((uint64_t)a2);
  if (v6 >= v7)
  {
    if (v8 < v9)
    {
      long long v67 = a2[6];
      *(_OWORD *)long long v71 = a2[7];
      *(_OWORD *)&v71[16] = a2[8];
      long long v51 = a2[2];
      long long v55 = a2[3];
      long long v59 = a2[4];
      long long v63 = a2[5];
      long long v43 = *a2;
      long long v47 = a2[1];
      *a2 = *a3;
      long long v16 = a3[1];
      long long v17 = a3[2];
      long long v18 = a3[4];
      a2[3] = a3[3];
      a2[4] = v18;
      a2[1] = v16;
      a2[2] = v17;
      long long v19 = a3[5];
      long long v20 = a3[6];
      long long v21 = a3[7];
      *(long long *)((char *)a2 + 124) = *(long long *)((char *)a3 + 124);
      a2[6] = v20;
      a2[7] = v21;
      a2[5] = v19;
      a3[6] = v67;
      a3[7] = *(_OWORD *)v71;
      *(long long *)((char *)a3 + 124) = *(_OWORD *)&v71[12];
      a3[2] = v51;
      a3[3] = v55;
      a3[4] = v59;
      a3[5] = v63;
      *a3 = v43;
      a3[1] = v47;
      double v22 = sub_100C8D8BC((uint64_t)a2);
      if (v22 < sub_100C8D8BC((uint64_t)a1))
      {
        long long v68 = a1[6];
        *(_OWORD *)long long v72 = a1[7];
        *(_OWORD *)&v72[16] = a1[8];
        long long v52 = a1[2];
        long long v56 = a1[3];
        long long v60 = a1[4];
        long long v64 = a1[5];
        long long v44 = *a1;
        long long v48 = a1[1];
        *a1 = *a2;
        long long v23 = a2[1];
        long long v24 = a2[2];
        long long v25 = a2[4];
        a1[3] = a2[3];
        a1[4] = v25;
        a1[1] = v23;
        a1[2] = v24;
        long long v26 = a2[5];
        long long v27 = a2[6];
        long long v28 = a2[7];
        *(long long *)((char *)a1 + 124) = *(long long *)((char *)a2 + 124);
        a1[6] = v27;
        a1[7] = v28;
        a1[5] = v26;
        a2[6] = v68;
        a2[7] = *(_OWORD *)v72;
        *(long long *)((char *)a2 + 124) = *(_OWORD *)&v72[12];
        a2[2] = v52;
        a2[3] = v56;
        a2[4] = v60;
        a2[5] = v64;
        *a2 = v44;
        a2[1] = v48;
      }
    }
  }
  else
  {
    if (v8 >= v9)
    {
      long long v69 = a1[6];
      *(_OWORD *)long long v73 = a1[7];
      *(_OWORD *)&v73[16] = a1[8];
      long long v53 = a1[2];
      long long v57 = a1[3];
      long long v61 = a1[4];
      long long v65 = a1[5];
      long long v45 = *a1;
      long long v49 = a1[1];
      *a1 = *a2;
      long long v29 = a2[1];
      long long v30 = a2[2];
      long long v31 = a2[4];
      a1[3] = a2[3];
      a1[4] = v31;
      a1[1] = v29;
      a1[2] = v30;
      long long v32 = a2[5];
      long long v33 = a2[6];
      long long v34 = a2[7];
      *(long long *)((char *)a1 + 124) = *(long long *)((char *)a2 + 124);
      a1[6] = v33;
      a1[7] = v34;
      a1[5] = v32;
      a2[6] = v69;
      a2[7] = *(_OWORD *)v73;
      *(long long *)((char *)a2 + 124) = *(_OWORD *)&v73[12];
      a2[2] = v53;
      a2[3] = v57;
      a2[4] = v61;
      a2[5] = v65;
      *a2 = v45;
      a2[1] = v49;
      double v35 = sub_100C8D8BC((uint64_t)a3);
      if (v35 >= sub_100C8D8BC((uint64_t)a2)) {
        return;
      }
      long long v66 = a2[6];
      *(_OWORD *)long long v70 = a2[7];
      *(_OWORD *)&v70[16] = a2[8];
      long long v50 = a2[2];
      long long v54 = a2[3];
      long long v58 = a2[4];
      long long v62 = a2[5];
      long long v42 = *a2;
      long long v46 = a2[1];
      *a2 = *a3;
      long long v36 = a3[1];
      long long v37 = a3[2];
      long long v38 = a3[4];
      a2[3] = a3[3];
      a2[4] = v38;
      a2[1] = v36;
      a2[2] = v37;
      long long v39 = a3[5];
      long long v40 = a3[6];
      long long v41 = a3[7];
      *(long long *)((char *)a2 + 124) = *(long long *)((char *)a3 + 124);
      a2[6] = v40;
      a2[7] = v41;
      a2[5] = v39;
    }
    else
    {
      long long v66 = a1[6];
      *(_OWORD *)long long v70 = a1[7];
      *(_OWORD *)&v70[16] = a1[8];
      long long v50 = a1[2];
      long long v54 = a1[3];
      long long v58 = a1[4];
      long long v62 = a1[5];
      long long v42 = *a1;
      long long v46 = a1[1];
      *a1 = *a3;
      long long v10 = a3[1];
      long long v11 = a3[2];
      long long v12 = a3[4];
      a1[3] = a3[3];
      a1[4] = v12;
      a1[1] = v10;
      a1[2] = v11;
      long long v13 = a3[5];
      long long v14 = a3[6];
      long long v15 = a3[7];
      *(long long *)((char *)a1 + 124) = *(long long *)((char *)a3 + 124);
      a1[6] = v14;
      a1[7] = v15;
      a1[5] = v13;
    }
    a3[6] = v66;
    a3[7] = *(_OWORD *)v70;
    *(long long *)((char *)a3 + 124) = *(_OWORD *)&v70[12];
    a3[2] = v50;
    a3[3] = v54;
    a3[4] = v58;
    a3[5] = v62;
    *a3 = v42;
    a3[1] = v46;
  }
}

BOOL sub_101456DF8(long long *a1, long long *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double v6 = a2 - 9;
      double v7 = sub_100C8D8BC((uint64_t)(a2 - 9));
      if (v7 >= sub_100C8D8BC((uint64_t)a1)) {
        return 1;
      }
      long long v8 = a1[7];
      long long v50 = a1[6];
      *(_OWORD *)long long v51 = v8;
      *(_OWORD *)&v51[16] = a1[8];
      long long v9 = a1[3];
      long long v46 = a1[2];
      long long v47 = v9;
      long long v10 = a1[5];
      long long v48 = a1[4];
      long long v49 = v10;
      long long v11 = a1[1];
      long long v44 = *a1;
      long long v45 = v11;
      *a1 = *v6;
      long long v12 = v6[1];
      long long v13 = v6[2];
      long long v14 = v6[4];
      a1[3] = v6[3];
      a1[4] = v14;
      a1[1] = v12;
      a1[2] = v13;
      long long v15 = v6[5];
      long long v16 = v6[6];
      long long v17 = v6[7];
      *(long long *)((char *)a1 + 124) = *(long long *)((char *)v6 + 124);
      a1[6] = v16;
      a1[7] = v17;
      a1[5] = v15;
      long long v18 = *(_OWORD *)v51;
      v6[6] = v50;
      v6[7] = v18;
      *(long long *)((char *)v6 + 124) = *(_OWORD *)&v51[12];
      long long v19 = v47;
      double v6[2] = v46;
      void v6[3] = v19;
      long long v20 = v49;
      _DWORD v6[4] = v48;
      _DWORD v6[5] = v20;
      long long v21 = v45;
      BOOL result = 1;
      *double v6 = v44;
      v6[1] = v21;
      return result;
    case 3uLL:
      sub_101456AD4(a1, a1 + 9, a2 - 9);
      return 1;
    case 4uLL:
      sub_1014570D4(a1, a1 + 9, a1 + 18, a2 - 9);
      return 1;
    case 5uLL:
      sub_101456810(a1, a1 + 9, a1 + 18, a1 + 27, a2 - 9);
      return 1;
    default:
      uint64_t v22 = (uint64_t)(a1 + 18);
      sub_101456AD4(a1, a1 + 9, a1 + 18);
      long long v23 = a1 + 27;
      if (a1 + 27 == a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      break;
  }
  while (1)
  {
    double v26 = sub_100C8D8BC((uint64_t)v23);
    if (v26 < sub_100C8D8BC(v22))
    {
      long long v27 = v23[7];
      long long v50 = v23[6];
      *(_OWORD *)long long v51 = v27;
      *(_OWORD *)&v51[16] = v23[8];
      long long v28 = v23[3];
      long long v46 = v23[2];
      long long v47 = v28;
      long long v29 = v23[5];
      long long v48 = v23[4];
      long long v49 = v29;
      long long v30 = v23[1];
      uint64_t v31 = v24;
      long long v44 = *v23;
      long long v45 = v30;
      while (1)
      {
        long long v32 = (long long *)((char *)a1 + v31);
        long long v33 = *(long long *)((char *)a1 + v31 + 400);
        v32[33] = *(long long *)((char *)a1 + v31 + 384);
        v32[34] = v33;
        long long v34 = *(long long *)((char *)a1 + v31 + 336);
        v32[29] = *(long long *)((char *)a1 + v31 + 320);
        v32[30] = v34;
        long long v35 = *(long long *)((char *)a1 + v31 + 368);
        v32[31] = *(long long *)((char *)a1 + v31 + 352);
        v32[32] = v35;
        long long v36 = *(long long *)((char *)a1 + v31 + 304);
        v32[27] = *(long long *)((char *)a1 + v31 + 288);
        v32[28] = v36;
        *(long long *)((char *)a1 + v31 + 556) = *(long long *)((char *)a1 + v31 + 412);
        if (v31 == -288) {
          break;
        }
        uint64_t v37 = (uint64_t)(v32 + 9);
        double v38 = sub_100C8D8BC((uint64_t)&v44);
        v31 -= 144;
        if (v38 >= sub_100C8D8BC(v37))
        {
          long long v39 = (long long *)((char *)a1 + v31 + 432);
          goto LABEL_12;
        }
      }
      long long v39 = a1;
LABEL_12:
      long long v40 = *(_OWORD *)v51;
      v39[6] = v50;
      v39[7] = v40;
      *(long long *)((char *)v39 + 124) = *(_OWORD *)&v51[12];
      long long v41 = v47;
      v39[2] = v46;
      v39[3] = v41;
      long long v42 = v49;
      v39[4] = v48;
      v39[5] = v42;
      long long v43 = v45;
      ++v25;
      *long long v39 = v44;
      v39[1] = v43;
      if (v25 == 8) {
        return v23 + 9 == a2;
      }
    }
    uint64_t v22 = (uint64_t)v23;
    v24 += 144;
    v23 += 9;
    if (v23 == a2) {
      return 1;
    }
  }
}

void sub_1014570D4(long long *a1, long long *a2, long long *a3, long long *a4)
{
  sub_101456AD4(a1, a2, a3);
  double v8 = sub_100C8D8BC((uint64_t)a4);
  if (v8 < sub_100C8D8BC((uint64_t)a3))
  {
    long long v47 = a3[6];
    *(_OWORD *)long long v50 = a3[7];
    *(_OWORD *)&v50[16] = a3[8];
    long long v35 = a3[2];
    long long v38 = a3[3];
    long long v41 = a3[4];
    long long v44 = a3[5];
    long long v29 = *a3;
    long long v32 = a3[1];
    *a3 = *a4;
    long long v9 = a4[1];
    long long v10 = a4[2];
    long long v11 = a4[4];
    a3[3] = a4[3];
    a3[4] = v11;
    a3[1] = v9;
    a3[2] = v10;
    long long v12 = a4[5];
    long long v13 = a4[6];
    long long v14 = a4[7];
    *(long long *)((char *)a3 + 124) = *(long long *)((char *)a4 + 124);
    a3[6] = v13;
    a3[7] = v14;
    a3[5] = v12;
    a4[6] = v47;
    a4[7] = *(_OWORD *)v50;
    *(long long *)((char *)a4 + 124) = *(_OWORD *)&v50[12];
    a4[2] = v35;
    a4[3] = v38;
    a4[4] = v41;
    a4[5] = v44;
    *a4 = v29;
    a4[1] = v32;
    double v15 = sub_100C8D8BC((uint64_t)a3);
    if (v15 < sub_100C8D8BC((uint64_t)a2))
    {
      long long v48 = a2[6];
      *(_OWORD *)long long v51 = a2[7];
      *(_OWORD *)&v51[16] = a2[8];
      long long v36 = a2[2];
      long long v39 = a2[3];
      long long v42 = a2[4];
      long long v45 = a2[5];
      long long v30 = *a2;
      long long v33 = a2[1];
      *a2 = *a3;
      long long v16 = a3[1];
      long long v17 = a3[2];
      long long v18 = a3[4];
      a2[3] = a3[3];
      a2[4] = v18;
      a2[1] = v16;
      a2[2] = v17;
      long long v19 = a3[5];
      long long v20 = a3[6];
      long long v21 = a3[7];
      *(long long *)((char *)a2 + 124) = *(long long *)((char *)a3 + 124);
      a2[6] = v20;
      a2[7] = v21;
      a2[5] = v19;
      a3[6] = v48;
      a3[7] = *(_OWORD *)v51;
      *(long long *)((char *)a3 + 124) = *(_OWORD *)&v51[12];
      a3[2] = v36;
      a3[3] = v39;
      a3[4] = v42;
      a3[5] = v45;
      *a3 = v30;
      a3[1] = v33;
      double v22 = sub_100C8D8BC((uint64_t)a2);
      if (v22 < sub_100C8D8BC((uint64_t)a1))
      {
        long long v49 = a1[6];
        *(_OWORD *)long long v52 = a1[7];
        *(_OWORD *)&v52[16] = a1[8];
        long long v37 = a1[2];
        long long v40 = a1[3];
        long long v43 = a1[4];
        long long v46 = a1[5];
        long long v31 = *a1;
        long long v34 = a1[1];
        *a1 = *a2;
        long long v23 = a2[1];
        long long v24 = a2[2];
        long long v25 = a2[4];
        a1[3] = a2[3];
        a1[4] = v25;
        a1[1] = v23;
        a1[2] = v24;
        long long v26 = a2[5];
        long long v27 = a2[6];
        long long v28 = a2[7];
        *(long long *)((char *)a1 + 124) = *(long long *)((char *)a2 + 124);
        a1[6] = v27;
        a1[7] = v28;
        a1[5] = v26;
        a2[6] = v49;
        a2[7] = *(_OWORD *)v52;
        *(long long *)((char *)a2 + 124) = *(_OWORD *)&v52[12];
        a2[2] = v37;
        a2[3] = v40;
        a2[4] = v43;
        a2[5] = v46;
        *a2 = v31;
        a2[1] = v34;
      }
    }
  }
}

_OWORD *sub_1014572F0(_OWORD *a1, _OWORD *a2, void **a3)
{
  uint64_t v3 = a1;
  double v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_101457354(&v6, v3);
    v3 += 9;
  }
  while (v3 != v4);
  return v4;
}

void ***sub_101457354(void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = (*a1)[1];
  double v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v17 = 0x8E38E38E38E38E39 * (((char *)v5 - (unsigned char *)*v4) >> 4);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x1C71C71C71C71C7) {
      sub_1001D7FD4();
    }
    unint64_t v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - (void)*v4) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0xE38E38E38E38E3) {
      unint64_t v20 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20) {
      long long v21 = (char *)sub_10014E7AC(v7, v20);
    }
    else {
      long long v21 = 0;
    }
    double v22 = &v21[144 * v17];
    long long v23 = &v21[144 * v20];
    *(_OWORD *)double v22 = *a2;
    long long v24 = a2[1];
    long long v25 = a2[2];
    long long v26 = a2[4];
    *((_OWORD *)v22 + 3) = a2[3];
    *((_OWORD *)v22 + 4) = v26;
    *((_OWORD *)v22 + 1) = v24;
    *((_OWORD *)v22 + 2) = v25;
    long long v27 = a2[5];
    long long v28 = a2[6];
    long long v29 = a2[8];
    *((_OWORD *)v22 + 7) = a2[7];
    *((_OWORD *)v22 + 8) = v29;
    *((_OWORD *)v22 + 5) = v27;
    *((_OWORD *)v22 + 6) = v28;
    long long v16 = v22 + 144;
    long long v31 = (char *)*v4;
    long long v30 = (char *)v4[1];
    if (v30 != *v4)
    {
      do
      {
        *((_OWORD *)v22 - 9) = *((_OWORD *)v30 - 9);
        long long v32 = *((_OWORD *)v30 - 8);
        long long v33 = *((_OWORD *)v30 - 7);
        long long v34 = *((_OWORD *)v30 - 5);
        *((_OWORD *)v22 - 6) = *((_OWORD *)v30 - 6);
        *((_OWORD *)v22 - 5) = v34;
        *((_OWORD *)v22 - 8) = v32;
        *((_OWORD *)v22 - 7) = v33;
        long long v35 = *((_OWORD *)v30 - 4);
        long long v36 = *((_OWORD *)v30 - 3);
        long long v37 = *((_OWORD *)v30 - 2);
        *(_OWORD *)(v22 - 20) = *(_OWORD *)(v30 - 20);
        *((_OWORD *)v22 - 3) = v36;
        *((_OWORD *)v22 - 2) = v37;
        *((_OWORD *)v22 - 4) = v35;
        v22 -= 144;
        v30 -= 144;
      }
      while (v30 != v31);
      long long v30 = (char *)*v4;
    }
    _OWORD *v4 = v22;
    v4[1] = v16;
    id v4[2] = v23;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    _OWORD *v5 = *a2;
    long long v10 = a2[1];
    long long v11 = a2[2];
    long long v12 = a2[4];
    v5[3] = a2[3];
    void v5[4] = v12;
    v5[1] = v10;
    uint64_t v5[2] = v11;
    long long v13 = a2[5];
    long long v14 = a2[6];
    long long v15 = a2[8];
    v5[7] = a2[7];
    void v5[8] = v15;
    void v5[5] = v13;
    void v5[6] = v14;
    long long v16 = v5 + 9;
  }
  v4[1] = v16;
  return a1;
}

BOOL sub_101457508()
{
  uint64_t v2 = *(NSObject **)(v0 + 952);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_101457524()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1014575DC(_Unwind_Exception *a1)
{
}

void sub_1014575F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10145769C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1014576B4()
{
  qword_102487C10 = *sub_10141303C();
  BOOL result = sub_10141303C();
  qword_102487C18 = result[1];
  return result;
}

uint64_t sub_1014576E8(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v6 = sub_1005B1C18(a1);
  *(void *)uint64_t v6 = off_1023274E8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(v6 + 40), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(v6 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(v6 + 40) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 80) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 64) = v8;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_1014577BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014577F4(uint64_t result)
{
  *(void *)(result + 88) = 0;
  return result;
}

uint64_t sub_1014577FC(uint64_t result, int a2)
{
  if (a2) {
    ++*(_DWORD *)(result + 88);
  }
  else {
    ++*(_DWORD *)(result + 92);
  }
  return result;
}

uint64_t sub_101457820(uint64_t a1)
{
  v5[0] = @"databaseNumValid";
  v6[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  v5[1] = @"databaseNumInvalid";
  v6[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 92)];
  uint64_t v5[2] = @"databaseName";
  uint64_t v2 = (void *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  double v6[2] = +[NSString stringWithUTF8String:v2];
  v5[3] = @"databaseClient";
  uint64_t v3 = (void *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  void v6[3] = +[NSString stringWithUTF8String:v3];
  +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:4];
  return AnalyticsSendEventLazy();
}

uint64_t sub_101457974(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10145797C(uint64_t a1)
{
  *(void *)a1 = off_1023274E8;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }

  operator delete();
}

void sub_1014579FC(float32x2_t *a1, float32x2_t *a2, uint64_t *a3)
{
  if (a2)
  {
    a2[4].i32[0] |= 1u;
    uint64_t v5 = (uint64_t)a2[1];
    if (!v5) {
      operator new();
    }
    sub_101457C60(a3, v5);
    __int32 v6 = a2[4].i32[0];
    a2[2] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(a1[1]), (float64x2_t)vdupq_n_s64(0xC0239D013A92A305)));
    float32_t v7 = a1[2].f32[0] * -9.80665;
    a2[4].i32[0] = v6 | 0xE;
    a2[3].f32[0] = v7;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    long long v8 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLAccelerometerSampleToProtobuf(const CLAccelerometer::Sample &, CLP::LogEntry::PrivateData::AccelSample *const, const CLUtils::Timestamp &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_101457C34()
{
}

uint64_t sub_101457C60(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    if (*((unsigned char *)a1 + 24))
    {
      int v2 = *(_DWORD *)(a2 + 36);
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
      uint64_t v3 = *a1;
      *(_DWORD *)(a2 + 36) = v2 | 7;
      *(void *)(a2 + 24) = v3;
      return 1;
    }
    return 0;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v5 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "pProtoTimestamp is nullptr", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    float32_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::PrivateData::TimeStamp *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_101457E24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(int *)(a1 + 44) < 51)
    {
      *(_DWORD *)(a2 + 80) |= 2u;
      uint64_t v7 = *(void *)(a2 + 16);
      if (!v7) {
        operator new();
      }
      if ((sub_1001C0DB4((double *)(a1 + 24), v7, 0) & 1) == 0)
      {
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        long long v8 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error: Failed to convert AccessoryVehicleSpeed mach time to protobuf", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          double v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLAccessoryVehicleSpeedDataToProtobuf(const CLNmeaSCD &, CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
      }
      unsigned int v9 = sub_1014583D8((int *)(a1 + 36));
      if (!sub_1001662E0(v9)) {
        sub_101A5F0A8();
      }
      *(_DWORD *)(a2 + 80) |= 8u;
      *(_DWORD *)(a2 + 28) = v9;
      unsigned int v10 = sub_101458610((int *)(a1 + 32));
      if (!sub_1001A4C4C(v10)) {
        sub_101A5F07C();
      }
      int v11 = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 80) = v11 | 0x100;
      *(_DWORD *)(a2 + 72) = v10;
      BOOL v12 = *(_DWORD *)(a1 + 40) != 0;
      *(_DWORD *)(a2 + 80) = v11 | 0x180;
      *(unsigned char *)(a2 + 52) = v12;
      int v13 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a2 + 80) = v11 | 0x190;
      *(_DWORD *)(a2 + 48) = v13;
      if (*(_DWORD *)(a1 + 44))
      {
        unint64_t v14 = 0;
        do
        {
          uint64_t v15 = a1 + 8 * v14;
          uint64_t v16 = *(void *)(v15 + 448);
          int v17 = *(_DWORD *)(a2 + 64);
          if (v17 == *(_DWORD *)(a2 + 68))
          {
            sub_10026DE30(a2 + 56, v17 + 1);
            int v17 = *(_DWORD *)(a2 + 64);
          }
          uint64_t v18 = *(void *)(a2 + 56);
          *(_DWORD *)(a2 + 64) = v17 + 1;
          *(void *)(v18 + 8 * v17) = v16;
          uint64_t v19 = *(void *)(v15 + 48);
          int v20 = *(_DWORD *)(a2 + 40);
          if (v20 == *(_DWORD *)(a2 + 44))
          {
            sub_10026DE30(a2 + 32, v20 + 1);
            int v20 = *(_DWORD *)(a2 + 40);
          }
          uint64_t v21 = *(void *)(a2 + 32);
          *(_DWORD *)(a2 + 40) = v20 + 1;
          *(void *)(v21 + 8 * v20) = v19;
          ++v14;
        }
        while (v14 < *(unsigned int *)(a1 + 44));
      }
    }
    else
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v3 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected sample count for AccessoryVehicleSpeed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 == -1)
        {
LABEL_16:
          uint64_t v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLAccessoryVehicleSpeedDataToProtobuf(const CLNmeaSCD &, CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)", "%s\n", v5);
          if (v5 != (char *)buf) {
            free(v5);
          }
          return;
        }
LABEL_43:
        dispatch_once(&qword_1024194C0, &stru_102327520);
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v4 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "pAccessoryVehicleSpeed,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_43;
    }
  }
}

void sub_1014583AC()
{
}

uint64_t sub_1014583D8(int *a1)
{
  int v2 = *a1;
  int v3 = *a1 - 78;
  uint64_t result = 0;
  switch(v3)
  {
    case 0:
      uint64_t result = 4;
      break;
    case 1:
    case 3:
    case 5:
    case 6:
      goto LABEL_5;
    case 2:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 2;
      break;
    case 7:
      return result;
    default:
      if (v2 == 68)
      {
        uint64_t result = 3;
      }
      else
      {
LABEL_5:
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v5 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
        {
          int v6 = *a1;
          *(_DWORD *)std::string buf = 67240192;
          int v10 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Received unhandled transmission state type, %{public}d", buf, 8u);
        }
        BOOL v7 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v7)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          long long v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification_TransmissionStateType ConvertCLNMEASCDTransmissionStateToProtobuf(const CLNmeaSCDTransmissionState &)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          uint64_t result = 0;
        }
      }
      break;
  }
  return result;
}

uint64_t sub_101458610(int *a1)
{
  if (*a1 == 68) {
    return 0;
  }
  if (*a1 == 67) {
    return 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled sensor type, %{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification_SensorType ConvertCLNMEASCDTypeToProtobuf(const CLNmeaSCDType &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

void sub_1014587E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v4 = sub_1014589E4((int *)a1);
    if (!sub_10016E644(v4)) {
      sub_101A5EFCC();
    }
    int v5 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 56) = v5 | 0x1FF;
    *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 24);
    unsigned int v6 = sub_101458BC4((int *)(a1 + 40));
    if (!sub_1003F098C(v6)) {
      sub_101A5EFA0();
    }
    int v7 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 44) = v6;
    int v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 56) = v7 | 0x600;
    *(_DWORD *)(a2 + 48) = v8;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pBodyMetrics,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLBodyMetricsToProtobuf(const CLBodyMetrics &, CLP::LogEntry::PrivateData::BodyMetrics *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_1014589E4(int *a1)
{
  if (!*a1) {
    return 1;
  }
  if (*a1 == 1) {
    return 2;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled natalimeter gender type: %{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BodyMetrics_NatalimeterGenderType ConvertCLNatalimeterGenderTypeToProtobuf(const CLNatalimeterGender &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_101458BC4(int *a1)
{
  if (*a1 < 7) {
    return (*a1 + 1);
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled user condition type: %{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BodyMetrics_UserConditionType ConvertCLUserConditionTypeToProtobuf(const CLUserCondition &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

__n128 sub_101458DB0(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = sub_10146A24C((int *)a1);
  if (!sub_1003DE2E4(v4)) {
    sub_101A5EA78();
  }
  unsigned __int32 v5 = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = v5 | 1;
  unsigned __int32 v6 = *(_DWORD *)(a1 + 4);
  a2->n128_u32[2] = v4;
  a2->n128_u32[3] = v6;
  __n128 result = *(__n128 *)(a1 + 8);
  a2[1] = result;
  a2[2].n128_u16[0] = *(_WORD *)(a1 + 24);
  a2[2].n128_u32[2] = v5 | 0xFF;
  return result;
}

void sub_101458E1C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 96) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    if ((sub_1001C0DB4((double *)(a1 + 88), v4, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      unsigned __int32 v5 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLDirectionOfTravelAssistance mach time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLDirectionOfTravelAssistanceToProtobuf(const CLGpsAssistant_Type::DirectionOfTravelAssistance &, CLP::LogEntry::PrivateData::DirectionOfTravel *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
    int v6 = *(_DWORD *)(a2 + 96);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 48);
    *(void *)(a2 + 48) = *(void *)(a1 + 64);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
    uint8x8_t v7 = *(uint8x8_t *)(a1 + 40);
    *(uint8x8_t *)(a2 + 72) = v7;
    *(_DWORD *)(a2 + 96) = v6 | 0x3DFE;
    v7.i32[0] = *(_DWORD *)(a1 + 72);
    int16x8_t v8 = (int16x8_t)vmovl_u8(v7);
    *(int16x4_t *)v8.i8 = vzip2_s16(vzip1_s16(*(int16x4_t *)v8.i8, (int16x4_t)vext_s8(*(int8x8_t *)v8.i8, *(int8x8_t *)v8.i8, 6uLL)), *(int16x4_t *)v8.i8);
    *(_DWORD *)(a2 + 88) = vmovn_s16(v8).u32[0];
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pDotData,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLDirectionOfTravelAssistanceToProtobuf(const CLGpsAssistant_Type::DirectionOfTravelAssistance &, CLP::LogEntry::PrivateData::DirectionOfTravel *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1014591BC()
{
}

void sub_1014591E8(uint64_t a1, double *a2, uint64_t a3)
{
  if (a3)
  {
    *(_DWORD *)(a3 + 52) |= 1u;
    uint64_t v6 = *(void *)(a3 + 8);
    if (!v6) {
      operator new();
    }
    if ((sub_1001C1658((double *)(a1 + 76), v6, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint8x8_t v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLDEM applicable CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLDEMUpdateToProtobuf(const GNSS::DaemonLocation &, const double &, CLP::LogEntry::PrivateData::DigitalElevationModel *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    int v8 = *(_DWORD *)(a3 + 52);
    *(double *)(a3 + 16) = *(double *)(a1 + 536) + *a2;
    *(void *)(a3 + 24) = *(void *)(a1 + 544);
    *(_DWORD *)(a3 + 52) = v8 | 0x36;
    *(float32x2_t *)(a3 + 36) = vcvt_f32_f64(*(float64x2_t *)(a1 + 520));
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "pDEMMsg,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLDEMUpdateToProtobuf(const GNSS::DaemonLocation &, const double &, CLP::LogEntry::PrivateData::DigitalElevationModel *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_101459570()
{
}

uint64_t sub_10145959C(void *a1, double *a2, void *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    long long v121 = 0;
    unint64_t v122 = 0;
    long long v120 = (uint64_t *)&v121;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    id v8 = [a1 countByEnumeratingWithState:&v116 objects:v126 count:16];
    if (v8)
    {
      obunint64_t j = a1;
      id v106 = v8;
      double v96 = a2;
      unsigned __int8 v102 = 0;
      unsigned int v9 = a3 + 1;
      long long v97 = a3;
      long long v98 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v4 + 16);
      uint64_t v107 = *(void *)v117;
      uint64_t v100 = v4;
      long long v101 = a3 + 1;
      while (2)
      {
        for (id i = 0; i != v106; id i = v24 + 1)
        {
          if (*(void *)v117 != v107) {
            objc_enumerationMutation(obj);
          }
          int v11 = *(void **)(*((void *)&v116 + 1) + 8 * i);
          if (v11)
          {
            long long v108 = (char *)i;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            id v12 = [v11 sections];
            id v13 = [v12 countByEnumeratingWithState:&v133 objects:&__p count:16];
            double v14 = 0.0;
            long long v109 = v11;
            if (v13)
            {
              uint64_t v15 = *(void *)v134;
LABEL_10:
              uint64_t v16 = 0;
              while (1)
              {
                if (*(void *)v134 != v15) {
                  objc_enumerationMutation(v12);
                }
                int v17 = *(void **)(*((void *)&v133 + 1) + 8 * v16);
                if (v17)
                {
                  if ([*(id *)(*((void *)&v133 + 1) + 8 * v16) coordinateCount]) {
                    break;
                  }
                }
                if (qword_102419400 != -1) {
                  dispatch_once(&qword_102419400, &stru_102327540);
                }
                uint64_t v18 = qword_102419408;
                if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)std::string buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "clrgmd,Empty section found in the building data during HashID generation", buf, 2u);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419400 != -1) {
                    dispatch_once(&qword_102419400, &stru_102327540);
                  }
                  LOWORD(v124) = 0;
                  uint64_t v19 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "std::optional<uint64_t> ComputeAndGetBuildingHashID(GEOMapFeatureBuilding *)", "%s\n", v19);
                  if (v19 != (char *)buf) {
                    free(v19);
                  }
                }
                if (v13 == (id)++v16)
                {
                  id v20 = [v12 countByEnumeratingWithState:&v133 objects:&__p count:16];
                  id v13 = v20;
                  if (!v20)
                  {
                    double v21 = 90000000.0;
                    goto LABEL_42;
                  }
                  goto LABEL_10;
                }
              }
              id v26 = [v17 coordinateCount];
              int v11 = v109;
              double v21 = 90000000.0;
              if (!v26) {
                goto LABEL_44;
              }
              uint64_t v27 = 0;
              unint64_t v28 = 0;
              double v29 = 0.0;
              double v14 = 0.0;
              do
              {
                double v30 = *(double *)((char *)[v17 coordinates:v21] + v27);
                double v31 = *(double *)((char *)[v17 coordinates] + v27 + 8);
                id v32 = [v17 coordinateCount];
                double v21 = 1.0 / ((double)(int)v28 + 1.0);
                double v29 = v29 + v21 * (v30 - v29);
                double v14 = v14 + v21 * (v31 - v14);
                ++v28;
                v27 += 16;
              }
              while ((unint64_t)v32 > v28);
              double v21 = (v29 + 90.0) * 1000000.0;
LABEL_42:
              int v11 = v109;
            }
            else
            {
              double v21 = 90000000.0;
            }
LABEL_44:
            if (v14 < 0.0) {
              double v33 = 360.0;
            }
            else {
              double v33 = 0.0;
            }
            long long v114 = (uint64_t *)(vcvtad_u64_f64((v14 + v33) * 1000000.0) | (vcvtad_u64_f64(v21) << 32));
            uint64_t v115 = 1;
            sub_1002F9B84(&v120, (unint64_t *)&v114, (uint64_t *)&v114);
            long long v24 = v108;
            if (v34)
            {
              if (!(_BYTE)v115) {
                sub_10020D700();
              }
              long long v35 = (void *)*v9;
              if (!*v9) {
                goto LABEL_173;
              }
              long long v36 = v9;
              do
              {
                unint64_t v37 = v35[4];
                BOOL v38 = v37 >= (unint64_t)v114;
                if (v37 >= (unint64_t)v114) {
                  long long v39 = v35;
                }
                else {
                  long long v39 = v35 + 1;
                }
                if (v38) {
                  long long v36 = v35;
                }
                long long v35 = (void *)*v39;
              }
              while (*v39);
              if (v36 == v9 || (unint64_t)v114 < v36[4])
              {
LABEL_173:
                int v40 = *(_DWORD *)(v4 + 28);
                uint64_t v41 = *(int *)(v4 + 24);
                if ((int)v41 >= v40)
                {
                  if (v40 == *(_DWORD *)(v4 + 32))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v98, v40 + 1);
                    int v40 = *(_DWORD *)(v4 + 28);
                  }
                  *(_DWORD *)(v4 + 28) = v40 + 1;
                  sub_10146BEB8();
                }
                uint64_t v42 = *(void *)(v4 + 16);
                *(_DWORD *)(v4 + 24) = v41 + 1;
                uint64_t v43 = *(void *)(v42 + 8 * v41);
                long long v44 = v114;
                *(_DWORD *)(v43 + 52) |= 2u;
                *(void *)(v43 + 32) = v44;
                unsigned int v45 = [v11 tileSetStyle];
                if (v45 == 1)
                {
                  id v46 = [v11 buildingID];
                  *(_DWORD *)(v43 + 52) |= 4u;
                  *(void *)(v43 + 40) = v46;
                }
                long long v112 = 0u;
                long long v113 = 0u;
                long long v110 = 0u;
                long long v111 = 0u;
                id v47 = [v11 sections];
                id v48 = [v47 countByEnumeratingWithState:&v110 objects:v125 count:16];
                if (v48)
                {
                  uint64_t v104 = *(void *)v111;
                  id v99 = v47;
LABEL_69:
                  uint64_t v49 = 0;
                  id v103 = v48;
                  while (1)
                  {
                    if (*(void *)v111 != v104) {
                      objc_enumerationMutation(v47);
                    }
                    long long v50 = *(void **)(*((void *)&v110 + 1) + 8 * v49);
                    if (v50) {
                      break;
                    }
                    if (qword_1024194C0 != -1) {
                      dispatch_once(&qword_1024194C0, &stru_102327520);
                    }
                    long long v55 = qword_1024194C8;
                    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "clrgmd,Empty section found in the building data", buf, 2u);
                    }
                    int v11 = v109;
                    if (sub_10013D1A0(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024194C0 != -1) {
                        dispatch_once(&qword_1024194C0, &stru_102327520);
                      }
                      LOWORD(__p) = 0;
                      long long v56 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v56);
                      if (v56 != (char *)buf) {
                        free(v56);
                      }
                      int v11 = v109;
                    }
LABEL_103:
                    if ((id)++v49 == v103)
                    {
                      id v48 = [v47 countByEnumeratingWithState:&v110 objects:v125 count:16];
                      long long v24 = v108;
                      if (v48) {
                        goto LABEL_69;
                      }
                      goto LABEL_105;
                    }
                  }
                  int v51 = *(_DWORD *)(v43 + 20);
                  uint64_t v52 = *(int *)(v43 + 16);
                  if ((int)v52 >= v51)
                  {
                    if (v51 == *(_DWORD *)(v43 + 24))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v43 + 8), v51 + 1);
                      int v51 = *(_DWORD *)(v43 + 20);
                    }
                    *(_DWORD *)(v43 + 20) = v51 + 1;
                    sub_10146BF1C();
                  }
                  uint64_t v53 = *(void *)(v43 + 8);
                  *(_DWORD *)(v43 + 16) = v52 + 1;
                  uint64_t v54 = *(void *)(v53 + 8 * v52);
                  if (v54)
                  {
                    unsigned int v57 = [v11 tileSetStyle];
                    if (v57 == 1)
                    {
                      unsigned __int8 v60 = [v11 hasTerrainElevation];
                      *(_DWORD *)(v54 + 88) |= 8u;
                      *(unsigned char *)(v54 + 80) = v60;
                      [v50 minBaseHeight];
                      *(_DWORD *)(v54 + 88) |= 0x20u;
                      *(void *)(v54 + 56) = v61;
                      [v50 maxBaseHeight];
                      *(_DWORD *)(v54 + 88) |= 0x40u;
                      *(void *)(v54 + 64) = v62;
                      [v50 topHeight];
                      *(_DWORD *)(v54 + 88) |= 0x80u;
                      *(void *)(v54 + 72) = v63;
                      [v50 terrainElevation];
                      *(_DWORD *)(v54 + 88) |= 0x10u;
                      *(void *)(v54 + 48) = v64;
                    }
                    else if (!v57)
                    {
                      [v50 baseHeight];
                      *(_DWORD *)(v54 + 88) |= 2u;
                      *(void *)(v54 + 32) = v58;
                      [v50 height];
                      *(_DWORD *)(v54 + 88) |= 4u;
                      *(void *)(v54 + 40) = v59;
                    }
                    uint64_t v65 = 0;
                    for (unint64_t j = 0; ; ++j)
                    {
                      if ((unint64_t)[v50 coordinateCount] <= j)
                      {
                        uint64_t v4 = v100;
                        unsigned int v9 = v101;
                        id v47 = v99;
                        v102 |= [v50 coordinateCount] != 0;
                        goto LABEL_103;
                      }
                      int v67 = *(_DWORD *)(v54 + 20);
                      uint64_t v68 = *(int *)(v54 + 16);
                      if ((int)v68 >= v67)
                      {
                        if (v67 == *(_DWORD *)(v54 + 24))
                        {
                          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v54 + 8), v67 + 1);
                          int v67 = *(_DWORD *)(v54 + 20);
                        }
                        *(_DWORD *)(v54 + 20) = v67 + 1;
                        sub_10146BF80();
                      }
                      uint64_t v69 = *(void *)(v54 + 8);
                      *(_DWORD *)(v54 + 16) = v68 + 1;
                      uint64_t v70 = *(void *)(v69 + 8 * v68);
                      if (!v70) {
                        break;
                      }
                      uint64_t v71 = *(void *)((char *)[v50 coordinates] + v65);
                      *(_DWORD *)(v70 + 28) |= 1u;
                      *(void *)(v70 + 8) = v71;
                      uint64_t v72 = *(void *)((char *)[v50 coordinates] + v65 + 8);
                      *(_DWORD *)(v70 + 28) |= 2u;
                      *(void *)(v70 + 16) = v72;
                      v65 += 16;
                      int v11 = v109;
                    }
                    if (qword_1024194C0 != -1) {
                      dispatch_once(&qword_1024194C0, &stru_102327520);
                    }
                    long long v87 = qword_1024194C8;
                    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "clrgmd,Invalid building data section coordinate pointer", buf, 2u);
                    }
                    if (!sub_10013D1A0(115, 0)) {
                      goto LABEL_134;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1024194C0 != -1) {
                      goto LABEL_168;
                    }
                  }
                  else
                  {
                    if (qword_1024194C0 != -1) {
                      dispatch_once(&qword_1024194C0, &stru_102327520);
                    }
                    long long v89 = qword_1024194C8;
                    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "clrgmd,Invalid building data section pointer", buf, 2u);
                    }
                    if (!sub_10013D1A0(115, 0)) {
                      goto LABEL_134;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1024194C0 != -1) {
                      goto LABEL_168;
                    }
                  }
                  goto LABEL_160;
                }
              }
            }
          }
          else
          {
            double v22 = (char *)i;
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102327520);
            }
            long long v23 = qword_1024194C8;
            if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "clrgmd,Empty building found in the building data array", buf, 2u);
            }
            long long v24 = v22;
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194C0 != -1) {
                dispatch_once(&qword_1024194C0, &stru_102327520);
              }
              LOWORD(__p) = 0;
              long long v25 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v25);
              if (v25 != (char *)buf) {
                free(v25);
              }
              long long v24 = v22;
            }
          }
LABEL_105:
          ;
        }
        id v106 = [obj countByEnumeratingWithState:&v116 objects:v126 count:16];
        if (v106) {
          continue;
        }
        break;
      }
      if (((v122 != 0) & v102) != 0)
      {
        uint64_t v73 = (uint64_t)v97;
        if (sub_1000EF68C(*v96, v96[1]))
        {
          *(_DWORD *)(v4 + 68) |= 8u;
          uint64_t v74 = *(void *)(v4 + 56);
          if (!v74) {
            operator new();
          }
          *(_DWORD *)(v74 + 28) |= 1u;
          *(_DWORD *)(v4 + 68) |= 8u;
          *(_DWORD *)(v74 + 28) |= 2u;
          *(_OWORD *)(v74 + 8) = *(_OWORD *)v96;
          long long v131 = 0;
          long long __p = 0;
          uint64_t v132 = 0;
          sub_100288630(&__p, (unint64_t)((double)v122 * 0.25));
          *(void *)std::string buf = *v97;
          *(void *)&long long v133 = v9;
          long long v114 = v120;
          p_p = &__p;
          long long v124 = &v121;
          sub_10146C540((uint64_t)buf, (void **)&v133, (uint64_t)&v114, &v124, (uint64_t *)&p_p);
          long long v75 = (uint64_t *)__p;
          long long v76 = v131;
          if (__p != v131)
          {
            int v77 = *(_DWORD *)(v4 + 48);
            do
            {
              uint64_t v78 = *v75;
              if (v77 == *(_DWORD *)(v4 + 52))
              {
                sub_10026DE30(v4 + 40, v77 + 1);
                int v77 = *(_DWORD *)(v4 + 48);
              }
              uint64_t v79 = *(void *)(v4 + 40);
              *(_DWORD *)(v4 + 48) = v77 + 1;
              *(void *)(v79 + 8 * v77) = v78;
              ++v75;
              ++v77;
            }
            while (v75 != v76);
          }
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          long long v80 = qword_1024194C8;
          if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
          {
            int v81 = *(_DWORD *)(v4 + 24);
            int v82 = *(_DWORD *)(v4 + 48);
            *(_DWORD *)std::string buf = 67240448;
            *(_DWORD *)&uint8_t buf[4] = v81;
            __int16 v128 = 1026;
            int v129 = v82;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "clrgmd,Populated Protobuf msg, %{public}d new bldgs, %{public}d bldgs marked for removal", buf, 0xEu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102327520);
            }
            int v93 = *(_DWORD *)(v100 + 24);
            int v94 = *(_DWORD *)(v100 + 48);
            LODWORD(v133) = 67240448;
            DWORD1(v133) = v93;
            WORD4(v133) = 1026;
            *(_DWORD *)((char *)&v133 + 10) = v94;
            long long v95 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v95);
            if (v95 != (char *)buf) {
              free(v95);
            }
            uint64_t v73 = (uint64_t)v97;
            unsigned int v9 = v101;
          }
          sub_1000F5BB0(v73, *(void **)(v73 + 8));
          BOOL v83 = v121;
          *(void *)uint64_t v73 = v120;
          *(void *)(v73 + 8) = v83;
          unint64_t v84 = v122;
          *(void *)(v73 + 16) = v122;
          if (v84)
          {
            _OWORD v83[2] = v9;
            long long v120 = (uint64_t *)&v121;
            long long v121 = 0;
            unint64_t v122 = 0;
          }
          else
          {
            *(void *)uint64_t v73 = v9;
          }
          if (__p)
          {
            long long v131 = (uint64_t *)__p;
            operator delete(__p);
          }
          uint64_t v86 = 1;
          goto LABEL_135;
        }
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        double v90 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "clrgmd,Invalid user coordinates", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
LABEL_168:
          }
            dispatch_once(&qword_1024194C0, &stru_102327520);
LABEL_160:
          LOWORD(__p) = 0;
          unint64_t v92 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v92);
          if (v92 != (char *)buf) {
            free(v92);
          }
        }
      }
    }
LABEL_134:
    uint64_t v86 = 0;
LABEL_135:
    sub_1000F5BB0((uint64_t)&v120, v121);
    return v86;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  long long v85 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "clrgmd,Invalid building data message pointer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    LOWORD(__p) = 0;
    double v91 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLBuildingDataToProtobufAndUpdateBuildingHashIDsFromPreviousQuery(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::PrivateData::GEOMapBuildingData *)", "%s\n", v91);
    if (v91 != (char *)buf) {
      free(v91);
    }
  }
  return 0;
}

void sub_10145A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,void *a49)
{
}

uint64_t sub_10145A8C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    int v5 = sub_1001C0DB4((double *)a1, v4, 0);
    if ((v5 & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v6 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error: Failed to convert ConvertCLDeviceMotionSample mach time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLDeviceMotionSampleToProtobuf(const CLDeviceMotion::Sample &, CLP::LogEntry::PrivateData::DeviceMotionSample *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
    *(_DWORD *)(a2 + 56) |= 2u;
    uint64_t v7 = *(void *)(a2 + 16);
    if (!v7) {
      operator new();
    }
    int v8 = sub_10145AD80(a1 + 8, v7);
    int v9 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 96);
    char v10 = *(unsigned char *)(a1 + 100);
    *(_DWORD *)(a2 + 56) = v9 | 0x44;
    *(unsigned char *)(a2 + 24) = v10;
    int v11 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 56) = v9 | 0x4C;
    *(_DWORD *)(a2 + 28) = v11;
    unsigned int v12 = *(unsigned __int8 *)(a1 + 108);
    if (!sub_1001662E0(v12)) {
      sub_101A5F2B8();
    }
    int v13 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 40) = v12;
    *(_DWORD *)(a2 + 56) = v13 | 0x30;
    uint64_t v14 = *(void *)(a2 + 32);
    if (!v14) {
      operator new();
    }
    uint64_t result = v5 & v8 & sub_10145B108((unsigned __int16 *)(a1 + 110), v14);
    int v16 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)(a2 + 56) |= 0x80u;
    *(_DWORD *)(a2 + 48) = v16;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v17 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "ConvertCLDeviceMotionSample,Invalid output pointer,pSampleMsg,%{private}p", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLDeviceMotionSampleToProtobuf(const CLDeviceMotion::Sample &, CLP::LogEntry::PrivateData::DeviceMotionSample *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 0;
    }
  }
  return result;
}

void sub_10145AD24()
{
}

uint64_t sub_10145AD80(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    BOOL v5 = sub_10145B2D8((_OWORD *)a1, v4);
    *(_DWORD *)(a2 + 56) |= 2u;
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      operator new();
    }
    BOOL v7 = sub_10145B4B0(a1 + 32, v6);
    *(_DWORD *)(a2 + 56) |= 4u;
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      operator new();
    }
    BOOL v9 = sub_10145B4B0(a1 + 44, v8);
    *(_DWORD *)(a2 + 56) |= 8u;
    uint64_t v10 = *(void *)(a2 + 32);
    if (!v10) {
      operator new();
    }
    BOOL v11 = sub_10145B4B0(a1 + 56, v10);
    int v12 = *(_DWORD *)(a1 + 68);
    if (!sub_10016D86C(v12)) {
      sub_101A5F28C();
    }
    uint64_t result = (v5 && v7 && v9) & v11;
    int v14 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 40) = v12;
    *(unsigned char *)(a2 + 44) = *(unsigned char *)(a1 + 72);
    *(_WORD *)(a2 + 45) = *(_WORD *)(a1 + 73);
    int v15 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 56) = v14 | 0x1F0;
    *(_DWORD *)(a2 + 48) = v15;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v16 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "ConvertCLMotionTypeDeviceMotion,Invalid output pointer,pDeviceMotionMsg,%{private}p", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLMotionTypeDeviceMotion(const CLMotionTypeDeviceMotion &, CLP::LogEntry::PrivateData::MotionTypeDeviceMotion *)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
      return 0;
    }
  }
  return result;
}

void sub_10145B0B0()
{
}

BOOL sub_10145B108(unsigned __int16 *a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *a1;
    *(_DWORD *)(a2 + 16) |= 1u;
    *(_DWORD *)(a2 + 8) = v3;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v4 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ConvertCMSensorFusionStatus,Invalid output pointer,pStatusMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCMSensorFusionStatus(const CMSensorFusion::Status &, CLP::LogEntry::PrivateData::SensorFusionStatus *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a2 != 0;
}

BOOL sub_10145B2D8(_OWORD *a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a2 + 44);
    *(_OWORD *)(a2 + 8) = *a1;
    *(_DWORD *)(a2 + 44) = v3 | 0xF;
    *(_OWORD *)(a2 + 24) = a1[1];
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v4 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ConvertCLMotionTypeDoubleVector4,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLMotionTypeDoubleVector4(const CLMotionTypeDoubleVector4 &, CLP::LogEntry::PrivateData::MotionTypeDoubleVector4 *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a2 != 0;
}

BOOL sub_10145B4B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = *(void *)a1;
    int v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 24) = v3 | 7;
    *(_DWORD *)(a2 + 16) = v4;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ConvertCLMotionTypeVector3,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertCLMotionTypeVector3(const CLMotionTypeVector3 &, CLP::LogEntry::PrivateData::MotionTypeVector3 *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return a2 != 0;
}

BOOL sub_10145B688(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_1001701C8((int *)(a1 + 1332));
  if (!sub_100165F14(v4)) {
    sub_101A5F3C0();
  }
  int v5 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 24) = v4;
  uint64_t v6 = *(void *)(a1 + 1336);
  *(_DWORD *)(a2 + 36) = v5 | 6;
  *(void *)(a2 + 16) = v6;
  unsigned int v7 = sub_10016FFF4((int *)(a1 + 1328));
  BOOL result = sub_100165F14(v7);
  if (!result) {
    sub_101A5F394();
  }
  *(_DWORD *)(a2 + 36) |= 8u;
  *(_DWORD *)(a2 + 28) = v7;
  return result;
}

void sub_10145B70C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 132) |= 1u;
    uint64_t v3 = *(void *)(a2 + 8);
    if (!v3) {
      operator new();
    }
    int v4 = *(_DWORD *)(v3 + 36);
    *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(_DWORD *)(v3 + 36) = v4 | 7;
    *(void *)(v3 + 24) = v5;
    int v6 = *(_DWORD *)(a2 + 132);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 132) = v6 | 0x70;
    uint64_t v7 = *(void *)(a2 + 72);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a1 + 224);
    if (v8 && sub_10146BFE4(v8))
    {
      *(_DWORD *)(v7 + 52) |= 1u;
      uint64_t v9 = *(void *)(v7 + 8);
      if (!v9) {
        operator new();
      }
      uint64_t v10 = *(unsigned __int16 **)(a1 + 224);
      int v11 = *v10;
      *(_DWORD *)(v9 + 32) |= 1u;
      *(_DWORD *)(v9 + 24) = v11;
      if (sub_10145DF3C((uint64_t)v10))
      {
        *(_DWORD *)(v9 + 32) |= 2u;
        uint64_t v12 = *(void *)(v9 + 8);
        if (!v12) {
          operator new();
        }
        uint64_t v13 = *(void *)(a1 + 224);
        int v14 = *(__int16 *)(v13 + 8);
        int v15 = *(_DWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 28) = v15 | 1;
        *(_DWORD *)(v12 + 8) = v14;
        if (v14 != -32768)
        {
          uint64_t v16 = *(void *)(v13 + 16);
          if (v16)
          {
            if (*(unsigned char *)(v13 + 10) == 2)
            {
              int v17 = *(unsigned __int16 *)(v13 + 24);
              if (v17 != 0x8000)
              {
                *(_DWORD *)(v12 + 28) = v15 | 5;
                uint64_t v18 = *(void *)(v12 + 16);
                if (!v18) {
                  operator new();
                }
                int v19 = *(_DWORD *)(v18 + 24);
                *(void *)(v18 + 8) = v16;
                *(_DWORD *)(v18 + 24) = v19 | 3;
                *(_DWORD *)(v18 + 16) = (__int16)v17;
              }
            }
          }
        }
        int v20 = *(unsigned __int8 *)(v13 + 10);
        if (*(unsigned char *)(v13 + 10))
        {
          if (v20 == 1)
          {
            int v21 = 3;
            if (!sub_1001662E0(3u)) {
              sub_101A905E8();
            }
          }
          else if (v20 == 2)
          {
            int v21 = 4;
            if (!sub_1001662E0(4u)) {
              sub_101A905E8();
            }
          }
          else
          {
            int v21 = 1;
            if (!sub_1001662E0(1u)) {
              sub_101A905E8();
            }
          }
        }
        else
        {
          int v21 = 2;
          if (!sub_1001662E0(2u)) {
            sub_101A905E8();
          }
        }
        *(_DWORD *)(v12 + 28) |= 2u;
        *(_DWORD *)(v12 + 12) = v21;
      }
      if (sub_10145DF9C(*(void **)(a1 + 224)))
      {
        *(_DWORD *)(v9 + 32) |= 4u;
        uint64_t v24 = *(void *)(v9 + 16);
        if (!v24) {
          operator new();
        }
        uint64_t v25 = *(void *)(a1 + 224);
        int v26 = *(_DWORD *)(v24 + 44);
        *(void *)(v24 + 8) = *(void *)(v25 + 32);
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 40);
        uint64_t v27 = *(void *)(v25 + 56);
        *(_DWORD *)(v24 + 44) = v26 | 0xF;
        *(void *)(v24 + 32) = v27;
      }
    }
    unint64_t v28 = *(unsigned __int16 **)(a1 + 232);
    if (v28)
    {
      if ((int v29 = *v28) != 0 && v28[1] - 1 < 0x5B5
        || *((void *)v28 + 1) && (*((void *)v28 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v7 + 52) |= 2u;
        uint64_t v30 = *(void *)(v7 + 16);
        if (!v30) {
          operator new();
        }
        int v31 = *(_DWORD *)(v30 + 40);
        *(_DWORD *)(v30 + 8) = v29;
        int v32 = v28[1];
        *(_DWORD *)(v30 + 40) = v31 | 3;
        *(_DWORD *)(v30 + 12) = v32;
        if (sub_10145E00C((uint64_t)v28))
        {
          *(_DWORD *)(v30 + 40) |= 8u;
          uint64_t v33 = *(void *)(v30 + 16);
          if (!v33) {
            operator new();
          }
          uint64_t v34 = *(void *)(a1 + 232);
          int v35 = *(_DWORD *)(v33 + 28);
          *(void *)(v33 + 16) = *(void *)(v34 + 16);
          uint64_t v36 = *(void *)(v34 + 8);
          *(_DWORD *)(v33 + 28) = v35 | 3;
          *(void *)(v33 + 8) = v36;
        }
      }
    }
    unint64_t v37 = *(unsigned __int16 **)(a1 + 240);
    if (v37)
    {
      int v38 = *v37;
      if (*v37
        || *((void *)v37 + 1)
        && (*((void *)v37 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*((void *)v37 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v7 + 52) |= 4u;
        uint64_t v39 = *(void *)(v7 + 24);
        if (!v39) {
          operator new();
        }
        *(_DWORD *)(v39 + 56) |= 1u;
        *(_DWORD *)(v39 + 48) = v38;
        if (sub_10145E06C((uint64_t)v37))
        {
          *(_DWORD *)(v39 + 56) |= 4u;
          uint64_t v40 = *(void *)(v39 + 16);
          if (!v40) {
            operator new();
          }
          uint64_t v41 = *(void *)(a1 + 240);
          int v42 = *(_DWORD *)(v40 + 36);
          *(void *)(v40 + 8) = *(void *)(v41 + 8);
          *(_DWORD *)(v40 + 36) = v42 | 7;
          *(_OWORD *)(v40 + 16) = *(_OWORD *)(v41 + 16);
        }
      }
    }
    uint64_t v43 = *(unsigned __int16 **)(a1 + 248);
    if (v43)
    {
      int v44 = *v43;
      if (*v43
        || *((void *)v43 + 1)
        && (*((void *)v43 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*((void *)v43 + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_DWORD *)(v7 + 52) |= 8u;
        uint64_t v45 = *(void *)(v7 + 32);
        if (!v45) {
          operator new();
        }
        *(_DWORD *)(v45 + 40) |= 1u;
        *(_DWORD *)(v45 + 32) = v44;
        if (sub_10145E06C((uint64_t)v43))
        {
          *(_DWORD *)(v45 + 40) |= 4u;
          uint64_t v46 = *(void *)(v45 + 16);
          if (!v46) {
            operator new();
          }
          uint64_t v47 = *(void *)(a1 + 248);
          int v48 = *(_DWORD *)(v46 + 36);
          *(void *)(v46 + 8) = *(void *)(v47 + 8);
          *(_DWORD *)(v46 + 36) = v48 | 7;
          *(_OWORD *)(v46 + 16) = *(_OWORD *)(v47 + 16);
        }
      }
    }
    uint64_t v49 = *(void *)(a1 + 256);
    if (v49 && sub_10145E06C(v49))
    {
      *(_DWORD *)(v7 + 52) |= 0x10u;
      uint64_t v50 = *(void *)(v7 + 40);
      if (!v50) {
        operator new();
      }
      int v51 = *(unsigned __int16 **)(a1 + 256);
      int v52 = *v51;
      *(_DWORD *)(v50 + 24) |= 2u;
      *(_DWORD *)(v50 + 16) = v52;
      if (sub_10145E06C((uint64_t)v51))
      {
        *(_DWORD *)(v50 + 24) |= 1u;
        uint64_t v53 = *(void *)(v50 + 8);
        if (!v53) {
          operator new();
        }
        uint64_t v54 = *(void *)(a1 + 256);
        int v55 = *(_DWORD *)(v53 + 36);
        *(void *)(v53 + 8) = *(void *)(v54 + 8);
        *(_DWORD *)(v53 + 36) = v55 | 7;
        *(_OWORD *)(v53 + 16) = *(_OWORD *)(v54 + 16);
      }
    }
    uint64_t v56 = *(void *)(a1 + 176);
    for (uint64_t i = *(void *)(a1 + 184); v56 != i; v56 += 144)
    {
      int v57 = *(_DWORD *)(a2 + 36);
      uint64_t v58 = *(int *)(a2 + 32);
      if ((int)v58 >= v57)
      {
        if (v57 == *(_DWORD *)(a2 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 24), v57 + 1);
          int v57 = *(_DWORD *)(a2 + 36);
        }
        *(_DWORD *)(a2 + 36) = v57 + 1;
        sub_10146C080();
      }
      uint64_t v59 = *(void *)(a2 + 24);
      *(_DWORD *)(a2 + 32) = v58 + 1;
      uint64_t v60 = *(void *)(v59 + 8 * v58);
      *(_DWORD *)(v60 + 172) |= 1u;
      uint64_t v61 = *(void *)(v60 + 8);
      if (!v61) {
        operator new();
      }
      sub_10145E0DC(v56, v61);
      if (!sub_1003DE2E4(1u)) {
        sub_101A90590();
      }
      int v62 = *(_DWORD *)(v60 + 172) | 4;
      *(_DWORD *)(v60 + 172) = v62;
      *(_DWORD *)(v60 + 56) = 1;
      switch(*(unsigned char *)(v56 + 16))
      {
        case 1:
          if (!sub_1003DE2E4(2u)) {
            sub_101A90590();
          }
          int v63 = 2;
          goto LABEL_103;
        case 2:
          if (!sub_1003DE2E4(3u)) {
            sub_101A90590();
          }
          int v63 = 3;
          goto LABEL_103;
        case 3:
          if (!sub_1003DE2E4(6u)) {
            sub_101A90590();
          }
          int v63 = 6;
          goto LABEL_103;
        case 4:
          if (!sub_1003DE2E4(5u)) {
            sub_101A90590();
          }
          int v63 = 5;
LABEL_103:
          int v62 = *(_DWORD *)(v60 + 172) | 4;
          *(_DWORD *)(v60 + 172) = v62;
          *(_DWORD *)(v60 + 56) = v63;
          break;
        default:
          break;
      }
      uint64_t v64 = *(void *)(v56 + 24);
      uint64_t v65 = *(void *)(v56 + 32);
      if (v64 != v65)
      {
        do
        {
          int v66 = *(_DWORD *)(v60 + 36);
          uint64_t v67 = *(int *)(v60 + 32);
          if ((int)v67 >= v66)
          {
            if (v66 == *(_DWORD *)(v60 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v60 + 24), v66 + 1);
              int v66 = *(_DWORD *)(v60 + 36);
            }
            *(_DWORD *)(v60 + 36) = v66 + 1;
            sub_10146C128();
          }
          uint64_t v68 = *(void *)(v60 + 24);
          *(_DWORD *)(v60 + 32) = v67 + 1;
          uint64_t v69 = *(void *)(v68 + 8 * v67);
          int v70 = *(_DWORD *)(v69 + 28);
          *(void *)(v69 + 8) = *(void *)v64;
          *(_DWORD *)(v69 + 28) = v70 | 3;
          uint64_t v71 = *(void *)(v69 + 16);
          if (!v71) {
            operator new();
          }
          int v72 = *(_DWORD *)(v71 + 36);
          *(_OWORD *)(v71 + 8) = *(_OWORD *)(v64 + 8);
          uint64_t v73 = *(void *)(v64 + 24);
          *(_DWORD *)(v71 + 36) = v72 | 7;
          *(void *)(v71 + 24) = v73;
          v64 += 32;
        }
        while (v64 != v65);
        int v62 = *(_DWORD *)(v60 + 172);
      }
      uint64_t v74 = *(_OWORD **)(v56 + 48);
      if (v74)
      {
        *(_DWORD *)(v60 + 172) = v62 | 0x8000;
        uint64_t v75 = *(void *)(v60 + 128);
        if (!v75) {
          operator new();
        }
        uint64_t v76 = 0;
        *(_DWORD *)(v75 + 76) |= 3u;
        *(_OWORD *)(v75 + 8) = *v74;
        do
        {
          uint64_t v77 = *(void *)(v56 + 48);
          uint64_t v78 = *(void *)(v77 + v76 + 16);
          int v79 = *(_DWORD *)(v75 + 32);
          if (v79 == *(_DWORD *)(v75 + 36))
          {
            sub_10026DE30(v75 + 24, v79 + 1);
            int v79 = *(_DWORD *)(v75 + 32);
            uint64_t v77 = *(void *)(v56 + 48);
          }
          uint64_t v80 = *(void *)(v75 + 24);
          *(_DWORD *)(v75 + 32) = v79 + 1;
          *(void *)(v80 + 8 * v79) = v78;
          uint64_t v81 = *(void *)(v77 + v76 + 48);
          int v82 = *(_DWORD *)(v75 + 48);
          if (v82 == *(_DWORD *)(v75 + 52))
          {
            sub_10026DE30(v75 + 40, v82 + 1);
            int v82 = *(_DWORD *)(v75 + 48);
            uint64_t v77 = *(void *)(v56 + 48);
          }
          uint64_t v83 = *(void *)(v75 + 40);
          *(_DWORD *)(v75 + 48) = v82 + 1;
          *(void *)(v83 + 8 * v82) = v81;
          uint64_t v84 = *(void *)(v77 + v76 + 80);
          int v85 = *(_DWORD *)(v75 + 64);
          if (v85 == *(_DWORD *)(v75 + 68))
          {
            sub_10026DE30(v75 + 56, v85 + 1);
            int v85 = *(_DWORD *)(v75 + 64);
          }
          uint64_t v86 = *(void *)(v75 + 56);
          *(_DWORD *)(v75 + 64) = v85 + 1;
          *(void *)(v86 + 8 * v85) = v84;
          v76 += 8;
        }
        while (v76 != 32);
        int v62 = *(_DWORD *)(v60 + 172);
      }
      *(void *)(v60 + 16) = *(void *)(v56 + 8);
      *(void *)(v60 + 48) = *(void *)(v56 + 56);
      *(_OWORD *)(v60 + 64) = *(_OWORD *)(v56 + 64);
      *(void *)(v60 + 152) = *(void *)(v56 + 80);
      *(_DWORD *)(v60 + 60) = *(_DWORD *)(v56 + 88);
      int v87 = *(_DWORD *)(v56 + 92);
      *(_DWORD *)(v60 + 172) = v62 | 0x2001F2;
      *(_DWORD *)(v60 + 80) = v87;
      unsigned int v88 = sub_10145E420((unsigned __int8 *)(v56 + 96));
      if (!sub_1001662E0(v88)) {
        sub_101A90564();
      }
      *(_DWORD *)(v60 + 172) |= 0x200u;
      *(_DWORD *)(v60 + 84) = v88;
      unsigned int v89 = sub_10145E420((unsigned __int8 *)(v56 + 97));
      if (!sub_1001662E0(v89)) {
        sub_101A90488();
      }
      *(_DWORD *)(v60 + 172) |= 0x10000u;
      *(_DWORD *)(v60 + 136) = v89;
      unsigned int v90 = sub_10145E420((unsigned __int8 *)(v56 + 98));
      if (!sub_1001662E0(v90)) {
        sub_101A90538();
      }
      *(_DWORD *)(v60 + 172) |= 0x400u;
      *(_DWORD *)(v60 + 88) = v90;
      unsigned int v91 = sub_10145E420((unsigned __int8 *)(v56 + 99));
      if (!sub_1001662E0(v91)) {
        sub_101A9045C();
      }
      *(_DWORD *)(v60 + 172) |= 0x20000u;
      *(_DWORD *)(v60 + 140) = v91;
      unsigned int v92 = sub_10145E420((unsigned __int8 *)(v56 + 100));
      if (!sub_1001662E0(v92)) {
        sub_101A9050C();
      }
      *(_DWORD *)(v60 + 172) |= 0x800u;
      *(_DWORD *)(v60 + 92) = v92;
      unsigned int v93 = sub_10145E420((unsigned __int8 *)(v56 + 101));
      if (!sub_1001662E0(v93)) {
        sub_101A90430();
      }
      *(_DWORD *)(v60 + 172) |= 0x40000u;
      *(_DWORD *)(v60 + 144) = v93;
      unsigned int v94 = sub_10145E420((unsigned __int8 *)(v56 + 102));
      if (!sub_1001662E0(v94)) {
        sub_101A904E0();
      }
      *(_DWORD *)(v60 + 172) |= 0x1000u;
      *(_DWORD *)(v60 + 96) = v94;
      unsigned int v95 = sub_10145E420((unsigned __int8 *)(v56 + 103));
      if (!sub_1001662E0(v95)) {
        sub_101A90404();
      }
      *(_DWORD *)(v60 + 172) |= 0x80000u;
      *(_DWORD *)(v60 + 148) = v95;
      unsigned int v96 = sub_10145E420((unsigned __int8 *)(v56 + 104));
      if (!sub_1001662E0(v96)) {
        sub_101A904B4();
      }
      *(_DWORD *)(v60 + 172) |= 0x2000u;
      *(_DWORD *)(v60 + 100) = v96;
      unsigned int v97 = sub_10145E420((unsigned __int8 *)(v56 + 105));
      if (!sub_1001662E0(v97)) {
        sub_101A903D8();
      }
      *(_DWORD *)(v60 + 172) |= 0x100000u;
      *(_DWORD *)(v60 + 160) = v97;
      unsigned int v98 = sub_10145E5EC((unsigned __int8 *)(v56 + 136));
      if (!sub_100165F14(v98)) {
        sub_101A903AC();
      }
      *(_DWORD *)(v60 + 172) |= 0x400000u;
      *(_DWORD *)(v60 + 164) = v98;
      uint64_t v100 = *(void *)(v56 + 112);
      for (uint64_t j = *(void *)(v56 + 120); v100 != j; v100 += 32)
      {
        int v101 = *(_DWORD *)(v60 + 116);
        uint64_t v102 = *(int *)(v60 + 112);
        if ((int)v102 >= v101)
        {
          if (v101 == *(_DWORD *)(v60 + 120))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v60 + 104), v101 + 1);
            int v101 = *(_DWORD *)(v60 + 116);
          }
          *(_DWORD *)(v60 + 116) = v101 + 1;
          sub_10146C18C();
        }
        uint64_t v103 = *(void *)(v60 + 104);
        *(_DWORD *)(v60 + 112) = v102 + 1;
        uint64_t v104 = *(void *)(v103 + 8 * v102);
        unsigned int v105 = *(_DWORD *)(v100 + 4);
        if (v105 >= 3)
        {
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          id v106 = qword_1024194C8;
          if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
          {
            int v107 = *(_DWORD *)(v100 + 4);
            *(_DWORD *)std::string buf = 67240192;
            int v287 = v107;
            _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "TranslateIonosphericModel,Invalid correction model,source,%{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102327520);
            }
            long long v111 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::IonosphericCorrectionSource TranslateIonosphericModel(const gnss::IonosphericCorrectionSource &)", "%s\n", v111);
            if (v111 != (char *)buf) {
              free(v111);
            }
          }
          unsigned int v105 = 0;
        }
        if (!sub_10016E644(v105)) {
          sub_101A90354();
        }
        int v108 = *(_DWORD *)(v104 + 44);
        *(_DWORD *)(v104 + 28) = v105;
        *(_OWORD *)(v104 + 8) = *(_OWORD *)(v100 + 8);
        uint64_t v109 = *(void *)(v100 + 24);
        *(_DWORD *)(v104 + 44) = v108 | 0x1E;
        *(void *)(v104 + 32) = v109;
        unsigned int v110 = sub_10145E7B8((unsigned __int8 *)v100);
        if (!sub_100E1A658(v110)) {
          sub_101A90380();
        }
        *(_DWORD *)(v104 + 44) |= 1u;
        *(_DWORD *)(v104 + 24) = v110;
      }
    }
    long long v113 = *(void **)(a1 + 200);
    for (uint64_t k = *(void **)(a1 + 208); v113 != k; v113 = v118 + 8)
    {
      int v114 = *(_DWORD *)(a2 + 60);
      uint64_t v115 = *(int *)(a2 + 56);
      if ((int)v115 >= v114)
      {
        if (v114 == *(_DWORD *)(a2 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 48), v114 + 1);
          int v114 = *(_DWORD *)(a2 + 60);
        }
        *(_DWORD *)(a2 + 60) = v114 + 1;
        sub_10146C1F0();
      }
      uint64_t v116 = *(void *)(a2 + 48);
      *(_DWORD *)(a2 + 56) = v115 + 1;
      uint64_t v117 = *(void *)(v116 + 8 * v115);
      LODWORD(v116) = *(_DWORD *)(v117 + 32);
      *(void *)(v117 + 8) = *v113;
      *(_DWORD *)(v117 + 32) = v116 | 0xE;
      *(void *)(v117 + 20) = v113[1];
      long long v118 = (unsigned __int8 *)(v113 + 2);
      unsigned int v119 = sub_10145E7B8(v118);
      if (!sub_100E1A658(v119)) {
        sub_101A905BC();
      }
      *(_DWORD *)(v117 + 32) |= 1u;
      *(_DWORD *)(v117 + 16) = v119;
    }
    uint64_t v120 = a1;
    uint64_t v121 = *(void *)(a1 + 264);
    if (v121)
    {
      *(_DWORD *)(a2 + 132) |= 0x80u;
      uint64_t v122 = *(void *)(a2 + 96);
      if (!v122) {
        operator new();
      }
      int v123 = *(_DWORD *)(v122 + 52);
      *(void *)(v122 + 8) = *(void *)v121;
      *(_OWORD *)(v122 + 16) = *(_OWORD *)(v121 + 8);
      *(_DWORD *)(v122 + 52) = v123 | 0x1FF;
      *(_OWORD *)(v122 + 32) = *(_OWORD *)(v121 + 24);
      uint64_t v120 = a1;
    }
    uint64_t v125 = *(void *)(v120 + 272);
    for (m = *(void *)(v120 + 280); v125 != m; uint64_t v125 = (uint64_t)(v133 + 31))
    {
      int v126 = *(_DWORD *)(a2 + 116);
      uint64_t v127 = *(int *)(a2 + 112);
      if ((int)v127 >= v126)
      {
        if (v126 == *(_DWORD *)(a2 + 120))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 104), v126 + 1);
          int v126 = *(_DWORD *)(a2 + 116);
        }
        *(_DWORD *)(a2 + 116) = v126 + 1;
        sub_10146C254();
      }
      uint64_t v128 = *(void *)(a2 + 104);
      *(_DWORD *)(a2 + 112) = v127 + 1;
      uint64_t v129 = *(void *)(v128 + 8 * v127);
      *(_DWORD *)(v129 + 36) |= 1u;
      uint64_t v130 = *(void *)(v129 + 8);
      if (!v130) {
        operator new();
      }
      sub_10145E0DC(v125, v130);
      long long v131 = (unsigned __int8 *)(v125 + 8);
      unsigned int v132 = sub_10145E7B8(v131);
      if (!sub_100E1A658(v132)) {
        sub_101A9066C();
      }
      *(_DWORD *)(v129 + 36) |= 2u;
      *(_DWORD *)(v129 + 16) = v132;
      long long v133 = v131 + 1;
      unsigned int v134 = sub_10145E5EC(v133);
      if (!sub_100165F14(v134)) {
        sub_101A90640();
      }
      int v135 = *(_DWORD *)(v129 + 36);
      *(_DWORD *)(v129 + 20) = v134;
      *(_DWORD *)(v129 + 36) = v135 | 0xC;
      uint64_t v136 = *(void *)(v129 + 24);
      if (!v136) {
        operator new();
      }
      int v137 = *(_DWORD *)(v136 + 36);
      *(_OWORD *)(v136 + 8) = *(_OWORD *)(v133 + 7);
      uint64_t v138 = *(void *)(v133 + 23);
      *(_DWORD *)(v136 + 36) = v137 | 7;
      *(void *)(v136 + 24) = v138;
    }
    *(_DWORD *)(a2 + 132) |= 2u;
    uint64_t v139 = *(void *)(a2 + 16);
    if (!v139) {
      operator new();
    }
    *(_DWORD *)(v139 + 44) |= 1u;
    uint64_t v140 = *(void *)(v139 + 8);
    if (!v140) {
      operator new();
    }
    int v141 = *(_DWORD *)(v140 + 44);
    *(void *)(v140 + 8) = *(void *)(a1 + 40);
    *(_DWORD *)(v140 + 44) = v141 | 5;
    uint64_t v142 = *(void *)(v140 + 24);
    if (!v142) {
      operator new();
    }
    int v143 = *(_DWORD *)(v142 + 52);
    *(_OWORD *)(v142 + 8) = *(_OWORD *)(a1 + 88);
    *(float64x2_t *)(v142 + 24) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 104));
    double v144 = *(float *)(a1 + 112);
    *(_DWORD *)(v142 + 52) = v143 | 0x1F;
    *(double *)(v142 + 40) = v144;
    if (*(void *)(a1 + 40) != -1)
    {
      double v145 = *(double *)(a1 + 48);
      if ((*(void *)&v145 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v146 = *(double *)(a1 + 56);
        if ((*(void *)&v146 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v147 = *(double *)(a1 + 64);
          if ((*(void *)&v147 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            double v148 = *(double *)(a1 + 72);
            if ((*(void *)&v148 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              *(_DWORD *)(v140 + 44) |= 2u;
              uint64_t v149 = *(void *)(v140 + 16);
              if (!v149) {
                operator new();
              }
              float v150 = v145;
              int v151 = *(_DWORD *)(v149 + 32);
              float v152 = v146;
              *(float *)(v149 + 8) = v150;
              *(float *)(v149 + 12) = v152;
              float v153 = v147;
              float v154 = v148;
              *(_DWORD *)(v149 + 32) = v151 | 0xF;
              *(float *)(v149 + 16) = v153;
              *(float *)(v149 + 20) = v154;
              if (*(unsigned char *)(a1 + 81))
              {
                char v155 = *(unsigned char *)(a1 + 80);
                *(_DWORD *)(v149 + 32) = v151 | 0x1F;
                *(unsigned char *)(v149 + 24) = v155;
              }
            }
          }
        }
      }
    }
    if (sub_10145E98C(a1 + 40))
    {
      *(_DWORD *)(v140 + 44) |= 8u;
      uint64_t v156 = *(void *)(v140 + 32);
      if (!v156) {
        operator new();
      }
      int v157 = *(_DWORD *)(v156 + 40);
      *(void *)(v156 + 24) = *(void *)(a1 + 136);
      *(_DWORD *)(v156 + 32) = *(_DWORD *)(a1 + 144);
      *(void *)(v156 + 8) = *(void *)(a1 + 120);
      *(_DWORD *)(v156 + 40) = v157 | 0x1F;
      *(void *)(v156 + 16) = *(void *)(a1 + 128);
    }
    uint64_t v158 = *(void *)(a1 + 152);
    for (uint64_t n = *(void *)(a1 + 160); v158 != n; v158 += 176)
    {
      int v160 = *(_DWORD *)(v139 + 28);
      uint64_t v161 = *(int *)(v139 + 24);
      if ((int)v161 >= v160)
      {
        if (v160 == *(_DWORD *)(v139 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v139 + 16), v160 + 1);
          int v160 = *(_DWORD *)(v139 + 28);
        }
        *(_DWORD *)(v139 + 28) = v160 + 1;
        sub_10146C2B8();
      }
      uint64_t v162 = *(void *)(v139 + 16);
      *(_DWORD *)(v139 + 24) = v161 + 1;
      uint64_t v163 = *(void *)(v162 + 8 * v161);
      *(_DWORD *)(v163 + 112) |= 1u;
      uint64_t v164 = *(void *)(v163 + 8);
      if (!v164) {
        operator new();
      }
      sub_10145E0DC(v158, v164);
      *(_DWORD *)(v163 + 112) |= 2u;
      uint64_t v165 = *(void *)(v163 + 16);
      if (!v165) {
        operator new();
      }
      switch(*(unsigned char *)(v158 + 8))
      {
        case 0:
          if (!sub_100E1A658(1u)) {
            sub_101A90278();
          }
          *(_DWORD *)(v165 + 96) |= 1u;
          *(_DWORD *)(v165 + 88) = 1;
          break;
        case 1:
          if (!sub_100E1A658(2u)) {
            sub_101A90278();
          }
          int v201 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 2;
          *(_DWORD *)(v165 + 96) = v201 | 3;
          uint64_t v202 = *(void *)(v165 + 8);
          if (!v202) {
            operator new();
          }
          goto LABEL_255;
        case 2:
          if (!sub_100E1A658(3u)) {
            sub_101A90278();
          }
          int v187 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 3;
          *(_DWORD *)(v165 + 96) = v187 | 5;
          uint64_t v188 = *(void *)(v165 + 16);
          if (!v188) {
            operator new();
          }
          char v189 = *(unsigned char *)(v158 + 13);
          int v190 = *(_DWORD *)(v188 + 20);
          *(_DWORD *)(v188 + 20) = v190 | 0x10;
          *(unsigned char *)(v188 + 12) = v189;
          char v191 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v188 + 20) = v190 | 0x14;
          *(unsigned char *)(v188 + 10) = v191;
          char v192 = *(unsigned char *)(v158 + 12);
          *(_DWORD *)(v188 + 20) = v190 | 0x1C;
          *(unsigned char *)(v188 + 11) = v192;
          char v193 = *(unsigned char *)(v158 + 10);
          *(_DWORD *)(v188 + 20) = v190 | 0x1E;
          *(unsigned char *)(v188 + 9) = v193;
          char v194 = *(unsigned char *)(v158 + 9);
          *(_DWORD *)(v188 + 20) = v190 | 0x1F;
          goto LABEL_232;
        case 3:
          if (!sub_100E1A658(4u)) {
            sub_101A90278();
          }
          int v195 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 4;
          *(_DWORD *)(v165 + 96) = v195 | 9;
          uint64_t v188 = *(void *)(v165 + 24);
          if (!v188) {
            operator new();
          }
          char v196 = *(unsigned char *)(v158 + 11);
          int v197 = *(_DWORD *)(v188 + 16);
          *(_DWORD *)(v188 + 16) = v197 | 4;
          *(unsigned char *)(v188 + 10) = v196;
          char v198 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v188 + 16) = v197 | 6;
          *(unsigned char *)(v188 + 9) = v198;
          char v199 = *(unsigned char *)(v158 + 12);
          *(_DWORD *)(v188 + 16) = v197 | 0xE;
          *(unsigned char *)(v188 + 11) = v199;
          char v194 = *(unsigned char *)(v158 + 9);
          *(_DWORD *)(v188 + 16) = v197 | 0xF;
LABEL_232:
          *(unsigned char *)(v188 + 8) = v194;
          break;
        case 4:
          if (!sub_100E1A658(5u)) {
            sub_101A90278();
          }
          int v166 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 5;
          *(_DWORD *)(v165 + 96) = v166 | 0x11;
          uint64_t v167 = *(void *)(v165 + 32);
          if (!v167) {
            operator new();
          }
          char v168 = *(unsigned char *)(v158 + 9);
          int v169 = *(_DWORD *)(v167 + 20);
          *(_DWORD *)(v167 + 20) = v169 | 1;
          *(unsigned char *)(v167 + 8) = v168;
          char v170 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v167 + 20) = v169 | 5;
          *(unsigned char *)(v167 + 10) = v170;
          char v171 = *(unsigned char *)(v158 + 12);
          *(_DWORD *)(v167 + 20) = v169 | 0xD;
          *(unsigned char *)(v167 + 11) = v171;
          char v172 = *(unsigned char *)(v158 + 10);
          *(_DWORD *)(v167 + 20) = v169 | 0xF;
          *(unsigned char *)(v167 + 9) = v172;
          char v173 = *(unsigned char *)(v158 + 13);
          *(_DWORD *)(v167 + 20) = v169 | 0x1F;
          *(unsigned char *)(v167 + 12) = v173;
          break;
        case 5:
          if (!sub_100E1A658(6u)) {
            sub_101A90278();
          }
          int v203 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 6;
          *(_DWORD *)(v165 + 96) = v203 | 0x21;
          uint64_t v175 = *(void *)(v165 + 40);
          if (!v175) {
            operator new();
          }
          goto LABEL_246;
        case 6:
          if (!sub_100E1A658(0xBu)) {
            sub_101A90278();
          }
          int v204 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 11;
          *(_DWORD *)(v165 + 96) = v204 | 0x21;
          uint64_t v175 = *(void *)(v165 + 40);
          if (!v175) {
            operator new();
          }
          goto LABEL_246;
        case 7:
          if (!sub_100E1A658(7u)) {
            sub_101A90278();
          }
          int v200 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 7;
          *(_DWORD *)(v165 + 96) = v200 | 0x41;
          uint64_t v175 = *(void *)(v165 + 48);
          if (!v175) {
            operator new();
          }
LABEL_246:
          char v205 = *(unsigned char *)(v158 + 10);
          int v206 = *(_DWORD *)(v175 + 16);
          *(_DWORD *)(v175 + 16) = v206 | 2;
          *(unsigned char *)(v175 + 9) = v205;
          char v207 = *(unsigned char *)(v158 + 9);
          *(_DWORD *)(v175 + 16) = v206 | 3;
          *(unsigned char *)(v175 + 8) = v207;
          char v208 = *(unsigned char *)(v158 + 12);
          *(_DWORD *)(v175 + 16) = v206 | 0xB;
          *(unsigned char *)(v175 + 11) = v208;
          char v186 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v175 + 16) = v206 | 0xF;
          goto LABEL_247;
        case 8:
          if (!sub_100E1A658(8u)) {
            sub_101A90278();
          }
          int v209 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 8;
          *(_DWORD *)(v165 + 96) = v209 | 0x81;
          uint64_t v210 = *(void *)(v165 + 56);
          if (!v210) {
            operator new();
          }
          char v211 = *(unsigned char *)(v158 + 12);
          int v212 = *(_DWORD *)(v210 + 16);
          *(_DWORD *)(v210 + 16) = v212 | 8;
          *(unsigned char *)(v210 + 11) = v211;
          char v213 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v210 + 16) = v212 | 0xC;
          *(unsigned char *)(v210 + 10) = v213;
          char v214 = *(unsigned char *)(v158 + 9);
          *(_DWORD *)(v210 + 16) = v212 | 0xD;
          *(unsigned char *)(v210 + 8) = v214;
          char v215 = *(unsigned char *)(v158 + 10);
          *(_DWORD *)(v210 + 16) = v212 | 0xF;
          *(unsigned char *)(v210 + 9) = v215;
          break;
        case 9:
          if (!sub_100E1A658(9u)) {
            sub_101A90278();
          }
          int v174 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 9;
          *(_DWORD *)(v165 + 96) = v174 | 0x101;
          uint64_t v175 = *(void *)(v165 + 64);
          if (!v175) {
            operator new();
          }
          char v176 = *(unsigned char *)(v158 + 18);
          int v177 = *(_DWORD *)(v175 + 24);
          *(_DWORD *)(v175 + 24) = v177 | 0x200;
          *(unsigned char *)(v175 + 17) = v176;
          char v178 = *(unsigned char *)(v158 + 13);
          *(_DWORD *)(v175 + 24) = v177 | 0x210;
          *(unsigned char *)(v175 + 12) = v178;
          char v179 = *(unsigned char *)(v158 + 12);
          *(_DWORD *)(v175 + 24) = v177 | 0x218;
          *(unsigned char *)(v175 + 11) = v179;
          char v180 = *(unsigned char *)(v158 + 17);
          *(_DWORD *)(v175 + 24) = v177 | 0x318;
          *(unsigned char *)(v175 + 16) = v180;
          char v181 = *(unsigned char *)(v158 + 16);
          *(_DWORD *)(v175 + 24) = v177 | 0x398;
          *(unsigned char *)(v175 + 15) = v181;
          char v182 = *(unsigned char *)(v158 + 15);
          *(_DWORD *)(v175 + 24) = v177 | 0x3D8;
          *(unsigned char *)(v175 + 14) = v182;
          char v183 = *(unsigned char *)(v158 + 14);
          *(_DWORD *)(v175 + 24) = v177 | 0x3F8;
          *(unsigned char *)(v175 + 13) = v183;
          char v184 = *(unsigned char *)(v158 + 10);
          *(_DWORD *)(v175 + 24) = v177 | 0x3FA;
          *(unsigned char *)(v175 + 9) = v184;
          char v185 = *(unsigned char *)(v158 + 9);
          *(_DWORD *)(v175 + 24) = v177 | 0x3FB;
          *(unsigned char *)(v175 + 8) = v185;
          char v186 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v175 + 24) = v177 | 0x3FF;
LABEL_247:
          *(unsigned char *)(v175 + 10) = v186;
          break;
        case 0xA:
          if (!sub_100E1A658(0xCu)) {
            sub_101A90278();
          }
          int v216 = *(_DWORD *)(v165 + 96);
          *(_DWORD *)(v165 + 88) = 12;
          *(_DWORD *)(v165 + 96) = v216 | 0x401;
          uint64_t v202 = *(void *)(v165 + 80);
          if (!v202) {
            operator new();
          }
LABEL_255:
          char v217 = *(unsigned char *)(v158 + 10);
          int v218 = *(_DWORD *)(v202 + 16);
          *(_DWORD *)(v202 + 16) = v218 | 2;
          *(unsigned char *)(v202 + 9) = v217;
          char v219 = *(unsigned char *)(v158 + 11);
          *(_DWORD *)(v202 + 16) = v218 | 6;
          *(unsigned char *)(v202 + 10) = v219;
          char v220 = *(unsigned char *)(v158 + 9);
          *(_DWORD *)(v202 + 16) = v218 | 7;
          *(unsigned char *)(v202 + 8) = v220;
          char v221 = *(unsigned char *)(v158 + 12);
          *(_DWORD *)(v202 + 16) = v218 | 0xF;
          *(unsigned char *)(v202 + 11) = v221;
          break;
        default:
          break;
      }
      int v222 = *(_DWORD *)(v163 + 112);
      *(_OWORD *)(v163 + 24) = *(_OWORD *)(v158 + 24);
      *(void *)(v163 + 40) = *(void *)(v158 + 40);
      *(_DWORD *)(v163 + 80) = *(_DWORD *)(v158 + 168);
      char v223 = *(unsigned char *)(v158 + 173);
      *(_DWORD *)(v163 + 112) = v222 | 0x121C;
      *(unsigned char *)(v163 + 104) = v223;
      int v224 = *(unsigned __int8 *)(v158 + 172);
      if (v224 == 2)
      {
        if (!sub_1001662E0(4u)) {
          sub_101A90328();
        }
        int v225 = 4;
      }
      else if (v224 == 1)
      {
        if (!sub_1001662E0(3u)) {
          sub_101A90328();
        }
        int v225 = 3;
      }
      else if (*(unsigned char *)(v158 + 172))
      {
        if (!sub_1001662E0(1u)) {
          sub_101A90328();
        }
        int v225 = 1;
      }
      else
      {
        if (!sub_1001662E0(2u)) {
          sub_101A90328();
        }
        int v225 = 2;
      }
      int v226 = *(_DWORD *)(v163 + 112);
      *(_DWORD *)(v163 + 112) = v226 | 0x400;
      *(_DWORD *)(v163 + 84) = v225;
      if (*(double *)(v158 + 48) >= 0.0)
      {
        float v227 = *(float *)(v158 + 56);
        if (v227 > 0.0)
        {
          *(_DWORD *)(v163 + 112) = v226 | 0x420;
          uint64_t v228 = *(void *)(v163 + 48);
          if (!v228) {
            operator new();
          }
          uint64_t v229 = *(void *)(v158 + 48);
          *(_DWORD *)(v228 + 32) |= 3u;
          *(void *)(v228 + 8) = v229;
          *(double *)(v228 + 16) = v227;
        }
      }
      if ((*(void *)(v158 + 64) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v230 = *(double *)(v158 + 72);
        if (v230 > 0.0)
        {
          *(_DWORD *)(v163 + 112) |= 0x40u;
          uint64_t v231 = *(void *)(v163 + 56);
          if (!v231) {
            operator new();
          }
          uint64_t v232 = *(void *)(v158 + 64);
          *(_DWORD *)(v231 + 32) |= 3u;
          *(void *)(v231 + 8) = v232;
          *(double *)(v231 + 16) = v230;
        }
      }
      if ((*(void *)(v158 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v233 = *(double *)(v158 + 88);
        if (v233 > 0.0)
        {
          *(_DWORD *)(v163 + 112) |= 0x800u;
          uint64_t v234 = *(void *)(v163 + 88);
          if (!v234) {
            operator new();
          }
          uint64_t v235 = *(void *)(v158 + 80);
          *(_DWORD *)(v234 + 32) |= 3u;
          *(void *)(v234 + 8) = v235;
          *(double *)(v234 + 16) = v233;
        }
      }
      if ((*(void *)(v158 + 96) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v236 = *(double *)(v158 + 104);
        if (v236 > 0.0)
        {
          *(_DWORD *)(v163 + 112) |= 0x2000u;
          uint64_t v237 = *(void *)(v163 + 96);
          if (!v237) {
            operator new();
          }
          int v238 = *(_DWORD *)(v237 + 32);
          *(void *)(v237 + 8) = *(void *)(v158 + 96);
          *(double *)(v237 + 16) = v236;
          char v239 = *(unsigned char *)(v158 + 112);
          *(_DWORD *)(v237 + 32) = v238 | 7;
          *(unsigned char *)(v237 + 24) = v239;
        }
      }
      unint64_t v240 = *(void *)(v158 + 120);
      if (v240 != -1)
      {
        unint64_t v241 = *(void *)(v158 + 128);
        if (v241 != -1 && v240 <= v241)
        {
          uint64_t v242 = *(void *)(v158 + 136);
          if ((v242 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            double v243 = *(double *)(v158 + 144);
            if (v243 > 0.0)
            {
              *(_DWORD *)(v163 + 112) |= 0x80u;
              uint64_t v244 = *(void *)(v163 + 64);
              if (!v244) {
                operator new();
              }
              int v245 = *(_DWORD *)(v244 + 48);
              *(void *)(v244 + 16) = v241;
              *(void *)(v244 + 8) = *(void *)(v158 + 120);
              *(void *)(v244 + 24) = v242;
              *(double *)(v244 + 32) = v243;
              char v246 = *(unsigned char *)(v158 + 152);
              *(_DWORD *)(v244 + 48) = v245 | 0x1F;
              *(unsigned char *)(v244 + 40) = v246;
            }
          }
        }
      }
      long long v247 = *(int **)(v158 + 160);
      if (v247)
      {
        *(_DWORD *)(v163 + 112) |= 0x100u;
        uint64_t v248 = *(void *)(v163 + 72);
        if (!v248) {
          operator new();
        }
        int v249 = *v247;
        int v250 = *(_DWORD *)(v248 + 116);
        if ((*v247 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v250 |= 1u;
          *(_DWORD *)(v248 + 116) = v250;
          *(_DWORD *)(v248 + 8) = v249;
        }
        int v251 = v247[1];
        *(_DWORD *)(v248 + 116) = v250 | 2;
        *(_DWORD *)(v248 + 12) = v251;
        if ((*((void *)v247 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*((void *)v247 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && *((unsigned char *)v247 + 24))
        {
          *(_DWORD *)(v248 + 116) = v250 | 6;
          uint64_t v252 = *(void *)(v248 + 16);
          if (!v252) {
            operator new();
          }
          *(_DWORD *)(v252 + 32) |= 3u;
          *(_OWORD *)(v252 + 8) = *(_OWORD *)(v247 + 2);
          switch(*((unsigned char *)v247 + 24))
          {
            case 0:
              if (!sub_1001A4C58(1u)) {
                sub_101A902A4();
              }
              goto LABEL_317;
            case 1:
              if (!sub_1001A4C58(2u)) {
                sub_101A902A4();
              }
              int v253 = 2;
              break;
            case 2:
              if (!sub_1001A4C58(3u)) {
                sub_101A902A4();
              }
              int v253 = 3;
              break;
            case 3:
              if (!sub_1001A4C58(4u)) {
                sub_101A902A4();
              }
              int v253 = 4;
              break;
            case 4:
              if (!sub_1001A4C58(5u)) {
                sub_101A902A4();
              }
              int v253 = 5;
              break;
            default:
              if (!sub_1001A4C58(1u)) {
                sub_101A902A4();
              }
LABEL_317:
              int v253 = 1;
              break;
          }
          *(_DWORD *)(v252 + 32) |= 4u;
          *(_DWORD *)(v252 + 24) = v253;
        }
        uint64_t v254 = *(void *)(v158 + 160);
        int v255 = *(_DWORD *)(v248 + 116);
        *(_DWORD *)(v248 + 48) = *(unsigned __int16 *)(v254 + 70);
        int v256 = *(unsigned __int8 *)(v254 + 72);
        *(_DWORD *)(v248 + 116) = v255 | 0xC0;
        *(_DWORD *)(v248 + 52) = v256;
        unsigned int v257 = sub_10145E9F8((unsigned __int8 *)(v254 + 92));
        if (!sub_1003DE2E4(v257)) {
          sub_101A902FC();
        }
        *(_DWORD *)(v248 + 116) |= 0x100u;
        *(_DWORD *)(v248 + 56) = v257;
        unsigned int v258 = sub_10145E9F8((unsigned __int8 *)(*(void *)(v158 + 160) + 93));
        if (!sub_1003DE2E4(v258)) {
          sub_101A902D0();
        }
        int v259 = *(_DWORD *)(v248 + 116);
        int v260 = v259 | 0x200;
        *(_DWORD *)(v248 + 116) = v259 | 0x200;
        *(_DWORD *)(v248 + 60) = v258;
        uint64_t v261 = *(void *)(v158 + 160);
        int v262 = *(__int16 *)(v261 + 68);
        if (v262 != -1)
        {
          int v260 = v259 | 0x600;
          *(_DWORD *)(v248 + 116) = v259 | 0x600;
          *(_DWORD *)(v248 + 64) = v262;
        }
        *(_DWORD *)(v248 + 116) = v260 | 8;
        long long v263 = *(_DWORD **)(v248 + 24);
        if (!v263) {
          operator new();
        }
        sub_10145EBC4(v263, (int *)(v261 + 32));
        *(_DWORD *)(v248 + 116) |= 0x10u;
        long long v264 = *(_DWORD **)(v248 + 32);
        if (!v264) {
          operator new();
        }
        sub_10145EBC4(v264, (int *)(*(void *)(v158 + 160) + 44));
        *(_DWORD *)(v248 + 116) |= 0x20u;
        long long v265 = *(_DWORD **)(v248 + 40);
        if (!v265) {
          operator new();
        }
        sub_10145EBC4(v265, (int *)(*(void *)(v158 + 160) + 56));
        uint64_t v266 = *(void *)(v158 + 160);
        if (*(unsigned char *)(v266 + 80))
        {
          int v267 = *(_DWORD *)(v266 + 76);
          *(_DWORD *)(v248 + 116) |= 0x800u;
          *(_DWORD *)(v248 + 68) = v267;
        }
        if (*(unsigned char *)(v266 + 88))
        {
          int v268 = *(_DWORD *)(v266 + 84);
          *(_DWORD *)(v248 + 116) |= 0x1000u;
          *(_DWORD *)(v248 + 72) = v268;
        }
        if (*(unsigned char *)(v266 + 124))
        {
          int v269 = *(_DWORD *)(v248 + 116);
          *(_DWORD *)(v248 + 76) = *(_DWORD *)(v266 + 120);
          uint64_t v271 = *(const std::string::value_type **)(v266 + 96);
          uint64_t v270 = *(void *)(v266 + 104);
          *(_DWORD *)(v248 + 116) = v269 | 0x6000;
          double v272 = *(std::string **)(v248 + 80);
          if (v272 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          std::string::assign(v272, v271, v270 - (void)v271);
          uint64_t v266 = *(void *)(v158 + 160);
        }
        uint64_t v273 = *(void *)(v266 + 128);
        for (iuint64_t i = *(void *)(v266 + 136); v273 != ii; v273 += 40)
        {
          int v275 = *(_DWORD *)(v248 + 100);
          uint64_t v276 = *(int *)(v248 + 96);
          if ((int)v276 >= v275)
          {
            if (v275 == *(_DWORD *)(v248 + 104))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v248 + 88), v275 + 1);
              int v275 = *(_DWORD *)(v248 + 100);
            }
            *(_DWORD *)(v248 + 100) = v275 + 1;
            sub_10146C31C();
          }
          uint64_t v277 = *(void *)(v248 + 88);
          *(_DWORD *)(v248 + 96) = v276 + 1;
          uint64_t v278 = *(void *)(v277 + 8 * v276);
          *(_DWORD *)(v278 + 32) |= 1u;
          uint64_t v279 = *(void *)(v278 + 8);
          if (!v279) {
            operator new();
          }
          int v280 = *(_DWORD *)(v279 + 32);
          *(void *)(v279 + 8) = *(void *)v273;
          double v281 = *(float *)(v273 + 8);
          *(_DWORD *)(v279 + 32) = v280 | 3;
          *(double *)(v279 + 16) = v281;
          *(_DWORD *)(v278 + 32) |= 2u;
          uint64_t v282 = *(void *)(v278 + 16);
          if (!v282) {
            operator new();
          }
          *(_DWORD *)(v282 + 32) |= 3u;
          *(_OWORD *)(v282 + 8) = *(_OWORD *)(v273 + 16);
          int v283 = *(_DWORD *)(v273 + 32);
          *(_DWORD *)(v278 + 32) |= 4u;
          *(_DWORD *)(v278 + 24) = v283;
        }
      }
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    double v22 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "pMeas,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      long long v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLGnssMeasurementToProtobuf(const gnss::MeasurementData &, CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

void sub_10145DC38()
{
}

uint64_t sub_10145DF3C(uint64_t a1)
{
  uint64_t result = sub_10146BFE4(a1);
  if (result)
  {
    if (*(__int16 *)(a1 + 8) == -32768)
    {
      return 0;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3) {
        LODWORD(v3) = *(__int16 *)(a1 + 24) != -32768;
      }
      return (*(unsigned char *)(a1 + 10) != 2) ^ v3;
    }
  }
  return result;
}

BOOL sub_10145DF9C(void *a1)
{
  BOOL result = sub_10146BFE4((uint64_t)a1);
  if (result) {
    return a1[4]
  }
        && (a1[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (a1[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (a1[7] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  return result;
}

BOOL sub_10145E00C(uint64_t a1)
{
  if (!*(_WORD *)a1 || *(unsigned __int16 *)(a1 + 2) - 1 >= 0x5B5)
  {
    if (!*(void *)(a1 + 8) || (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      return 0;
    }
    return (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (*(void *)(a1 + 8)) {
    return (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return 0;
}

BOOL sub_10145E06C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(_WORD *)a1)
  {
    if (!v1) {
      return 0;
    }
  }
  else if (!v1 {
         || (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
  }
         || (*(void *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    return 0;
  }
  if ((*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
    return (*(void *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return 0;
}

uint64_t sub_10145E0DC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) |= 2u;
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2) {
    operator new();
  }
  int v3 = *(_DWORD *)result;
  switch(*(_DWORD *)result)
  {
    case 0:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 0;
      break;
    case 1:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 1;
      int v5 = *(unsigned __int8 *)(result + 4);
      *(_DWORD *)(v2 + 44) |= 1u;
      *(_DWORD *)(v2 + 16) = v5;
      break;
    case 2:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 2;
      *(_DWORD *)(v2 + 44) |= 2u;
      uint64_t v6 = *(void *)(v2 + 8);
      if (!v6) {
        operator new();
      }
      int v7 = *(char *)(result + 6);
      int v8 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v8 | 1;
      *(_DWORD *)(v6 + 16) = v7;
      if (*(unsigned __int8 *)(result + 4) - 1 <= 0x17)
      {
        *(_DWORD *)(v6 + 24) = v8 | 3;
        uint64_t v9 = *(void *)(v6 + 8);
        if (!v9) {
          operator new();
        }
        int v10 = *(unsigned __int8 *)(result + 4);
        *(_DWORD *)(v9 + 20) |= 1u;
        *(_DWORD *)(v9 + 8) = v10;
        switch(*(unsigned char *)(result + 5))
        {
          case 1:
            uint64_t v11 = v9;
            unsigned int v12 = 2;
            break;
          case 2:
            uint64_t v11 = v9;
            unsigned int v12 = 3;
            break;
          case 3:
            uint64_t v11 = v9;
            unsigned int v12 = 4;
            break;
          default:
            uint64_t v11 = v9;
            unsigned int v12 = 1;
            break;
        }
        BOOL result = sub_10146C0E4(v11, v12);
      }
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 4;
      int v13 = *(unsigned __int8 *)(result + 4);
      *(_DWORD *)(v2 + 44) |= 4u;
      *(_DWORD *)(v2 + 20) = v13;
      break;
    case 8:
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_DWORD *)(a2 + 16) = 8;
      int v14 = *(unsigned __int8 *)(result + 4);
      *(_DWORD *)(v2 + 44) |= 8u;
      *(_DWORD *)(v2 + 24) = v14;
      break;
    default:
      if (v3 == 16)
      {
        *(_DWORD *)(a2 + 24) |= 1u;
        *(_DWORD *)(a2 + 16) = 16;
        int v15 = *(unsigned __int8 *)(result + 4);
        *(_DWORD *)(v2 + 44) |= 0x10u;
        *(_DWORD *)(v2 + 28) = v15;
      }
      else if (v3 == 32)
      {
        *(_DWORD *)(a2 + 24) |= 1u;
        *(_DWORD *)(a2 + 16) = 64;
        int v4 = *(unsigned __int8 *)(result + 4);
        *(_DWORD *)(v2 + 44) |= 0x40u;
        *(_DWORD *)(v2 + 36) = v4;
      }
      break;
  }
  return result;
}

void sub_10145E398()
{
}

uint64_t sub_10145E420(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 < 3) {
    return v1 + 2;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TranslateSvHealth,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::SvHealthIndication TranslateSvHealth(const gnss::SvHealthIndication &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 1;
}

uint64_t sub_10145E5EC(unsigned __int8 *a1)
{
  uint64_t result = *a1;
  if (result >= 4)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "TranslateSvReferencePoint,unhandled type,%{public}d", buf, 8u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::SvReferencePoint TranslateSvReferencePoint(const gnss::SvReferencePoint &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10145E7B8(unsigned __int8 *a1)
{
  unint64_t v1 = (char)*a1;
  if (v1 < 0xB) {
    return dword_101E0B8BC[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TranslateBand,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::Band TranslateBand(const gnss::Band &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 1;
}

BOOL sub_10145E98C(uint64_t a1)
{
  if (*(void *)a1 == -1 || *(void *)(a1 + 80) == 0x8000000000000000) {
    return 0;
  }
  float v1 = *(float *)(a1 + 88);
  if (v1 >= -0.5)
  {
    BOOL v3 = v1 == 0.5;
    BOOL v2 = v1 >= 0.5;
  }
  else
  {
    BOOL v2 = 1;
    BOOL v3 = 0;
  }
  return (v3 || !v2)
      && *(float *)(a1 + 92) > 0.0
      && (*(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(float *)(a1 + 104) > 0.5;
}

uint64_t sub_10145E9F8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 < 5) {
    return v1 + 2;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TranslateDetectionMethod,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MeasurementDetectionMethod TranslateDetectionMethod(const gnss::MeasurementDetectionMethod &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 1;
}

_DWORD *sub_10145EBC4(_DWORD *result, int *a2)
{
  int v2 = *a2;
  result[2] = *a2;
  int v3 = result[6];
  int v4 = v3 | 1;
  result[6] = v3 | 1;
  if ((v2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    int v6 = a2[1];
    int v5 = a2[2];
    if ((v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      if ((v5 & 0x7FFFFFFFu) >= 0x7F800000 && (v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        result[6] = v3 | 5;
        result[4] = v5;
      }
    }
    else
    {
      if ((v5 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        int v4 = v3 | 5;
        result[6] = v3 | 5;
        result[4] = v5;
      }
      if ((v5 & 0x7FFFFFFFu) < 0x7F800000)
      {
        result[6] = v4 | 2;
        result[3] = v6;
      }
    }
  }
  return result;
}

void sub_10145EC7C(float32x2_t *a1, float32x2_t *a2, uint64_t *a3)
{
  if (a2)
  {
    a2[4].i32[0] |= 1u;
    uint64_t v5 = (uint64_t)a2[1];
    if (!v5) {
      operator new();
    }
    sub_101457C60(a3, v5);
    __int32 v6 = a2[4].i32[0];
    a2[2] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(a1[1]), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL)));
    float32_t v7 = a1[2].f32[0] * 0.0174532925;
    a2[4].i32[0] = v6 | 0xE;
    a2[3].f32[0] = v7;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v8 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLGyroSampleToProtobuf(const CLGyro::Sample &, CLP::LogEntry::PrivateData::GyroSample *const, const CLUtils::Timestamp &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10145EEB4()
{
}

void sub_10145EEE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 100) |= 4u;
    uint64_t v4 = *(void *)(a2 + 16);
    if (!v4) {
      operator new();
    }
    sub_10016D01C(a1, v4);
    *(_DWORD *)(a2 + 100) |= 8u;
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5) {
      operator new();
    }
    sub_10016DE1C(a1 + 160, v5);
    uint64_t v6 = *(void *)(a1 + 816);
    *(_DWORD *)(a2 + 100) |= 0x10u;
    uint64_t v7 = *(void *)(a2 + 40);
    if (!v7) {
      operator new();
    }
    sub_100020650(v6, v7);
    int v8 = *(_DWORD *)(a2 + 100);
    *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 824);
    uint64_t v9 = *(void *)(a1 + 832);
    *(_DWORD *)(a2 + 100) = v8 | 0x60;
    *(void *)(a2 + 48) = v9;
    unsigned int v10 = sub_1001C148C((unsigned int *)(a1 + 840));
    if (!sub_10016E644(v10)) {
      sub_101A5ECB4();
    }
    int v11 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 72) = v10;
    *(_DWORD *)(a2 + 100) = v11 | 0x180;
    uint64_t v12 = *(void *)(a2 + 56);
    if (!v12) {
      operator new();
    }
    *(_DWORD *)(v12 + 44) |= 1u;
    *(_DWORD *)(a2 + 100) |= 0x100u;
    *(_DWORD *)(v12 + 44) |= 2u;
    *(int8x16_t *)(v12 + 8) = vextq_s8(*(int8x16_t *)(a1 + 848), *(int8x16_t *)(a1 + 848), 8uLL);
    *(_DWORD *)(a2 + 100) |= 0x100u;
    *(_DWORD *)(v12 + 44) |= 4u;
    *(_DWORD *)(a2 + 100) |= 0x100u;
    *(_DWORD *)(v12 + 44) |= 8u;
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(a1 + 864);
    *(_DWORD *)(a2 + 100) |= 0x400u;
    uint64_t v13 = *(void *)(a2 + 80);
    if (!v13) {
      operator new();
    }
    uint64_t v14 = *(void *)(a1 + 896);
    *(_DWORD *)(v13 + 28) |= 1u;
    *(void *)(v13 + 8) = v14;
    unsigned int v15 = sub_10016CE50((unsigned int *)(a1 + 928));
    if (!sub_10016E644(v15)) {
      sub_101A5EC88();
    }
    int v16 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 76) = v15;
    *(_DWORD *)(a2 + 100) = v16 | 0x1800;
    uint64_t v17 = *(void *)(a2 + 88);
    if (!v17) {
      operator new();
    }
    uint64_t v18 = *(void *)(a1 + 944);
    *(_DWORD *)(v17 + 36) |= 1u;
    *(void *)(v17 + 8) = v18;
    *(_DWORD *)(a2 + 100) |= 0x1000u;
    uint64_t v19 = *(void *)(a1 + 936);
    *(_DWORD *)(v17 + 36) |= 2u;
    *(void *)(v17 + 16) = v19;
    *(_DWORD *)(a2 + 100) |= 0x1000u;
    uint64_t v20 = *(void *)(a1 + 952);
    *(_DWORD *)(v17 + 36) |= 4u;
    *(void *)(v17 + 24) = v20;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v21 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "pLocation,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLLocationProviderToProtobuf(const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::PrivateData::Location *)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
}

void sub_10145F324()
{
}

void sub_10145F3BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 32) |= 1u;
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      operator new();
    }
    sub_101457C60(a3, v5);
    int v6 = *(_DWORD *)(a2 + 32);
    *(void *)(a2 + 16) = *(void *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a2 + 32) = v6 | 0xE;
    *(_DWORD *)(a2 + 24) = v7;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v8 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLMagnetometerSampleToProtobuf(const CLMagnetometer::Sample &, CLP::LogEntry::PrivateData::MagSample *, const CLUtils::Timestamp &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10145F5C0()
{
}

__n128 sub_10145F5EC(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4)
{
  if (a2)
  {
    if (sub_100178D5C(a1, *a4, 6.0))
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 134218240;
        uint64_t v29 = v8;
        __int16 v30 = 2048;
        uint64_t v31 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%.2lf,RouteHintsInPositionProto,Received stale data,routeHintTime,%.2lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v11);
LABEL_19:
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    else
    {
      *(_DWORD *)(a2 + 60) |= 1u;
      uint64_t v13 = *(void *)(a2 + 8);
      if (!v13) {
        operator new();
      }
      if ((sub_1001C1658((double *)(a1 + 32), v13, 0) & 1) == 0)
      {
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v14 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error: Failed to convert Map matching route hint event receipt CF time to protobuf", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v13 + 32))(v13);
      }
      *(_DWORD *)(a2 + 60) |= 2u;
      uint64_t v15 = *(void *)(a2 + 16);
      if (!v15) {
        operator new();
      }
      if ((sub_10016F980((double *)(a1 + 40), v15, 0) & 1) == 0)
      {
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v16 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error: Failed to convert Map matching route hint applicable mach continuous time to protobuf", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
      }
      unsigned int v17 = sub_10145FD74((int *)a1);
      if (!sub_1003DE2E4(v17)) {
        sub_101A5F050();
      }
      *(_DWORD *)(a2 + 60) |= 4u;
      *(_DWORD *)(a2 + 24) = v17;
      unsigned int v18 = sub_10145FD74((int *)(a1 + 4));
      if (!sub_1003DE2E4(v18)) {
        sub_101A5F024();
      }
      *(_DWORD *)(a2 + 60) |= 8u;
      *(_DWORD *)(a2 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 8);
      for (uint64_t i = *(void *)(a1 + 16); v19 != i; v19 += 40)
      {
        int v21 = *(_DWORD *)(a2 + 44);
        uint64_t v22 = *(int *)(a2 + 40);
        if ((int)v22 >= v21)
        {
          if (v21 == *(_DWORD *)(a2 + 48))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 32), v21 + 1);
            int v21 = *(_DWORD *)(a2 + 44);
          }
          *(_DWORD *)(a2 + 44) = v21 + 1;
          sub_10146C380();
        }
        uint64_t v23 = *(void *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = v22 + 1;
        uint64_t v24 = *(void *)(v23 + 8 * v22);
        int v25 = *(_DWORD *)(v24 + 52);
        *(void *)(v24 + 8) = *(void *)v19;
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v19 + 8);
        *(_DWORD *)(v24 + 52) = v25 | 0x1F;
        __n128 result = *(__n128 *)(v19 + 24);
        *(__n128 *)(v24 + 32) = result;
      }
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v12 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "RouteHintsInPositionProto,pRouteHintMsg,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLMapMatchingRouteHintToProtobuf(const CLMapsRouteHintData &, CLP::LogEntry::PrivateData::MapMatchingRouteHint *, const CFAbsoluteTime &, const CFTimeInterval &)", "%s\n", v11);
      goto LABEL_19;
    }
  }
  return result;
}

void sub_10145FD44()
{
}

uint64_t sub_10145FD74(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 < 7) {
    return dword_101E0B8E8[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled maps route type,%{public}d", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::MapMatchingRouteHint_RoutingType ConvertCLMapsRouteHintTypeToProtobuf(const CLClientLocationRouteHintType &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_10145FF50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 28) |= 1u;
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      operator new();
    }
    sub_101457C60(a3, v5);
    *(_DWORD *)(a2 + 28) |= 6u;
    *(void *)(a2 + 16) = *(void *)(a1 + 8);
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v6 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "pSample,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLPressureSampleToProtobuf(const CLPressure::Sample &, CLP::LogEntry::PrivateData::BaroSample *, const CLUtils::Timestamp &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10146014C()
{
}

void sub_101460178(int *a1, _DWORD *a2)
{
  int v4 = a1[1];
  if (v4 == 2)
  {
    int v7 = sub_10016DA54(a1);
    if (!sub_10016D86C(v7)) {
      sub_101A5F184();
    }
    a2[8] |= 4u;
    a2[5] = v7;
  }
  else if (v4 == 1)
  {
    int v8 = sub_10016DA54(a1);
    if (!sub_10016D86C(v8)) {
      sub_101A5F1B0();
    }
    a2[8] |= 2u;
    a2[4] = v8;
  }
  else if (v4)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v10 = a1[1];
      *(_DWORD *)std::string buf = 67240192;
      int v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Received unhandled signal environment fidelity level: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLSignalEnvironmentToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &, CLP::LogEntry::PrivateData::SignalEnvironment *)", "%s\n");
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received signal environment level unavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void ConvertCLSignalEnvironmentToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &, CLP::LogEntry::PrivateData::SignalEnvironment *)", "%s\n");
LABEL_27:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
}

BOOL sub_1014604BC(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 > 0.0)
  {
    *(_DWORD *)(a2 + 148) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    if ((sub_1001C0DB4((double *)a1, v4, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v5 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLStepCountEntry mach timestamp to protobuf", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v39 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLStepCountEntryToProtobuf(const CLStepCountEntry &, CLP::LogEntry::PrivateData::StepCountEntry *)", "%s\n", (const char *)v39);
        if (v39 != buf) {
          free(v39);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
  }
  if (*(double *)(a1 + 8) > 0.0)
  {
    *(_DWORD *)(a2 + 148) |= 2u;
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      operator new();
    }
    if ((sub_1001C1658((double *)(a1 + 8), v6, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLStepCountEntry start CF time to protobuf", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v40 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLStepCountEntryToProtobuf(const CLStepCountEntry &, CLP::LogEntry::PrivateData::StepCountEntry *)", "%s\n", (const char *)v40);
        if (v40 != buf) {
          free(v40);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
  }
  if (*(double *)(a1 + 16) > 0.0)
  {
    *(_DWORD *)(a2 + 148) |= 4u;
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      operator new();
    }
    if ((sub_1001C1658((double *)(a1 + 16), v8, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v9 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLStepCountEntry first step CF time to protobuf", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v41 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLStepCountEntryToProtobuf(const CLStepCountEntry &, CLP::LogEntry::PrivateData::StepCountEntry *)", "%s\n", (const char *)v41);
        if (v41 != buf) {
          free(v41);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
  }
  int v10 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  *(_DWORD *)(a2 + 148) = v10 | 0x38;
  *(void *)(a2 + 48) = v11;
  int v12 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 148) = v10 | 0x78;
  *(_DWORD *)(a2 + 44) = v12;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 88);
  *(_DWORD *)(a2 + 148) = v10 | 0x7F8;
  *(void *)(a2 + 80) = v13;
  int v14 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 148) = v10 | 0xFF8;
  *(_DWORD *)(a2 + 76) = v14;
  CStringPtr = (char *)CFStringGetCStringPtr(*(CFStringRef *)(a1 + 104), 0x8000100u);
  if (CStringPtr)
  {
    sub_100134750(buf, CStringPtr);
    *(_DWORD *)(a2 + 148) |= 0x1000u;
    int v16 = *(std::string **)(a2 + 88);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v16, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  int v17 = *(_DWORD *)(a2 + 148);
  *(_WORD *)(a2 + 96) = *(_WORD *)(a1 + 112);
  *(_DWORD *)(a2 + 148) = v17 | 0xE000;
  uint64_t v18 = *(void *)(a2 + 104);
  if (!v18) {
    operator new();
  }
  int v19 = *(_DWORD *)(v18 + 36);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(a1 + 120);
  uint64_t v20 = *(void *)(a1 + 136);
  *(_DWORD *)(v18 + 36) = v19 | 7;
  *(void *)(v18 + 24) = v20;
  int v21 = *(_DWORD *)(a1 + 144);
  int v22 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = v22 | 0x10000;
  *(_DWORD *)(a2 + 100) = v21;
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 148);
  int v23 = *(unsigned __int8 *)(a1 + 152);
  *(_DWORD *)(a2 + 148) = v22 | 0x70000;
  *(_DWORD *)(a2 + 116) = v23;
  int v24 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a2 + 148) = v22 | 0xF0000;
  *(_DWORD *)(a2 + 120) = v24;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 160);
  int v25 = *(unsigned __int8 *)(a1 + 165);
  *(_DWORD *)(a2 + 148) = v22 | 0x3F0000;
  *(_DWORD *)(a2 + 128) = v25;
  unsigned int v26 = sub_101460D34((unsigned __int8 *)(a1 + 166));
  BOOL result = sub_1001A4C58(v26);
  if (!result) {
    sub_101A5F234();
  }
  int v28 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 132) = v26;
  *(_DWORD *)(a2 + 148) = v28 | 0xC00000;
  uint64_t v29 = *(void *)(a2 + 136);
  if (!v29) {
    operator new();
  }
  char v30 = *(unsigned char *)(a1 + 164) & 1;
  int v31 = *(_DWORD *)(v29 + 20);
  *(_DWORD *)(v29 + 20) = v31 | 1;
  *(unsigned char *)(v29 + 8) = v30;
  BOOL v32 = (*(unsigned char *)(a1 + 164) & 2) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 3;
  *(unsigned char *)(v29 + 9) = v32;
  BOOL v33 = (*(unsigned char *)(a1 + 164) & 4) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 7;
  *(unsigned char *)(v29 + 10) = v33;
  BOOL v34 = (*(unsigned char *)(a1 + 164) & 8) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0xF;
  *(unsigned char *)(v29 + 11) = v34;
  BOOL v35 = (*(unsigned char *)(a1 + 164) & 0x10) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0x1F;
  *(unsigned char *)(v29 + 12) = v35;
  BOOL v36 = (*(unsigned char *)(a1 + 164) & 0x20) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0x3F;
  *(unsigned char *)(v29 + 13) = v36;
  BOOL v37 = (*(unsigned char *)(a1 + 164) & 0x40) != 0;
  *(_DWORD *)(v29 + 20) = v31 | 0x7F;
  *(unsigned char *)(v29 + 14) = v37;
  int v38 = *(unsigned __int8 *)(a1 + 164) >> 7;
  *(_DWORD *)(v29 + 20) = v31 | 0xFF;
  *(unsigned char *)(v29 + 15) = v38;
  return result;
}

void sub_101460CD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_101460D34(unsigned __int8 *a1)
{
  uint64_t result = *a1;
  if (result >= 6)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)std::string buf = 67109120;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled step count distance source type: %u", buf, 8u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::StepCountEntry_DistanceSourceType ConvertCLStepCountDistanceSourceTypeToProtobuf(const uint8_t &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101460F00(uint64_t *a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "pProtoTimestamp is nullptr.", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v6) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::Raven::RavenPlatformInfo::TimeStamp *)", "%s\n");
LABEL_21:
    if (v7 != buf) {
      free(v7);
    }
    return 0;
  }
  if (*((unsigned char *)a1 + 24))
  {
    int v2 = *(_DWORD *)(a2 + 36);
    *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    uint64_t v3 = *a1;
    *(_DWORD *)(a2 + 36) = v2 | 7;
    *(void *)(a2 + 24) = v3;
    return 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v8 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Error: Raven Platform Info timestamp is not valid.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::Raven::RavenPlatformInfo::TimeStamp *)", "%s\n");
    goto LABEL_21;
  }
  return result;
}

BOOL sub_1014611E4(uint64_t *a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "pProtoTimestamp is nullptr.", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v6) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n");
LABEL_21:
    if (v7 != buf) {
      free(v7);
    }
    return 0;
  }
  if (*((unsigned char *)a1 + 24))
  {
    int v2 = *(_DWORD *)(a2 + 36);
    *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    uint64_t v3 = *a1;
    *(_DWORD *)(a2 + 36) = v2 | 7;
    *(void *)(a2 + 24) = v3;
    return 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v8 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Error: TrackRun Platform Info timestamp is not valid.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n");
    goto LABEL_21;
  }
  return result;
}

void sub_1014614C8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 32) |= 4u;
    uint64_t v3 = *(void *)(a2 + 16);
    if (!v3) {
      operator new();
    }
    *(_DWORD *)(v3 + 48) |= 1u;
    uint64_t v4 = *(void *)(v3 + 8);
    if (!v4) {
      operator new();
    }
    if ((sub_1001C1658((double *)(a1 + 8), v4, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v5 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert Tunnel bridge data applicable CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLTunnelBridgeDataToProtobuf(const CLGpsAssistant_Type::TunnelBridgeAssistance &, CLP::LogEntry::PrivateData::TunnelBridgeNotification *)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
    int v6 = *(_DWORD *)(v3 + 48);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
    *(void *)(v3 + 32) = *(void *)(a1 + 32);
    *(_DWORD *)(v3 + 48) = v6 | 0xFE;
    *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 40);
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "pTbn,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLTunnelBridgeDataToProtobuf(const CLGpsAssistant_Type::TunnelBridgeAssistance &, CLP::LogEntry::PrivateData::TunnelBridgeNotification *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_101461870()
{
}

void sub_1014618B8(uint64_t a1, uint64_t a2, double a3)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 32) |= 4u;
    uint64_t v5 = *(void *)(a2 + 16);
    if (!v5) {
      operator new();
    }
    *(_DWORD *)(v5 + 124) |= 1u;
    uint64_t v6 = *(void *)(v5 + 8);
    if (!v6) {
      operator new();
    }
    if ((sub_1001C1658((double *)a1, v6, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert Tunnel end point data applicable CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLTunnelEndPointDataToProtobuf(const CLGpsAssistant_Type::TunnelEndPositionAssistance &, double, CLP::LogEntry::PrivateData::TunnelEndPoint *)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    int v8 = *(_DWORD *)(v5 + 124);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a1 + 8);
    *(void *)(v5 + 32) = *(void *)(a1 + 24);
    *(double *)(v5 + 40) = *(double *)(a1 + 48) + a3;
    *(void *)(v5 + 48) = *(void *)(a1 + 56);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(a1 + 32);
    *(void *)(v5 + 80) = *(void *)(a1 + 64);
    char v9 = *(unsigned char *)(a1 + 72);
    *(_DWORD *)(v5 + 124) = v8 | 0x7BE;
    *(unsigned char *)(v5 + 76) = v9;
    unsigned int v10 = sub_10016D468((unsigned int *)(a1 + 76));
    if (!sub_10016E644(v10)) {
      sub_101A5EFF8();
    }
    int v11 = *(_DWORD *)(v5 + 124);
    *(_DWORD *)(v5 + 72) = v10;
    *(_OWORD *)(v5 + 88) = *(_OWORD *)(a1 + 88);
    *(_DWORD *)(v5 + 124) = v11 | 0x7840;
    *(_OWORD *)(v5 + 104) = *(_OWORD *)(a1 + 104);
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v12 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "TunnelEndPoint protobuf message pointer is invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLTunnelEndPointDataToProtobuf(const CLGpsAssistant_Type::TunnelEndPositionAssistance &, double, CLP::LogEntry::PrivateData::TunnelEndPoint *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_101461CD4()
{
}

void sub_101461D1C(int *a1, uint64_t a2)
{
  if (a2)
  {
    int v4 = *a1;
    if (*a1 == 2)
    {
      int v5 = 3;
      if (!sub_100165F14(3u)) {
        sub_101A5F4F4();
      }
    }
    else if (v4 == 1)
    {
      int v5 = 2;
      if (!sub_100165F14(2u)) {
        sub_101A5F4F4();
      }
    }
    else
    {
      if (v4) {
        goto LABEL_20;
      }
      int v5 = 1;
      if (!sub_100165F14(1u)) {
        sub_101A5F4F4();
      }
    }
    *(_DWORD *)(a2 + 36) |= 2u;
    *(_DWORD *)(a2 + 16) = v5;
LABEL_20:
    int v8 = a1[1];
    if (v8 == 2)
    {
      int v9 = 3;
      if (!sub_100165F14(3u)) {
        sub_101A5F4C8();
      }
    }
    else if (v8 == 1)
    {
      int v9 = 2;
      if (!sub_100165F14(2u)) {
        sub_101A5F4C8();
      }
    }
    else
    {
      if (v8) {
        goto LABEL_29;
      }
      int v9 = 1;
      if (!sub_100165F14(1u)) {
        sub_101A5F4C8();
      }
    }
    *(_DWORD *)(a2 + 36) |= 4u;
    *(_DWORD *)(a2 + 20) = v9;
LABEL_29:
    int v10 = a1[2];
    if (v10)
    {
      if (v10 == 1)
      {
        int v11 = 2;
        if (!sub_100165F14(2u)) {
          sub_101A5F49C();
        }
      }
      else
      {
        if (v10 != 2)
        {
          int v12 = *(_DWORD *)(a2 + 36);
          goto LABEL_39;
        }
        int v11 = 3;
        if (!sub_100165F14(3u)) {
          sub_101A5F49C();
        }
      }
    }
    else
    {
      int v11 = 1;
      if (!sub_100165F14(1u)) {
        sub_101A5F49C();
      }
    }
    int v12 = *(_DWORD *)(a2 + 36) | 8;
    *(_DWORD *)(a2 + 36) = v12;
    *(_DWORD *)(a2 + 24) = v11;
LABEL_39:
    *(unsigned char *)(a2 + 28) = *((unsigned char *)a1 + 24);
    *(_WORD *)(a2 + 29) = *(_WORD *)((char *)a1 + 25);
    *(_DWORD *)(a2 + 36) = v12 | 0x71;
    uint64_t v13 = *(void *)(a2 + 8);
    if (!v13) {
      operator new();
    }
    *(double *)std::string buf = (double)*((unint64_t *)a1 + 2);
    if ((sub_1001C1658((double *)buf, v13, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v14 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error: Failed to convert Wrist state applicable CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWristStateToProtobuf(const CLWatchOrientationSettingsNotifier_Type::WristState &, CLP::LogEntry::PrivateData::WristState *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 32))(v13);
    }
    return;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v6 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "WristState protobuf message pointer is invalid", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWristStateToProtobuf(const CLWatchOrientationSettingsNotifier_Type::WristState &, CLP::LogEntry::PrivateData::WristState *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1014621D0()
{
}

std::string *sub_1014621FC(void *a1, uint64_t a2)
{
  if ([a1 preferredName])
  {
    int v4 = (const std::string::value_type *)[a1 preferredName].UTF8String;
    *(_DWORD *)(a2 + 36) |= 4u;
    int v5 = *(std::string **)(a2 + 16);
    if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::assign(v5, v4);
  }
  id v6 = [a1 userType];
  LODWORD(v7) = v6;
  if ((unint64_t)v6 >= 5)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v8 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      int v15 = (int)v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ConvertCLPlaceInferenceUserSpecificPlaceTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::PlaceInference::UserSpecificPlaceType ConvertCLPlaceInferenceUserSpecificPlaceTypeToProtobuf(const _CLPlaceInferenceUserSpecificPlaceType &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if (!sub_1001662E0(v7)) {
    sub_101A5F54C();
  }
  *(_DWORD *)(a2 + 36) |= 1u;
  *(_DWORD *)(a2 + 8) = v7;
  id v9 = [a1 placeType];
  LODWORD(v7) = v9;
  if ((unint64_t)v9 >= 3)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v10 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      int v15 = (int)v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "ConvertCLPlaceInferencePlaceTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::PlaceInference::PlaceInferencePlaceType ConvertCLPlaceInferencePlaceTypeToProtobuf(const _CLPlaceInferencePlaceType &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if (!sub_10016E644(v7)) {
    sub_101A5F520();
  }
  *(_DWORD *)(a2 + 36) |= 2u;
  *(_DWORD *)(a2 + 12) = v7;
  BOOL result = (std::string *)[a1 _loiIdentifier];
  if (result)
  {
    BOOL result = (std::string *)[a1 _loiIdentifier UUIDString];
    if (result)
    {
      int v12 = (const std::string::value_type *)[([[a1 _loiIdentifier] UUIDString] UTF8String]);
      *(_DWORD *)(a2 + 36) |= 8u;
      uint64_t v13 = *(std::string **)(a2 + 24);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      return std::string::assign(v13, v12);
    }
  }
  return result;
}

void sub_101462648(void *a1, uint64_t a2)
{
  if (a1)
  {
    [a1 horizontalAccuracy];
    int v4 = *(_DWORD *)(a2 + 68);
    *(void *)(a2 + 56) = v5;
    *(_DWORD *)(a2 + 68) = v4 | 0x60;
    uint64_t v6 = *(void *)(a2 + 48);
    if (!v6) {
      operator new();
    }
    [a1 coordinate];
    *(_DWORD *)(v6 + 28) |= 1u;
    *(void *)(v6 + 8) = v7;
    *(_DWORD *)(a2 + 68) |= 0x20u;
    uint64_t v8 = *(void *)(a2 + 48);
    if (!v8) {
      operator new();
    }
    [a1 coordinate];
    *(_DWORD *)(v8 + 28) |= 2u;
    *(void *)(v8 + 16) = v9;
    id v10 = [a1 _placeInference];
    *(_DWORD *)(a2 + 68) |= 0x10u;
    uint64_t v11 = *(void *)(a2 + 40);
    if (!v11) {
      operator new();
    }
    sub_1014621FC(v10, v11);
    if ([a1 hasArrivalDate] && objc_msgSend(a1, "arrivalDate"))
    {
      *(_DWORD *)(a2 + 68) |= 2u;
      uint64_t v12 = *(void *)(a2 + 16);
      if (!v12) {
        operator new();
      }
      [objc_msgSend(a1, "arrivalDate") timeIntervalSinceReferenceDate];
      *(_DWORD *)(v12 + 36) |= 1u;
      *(void *)(v12 + 8) = v13;
    }
    if ([a1 hasDepartureDate] && objc_msgSend(a1, "departureDate"))
    {
      *(_DWORD *)(a2 + 68) |= 4u;
      uint64_t v14 = *(void *)(a2 + 24);
      if (!v14) {
        operator new();
      }
      [objc_msgSend(a1, "departureDate") timeIntervalSinceReferenceDate];
      *(_DWORD *)(v14 + 36) |= 1u;
      *(void *)(v14 + 8) = v15;
    }
    if ([a1 detectionDate])
    {
      *(_DWORD *)(a2 + 68) |= 8u;
      uint64_t v16 = *(void *)(a2 + 32);
      if (!v16) {
        operator new();
      }
      [objc_msgSend(a1, "detectionDate") timeIntervalSinceReferenceDate];
      *(_DWORD *)(v16 + 36) |= 1u;
      *(void *)(v16 + 8) = v17;
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v18 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "ConvertCLVisitToProtobuf,visit is nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLVisitToProtobuf(const CLVisit *, CLP::LogEntry::PrivateData::RoutineVisit *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
}

void sub_101462A18()
{
}

void sub_101462A80(int *a1, _DWORD *a2)
{
  if (!a2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v6 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "WatchOrientation protobuf message pointer is invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLGizmoOrientationToProtobuf(const CLGizmoOrientation &, CLP::LogEntry::PrivateData::WatchOrientation *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return;
  }
  int v4 = a1[1];
  switch(v4)
  {
    case 2:
      int v5 = 1;
      if (!sub_100165F14(1u)) {
        sub_101A5F444();
      }
      goto LABEL_19;
    case 1:
      int v5 = 3;
      if (!sub_100165F14(3u)) {
        sub_101A5F444();
      }
      goto LABEL_19;
    case 0:
      int v5 = 2;
      if (!sub_100165F14(2u)) {
        sub_101A5F444();
      }
LABEL_19:
      a2[5] |= 2u;
      a2[3] = v5;
      break;
  }
  int v8 = *a1;
  if (*a1 == 2)
  {
    int v9 = 1;
    if (!sub_100165F14(1u)) {
      sub_101A5F470();
    }
  }
  else if (v8 == 1)
  {
    int v9 = 3;
    if (!sub_100165F14(3u)) {
      sub_101A5F470();
    }
  }
  else
  {
    if (v8) {
      return;
    }
    int v9 = 2;
    if (!sub_100165F14(2u)) {
      sub_101A5F470();
    }
  }
  a2[5] |= 1u;
  a2[2] = v9;
}

BOOL sub_101462CDC(double *a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "pTimeStamp,Invalid pointer", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    LOWORD(v23) = 0;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v8);
    goto LABEL_41;
  }
  double v3 = *a1;
  if (*a1 < 0.0 || (*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = *(void *)a1;
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Mach continuous time cannot be negative or infinite: %lf", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unint64_t v7 = *(void *)a1;
    int v23 = 134217984;
    unint64_t v24 = v7;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v8);
LABEL_41:
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  *(_DWORD *)(a2 + 36) |= 4u;
  *(double *)(a2 + 24) = v3;
  if (!qword_102487C40) {
    operator new();
  }
  unint64_t v22 = 0xBFF0000000000000;
  if (!sub_100B01594(qword_102487C40, a1, (double *)&v22))
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v15 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v16 = *(void *)a1;
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Error: mach continuous to mach absolute time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      unint64_t v18 = *(void *)a1;
      int v23 = 134217984;
      unint64_t v24 = v18;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
    return 0;
  }
  unint64_t v13 = v22;
  *(_DWORD *)(a2 + 36) |= 2u;
  *(void *)(a2 + 16) = v13;
  unint64_t v21 = 0xBFF0000000000000;
  BOOL v10 = sub_100B01790(qword_102487C40, (double *)&v22, (double *)&v21);
  if (v10)
  {
    unint64_t v14 = v21;
    *(_DWORD *)(a2 + 36) |= 1u;
    *(void *)(a2 + 8) = v14;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v17 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v26 = v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Mach absolute to CF absolute time conversion failed: %lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v23 = 134217984;
      unint64_t v24 = v22;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL ConvertMachContinousTimeToProtobuf(const CFTimeInterval &, CLP::LogEntry::TropicalSavanna::TimeStamp *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  return v10;
}

void sub_1014633A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 36) |= 2u;
    uint64_t v4 = *(void *)(a2 + 16);
    if (!v4) {
      operator new();
    }
    if (!sub_101462CDC((double *)a1, v4)) {
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 36) |= 4u;
    *(_DWORD *)(a2 + 24) = v5;
    int v6 = *(_DWORD *)(a1 + 12);
    if (v6 == 2)
    {
      int v7 = 2;
      if (!sub_10016E644(2u)) {
        sub_101A7EE4C();
      }
    }
    else
    {
      if (v6 != 1) {
        return;
      }
      int v7 = 1;
      if (!sub_10016E644(1u)) {
        sub_101A7EE4C();
      }
    }
    *(_DWORD *)(a2 + 36) |= 8u;
    *(_DWORD *)(a2 + 28) = v7;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v8 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "TrackRunHint protobuf message pointer is invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertTrackRunHintToProtobuf(const CLTrackRunHint &, CLP::LogEntry::TropicalSavanna::TropicalSavannaHint *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10146360C()
{
}

void sub_101463638(void *a1, uint64_t a2, int a3)
{
  if (a1 && a2)
  {
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    id v91 = [a1 countByEnumeratingWithState:&v107 objects:v120 count:16];
    if (!v91) {
      return;
    }
    uint64_t v89 = *(void *)v108;
    while (1)
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v108 != v89) {
          objc_enumerationMutation(a1);
        }
        uint64_t v4 = *(void **)(*((void *)&v107 + 1) + 8 * v3);
        uint64_t v90 = v3;
        if (v4)
        {
          uint64_t v5 = a2;
          int v6 = *(_DWORD *)(a2 + 28);
          uint64_t v7 = *(int *)(a2 + 24);
          if ((int)v7 >= v6)
          {
            if (v6 == *(_DWORD *)(a2 + 32))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 16), v6 + 1);
              uint64_t v5 = a2;
              int v6 = *(_DWORD *)(a2 + 28);
            }
            *(_DWORD *)(v5 + 28) = v6 + 1;
            sub_10146C414();
          }
          uint64_t v8 = *(void *)(a2 + 16);
          *(_DWORD *)(a2 + 24) = v7 + 1;
          uint64_t v9 = *(void *)(v8 + 8 * v7);
          id v12 = [v4 trackId];
          *(_DWORD *)(v9 + 76) |= 4u;
          *(void *)(v9 + 40) = v12;
          id v13 = [objc_msgSend(v4, "lanes") count];
          *(_DWORD *)(v9 + 76) |= 0x40u;
          *(void *)(v9 + 64) = v13;
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_102327560);
          }
          unint64_t v14 = qword_102418FB8;
          if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
          {
            id v15 = [objc_msgSend(v4, "lanes") count];
            id v16 = [v4 features];
            *(_DWORD *)std::string buf = 134284033;
            id v122 = v15;
            __int16 v123 = 2048;
            id v124 = v16;
            __int16 v125 = 1026;
            int v126 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Track has lanes,%{private}lu,features,%lu,doNotStoreLaneGeometry,%{public}d", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FB0 != -1) {
              dispatch_once(&qword_102418FB0, &stru_102327560);
            }
            id v70 = [objc_msgSend(v4, "lanes") count];
            id v71 = [v4 features];
            int v114 = 134284033;
            id v115 = v70;
            __int16 v116 = 2048;
            id v117 = v71;
            __int16 v118 = 1026;
            int v119 = a3;
            int v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v72);
            if (v72 != (char *)buf) {
              free(v72);
            }
          }
          if (([v4 features] & 4) != 0)
          {
            if (qword_102418FB0 != -1) {
              dispatch_once(&qword_102418FB0, &stru_102327560);
            }
            int v23 = qword_102418FB8;
            if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
            {
              id v24 = [[[v4 orientedBoundingRegion] vertexs] count];
              *(_DWORD *)std::string buf = 134217984;
              id v122 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Track has an oriented bounding box with %lu vertices", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FB0 != -1) {
                dispatch_once(&qword_102418FB0, &stru_102327560);
              }
              id v73 = [[[v4 orientedBoundingRegion] vertexs] count];
              int v114 = 134217984;
              id v115 = v73;
              uint64_t v74 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v74);
              if (v74 != (char *)buf) {
                free(v74);
              }
            }
            long long v105 = 0u;
            long long v106 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            id v25 = [[objc_msgSend(v4, "orientedBoundingRegion") vertexs];
            id v26 = [v25 countByEnumeratingWithState:&v103 objects:v113 count:16];
            if (v26)
            {
              uint64_t v27 = *(void *)v104;
              do
              {
                for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v104 != v27) {
                    objc_enumerationMutation(v25);
                  }
                  uint64_t v29 = *(void **)(*((void *)&v103 + 1) + 8 * i);
                  *(_DWORD *)(v9 + 76) |= 1u;
                  char v30 = *(int **)(v9 + 8);
                  if (!v30) {
                    operator new();
                  }
                  int v31 = v30[13];
                  uint64_t v32 = v30[12];
                  if ((int)v32 >= v31)
                  {
                    if (v31 == v30[14])
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v30 + 10), v31 + 1);
                      int v31 = v30[13];
                    }
                    v30[13] = v31 + 1;
                    sub_10146BF80();
                  }
                  uint64_t v33 = *((void *)v30 + 5);
                  v30[12] = v32 + 1;
                  uint64_t v34 = *(void *)(v33 + 8 * v32);
                  if (!v34)
                  {
                    if (qword_102418FB0 != -1) {
                      dispatch_once(&qword_102418FB0, &stru_102327560);
                    }
                    uint64_t v80 = qword_102418FB8;
                    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "Invalid track data oriented bounding box vertex pointer", buf, 2u);
                    }
                    if (sub_10013D1A0(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102418FB0 != -1) {
LABEL_186:
                      }
                        dispatch_once(&qword_102418FB0, &stru_102327560);
                      goto LABEL_177;
                    }
                    return;
                  }
                  [v29 lat];
                  *(_DWORD *)(v34 + 28) |= 1u;
                  *(void *)(v34 + 8) = v35;
                  [v29 lng];
                  *(_DWORD *)(v34 + 28) |= 2u;
                  *(void *)(v34 + 16) = v36;
                }
                id v26 = [v25 countByEnumeratingWithState:&v103 objects:v113 count:16];
              }
              while (v26);
            }
          }
          else if (objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasEastLng") {
                 && objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasWestLng")
          }
                 && objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasNorthLat")
                 && objc_msgSend(objc_msgSend(v4, "boundingBox"), "hasSouthLat"))
          {
            if (qword_102418FB0 != -1) {
              dispatch_once(&qword_102418FB0, &stru_102327560);
            }
            uint64_t v17 = qword_102418FB8;
            if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Track does not have an oriented bounding box. Storing an axis aligned bounding box instead.", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FB0 != -1) {
                dispatch_once(&qword_102418FB0, &stru_102327560);
              }
              LOWORD(v114) = 0;
              uint64_t v76 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v76);
              if (v76 != (char *)buf) {
                free(v76);
              }
            }
            *(_DWORD *)(v9 + 76) |= 1u;
            uint64_t v18 = *(void *)(v9 + 8);
            if (!v18) {
              operator new();
            }
            [objc_msgSend(v4, "boundingBox") eastLng];
            *(_DWORD *)(v18 + 68) |= 8u;
            *(void *)(v18 + 32) = v19;
            [objc_msgSend(v4, "boundingBox") westLng];
            *(_DWORD *)(v18 + 68) |= 2u;
            *(void *)(v18 + 16) = v20;
            [objc_msgSend(v4, "boundingBox") northLat];
            *(_DWORD *)(v18 + 68) |= 1u;
            *(void *)(v18 + 8) = v21;
            [objc_msgSend(v4, "boundingBox") southLat];
            *(_DWORD *)(v18 + 68) |= 4u;
            *(void *)(v18 + 24) = v22;
          }
          else
          {
            if (qword_102418FB0 != -1) {
              dispatch_once(&qword_102418FB0, &stru_102327560);
            }
            BOOL v37 = qword_102418FB8;
            if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Track has no bounding box information", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FB0 != -1) {
                dispatch_once(&qword_102418FB0, &stru_102327560);
              }
              LOWORD(v114) = 0;
              uint64_t v75 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v75);
              if (v75 != (char *)buf) {
                free(v75);
              }
            }
          }
          *(_DWORD *)(a2 + 48) |= 4u;
          if (a3)
          {
            *(unsigned char *)(a2 + 40) = 0;
          }
          else
          {
            *(unsigned char *)(a2 + 40) = 1;
            id v38 = [v4 type];
            if (v38 == (id)1)
            {
              if (!sub_100165F14(2u)) {
                sub_101A5F418();
              }
              int v39 = 2;
            }
            else if (v38 == (id)2)
            {
              if (!sub_100165F14(3u)) {
                sub_101A5F418();
              }
              int v39 = 3;
            }
            else
            {
              if (!sub_100165F14(1u)) {
                sub_101A5F418();
              }
              int v39 = 1;
            }
            int v40 = *(_DWORD *)(v9 + 76);
            *(_DWORD *)(v9 + 48) = v39;
            *(_DWORD *)(v9 + 76) = v40 | 0x28;
            uint64_t v41 = *(void *)(v9 + 56);
            if (!v41) {
              operator new();
            }
            uint64_t v88 = *(void *)(v9 + 56);
            unsigned __int8 v42 = [v4 features];
            uint64_t v43 = (_DWORD *)(v41 + 16);
            *v43 |= 1u;
            *(unsigned char *)(v88 + 8) = v42 & 1;
            unsigned __int8 v44 = [v4 features];
            *v43 |= 2u;
            *(unsigned char *)(v88 + 9) = (v44 & 2) != 0;
            long long v101 = 0u;
            long long v102 = 0u;
            long long v99 = 0u;
            long long v100 = 0u;
            id v86 = [v4 lanes];
            id v87 = [v86 countByEnumeratingWithState:&v99 objects:v112 count:16];
            if (v87)
            {
              int v85 = 0;
              uint64_t v84 = *(void *)v100;
LABEL_81:
              uint64_t v45 = 0;
              while (1)
              {
                if (*(void *)v100 != v84) {
                  objc_enumerationMutation(v86);
                }
                uint64_t v46 = *(void **)(*((void *)&v99 + 1) + 8 * v45);
                if (v46)
                {
                  int v47 = *(_DWORD *)(v9 + 28);
                  uint64_t v48 = *(int *)(v9 + 24);
                  uint64_t v83 = v45;
                  if ((int)v48 >= v47)
                  {
                    if (v47 == *(_DWORD *)(v9 + 32))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 16), v47 + 1);
                      int v47 = *(_DWORD *)(v9 + 28);
                    }
                    *(_DWORD *)(v9 + 28) = v47 + 1;
                    sub_10146C478();
                  }
                  uint64_t v49 = *(void *)(v9 + 16);
                  *(_DWORD *)(v9 + 24) = v48 + 1;
                  uint64_t v50 = *(int **)(v49 + 8 * v48);
                  if (!v50)
                  {
                    if (qword_102418FB0 != -1) {
                      dispatch_once(&qword_102418FB0, &stru_102327560);
                    }
                    int v82 = qword_102418FB8;
                    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "Invalid track data lane pointer", buf, 2u);
                    }
                    if (!sub_10013D1A0(115, 0)) {
                      return;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_102418FB0 != -1) {
                      goto LABEL_186;
                    }
LABEL_177:
                    LOWORD(v114) = 0;
                    int v79 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v79);
LABEL_178:
                    if (v79 != (char *)buf) {
                      free(v79);
                    }
                    return;
                  }
                  id v53 = [v46 type];
                  if (v53 == (id)2)
                  {
                    if (!sub_100165F14(3u)) {
                      sub_101A5F3EC();
                    }
                    int v54 = v50[13] | 2;
                    v50[13] = v54;
                    int v55 = 3;
                  }
                  else if (v53 == (id)1)
                  {
                    if (!sub_100165F14(2u)) {
                      sub_101A5F3EC();
                    }
                    int v54 = v50[13] | 2;
                    v50[13] = v54;
                    int v55 = 2;
                  }
                  else
                  {
                    if (!sub_100165F14(1u)) {
                      sub_101A5F3EC();
                    }
                    int v54 = v50[13] | 2;
                    v50[13] = v54;
                    int v55 = 1;
                  }
                  uint64_t v56 = v88;
                  v50[13] = v54 | 4;
                  v50[8] = v55;
                  v50[9] = ++v85;
                  if (*(unsigned char *)(v88 + 8))
                  {
                    unsigned int v57 = [v46 width];
                    v50[13] |= 8u;
                    v50[10] = v57;
                    uint64_t v56 = v88;
                  }
                  if (*(unsigned char *)(v56 + 9))
                  {
                    unsigned int v58 = [v46 flowlineOffset];
                    v50[13] |= 0x10u;
                    v50[11] = v58;
                  }
                  long long v97 = 0u;
                  long long v98 = 0u;
                  long long v95 = 0u;
                  long long v96 = 0u;
                  id v59 = [v46 coordinates];
                  id v60 = [v59 countByEnumeratingWithState:&v95 objects:v111 count:16];
                  if (v60)
                  {
                    uint64_t v61 = *(void *)v96;
LABEL_114:
                    uint64_t v62 = 0;
                    while (1)
                    {
                      if (*(void *)v96 != v61) {
                        objc_enumerationMutation(v59);
                      }
                      int v63 = *(void **)(*((void *)&v95 + 1) + 8 * v62);
                      int v64 = v50[5];
                      uint64_t v65 = v50[4];
                      if ((int)v65 >= v64)
                      {
                        if (v64 == v50[6])
                        {
                          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v50 + 2), v64 + 1);
                          int v64 = v50[5];
                        }
                        v50[5] = v64 + 1;
                        sub_10146BF80();
                      }
                      uint64_t v66 = *((void *)v50 + 1);
                      v50[4] = v65 + 1;
                      uint64_t v67 = *(void *)(v66 + 8 * v65);
                      if (!v67) {
                        break;
                      }
                      [v63 lat];
                      *(_DWORD *)(v67 + 28) |= 1u;
                      *(void *)(v67 + 8) = v68;
                      [v63 lng];
                      *(_DWORD *)(v67 + 28) |= 2u;
                      *(void *)(v67 + 16) = v69;
                      if (v60 == (id)++v62)
                      {
                        id v60 = [v59 countByEnumeratingWithState:&v95 objects:v111 count:16];
                        if (v60) {
                          goto LABEL_114;
                        }
                        goto LABEL_125;
                      }
                    }
                    if (qword_102418FB0 != -1) {
                      dispatch_once(&qword_102418FB0, &stru_102327560);
                    }
                    uint64_t v81 = qword_102418FB8;
                    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "Invalid track data lane coordinate pointer", buf, 2u);
                    }
                    if (!sub_10013D1A0(115, 0)) {
                      return;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_102418FB0 != -1) {
                      goto LABEL_186;
                    }
                    goto LABEL_177;
                  }
LABEL_125:
                  uint64_t v45 = v83;
                }
                else
                {
                  if (qword_102418FB0 != -1) {
                    dispatch_once(&qword_102418FB0, &stru_102327560);
                  }
                  int v51 = qword_102418FB8;
                  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)std::string buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "Empty lane found in the track data", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102418FB0 != -1) {
                      dispatch_once(&qword_102418FB0, &stru_102327560);
                    }
                    LOWORD(v114) = 0;
                    int v52 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v52);
                    if (v52 != (char *)buf) {
                      free(v52);
                    }
                  }
                }
                if ((id)++v45 == v87)
                {
                  id v87 = [v86 countByEnumeratingWithState:&v99 objects:v112 count:16];
                  if (v87) {
                    goto LABEL_81;
                  }
                  break;
                }
              }
            }
          }
        }
        else
        {
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_102327560);
          }
          BOOL v10 = qword_102418FB8;
          if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Empty track found in the track data array", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FB0 != -1) {
              dispatch_once(&qword_102418FB0, &stru_102327560);
            }
            LOWORD(v114) = 0;
            uint64_t v11 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v11);
            if (v11 != (char *)buf) {
              free(v11);
            }
          }
        }
        uint64_t v3 = v90 + 1;
      }
      while ((id)(v90 + 1) != v91);
      id v77 = [a1 countByEnumeratingWithState:&v107 objects:v120 count:16];
      id v91 = v77;
      if (!v77) {
        return;
      }
    }
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v78 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "Invalid track data message pointer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    LOWORD(v114) = 0;
    int v79 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertGEOMapFeatureRunningTrackArrayToProtobuf(const NSMutableArray *, CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *, const BOOL)", "%s\n", v79);
    goto LABEL_178;
  }
}

void sub_101464B88()
{
}

float sub_101464BD4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    buf[0].__r_.__value_.__r.__words[0] = *(void *)a1;
    uint64_t v4 = sub_1000D8908((uint64_t)buf);
    int v5 = *(_DWORD *)(a2 + 56) | 1;
    *(_DWORD *)(a2 + 56) = v5;
    *(void *)(a2 + 8) = v4;
    if (*(char *)(a1 + 31) < 0)
    {
      sub_1000DC48C(buf, *(void **)(a1 + 8), *(void *)(a1 + 16));
      int v5 = *(_DWORD *)(a2 + 56);
    }
    else
    {
      buf[0] = *(std::string *)(a1 + 8);
    }
    *(_DWORD *)(a2 + 56) = v5 | 2;
    uint64_t v9 = *(std::string **)(a2 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v9, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 56) |= 4u;
    *(_DWORD *)(a2 + 24) = v10;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 36);
    unsigned int v11 = sub_101464EA0((int *)buf);
    if (!sub_100165F14(v11)) {
      sub_101A5F310();
    }
    int v12 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = v12 | 8;
    *(_DWORD *)(a2 + 28) = v11;
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 40);
    float result = *(double *)(a1 + 48);
    *(float *)(a2 + 36) = result;
    char v13 = *(unsigned char *)(a1 + 64);
    *(_DWORD *)(a2 + 56) = v12 | 0x78;
    *(unsigned char *)(a2 + 40) = v13;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v6 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "pWap,Invalid pointer", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v8 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWifiServiceAccessPointToProtobuf(const CLWifiService_Type::AccessPoint &, CLP::LogEntry::PrivateData::WifiAccessPoint *)", "%s\n", (const char *)v8);
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  return result;
}

void sub_101464E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101464EA0(int *a1)
{
  int v1 = *a1 + 1;
  if (v1 < 5) {
    return dword_101E0B904[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled wifi access point mode: %{public}d", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WifiAccessPointMode ConvertCLWifiServiceAccessPointModeToProtobuf(const int &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_101465080(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 88))
    {
      int v2 = *(_DWORD *)(a1 + 40);
      int v3 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v3 | 1;
      *(unsigned char *)(a2 + 16) = v2 > 0;
      if (v2 >= 1)
      {
        *(_DWORD *)(a2 + 24) = v3 | 3;
        uint64_t v4 = *(void *)(a2 + 8);
        if (!v4) {
          operator new();
        }
        sub_101464BD4(a1, v4);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 24) |= 1u;
      *(unsigned char *)(a2 + 16) = 0;
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "pWas,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWifiServiceAssociationStateToProtobuf(const CLWifiService_Type::AssociationState &, CLP::LogEntry::PrivateData::WifiAssociationState *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1014652C8()
{
}

void sub_1014652F4(int *a1, char *a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v6 = sub_101465650(a1);
    if (!sub_1003DE308(v6)) {
      sub_101A5F368();
    }
    int v7 = *(_DWORD *)(a3 + 56);
    int v8 = v7 | 4;
    *(_DWORD *)(a3 + 56) = v7 | 4;
    *(_DWORD *)(a3 + 20) = v6;
    unsigned int v9 = *a1;
    if (*a1 == 3)
    {
      unsigned int v13 = sub_10146582C(a2 + 1);
      if (!sub_1003DE308(v13)) {
        sub_101A5F33C();
      }
      int v8 = *(_DWORD *)(a3 + 56) | 8;
      *(_DWORD *)(a3 + 56) = v8;
      *(_DWORD *)(a3 + 40) = v13;
      unsigned int v9 = *a1;
    }
    else if (v9 == 1)
    {
      char v10 = *a2;
      *(_DWORD *)(a3 + 56) = v7 | 0x14;
      *(unsigned char *)(a3 + 44) = v10;
      return;
    }
    if (v9 <= 7 && ((1 << v9) & 0xC8) != 0)
    {
      *(_DWORD *)(a3 + 56) = v8 | 0x20;
      uint64_t v14 = *(void *)(a3 + 24);
      if (!v14) {
        operator new();
      }
      sub_101465080((uint64_t)(a2 + 8), v14);
      unsigned int v9 = *a1;
    }
    if (v9 == 8 || v9 == 3)
    {
      *(_DWORD *)(a3 + 56) |= 0x40u;
      uint64_t v15 = *(void *)(a3 + 32);
      if (!v15) {
        operator new();
      }
      sub_101465A0C((uint64_t)(a2 + 104), v15);
      unsigned int v9 = *a1;
    }
    if ((v9 & 0xFFFFFFFE) == 0xA)
    {
      char v16 = a2[137];
      *(_DWORD *)(a3 + 56) |= 0x100u;
      *(unsigned char *)(a3 + 46) = v16;
    }
    else if (v9 == 6)
    {
      char v17 = a2[138];
      *(_DWORD *)(a3 + 56) |= 0x200u;
      *(unsigned char *)(a3 + 47) = v17;
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v11 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "pWn,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWifiServiceNotificationToProtobuf(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, CLP::LogEntry::PrivateData::WifiNotification *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_101465610()
{
}

uint64_t sub_101465650(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 < 0xE) {
    return dword_101E0B918[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled wifi service notification type: %{public}d", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WifiNotificationType ConvertCLWifiServiceNotificationTypeToProtobuf(const CLWifiService_Type::Notification &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146582C(char *a1)
{
  uint64_t v1 = *a1 + 1;
  if (v1 < 0xE) {
    return dword_101E0B950[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled wifi scan type: %{public}d", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WifiScanType ConvertCLWifiServiceScanTypeToProtobuf(const CLWifiService_Type::ScanType &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_101465A0C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v13 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "pWsr,Invalid pointer", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 == -1)
    {
LABEL_38:
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWifiServiceScanResultToProtobuf(const CLWifiService_Type::ScanResult &, CLP::LogEntry::PrivateData::WifiScanResult *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return;
    }
LABEL_40:
    dispatch_once(&qword_1024194C0, &stru_102327520);
    goto LABEL_38;
  }
  *(_DWORD *)(a2 + 44) |= 1u;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    operator new();
  }
  if ((sub_1001C1658((double *)a1, v4, 0) & 1) == 0)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      double v6 = *(double *)a1;
      *(_DWORD *)std::string buf = 134349056;
      double v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert wifi scan result applicable CF time to protobuf,%{public}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWifiServiceScanResultToProtobuf(const CLWifiService_Type::ScanResult &, CLP::LogEntry::PrivateData::WifiScanResult *)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v7 != v8)
  {
    while (1)
    {
      int v9 = *(_DWORD *)(a2 + 28);
      uint64_t v10 = *(int *)(a2 + 24);
      if ((int)v10 >= v9)
      {
        if (v9 == *(_DWORD *)(a2 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 16), v9 + 1);
          int v9 = *(_DWORD *)(a2 + 28);
        }
        *(_DWORD *)(a2 + 28) = v9 + 1;
        sub_1009C2AD8();
      }
      uint64_t v11 = *(void *)(a2 + 16);
      *(_DWORD *)(a2 + 24) = v10 + 1;
      uint64_t v12 = *(void *)(v11 + 8 * v10);
      if (!v12) {
        break;
      }
      sub_101464BD4(v7, v12);
      v7 += 88;
      if (v7 == v8) {
        return;
      }
    }
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v14 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "pWap,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 == -1) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
  }
}

void sub_101465F28()
{
}

void sub_101465F54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 48) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    if ((sub_1001C1658((double *)a1, v4, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v5 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert WorkoutEvent start CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
    *(_DWORD *)(a2 + 48) |= 2u;
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      operator new();
    }
    if ((sub_1001C1658((double *)(a1 + 8), v6, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert WorkoutEvent end CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        char v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    *(_DWORD *)(a2 + 48) |= 8u;
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      operator new();
    }
    if ((sub_1001C1658((double *)(a1 + 24), v8, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v9 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error: Failed to convert WorkoutEvent event CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        char v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    unsigned int v10 = sub_1014666A0((uint64_t *)(a1 + 16));
    if (!sub_1003EEB2C(v10)) {
      sub_101A5EF74();
    }
    int v11 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 40) = v10;
    *(_DWORD *)(a2 + 48) = v11 | 0x14;
    uint64_t v12 = *(void *)(a2 + 32);
    if (!v12) {
      operator new();
    }
    sub_101466888(a1 + 64, v12);
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v13 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "pWorkoutEvent,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWorkoutEventToProtobuf(const CLMotionStateMediator_Type::WorkoutEvent &, CLP::LogEntry::PrivateData::WorkoutEvent *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_101466650()
{
}

uint64_t sub_1014666A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (unint64_t)*a1 < 0x17 && ((0x7FFFDFu >> v2)) {
    return dword_101E0B988[v2];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout event type: %{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutEvent::EventType ConvertCMWorkoutEventTypeToProtobuf(const CMWorkoutEvent &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_101466888(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    memset(out, 0, 37);
    memset(__s, 0, 37);
    uuid_unparse((const unsigned __int8 *)a1, (char *)out);
    sub_100134750(&__str, (char *)out);
    *(_DWORD *)(a2 + 40) |= 1u;
    uint64_t v4 = *(std::string **)(a2 + 8);
    if (v4 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v4, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uuid_unparse((const unsigned __int8 *)(a1 + 16), __s);
    sub_100134750(&__str, __s);
    *(_DWORD *)(a2 + 40) |= 2u;
    BOOL v5 = *(std::string **)(a2 + 16);
    if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v5, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    unsigned int v6 = sub_101466BBC((uint64_t *)(a1 + 48));
    if (!sub_1003EE148(v6)) {
      sub_101A5EF48();
    }
    *(_DWORD *)(a2 + 40) |= 4u;
    *(_DWORD *)(a2 + 24) = v6;
    unsigned int v7 = sub_101466D88((uint64_t *)(a1 + 56));
    if (!sub_1001662E0(v7)) {
      sub_101A5EF1C();
    }
    *(_DWORD *)(a2 + 40) |= 8u;
    *(_DWORD *)(a2 + 28) = v7;
    unsigned int v8 = sub_101466F54((uint64_t *)(a1 + 160));
    if (!sub_10016E644(v8)) {
      sub_101A5EEF0();
    }
    *(_DWORD *)(a2 + 40) |= 0x10u;
    *(_DWORD *)(a2 + 32) = v8;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)out = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pWorkoutSettings,Invalid pointer", out, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(out, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      *(_WORD *)__s = 0;
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertWorkoutSettingsToProtobuf(const CLMotionStateMediator_Type::WorkoutSettings &, CLP::LogEntry::PrivateData::WorkoutSettings *)", "%s\n", v10);
      if (v10 != (char *)out) {
        free(v10);
      }
    }
  }
}

void sub_101466B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101466BBC(uint64_t *a1)
{
  if ((unint64_t)*a1 < 0x42) {
    return *a1 + 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout type: %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutSettings::WorkoutType ConvertCMWorkoutTypeToProtobuf(const CMWorkoutType &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 27;
}

uint64_t sub_101466D88(uint64_t *a1)
{
  if ((unint64_t)*a1 < 4) {
    return *a1 + 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout location type: %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutSettings::WorkoutLocationType ConvertCMWorkoutLocationTypeToProtobuf(const CMWorkoutLocationType &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 1;
}

uint64_t sub_101466F54(uint64_t *a1)
{
  if (!*a1) {
    return 1;
  }
  if (*a1 == 1) {
    return 2;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled workout mode: %{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WorkoutSettings::WorkoutMode ConvertCMWorkoutModeToProtobuf(const CMWorkoutMode &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

void sub_101467134(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v4 = sub_1001647E0((unsigned int *)(a1 + 8));
    if ((sub_100164354(v4) & 1) == 0) {
      sub_101A5EEC4();
    }
    int v5 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 36) = v5 | 5;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      operator new();
    }
    if ((sub_1001C1658((double *)a1, v6, 0) & 1) == 0)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error: Failed to convert CLWorkoutUpdate start CF time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWorkoutUpdateToProtobuf(const CLWorkoutUpdate &, CLP::LogEntry::PrivateData::WorkoutUpdate *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    int v8 = sub_1001647E0((unsigned int *)(a1 + 12));
    if ((sub_100164354(v8) & 1) == 0) {
      sub_101A5EE98();
    }
    *(_DWORD *)(a2 + 36) |= 8u;
    *(_DWORD *)(a2 + 20) = v8;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v9 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "pWorkoutUpdate,Invalid pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLWorkoutUpdateToProtobuf(const CLWorkoutUpdate &, CLP::LogEntry::PrivateData::WorkoutUpdate *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1014674D0()
{
}

std::string *sub_1014674FC(unsigned __int16 *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 0u:
      uint64_t v4 = a2;
      unsigned int v5 = 1;
      goto LABEL_84;
    case 1u:
      uint64_t v4 = a2;
      unsigned int v5 = 2;
      goto LABEL_84;
    case 2u:
      uint64_t v4 = a2;
      unsigned int v5 = 8;
      goto LABEL_84;
    case 3u:
      uint64_t v4 = a2;
      unsigned int v5 = 9;
      goto LABEL_84;
    case 4u:
      uint64_t v4 = a2;
      unsigned int v5 = 10;
      goto LABEL_84;
    case 5u:
      uint64_t v4 = a2;
      unsigned int v5 = 11;
      goto LABEL_84;
    case 6u:
      uint64_t v4 = a2;
      unsigned int v5 = 12;
      goto LABEL_84;
    case 7u:
      uint64_t v4 = a2;
      unsigned int v5 = 13;
      goto LABEL_84;
    case 8u:
      uint64_t v4 = a2;
      unsigned int v5 = 14;
      goto LABEL_84;
    case 9u:
      uint64_t v4 = a2;
      unsigned int v5 = 15;
      goto LABEL_84;
    case 0xAu:
      uint64_t v4 = a2;
      unsigned int v5 = 16;
      goto LABEL_84;
    case 0xBu:
      uint64_t v4 = a2;
      unsigned int v5 = 17;
      goto LABEL_84;
    case 0xCu:
      uint64_t v4 = a2;
      unsigned int v5 = 18;
      goto LABEL_84;
    case 0xDu:
      uint64_t v4 = a2;
      unsigned int v5 = 19;
      goto LABEL_84;
    case 0xEu:
      uint64_t v4 = a2;
      unsigned int v5 = 20;
      goto LABEL_84;
    case 0xFu:
      uint64_t v4 = a2;
      unsigned int v5 = 21;
      goto LABEL_84;
    case 0x10u:
      uint64_t v4 = a2;
      unsigned int v5 = 22;
      goto LABEL_84;
    case 0x11u:
      uint64_t v4 = a2;
      unsigned int v5 = 23;
      goto LABEL_84;
    case 0x12u:
      uint64_t v4 = a2;
      unsigned int v5 = 24;
      goto LABEL_84;
    case 0x13u:
      uint64_t v4 = a2;
      unsigned int v5 = 25;
      goto LABEL_84;
    case 0x14u:
      uint64_t v4 = a2;
      unsigned int v5 = 26;
      goto LABEL_84;
    case 0x15u:
      uint64_t v4 = a2;
      unsigned int v5 = 27;
      goto LABEL_84;
    case 0x16u:
      uint64_t v4 = a2;
      unsigned int v5 = 28;
      goto LABEL_84;
    case 0x17u:
      uint64_t v4 = a2;
      unsigned int v5 = 29;
      goto LABEL_84;
    case 0x18u:
      uint64_t v4 = a2;
      unsigned int v5 = 30;
      goto LABEL_84;
    case 0x19u:
      uint64_t v4 = a2;
      unsigned int v5 = 31;
      goto LABEL_84;
    case 0x1Au:
      uint64_t v4 = a2;
      unsigned int v5 = 32;
      goto LABEL_84;
    case 0x1Bu:
      uint64_t v4 = a2;
      unsigned int v5 = 33;
      goto LABEL_84;
    case 0x1Cu:
      uint64_t v4 = a2;
      unsigned int v5 = 34;
      goto LABEL_84;
    case 0x1Du:
      uint64_t v4 = a2;
      unsigned int v5 = 35;
      goto LABEL_84;
    case 0x1Eu:
      uint64_t v4 = a2;
      unsigned int v5 = 36;
      goto LABEL_84;
    case 0x1Fu:
      uint64_t v4 = a2;
      unsigned int v5 = 37;
      goto LABEL_84;
    case 0x20u:
      uint64_t v4 = a2;
      unsigned int v5 = 38;
      goto LABEL_84;
    case 0x21u:
      uint64_t v4 = a2;
      unsigned int v5 = 39;
      goto LABEL_84;
    case 0x22u:
      uint64_t v4 = a2;
      unsigned int v5 = 40;
      goto LABEL_84;
    case 0x23u:
      uint64_t v4 = a2;
      unsigned int v5 = 41;
      goto LABEL_84;
    case 0x24u:
      uint64_t v4 = a2;
      unsigned int v5 = 42;
      goto LABEL_84;
    case 0x25u:
      uint64_t v4 = a2;
      unsigned int v5 = 43;
      goto LABEL_84;
    case 0x26u:
      uint64_t v4 = a2;
      unsigned int v5 = 44;
      goto LABEL_84;
    case 0x27u:
      uint64_t v4 = a2;
      unsigned int v5 = 45;
      goto LABEL_84;
    case 0x28u:
      uint64_t v4 = a2;
      unsigned int v5 = 47;
      goto LABEL_84;
    case 0x29u:
      uint64_t v4 = a2;
      unsigned int v5 = 51;
      goto LABEL_84;
    case 0x2Au:
      uint64_t v4 = a2;
      unsigned int v5 = 46;
      goto LABEL_84;
    case 0x2Bu:
      uint64_t v4 = a2;
      unsigned int v5 = 52;
      goto LABEL_84;
    case 0x2Cu:
      uint64_t v4 = a2;
      unsigned int v5 = 53;
      goto LABEL_84;
    case 0x2Du:
      uint64_t v4 = a2;
      unsigned int v5 = 54;
      goto LABEL_84;
    case 0x2Eu:
      uint64_t v4 = a2;
      unsigned int v5 = 56;
      goto LABEL_84;
    case 0x2Fu:
      uint64_t v4 = a2;
      unsigned int v5 = 59;
      goto LABEL_84;
    case 0x30u:
      uint64_t v4 = a2;
      unsigned int v5 = 60;
      goto LABEL_84;
    case 0x31u:
      uint64_t v4 = a2;
      unsigned int v5 = 61;
      goto LABEL_84;
    case 0x32u:
      uint64_t v4 = a2;
      unsigned int v5 = 62;
      goto LABEL_84;
    case 0x33u:
      uint64_t v4 = a2;
      unsigned int v5 = 63;
      goto LABEL_84;
    case 0x34u:
      uint64_t v4 = a2;
      unsigned int v5 = 64;
      goto LABEL_84;
    case 0x35u:
      uint64_t v4 = a2;
      unsigned int v5 = 65;
      goto LABEL_84;
    case 0x36u:
      uint64_t v4 = a2;
      unsigned int v5 = 68;
      goto LABEL_84;
    case 0x37u:
      uint64_t v4 = a2;
      unsigned int v5 = 69;
      goto LABEL_84;
    case 0x38u:
      uint64_t v4 = a2;
      unsigned int v5 = 66;
      goto LABEL_84;
    case 0x39u:
      uint64_t v4 = a2;
      unsigned int v5 = 67;
      goto LABEL_84;
    case 0x3Au:
      uint64_t v4 = a2;
      unsigned int v5 = 70;
      goto LABEL_84;
    case 0x3Bu:
      uint64_t v4 = a2;
      unsigned int v5 = 71;
      goto LABEL_84;
    case 0x3Cu:
      uint64_t v4 = a2;
      unsigned int v5 = 72;
      goto LABEL_84;
    case 0x3Du:
      uint64_t v4 = a2;
      unsigned int v5 = 73;
      goto LABEL_84;
    case 0x3Eu:
      uint64_t v4 = a2;
      unsigned int v5 = 74;
      goto LABEL_84;
    case 0x3Fu:
      uint64_t v4 = a2;
      unsigned int v5 = 75;
      goto LABEL_84;
    case 0x40u:
      uint64_t v4 = a2;
      unsigned int v5 = 76;
      goto LABEL_84;
    case 0x41u:
      uint64_t v4 = a2;
      unsigned int v5 = 77;
      goto LABEL_84;
    case 0x42u:
      uint64_t v4 = a2;
      unsigned int v5 = 78;
      goto LABEL_84;
    case 0x43u:
      uint64_t v4 = a2;
      unsigned int v5 = 79;
      goto LABEL_84;
    case 0x44u:
      uint64_t v4 = a2;
      unsigned int v5 = 80;
      goto LABEL_84;
    case 0x45u:
      uint64_t v4 = a2;
      unsigned int v5 = 81;
      goto LABEL_84;
    case 0x46u:
      uint64_t v4 = a2;
      unsigned int v5 = 82;
      goto LABEL_84;
    case 0x47u:
      uint64_t v4 = a2;
      unsigned int v5 = 83;
      goto LABEL_84;
    case 0x48u:
      uint64_t v4 = a2;
      unsigned int v5 = 84;
      goto LABEL_84;
    case 0x49u:
      uint64_t v4 = a2;
      unsigned int v5 = 85;
      goto LABEL_84;
    case 0x4Au:
      uint64_t v4 = a2;
      unsigned int v5 = 86;
      goto LABEL_84;
    case 0x4Bu:
      uint64_t v4 = a2;
      unsigned int v5 = 100;
LABEL_84:
      sub_101467FF8(v4, v5);
      break;
    default:
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v6 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        int v7 = *a1;
        *(_DWORD *)std::string buf = 67240192;
        int v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unhandled HW %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertRavenPlatformInfoToProtobuf(const raven::RavenPlatformInfo &, CLP::LogEntry::Raven::RavenPlatformInfo *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      sub_101467FF8(a2, 0);
      break;
  }
  int v8 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a2 + 20) = *((unsigned char *)a1 + 2);
  *(_DWORD *)(a2 + 52) = v8 | 0xC;
  int v9 = *(std::string **)(a2 + 24);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v9, (const std::string *)(a1 + 4));
  *(_DWORD *)(a2 + 52) |= 0x10u;
  unsigned int v10 = *(std::string **)(a2 + 32);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  uint64_t result = std::string::operator=(v10, (const std::string *)(a1 + 16));
  int v12 = *((_DWORD *)a1 + 14);
  switch(v12)
  {
    case 0:
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      unsigned int v13 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        int v14 = *a1;
        *(_DWORD *)std::string buf = 67240192;
        int v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unknown category on HW %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertRavenPlatformInfoToProtobuf(const raven::RavenPlatformInfo &, CLP::LogEntry::Raven::RavenPlatformInfo *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      uint64_t result = (std::string *)sub_100165F14(0);
      if ((result & 1) == 0) {
        sub_101A78EBC();
      }
      goto LABEL_102;
    case 1:
      uint64_t result = (std::string *)sub_100165F14(1u);
      if ((result & 1) == 0) {
        sub_101A78EBC();
      }
      goto LABEL_102;
    case 2:
      uint64_t result = (std::string *)sub_100165F14(2u);
      if ((result & 1) == 0) {
        sub_101A78EBC();
      }
      goto LABEL_102;
    case 3:
      uint64_t result = (std::string *)sub_100165F14(3u);
      if ((result & 1) == 0) {
        sub_101A78EBC();
      }
LABEL_102:
      *(_DWORD *)(a2 + 52) |= 0x20u;
      *(_DWORD *)(a2 + 40) = v12;
      break;
    default:
      break;
  }
  int v15 = *((_DWORD *)a1 + 15);
  if (v15 == 2)
  {
    uint64_t result = (std::string *)sub_10016E644(2u);
    if ((result & 1) == 0) {
      sub_101A78E90();
    }
  }
  else if (v15 == 1)
  {
    uint64_t result = (std::string *)sub_10016E644(1u);
    if ((result & 1) == 0) {
      sub_101A78E90();
    }
  }
  else
  {
    if (v15) {
      return result;
    }
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    char v16 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v17 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v22 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unknown band support on HW %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertRavenPlatformInfoToProtobuf(const raven::RavenPlatformInfo &, CLP::LogEntry::Raven::RavenPlatformInfo *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t result = (std::string *)sub_10016E644(0);
    if ((result & 1) == 0) {
      sub_101A78E90();
    }
  }
  *(_DWORD *)(a2 + 52) |= 0x40u;
  *(_DWORD *)(a2 + 44) = v15;
  return result;
}

uint64_t sub_101467FF8(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_100A14C08(a2);
  if ((result & 1) == 0) {
    sub_101A78EE8();
  }
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_DWORD *)(a1 + 16) = a2;
  return result;
}

void sub_10146803C(uint64_t a1, char a2)
{
  if (sub_10073FAFC()) {
    unsigned int v4 = 2;
  }
  else {
    unsigned int v4 = 1;
  }
  if (!sub_10016E644(v4)) {
    sub_101A78E90();
  }
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v4;
  sub_100103240();
  LODWORD(buf.__r_.__value_.__l.__data_) = sub_1000B5AD4();
  unsigned int v5 = sub_101468674((int *)&buf, a2);
  if ((sub_100A14C08(v5) & 1) == 0) {
    sub_101A78EE8();
  }
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_DWORD *)(a1 + 16) = v5;
  if (sub_10010145C())
  {
    int v6 = 3;
    if (!sub_100165F14(3u)) {
      sub_101A78EBC();
    }
  }
  else if (sub_10016CCBC())
  {
    int v6 = 1;
    if (!sub_100165F14(1u)) {
      sub_101A78EBC();
    }
  }
  else if (sub_1001B7C64())
  {
    int v6 = 2;
    if (!sub_100165F14(2u)) {
      sub_101A78EBC();
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v7 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CN platform info creation on unknown category", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      *(_WORD *)id v24 = 0;
      uint64_t v19 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCLPlatformInfoToProtobuf(CLP::LogEntry::Raven::RavenPlatformInfo *, const BOOL)", "%s\n", (const char *)v19);
      if (v19 != &buf) {
        free(v19);
      }
    }
    if (!sub_100165F14(0)) {
      sub_101A78EBC();
    }
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 52) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v6;
  sub_100103240();
  char v8 = sub_10073E30C();
  *(_DWORD *)(a1 + 52) |= 4u;
  *(unsigned char *)(a1 + 20) = v8;
  sub_100103240();
  sub_10073B95C((uint64_t)&buf);
  *(_DWORD *)(a1 + 52) |= 8u;
  int v9 = *(std::string **)(a1 + 24);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v9, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  sub_100103240();
  sub_10073ADA8((uint64_t)&buf);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  unsigned int v10 = *(std::string **)(a1 + 32);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v10, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v11 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
  {
    sub_100103240();
    int v12 = v24;
    sub_10073ADA8((uint64_t)v24);
    if (v27 < 0) {
      int v12 = *(unsigned char **)v24;
    }
    sub_100103240();
    unsigned int v13 = __p;
    sub_10073B95C((uint64_t)__p);
    if (v23 < 0) {
      unsigned int v13 = (void **)__p[0];
    }
    sub_100103240();
    int v14 = sub_10073E30C();
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
    int v30 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "convert CN plaform info: system version, %{public}s, serial number, %{public}s, isInternal, %{public}d", (uint8_t *)&buf, 0x1Cu);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(*(void **)v24);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    sub_100103240();
    int v15 = __p;
    sub_10073ADA8((uint64_t)__p);
    if (v23 < 0) {
      int v15 = (void **)__p[0];
    }
    sub_100103240();
    char v16 = v20;
    sub_10073B95C((uint64_t)v20);
    if (v21 < 0) {
      char v16 = (void **)v20[0];
    }
    sub_100103240();
    int v17 = sub_10073E30C();
    *(_DWORD *)id v24 = 136446722;
    *(void *)&v24[4] = v15;
    __int16 v25 = 2082;
    id v26 = v16;
    __int16 v27 = 1026;
    int v28 = v17;
    double v18 = (std::string *)_os_log_send_and_compose_impl();
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void ConvertCLPlatformInfoToProtobuf(CLP::LogEntry::Raven::RavenPlatformInfo *, const BOOL)", "%s\n", (const char *)v18);
    if (v18 != &buf) {
      free(v18);
    }
  }
}

void sub_1014685F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101468674(int *a1, char a2)
{
  if (a2)
  {
    int v3 = *a1 - 78;
    uint64_t result = 8;
    switch(v3)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = 9;
        break;
      case 2:
        uint64_t result = 10;
        break;
      case 4:
        uint64_t result = 21;
        break;
      case 6:
        uint64_t result = 22;
        break;
      case 8:
        uint64_t result = 23;
        break;
      case 10:
        uint64_t result = 24;
        break;
      case 11:
        uint64_t result = 25;
        break;
      case 12:
        uint64_t result = 26;
        break;
      case 13:
        uint64_t result = 27;
        break;
      case 14:
        uint64_t result = 28;
        break;
      case 17:
        uint64_t result = 29;
        break;
      case 18:
        uint64_t result = 30;
        break;
      case 19:
        uint64_t result = 31;
        break;
      case 20:
        uint64_t result = 32;
        break;
      case 21:
        uint64_t result = 33;
        break;
      case 22:
        uint64_t result = 34;
        break;
      case 23:
        uint64_t result = 35;
        break;
      case 24:
        uint64_t result = 36;
        break;
      case 25:
        uint64_t result = 37;
        break;
      case 26:
        uint64_t result = 38;
        break;
      case 27:
        uint64_t result = 39;
        break;
      case 28:
        uint64_t result = 40;
        break;
      case 29:
      case 30:
        uint64_t result = 72;
        break;
      case 31:
      case 32:
        uint64_t result = 73;
        break;
      case 33:
      case 34:
        uint64_t result = 74;
        break;
      case 35:
      case 36:
        uint64_t result = 75;
        break;
      case 37:
        uint64_t result = 76;
        break;
      case 38:
      case 39:
        uint64_t result = 79;
        break;
      case 40:
      case 41:
        uint64_t result = 80;
        break;
      case 42:
      case 43:
        uint64_t result = 84;
        break;
      case 44:
      case 45:
        uint64_t result = 85;
        break;
      case 46:
        uint64_t result = 81;
        break;
      case 47:
        uint64_t result = 86;
        break;
      case 61:
        uint64_t result = 11;
        break;
      case 63:
        uint64_t result = 12;
        break;
      case 64:
        uint64_t result = 14;
        break;
      case 65:
        uint64_t result = 13;
        break;
      case 90:
        uint64_t result = 15;
        break;
      case 91:
        uint64_t result = 16;
        break;
      case 92:
        uint64_t result = 18;
        break;
      case 93:
        uint64_t result = 17;
        break;
      case 94:
        uint64_t result = 43;
        break;
      case 95:
        uint64_t result = 44;
        break;
      case 96:
      case 97:
        uint64_t result = 100;
        break;
      case 98:
        uint64_t result = 41;
        break;
      case 99:
        uint64_t result = 42;
        break;
      case 100:
        uint64_t result = 70;
        break;
      case 101:
        uint64_t result = 71;
        break;
      case 102:
        uint64_t result = 77;
        break;
      case 103:
        uint64_t result = 78;
        break;
      case 104:
        uint64_t result = 82;
        break;
      case 105:
        uint64_t result = 83;
        break;
      case 111:
        uint64_t result = 45;
        break;
      case 120:
        uint64_t result = 19;
        break;
      case 122:
        uint64_t result = 20;
        break;
      case 128:
        uint64_t result = 51;
        break;
      case 132:
        uint64_t result = 47;
        break;
      case 136:
        uint64_t result = 68;
        break;
      case 138:
        uint64_t result = 69;
        break;
      case 141:
        uint64_t result = 46;
        break;
      case 142:
        uint64_t result = 52;
        break;
      case 143:
        uint64_t result = 53;
        break;
      case 144:
        uint64_t result = 62;
        break;
      case 145:
        uint64_t result = 63;
        break;
      case 146:
        uint64_t result = 66;
        break;
      case 147:
        uint64_t result = 67;
        break;
      case 150:
        uint64_t result = 54;
        break;
      case 152:
        uint64_t result = 56;
        break;
      case 154:
        uint64_t result = 64;
        break;
      case 156:
        uint64_t result = 65;
        break;
      case 162:
        uint64_t result = 60;
        break;
      case 163:
        uint64_t result = 61;
        break;
      case 165:
        uint64_t result = 59;
        break;
      default:
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        int v7 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
        {
          int v8 = *a1;
          *(_DWORD *)std::string buf = 67240192;
          int v12 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unhandled HW %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102327520);
          }
          unsigned int v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::Raven::RavenPlatformInfo::Hardware ConvertCLPlatformInfoHardwareToProtobuf(const CLPlatformInfo::Hardware &, const BOOL)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        uint64_t result = 2;
        break;
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    unsigned int v5 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unsupported hardware detected, type: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::Raven::RavenPlatformInfo::Hardware ConvertCLPlatformInfoHardwareToProtobuf(const CLPlatformInfo::Hardware &, const BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return 1;
  }
  return result;
}

unint64_t sub_101468E9C(int *a1, int *a2)
{
  unint64_t result = sub_1010FB9FC(a1);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      sub_1010FB258((uint64_t)a1, i, (uint64_t)v14);
      int v6 = a2[5];
      uint64_t v7 = a2[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v6 + 1);
          int v6 = a2[5];
        }
        a2[5] = v6 + 1;
        sub_10146C4DC();
      }
      uint64_t v8 = *((void *)a2 + 1);
      a2[4] = v7 + 1;
      sub_10016D01C((uint64_t)v14, *(void *)(v8 + 8 * v7));
      sub_1010FB770((uint64_t)a1, i, (uint64_t)v12);
      int v9 = a2[11];
      uint64_t v10 = a2[10];
      if ((int)v10 >= v9)
      {
        if (v9 == a2[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v9 + 1);
          int v9 = a2[11];
        }
        a2[11] = v9 + 1;
        sub_100416DDC();
      }
      uint64_t v11 = *((void *)a2 + 4);
      a2[10] = v10 + 1;
      sub_10016DE1C((uint64_t)v12, *(void *)(v11 + 8 * v10));
      if (v13) {
        sub_1000DB0A0(v13);
      }
      unint64_t result = sub_1010FB9FC(a1);
    }
  }
  return result;
}

void sub_101469004(_Unwind_Exception *a1)
{
  if (STACK[0x210]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x210]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10146901C(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 < 0xC) {
    return dword_101E0B9E4[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  unsigned int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertBluetoothServiceNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::BluetoothServiceNotification_NotificationType ConvertBluetoothServiceNotificationTypeToProtobuf(const CLBluetoothService_Type::Notification &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

BOOL sub_1014691F0(std::string *__str, uint64_t a2)
{
  unsigned int v4 = (const std::string *)&__str->__r_.__value_.__r.__words[1];
  int v5 = *(_DWORD *)(a2 + 56);
  *(void *)(a2 + 8) = __str->__r_.__value_.__r.__words[0];
  *(_DWORD *)(a2 + 56) = v5 | 3;
  int v6 = *(std::string **)(a2 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v6, v4);
  *(_DWORD *)(a2 + 56) |= 4u;
  uint64_t v7 = *(std::string **)(a2 + 24);
  if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v7, (std::string *)((char *)__str + 32));
  *(_DWORD *)(a2 + 56) |= 8u;
  int v8 = *(std::string **)(a2 + 32);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v8, (std::string *)((char *)__str + 56));
  int v9 = __str[3].__r_.__value_.__r.__words[1];
  int v10 = HIDWORD(__str[3].__r_.__value_.__r.__words[1]);
  *(_DWORD *)(a2 + 56) |= 0x10u;
  *(_DWORD *)(a2 + 40) = v9;
  if (v10 == 22) {
    int v11 = 22;
  }
  else {
    int v11 = 0;
  }
  if (v10 == 17) {
    unsigned int v12 = 17;
  }
  else {
    unsigned int v12 = v11;
  }
  BOOL result = sub_100F1B210(v12);
  if (!result) {
    sub_101A96914();
  }
  int v14 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 44) = v12;
  std::string::value_type v15 = __str[4].__r_.__value_.__s.__data_[0];
  *(_DWORD *)(a2 + 56) = v14 | 0x60;
  *(unsigned char *)(a2 + 48) = v15;
  return result;
}

uint64_t sub_101469350(int *a1)
{
  uint64_t v2 = *a1;
  if v2 < 0xE && ((0x3FF9u >> v2)) {
    return dword_101E0BA14[v2];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertCompanionNotifierNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::CompanionNotifierNotification_NotificationType ConvertCompanionNotifierNotificationTypeToProtobuf(const CLCompanionNotifier_Type::Notification &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146952C(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 < 0x12) {
    return dword_101E0BA4C[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertDaemonStatusNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::DeviceStatus_NotificationType ConvertDaemonStatusNotificationTypeToProtobuf(const CLDaemonStatus_Type::Notification &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

void sub_101469700(int *a1, char *a2, uint64_t a3)
{
  unsigned int v6 = sub_10146952C(a1);
  if (!sub_1003FAC70(v6)) {
    sub_101A9680C();
  }
  int v7 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 28) = v7 | 2;
  *(_DWORD *)(a3 + 12) = v6;
  switch(*a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
    case 12:
    case 16:
    case 17:
    case 18:
    case 19:
      return;
    case 6:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v25 = *(void *)(a3 + 16);
      if (!v25) {
        operator new();
      }
      *(_DWORD *)(v25 + 44) |= 1u;
      uint64_t v26 = *(void *)(v25 + 8);
      if (!v26) {
        operator new();
      }
      sub_101469D08((BOOL)a2, v26);
      break;
    case 7:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v10 = *(void *)(a3 + 16);
      if (!v10) {
        operator new();
      }
      *(_DWORD *)(v10 + 44) |= 2u;
      uint64_t v11 = *(void *)(v10 + 16);
      if (!v11) {
        operator new();
      }
      sub_101469D8C((uint64_t)a2, v11);
      break;
    case 8:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v19 = *(void *)(a3 + 16);
      if (!v19) {
        operator new();
      }
      char v20 = *a2;
      *(_DWORD *)(v19 + 44) |= 4u;
      *(unsigned char *)(v19 + 24) = v20;
      break;
    case 10:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v8 = *(void *)(a3 + 16);
      if (!v8) {
        operator new();
      }
      char v9 = *a2;
      *(_DWORD *)(v8 + 44) |= 8u;
      *(unsigned char *)(v8 + 25) = v9;
      break;
    case 11:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v23 = *(void *)(a3 + 16);
      if (!v23) {
        operator new();
      }
      char v24 = *a2;
      *(_DWORD *)(v23 + 44) |= 0x10u;
      *(unsigned char *)(v23 + 26) = v24;
      break;
    case 13:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v12 = *(void *)(a3 + 16);
      if (!v12) {
        operator new();
      }
      int v13 = *(_DWORD *)a2;
      *(_DWORD *)(v12 + 44) |= 0x80u;
      *(_DWORD *)(v12 + 32) = v13;
      break;
    case 14:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v17 = *(void *)(a3 + 16);
      if (!v17) {
        operator new();
      }
      char v18 = *a2;
      *(_DWORD *)(v17 + 44) |= 0x100u;
      *(unsigned char *)(v17 + 36) = v18;
      break;
    case 15:
      *(_DWORD *)(a3 + 28) = v7 | 6;
      uint64_t v21 = *(void *)(a3 + 16);
      if (!v21) {
        operator new();
      }
      char v22 = *a2;
      *(_DWORD *)(v21 + 44) |= 0x20u;
      *(unsigned char *)(v21 + 27) = v22;
      break;
    default:
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      int v14 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        int v15 = *a1;
        *(_DWORD *)std::string buf = 67240192;
        int v28 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "ConvertDaemonStatusNotificationToProtobuf,unhandled type,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102327520);
        }
        char v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertDaemonStatusNotificationToProtobuf(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, CLP::LogEntry::PrivateData::DaemonStatusNotification *)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      break;
  }
}

void sub_101469C40()
{
}

BOOL sub_101469D08(BOOL result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = sub_10146A418((int *)result);
    if (!sub_1003DE2F0(v4)) {
      sub_101A5F100();
    }
    *(_DWORD *)(a2 + 24) |= 1u;
    *(_DWORD *)(a2 + 8) = v4;
    unsigned int v5 = sub_10146A418((int *)(v3 + 4));
    uint64_t result = sub_1003DE2F0(v5);
    if (!result) {
      sub_101A5F0D4();
    }
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 12) = v5;
    *(_WORD *)(a2 + 16) = *(_WORD *)(v3 + 8);
    *(_DWORD *)(a2 + 24) = v6 | 0xE;
  }
  return result;
}

uint64_t sub_101469D8C(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(a2 + 32);
    *(void *)(a2 + 8) = *(void *)result;
    *(_WORD *)(a2 + 16) = *(_WORD *)(result + 8);
    *(_DWORD *)(a2 + 32) = v4 | 7;
    unsigned int v5 = sub_10146A618((unsigned int *)(result + 12));
    uint64_t result = sub_1001662E0(v5);
    if ((result & 1) == 0) {
      sub_101A5F12C();
    }
    int v6 = *(_DWORD *)(a2 + 32);
    char v7 = *(unsigned char *)(v3 + 16);
    *(_DWORD *)(a2 + 32) = v6 | 0x18;
    *(unsigned char *)(a2 + 18) = v7;
    int v8 = *(_DWORD *)(v3 + 20);
    *(_DWORD *)(a2 + 32) = v6 | 0x38;
    *(_DWORD *)(a2 + 20) = v5;
    *(_DWORD *)(a2 + 24) = v8;
  }
  return result;
}

uint64_t sub_101469E14(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 < 3) {
    return dword_101E0BA94[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertGnssModeOfOperationToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::GnssModeOfOperation ConvertGnssModeOfOperationToProtobuf(const CLLocationProvider_Type::GnssModeOfOperation &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_101469FE8(int *a1)
{
  if ((*a1 + 1) < 4) {
    return (*a1 + 2);
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertGnssRhythmicModeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::RhythmicGnssWakeMode ConvertGnssRhythmicModeToProtobuf(const CLRhythmicGnssWakeMode &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

BOOL sub_10146A1B8(BOOL result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = sub_101469E14((int *)result);
    if (!sub_10016E644(v4)) {
      sub_101A5ED0C();
    }
    int v5 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 8) = v4;
    char v6 = *(unsigned char *)(v3 + 4);
    *(_DWORD *)(a2 + 28) = v5 | 3;
    *(unsigned char *)(a2 + 16) = v6;
    unsigned int v7 = sub_101469FE8((int *)(v3 + 8));
    uint64_t result = sub_1001662E0(v7);
    if (!result) {
      sub_101A5ECE0();
    }
    int v8 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 12) = v7;
    *(_DWORD *)(a2 + 20) = *(void *)(v3 + 16);
    char v9 = *(unsigned char *)(v3 + 24);
    *(_DWORD *)(a2 + 28) = v8 | 0x1C;
    *(unsigned char *)(a2 + 17) = v9;
  }
  return result;
}

uint64_t sub_10146A24C(int *a1)
{
  if (*a1 < 6) {
    return (*a1 + 1);
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  uint64_t v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertClientSatelliteConstellationToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::ClientSatelliteConstellation ConvertClientSatelliteConstellationToProtobuf(const CLClientSatelliteConstellation &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146A418(int *a1)
{
  int v2 = *a1;
  if (*a1 > 1)
  {
    if (v2 == 2) {
      return 3;
    }
    if (v2 == 1000) {
      return 1001;
    }
  }
  else
  {
    if (!v2) {
      return 1;
    }
    if (v2 == 1) {
      return 2;
    }
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertReachabilityTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::ReachabilityType ConvertReachabilityTypeToProtobuf(const CLDaemonStatus_Type::Reachability &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146A618(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result >= 5)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertBatteryChargerTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::BatteryChargerType ConvertBatteryChargerTypeToProtobuf(const CLBatteryChargerType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10146A7E4(int *a1)
{
  if (!*a1) {
    return 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v2 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ConvertSignalEnvironmentNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::SignalEnvironmentNotification_NotificationType ConvertSignalEnvironmentNotificationTypeToProtobuf(const CLSignalEnvironmentProvider_Type::Notification &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146A9A8(int *a1)
{
  if (*a1 < 3) {
    return (*a1 + 1);
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertSignalEnvironmentFidelityLevelTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::SignalEnvironmentFidelityLevel ConvertSignalEnvironmentFidelityLevelTypeToProtobuf(const CLSignalEnvironmentProvider_Type::SignalEnvironmentFidelityLevel &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146AB74(int *a1)
{
  if (*a1 < 4) {
    return (*a1 + 1);
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertMotionStateNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::MotionStateNotification_NotificationType ConvertMotionStateNotificationTypeToProtobuf(const CLMotionState_Type::Notification &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

double sub_10146AD40(unsigned int a1, uint64_t a2, int16x8_t a3)
{
  int v3 = *(_DWORD *)(a2 + 24);
  *(int16x4_t *)a3.i8 = vdup_n_s16(a1);
  *(unsigned char *)(a2 + 8) = a1 & 1;
  a3.i32[0] &= 0xFF00FFu;
  a3.i16[2] = a3.u8[4];
  a3.i16[3] = a3.u8[6];
  *(uint16x4_t *)a3.i8 = vshl_u16(*(uint16x4_t *)a3.i8, (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
  a3.i32[0] &= 0xFF01FF01;
  a3.i16[2] &= 0xFF01u;
  a3.i16[3] &= 0xFF01u;
  *(int8x8_t *)a3.i8 = vmovn_s16(a3);
  *(_DWORD *)(a2 + 9) = a3.i32[0];
  *(unsigned char *)(a2 + 13) = (a1 & 0x20) != 0;
  *(unsigned char *)(a2 + 14) = (a1 & 0x40) != 0;
  *(unsigned char *)(a2 + 15) = (a1 & 0x80) != 0;
  *(_DWORD *)(a2 + 24) = v3 | 0x1FF;
  *(unsigned char *)(a2 + 16) = BYTE1(a1) & 1;
  return *(double *)a3.i64;
}

uint64_t sub_10146AD98(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result >= 3)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertFenceEnvironmentTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::FenceEnvironmentType ConvertFenceEnvironmentTypeToProtobuf(const CLFenceManager_Type::FenceEnvironmentType &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10146AF5C(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result >= 5)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    int v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertFenceLocationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      BOOL v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::FenceLocationType ConvertFenceLocationTypeToProtobuf(const CLFenceManager_Type::FenceLocationType &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10146B120(uint64_t a1, uint64_t a2)
{
  int v4 = (const std::string *)(a1 + 24);
  *(_DWORD *)(a2 + 80) |= 1u;
  BOOL v5 = *(std::string **)(a2 + 8);
  if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v5, v4);
  *(_DWORD *)(a2 + 80) |= 2u;
  char v6 = *(std::string **)(a2 + 16);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v6, (const std::string *)a1);
  int v7 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 72);
  int16x8_t v8 = *(int16x8_t *)(a1 + 88);
  *(int16x8_t *)(a2 + 40) = v8;
  uint64_t v9 = *(void *)(a1 + 160);
  *(_DWORD *)(a2 + 80) = v7 | 0x7C;
  uint64_t v10 = *(void *)(a2 + 56);
  if (!v10) {
    operator new();
  }
  sub_10146AD40(v9, v10, v8);
  unsigned int v11 = sub_10146AD98((unsigned int *)(a1 + 168));
  if (!sub_10016E644(v11)) {
    sub_101A760D8();
  }
  *(_DWORD *)(a2 + 80) |= 0x80u;
  *(_DWORD *)(a2 + 64) = v11;
  unsigned int v12 = sub_10146AF5C((unsigned int *)(a1 + 172));
  BOOL result = sub_1001662E0(v12);
  if (!result) {
    sub_101A760AC();
  }
  *(_DWORD *)(a2 + 80) |= 0x100u;
  *(_DWORD *)(a2 + 68) = v12;
  return result;
}

void sub_10146B288()
{
}

uint64_t sub_10146B2AC(int *a1)
{
  int v1 = *a1 + 1;
  if (v1 < 5) {
    return dword_101E0BAA0[v1];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ConvertFenceStatusToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::FenceStatus ConvertFenceStatusToProtobuf(const CLFenceManager_Type::FenceStatus &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 1;
}

uint64_t sub_10146B484(_DWORD *a1)
{
  if (*a1 < 7u) {
    return (*a1 + 1);
  }
  else {
    return 0;
  }
}

char *sub_10146B494(char *result, uint64_t a2)
{
  char v2 = *result;
  int v3 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a2 + 8) = *result & 1;
  *(_DWORD *)(a2 + 16) = v3 | 3;
  *(unsigned char *)(a2 + 9) = (v2 & 2) != 0;
  return result;
}

uint64_t sub_10146B4B8(int *a1)
{
  uint64_t v2 = *a1;
  if v2 < 0x14 && ((0xF5DFFu >> v2)) {
    return dword_101E0BAB4[v2];
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertActivityAlarmTriggerToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::ActivityAlarmTrigger ConvertActivityAlarmTriggerToProtobuf(const CMActivityAlarmTrigger &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146B698(uint64_t *a1)
{
  if (*a1 == 1) {
    return 1;
  }
  if (*a1 == 8) {
    return 2;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertCMInertialOdometryReferenceFrameTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::InertialOdometrySample_ReferenceFrame ConvertCMInertialOdometryReferenceFrameTypeToProtobuf(const CMInertialOdometryReferenceFrame &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10146B87C(uint64_t *a1)
{
  if ((unint64_t)*a1 < 3) {
    return *a1 + 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102327520);
  }
  int v3 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertCMInertialOdometryStaticIndicatorTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::InertialOdometrySample_StaticIndicator ConvertCMInertialOdometryStaticIndicatorTypeToProtobuf(const CMInertialOdometryStaticFlag &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

void sub_10146BA50(void *a1, uint64_t a2)
{
  if (a2)
  {
    [a1 timestamp];
    *(_DWORD *)(a2 + 84) |= 2u;
    *(void *)(a2 + 16) = v4;
    if ([a1 deltaPositionX])
    {
      [objc_msgSend(a1, "deltaPositionX") floatValue];
      *(_DWORD *)(a2 + 84) |= 8u;
      *(_DWORD *)(a2 + 28) = v5;
    }
    if ([a1 deltaPositionY])
    {
      [objc_msgSend(a1, "deltaPositionY") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x10u;
      *(_DWORD *)(a2 + 32) = v6;
    }
    if ([a1 deltaPositionZ])
    {
      [objc_msgSend(a1, "deltaPositionZ") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x20u;
      *(_DWORD *)(a2 + 36) = v7;
    }
    if ([a1 deltaVelocityX])
    {
      [objc_msgSend(a1, "deltaVelocityX") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x40u;
      *(_DWORD *)(a2 + 40) = v8;
    }
    if ([a1 deltaVelocityY])
    {
      [objc_msgSend(a1, "deltaVelocityY") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x80u;
      *(_DWORD *)(a2 + 44) = v9;
    }
    if ([a1 deltaVelocityZ])
    {
      [objc_msgSend(a1, "deltaVelocityZ") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x100u;
      *(_DWORD *)(a2 + 48) = v10;
    }
    if ([a1 quaternionX])
    {
      [objc_msgSend(a1, "quaternionX") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x200u;
      *(_DWORD *)(a2 + 52) = v11;
    }
    if ([a1 quaternionY])
    {
      [objc_msgSend(a1, "quaternionY") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x400u;
      *(_DWORD *)(a2 + 56) = v12;
    }
    if ([a1 quaternionZ])
    {
      [objc_msgSend(a1, "quaternionZ") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x800u;
      *(_DWORD *)(a2 + 60) = v13;
    }
    if ([a1 quaternionW])
    {
      [objc_msgSend(a1, "quaternionW") floatValue];
      *(_DWORD *)(a2 + 84) |= 0x1000u;
      *(_DWORD *)(a2 + 64) = v14;
    }
    *(void *)std::string buf = [a1 referenceFrame];
    unsigned int v15 = sub_10146B698((uint64_t *)buf);
    if (!sub_10016E644(v15)) {
      sub_101A5F628();
    }
    *(_DWORD *)(a2 + 84) |= 0x2000u;
    *(_DWORD *)(a2 + 68) = v15;
    *(void *)std::string buf = [a1 staticFlag];
    unsigned int v16 = sub_10146B87C((uint64_t *)buf);
    if (!sub_100165F14(v16)) {
      sub_101A5F5FC();
    }
    *(_DWORD *)(a2 + 84) |= 0x20000u;
    *(_DWORD *)(a2 + 76) = v16;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v17 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "ConvertCMOdometryStateToProtobuf,invalid pMsg pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertCMOdometryStateToProtobuf(const CMOdometry *, CLP::LogEntry::PrivateData::InertialOdometrySample *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

void sub_10146BDF4(id a1)
{
  qword_1024194C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "PositionProto");
}

void sub_10146BE24()
{
}

void sub_10146BE64()
{
}

void sub_10146BE88(id a1)
{
  qword_102419408 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

void sub_10146BEB8()
{
}

void sub_10146BEF8()
{
}

void sub_10146BF1C()
{
}

void sub_10146BF5C()
{
}

void sub_10146BF80()
{
}

void sub_10146BFC0()
{
}

BOOL sub_10146BFE4(uint64_t a1)
{
  if (*(_WORD *)a1) {
    return 1;
  }
  if (*(__int16 *)(a1 + 8) != -32768)
  {
    int v2 = *(unsigned __int8 *)(a1 + 10);
    if (*(void *)(a1 + 16))
    {
      if ((v2 != 2) == (*(__int16 *)(a1 + 24) != -32768)) {
        return *(void *)(a1 + 32)
      }
            && (*(void *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return 1;
    }
    if (v2 != 2) {
      return 1;
    }
  }
  return *(void *)(a1 + 32)
      && (*(void *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

void sub_10146C080()
{
}

void sub_10146C0C0()
{
}

BOOL sub_10146C0E4(uint64_t a1, unsigned int a2)
{
  BOOL result = sub_1001662E0(a2);
  if (!result) {
    sub_101A9024C();
  }
  *(_DWORD *)(a1 + 20) |= 2u;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void sub_10146C128()
{
}

void sub_10146C168()
{
}

void sub_10146C18C()
{
}

void sub_10146C1CC()
{
}

void sub_10146C1F0()
{
}

void sub_10146C230()
{
}

void sub_10146C254()
{
}

void sub_10146C294()
{
}

void sub_10146C2B8()
{
}

void sub_10146C2F8()
{
}

void sub_10146C31C()
{
}

void sub_10146C35C()
{
}

void sub_10146C380()
{
}

void sub_10146C3C0()
{
}

void sub_10146C3E4(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_10146C414()
{
}

void sub_10146C454()
{
}

void sub_10146C478()
{
}

void sub_10146C4B8()
{
}

void sub_10146C4DC()
{
}

void sub_10146C51C()
{
}

void *sub_10146C540(uint64_t a1, void **a2, uint64_t a3, void *a4, uint64_t *a5)
{
  int v8 = *(void **)a1;
  int v9 = *a2;
  if (*(void **)a1 == *a2)
  {
LABEL_31:
    int v9 = v8;
    return sub_100A13BD8((uint64_t)&v27, v8, v9, *a5);
  }
  int v11 = *(void **)a3;
  if (*(void *)a3 != *a4)
  {
    while (1)
    {
      unint64_t v13 = v8[4];
      unint64_t v14 = v11[4];
      if (v13 >= v14)
      {
        if (v14 >= v13)
        {
          uint64_t v21 = (void *)v8[1];
          if (v21)
          {
            do
            {
              char v22 = v21;
              uint64_t v21 = (void *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              char v22 = (void *)v8[2];
              BOOL v18 = *v22 == (void)v8;
              int v8 = v22;
            }
            while (!v18);
          }
          *(void *)a1 = v22;
          uint64_t v23 = *(void **)a3;
          char v24 = *(void **)(*(void *)a3 + 8);
          if (v24)
          {
            do
            {
              uint64_t v25 = v24;
              char v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v25 = (void *)v23[2];
              BOOL v18 = *v25 == (void)v23;
              uint64_t v23 = v25;
            }
            while (!v18);
          }
          *(void *)a3 = v25;
        }
        else
        {
          uint64_t v19 = (void *)v11[1];
          if (v19)
          {
            do
            {
              char v20 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              char v20 = (void *)v11[2];
              BOOL v18 = *v20 == (void)v11;
              int v11 = v20;
            }
            while (!v18);
          }
          *(void *)a3 = v20;
        }
      }
      else
      {
        sub_10029CE5C(a5, v8 + 4);
        unsigned int v15 = *(void **)a1;
        unsigned int v16 = *(void **)(*(void *)a1 + 8);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            unsigned int v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (void *)v15[2];
            BOOL v18 = *v17 == (void)v15;
            unsigned int v15 = v17;
          }
          while (!v18);
        }
        *(void *)a1 = v17;
      }
      int v8 = *(void **)a1;
      int v9 = *a2;
      if (*(void **)a1 == *a2) {
        break;
      }
      int v11 = *(void **)a3;
      if (*(void *)a3 == *a4) {
        return sub_100A13BD8((uint64_t)&v27, v8, v9, *a5);
      }
    }
    goto LABEL_31;
  }
  return sub_100A13BD8((uint64_t)&v27, v8, v9, *a5);
}

uint64_t sub_10146C6D4()
{
  return __cxa_atexit((void (*)(void *))sub_10045E944, &qword_102487C40, (void *)&_mh_execute_header);
}

uint64_t sub_10146C6F8(uint64_t a1)
{
  float v1 = *(float *)(a1 + 20);
  int v8 = 0;
  uint64_t v9 = 0;
  int v7 = 0;
  sub_10010F834(&v7, (const void *)qword_102487C48, qword_102487C50, (qword_102487C50 - qword_102487C48) >> 2);
  uint64_t v2 = (char *)v8 - (char *)v7;
  if (v8 != v7)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 2;
    if ((unint64_t)(v2 >> 2) <= 1) {
      uint64_t v4 = 1;
    }
    while (v7[v3] < v1)
    {
      if (v4 == ++v3)
      {
        uint64_t v3 = v4;
        goto LABEL_8;
      }
    }
    goto LABEL_8;
  }
  uint64_t v3 = 0;
  uint64_t v5 = 0;
  if (v8)
  {
LABEL_8:
    int v8 = v7;
    operator delete(v7);
    return v3;
  }
  return v5;
}

uint64_t sub_10146C7A4(uint64_t a1)
{
  float v1 = *(float *)(a1 + 8);
  float v2 = 0.0;
  if (v1 != 0.0) {
    float v2 = *(float *)(a1 + 12) / (float)(v1 * v1);
  }
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_10010F834(&v8, (const void *)qword_102487C60, qword_102487C68, (qword_102487C68 - qword_102487C60) >> 2);
  uint64_t v3 = (char *)v9 - (char *)v8;
  if (v9 != v8)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 >> 2;
    if ((unint64_t)(v3 >> 2) <= 1) {
      uint64_t v5 = 1;
    }
    while (v8[v4] < v2)
    {
      if (v5 == ++v4)
      {
        uint64_t v4 = v5;
        goto LABEL_10;
      }
    }
    goto LABEL_10;
  }
  uint64_t v4 = 0;
  uint64_t v6 = 0;
  if (v9)
  {
LABEL_10:
    uint64_t v9 = v8;
    operator delete(v8);
    return v4;
  }
  return v6;
}

uint64_t sub_10146C868(uint64_t a1)
{
  return (int)(*(float *)(a1 + 8) / 0.1);
}

uint64_t sub_10146C884()
{
  qword_102487C48 = 0;
  qword_102487C50 = 0;
  qword_102487C58 = 0;
  uint64_t v0 = operator new(0x18uLL);
  qword_102487C50 = (uint64_t)(v0 + 3);
  qword_102487C58 = (uint64_t)(v0 + 3);
  *(_OWORD *)uint64_t v0 = xmmword_101E0BB04;
  v0[2] = 0x4282000042480000;
  qword_102487C48 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102487C48, (void *)&_mh_execute_header);
  qword_102487C68 = 0;
  unk_102487C70 = 0;
  qword_102487C60 = 0;
  float v1 = operator new(0x14uLL);
  qword_102487C68 = (uint64_t)(v1 + 5);
  unk_102487C70 = v1 + 5;
  v1[4] = 1108056474;
  *(_OWORD *)float v1 = xmmword_101E0BB1C;
  qword_102487C60 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102487C60, (void *)&_mh_execute_header);
}

uint64_t sub_10146C968(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_10146CAC8(a1, "CLNatalimetryRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_102327590;
  *(void *)(a1 + 72) = off_102327648;
  sub_100F03BA0((void *)(a1 + 392), 0, 0);
  sub_100F03BA0((void *)(a1 + 408), 0, 0);
  sub_100F03BA0((void *)(a1 + 424), 0, 0);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 460) = xmmword_101E0BB30;
  *(_OWORD *)(a1 + 476) = unk_101E0BB40;
  *(_OWORD *)(a1 + 492) = xmmword_101E0BB50;
  *(_OWORD *)(a1 + 504) = *(long long *)((char *)&xmmword_101E0BB50 + 12);
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_10146CA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10146CAC8(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *int v12 = &off_1022B2C68;
  *(void *)a1 = off_102327938;
  *(void *)(a1 + 72) = off_1023279E0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102327938;
  *(void *)(a1 + 72) = off_1023279E0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 312) = 12000;
  *(void *)(a1 + 320) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 328));
  *(void *)(a1 + 328) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 240) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_10146CED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *char v27 = v30;
  sub_1003BE1F8(v31);
  sub_101474DB0(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_10146CF6C()
{
}

void *sub_10146CF74(void *a1)
{
  *a1 = off_102327938;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1023279E0;
  a1[40] = off_1022B2C20;
  sub_1003BE1F8(a1 + 41);
  sub_101474DB0(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_10146D034(void *a1)
{
  *a1 = off_102327590;
  a1[9] = off_102327648;
  sub_10146D0B4((uint64_t)a1, 0, 0);

  return sub_10146CF74(a1);
}

void sub_10146D0B4(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 440) = a2;
    char v6 = *(const void **)(a1 + 448);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 448) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101AB64EC();
    sub_10146D12C(v7);
  }
}

void *sub_10146D130(uint64_t a1)
{
  return sub_10146D034((void *)(a1 - 72));
}

void sub_10146D138(void *a1)
{
  sub_10146D034(a1);

  operator delete();
}

void sub_10146D170(uint64_t a1)
{
  sub_10146D034((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_10146D1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_100082064(a1 + 72))
    {
      sub_10002B640(*(void *)(a1 + 80));
      double Current = CFAbsoluteTimeGetCurrent();
      if (!(*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)a1 + 104))(a1, buf))
      {
        double v6 = Current - *(double *)(*(void *)(a2 + 8) - 24);
        if (v6 > v11) {
          sub_10146D560((float *)a1, v11, v6);
        }
      }
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM NatalieHistory WHERE startTime < ?");
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v7 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "DB, Error expiring records.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual long CLNatalimetryRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return -1;
}

void sub_10146D510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10146D558()
{
}

void sub_10146D560(float *a1, double a2, double a3)
{
  double v6 = a3 - a2;
  float v7 = sub_1001AA8E8(a1 + 115, 0);
  float v8 = v6 * (float)(v7 * a1[118]) / 3600.0;
  if ((uint64_t)(float)(v8 * 1000.0))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v9 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218752;
      *(double *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = a2;
      *(_WORD *)&unsigned char buf[22] = 2048;
      double v12 = a3;
      LOWORD(v13) = 2048;
      *(double *)((char *)&v13 + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "DB, Inserting basal calories %f for gap (%lf - %lf, %lfs)", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryRecorderDb::insertNataliesForGap(const CFAbsoluteTime, const CFAbsoluteTime)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    *(_OWORD *)std::string buf = 0u;
    double v12 = 0.0;
    *(double *)&uint8_t buf[16] = a3;
    *(double *)&long long v13 = v7;
    *((double *)&v13 + 1) = v7;
    uint64_t v14 = (uint64_t)(float)(v8 * 1000.0);
    uint64_t v15 = v14;
    double v16 = v6;
    v17[0] = 0;
    v17[1] = 0;
    uuid_clear((unsigned __int8 *)v17);
    (*(void (**)(float *, unsigned char *, void))(*(void *)a1 + 120))(a1, buf, 0);
  }
}

uint64_t sub_10146D814(uint64_t a1, uint64_t a2)
{
  return sub_10146D1AC(a1 - 72, a2);
}

uint64_t sub_10146D81C(uint64_t a1)
{
  uint64_t v3 = a1 + 112;
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v4 = a1 + 72;
  uint64_t v6 = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  __int16 v7 = 256;
  if (sub_100082064(v4)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM NatalieHistory ORDER BY startTime ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_10146DAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146DB30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  __int16 v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  float v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v8, 2);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 20) = sqlite3_column_int(v9, 3);
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v10, 4);
  double v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 32) = sqlite3_column_int64(v11, 5);
  double v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 40) = sqlite3_column_int64(v12, 6);
  long long v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v13, 7);
  uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v14, 8);
  memset(uu, 0, sizeof(uu));
  uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v16 = sqlite3_column_text(v15, 9);
  int v17 = uuid_parse((const char *)v16, uu);
  __int16 v18 = (unsigned __int8 *)(a2 + 64);
  if (v17) {
    uuid_clear(v18);
  }
  else {
    uuid_copy(v18, uu);
  }
  return 0;
}

void sub_10146DCA4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  int v2 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 16) = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 29) = v2 != 0;
  uint64_t v3 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(a2 + 28) = *(_DWORD *)(a1 + 48) != 0;
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  uuid_copy((unsigned __int8 *)(a2 + 72), (const unsigned __int8 *)(a1 + 64));
}

uint64_t sub_10146DCFC(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3))
  {
    if (sub_1005F93E8(*(void *)(a1 + 80))) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM NatalieHistory WHERE id >= ? ORDER BY id DESC LIMIT ?");
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "DB, UUID un-initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLNatalimetryRecorderDb::queryNatalieDataSince(CLNatalieData &, std::vector<CLNatalieData> &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v5 = 103;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DB, CalorimetryHistory not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      float v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLNatalimetryRecorderDb::queryNatalieDataSince(CLNatalieData &, std::vector<CLNatalieData> &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v5 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v5;
}

void sub_10146EBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146EC64(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3))
  {
    if (sub_1005F93E8(*(void *)(a1 + 80))) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM NatalieHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC");
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "DB, UUID un-initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLNatalimetryRecorderDb::queryNatalieData(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLNatalieData> &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v5 = 103;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      float v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLNatalimetryRecorderDb::queryNatalieData(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLNatalieData> &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v5 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v5;
}

void sub_10146F368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146F3D8(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  uuid_clear((unsigned __int8 *)&v20);
  uuid_clear(v21);
  memset(buf, 0, sizeof(buf));
  long long v7 = *(_OWORD *)v21;
  *(void *)(a3 + 48) = 0;
  long long v8 = *(_OWORD *)buf;
  *(_OWORD *)(a3 + 16) = v20;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)a3 = v8;
  if (sub_100082064(a1 + 72))
  {
    CFStringRef v9 = (const __CFString *)sub_1005F93E8(*(void *)(a1 + 80));
    if (v9)
    {
      memset(uu, 0, sizeof(uu));
      CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
      uuid_parse(CStringPtr, uu);
      memset(out, 0, 37);
      uuid_unparse(a2, out);
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from NatalieHistory WHERE sessionUUID = ? ORDER BY startTime ASC");
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    long long v13 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "DB, UUID un-initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLNatalimetryRecorderDb::getWorkoutMets(unsigned char *, CLWorkoutMets &) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v12 = 103;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    double v11 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLNatalimetryRecorderDb::getWorkoutMets(unsigned char *, CLWorkoutMets &) const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v12 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v12;
}

void sub_10146F9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10146FA64(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM NatalieHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_10146FB20(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10146FB5C(uint64_t a1)
{
  return sub_10146FA64(a1 - 72);
}

BOOL sub_10146FB64(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v11[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v12 = 256;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 424), v11);
    int v7 = sub_10146DB30(v11, (uint64_t)v13);
    BOOL v8 = v7 == 0;
    if (!v7) {
      sub_10146DCA4((uint64_t)v13, a2);
    }
    uint64_t v9 = v11[0];
    v11[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v8;
}

void sub_10146FCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10146FCE8(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_10146FF18(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "NatalieHistory", (const char **)&off_102327718, (const std::string::value_type **)&off_102478E48, 0);
    *(void *)(a1 + 392) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO NatalieHistory (startTime, activityType, isStanding, mets, natalies, basalNatalies, overrideSet, truthMets, sessionUUID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 400) = v2;
    *(void *)(a1 + 408) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM NatalieHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 416) = v3;
    *(void *)(a1 + 424) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM NatalieHistory ORDER BY startTime ASC LIMIT 1");
    *(void *)(a1 + 432) = v4;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "DB, Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryRecorderDb::prepareSQLStatements()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10146FF18(uint64_t a1)
{
  if (sub_1005F93E4(*(void *)(a1 + 80), "NatalieHistory"))
  {
    uint64_t v4 = "activityType";
    int v5 = 5;
    __int16 v6 = 0;
    char v7 = 0;
    char v8 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "NatalieHistory", (uint64_t)"activityType", (uint64_t)&v4);
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1023276F8);
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DB, doesn't exist yet.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_10147056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a24);
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  sub_101A129A8((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_10147061C(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102327A20);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102327A20);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      long long v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLNatalieData>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    int v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      double v11 = v21;
    }
    else {
      double v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    long long v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      double v16 = __p;
    }
    else {
      double v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_101471848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101471BA8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM NatalieHistory");
  }
  return result;
}

void sub_101471C5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101471C74(uint64_t a1)
{
  return sub_101471BA8(a1 - 72);
}

uint64_t sub_101471C7C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM NatalieHistory WHERE startTime > ?");
  }
  return result;
}

void sub_101471F0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101471F50(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE NatalieHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_101472174(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014721B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    int v5 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, out);
    if (v5) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v59;
    }
    if (v5) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v58;
    }
    double v8 = *(double *)(a2 + 16);
    int v9 = *(_DWORD *)(a2 + 24);
    char v10 = *(unsigned char *)(a2 + 28);
    char v11 = *(unsigned char *)(a2 + 29);
    int v34 = *(_DWORD *)(a2 + 4);
    __int16 v35 = *(_WORD *)(a2 + 30);
    double v12 = *(double *)(a2 + 32);
    double v13 = *(double *)(a2 + 40);
    long long v55 = *(_OWORD *)(a2 + 64);
    uint64_t v56 = *(void *)(a2 + 80);
    uint64_t v15 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    memset(out, 0, 37);
    if (!uuid_is_null((const unsigned __int8 *)(a2 + 72))) {
      uuid_unparse((const unsigned __int8 *)(a2 + 72), out);
    }
    sub_100082068((void *)(a1 + 392), &v36);
    double v16 = (sqlite3_stmt *)sub_10014D19C(v36);
    if (sub_100055D58(v16, 1, v8))
    {
      uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v36);
      if (sub_10014D1A4(v17, 2, v9))
      {
        uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(v36);
        if (sub_10014D1A4(v18, 3, v11 & 1))
        {
          uint64_t v19 = (sqlite3_stmt *)sub_10014D19C(v36);
          if (sub_100055D58(v19, 4, v12))
          {
            long long v20 = (sqlite3_stmt *)sub_10014D19C(v36);
            if (sub_10014DBB4(v20, 5, v15 + v7))
            {
              uint64_t v21 = (sqlite3_stmt *)sub_10014D19C(v36);
              sqlite3_int64 v22 = v14 + v6;
              if (sub_10014DBB4(v21, 6, v22))
              {
                std::string v23 = (sqlite3_stmt *)sub_10014D19C(v36);
                if (sub_10014D1A4(v23, 7, v10 & 1))
                {
                  char v24 = (sqlite3_stmt *)sub_10014D19C(v36);
                  if (sub_100055D58(v24, 8, v13))
                  {
                    uint64_t v25 = (sqlite3_stmt *)sub_10014D19C(v36);
                    if (sub_100133F10(v25, 9, out))
                    {
                      uint64_t v26 = *(void *)(a1 + 80);
                      char v27 = (sqlite3_stmt *)sub_10014D19C(v36);
                      sub_10001FEB0(v26, v27);
                      ++*(_DWORD *)(a1 + 132);
                      if (*(void *)(a1 + 440))
                      {
                        if (*(void *)(a1 + 448))
                        {
                          int v28 = sub_1006037D0(*(void *)(a1 + 80));
                          uint64_t v29 = sub_1005F93E8(*(void *)(a1 + 80));
                          uint64_t v30 = *(void *)(a2 + 56);
                          uint64_t v31 = *(void *)(a2 + 48) - v30;
                          __int16 v32 = *(_WORD *)(a1 + 456);
                          uint64_t v33 = *(void **)(a1 + 440);
                          v37[0] = _NSConcreteStackBlock;
                          v37[1] = 3221225472;
                          v37[2] = sub_101472538;
                          v37[3] = &unk_102327688;
                          id v37[4] = a1;
                          int v38 = v28;
                          int v39 = v34;
                          uint64_t v40 = v29;
                          double v41 = v8;
                          int v42 = v9;
                          char v43 = v10;
                          char v44 = v11;
                          __int16 v45 = v35;
                          double v46 = v12;
                          double v47 = v13;
                          uint64_t v48 = v15 + v7;
                          sqlite3_int64 v49 = v22;
                          long long v50 = v55;
                          uint64_t v51 = v56;
                          uint64_t v52 = v31;
                          uint64_t v53 = v30;
                          __int16 v54 = v32;
                          [v33 async:v37];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = v36;
    uint64_t v36 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014724F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101472538(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 448);
  long long v2 = *(_OWORD *)(a1 + 88);
  double v6[2] = *(_OWORD *)(a1 + 72);
  void v6[3] = v2;
  void v6[4] = *(_OWORD *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 120);
  long long v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, void, void, void))(v1 + 16))(v1, v6, v3, *(void *)(a1 + 136), *(unsigned __int8 *)(a1 + 144), *(unsigned __int8 *)(a1 + 145));
}

uint64_t sub_1014725D0()
{
  return 0;
}

uint64_t sub_1014725D8(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 408), &v10);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = sub_10146DB30(&v10, (uint64_t)buf);
    if (!v5) {
      sub_10146DCA4((uint64_t)buf, a2);
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023276F8);
    }
    uint64_t v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "CalorimetryRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023276F8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLNatalimetryRecorderDb::getMostRecentRecordUL(CLNatalieData &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v5 = 2;
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v4) {
    return 2;
  }
  return v5;
}

void sub_1014727F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101472840(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4 = *(double *)(a4 + 16) - *(double *)(a4 + 64);
  if (v4 - *(double *)(a2 + 16) >= 86400.0) {
    double v5 = v4 + -86400.0;
  }
  else {
    double v5 = *(double *)(a2 + 16);
  }
  for (double i = v4 - v5; i > 10.24; double i = i + -3600.0)
  {
    if (i <= 3600.0) {
      double v8 = i;
    }
    else {
      double v8 = 3600.0;
    }
    sub_10146D560(a1, v5, v5 + v8);
    double v5 = v5 + 3600.0;
  }
}

uint64_t sub_1014728F4(void *a1)
{
  long long v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB6678(v2);
    __break(1u);
  }
  int v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      double v4 = v13;
    }
    else {
      double v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      double v8 = v13;
    }
    else {
      double v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101472DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 - 177) < 0) {
    operator delete(*(void **)(v5 - 200));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101472E4C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_101474EE8(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102327A20);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)double v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&_OWORD v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102327A20);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)double v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102327A20);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLNatalieData>::setDatabaseAccessible() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1014735D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_101473608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id *sub_10147362C(uint64_t a1, uint64_t a2, char a3)
{
  v31[0] = (id)os_transaction_create();
  v31[1] = 0;
  if (*(double *)(a1 + 240) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v31);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v40);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102327A20);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102327A20);
        }
        LOWORD(v32) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 16);
    double v8 = v41;
    double v9 = v7 - v41;
    if (v7 - v41 < 0.0) {
      double v9 = -(v7 - v41);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102327A20);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 16);
        *(_DWORD *)std::string buf = 134349312;
        double v37 = v41;
        __int16 v38 = 2050;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102327A20);
        }
        uint64_t v25 = *(void *)(a2 + 16);
        int v32 = 134349312;
        double v33 = v41;
        __int16 v34 = 2050;
        uint64_t v35 = v25;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 16);
      double v8 = v41;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102327A20);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 16);
          *(_DWORD *)std::string buf = 134217984;
          double v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102327A20);
          }
          double v27 = *(double *)(a2 + 16);
          int v32 = 134217984;
          double v33 = v27;
          int v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v30 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102327A20);
        double v17 = v30;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102327A20);
        }
        int v32 = 134217984;
        double v33 = v18;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v40, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 304) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 256) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v31);
}

void sub_101473E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101473E70(uint64_t a1)
{
  return sub_101472E4C(a1 - 72);
}

void sub_101473E78(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_101473EA8(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB67E8(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = v15;
    }
    else {
      double v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_101474334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014743BC(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB6958(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_101474730(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB6AC8(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101474A5C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB6C38(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101474D80(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101474DB0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 23;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 46;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_101474E58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_101474EE8(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_101474F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101474F84(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_101474FB4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  unint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  void *v5 = off_102327A70;
  void v5[6] = 0;
  sub_1012A0598();
}

void sub_101475090(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3) {
    sub_101A6A9C8(v3);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1014750B4(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102327AC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLExerciseMinuteSubscription::onNatalimetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102327AC0);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLExerciseMinuteSubscription::onNatalimetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101476070(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101475270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101475294(void *a1)
{
  *a1 = off_102327A70;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[6];
    a1[6] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_101475348(void *a1)
{
  sub_101475294(a1);

  operator delete();
}

void *sub_101475380@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_102327B30;
  v5[1] = sub_101475538;
  uint64_t v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageExerciseMinuteUpdate");
  sub_100BF3834((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_102327BE0;
  v4[1] = sub_101475814;
  id v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageExerciseMinuteQuery");
  sub_100BF3834((uint64_t)v9, (uint64_t)v4);
  sub_101476DC8(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BF3D50(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BF3D50(v4);
  return sub_100BF3D50(v5);
}

void sub_1014754D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_101476034(v2 + i);
  sub_100BF3D50((uint64_t *)va);
  sub_100BF3D50(va1);
  _Unwind_Resume(a1);
}

void sub_101475538(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102327B00);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)std::string buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 1024;
    int v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, Subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102327B00);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    unsigned int v14 = 138412802;
    uint64_t v15 = v10;
    __int16 v16 = 2048;
    uint64_t v17 = a1;
    __int16 v18 = 1024;
    int v19 = a2;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLExerciseMinuteSubscription::handleRequestExerciseMinuteUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
  unsigned int v14 = 0;
  if (sub_1014764D8(a1, (int *)&v14))
  {
    sub_10009C834(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:4 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:4];
    }
  }
  else
  {
    uint64_t v12 = CMErrorMessage;
    int v13 = +[NSNumber numberWithUnsignedInt:v14];
    *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    sub_101476538(a1);
  }
}

void sub_1014757D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101475814(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v37 = 0;
  if (sub_1014764D8(a1, (int *)&v37))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    uint64_t v6 = Dictionary;
    if (Dictionary
      && (uint64_t v7 = CMExerciseMinuteRecordId, [Dictionary objectForKeyedSubscript:CMExerciseMinuteRecordId]))
    {
      sub_1000E1294((uint64_t *)v36, (uint64_t)"CLDaemonClient.ExerciseMinuteQuery", 0);
      long long __p = 0;
      __int16 v34 = 0;
      uint64_t v35 = 0;
      unsigned int v30 = [[v6 objectForKeyedSubscript:v7] intValue];
      uint64_t v8 = CMExerciseMinuteStartDate;
      if ([v6 objectForKeyedSubscript:CMExerciseMinuteStartDate]) {
        [objc_msgSend(v6, "objectForKeyedSubscript:", v8) doubleValue];
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v31 = v9;
      uint64_t v11 = CMExerciseMinuteSourceId;
      id v12 = [v6 objectForKeyedSubscript:CMExerciseMinuteSourceId];
      if (v12) {
        id v12 = [v6 objectForKeyedSubscript:v11];
      }
      id v32 = v12;
      id v13 = [objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier") syncgetQueryExerciseMinuteDataSince:&v30 records:&__p];
      unsigned int v37 = v13;
      if (v13 == 100)
      {
        id v14 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v15 = (int *)__p;
        __int16 v16 = v34;
        if (__p != v34)
        {
          do
          {
            if (*((void *)v15 + 2)) {
              id v17 = [objc_alloc((Class)NSUUID) initWithUUIDString:*((void *)v15 + 2)];
            }
            else {
              id v17 = 0;
            }
            id v18 = [objc_alloc((Class)CMExerciseMinuteData) initWithStartDate:*v15 recordId:v17 sourceId:*((double *)v15 + 1)];
            [v14 addObject:v18];

            v15 += 6;
          }
          while (v15 != v16);
        }
        if ([v14 count])
        {
          sub_100103240();
          if (sub_10073E30C())
          {
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102327B00);
            }
            int v19 = qword_102418FD8;
            if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
            {
              id v20 = [v14 lastObject];
              uint64_t v21 = *(void *)(a1 + 24);
              *(_DWORD *)std::string buf = 138412802;
              *(void *)double v47 = v20;
              *(_WORD *)&v47[8] = 2112;
              *(void *)&v47[10] = v21;
              *(_WORD *)&v47[18] = 2048;
              *(void *)&v47[20] = a1;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%@, %@, %p", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FD0 != -1) {
                dispatch_once(&qword_102418FD0, &stru_102327B00);
              }
              id v27 = [v14 lastObject];
              uint64_t v28 = *(void *)(a1 + 24);
              int v40 = 138412802;
              *(void *)double v41 = v27;
              *(_WORD *)&v41[8] = 2112;
              *(void *)&v41[10] = v28;
              *(_WORD *)&v41[18] = 2048;
              *(void *)&v41[20] = a1;
              uint64_t v29 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLExerciseMinuteSubscription::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
              if (v29 != (char *)buf) {
                free(v29);
              }
            }
          }
        }
        uint64_t v38 = CMExerciseMinuteDataArray;
        id v39 = v14;
        +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];

        CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102327B00);
        }
        uint64_t v22 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = *(void *)(a1 + 24);
          *(_DWORD *)std::string buf = 67240706;
          *(_DWORD *)double v47 = v13;
          *(_WORD *)&v47[4] = 2112;
          *(void *)&v47[6] = v23;
          *(_WORD *)&v47[14] = 2048;
          *(void *)&v47[16] = a1;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "ExerciseMinute, Error query response, %{public}d, %@, %p", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102327B00);
          }
          uint64_t v25 = *(void *)(a1 + 24);
          int v40 = 67240706;
          *(_DWORD *)double v41 = v13;
          *(_WORD *)&v41[4] = 2112;
          *(void *)&v41[6] = v25;
          *(_WORD *)&v41[14] = 2048;
          *(void *)&v41[16] = a1;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLExerciseMinuteSubscription::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        uint64_t v42 = CMErrorMessage;
        char v43 = +[NSNumber numberWithUnsignedInt:v13];
        +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
        CLConnectionMessage::sendReply();
      }
      if (__p)
      {
        __int16 v34 = (int *)__p;
        operator delete(__p);
      }
      sub_1000E1098(v36);
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102327B00);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "ExerciseMinute, Error in query request.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102327B00);
        }
        LOWORD(v40) = 0;
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLExerciseMinuteSubscription::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      uint64_t v44 = CMErrorMessage;
      __int16 v45 = &off_102395048;
      +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v48 = CMErrorMessage;
    sqlite3_int64 v49 = +[NSNumber numberWithUnsignedInt:v37];
    +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_101475FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, id a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a18);

  _Unwind_Resume(a1);
}

uint64_t sub_101476034(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_101476070(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (*a3 == 4)
  {
    if (*((void *)a4 + 2)
      && (id v6 = [objc_alloc((Class)NSUUID) initWithUUIDString:*((void *)a4 + 2)]) != 0)
    {
      uint64_t v7 = v6;
      id v8 = [objc_alloc((Class)CMExerciseMinuteData) initWithStartDate:*(int *)a4 recordId:v6 sourceId:a4[1]];
      sub_100103240();
      if (sub_10073E30C())
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_102327AE0);
        }
        uint64_t v9 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 24);
          *(_DWORD *)std::string buf = 138412802;
          *(void *)&uint8_t buf[4] = v8;
          __int16 v25 = 2112;
          uint64_t v26 = v10;
          __int16 v27 = 2048;
          uint64_t v28 = a1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_102327AE0);
          }
          uint64_t v14 = *(void *)(a1 + 24);
          int v18 = 138412802;
          id v19 = v8;
          __int16 v20 = 2112;
          uint64_t v21 = v14;
          __int16 v22 = 2048;
          uint64_t v23 = a1;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLExerciseMinuteSubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v15);
          if (v15 != buf) {
            free(v15);
          }
        }
      }
      id v11 = [objc_alloc((Class)NSMutableArray) initWithObjects:v8, 0];
      uint64_t v16 = CMExerciseMinuteDataArray;
      id v17 = v11;
      *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];

      sub_101476454(a1);
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102327AE0);
      }
      id v12 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "ExerciseMinute, error in update", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_102327AE0);
        }
        LOWORD(v18) = 0;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLExerciseMinuteSubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v13);
        if (v13 != buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_101476454(uint64_t a1)
{
  sub_1000E9420(&off_102327C50, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1014764C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014764D8(uint64_t a1, int *a2)
{
  if (sub_1014765CC(a1))
  {
    if (!sub_101290CD0(*(void *)(a1 + 8)))
    {
      int v5 = 104;
      goto LABEL_7;
    }
    if (sub_1010A4D14(a1)) {
      return 1;
    }
  }
  int v5 = 105;
LABEL_7:
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

void sub_101476538(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_102327C50, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1014765B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014765CC(uint64_t a1)
{
  sub_100134750(__p, "com.apple.locationd.natalimetry");
  uint64_t v2 = sub_1010A4BAC(a1);
  uint64_t v3 = v2;
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102327AE0);
  }
  id v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)long long __p = 138412546;
    *(void *)&__p[4] = v5;
    __int16 v9 = 2048;
    uint64_t v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client failed entitlement check for calorimetry, %@, %p", __p, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102327AE0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLExerciseMinuteSubscription::isEntitledForNatalimetry()", "%s\n", v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v3;
}

void sub_1014767D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014767FC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10147682C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10147685C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_10147688C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102327B30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1014768D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102327B30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101476908(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_101476910(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101476950()
{
}

void sub_10147695C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1014769B8(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1014769A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014769B8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  id v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    id v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      id v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102327BA0);
    }
    char v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102327BA0);
      }
    }
    id v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_101476BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_101476C04(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_101476C34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102327BE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101476C80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102327BE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101476CB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_101476CB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101476CF8()
{
}

void sub_101476D04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_101476DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101476DC8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_101476E44(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101476E30(_Unwind_Exception *a1)
{
  sub_100BF3DD4(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101476E44(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    id v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1014770C8(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1014771B8((uint64_t)v25, 0);
  return i;
}

void sub_1014770B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1014771B8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1014770C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_101477140(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101477128(_Unwind_Exception *a1)
{
  sub_1014771B8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_101477140(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_100BF358C((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10147719C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014771B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF3E54((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_101477210()
{
  sub_100134750(qword_102487C78, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487C78, (void *)&_mh_execute_header);
}

void sub_101477270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (_OWORD *)(a1 + 1768);
  uint64_t v6 = a1 + 884;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 255;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0xFFFF;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v18 = _Q1;
  *(_OWORD *)(a1 + 100) = _Q1;
  *(_OWORD *)(a1 + 116) = _Q1;
  *(_OWORD *)(a1 + 132) = _Q1;
  *(_DWORD *)(a1 + 148) = 0;
  *(void *)(a1 + 152) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 180) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 188) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  sub_1000DBC34(a1 + 224);
  *(_DWORD *)(a1 + 864) = 0xFFFF;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)uint64_t v6 = xmmword_101D1C320;
  *(_OWORD *)(v6 + 16) = v18;
  *(_OWORD *)(v6 + 32) = v18;
  *(_OWORD *)(v6 + 48) = v18;
  *(_DWORD *)(a1 + 948) = 0;
  *(void *)(a1 + 952) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 0;
  *(void *)(v6 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 988) = 0x7FFFFFFF;
  *(void *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(unsigned char *)(a1 + 1016) = 0;
  sub_1000DBC34(a1 + 1024);
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_DWORD *)(a1 + 1696) = 1065353216;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(void *)(a1 + 1752) = 0;
  *(_DWORD *)(a1 + 1760) = 1065353216;
  _OWORD *v5 = 0u;
  sub_10065AB34(a1 + 1784, a3);
  *(_OWORD *)(a1 + 1816) = 0u;
  sub_101477A98((void *)a1);
  id v12 = [[[*(id *)a1 vendor] proxyForService:@"CLClientManager" forClient:@"CLEmergencyController"];
  *(void *)(a1 + 8) = v12;
  id v13 = v12;
  *(void *)unint64_t v19 = 11;
  *(void *)&long long v14 = -1;
  *((void *)&v14 + 1) = -1;
  *(_OWORD *)&v19[8] = v14;
  *(_OWORD *)&v19[24] = v14;
  uint64_t v28 = 0xFFFFFFFFLL;
  *(_DWORD *)uint64_t v29 = 0;
  uint64_t v36 = 0;
  uint64_t v38 = 0;
  uint64_t v40 = 0;
  long long v30 = *(_OWORD *)&v19[16];
  *(_OWORD *)&v29[8] = *(_OWORD *)v19;
  uint64_t v31 = -1;
  id v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v20 = 0;
  long long v21 = 0uLL;
  long long v35 = 0u;
  long long v23 = 0uLL;
  long long v22 = 0uLL;
  *(_OWORD *)unsigned int v37 = 0uLL;
  long long v24 = 0uLL;
  long long v39 = 0u;
  long long v26 = 0uLL;
  long long v25 = 0uLL;
  uint64_t v42 = 0;
  *(_OWORD *)long long __p = 0uLL;
  long long v27 = 0uLL;
  int v43 = -1;
  sub_101483598(a1 + 1728, (int *)v29, (uint64_t)v29);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  if (sub_1000FFBA8())
  {
    *(void *)unint64_t v19 = 11;
    *(void *)&long long v15 = -1;
    *((void *)&v15 + 1) = -1;
    *(_OWORD *)&v19[8] = v15;
    *(_OWORD *)&v19[24] = v15;
    uint64_t v28 = 0xFFFFFFFFLL;
    *(_DWORD *)uint64_t v29 = 1;
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t v40 = 0;
    long long v30 = *(_OWORD *)&v19[16];
    *(_OWORD *)&v29[8] = *(_OWORD *)v19;
    uint64_t v31 = -1;
    id v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v20 = 0;
    long long v21 = 0uLL;
    long long v35 = 0u;
    long long v23 = 0uLL;
    long long v22 = 0uLL;
    *(_OWORD *)unsigned int v37 = 0uLL;
    long long v24 = 0uLL;
    long long v39 = 0u;
    long long v26 = 0uLL;
    long long v25 = 0uLL;
    uint64_t v42 = 0;
    *(_OWORD *)long long __p = 0uLL;
    long long v27 = 0uLL;
    int v43 = -1;
    sub_101483598(a1 + 1728, (int *)v29, (uint64_t)v29);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  sub_1014838DC((void *)a1, v29);
  long long v16 = *(_OWORD *)v29;
  *(_OWORD *)uint64_t v29 = 0uLL;
  float v17 = *(std::__shared_weak_count **)(a1 + 1776);
  _OWORD *v5 = v16;
  if (v17)
  {
    sub_1000DB0A0(v17);
    if (*(void *)&v29[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&v29[8]);
    }
  }
  *(void *)uint64_t v29 = off_102327DB8;
  *(void *)&v29[8] = a1;
  *(void *)&long long v30 = v29;
  *(void *)unint64_t v19 = off_102327E48;
  *(void *)&v19[8] = a1;
  *(void *)&v19[24] = v19;
  operator new();
}

void sub_101477890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_101478398((uint64_t)&a55);
  sub_10147840C((uint64_t)&a33);
  uint64_t v61 = 0;
  uint64_t v62 = v55 + 1824;
  while (1)
  {
    uint64_t v63 = *(void *)(v62 + v61);
    *(void *)(v62 + v61) = 0;
    if (v63) {
      (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
    }
    v61 -= 8;
    if (v61 == -16)
    {
      sub_10065ABCC(v57);
      int v64 = *(std::__shared_weak_count **)(v55 + 1776);
      if (v64) {
        sub_1000DB0A0(v64);
      }
      sub_101483490(v56);
      if (*(char *)(v55 + 1727) < 0) {
        operator delete(*v59);
      }
      sub_1000DB114(v55 + 1664);
      uint64_t v65 = *(std::__shared_weak_count **)(v55 + 1552);
      if (v65) {
        sub_1000DB0A0(v65);
      }
      uint64_t v66 = *(std::__shared_weak_count **)(v55 + 752);
      if (v66) {
        sub_1000DB0A0(v66);
      }
      uint64_t v67 = *(void *)(v55 + 32);
      *(void *)(v55 + 32) = 0;
      if (v67) {
        (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
      }
      uint64_t v68 = *(void *)(v55 + 24);
      *(void *)(v55 + 24) = 0;
      if (v68) {
        (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
      }
      uint64_t v69 = *v58;
      uint64_t *v58 = 0;
      if (v69) {
        (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_101477A98(void *a1)
{
  if (!a1[2])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Actor registering as client of Location Controller", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint8x8_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100681630();
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor already registered as client of Location Controller", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (!a1[3])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Actor registering as client of WiFi location", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_1006899D8();
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  unint64_t v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor already registered as client of WiFi location", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!a1[4])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Actor registering as client of Cell location", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      id v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_100E0453C();
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  long long v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Actor already registered as client of Cell location", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::setupLocationClient()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

uint64_t sub_101478398(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

uint64_t sub_10147840C(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

uint64_t sub_101478484(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  for (uint64_t i = 1824; i != 1808; i -= 8)
  {
    uint64_t v3 = *(void *)(a1 + i);
    *(void *)(a1 + i) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  sub_10065ABCC((void *)(a1 + 1784));
  long long v4 = *(std::__shared_weak_count **)(a1 + 1776);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_101483490(a1 + 1728);
  if (*(char *)(a1 + 1727) < 0) {
    operator delete(*(void **)(a1 + 1704));
  }
  sub_1000DB114(a1 + 1664);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 1552);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 752);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1014785D8(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = (const std::string *)(a1 + 40);
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (*(char *)(a1 + 87) < 0)
  {
    **(unsigned char **)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 87) = 0;
  }
  long long v4 = (void *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::size_type v5 = *(void *)(a1 + 48);
    if (!v5) {
      goto LABEL_14;
    }
  }
  else
  {
    std::string::size_type v5 = *(unsigned __int8 *)(a1 + 63);
    if (!*(unsigned char *)(a1 + 63)) {
      goto LABEL_14;
    }
  }
  if (*(int *)(a1 + 36) <= 99) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 3;
  }
  std::string::reserve((std::string *)(a1 + 64), v5);
  std::string::size_type v7 = v6 + 3;
  std::string::append((std::string *)(a1 + 64), v3, 0, v7);
  std::string::size_type v8 = *(unsigned __int8 *)(a1 + 63);
  if ((v8 & 0x80) == 0)
  {
    if (v7 >= v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  std::string::size_type v8 = *(void *)(a1 + 48);
  if (v8 > v7) {
LABEL_13:
  }
    std::string::append((std::string *)(a1 + 64), v8 - v6 - 3, 48);
LABEL_14:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v3 = (const std::string *)v3->__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a1 + 87) < 0) {
      long long v4 = (void *)*v4;
    }
    v10[0] = 68289539;
    v10[1] = 0;
    __int16 v11 = 2082;
    id v12 = "";
    __int16 v13 = 2081;
    long long v14 = v3;
    __int16 v15 = 2081;
    long long v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor IMSI updated\", \"full\":%{private, location:escape_only}s, \"blanked\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x26u);
  }
}

void sub_1014787A0(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = (const std::string *)(a1 + 88);
  std::string::operator=((std::string *)(a1 + 88), a2);
  if (*(char *)(a1 + 135) < 0)
  {
    **(unsigned char **)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 135) = 0;
  }
  long long v4 = (void *)(a1 + 112);
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::size_type v5 = *(void *)(a1 + 96);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    std::string::size_type v5 = *(unsigned __int8 *)(a1 + 111);
    if (!*(unsigned char *)(a1 + 111)) {
      goto LABEL_11;
    }
  }
  std::string::reserve((std::string *)(a1 + 112), v5);
  std::string::append((std::string *)(a1 + 112), v3, 0, 8uLL);
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 111);
    if (v6 < 9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unint64_t v6 = *(void *)(a1 + 96);
  if (v6 > 8) {
LABEL_10:
  }
    std::string::append((std::string *)(a1 + 112), v6 - 8, 48);
LABEL_11:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  std::string::size_type v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v3 = (const std::string *)v3->__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a1 + 135) < 0) {
      long long v4 = (void *)*v4;
    }
    v8[0] = 68289539;
    v8[1] = 0;
    __int16 v9 = 2082;
    unint64_t v10 = "";
    __int16 v11 = 2081;
    id v12 = v3;
    __int16 v13 = 2081;
    long long v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor IMEI updated\", \"full\":%{private, location:escape_only}s, \"blanked\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x26u);
  }
}

void sub_10147894C(std::string::size_type a1, std::string::size_type a2)
{
  if (*(char *)(a2 + 23) < 0 && (unint64_t v4 = *(void *)(a2 + 8), v4 > 0x2BB))
  {
    int v5 = vcvtpd_s64_f64((double)v4 / 700.0);
    if (v5 >= 21)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      unint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        buf.__r_.__value_.__r.__words[0] = 0x1404020100;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning #Actor limiting multi-line string to %{public}d lines", (uint8_t *)&buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        int v28 = 67240192;
        *(_DWORD *)uint64_t v29 = 20;
        long long v26 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", (const char *)v26);
        if (v26 != &buf) {
          free(v26);
        }
      }
      int v5 = 20;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    std::string::size_type v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v8) = *(unsigned __int8 *)(a2 + 23);
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v8;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Actor splitting string (length %{public}d) into %{public}d parts", (uint8_t *)&buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      LODWORD(v21) = *(unsigned __int8 *)(a2 + 23);
      if ((v21 & 0x80u) != 0) {
        uint64_t v21 = *(void *)(a2 + 8);
      }
      int v28 = 67240448;
      *(_DWORD *)uint64_t v29 = v21;
      *(_WORD *)&v29[4] = 1026;
      *(_DWORD *)&v29[6] = v5;
      long long v22 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", (const char *)v22);
      if (v22 != &buf) {
        free(v22);
      }
    }
    if (v5 >= 1)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        memset(&__p, 0, sizeof(__p));
        std::string::size_type v10 = (700 * i);
        if (i >= (v5 - 1))
        {
          uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
          if ((v11 & 0x80u) != 0) {
            uint64_t v11 = *(void *)(a2 + 8);
          }
          std::string::basic_string(&buf, (const std::string *)a2, v10, v11 - v10, (std::allocator<char> *)&v28);
        }
        else
        {
          std::string::basic_string(&buf, (const std::string *)a2, v10, 0x2BCuLL, (std::allocator<char> *)&v28);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = buf;
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        id v12 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 23) >= 0) {
            std::string::size_type v13 = a1;
          }
          else {
            std::string::size_type v13 = *(void *)a1;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = i + 1;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = v5;
          __int16 v34 = 2081;
          long long v35 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}d of %{public}d : %{private}s", (uint8_t *)&buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          if (*(char *)(a1 + 23) >= 0) {
            std::string::size_type v15 = a1;
          }
          else {
            std::string::size_type v15 = *(void *)a1;
          }
          long long v16 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v28 = 136446979;
          *(void *)uint64_t v29 = v15;
          *(_WORD *)&v29[8] = 1026;
          *(_DWORD *)long long v30 = i + 1;
          *(_WORD *)&v30[4] = 1026;
          *(_DWORD *)&v30[6] = v5;
          __int16 v31 = 2081;
          id v32 = v16;
          float v17 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", (const char *)v17);
          if (v17 != &buf) {
            free(v17);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    long long v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 23) >= 0) {
        std::string::size_type v19 = a1;
      }
      else {
        std::string::size_type v19 = *(void *)a1;
      }
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v20 = a2;
      }
      else {
        std::string::size_type v20 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v19;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s : %{private}s", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      if (*(char *)(a1 + 23) >= 0) {
        std::string::size_type v23 = a1;
      }
      else {
        std::string::size_type v23 = *(void *)a1;
      }
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v24 = a2;
      }
      else {
        std::string::size_type v24 = *(void *)a2;
      }
      int v28 = 136446467;
      *(void *)uint64_t v29 = v23;
      *(_WORD *)&v29[8] = 2081;
      *(void *)long long v30 = v24;
      long long v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyActor::logMultiLineString(const std::string &, const std::string &)", "%s\n", (const char *)v25);
      if (v25 != &buf) {
        free(v25);
      }
    }
  }
}

void sub_101479114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_101479144(void *a1, unsigned int a2)
{
  id v2 = a1;
  uint64_t v3 = a2 - 3;
  if (a2 > 3)
  {
    if ([a1 length] > a2)
    {
      id v2 = [[objc_msgSend(v2, "substringWithRange:", 0, v3) stringByAppendingString:@"..."];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      std::string::size_type v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67240192;
        unsigned int v10 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning #Actor truncated string to %{public}d characters", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        int v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static NSString *CLEmergencyActor::getTruncatedString(NSString *, uint32_t)", "%s\n");
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    unint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Actor truncated string max length is too small, not enforcing", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static NSString *CLEmergencyActor::getTruncatedString(NSString *, uint32_t)", "%s\n");
LABEL_20:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  return v2;
}

BOOL sub_10147944C(uint64_t a1)
{
  BOOL v3 = *(double *)(a1 + 36) > 0.0 && *(_DWORD *)(a1 + 472) != -1;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  unint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 28);
    double v6 = *(float *)(a1 + 476);
    uint64_t v7 = *(void *)(a1 + 36);
    int v8 = *(_DWORD *)(a1 + 472);
    v10[0] = 68290307;
    v10[1] = 0;
    __int16 v11 = 2082;
    id v12 = "";
    __int16 v13 = 1026;
    BOOL v14 = v3;
    __int16 v15 = 2049;
    uint64_t v16 = v5;
    __int16 v17 = 2049;
    double v18 = v6;
    __int16 v19 = 2050;
    uint64_t v20 = v7;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Actor,isAltitudeAvailable\", \"available\":%{public}hhd, \"altitude (MSL)\":\"%{private}f\", \"undulation\":\"%{private}f\", \"vunc\":\"%{public}f\", \"undulation model\":%{public}d}", (uint8_t *)v10, 0x3Cu);
  }
  return v3;
}

uint64_t sub_101479590(uint64_t a1, double *a2, double *a3)
{
  uint64_t result = sub_1000E6DB4(a1);
  if (result)
  {
    CLGetUncertaintyScaleFactors();
    *a2 = 0.0 * *(double *)(a1 + 20);
    uint64_t result = sub_10147944C(a1);
    double v7 = -1.0;
    if (result) {
      double v7 = 0.0 * *(double *)(a1 + 36);
    }
  }
  else
  {
    *a2 = -1.0;
    double v7 = -1.0;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_101479638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000E9354(v16);
  sub_1000E9354(v15);
  sub_100134750(__p, "AML");
  sub_101479828((const char *)__p, a1, a2, v16, v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  sub_1012D8754((uint64_t)v16, (uint64_t)v15, a3);
  sub_1000E9354(v12);
  sub_1000E9354(v11);
  sub_100134750(v9, "EED2");
  sub_101479828((const char *)v9, a1, a2, v12, v11);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  sub_100134750(v7, "operator");
  sub_100A8DAD0((uint64_t *)v7, (uint64_t)v11, a3 + 152);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  sub_100134750(v7, "carrier");
  sub_100A8DAD0((uint64_t *)v7, (uint64_t)v12, a3 + 488);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  sub_10013F3C4(v11);
  sub_10013F3C4(v12);
  sub_10013F3C4(v15);
  return sub_10013F3C4(v16);
}

void sub_101479790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a22);
  sub_10013F3C4(&a24);
  sub_10013F3C4(v31 - 64);
  sub_10013F3C4(v31 - 48);
  _Unwind_Resume(a1);
}

void sub_101479828(const char *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  __int16 v9 = a1;
  if (a1[23] < 0) {
    __int16 v9 = *(const char **)a1;
  }
  if (!sub_100012960(a2, v9, a4))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = a1;
      if (a1[23] < 0) {
        __int16 v11 = *(const char **)a1;
      }
      *(_DWORD *)std::string buf = 136446210;
      double v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Actor No %{public}s dict found in carrier bundle, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyActor::extractCarrierAndOperatorDictsForTag(std::string, const CLNameValuePair &, const CLNameValuePair &, CLNameValuePair &, CLNameValuePair &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  id v12 = a1;
  if (a1[23] < 0) {
    id v12 = *(const char **)a1;
  }
  if (!sub_100012960(a3, v12, a5))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    __int16 v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      char v14 = a1;
      if (a1[23] < 0) {
        char v14 = *(const char **)a1;
      }
      *(_DWORD *)std::string buf = 136446210;
      double v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Actor No %{public}s dict found in operator bundle, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyActor::extractCarrierAndOperatorDictsForTag(std::string, const CLNameValuePair &, const CLNameValuePair &, CLNameValuePair &, CLNameValuePair &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
}

uint64_t sub_101479BAC(uint64_t a1)
{
  uint64_t v1 = sub_100A94E54(*(void *)(a1 + 1824));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = "not be displayed";
    if (v1) {
      BOOL v3 = "be displayed";
    }
    *(_DWORD *)std::string buf = 136446210;
    double v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor EED UI should %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyActor::shouldDisplayEEDUI()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return v1;
}

uint64_t sub_101479D94(uint64_t a1, void *a2)
{
  return sub_100A94E5C(*(void *)(a1 + 1824), a2);
}

uint64_t sub_101479D9C(uint64_t a1, void *a2)
{
  return sub_100A9526C(*(void *)(a1 + 1824), a2);
}

void sub_101479DA4(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  BOOL v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D335B8((_DWORD *)(a1 + 44), &v39);
    int v4 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
    std::string::size_type v5 = v39.__r_.__value_.__r.__words[0];
    sub_100D335B8(a2, &v38);
    double v6 = &v39;
    if (v4 < 0) {
      double v6 = (std::string *)v5;
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v7 = &v38;
    }
    else {
      double v7 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v34 = 2082;
    long long v35 = "";
    __int16 v36 = 2082;
    *(void *)unsigned int v37 = v6;
    *(_WORD *)&unsigned char v37[8] = 2082;
    *(void *)&v37[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor emergency state change\", \"oldState\":%{public, location:escape_only}s, \"newState\":%{public, location:escape_only}s}", buf, 0x26u);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  if (!sub_100D33CD4(a1 + 44) && sub_100D33CD4((uint64_t)a2))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 41);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v34 = 2082;
      long long v35 = "";
      __int16 v36 = 1026;
      *(_DWORD *)unsigned int v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #Actor\", \"LS\":%{public}d}", buf, 0x18u);
    }
    char v10 = *(uint64_t **)(a1 + 1744);
    if (v10)
    {
      uint64_t v11 = qword_1024193E0;
      do
      {
        if (v11 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        id v12 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *((_DWORD *)v10 + 4);
          int v14 = *((unsigned __int8 *)v10 + 28);
          *(_DWORD *)std::string buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v34 = 2082;
          long long v35 = "";
          __int16 v36 = 1026;
          *(_DWORD *)unsigned int v37 = v13;
          *(_WORD *)&id v37[4] = 1025;
          *(_DWORD *)&v37[6] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #Actor\", \"inst\":%{public}d, \"InHomeCountry\":%{private}d}", buf, 0x1Eu);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
        }
        __int16 v15 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = v10 + 20;
          if (*((char *)v10 + 183) < 0) {
            uint64_t v16 = (void *)*v16;
          }
          int v17 = *((_DWORD *)v10 + 4);
          *(_DWORD *)std::string buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v34 = 2082;
          long long v35 = "";
          __int16 v36 = 1026;
          *(_DWORD *)unsigned int v37 = v17;
          *(_WORD *)&id v37[4] = 2081;
          *(void *)&v37[6] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #Actor\", \"inst\":%{public}d, \"PhoneNum\":%{private, location:escape_only}s}", buf, 0x22u);
          uint64_t v11 = qword_1024193E0;
        }
        else
        {
          uint64_t v11 = -1;
        }
        char v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  uint64_t v18 = 0;
  long long v19 = *(_OWORD *)a2;
  uint64_t v20 = "UnknownAction";
  char v21 = 1;
  *(_DWORD *)(a1 + 60) = a2[4];
  *(_OWORD *)(a1 + 44) = v19;
  do
  {
    char v22 = v21;
    uint64_t v23 = *(void *)(a1 + 1816 + 8 * v18);
    if (v23)
    {
      long long v31 = *(_OWORD *)a2;
      int v32 = a2[4];
      (*(void (**)(uint64_t, long long *))(*(void *)v23 + 32))(v23, &v31);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      std::string::size_type v24 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v22) {
          long long v25 = "AML";
        }
        else {
          long long v25 = (char *)v20;
        }
        sub_100134750(buf, v25);
        long long v26 = buf;
        if (v37[3] < 0) {
          long long v26 = *(uint8_t **)buf;
        }
        LODWORD(v39.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencyStateChange,pointer was null for %{public}s", (uint8_t *)&v39, 0xCu);
        if ((v37[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v22) {
          long long v27 = "AML";
        }
        else {
          long long v27 = "EED2";
        }
        sub_100134750(&v39, v27);
        int v28 = &v39;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        LODWORD(v38.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
    }
    char v21 = 0;
    uint64_t v20 = "EED2";
    uint64_t v18 = 1;
  }
  while ((v22 & 1) != 0);
  sub_10147A3B4(a1);
  sub_10147A64C(a1);
}

void sub_10147A390(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}