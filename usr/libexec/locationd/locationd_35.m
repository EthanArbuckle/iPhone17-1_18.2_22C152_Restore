uint64_t sub_10177AB1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t vars8;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(unsigned char *)(v3 + 65), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    result = PB::Writer::write(this, *(double *)(v3 + 8), 0xAu);
    if ((*(_WORD *)(v3 + 68) & 0x200) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if (v4) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_23:
  v5 = *(unsigned char *)(v3 + 64);

  return PB::Writer::write(this, v5, 0xBu);
}

double sub_10177AC88(uint64_t a1)
{
  *(void *)a1 = &off_10233A308;
  *(_DWORD *)(a1 + 180) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  return result;
}

void sub_10177ACDC(PB::Base *this)
{
  *(void *)this = &off_10233A308;
  v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }

  PB::Base::~Base(this);
}

void sub_10177ADA0(PB::Base *a1)
{
  sub_10177ACDC(a1);

  operator delete();
}

uint64_t sub_10177ADD8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A308;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 168) = 0;
  if (a1 != a2)
  {
    sub_1000FB43C((char *)(a1 + 128), *(char **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
    sub_1000FB43C(v6, *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
    sub_1000FB43C(v7, *(char **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  }
  if (*(unsigned char *)(a2 + 180))
  {
    int v8 = *(_DWORD *)(a2 + 176);
    *(unsigned char *)(a1 + 180) |= 1u;
    *(_DWORD *)(a1 + 176) = v8;
  }
  if (a1 != a2)
  {
    sub_1000FB43C((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_1000FB43C((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_1000FB43C(v5, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_10177AF30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  v5 = *(unsigned int **)(a1 + 80);
  v6 = *(unsigned int **)(a1 + 88);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    PB::TextFormatter::format(this, "error", v7);
  }
  int v8 = *(unsigned int **)(a1 + 8);
  v9 = *(unsigned int **)(a1 + 16);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    PB::TextFormatter::format(this, "errorX", v10);
  }
  v11 = *(unsigned int **)(a1 + 32);
  v12 = *(unsigned int **)(a1 + 40);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    PB::TextFormatter::format(this, "errorY", v13);
  }
  v14 = *(unsigned int **)(a1 + 56);
  v15 = *(unsigned int **)(a1 + 64);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    PB::TextFormatter::format(this, "errorZ", v16);
  }
  v17 = *(float **)(a1 + 104);
  v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(this, "intercept", v19);
  }
  if (*(unsigned char *)(a1 + 180)) {
    PB::TextFormatter::format(this, "overlap", *(float *)(a1 + 176));
  }
  v20 = *(float **)(a1 + 128);
  v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(this, "slope", v22);
  }
  v23 = *(float **)(a1 + 152);
  v24 = *(float **)(a1 + 160);
  while (v23 != v24)
  {
    float v25 = *v23++;
    PB::TextFormatter::format(this, "temperature", v25);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10177B0D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (void *)(a1 + 72);
    v278 = (void **)(a1 + 32);
    v279 = (void **)(a1 + 56);
    v9 = (void *)(a1 + 48);
    v277 = (void **)(a1 + 8);
    unsigned int v10 = (void *)(a1 + 24);
    v11 = (void *)(a1 + 96);
    v285 = (void **)(a1 + 152);
    uint64_t v283 = a1 + 168;
    v284 = (void **)(a1 + 104);
    uint64_t v282 = a1 + 120;
    v12 = (void **)(a1 + 128);
    v280 = (void **)(a1 + 80);
    uint64_t v281 = a1 + 144;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v81 = v15++ > 8;
        if (v81) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v16 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            v162 = *(char **)(a1 + 136);
            unint64_t v161 = *(void *)(a1 + 144);
            if ((unint64_t)v162 >= v161)
            {
              v177 = (char *)*v12;
              uint64_t v178 = (v162 - (unsigned char *)*v12) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
LABEL_482:
              }
                sub_1001D7FD4();
              uint64_t v180 = v161 - (void)v177;
              if (v180 >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                v182 = (char *)sub_10017EA34(v281, v181);
                v177 = *(char **)(a1 + 128);
                v162 = *(char **)(a1 + 136);
              }
              else
              {
                v182 = 0;
              }
              v219 = &v182[4 * v178];
              *(_DWORD *)v219 = 0;
              v163 = v219 + 4;
              while (v162 != v177)
              {
                int v220 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *((_DWORD *)v219 - 1) = v220;
                v219 -= 4;
              }
              *(void *)(a1 + 128) = v219;
              *(void *)(a1 + 136) = v163;
              *(void *)(a1 + 144) = &v182[4 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *(_DWORD *)v162 = 0;
              v163 = v162 + 4;
            }
            *(void *)(a1 + 136) = v163;
            goto LABEL_374;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          while (v25 < v26 && !*((unsigned char *)this + 24))
          {
            v28 = *(char **)(a1 + 136);
            unint64_t v27 = *(void *)(a1 + 144);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v12;
              uint64_t v31 = (v28 - (unsigned char *)*v12) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                goto LABEL_482;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                v35 = (char *)sub_10017EA34(v281, v34);
                v30 = *(char **)(a1 + 128);
                v28 = *(char **)(a1 + 136);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[4 * v31];
              *(_DWORD *)v36 = 0;
              v29 = v36 + 4;
              while (v28 != v30)
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              *(void *)(a1 + 128) = v36;
              *(void *)(a1 + 136) = v29;
              *(void *)(a1 + 144) = &v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)v28 = 0;
              v29 = v28 + 4;
            }
            *(void *)(a1 + 136) = v29;
            unint64_t v38 = *((void *)this + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
              goto LABEL_295;
            }
            *(v29 - 1) = *(_DWORD *)(*(void *)this + v38);
            unint64_t v26 = *((void *)this + 2);
            unint64_t v25 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v25;
          }
          goto LABEL_296;
        case 2u:
          if (v24 != 2)
          {
            v165 = *(char **)(a1 + 112);
            unint64_t v164 = *(void *)(a1 + 120);
            if ((unint64_t)v165 >= v164)
            {
              v183 = (char *)*v284;
              uint64_t v184 = (v165 - (unsigned char *)*v284) >> 2;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62) {
LABEL_483:
              }
                sub_1001D7FD4();
              uint64_t v186 = v164 - (void)v183;
              if (v186 >> 1 > v185) {
                unint64_t v185 = v186 >> 1;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                v188 = (char *)sub_10017EA34(v282, v187);
                v183 = *(char **)(a1 + 104);
                v165 = *(char **)(a1 + 112);
              }
              else
              {
                v188 = 0;
              }
              v221 = &v188[4 * v184];
              *(_DWORD *)v221 = 0;
              v163 = v221 + 4;
              while (v165 != v183)
              {
                int v222 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v221 - 1) = v222;
                v221 -= 4;
              }
              *(void *)(a1 + 104) = v221;
              *(void *)(a1 + 112) = v163;
              *(void *)(a1 + 120) = &v188[4 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(_DWORD *)v165 = 0;
              v163 = v165 + 4;
            }
            *(void *)(a1 + 112) = v163;
            goto LABEL_374;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)this + 1);
          unint64_t v40 = *((void *)this + 2);
          while (v39 < v40 && !*((unsigned char *)this + 24))
          {
            v42 = *(char **)(a1 + 112);
            unint64_t v41 = *(void *)(a1 + 120);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v284;
              uint64_t v45 = (v42 - (unsigned char *)*v284) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_483;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                v49 = (char *)sub_10017EA34(v282, v48);
                v44 = *(char **)(a1 + 104);
                v42 = *(char **)(a1 + 112);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = 0;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(void *)(a1 + 104) = v50;
              *(void *)(a1 + 112) = v43;
              *(void *)(a1 + 120) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *(void *)(a1 + 112) = v43;
            unint64_t v52 = *((void *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
              goto LABEL_295;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)this + v52);
            unint64_t v40 = *((void *)this + 2);
            unint64_t v39 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v39;
          }
          goto LABEL_296;
        case 3u:
          if (v24 != 2)
          {
            v167 = *(char **)(a1 + 160);
            unint64_t v166 = *(void *)(a1 + 168);
            if ((unint64_t)v167 >= v166)
            {
              v189 = (char *)*v285;
              uint64_t v190 = (v167 - (unsigned char *)*v285) >> 2;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62) {
LABEL_484:
              }
                sub_1001D7FD4();
              uint64_t v192 = v166 - (void)v189;
              if (v192 >> 1 > v191) {
                unint64_t v191 = v192 >> 1;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193)
              {
                v194 = (char *)sub_10017EA34(v283, v193);
                v189 = *(char **)(a1 + 152);
                v167 = *(char **)(a1 + 160);
              }
              else
              {
                v194 = 0;
              }
              v223 = &v194[4 * v190];
              *(_DWORD *)v223 = 0;
              v163 = v223 + 4;
              while (v167 != v189)
              {
                int v224 = *((_DWORD *)v167 - 1);
                v167 -= 4;
                *((_DWORD *)v223 - 1) = v224;
                v223 -= 4;
              }
              *(void *)(a1 + 152) = v223;
              *(void *)(a1 + 160) = v163;
              *(void *)(a1 + 168) = &v194[4 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *(_DWORD *)v167 = 0;
              v163 = v167 + 4;
            }
            *(void *)(a1 + 160) = v163;
LABEL_374:
            unint64_t v225 = *((void *)this + 1);
            if (v225 <= 0xFFFFFFFFFFFFFFFBLL && v225 + 4 <= *((void *)this + 2))
            {
              *(v163 - 1) = *(_DWORD *)(*(void *)this + v225);
LABEL_378:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_376:
              *((unsigned char *)this + 24) = 1;
            }
            goto LABEL_472;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          while (v53 < v54 && !*((unsigned char *)this + 24))
          {
            v56 = *(char **)(a1 + 160);
            unint64_t v55 = *(void *)(a1 + 168);
            if ((unint64_t)v56 >= v55)
            {
              v58 = (char *)*v285;
              uint64_t v59 = (v56 - (unsigned char *)*v285) >> 2;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
                goto LABEL_484;
              }
              uint64_t v61 = v55 - (void)v58;
              if (v61 >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                v63 = (char *)sub_10017EA34(v283, v62);
                v58 = *(char **)(a1 + 152);
                v56 = *(char **)(a1 + 160);
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[4 * v59];
              *(_DWORD *)v64 = 0;
              v57 = v64 + 4;
              while (v56 != v58)
              {
                int v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              *(void *)(a1 + 152) = v64;
              *(void *)(a1 + 160) = v57;
              *(void *)(a1 + 168) = &v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(_DWORD *)v56 = 0;
              v57 = v56 + 4;
            }
            *(void *)(a1 + 160) = v57;
            unint64_t v66 = *((void *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2))
            {
LABEL_295:
              *((unsigned char *)this + 24) = 1;
              goto LABEL_296;
            }
            *(v57 - 1) = *(_DWORD *)(*(void *)this + v66);
            unint64_t v54 = *((void *)this + 2);
            unint64_t v53 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v53;
          }
          goto LABEL_296;
        case 4u:
          *(unsigned char *)(a1 + 180) |= 1u;
          unint64_t v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
            goto LABEL_376;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v67);
          goto LABEL_378;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              v68 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v68 >= *v11)
                {
                  v69 = (char *)*v280;
                  uint64_t v70 = (v68 - (unsigned char *)*v280) >> 2;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62) {
                    goto LABEL_485;
                  }
                  uint64_t v72 = *v11 - (void)v69;
                  if (v72 >> 1 > v71) {
                    unint64_t v71 = v72 >> 1;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  if (v73)
                  {
                    v74 = (char *)sub_10017EA34((uint64_t)v11, v73);
                    v69 = *(char **)(a1 + 80);
                    v68 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v74 = 0;
                  }
                  v75 = &v74[4 * v70];
                  *(_DWORD *)v75 = 0;
                  v76 = v75 + 4;
                  while (v68 != v69)
                  {
                    int v77 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v75 - 1) = v77;
                    v75 -= 4;
                  }
                  *(void *)(a1 + 80) = v75;
                  *(void *)(a1 + 88) = v76;
                  *(void *)(a1 + 96) = &v74[4 * v73];
                  if (v69) {
                    operator delete(v69);
                  }
                  v68 = v76;
                }
                else
                {
                  *(_DWORD *)v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 88) = v68;
                unint64_t v79 = *((void *)this + 1);
                unint64_t v78 = *((void *)this + 2);
                uint64_t v80 = *(void *)this;
                BOOL v81 = v79 > 0xFFFFFFFFFFFFFFF5 || v79 + 10 > v78;
                if (v81)
                {
                  char v82 = 0;
                  unsigned int v83 = 0;
                  uint64_t v89 = 0;
                  if (v78 <= v79) {
                    uint64_t v84 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v84 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v84 == v79) {
                      goto LABEL_280;
                    }
                    unint64_t v85 = v79++;
                    char v86 = *(unsigned char *)(v80 + v85);
                    *((void *)this + 1) = v79;
                    v89 |= (unint64_t)(v86 & 0x7F) << v82;
                    if ((v86 & 0x80) == 0) {
                      break;
                    }
                    v82 += 7;
                    BOOL v81 = v83++ > 8;
                    if (v81)
                    {
                      LODWORD(v89) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v89) = 0;
                  }
LABEL_141:
                  unint64_t v90 = v85 + 1;
                }
                else
                {
                  char v87 = 0;
                  unsigned int v88 = 0;
                  uint64_t v89 = 0;
                  while (1)
                  {
                    unint64_t v90 = v79 + 1;
                    *((void *)this + 1) = v79 + 1;
                    char v91 = *(unsigned char *)(v80 + v79);
                    v89 |= (unint64_t)(v91 & 0x7F) << v87;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v87 += 7;
                    unint64_t v79 = v90;
                    BOOL v81 = v88++ > 8;
                    if (v81)
                    {
                      LODWORD(v89) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v89;
              }
              while (v90 < v78 && !*((unsigned char *)this + 24));
            }
            goto LABEL_296;
          }
          v169 = *(char **)(a1 + 88);
          unint64_t v168 = *(void *)(a1 + 96);
          if ((unint64_t)v169 >= v168)
          {
            v195 = (char *)*v280;
            uint64_t v196 = (v169 - (unsigned char *)*v280) >> 2;
            unint64_t v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 62) {
LABEL_485:
            }
              sub_1001D7FD4();
            uint64_t v198 = v168 - (void)v195;
            if (v198 >> 1 > v197) {
              unint64_t v197 = v198 >> 1;
            }
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v199 = v197;
            }
            if (v199)
            {
              v200 = (char *)sub_10017EA34((uint64_t)v11, v199);
              v195 = *(char **)(a1 + 80);
              v169 = *(char **)(a1 + 88);
            }
            else
            {
              v200 = 0;
            }
            v226 = &v200[4 * v196];
            *(_DWORD *)v226 = 0;
            v170 = v226 + 4;
            while (v169 != v195)
            {
              int v227 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v226 - 1) = v227;
              v226 -= 4;
            }
            *(void *)(a1 + 80) = v226;
            *(void *)(a1 + 88) = v170;
            *(void *)(a1 + 96) = &v200[4 * v199];
            if (v195) {
              operator delete(v195);
            }
          }
          else
          {
            *(_DWORD *)v169 = 0;
            v170 = v169 + 4;
          }
          *(void *)(a1 + 88) = v170;
          unint64_t v228 = *((void *)this + 1);
          unint64_t v229 = *((void *)this + 2);
          uint64_t v230 = *(void *)this;
          char v231 = 0;
          unsigned int v232 = 0;
          if (v228 <= 0xFFFFFFFFFFFFFFF5 && v228 + 10 <= v229)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v237 = v228 + 1;
              *((void *)this + 1) = v228 + 1;
              char v238 = *(unsigned char *)(v230 + v228);
              v236 |= (unint64_t)(v238 & 0x7F) << v231;
              if ((v238 & 0x80) == 0) {
                goto LABEL_471;
              }
              v231 += 7;
              unint64_t v228 = v237;
              BOOL v81 = v232++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v229 <= v228) {
            unint64_t v229 = *((void *)this + 1);
          }
          while (v229 != v228)
          {
            unint64_t v234 = v228 + 1;
            char v235 = *(unsigned char *)(v230 + v228);
            *((void *)this + 1) = v234;
            v236 |= (unint64_t)(v235 & 0x7F) << v231;
            if ((v235 & 0x80) == 0) {
              goto LABEL_464;
            }
            v231 += 7;
            unint64_t v228 = v234;
            BOOL v81 = v232++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              v68 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v68 >= *v10)
                {
                  v92 = (char *)*v277;
                  uint64_t v93 = (v68 - (unsigned char *)*v277) >> 2;
                  unint64_t v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62) {
                    goto LABEL_486;
                  }
                  uint64_t v95 = *v10 - (void)v92;
                  if (v95 >> 1 > v94) {
                    unint64_t v94 = v95 >> 1;
                  }
                  if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v96 = v94;
                  }
                  if (v96)
                  {
                    v97 = (char *)sub_10017EA34((uint64_t)v10, v96);
                    v92 = *(char **)(a1 + 8);
                    v68 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v97 = 0;
                  }
                  v98 = &v97[4 * v93];
                  *(_DWORD *)v98 = 0;
                  v99 = v98 + 4;
                  while (v68 != v92)
                  {
                    int v100 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v98 - 1) = v100;
                    v98 -= 4;
                  }
                  *(void *)(a1 + 8) = v98;
                  *(void *)(a1 + 16) = v99;
                  *(void *)(a1 + 24) = &v97[4 * v96];
                  if (v92) {
                    operator delete(v92);
                  }
                  v68 = v99;
                }
                else
                {
                  *(_DWORD *)v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 16) = v68;
                unint64_t v102 = *((void *)this + 1);
                unint64_t v101 = *((void *)this + 2);
                uint64_t v103 = *(void *)this;
                if (v102 > 0xFFFFFFFFFFFFFFF5 || v102 + 10 > v101)
                {
                  char v105 = 0;
                  unsigned int v106 = 0;
                  uint64_t v112 = 0;
                  if (v101 <= v102) {
                    uint64_t v107 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v107 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v107 == v102) {
                      goto LABEL_280;
                    }
                    unint64_t v108 = v102++;
                    char v109 = *(unsigned char *)(v103 + v108);
                    *((void *)this + 1) = v102;
                    v112 |= (unint64_t)(v109 & 0x7F) << v105;
                    if ((v109 & 0x80) == 0) {
                      break;
                    }
                    v105 += 7;
                    BOOL v81 = v106++ > 8;
                    if (v81)
                    {
                      LODWORD(v112) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v112) = 0;
                  }
LABEL_186:
                  unint64_t v113 = v108 + 1;
                }
                else
                {
                  char v110 = 0;
                  unsigned int v111 = 0;
                  uint64_t v112 = 0;
                  while (1)
                  {
                    unint64_t v113 = v102 + 1;
                    *((void *)this + 1) = v102 + 1;
                    char v114 = *(unsigned char *)(v103 + v102);
                    v112 |= (unint64_t)(v114 & 0x7F) << v110;
                    if ((v114 & 0x80) == 0) {
                      break;
                    }
                    v110 += 7;
                    unint64_t v102 = v113;
                    BOOL v81 = v111++ > 8;
                    if (v81)
                    {
                      LODWORD(v112) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v112;
              }
              while (v113 < v101 && !*((unsigned char *)this + 24));
            }
            goto LABEL_296;
          }
          v172 = *(char **)(a1 + 16);
          unint64_t v171 = *(void *)(a1 + 24);
          if ((unint64_t)v172 >= v171)
          {
            v201 = (char *)*v277;
            uint64_t v202 = (v172 - (unsigned char *)*v277) >> 2;
            unint64_t v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 62) {
LABEL_486:
            }
              sub_1001D7FD4();
            uint64_t v204 = v171 - (void)v201;
            if (v204 >> 1 > v203) {
              unint64_t v203 = v204 >> 1;
            }
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v205 = v203;
            }
            if (v205)
            {
              v206 = (char *)sub_10017EA34((uint64_t)v10, v205);
              v201 = *(char **)(a1 + 8);
              v172 = *(char **)(a1 + 16);
            }
            else
            {
              v206 = 0;
            }
            v239 = &v206[4 * v202];
            *(_DWORD *)v239 = 0;
            v170 = v239 + 4;
            while (v172 != v201)
            {
              int v240 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *((_DWORD *)v239 - 1) = v240;
              v239 -= 4;
            }
            *(void *)(a1 + 8) = v239;
            *(void *)(a1 + 16) = v170;
            *(void *)(a1 + 24) = &v206[4 * v205];
            if (v201) {
              operator delete(v201);
            }
          }
          else
          {
            *(_DWORD *)v172 = 0;
            v170 = v172 + 4;
          }
          *(void *)(a1 + 16) = v170;
          unint64_t v241 = *((void *)this + 1);
          unint64_t v242 = *((void *)this + 2);
          uint64_t v243 = *(void *)this;
          char v244 = 0;
          unsigned int v245 = 0;
          if (v241 <= 0xFFFFFFFFFFFFFFF5 && v241 + 10 <= v242)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v249 = v241 + 1;
              *((void *)this + 1) = v241 + 1;
              char v250 = *(unsigned char *)(v243 + v241);
              v236 |= (unint64_t)(v250 & 0x7F) << v244;
              if ((v250 & 0x80) == 0) {
                goto LABEL_471;
              }
              v244 += 7;
              unint64_t v241 = v249;
              BOOL v81 = v245++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v242 <= v241) {
            unint64_t v242 = *((void *)this + 1);
          }
          while (v242 != v241)
          {
            unint64_t v247 = v241 + 1;
            char v248 = *(unsigned char *)(v243 + v241);
            *((void *)this + 1) = v247;
            v236 |= (unint64_t)(v248 & 0x7F) << v244;
            if ((v248 & 0x80) == 0) {
              goto LABEL_464;
            }
            v244 += 7;
            unint64_t v241 = v247;
            BOOL v81 = v245++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 7u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              v68 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v68 >= *v9)
                {
                  v115 = (char *)*v278;
                  uint64_t v116 = (v68 - (unsigned char *)*v278) >> 2;
                  unint64_t v117 = v116 + 1;
                  if ((unint64_t)(v116 + 1) >> 62) {
                    goto LABEL_487;
                  }
                  uint64_t v118 = *v9 - (void)v115;
                  if (v118 >> 1 > v117) {
                    unint64_t v117 = v118 >> 1;
                  }
                  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v119 = v117;
                  }
                  if (v119)
                  {
                    v120 = (char *)sub_10017EA34((uint64_t)v9, v119);
                    v115 = *(char **)(a1 + 32);
                    v68 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v120 = 0;
                  }
                  v121 = &v120[4 * v116];
                  *(_DWORD *)v121 = 0;
                  v122 = v121 + 4;
                  while (v68 != v115)
                  {
                    int v123 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v121 - 1) = v123;
                    v121 -= 4;
                  }
                  *(void *)(a1 + 32) = v121;
                  *(void *)(a1 + 40) = v122;
                  *(void *)(a1 + 48) = &v120[4 * v119];
                  if (v115) {
                    operator delete(v115);
                  }
                  v68 = v122;
                }
                else
                {
                  *(_DWORD *)v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 40) = v68;
                unint64_t v125 = *((void *)this + 1);
                unint64_t v124 = *((void *)this + 2);
                uint64_t v126 = *(void *)this;
                if (v125 > 0xFFFFFFFFFFFFFFF5 || v125 + 10 > v124)
                {
                  char v128 = 0;
                  unsigned int v129 = 0;
                  uint64_t v135 = 0;
                  if (v124 <= v125) {
                    uint64_t v130 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v130 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v130 == v125) {
                      goto LABEL_280;
                    }
                    unint64_t v131 = v125++;
                    char v132 = *(unsigned char *)(v126 + v131);
                    *((void *)this + 1) = v125;
                    v135 |= (unint64_t)(v132 & 0x7F) << v128;
                    if ((v132 & 0x80) == 0) {
                      break;
                    }
                    v128 += 7;
                    BOOL v81 = v129++ > 8;
                    if (v81)
                    {
                      LODWORD(v135) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v135) = 0;
                  }
LABEL_231:
                  unint64_t v136 = v131 + 1;
                }
                else
                {
                  char v133 = 0;
                  unsigned int v134 = 0;
                  uint64_t v135 = 0;
                  while (1)
                  {
                    unint64_t v136 = v125 + 1;
                    *((void *)this + 1) = v125 + 1;
                    char v137 = *(unsigned char *)(v126 + v125);
                    v135 |= (unint64_t)(v137 & 0x7F) << v133;
                    if ((v137 & 0x80) == 0) {
                      break;
                    }
                    v133 += 7;
                    unint64_t v125 = v136;
                    BOOL v81 = v134++ > 8;
                    if (v81)
                    {
                      LODWORD(v135) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v135;
              }
              while (v136 < v124 && !*((unsigned char *)this + 24));
            }
            goto LABEL_296;
          }
          v174 = *(char **)(a1 + 40);
          unint64_t v173 = *(void *)(a1 + 48);
          if ((unint64_t)v174 >= v173)
          {
            v207 = (char *)*v278;
            uint64_t v208 = (v174 - (unsigned char *)*v278) >> 2;
            unint64_t v209 = v208 + 1;
            if ((unint64_t)(v208 + 1) >> 62) {
LABEL_487:
            }
              sub_1001D7FD4();
            uint64_t v210 = v173 - (void)v207;
            if (v210 >> 1 > v209) {
              unint64_t v209 = v210 >> 1;
            }
            if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v211 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v211 = v209;
            }
            if (v211)
            {
              v212 = (char *)sub_10017EA34((uint64_t)v9, v211);
              v207 = *(char **)(a1 + 32);
              v174 = *(char **)(a1 + 40);
            }
            else
            {
              v212 = 0;
            }
            v251 = &v212[4 * v208];
            *(_DWORD *)v251 = 0;
            v170 = v251 + 4;
            while (v174 != v207)
            {
              int v252 = *((_DWORD *)v174 - 1);
              v174 -= 4;
              *((_DWORD *)v251 - 1) = v252;
              v251 -= 4;
            }
            *(void *)(a1 + 32) = v251;
            *(void *)(a1 + 40) = v170;
            *(void *)(a1 + 48) = &v212[4 * v211];
            if (v207) {
              operator delete(v207);
            }
          }
          else
          {
            *(_DWORD *)v174 = 0;
            v170 = v174 + 4;
          }
          *(void *)(a1 + 40) = v170;
          unint64_t v253 = *((void *)this + 1);
          unint64_t v254 = *((void *)this + 2);
          uint64_t v255 = *(void *)this;
          char v256 = 0;
          unsigned int v257 = 0;
          if (v253 <= 0xFFFFFFFFFFFFFFF5 && v253 + 10 <= v254)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v261 = v253 + 1;
              *((void *)this + 1) = v253 + 1;
              char v262 = *(unsigned char *)(v255 + v253);
              v236 |= (unint64_t)(v262 & 0x7F) << v256;
              if ((v262 & 0x80) == 0) {
                goto LABEL_471;
              }
              v256 += 7;
              unint64_t v253 = v261;
              BOOL v81 = v257++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v254 <= v253) {
            unint64_t v254 = *((void *)this + 1);
          }
          while (v254 != v253)
          {
            unint64_t v259 = v253 + 1;
            char v260 = *(unsigned char *)(v255 + v253);
            *((void *)this + 1) = v259;
            v236 |= (unint64_t)(v260 & 0x7F) << v256;
            if ((v260 & 0x80) == 0) {
              goto LABEL_464;
            }
            v256 += 7;
            unint64_t v253 = v259;
            BOOL v81 = v257++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 8u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              v68 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v68 >= *v8)
                {
                  v138 = (char *)*v279;
                  uint64_t v139 = (v68 - (unsigned char *)*v279) >> 2;
                  unint64_t v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 62) {
                    goto LABEL_488;
                  }
                  uint64_t v141 = *v8 - (void)v138;
                  if (v141 >> 1 > v140) {
                    unint64_t v140 = v141 >> 1;
                  }
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v142 = v140;
                  }
                  if (v142)
                  {
                    v143 = (char *)sub_10017EA34((uint64_t)v8, v142);
                    v138 = *(char **)(a1 + 56);
                    v68 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v143 = 0;
                  }
                  v144 = &v143[4 * v139];
                  *(_DWORD *)v144 = 0;
                  v145 = v144 + 4;
                  while (v68 != v138)
                  {
                    int v146 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v144 - 1) = v146;
                    v144 -= 4;
                  }
                  *(void *)(a1 + 56) = v144;
                  *(void *)(a1 + 64) = v145;
                  *(void *)(a1 + 72) = &v143[4 * v142];
                  if (v138) {
                    operator delete(v138);
                  }
                  v68 = v145;
                }
                else
                {
                  *(_DWORD *)v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 64) = v68;
                unint64_t v148 = *((void *)this + 1);
                unint64_t v147 = *((void *)this + 2);
                uint64_t v149 = *(void *)this;
                if (v148 <= 0xFFFFFFFFFFFFFFF5 && v148 + 10 <= v147)
                {
                  char v156 = 0;
                  unsigned int v157 = 0;
                  uint64_t v158 = 0;
                  while (1)
                  {
                    unint64_t v159 = v148 + 1;
                    *((void *)this + 1) = v148 + 1;
                    char v160 = *(unsigned char *)(v149 + v148);
                    v158 |= (unint64_t)(v160 & 0x7F) << v156;
                    if ((v160 & 0x80) == 0) {
                      goto LABEL_277;
                    }
                    v156 += 7;
                    unint64_t v148 = v159;
                    BOOL v81 = v157++ > 8;
                    if (v81)
                    {
                      LODWORD(v158) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                char v151 = 0;
                unsigned int v152 = 0;
                uint64_t v158 = 0;
                if (v147 <= v148) {
                  uint64_t v153 = *((void *)this + 1);
                }
                else {
                  uint64_t v153 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v153 == v148)
                  {
LABEL_280:
                    *((unsigned char *)this + 24) = 1;
                    *((_DWORD *)v68 - 1) = 0;
                    goto LABEL_296;
                  }
                  unint64_t v154 = v148++;
                  char v155 = *(unsigned char *)(v149 + v154);
                  *((void *)this + 1) = v148;
                  v158 |= (unint64_t)(v155 & 0x7F) << v151;
                  if ((v155 & 0x80) == 0) {
                    break;
                  }
                  v151 += 7;
                  BOOL v81 = v152++ > 8;
                  if (v81)
                  {
                    LODWORD(v158) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v158) = 0;
                }
LABEL_276:
                unint64_t v159 = v154 + 1;
LABEL_277:
                *((_DWORD *)v68 - 1) = v158;
              }
              while (v159 < v147 && !*((unsigned char *)this + 24));
            }
LABEL_296:
            PB::Reader::recallMark();
          }
          else
          {
            v176 = *(char **)(a1 + 64);
            unint64_t v175 = *(void *)(a1 + 72);
            if ((unint64_t)v176 >= v175)
            {
              v213 = (char *)*v279;
              uint64_t v214 = (v176 - (unsigned char *)*v279) >> 2;
              unint64_t v215 = v214 + 1;
              if ((unint64_t)(v214 + 1) >> 62) {
LABEL_488:
              }
                sub_1001D7FD4();
              uint64_t v216 = v175 - (void)v213;
              if (v216 >> 1 > v215) {
                unint64_t v215 = v216 >> 1;
              }
              if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v217 = v215;
              }
              if (v217)
              {
                v218 = (char *)sub_10017EA34((uint64_t)v8, v217);
                v213 = *(char **)(a1 + 56);
                v176 = *(char **)(a1 + 64);
              }
              else
              {
                v218 = 0;
              }
              v263 = &v218[4 * v214];
              *(_DWORD *)v263 = 0;
              v170 = v263 + 4;
              while (v176 != v213)
              {
                int v264 = *((_DWORD *)v176 - 1);
                v176 -= 4;
                *((_DWORD *)v263 - 1) = v264;
                v263 -= 4;
              }
              *(void *)(a1 + 56) = v263;
              *(void *)(a1 + 64) = v170;
              *(void *)(a1 + 72) = &v218[4 * v217];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              *(_DWORD *)v176 = 0;
              v170 = v176 + 4;
            }
            *(void *)(a1 + 64) = v170;
            unint64_t v265 = *((void *)this + 1);
            unint64_t v266 = *((void *)this + 2);
            uint64_t v267 = *(void *)this;
            char v268 = 0;
            unsigned int v269 = 0;
            if (v265 > 0xFFFFFFFFFFFFFFF5 || v265 + 10 > v266)
            {
              uint64_t v236 = 0;
              if (v266 <= v265) {
                unint64_t v266 = *((void *)this + 1);
              }
              while (v266 != v265)
              {
                unint64_t v271 = v265 + 1;
                char v272 = *(unsigned char *)(v267 + v265);
                *((void *)this + 1) = v271;
                v236 |= (unint64_t)(v272 & 0x7F) << v268;
                if ((v272 & 0x80) == 0)
                {
LABEL_464:
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v236) = 0;
                  }
                  goto LABEL_471;
                }
                v268 += 7;
                unint64_t v265 = v271;
                BOOL v81 = v269++ > 8;
                if (v81)
                {
LABEL_470:
                  LODWORD(v236) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v236) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              uint64_t v236 = 0;
              while (1)
              {
                unint64_t v273 = v265 + 1;
                *((void *)this + 1) = v265 + 1;
                char v274 = *(unsigned char *)(v267 + v265);
                v236 |= (unint64_t)(v274 & 0x7F) << v268;
                if ((v274 & 0x80) == 0) {
                  break;
                }
                v268 += 7;
                unint64_t v265 = v273;
                BOOL v81 = v269++ > 8;
                if (v81) {
                  goto LABEL_470;
                }
              }
            }
LABEL_471:
            *(v170 - 1) = v236;
          }
LABEL_472:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v16 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_472;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10177C4B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(float **)(result + 128);
  v5 = *(float **)(result + 136);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }
  unsigned int v7 = *(float **)(v3 + 104);
  int v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }
  unsigned int v10 = *(float **)(v3 + 152);
  v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 3u);
  }
  if (*(unsigned char *)(v3 + 180)) {
    double result = PB::Writer::write(this, *(float *)(v3 + 176), 4u);
  }
  uint64_t v13 = *(unsigned int **)(v3 + 80);
  char v14 = *(unsigned int **)(v3 + 88);
  while (v13 != v14)
  {
    unsigned int v15 = *v13++;
    double result = PB::Writer::writeVarInt(this, v15, 5u);
  }
  unint64_t v16 = *(unsigned int **)(v3 + 8);
  unint64_t v17 = *(unsigned int **)(v3 + 16);
  while (v16 != v17)
  {
    unsigned int v18 = *v16++;
    double result = PB::Writer::writeVarInt(this, v18, 6u);
  }
  char v19 = *(unsigned int **)(v3 + 32);
  unsigned int v20 = *(unsigned int **)(v3 + 40);
  while (v19 != v20)
  {
    unsigned int v21 = *v19++;
    double result = PB::Writer::writeVarInt(this, v21, 7u);
  }
  v23 = *(unsigned int **)(v3 + 56);
  char v22 = *(unsigned int **)(v3 + 64);
  while (v23 != v22)
  {
    unsigned int v24 = *v23++;
    double result = PB::Writer::writeVarInt(this, v24, 8u);
  }
  return result;
}

uint64_t sub_10177C5D8(uint64_t result)
{
  *(void *)double result = &off_10233A340;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10177C600(PB::Base *this)
{
  *(void *)this = &off_10233A340;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10177C664(PB::Base *a1)
{
  sub_10177C600(a1);

  operator delete();
}

uint64_t sub_10177C69C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A340;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = 1;
    *(void *)(a1 + 32) = v4;
  }
  if (a1 != a2) {
    sub_1002DD194(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

uint64_t sub_10177C724(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  float v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "pose", v7);
  }
  if (*(unsigned char *)(a1 + 40)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10177C7C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    do
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 != 2)
        {
          unint64_t v40 = *(char **)(a1 + 16);
          unint64_t v39 = *(void *)(a1 + 24);
          if ((unint64_t)v40 >= v39)
          {
            v42 = (char *)*v8;
            uint64_t v43 = (v40 - (unsigned char *)*v8) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_84:
            }
              sub_1001D7FD4();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              uint64_t v47 = (char *)sub_1000DA54C(v9, v46);
              v42 = *(char **)(a1 + 8);
              unint64_t v40 = *(char **)(a1 + 16);
            }
            else
            {
              uint64_t v47 = 0;
            }
            unint64_t v48 = &v47[8 * v43];
            *(void *)unint64_t v48 = 0;
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(void *)(a1 + 8) = v48;
            *(void *)(a1 + 16) = v41;
            *(void *)(a1 + 24) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(void *)unint64_t v40 = 0;
            unint64_t v41 = v40 + 8;
          }
          *(void *)(a1 + 16) = v41;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2))
          {
LABEL_73:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v41 - 1) = *(void *)(*(void *)this + v50);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        while (v25 < v26 && !*((unsigned char *)this + 24))
        {
          v28 = *(char **)(a1 + 16);
          unint64_t v27 = *(void *)(a1 + 24);
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v8;
            uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_84;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              v35 = (char *)sub_1000DA54C(v9, v34);
              v30 = *(char **)(a1 + 8);
              v28 = *(char **)(a1 + 16);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(void *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            *(void *)(a1 + 8) = v36;
            *(void *)(a1 + 16) = v29;
            *(void *)(a1 + 24) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)v28 = 0;
            v29 = v28 + 8;
          }
          *(void *)(a1 + 16) = v29;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)this + 2))
          {
            *((unsigned char *)this + 24) = 1;
            break;
          }
          *(v29 - 1) = *(void *)(*(void *)this + v38);
          unint64_t v26 = *((void *)this + 2);
          unint64_t v25 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v25;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v23 == 1)
        {
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
            goto LABEL_73;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v24);
LABEL_75:
          *((void *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_10177CB74(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 40)) {
    double result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  }
  v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    double result = PB::Writer::write(this, v6, 2u);
  }
  return result;
}

uint64_t sub_10177CBD8(uint64_t result)
{
  *(void *)double result = &off_10233A378;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_10177CC00(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10177CC38(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10233A378;
  *(_DWORD *)(result + 100) = 0;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    __int16 v3 = 128;
    *(_WORD *)(result + 100) = 128;
    *(void *)(result + 64) = v4;
    __int16 v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 100) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 100);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 100) = v3;
    *(void *)(result + 8) = v6;
    __int16 v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 24) = v7;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v8 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 56) = v8;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v9 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 48) = v9;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v10 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 40) = v10;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v11 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 32) = v11;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v12 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 72) = v12;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 84) = v13;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v14 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v14;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v15 = *(_DWORD *)(a2 + 92);
  v3 |= 0x1000u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 92) = v15;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      return result;
    }
LABEL_30:
    char v17 = *(unsigned char *)(a2 + 96);
    *(_WORD *)(result + 100) = v3 | 0x2000;
    *(unsigned char *)(result + 96) = v17;
    return result;
  }
LABEL_29:
  int v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 80) = v16;
  if ((*(_WORD *)(a2 + 100) & 0x2000) != 0) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_10177CDEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 100);
  if (v5)
  {
    PB::TextFormatter::format(this, "accuracy", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "gpsAltitude", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "gpsSpeedAccuracy", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 84));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "quality", *(_DWORD *)(a1 + 88));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "rawSpeed", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "trackRunOdometerHasBeenCorrected", *(unsigned char *)(a1 + 96));
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 92));
LABEL_16:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177CFF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 2u:
              *(_WORD *)(a1 + 100) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 3u:
              *(_WORD *)(a1 + 100) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 4u:
              *(_WORD *)(a1 + 100) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 7u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 8u:
              *(_WORD *)(a1 + 100) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
LABEL_112:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_117;
                  }
                  unint64_t v49 = v21++;
                  char v50 = *(unsigned char *)(v22 + v49);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_116;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_117;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_133;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_122;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_121;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_122;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_133;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v57 = v33++;
                  char v58 = *(unsigned char *)(v34 + v57);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_126;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 92) = v37;
              goto LABEL_133;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x200u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v61 = v39++;
                  char v62 = *(unsigned char *)(v40 + v61);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_131;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 80) = v43;
LABEL_133:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 100) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 96) = v46;
              goto LABEL_133;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_133;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10177D79C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 9u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xDu);
    if ((*(_WORD *)(v3 + 100) & 0x2000) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x2000) == 0) {
    return result;
  }
LABEL_29:
  char v5 = *(unsigned char *)(v3 + 96);

  return PB::Writer::write(this, v5, 0xEu);
}

uint64_t sub_10177D95C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A3B0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_10177D984(PB::Base *this)
{
  *(void *)this = &off_10233A3B0;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_10177DA08(PB::Base *a1)
{
  sub_10177D984(a1);

  operator delete();
}

uint64_t sub_10177DA40(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A3B0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  if (*(void *)(a2 + 72)) {
    operator new();
  }
  char v2 = *(unsigned char *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    *(unsigned char *)(result + 80) |= 4u;
    *(void *)(result + 24) = v4;
    char v2 = *(unsigned char *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_5:
      if ((v2 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(result + 80) |= 8u;
  *(void *)(result + 32) = v5;
  char v2 = *(unsigned char *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_6:
    if ((v2 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v6 = *(void *)(a2 + 56);
  *(unsigned char *)(result + 80) |= 0x40u;
  *(void *)(result + 56) = v6;
  char v2 = *(unsigned char *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_7:
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(result + 80) |= 0x80u;
  *(void *)(result + 64) = v7;
  char v2 = *(unsigned char *)(a2 + 80);
  if ((v2 & 2) == 0)
  {
LABEL_8:
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *(void *)(a2 + 16);
  *(unsigned char *)(result + 80) |= 2u;
  *(void *)(result + 16) = v8;
  char v2 = *(unsigned char *)(a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = *(void *)(a2 + 8);
  *(unsigned char *)(result + 80) |= 1u;
  *(void *)(result + 8) = v9;
  char v2 = *(unsigned char *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_19:
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 80) |= 0x20u;
  *(void *)(result + 48) = v10;
  if ((*(unsigned char *)(a2 + 80) & 0x10) == 0) {
    return result;
  }
LABEL_11:
  uint64_t v3 = *(void *)(a2 + 40);
  *(unsigned char *)(result + 80) |= 0x10u;
  *(void *)(result + 40) = v3;
  return result;
}

uint64_t sub_10177DBF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 80);
  if (v5)
  {
    PB::TextFormatter::format(this, "gpsCourseAccuracy", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(a1 + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsCourseRadians", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 40));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    PB::TextFormatter::format(this, "smoothedGPSAltitude", *(double *)(a1 + 56));
    if ((*(unsigned char *)(a1 + 80) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_19:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 48));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 0x40) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  PB::TextFormatter::format(this, "smoothedGPSAltitudeUncertainty", *(double *)(a1 + 64));
LABEL_9:
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177DD6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              *(unsigned char *)(a1 + 80) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v21);
              goto LABEL_50;
            case 3u:
              *(unsigned char *)(a1 + 80) |= 8u;
              unint64_t v22 = *((void *)this + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
              goto LABEL_50;
            case 4u:
              *(unsigned char *)(a1 + 80) |= 0x40u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v23);
              goto LABEL_50;
            case 5u:
              *(unsigned char *)(a1 + 80) |= 0x80u;
              unint64_t v24 = *((void *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v24);
              goto LABEL_50;
            case 6u:
              *(unsigned char *)(a1 + 80) |= 2u;
              unint64_t v25 = *((void *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v25);
              goto LABEL_50;
            case 7u:
              *(unsigned char *)(a1 + 80) |= 1u;
              unint64_t v26 = *((void *)this + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v26);
              goto LABEL_50;
            case 8u:
              *(unsigned char *)(a1 + 80) |= 0x20u;
              unint64_t v27 = *((void *)this + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v27);
              goto LABEL_50;
            case 9u:
              *(unsigned char *)(a1 + 80) |= 0x10u;
              unint64_t v28 = *((void *)this + 1);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v28);
LABEL_50:
                *((void *)this + 1) += 8;
              }
              else
              {
LABEL_48:
                *((unsigned char *)this + 24) = 1;
              }
LABEL_51:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_51;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10177E1A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 72);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
    char v5 = *(unsigned char *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 5u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
    if ((*(unsigned char *)(v3 + 80) & 0x10) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v5 & 0x10) == 0) {
    return result;
  }
LABEL_19:
  double v6 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v6, 9u);
}

uint64_t sub_10177E2D0(uint64_t result)
{
  if (!*(void *)(result + 72)) {
    operator new();
  }
  return result;
}

uint64_t sub_10177E37C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A3E8;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_10177E3A4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10177E3DC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A3E8;
  *(_DWORD *)(result + 68) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 52);
    __int16 v3 = 64;
    *(_WORD *)(result + 68) = 64;
    *(_DWORD *)(result + 52) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 56);
    v3 |= 0x80u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 68) = v3;
    *(void *)(result + 16) = v6;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 8) = v7;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v8 = *(unsigned char *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(unsigned char *)(result + 64) = v8;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 40) = v9;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v10 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 32) = v10;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 24) = v11;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_22:
    int v13 = *(_DWORD *)(a2 + 48);
    *(_WORD *)(result + 68) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v13;
    return result;
  }
LABEL_21:
  int v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v12;
  if ((*(_WORD *)(a2 + 68) & 0x20) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_10177E520(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if (v5)
  {
    PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "context", *(_DWORD *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "dataSource", *(_DWORD *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "error", *(unsigned char *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "interpolation", *(_DWORD *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "sinceLastGood", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  if ((*(_WORD *)(a1 + 68) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
LABEL_12:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177E6A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  unint64_t v49 = v20++;
                  char v50 = *(unsigned char *)(v21 + v49);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_104:
                unint64_t v2 = v49 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_105;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *(_DWORD *)(a1 + 52) = v24;
              goto LABEL_121;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_109;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_121;
            case 3u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 4u:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 64) = v34;
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_100:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_54:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v57 = v35++;
                  char v58 = *(unsigned char *)(v36 + v57);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_114;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_121;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  unint64_t v61 = v41++;
                  char v62 = *(unsigned char *)(v42 + v61);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_119;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_120;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 48) = v45;
LABEL_121:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_121;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10177ED60(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 52), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 64), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 9u);
    if ((*(_WORD *)(v3 + 68) & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_21:
  unsigned int v5 = *(_DWORD *)(v3 + 48);

  return PB::Writer::writeVarInt(this, v5, 0xAu);
}

uint64_t sub_10177EEB0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A420;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10177EED8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10177EF10(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A420;
  *(_DWORD *)(result + 20) = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10177EF74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177EFF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10177F280(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(this, v5, 2u);
  }
  return result;
}

void *sub_10177F2EC(void *result)
{
  *uint64_t result = &off_10233A458;
  result[1] = 0;
  return result;
}

void sub_10177F310(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10177F348(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A458;
  *(void *)(result + 8) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10177F380(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177F3E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10177F618(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_10177F638(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A490;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10177F660(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10177F698(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A490;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10177F734(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177F7F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10177FA78(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_10177FB20(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A4C8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10177FB48(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10177FB80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A4C8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10177FC1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10177FCE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10177FF60(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_101780008(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A500;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101780030(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101780068(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A500;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_101780104(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017801C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101780448(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

double sub_1017804F0(uint64_t a1)
{
  *(void *)a1 = &off_10233A538;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101780524(PB::Base *this)
{
  *(void *)this = &off_10233A538;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101780598(PB::Base *a1)
{
  sub_101780524(a1);

  operator delete();
}

uint64_t sub_1017805D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A538;
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 72) = 1;
    *(void *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_1000FB43C((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  char v6 = *(unsigned char *)(a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 8) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    char v10 = *(unsigned char *)(a2 + 69);
    *(unsigned char *)(a1 + 72) |= 8u;
    *(unsigned char *)(a1 + 69) = v10;
    if ((*(unsigned char *)(a2 + 72) & 4) == 0) {
      return a1;
    }
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 64) = v9;
  char v6 = *(unsigned char *)(a2 + 72);
  if ((v6 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    char v7 = *(unsigned char *)(a2 + 68);
    *(unsigned char *)(a1 + 72) |= 4u;
    *(unsigned char *)(a1 + 68) = v7;
  }
  return a1;
}

uint64_t sub_1017806D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dotVector", v7);
  }
  if ((*(unsigned char *)(a1 + 72) & 4) != 0) {
    PB::TextFormatter::format(this, "hasValidTNBFrame", *(unsigned char *)(a1 + 68));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  int v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "headingVector", v10);
  }
  char v11 = *(unsigned char *)(a1 + 72);
  if ((v11 & 8) != 0)
  {
    PB::TextFormatter::format(this, "isPedestrian", *(unsigned char *)(a1 + 69));
    char v11 = *(unsigned char *)(a1 + 72);
    if ((v11 & 1) == 0)
    {
LABEL_9:
      if ((v11 & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(a1 + 72) & 1) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 72) & 2) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "uncertainty", *(float *)(a1 + 64));
LABEL_11:

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1017807FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 72) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v25);
          uint64_t v26 = *((void *)this + 1) + 8;
          goto LABEL_128;
        case 2u:
          if (v24 != 2)
          {
            int v65 = *(char **)(a1 + 16);
            unint64_t v64 = *(void *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              v69 = (char *)*v10;
              uint64_t v70 = (v65 - (unsigned char *)*v10) >> 2;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
LABEL_137:
              }
                sub_1001D7FD4();
              uint64_t v72 = v64 - (void)v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                v74 = (char *)sub_10017EA34(v11, v73);
                v69 = *(char **)(a1 + 8);
                int v65 = *(char **)(a1 + 16);
              }
              else
              {
                v74 = 0;
              }
              BOOL v81 = &v74[4 * v70];
              *(_DWORD *)BOOL v81 = 0;
              unint64_t v66 = v81 + 4;
              while (v65 != v69)
              {
                int v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(void *)(a1 + 8) = v81;
              *(void *)(a1 + 16) = v66;
              *(void *)(a1 + 24) = &v74[4 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(_DWORD *)int v65 = 0;
              unint64_t v66 = v65 + 4;
            }
            *(void *)(a1 + 16) = v66;
            goto LABEL_123;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          while (v27 < v28 && !*((unsigned char *)this + 24))
          {
            char v30 = *(char **)(a1 + 16);
            unint64_t v29 = *(void *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              char v32 = (char *)*v10;
              uint64_t v33 = (v30 - (unsigned char *)*v10) >> 2;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_137;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                char v37 = (char *)sub_10017EA34(v11, v36);
                char v32 = *(char **)(a1 + 8);
                char v30 = *(char **)(a1 + 16);
              }
              else
              {
                char v37 = 0;
              }
              unsigned int v38 = &v37[4 * v33];
              *(_DWORD *)unsigned int v38 = 0;
              char v31 = v38 + 4;
              while (v30 != v32)
              {
                int v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(void *)(a1 + 8) = v38;
              *(void *)(a1 + 16) = v31;
              *(void *)(a1 + 24) = &v37[4 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)char v30 = 0;
              char v31 = v30 + 4;
            }
            *(void *)(a1 + 16) = v31;
            unint64_t v40 = *((void *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
              goto LABEL_91;
            }
            *(v31 - 1) = *(_DWORD *)(*(void *)this + v40);
            unint64_t v28 = *((void *)this + 2);
            unint64_t v27 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v27;
          }
          goto LABEL_92;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v41 = *((void *)this + 1);
            unint64_t v42 = *((void *)this + 2);
            while (v41 < v42 && !*((unsigned char *)this + 24))
            {
              unsigned int v44 = *(char **)(a1 + 40);
              unint64_t v43 = *(void *)(a1 + 48);
              if ((unint64_t)v44 >= v43)
              {
                char v46 = (char *)*v8;
                uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62) {
                  goto LABEL_138;
                }
                uint64_t v49 = v43 - (void)v46;
                if (v49 >> 1 > v48) {
                  unint64_t v48 = v49 >> 1;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  char v51 = (char *)sub_10017EA34(v9, v50);
                  char v46 = *(char **)(a1 + 32);
                  unsigned int v44 = *(char **)(a1 + 40);
                }
                else
                {
                  char v51 = 0;
                }
                unsigned int v52 = &v51[4 * v47];
                *(_DWORD *)unsigned int v52 = 0;
                uint64_t v45 = v52 + 4;
                while (v44 != v46)
                {
                  int v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *(void *)(a1 + 32) = v52;
                *(void *)(a1 + 40) = v45;
                *(void *)(a1 + 48) = &v51[4 * v50];
                if (v46) {
                  operator delete(v46);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v44 = 0;
                uint64_t v45 = v44 + 4;
              }
              *(void *)(a1 + 40) = v45;
              unint64_t v54 = *((void *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2))
              {
LABEL_91:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(void *)this + v54);
              unint64_t v42 = *((void *)this + 2);
              unint64_t v41 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v41;
            }
LABEL_92:
            PB::Reader::recallMark();
          }
          else
          {
            v68 = *(char **)(a1 + 40);
            unint64_t v67 = *(void *)(a1 + 48);
            if ((unint64_t)v68 >= v67)
            {
              v75 = (char *)*v8;
              uint64_t v76 = (v68 - (unsigned char *)*v8) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
LABEL_138:
              }
                sub_1001D7FD4();
              uint64_t v78 = v67 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                uint64_t v80 = (char *)sub_10017EA34(v9, v79);
                v75 = *(char **)(a1 + 32);
                v68 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v80 = 0;
              }
              unsigned int v83 = &v80[4 * v76];
              *(_DWORD *)unsigned int v83 = 0;
              unint64_t v66 = v83 + 4;
              while (v68 != v75)
              {
                int v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(void *)(a1 + 32) = v83;
              *(void *)(a1 + 40) = v66;
              *(void *)(a1 + 48) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)v68 = 0;
              unint64_t v66 = v68 + 4;
            }
            *(void *)(a1 + 40) = v66;
LABEL_123:
            unint64_t v85 = *((void *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((void *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(void *)this + v85);
LABEL_127:
              uint64_t v26 = *((void *)this + 1) + 4;
LABEL_128:
              *((void *)this + 1) = v26;
            }
            else
            {
LABEL_125:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_129:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 72) |= 2u;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v55);
          goto LABEL_127;
        case 5u:
          *(unsigned char *)(a1 + 72) |= 8u;
          unint64_t v56 = *((void *)this + 1);
          if (v56 >= *((void *)this + 2))
          {
            BOOL v59 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v57 = v56 + 1;
            int v58 = *(unsigned __int8 *)(*(void *)this + v56);
            *((void *)this + 1) = v57;
            BOOL v59 = v58 != 0;
          }
          *(unsigned char *)(a1 + 69) = v59;
          goto LABEL_129;
        case 6u:
          *(unsigned char *)(a1 + 72) |= 4u;
          unint64_t v60 = *((void *)this + 1);
          if (v60 >= *((void *)this + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)this + v60);
            *((void *)this + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *(unsigned char *)(a1 + 68) = v63;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_129;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101780E64(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 72)) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    double result = PB::Writer::write(this, *(unsigned char *)(v3 + 69), 5u);
    if ((*(unsigned char *)(v3 + 72) & 4) == 0) {
      return result;
    }
    goto LABEL_15;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 64), 4u);
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  if ((v10 & 4) == 0) {
    return result;
  }
LABEL_15:
  char v11 = *(unsigned char *)(v3 + 68);

  return PB::Writer::write(this, v11, 6u);
}

uint64_t sub_101780F54(uint64_t result)
{
  *(void *)double result = &off_10233A570;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101780F7C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101780FB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A570;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_101781050(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dotMeasurement", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotMeasurementUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101781114(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101781394(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_10178143C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A5A8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101781464(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10178149C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A5A8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_101781538(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017815FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10178187C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_101781924(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A5E0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10178194C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101781984(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A5E0;
  *(_DWORD *)(a1 + 40) = 0;
  char v2 = *(unsigned char *)(a2 + 40);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 40) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(unsigned char *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    char v2 = *(unsigned char *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(unsigned char *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  char v2 = *(unsigned char *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(unsigned char *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  char v2 = *(unsigned char *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(unsigned char *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(unsigned char *)(a2 + 40) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_101781A74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dotDeltaBufferMaxAbs", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotDeltaBufferVar", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "dotErrorEstimate", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "dotRelativeChangeOverBuffer", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "headingDeltaBufferVar", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "headingRelativeChangeOverBuffer", *(float *)(a1 + 36));
  if (*(unsigned char *)(a1 + 40)) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101781B98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(unsigned char *)(a1 + 40) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(unsigned char *)(a1 + 40) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_47:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101781ECC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
    if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5, 7u);
}

uint64_t sub_101781FC8(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A618;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_101781FF0(PB::Base *this)
{
  *(void *)this = &off_10233A618;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101782054(PB::Base *a1)
{
  sub_101781FF0(a1);

  operator delete();
}

uint64_t sub_10178208C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A618;
  *(void *)(a1 + 8) = 0;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 52) = 1;
    *(void *)(a1 + 32) = v6;
    char v5 = 5;
    if ((*(unsigned char *)(a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2) {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(unsigned char *)(a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 52) |= 2u;
    *(void *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_101782154(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "placementFiltered", *(_DWORD *)(a1 + 48));
  }
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbabilityFiltered", v7);
  }
  char v8 = *(unsigned char *)(a1 + 52);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101782228(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 52) |= 1u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v23);
          goto LABEL_60;
        case 2u:
          *(unsigned char *)(a1 + 52) |= 4u;
          unint64_t v24 = *((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          uint64_t v26 = *(void *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)this + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_84;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v16 = v28++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v29) = 0;
            goto LABEL_84;
          }
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)this + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v50 = v24 + 1;
              char v51 = *(unsigned char *)(v26 + v24);
              *((void *)this + 1) = v50;
              v29 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                unint64_t v24 = v50;
                BOOL v16 = v49++ > 8;
                if (v16) {
                  goto LABEL_70;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v29;
          goto LABEL_96;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v32 = *((void *)this + 1);
            unint64_t v33 = *((void *)this + 2);
            while (v32 < v33 && !*((unsigned char *)this + 24))
            {
              uint64_t v35 = *(char **)(a1 + 16);
              unint64_t v34 = *(void *)(a1 + 24);
              if ((unint64_t)v35 >= v34)
              {
                char v37 = (char *)*v8;
                uint64_t v38 = (v35 - (unsigned char *)*v8) >> 2;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v40 = v34 - (void)v37;
                if (v40 >> 1 > v39) {
                  unint64_t v39 = v40 >> 1;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41)
                {
                  unint64_t v42 = (char *)sub_10017EA34(v9, v41);
                  char v37 = *(char **)(a1 + 8);
                  uint64_t v35 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v42 = 0;
                }
                unint64_t v43 = &v42[4 * v38];
                *(_DWORD *)unint64_t v43 = 0;
                unint64_t v36 = v43 + 4;
                while (v35 != v37)
                {
                  int v44 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 -= 4;
                }
                *(void *)(a1 + 8) = v43;
                *(void *)(a1 + 16) = v36;
                *(void *)(a1 + 24) = &v42[4 * v41];
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v35 = 0;
                unint64_t v36 = v35 + 4;
              }
              *(void *)(a1 + 16) = v36;
              unint64_t v45 = *((void *)this + 1);
              if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_DWORD *)(*(void *)this + v45);
              unint64_t v33 = *((void *)this + 2);
              unint64_t v32 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v32;
            }
            PB::Reader::recallMark();
          }
          else
          {
            int v53 = *(char **)(a1 + 16);
            unint64_t v52 = *(void *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v8;
              uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
LABEL_107:
              }
                sub_1001D7FD4();
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_10017EA34(v9, v59);
                unint64_t v55 = *(char **)(a1 + 8);
                int v53 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v61 = &v60[4 * v56];
              *(_DWORD *)unint64_t v61 = 0;
              unint64_t v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *(void *)(a1 + 8) = v61;
              *(void *)(a1 + 16) = v54;
              *(void *)(a1 + 24) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)int v53 = 0;
              unint64_t v54 = v53 + 4;
            }
            *(void *)(a1 + 16) = v54;
            unint64_t v63 = *((void *)this + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((void *)this + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
              uint64_t v47 = *((void *)this + 1) + 4;
LABEL_61:
              *((void *)this + 1) = v47;
            }
            else
            {
LABEL_95:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 52) |= 2u;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v46);
LABEL_60:
          uint64_t v47 = *((void *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10178272C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  }
  char v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(this, v8, 4u);
  }
  return result;
}

uint64_t sub_1017827DC(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A650;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_101782804(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10178283C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A650;
  *(_DWORD *)(a1 + 108) = 0;
  int v2 = *(_DWORD *)(a2 + 108);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 108) = 1;
    *(double *)(a1 + 8) = result;
    int v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 88);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 88) = LODWORD(result);
    int v2 = *(_DWORD *)(a2 + 108);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 96);
    v3 |= 0x100000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 96) = LODWORD(result);
    int v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 92) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 100) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *(_DWORD *)(a2 + 104);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 104) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 76) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 84) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_48:
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 108) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  if ((*(_DWORD *)(a2 + 108) & 2) != 0) {
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_101782AEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pitchMean", *(float *)(a1 + 24));
    int v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pitchStd", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rollMeanAbs", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rollStd", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYHigh", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYPed", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZHigh", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZPed", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotRateInerXYMean", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotRateInerXYStd", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "rotRateInerZMean", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rotRateInerZStd", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYHigh", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYPed", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZHigh", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZPed", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelInerXYMean", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelInerXYStd", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelInerZMean", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(this, "userAccelInerZStd", *(float *)(a1 + 100));
  if ((*(_DWORD *)(a1 + 108) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "yawStd", *(float *)(a1 + 104));
LABEL_25:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101782E10(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 108) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 108) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 3u:
          *(_DWORD *)(a1 + 108) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 4u:
          *(_DWORD *)(a1 + 108) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 5u:
          *(_DWORD *)(a1 + 108) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 6u:
          *(_DWORD *)(a1 + 108) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 7u:
          *(_DWORD *)(a1 + 108) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 8u:
          *(_DWORD *)(a1 + 108) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 9u:
          *(_DWORD *)(a1 + 108) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xAu:
          *(_DWORD *)(a1 + 108) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xBu:
          *(_DWORD *)(a1 + 108) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xCu:
          *(_DWORD *)(a1 + 108) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xDu:
          *(_DWORD *)(a1 + 108) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xEu:
          *(_DWORD *)(a1 + 108) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xFu:
          *(_DWORD *)(a1 + 108) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x10u:
          *(_DWORD *)(a1 + 108) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x11u:
          *(_DWORD *)(a1 + 108) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x12u:
          *(_DWORD *)(a1 + 108) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x13u:
          *(_DWORD *)(a1 + 108) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x14u:
          *(_DWORD *)(a1 + 108) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x15u:
          *(_DWORD *)(a1 + 108) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x16u:
          *(_DWORD *)(a1 + 108) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
LABEL_95:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *(_DWORD *)(a1 + 108) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_93:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_88:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_96:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101783504(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 108);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 4u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 5u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 6u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 9u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xCu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xEu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xFu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x11u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x13u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x14u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
    if ((*(_DWORD *)(v3 + 108) & 2) == 0) {
      return result;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x15u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_47:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 0x17u);
}

uint64_t sub_1017837C0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A688;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1017837E8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101783820(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A688;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(unsigned char *)(a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 20) = 1;
  *(void *)(a1 + 8) = v3;
  char v2 = 3;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

uint64_t sub_101783884(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101783900(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 4;
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 8;
      }
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_101783AE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_101783B50(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A6C0;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_101783B78(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101783BB0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A6C0;
  *(_DWORD *)(result + 68) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 68) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 52) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v6;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v7;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v8;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v9;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v10;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v11 = *(unsigned char *)(a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(result + 68) = v3;
  *(unsigned char *)(result + 64) = v11;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 16) = v12;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v13;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v14 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v14;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_28:
    int v16 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 68) = v3 | 4;
    *(_DWORD *)(result + 24) = v16;
    return result;
  }
LABEL_27:
  int v15 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v15;
  if ((*(_WORD *)(a2 + 68) & 4) != 0) {
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_101783D48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "didExceedRadius", *(unsigned char *)(a1 + 64));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fenceID", *(_DWORD *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionRefX", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionRefY", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionRefZ", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionUncX", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionUncY", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionUncZ", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionX", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "positionY", *(float *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "positionZ", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(_WORD *)(a1 + 68) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_15:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101783F2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_50;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 64) = v22;
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_50:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_77:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_78:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_84:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_84;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101784488(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 64), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xCu);
    if ((*(_WORD *)(v3 + 68) & 4) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_27:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(this, v5, 0xDu);
}

void sub_101784630(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101784668(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A6F8;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*(unsigned char *)(a2 + 20))
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    *(unsigned char *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1017846C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101784744(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017849D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_101784A40(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A730;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_101784A68(PB::Base *this)
{
  *(void *)this = &off_10233A730;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101784ACC(PB::Base *a1)
{
  sub_101784A68(a1);

  operator delete();
}

uint64_t sub_101784B04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A730;
  *(void *)(a1 + 8) = 0;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 52) = 1;
    *(void *)(a1 + 32) = v6;
    char v5 = 5;
    if ((*(unsigned char *)(a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    char v7 = *(unsigned char *)(a2 + 48);
    *(unsigned char *)(a1 + 52) = v5;
    *(unsigned char *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2) {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(unsigned char *)(a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 52) |= 2u;
    *(void *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_101784BCC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "isPedestrian", *(unsigned char *)(a1 + 48));
  }
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "pedestrianClassProbability", v7);
  }
  char v8 = *(unsigned char *)(a1 + 52);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101784CA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 52) |= 1u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_81;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v23);
          goto LABEL_55;
        case 2u:
          *(unsigned char *)(a1 + 52) |= 4u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 >= *((void *)this + 2))
          {
            BOOL v27 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v25 = v24 + 1;
            int v26 = *(unsigned __int8 *)(*(void *)this + v24);
            *((void *)this + 1) = v25;
            BOOL v27 = v26 != 0;
          }
          *(unsigned char *)(a1 + 48) = v27;
          goto LABEL_82;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v28 = *((void *)this + 1);
            unint64_t v29 = *((void *)this + 2);
            while (v28 < v29 && !*((unsigned char *)this + 24))
            {
              char v31 = *(char **)(a1 + 16);
              unint64_t v30 = *(void *)(a1 + 24);
              if ((unint64_t)v31 >= v30)
              {
                unint64_t v33 = (char *)*v8;
                uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62) {
                  goto LABEL_91;
                }
                uint64_t v36 = v30 - (void)v33;
                if (v36 >> 1 > v35) {
                  unint64_t v35 = v36 >> 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v37 = v35;
                }
                if (v37)
                {
                  uint64_t v38 = (char *)sub_10017EA34(v9, v37);
                  unint64_t v33 = *(char **)(a1 + 8);
                  char v31 = *(char **)(a1 + 16);
                }
                else
                {
                  uint64_t v38 = 0;
                }
                unint64_t v39 = &v38[4 * v34];
                *(_DWORD *)unint64_t v39 = 0;
                char v32 = v39 + 4;
                while (v31 != v33)
                {
                  int v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *(void *)(a1 + 8) = v39;
                *(void *)(a1 + 16) = v32;
                *(void *)(a1 + 24) = &v38[4 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *(_DWORD *)char v31 = 0;
                char v32 = v31 + 4;
              }
              *(void *)(a1 + 16) = v32;
              unint64_t v41 = *((void *)this + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
              unint64_t v29 = *((void *)this + 2);
              unint64_t v28 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v28;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v45 = *(char **)(a1 + 16);
            unint64_t v44 = *(void *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              uint64_t v47 = (char *)*v8;
              uint64_t v48 = (v45 - (unsigned char *)*v8) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
LABEL_91:
              }
                sub_1001D7FD4();
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_10017EA34(v9, v51);
                uint64_t v47 = *(char **)(a1 + 8);
                unint64_t v45 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v52 = 0;
              }
              int v53 = &v52[4 * v48];
              *(_DWORD *)int v53 = 0;
              unint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 8) = v53;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              unint64_t v46 = v45 + 4;
            }
            *(void *)(a1 + 16) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *((void *)this + 2))
            {
              *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
              uint64_t v43 = *((void *)this + 1) + 4;
LABEL_56:
              *((void *)this + 1) = v43;
            }
            else
            {
LABEL_81:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_82:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 52) |= 2u;
          unint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)this + 2)) {
            goto LABEL_81;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v42);
LABEL_55:
          uint64_t v43 = *((void *)this + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(this, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_82;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101785104(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 48), 2u);
  }
  char v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(this, v8, 4u);
  }
  return result;
}

uint64_t sub_1017851B4(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A768;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1017851DC(PB::Base *this)
{
  *(void *)this = &off_10233A768;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101785240(PB::Base *a1)
{
  sub_1017851DC(a1);

  operator delete();
}

uint64_t sub_101785278(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A768;
  *(void *)(a1 + 8) = 0;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 52) = 1;
    *(void *)(a1 + 32) = v6;
    char v5 = 5;
    if ((*(unsigned char *)(a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2) {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(unsigned char *)(a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 52) |= 2u;
    *(void *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_101785340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "placement", *(_DWORD *)(a1 + 48));
  }
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbability", v7);
  }
  char v8 = *(unsigned char *)(a1 + 52);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101785414(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 52) |= 1u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v23);
          goto LABEL_60;
        case 2u:
          *(unsigned char *)(a1 + 52) |= 4u;
          unint64_t v24 = *((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          uint64_t v26 = *(void *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)this + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_84;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v16 = v28++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v29) = 0;
            goto LABEL_84;
          }
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)this + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v50 = v24 + 1;
              char v51 = *(unsigned char *)(v26 + v24);
              *((void *)this + 1) = v50;
              v29 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                unint64_t v24 = v50;
                BOOL v16 = v49++ > 8;
                if (v16) {
                  goto LABEL_70;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v29;
          goto LABEL_96;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v32 = *((void *)this + 1);
            unint64_t v33 = *((void *)this + 2);
            while (v32 < v33 && !*((unsigned char *)this + 24))
            {
              unint64_t v35 = *(char **)(a1 + 16);
              unint64_t v34 = *(void *)(a1 + 24);
              if ((unint64_t)v35 >= v34)
              {
                unint64_t v37 = (char *)*v8;
                uint64_t v38 = (v35 - (unsigned char *)*v8) >> 2;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v40 = v34 - (void)v37;
                if (v40 >> 1 > v39) {
                  unint64_t v39 = v40 >> 1;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41)
                {
                  unint64_t v42 = (char *)sub_10017EA34(v9, v41);
                  unint64_t v37 = *(char **)(a1 + 8);
                  unint64_t v35 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v42 = 0;
                }
                uint64_t v43 = &v42[4 * v38];
                *(_DWORD *)uint64_t v43 = 0;
                uint64_t v36 = v43 + 4;
                while (v35 != v37)
                {
                  int v44 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 -= 4;
                }
                *(void *)(a1 + 8) = v43;
                *(void *)(a1 + 16) = v36;
                *(void *)(a1 + 24) = &v42[4 * v41];
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v35 = 0;
                uint64_t v36 = v35 + 4;
              }
              *(void *)(a1 + 16) = v36;
              unint64_t v45 = *((void *)this + 1);
              if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_DWORD *)(*(void *)this + v45);
              unint64_t v33 = *((void *)this + 2);
              unint64_t v32 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v32;
            }
            PB::Reader::recallMark();
          }
          else
          {
            int v53 = *(char **)(a1 + 16);
            unint64_t v52 = *(void *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v8;
              uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
LABEL_107:
              }
                sub_1001D7FD4();
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_10017EA34(v9, v59);
                unint64_t v55 = *(char **)(a1 + 8);
                int v53 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v61 = &v60[4 * v56];
              *(_DWORD *)unint64_t v61 = 0;
              int v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *(void *)(a1 + 8) = v61;
              *(void *)(a1 + 16) = v54;
              *(void *)(a1 + 24) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)int v53 = 0;
              int v54 = v53 + 4;
            }
            *(void *)(a1 + 16) = v54;
            unint64_t v63 = *((void *)this + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((void *)this + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
              uint64_t v47 = *((void *)this + 1) + 4;
LABEL_61:
              *((void *)this + 1) = v47;
            }
            else
            {
LABEL_95:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 52) |= 2u;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v46);
LABEL_60:
          uint64_t v47 = *((void *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101785918(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  }
  char v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(this, v8, 4u);
  }
  return result;
}

uint64_t sub_1017859C8(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A7A0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1017859F0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101785A28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A7A0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_101785AC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101785B88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101785E08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_101785EB0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A7D8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101785ED8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101785F10(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A7D8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_101785FAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101786070(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017862F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_101786398(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A810;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1017863C0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017863F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A810;
  *(_DWORD *)(a1 + 48) = 0;
  char v2 = *(unsigned char *)(a2 + 48);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 48) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(unsigned char *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(unsigned char *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = LODWORD(result);
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(unsigned char *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_18:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 48) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(unsigned char *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  if ((*(unsigned char *)(a2 + 48) & 2) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_101786504(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(unsigned char *)(a1 + 48) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101786648(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(unsigned char *)(a1 + 48) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 6u:
          *(unsigned char *)(a1 + 48) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 7u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_50:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_51;
        case 8u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_48:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_43:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_51:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017869B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
    if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_17:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 8u);
}

void *sub_101786AD0(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &off_10233A848;
  return result;
}

void sub_101786AF4(PB::Base *this)
{
  *(void *)this = &off_10233A848;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

void sub_101786BA8(PB::Base *a1)
{
  sub_101786AF4(a1);

  operator delete();
}

void *sub_101786BE0(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233A848;
  result[1] = 0;
  result[2] = 0;
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_101786CF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "signalEnvironment");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101786DAC(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v19, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101787024(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5, 2u);
  }
  return result;
}

uint64_t sub_101787088(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A880;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1017870B0(PB::Base *this)
{
  *(void *)this = &off_10233A880;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_101787134(PB::Base *a1)
{
  sub_1017870B0(a1);

  operator delete();
}

uint64_t sub_10178716C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A880;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    char v3 = 32;
    *(unsigned char *)(result + 64) = 32;
    *(void *)(result + 56) = v4;
    char v2 = *(unsigned char *)(a2 + 64);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 64) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(unsigned char *)(result + 64) = v3;
    *(void *)(result + 32) = v5;
    char v2 = *(unsigned char *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    v3 |= 0x10u;
    *(unsigned char *)(result + 64) = v3;
    *(void *)(result + 40) = v7;
    char v2 = *(unsigned char *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(result + 64) = v3;
  *(void *)(result + 24) = v8;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_16:
  uint64_t v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(result + 64) = v3;
  *(void *)(result + 8) = v9;
  if ((*(unsigned char *)(a2 + 64) & 2) != 0)
  {
LABEL_10:
    uint64_t v6 = *(void *)(a2 + 16);
    *(unsigned char *)(result + 64) = v3 | 2;
    *(void *)(result + 16) = v6;
  }
LABEL_11:
  if (*(void *)(a2 + 48)) {
    operator new();
  }
  return result;
}

uint64_t sub_1017872C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "course", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 40));
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "signalEnvironment");
  }
  if ((*(unsigned char *)(a1 + 64) & 0x20) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101787400(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 64) |= 0x20u;
              unint64_t v20 = *((void *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v20);
              goto LABEL_44;
            case 2u:
              *(unsigned char *)(a1 + 64) |= 8u;
              unint64_t v22 = *((void *)this + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
              goto LABEL_44;
            case 3u:
              *(unsigned char *)(a1 + 64) |= 0x10u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v23);
              goto LABEL_44;
            case 4u:
              *(unsigned char *)(a1 + 64) |= 4u;
              unint64_t v24 = *((void *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v24);
              goto LABEL_44;
            case 5u:
              *(unsigned char *)(a1 + 64) |= 1u;
              unint64_t v25 = *((void *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v25);
              goto LABEL_44;
            case 6u:
              *(unsigned char *)(a1 + 64) |= 2u;
              unint64_t v26 = *((void *)this + 1);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v26);
LABEL_44:
                *((void *)this + 1) += 8;
              }
              else
              {
LABEL_41:
                *((unsigned char *)this + 24) = 1;
              }
LABEL_45:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 7u:
              operator new();
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_45;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1017877A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  if ((*(unsigned char *)(v3 + 64) & 2) != 0) {
LABEL_7:
  }
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
LABEL_8:
  char v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5, 7u);
  }
  return result;
}

void *sub_10178789C(void *result)
{
  *uint64_t result = &off_10233A8B8;
  result[1] = 0;
  return result;
}

void sub_1017878BC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233A8B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_10178793C(PB::Base *a1)
{
  sub_1017878BC(a1);

  operator delete();
}

void *sub_101787974(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233A8B8;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_101787A1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101787A98(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101787CB4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_101787CD0(void *result)
{
  *uint64_t result = &off_10233A8F0;
  result[1] = 0;
  return result;
}

void sub_101787CF0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233A8F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_101787D70(PB::Base *a1)
{
  sub_101787CF0(a1);

  operator delete();
}

void *sub_101787DA8(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233A8F0;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_101787E50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101787ECC(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017880E8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101788104(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A928;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_10178812C(PB::Base *this)
{
  *(void *)this = &off_10233A928;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101788190(PB::Base *a1)
{
  sub_10178812C(a1);

  operator delete();
}

uint64_t sub_1017881C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233A928;
  *(void *)(a1 + 8) = 0;
  unint64_t v3 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = 1;
    *(void *)(a1 + 32) = v4;
  }
  if (a1 != a2) {
    sub_1002DD194(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

uint64_t sub_101788250(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 40)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "velocity", v7);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1017882E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    do
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 != 2)
        {
          uint64_t v40 = *(char **)(a1 + 16);
          unint64_t v39 = *(void *)(a1 + 24);
          if ((unint64_t)v40 >= v39)
          {
            unint64_t v42 = (char *)*v8;
            uint64_t v43 = (v40 - (unsigned char *)*v8) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_84:
            }
              sub_1001D7FD4();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              uint64_t v47 = (char *)sub_1000DA54C(v9, v46);
              unint64_t v42 = *(char **)(a1 + 8);
              uint64_t v40 = *(char **)(a1 + 16);
            }
            else
            {
              uint64_t v47 = 0;
            }
            char v48 = &v47[8 * v43];
            *(void *)char v48 = 0;
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(void *)(a1 + 8) = v48;
            *(void *)(a1 + 16) = v41;
            *(void *)(a1 + 24) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(void *)uint64_t v40 = 0;
            unint64_t v41 = v40 + 8;
          }
          *(void *)(a1 + 16) = v41;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2))
          {
LABEL_73:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v41 - 1) = *(void *)(*(void *)this + v50);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        while (v25 < v26 && !*((unsigned char *)this + 24))
        {
          unsigned int v28 = *(char **)(a1 + 16);
          unint64_t v27 = *(void *)(a1 + 24);
          if ((unint64_t)v28 >= v27)
          {
            unint64_t v30 = (char *)*v8;
            uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_84;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              unint64_t v35 = (char *)sub_1000DA54C(v9, v34);
              unint64_t v30 = *(char **)(a1 + 8);
              unsigned int v28 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v35 = 0;
            }
            uint64_t v36 = &v35[8 * v31];
            *(void *)uint64_t v36 = 0;
            uint64_t v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            *(void *)(a1 + 8) = v36;
            *(void *)(a1 + 16) = v29;
            *(void *)(a1 + 24) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unsigned int v28 = 0;
            uint64_t v29 = v28 + 8;
          }
          *(void *)(a1 + 16) = v29;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)this + 2))
          {
            *((unsigned char *)this + 24) = 1;
            break;
          }
          *(v29 - 1) = *(void *)(*(void *)this + v38);
          unint64_t v26 = *((void *)this + 2);
          unint64_t v25 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v25;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v23 == 1)
        {
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
            goto LABEL_73;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v24);
LABEL_75:
          *((void *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_101788698(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 40)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    uint64_t result = PB::Writer::write(this, v6, 2u);
  }
  return result;
}

double sub_1017886FC(uint64_t a1)
{
  *(void *)a1 = &off_10233A960;
  *(_DWORD *)(a1 + 124) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  return result;
}

void sub_101788738(PB::Base *this)
{
  *(void *)this = &off_10233A960;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1017887BC(PB::Base *a1)
{
  sub_101788738(a1);

  operator delete();
}

uint64_t sub_1017887F4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_10233A960;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  __int16 v5 = *(_WORD *)(a2 + 124);
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 80);
    __int16 v6 = 1;
    *(_WORD *)(a1 + 124) = 1;
    *(void *)(a1 + 80) = v7;
    __int16 v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x40u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    __int16 v5 = *(_WORD *)(a2 + 124);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 104);
    v6 |= 0x20u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 104) = v13;
    __int16 v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *(_DWORD *)(a2 + 120);
  v6 |= 0x200u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 120) = v14;
  __int16 v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v15 = *(_DWORD *)(a2 + 88);
  v6 |= 2u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 88) = v15;
  __int16 v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_24:
  int v16 = *(_DWORD *)(a2 + 112);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 112) = v16;
  if ((*(_WORD *)(a2 + 124) & 0x10) != 0)
  {
LABEL_11:
    int v9 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 124) = v6 | 0x10;
    *(_DWORD *)(a1 + 100) = v9;
  }
LABEL_12:
  if (a1 != a2) {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  __int16 v10 = *(_WORD *)(a2 + 124);
  if ((v10 & 8) != 0)
  {
    int v17 = *(_DWORD *)(a2 + 96);
    *(_WORD *)(a1 + 124) |= 8u;
    *(_DWORD *)(a1 + 96) = v17;
    __int16 v10 = *(_WORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a2 + 124) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  int v18 = *(_DWORD *)(a2 + 116);
  *(_WORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 116) = v18;
  if ((*(_WORD *)(a2 + 124) & 4) != 0)
  {
LABEL_17:
    int v11 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 124) |= 4u;
    *(_DWORD *)(a1 + 92) = v11;
  }
LABEL_18:
  if (a1 != a2)
  {
    sub_1000FB43C((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_1000FB43C((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_1017889D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(float *)(a1 + 88));
    __int16 v5 = *(_WORD *)(a1 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "focalLength", *(float *)(a1 + 92));
  __int16 v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_27:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 124) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 100));
LABEL_6:
  __int16 v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "origin", v8);
  }
  if ((*(_WORD *)(a1 + 124) & 0x20) != 0) {
    PB::TextFormatter::format(this, "pitch", *(float *)(a1 + 104));
  }
  int v9 = *(float **)(a1 + 32);
  __int16 v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "principlePoint", v11);
  }
  __int16 v12 = *(_WORD *)(a1 + 124);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "roll", *(float *)(a1 + 108));
    __int16 v12 = *(_WORD *)(a1 + 124);
  }
  if (v12) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  }
  int v13 = *(float **)(a1 + 56);
  int v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(this, "transform", v15);
  }
  __int16 v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 112));
    __int16 v16 = *(_WORD *)(a1 + 124);
    if ((v16 & 0x100) == 0)
    {
LABEL_20:
      if ((v16 & 0x200) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a1 + 124) & 0x100) == 0)
  {
    goto LABEL_20;
  }
  PB::TextFormatter::format(this, "width", *(float *)(a1 + 116));
  if ((*(_WORD *)(a1 + 124) & 0x200) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 120));
LABEL_22:

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101788BE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 56);
    uint64_t v9 = a1 + 72;
    __int16 v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    __int16 v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 124) |= 1u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v27);
          uint64_t v28 = *((void *)this + 1) + 8;
          goto LABEL_215;
        case 2u:
          *(_WORD *)(a1 + 124) |= 0x40u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_214;
        case 3u:
          *(_WORD *)(a1 + 124) |= 0x20u;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_214;
        case 4u:
          *(_WORD *)(a1 + 124) |= 0x200u;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_214;
        case 5u:
          *(_WORD *)(a1 + 124) |= 2u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_214;
        case 6u:
          *(_WORD *)(a1 + 124) |= 0x80u;
          unint64_t v33 = *((void *)this + 1);
          unint64_t v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_185;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v20 = v37++ > 8;
            }
            while (!v20);
LABEL_141:
            LODWORD(v38) = 0;
            goto LABEL_185;
          }
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v96 = v33 + 1;
              char v97 = *(unsigned char *)(v35 + v33);
              *((void *)this + 1) = v96;
              v38 |= (unint64_t)(v97 & 0x7F) << v94;
              if (v97 < 0)
              {
                v94 += 7;
                unint64_t v33 = v96;
                BOOL v20 = v95++ > 8;
                if (v20) {
                  goto LABEL_141;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_185:
          *(_DWORD *)(a1 + 112) = v38;
          goto LABEL_216;
        case 7u:
          *(_WORD *)(a1 + 124) |= 0x10u;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_188;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v20 = v45++ > 8;
            }
            while (!v20);
LABEL_148:
            LODWORD(v46) = 0;
            goto LABEL_188;
          }
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v100 = v41 + 1;
              char v101 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v100;
              v46 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                unint64_t v41 = v100;
                BOOL v20 = v99++ > 8;
                if (v20) {
                  goto LABEL_148;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_188:
          *(_DWORD *)(a1 + 100) = v46;
          goto LABEL_216;
        case 8u:
          if (v26 != 2)
          {
            uint64_t v103 = *(char **)(a1 + 16);
            unint64_t v102 = *(void *)(a1 + 24);
            if ((unint64_t)v103 >= v102)
            {
              char v109 = (char *)*v12;
              uint64_t v110 = (v103 - (unsigned char *)*v12) >> 2;
              unint64_t v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 62) {
LABEL_226:
              }
                sub_1001D7FD4();
              uint64_t v112 = v102 - (void)v109;
              if (v112 >> 1 > v111) {
                unint64_t v111 = v112 >> 1;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                char v114 = (char *)sub_10017EA34(v13, v113);
                char v109 = *(char **)(a1 + 8);
                uint64_t v103 = *(char **)(a1 + 16);
              }
              else
              {
                char v114 = 0;
              }
              v127 = &v114[4 * v110];
              *(_DWORD *)v127 = 0;
              v104 = v127 + 4;
              while (v103 != v109)
              {
                int v128 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v127 - 1) = v128;
                v127 -= 4;
              }
              *(void *)(a1 + 8) = v127;
              *(void *)(a1 + 16) = v104;
              *(void *)(a1 + 24) = &v114[4 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v103 = 0;
              v104 = v103 + 4;
            }
            *(void *)(a1 + 16) = v104;
            goto LABEL_210;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v49 = *((void *)this + 1);
          unint64_t v50 = *((void *)this + 2);
          while (v49 < v50 && !*((unsigned char *)this + 24))
          {
            unint64_t v52 = *(char **)(a1 + 16);
            unint64_t v51 = *(void *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              int v54 = (char *)*v12;
              uint64_t v55 = (v52 - (unsigned char *)*v12) >> 2;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62) {
                goto LABEL_226;
              }
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                unint64_t v59 = (char *)sub_10017EA34(v13, v58);
                int v54 = *(char **)(a1 + 8);
                unint64_t v52 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v59 = 0;
              }
              unint64_t v60 = &v59[4 * v55];
              *(_DWORD *)unint64_t v60 = 0;
              int v53 = v60 + 4;
              while (v52 != v54)
              {
                int v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(void *)(a1 + 8) = v60;
              *(void *)(a1 + 16) = v53;
              *(void *)(a1 + 24) = &v59[4 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v52 = 0;
              int v53 = v52 + 4;
            }
            *(void *)(a1 + 16) = v53;
            unint64_t v62 = *((void *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)this + 2)) {
              goto LABEL_155;
            }
            *(v53 - 1) = *(_DWORD *)(*(void *)this + v62);
            unint64_t v50 = *((void *)this + 2);
            unint64_t v49 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v49;
          }
          goto LABEL_156;
        case 9u:
          *(_WORD *)(a1 + 124) |= 8u;
          unint64_t v63 = *((void *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v63);
          goto LABEL_214;
        case 0xAu:
          *(_WORD *)(a1 + 124) |= 0x100u;
          unint64_t v64 = *((void *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v64);
          goto LABEL_214;
        case 0xBu:
          *(_WORD *)(a1 + 124) |= 4u;
          unint64_t v65 = *((void *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v65);
          goto LABEL_214;
        case 0xCu:
          if (v26 != 2)
          {
            unsigned int v106 = *(char **)(a1 + 40);
            unint64_t v105 = *(void *)(a1 + 48);
            if ((unint64_t)v106 >= v105)
            {
              v115 = (char *)*v10;
              uint64_t v116 = (v106 - (unsigned char *)*v10) >> 2;
              unint64_t v117 = v116 + 1;
              if ((unint64_t)(v116 + 1) >> 62) {
LABEL_227:
              }
                sub_1001D7FD4();
              uint64_t v118 = v105 - (void)v115;
              if (v118 >> 1 > v117) {
                unint64_t v117 = v118 >> 1;
              }
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v117;
              }
              if (v119)
              {
                v120 = (char *)sub_10017EA34(v11, v119);
                v115 = *(char **)(a1 + 32);
                unsigned int v106 = *(char **)(a1 + 40);
              }
              else
              {
                v120 = 0;
              }
              unsigned int v129 = &v120[4 * v116];
              *(_DWORD *)unsigned int v129 = 0;
              v104 = v129 + 4;
              while (v106 != v115)
              {
                int v130 = *((_DWORD *)v106 - 1);
                v106 -= 4;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *(void *)(a1 + 32) = v129;
              *(void *)(a1 + 40) = v104;
              *(void *)(a1 + 48) = &v120[4 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v106 = 0;
              v104 = v106 + 4;
            }
            *(void *)(a1 + 40) = v104;
            goto LABEL_210;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v66 = *((void *)this + 1);
          unint64_t v67 = *((void *)this + 2);
          while (v66 < v67 && !*((unsigned char *)this + 24))
          {
            v69 = *(char **)(a1 + 40);
            unint64_t v68 = *(void *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              unint64_t v71 = (char *)*v10;
              uint64_t v72 = (v69 - (unsigned char *)*v10) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
                goto LABEL_227;
              }
              uint64_t v74 = v68 - (void)v71;
              if (v74 >> 1 > v73) {
                unint64_t v73 = v74 >> 1;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                uint64_t v76 = (char *)sub_10017EA34(v11, v75);
                unint64_t v71 = *(char **)(a1 + 32);
                v69 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v76 = 0;
              }
              unint64_t v77 = &v76[4 * v72];
              *(_DWORD *)unint64_t v77 = 0;
              uint64_t v70 = v77 + 4;
              while (v69 != v71)
              {
                int v78 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v77 - 1) = v78;
                v77 -= 4;
              }
              *(void *)(a1 + 32) = v77;
              *(void *)(a1 + 40) = v70;
              *(void *)(a1 + 48) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(_DWORD *)v69 = 0;
              uint64_t v70 = v69 + 4;
            }
            *(void *)(a1 + 40) = v70;
            unint64_t v79 = *((void *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
              goto LABEL_155;
            }
            *(v70 - 1) = *(_DWORD *)(*(void *)this + v79);
            unint64_t v67 = *((void *)this + 2);
            unint64_t v66 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v66;
          }
          goto LABEL_156;
        case 0xDu:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v80 = *((void *)this + 1);
            unint64_t v81 = *((void *)this + 2);
            while (v80 < v81 && !*((unsigned char *)this + 24))
            {
              unsigned int v83 = *(char **)(a1 + 64);
              unint64_t v82 = *(void *)(a1 + 72);
              if ((unint64_t)v83 >= v82)
              {
                unint64_t v85 = (char *)*v8;
                uint64_t v86 = (v83 - (unsigned char *)*v8) >> 2;
                unint64_t v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62) {
                  goto LABEL_228;
                }
                uint64_t v88 = v82 - (void)v85;
                if (v88 >> 1 > v87) {
                  unint64_t v87 = v88 >> 1;
                }
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v87;
                }
                if (v89)
                {
                  unint64_t v90 = (char *)sub_10017EA34(v9, v89);
                  unint64_t v85 = *(char **)(a1 + 56);
                  unsigned int v83 = *(char **)(a1 + 64);
                }
                else
                {
                  unint64_t v90 = 0;
                }
                char v91 = &v90[4 * v86];
                *(_DWORD *)char v91 = 0;
                int v84 = v91 + 4;
                while (v83 != v85)
                {
                  int v92 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v91 - 1) = v92;
                  v91 -= 4;
                }
                *(void *)(a1 + 56) = v91;
                *(void *)(a1 + 64) = v84;
                *(void *)(a1 + 72) = &v90[4 * v89];
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v83 = 0;
                int v84 = v83 + 4;
              }
              *(void *)(a1 + 64) = v84;
              unint64_t v93 = *((void *)this + 1);
              if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)this + 2))
              {
LABEL_155:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v84 - 1) = *(_DWORD *)(*(void *)this + v93);
              unint64_t v81 = *((void *)this + 2);
              unint64_t v80 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v80;
            }
LABEL_156:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v108 = *(char **)(a1 + 64);
            unint64_t v107 = *(void *)(a1 + 72);
            if ((unint64_t)v108 >= v107)
            {
              v121 = (char *)*v8;
              uint64_t v122 = (v108 - (unsigned char *)*v8) >> 2;
              unint64_t v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 62) {
LABEL_228:
              }
                sub_1001D7FD4();
              uint64_t v124 = v107 - (void)v121;
              if (v124 >> 1 > v123) {
                unint64_t v123 = v124 >> 1;
              }
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v123;
              }
              if (v125)
              {
                uint64_t v126 = (char *)sub_10017EA34(v9, v125);
                v121 = *(char **)(a1 + 56);
                unint64_t v108 = *(char **)(a1 + 64);
              }
              else
              {
                uint64_t v126 = 0;
              }
              unint64_t v131 = &v126[4 * v122];
              *(_DWORD *)unint64_t v131 = 0;
              v104 = v131 + 4;
              while (v108 != v121)
              {
                int v132 = *((_DWORD *)v108 - 1);
                v108 -= 4;
                *((_DWORD *)v131 - 1) = v132;
                v131 -= 4;
              }
              *(void *)(a1 + 56) = v131;
              *(void *)(a1 + 64) = v104;
              *(void *)(a1 + 72) = &v126[4 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v108 = 0;
              v104 = v108 + 4;
            }
            *(void *)(a1 + 64) = v104;
LABEL_210:
            unint64_t v133 = *((void *)this + 1);
            if (v133 <= 0xFFFFFFFFFFFFFFFBLL && v133 + 4 <= *((void *)this + 2))
            {
              *(v104 - 1) = *(_DWORD *)(*(void *)this + v133);
LABEL_214:
              uint64_t v28 = *((void *)this + 1) + 4;
LABEL_215:
              *((void *)this + 1) = v28;
            }
            else
            {
LABEL_212:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_216:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_216;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017896D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 124);
  if (v4)
  {
    double result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    __int16 v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = PB::Writer::write(this, *(float *)(v3 + 104), 3u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = PB::Writer::write(this, *(float *)(v3 + 120), 4u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_28:
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 6u);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_27:
  double result = PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_7:
  if ((v4 & 0x10) != 0) {
LABEL_8:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 7u);
LABEL_9:
  __int16 v5 = *(float **)(v3 + 8);
  __int16 v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 8u);
  }
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    double result = PB::Writer::write(this, *(float *)(v3 + 116), 0xAu);
    if ((*(_WORD *)(v3 + 124) & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v8 & 4) != 0) {
LABEL_15:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
LABEL_16:
  uint64_t v9 = *(float **)(v3 + 32);
  __int16 v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    double result = PB::Writer::write(this, v11, 0xCu);
  }
  uint64_t v13 = *(float **)(v3 + 56);
  __int16 v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    float v14 = *v13++;
    double result = PB::Writer::write(this, v14, 0xDu);
  }
  return result;
}

uint64_t sub_101789874(uint64_t result)
{
  *(void *)double result = &off_10233A998;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_10178989C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_1017898D4(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10233A998;
  *(_DWORD *)(result + 56) = 0;
  char v2 = *(unsigned char *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(unsigned char *)(result + 56) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(unsigned char *)(a2 + 56);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(unsigned char *)(result + 56) = v3;
    *(void *)(result + 32) = v5;
    char v2 = *(unsigned char *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(result + 56) = v3;
    *(void *)(result + 16) = v6;
    char v2 = *(unsigned char *)(a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(result + 56) = v3;
  *(void *)(result + 8) = v7;
  char v2 = *(unsigned char *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(unsigned char *)(result + 56) = v3;
  *(void *)(result + 40) = v8;
  char v2 = *(unsigned char *)(a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_16:
    int v10 = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(result + 56) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v10;
    return result;
  }
LABEL_15:
  char v9 = *(unsigned char *)(a2 + 52);
  v3 |= 0x40u;
  *(unsigned char *)(result + 56) = v3;
  *(unsigned char *)(result + 52) = v9;
  if ((*(unsigned char *)(a2 + 56) & 0x20) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1017899C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 48));
    char v5 = *(unsigned char *)(a1 + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "distOdom", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "distPed", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isValid", *(unsigned char *)(a1 + 52));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "uncOdom", *(double *)(a1 + 40));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101789AE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 56) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 2u:
              *(unsigned char *)(a1 + 56) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 3u:
              *(unsigned char *)(a1 + 56) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 4u:
              *(unsigned char *)(a1 + 56) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 5u:
              *(unsigned char *)(a1 + 56) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_58:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *(unsigned char *)(a1 + 56) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 52) = v22;
              goto LABEL_64;
            case 7u:
              *(unsigned char *)(a1 + 56) |= 0x20u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_62;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 48) = v27;
LABEL_64:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_64;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101789ED4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 56);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 52), 6u);
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_15:
  int v5 = *(_DWORD *)(v3 + 48);

  return PB::Writer::writeVarInt(this, v5, 7u);
}

uint64_t sub_101789FD0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233A9D0;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_101789FF8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178A030(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233A9D0;
  *(_DWORD *)(result + 116) = 0;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    __int16 v3 = 128;
    *(_WORD *)(result + 116) = 128;
    *(void *)(result + 64) = v4;
    __int16 v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 116) & 0x2000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 108);
    v3 |= 0x2000u;
    *(_WORD *)(result + 116) = v3;
    *(_DWORD *)(result + 108) = v5;
    __int16 v2 = *(_WORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 116) = v3;
    *(void *)(result + 24) = v6;
    __int16 v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 56) = v7;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 40) = v8;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 8) = v9;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 16) = v10;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v11 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 96) = v11;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v12 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 32) = v12;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v13 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 72) = v13;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v14 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 48) = v14;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 88) = v15;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v16 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 80) = v16;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }
LABEL_32:
  char v17 = *(unsigned char *)(a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(result + 116) = v3;
  *(unsigned char *)(result + 113) = v17;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_34:
    int v19 = *(_DWORD *)(a2 + 104);
    *(_WORD *)(result + 116) = v3 | 0x1000;
    *(_DWORD *)(result + 104) = v19;
    return result;
  }
LABEL_33:
  char v18 = *(unsigned char *)(a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(result + 116) = v3;
  *(unsigned char *)(result + 112) = v18;
  if ((*(_WORD *)(a2 + 116) & 0x1000) != 0) {
    goto LABEL_34;
  }
  return result;
}

uint64_t sub_10178A21C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 116);
  if (v5)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 104));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isIndoor", *(unsigned char *)(a1 + 112));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isMotionOverrideSet", *(unsigned char *)(a1 + 113));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "metsWR", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "steps", *(_DWORD *)(a1 + 108));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "stepsDuration", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "truthMetsGradeCorrected", *(double *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_35:
  PB::TextFormatter::format(this, "truthMetsStrollerCorrected", *(double *)(a1 + 88));
  if ((*(_WORD *)(a1 + 116) & 0x800) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 96));
LABEL_18:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178A460(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 116) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 116) |= 0x2000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 108) = v25;
              goto LABEL_108;
            case 3u:
              *(_WORD *)(a1 + 116) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 116) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 116) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 116) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 116) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 116) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 116) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 116) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 116) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xCu:
              *(_WORD *)(a1 + 116) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xDu:
              *(_WORD *)(a1 + 116) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
LABEL_97:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *(_WORD *)(a1 + 116) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *(_WORD *)(a1 + 116) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *(_WORD *)(a1 + 116) |= 0x1000u;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  unint64_t v43 = v31++;
                  char v44 = *(unsigned char *)(v32 + v43);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_106;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v35;
LABEL_108:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_108;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10178AB28(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 2u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 112), 0xFu);
    if ((*(_WORD *)(v3 + 116) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_33;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 113), 0xEu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_32;
  }
LABEL_16:
  if ((v4 & 0x1000) == 0) {
    return result;
  }
LABEL_33:
  unsigned int v5 = *(_DWORD *)(v3 + 104);

  return PB::Writer::writeVarInt(this, v5, 0x10u);
}

double sub_10178AD20(void *a1)
{
  *a1 = &off_10233AA08;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)((char *)a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

void sub_10178AD4C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178AD84(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10233AA08;
  *(void *)(result + 28) = 0xFFFFFFFFLL;
  char v2 = *(unsigned char *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(result + 32) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*(unsigned char *)(a2 + 32))
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(result + 32) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    int v7 = *(_DWORD *)(a2 + 28);
    *(unsigned char *)(result + 32) = v3 | 8;
    *(_DWORD *)(result + 28) = v7;
    return result;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v6;
  if ((*(unsigned char *)(a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10178AE24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampExit", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestampSet", *(double *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "userResponse", *(_DWORD *)(a1 + 28));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178AEE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_33;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_33;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_49;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_49:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_33:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_53;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_55:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_55;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10178B21C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  int v5 = *(_DWORD *)(v3 + 28);

  return PB::Writer::writeVarInt(this, v5, 4u);
}

uint64_t sub_10178B2C4(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AA40;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_10178B2EC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10178B324(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AA40;
  *(_DWORD *)(a1 + 56) = 0;
  char v2 = *(unsigned char *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(unsigned char *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(unsigned char *)(a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(unsigned char *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(unsigned char *)(a1 + 56) = v3;
    *(double *)(a1 + 40) = result;
    char v2 = *(unsigned char *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(unsigned char *)(a1 + 56) = v3;
  *(double *)(a1 + 16) = result;
  char v2 = *(unsigned char *)(a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *(double *)(a2 + 8);
    *(unsigned char *)(a1 + 56) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_13:
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(unsigned char *)(a1 + 56) = v3;
  *(double *)(a1 + 48) = result;
  if (*(unsigned char *)(a2 + 56)) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_10178B3F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 56);
  if (v5)
  {
    PB::TextFormatter::format(this, "complexHandMotionPercentage", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "straightnessMetric", *(double *)(a1 + 40));
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "walkPercentage", *(double *)(a1 + 48));
LABEL_8:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178B4FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 56) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(unsigned char *)(a1 + 56) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(unsigned char *)(a1 + 56) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(unsigned char *)(a1 + 56) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(unsigned char *)(a1 + 56) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(unsigned char *)(a1 + 56) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_43:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10178B7EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 56);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 5u);
    if ((*(unsigned char *)(v3 + 56) & 1) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5, 6u);
}

uint64_t sub_10178B8CC(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AA78;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10178B8F4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178B92C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AA78;
  *(_DWORD *)(result + 20) = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_10178B990(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "motionState", *(_DWORD *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178BA0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10178BC9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(this, v5, 2u);
  }
  return result;
}

double sub_10178BD08(uint64_t a1)
{
  *(void *)a1 = &off_10233AAB0;
  *(_DWORD *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_10178BD38(PB::Base *this)
{
  *(void *)this = &off_10233AAB0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10178BDCC(PB::Base *a1)
{
  sub_10178BD38(a1);

  operator delete();
}

uint64_t sub_10178BE04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AAB0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(void *)(a2 + 32)) {
    operator new();
  }
  if (a1 != a2) {
    sub_1000FB43C((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  char v4 = *(unsigned char *)(a2 + 48);
  if ((v4 & 2) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 44);
    *(unsigned char *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 44) = v5;
    char v4 = *(unsigned char *)(a2 + 48);
  }
  if (v4)
  {
    int v6 = *(_DWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t sub_10178BF1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(float **)(a1 + 8);
  int v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "gyroBias", v7);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "super");
  }
  char v9 = *(unsigned char *)(a1 + 48);
  if (v9)
  {
    PB::TextFormatter::format(this, "temperatureGyro", *(float *)(a1 + 40));
    char v9 = *(unsigned char *)(a1 + 48);
  }
  if ((v9 & 2) != 0) {
    PB::TextFormatter::format(this, "temperatureGyroBias", *(float *)(a1 + 44));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10178C00C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v23 = *((void *)this + 1);
            unint64_t v24 = *((void *)this + 2);
            while (v23 < v24 && !*((unsigned char *)this + 24))
            {
              char v26 = *(char **)(a1 + 16);
              unint64_t v25 = *(void *)(a1 + 24);
              if ((unint64_t)v26 >= v25)
              {
                char v28 = (char *)*v8;
                uint64_t v29 = (v26 - (unsigned char *)*v8) >> 2;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62) {
                  goto LABEL_87;
                }
                uint64_t v31 = v25 - (void)v28;
                if (v31 >> 1 > v30) {
                  unint64_t v30 = v31 >> 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  char v33 = (char *)sub_10017EA34(v9, v32);
                  char v28 = *(char **)(a1 + 8);
                  char v26 = *(char **)(a1 + 16);
                }
                else
                {
                  char v33 = 0;
                }
                unsigned int v34 = &v33[4 * v29];
                *(_DWORD *)unsigned int v34 = 0;
                char v27 = v34 + 4;
                while (v26 != v28)
                {
                  int v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *(void *)(a1 + 8) = v34;
                *(void *)(a1 + 16) = v27;
                *(void *)(a1 + 24) = &v33[4 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(_DWORD *)char v26 = 0;
                char v27 = v26 + 4;
              }
              *(void *)(a1 + 16) = v27;
              unint64_t v36 = *((void *)this + 1);
              if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v27 - 1) = *(_DWORD *)(*(void *)this + v36);
              unint64_t v24 = *((void *)this + 2);
              unint64_t v23 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v23;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v40 = *(char **)(a1 + 16);
            unint64_t v39 = *(void *)(a1 + 24);
            if ((unint64_t)v40 >= v39)
            {
              unsigned int v42 = (char *)*v8;
              uint64_t v43 = (v40 - (unsigned char *)*v8) >> 2;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62) {
LABEL_87:
              }
                sub_1001D7FD4();
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 1 > v44) {
                unint64_t v44 = v45 >> 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                unint64_t v47 = (char *)sub_10017EA34(v9, v46);
                unsigned int v42 = *(char **)(a1 + 8);
                char v40 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v47 = 0;
              }
              char v48 = &v47[4 * v43];
              *(_DWORD *)char v48 = 0;
              char v41 = v48 + 4;
              while (v40 != v42)
              {
                int v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *((_DWORD *)v48 - 1) = v49;
                v48 -= 4;
              }
              *(void *)(a1 + 8) = v48;
              *(void *)(a1 + 16) = v41;
              *(void *)(a1 + 24) = &v47[4 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(_DWORD *)char v40 = 0;
              char v41 = v40 + 4;
            }
            *(void *)(a1 + 16) = v41;
            unint64_t v50 = *((void *)this + 1);
            if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *((void *)this + 2))
            {
              *(v41 - 1) = *(_DWORD *)(*(void *)this + v50);
LABEL_78:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_76:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_79:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_76;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_78;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_76;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_78;
        default:
          if ((PB::Reader::skip(this, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_79;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10178C4BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  int v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 2u);
  }
  char v8 = *(unsigned char *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 44), 3u);
    char v8 = *(unsigned char *)(v3 + 48);
  }
  if (v8)
  {
    float v9 = *(float *)(v3 + 40);
    return PB::Writer::write(this, v9, 4u);
  }
  return result;
}

uint64_t sub_10178C568(uint64_t result)
{
  *(void *)double result = &off_10233AAE8;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_10178C590(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178C5C8(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10233AAE8;
  *(_DWORD *)(result + 64) = 0;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    char v3 = 32;
    *(unsigned char *)(result + 64) = 32;
    *(void *)(result + 48) = v4;
    char v2 = *(unsigned char *)(a2 + 64);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 64) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(result + 64) = v3;
    *(void *)(result + 24) = v5;
    char v2 = *(unsigned char *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(unsigned char *)(result + 64) = v3;
    *(void *)(result + 32) = v6;
    char v2 = *(unsigned char *)(a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(unsigned char *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v7;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(unsigned char *)(result + 64) = v3;
  *(void *)(result + 40) = v8;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(result + 64) = v3;
  *(void *)(result + 8) = v9;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_18:
    int v11 = *(_DWORD *)(a2 + 60);
    *(unsigned char *)(result + 64) = v3 | 0x80;
    *(_DWORD *)(result + 60) = v11;
    return result;
  }
LABEL_17:
  uint64_t v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(unsigned char *)(result + 64) = v3;
  *(void *)(result + 16) = v10;
  if ((*(unsigned char *)(a2 + 64) & 0x80) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_10178C6D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "firstRingSensorTimeStampMicroSeconds", *(void *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds", *(void *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "medianBufferNumSamples", *(_DWORD *)(a1 + 56));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "medianNorthAlignmentEstimateRad", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "newNorthAlignmentEstimateRad", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "numRingSensorSamples", *(_DWORD *)(a1 + 60));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "timeElapsedSinceLastUpdateMicroSeconds", *(void *)(a1 + 40));
  if ((*(unsigned char *)(a1 + 64) & 0x20) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
LABEL_10:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178C818(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 64) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 64) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 64) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_104:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(unsigned char *)(a1 + 64) |= 0x40u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_130;
            case 5u:
              *(unsigned char *)(a1 + 64) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_113:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_113;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_114:
              *(void *)(a1 + 40) = v31;
              goto LABEL_130;
            case 6u:
              *(unsigned char *)(a1 + 64) |= 1u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_118:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_118;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_119:
              *(void *)(a1 + 8) = v37;
              goto LABEL_130;
            case 7u:
              *(unsigned char *)(a1 + 64) |= 2u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_123:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_123;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_124:
              *(void *)(a1 + 16) = v43;
              goto LABEL_130;
            case 8u:
              *(unsigned char *)(a1 + 64) |= 0x80u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 60) = v49;
LABEL_130:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_130;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10178CF04(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 4u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 5u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 7u);
    if ((*(unsigned char *)(v3 + 64) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 6u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_17:
  unsigned int v5 = *(_DWORD *)(v3 + 60);

  return PB::Writer::writeVarInt(this, v5, 8u);
}

uint64_t sub_10178D01C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AB20;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_10178D048(PB::Base *this)
{
  *(void *)this = &off_10233AB20;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10178D0DC(PB::Base *a1)
{
  sub_10178D048(a1);

  operator delete();
}

uint64_t sub_10178D114(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &off_10233AB20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (*(void *)(a2 + 48)) {
    operator new();
  }
  if ((*(unsigned char *)(a2 + 64) & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) |= 4u;
    *(void *)(a1 + 56) = v4;
  }
  if (a1 != a2) {
    sub_1002DD194((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  char v5 = *(unsigned char *)(a2 + 64);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 64) |= 1u;
    *(void *)(a1 + 32) = v6;
    char v5 = *(unsigned char *)(a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 64) |= 2u;
    *(void *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t sub_10178D24C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "lastAuxTimeStampMicroSeconds", *(void *)(a1 + 32));
    char v5 = *(unsigned char *)(a1 + 64);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds", *(void *)(a1 + 40));
  }
  uint64_t v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "qSP", v8);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "super");
  }
  if ((*(unsigned char *)(a1 + 64) & 4) != 0) {
    PB::TextFormatter::format(this, "timeStampMicroSeconds", *(void *)(a1 + 56));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10178D358(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *(unsigned char *)(a1 + 64) |= 4u;
          unint64_t v23 = *((void *)this + 1);
          unint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_108;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v16 = v27++ > 8;
            }
            while (!v16);
LABEL_78:
            uint64_t v28 = 0;
            goto LABEL_108;
          }
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)this + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              uint64_t v28 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v63 = v23 + 1;
              char v64 = *(unsigned char *)(v25 + v23);
              *((void *)this + 1) = v63;
              v28 |= (unint64_t)(v64 & 0x7F) << v61;
              if (v64 < 0)
              {
                v61 += 7;
                unint64_t v23 = v63;
                BOOL v16 = v62++ > 8;
                if (v16) {
                  goto LABEL_78;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v28 = 0;
              }
            }
            break;
          }
LABEL_108:
          *(void *)(a1 + 56) = v28;
          goto LABEL_126;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v31 = *((void *)this + 1);
            unint64_t v32 = *((void *)this + 2);
            while (v31 < v32 && !*((unsigned char *)this + 24))
            {
              uint64_t v34 = *(char **)(a1 + 16);
              unint64_t v33 = *(void *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                unsigned int v36 = (char *)*v8;
                uint64_t v37 = (v34 - (unsigned char *)*v8) >> 3;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 61) {
                  goto LABEL_136;
                }
                uint64_t v39 = v33 - (void)v36;
                if (v39 >> 2 > v38) {
                  unint64_t v38 = v39 >> 2;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  char v41 = (char *)sub_1000DA54C(v9, v40);
                  unsigned int v36 = *(char **)(a1 + 8);
                  uint64_t v34 = *(char **)(a1 + 16);
                }
                else
                {
                  char v41 = 0;
                }
                unsigned int v42 = &v41[8 * v37];
                *(void *)unsigned int v42 = 0;
                char v35 = v42 + 8;
                while (v34 != v36)
                {
                  uint64_t v43 = *((void *)v34 - 1);
                  v34 -= 8;
                  *((void *)v42 - 1) = v43;
                  v42 -= 8;
                }
                *(void *)(a1 + 8) = v42;
                *(void *)(a1 + 16) = v35;
                *(void *)(a1 + 24) = &v41[8 * v40];
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(void *)uint64_t v34 = 0;
                char v35 = v34 + 8;
              }
              *(void *)(a1 + 16) = v35;
              unint64_t v44 = *((void *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(void *)(*(void *)this + v44);
              unint64_t v32 = *((void *)this + 2);
              unint64_t v31 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v66 = *(char **)(a1 + 16);
            unint64_t v65 = *(void *)(a1 + 24);
            if ((unint64_t)v66 >= v65)
            {
              uint64_t v76 = (char *)*v8;
              uint64_t v77 = (v66 - (unsigned char *)*v8) >> 3;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61) {
LABEL_136:
              }
                sub_1001D7FD4();
              uint64_t v79 = v65 - (void)v76;
              if (v79 >> 2 > v78) {
                unint64_t v78 = v79 >> 2;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                unint64_t v81 = (char *)sub_1000DA54C(v9, v80);
                uint64_t v76 = *(char **)(a1 + 8);
                char v66 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v81 = 0;
              }
              unint64_t v82 = &v81[8 * v77];
              *(void *)unint64_t v82 = 0;
              char v67 = v82 + 8;
              while (v66 != v76)
              {
                uint64_t v83 = *((void *)v66 - 1);
                v66 -= 8;
                *((void *)v82 - 1) = v83;
                v82 -= 8;
              }
              *(void *)(a1 + 8) = v82;
              *(void *)(a1 + 16) = v67;
              *(void *)(a1 + 24) = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)char v66 = 0;
              char v67 = v66 + 8;
            }
            *(void *)(a1 + 16) = v67;
            unint64_t v84 = *((void *)this + 1);
            if (v84 <= 0xFFFFFFFFFFFFFFF7 && v84 + 8 <= *((void *)this + 2))
            {
              *(v67 - 1) = *(void *)(*(void *)this + v84);
              *((void *)this + 1) += 8;
            }
            else
            {
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_126:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 64) |= 1u;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_111;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v16 = v49++ > 8;
            }
            while (!v16);
LABEL_87:
            uint64_t v50 = 0;
            goto LABEL_111;
          }
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              uint64_t v50 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v70 = v45 + 1;
              char v71 = *(unsigned char *)(v47 + v45);
              *((void *)this + 1) = v70;
              v50 |= (unint64_t)(v71 & 0x7F) << v68;
              if (v71 < 0)
              {
                v68 += 7;
                unint64_t v45 = v70;
                BOOL v16 = v69++ > 8;
                if (v16) {
                  goto LABEL_87;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v50 = 0;
              }
            }
            break;
          }
LABEL_111:
          *(void *)(a1 + 32) = v50;
          goto LABEL_126;
        case 5u:
          *(unsigned char *)(a1 + 64) |= 2u;
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_114;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v16 = v57++ > 8;
            }
            while (!v16);
LABEL_94:
            uint64_t v58 = 0;
            goto LABEL_114;
          }
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              uint64_t v58 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v74 = v53 + 1;
              char v75 = *(unsigned char *)(v55 + v53);
              *((void *)this + 1) = v74;
              v58 |= (unint64_t)(v75 & 0x7F) << v72;
              if (v75 < 0)
              {
                v72 += 7;
                unint64_t v53 = v74;
                BOOL v16 = v73++ > 8;
                if (v16) {
                  goto LABEL_94;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v58 = 0;
              }
            }
            break;
          }
LABEL_114:
          *(void *)(a1 + 40) = v58;
          goto LABEL_126;
        default:
          if ((PB::Reader::skip(this, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_126;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10178DA64(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AB58;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_10178DA88(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 48);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(unsigned char *)(v3 + 64) & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 2u);
  }
  char v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }
  char v8 = *(unsigned char *)(v3 + 64);
  if (v8)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 4u);
    char v8 = *(unsigned char *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
  {
    unint64_t v9 = *(void *)(v3 + 40);
    return PB::Writer::writeVarInt(this, v9, 5u);
  }
  return result;
}

void sub_10178DB50(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178DB88(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AB58;
  *(_DWORD *)(result + 76) = 0;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    __int16 v3 = 16;
    *(_WORD *)(result + 76) = 16;
    *(void *)(result + 40) = v4;
    __int16 v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 76) = v3;
    *(void *)(result + 48) = v5;
    __int16 v2 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 76) = v3;
    *(void *)(result + 56) = v6;
    __int16 v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 64) = v7;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 8) = v8;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 16) = v9;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 32) = v10;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      return result;
    }
LABEL_20:
    char v12 = *(unsigned char *)(a2 + 72);
    *(_WORD *)(result + 76) = v3 | 0x100;
    *(unsigned char *)(result + 72) = v12;
    return result;
  }
LABEL_19:
  uint64_t v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 76) & 0x100) != 0) {
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10178DCAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 76);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "estimated", *(unsigned char *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "estimationUpdateIndex", *(void *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "rollAngle", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "y", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x80) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 64));
LABEL_11:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178DE10(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 76) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 2u:
              *(_WORD *)(a1 + 76) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 3u:
              *(_WORD *)(a1 + 76) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 4u:
              *(_WORD *)(a1 + 76) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 5u:
              *(_WORD *)(a1 + 76) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 6u:
              *(_WORD *)(a1 + 76) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 7u:
              *(_WORD *)(a1 + 76) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_64:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 76) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_68:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_68;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_69:
              *(void *)(a1 + 24) = v25;
LABEL_70:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 76) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 72) = v28;
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10178E274(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 8u);
    if ((*(_WORD *)(v3 + 76) & 0x100) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_19:
  char v5 = *(unsigned char *)(v3 + 72);

  return PB::Writer::write(this, v5, 9u);
}

uint64_t sub_10178E3A8(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AB90;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10178E3D4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10178E40C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AB90;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    char v5 = *(unsigned char *)(a2 + 28);
    v3 |= 8u;
    *(unsigned char *)(a1 + 32) = v3;
    *(unsigned char *)(a1 + 28) = v5;
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 8);
    *(unsigned char *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if (*(unsigned char *)(a2 + 32)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10178E4AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "avgRelOmegaRps", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ringSensorTrustModelMode", *(_DWORD *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "trustPencilRingSensorBool", *(unsigned char *)(a1 + 28));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178E570(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_49;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 28) = v22;
              goto LABEL_55;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_53;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_55:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_49:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_55;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_55;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10178E8A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_10178E950(uint64_t result)
{
  *(void *)uint64_t result = &off_10233ABC8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10178E978(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10178E9B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233ABC8;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    double result = *(double *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = v2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_10178EA14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "tipForce", *(double *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178EA90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }
      unint64_t v2 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_10178EC6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_10178ECD8(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AC00;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_10178ED00(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10178ED38(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AC00;
  *(_DWORD *)(a1 + 88) = 0;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    double result = *(double *)(a2 + 48);
    __int16 v3 = 32;
    *(_WORD *)(a1 + 88) = 32;
    *(double *)(a1 + 48) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 56) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    double result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 64) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 72) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 8) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 24) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v5 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 84) = v5;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v6 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v6;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    double result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_23:
  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_10178EE98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 88);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeAngleConfidence", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "azimuthAngleConfidence", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pathFlags", *(_DWORD *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pathStage", *(_DWORD *)(a1 + 84));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionConfidence", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "y", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 72));
LABEL_13:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178F03C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 88) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x400u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_85;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_84;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_85;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_91;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_90;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_89;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_90;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *(_DWORD *)(a1 + 80) = v31;
LABEL_91:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_80:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_91;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_91;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10178F5C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 3u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 4u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 6u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 7u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 8u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v5, 0xBu);
}

uint64_t sub_10178F72C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AC38;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10178F754(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178F78C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AC38;
  *(_DWORD *)(result + 28) = 0;
  char v2 = *(unsigned char *)(a2 + 28);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(result + 28) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(result + 28) = v3;
    *(void *)(result + 16) = v5;
    char v2 = *(unsigned char *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(result + 28) = v3 | 4;
    *(_DWORD *)(result + 24) = v6;
  }
  return result;
}

uint64_t sub_10178F80C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleTime", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "wrMets", *(double *)(a1 + 16));
LABEL_5:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178F8B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)this + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(unsigned char *)(a1 + 28) |= 4u;
      unint64_t v21 = *((void *)this + 1);
      unint64_t v2 = *((void *)this + 2);
      uint64_t v22 = *(void *)this;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v25 = 0;
        if (v2 <= v21) {
          unint64_t v2 = *((void *)this + 1);
        }
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)this + 24) = 1;
            goto LABEL_52;
          }
          unint64_t v30 = v21++;
          char v31 = *(unsigned char *)(v22 + v30);
          *((void *)this + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            break;
          }
          v28 += 7;
          BOOL v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((unsigned char *)this + 24)) {
          LODWORD(v25) = 0;
        }
LABEL_51:
        unint64_t v2 = v30 + 1;
      }
      else
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (1)
        {
          unint64_t v2 = v21 + 1;
          *((void *)this + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            break;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *(_DWORD *)(a1 + 24) = v25;
      goto LABEL_53;
    }
    if (v20 == 2)
    {
      *(unsigned char *)(a1 + 28) |= 2u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_53;
      }
      *(unsigned char *)(a1 + 28) |= 1u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_47:
        unint64_t v2 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)this + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)this + 2);
  }
  return i == 0;
}

uint64_t sub_10178FB80(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(this, v5, 3u);
}

uint64_t sub_10178FC0C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AC70;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10178FC34(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10178FC6C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AC70;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(unsigned char *)(result + 44) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(unsigned char *)(a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*(unsigned char *)(a2 + 44))
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(result + 44) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(unsigned char *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(result + 44) = v3;
    *(void *)(result + 16) = v6;
    char v2 = *(unsigned char *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(unsigned char *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    int v9 = *(_DWORD *)(a2 + 40);
    *(unsigned char *)(result + 44) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v9;
    return result;
  }
LABEL_13:
  int v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(unsigned char *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v8;
  if ((*(unsigned char *)(a2 + 44) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_10178FD40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 32));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "algorithmVersion", *(_DWORD *)(a1 + 36));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "sampleStopReason", *(_DWORD *)(a1 + 40));
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
LABEL_8:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10178FE44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_76;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_76;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_76:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_80;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_81;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_92;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_85;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_92;
            case 6u:
              *(unsigned char *)(a1 + 44) |= 0x20u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_90;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_92:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_92;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101790350(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  unsigned int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(this, v5, 6u);
}

uint64_t sub_101790430(uint64_t result)
{
  *(void *)uint64_t result = &off_10233ACA8;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_101790458(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101790490(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233ACA8;
  *(_DWORD *)(a1 + 84) = 0;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 76);
    __int16 v3 = 512;
    *(_WORD *)(a1 + 84) = 512;
    *(_DWORD *)(a1 + 76) = v4;
    __int16 v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 64) = result;
    __int16 v2 = *(_WORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 16) = result;
    __int16 v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 24) = result;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 40) = result;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 32) = result;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 8) = result;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v6 = *(unsigned char *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 84) = v3;
  *(unsigned char *)(a1 + 80) = v6;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 48) = result;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    double result = *(double *)(a2 + 56);
    *(_WORD *)(a1 + 84) = v3 | 0x40;
    *(double *)(a1 + 56) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 84) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  if ((*(_WORD *)(a2 + 84) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_1017905F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 84);
  if (v5)
  {
    PB::TextFormatter::format(this, "ambient", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 84);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineAccuracy", *(float *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "flags", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "header", *(_DWORD *)(a1 + 76));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intensity", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "intensityCalDelta", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "pocketFlag", *(unsigned char *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "pocketProbability", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "temperature", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 84) & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "ts", *(double *)(a1 + 64));
LABEL_13:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101790794(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 84) |= 0x200u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_76;
                  }
                  unint64_t v31 = v20++;
                  char v32 = *(unsigned char *)(v21 + v31);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_75:
                unint64_t v2 = v31 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_76;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *(_DWORD *)(a1 + 76) = v24;
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 84) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 3u:
              *(_WORD *)(a1 + 84) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 4u:
              *(_WORD *)(a1 + 84) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 5u:
              *(_WORD *)(a1 + 84) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 6u:
              *(_WORD *)(a1 + 84) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 7u:
              *(_WORD *)(a1 + 84) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 84) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 80) = v28;
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 84) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 0xAu:
              *(_WORD *)(a1 + 84) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *(_WORD *)(a1 + 84) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
LABEL_70:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_71:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_77;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_77:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101790C78(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 84);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 76), 1u);
    __int16 v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 6u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 7u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 80), 8u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0xAu);
    if ((*(_WORD *)(v3 + 84) & 0x40) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 56);

  return PB::Writer::write(this, v5, 0xBu);
}

double sub_101790DE4(uint64_t a1)
{
  *(void *)a1 = &off_10233ACE0;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101790E18(PB::Base *this)
{
  *(void *)this = &off_10233ACE0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101790E8C(PB::Base *a1)
{
  sub_101790E18(a1);

  operator delete();
}

uint64_t sub_101790EC4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233ACE0;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1002DD194(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1002DD194((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_101790F68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(double **)(a1 + 8);
  char v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "position", v10);
  }
  if (*(unsigned char *)(a1 + 64)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101791030(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          while (v41 < v42 && !*((unsigned char *)this + 24))
          {
            unsigned int v44 = *(char **)(a1 + 16);
            unint64_t v43 = *(void *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              char v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_1000DA54C(v11, v50);
                char v46 = *(char **)(a1 + 8);
                unsigned int v44 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v51 = 0;
              }
              char v52 = &v51[8 * v47];
              *(void *)char v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(void *)(a1 + 8) = v52;
              *(void *)(a1 + 16) = v45;
              *(void *)(a1 + 24) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unsigned int v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *(void *)(a1 + 16) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v45 - 1) = *(void *)(*(void *)this + v54);
            unint64_t v42 = *((void *)this + 2);
            unint64_t v41 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        unint64_t v59 = *(char **)(a1 + 16);
        unint64_t v58 = *(void *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          char v66 = (char *)*v10;
          uint64_t v67 = (v59 - (unsigned char *)*v10) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
LABEL_128:
          }
            sub_1001D7FD4();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            char v71 = (char *)sub_1000DA54C(v11, v70);
            char v66 = *(char **)(a1 + 8);
            unint64_t v59 = *(char **)(a1 + 16);
          }
          else
          {
            char v71 = 0;
          }
          unint64_t v74 = &v71[8 * v67];
          *(void *)unint64_t v74 = 0;
          unsigned int v57 = v74 + 8;
          while (v59 != v66)
          {
            uint64_t v75 = *((void *)v59 - 1);
            v59 -= 8;
            *((void *)v74 - 1) = v75;
            v74 -= 8;
          }
          *(void *)(a1 + 8) = v74;
          *(void *)(a1 + 16) = v57;
          *(void *)(a1 + 24) = &v71[8 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(void *)unint64_t v59 = 0;
          unsigned int v57 = v59 + 8;
        }
        *(void *)(a1 + 16) = v57;
LABEL_114:
        unint64_t v76 = *((void *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)this + 2))
        {
LABEL_116:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(void *)(*(void *)this + v76);
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 64) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v26);
LABEL_118:
        *((void *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v27 = *((void *)this + 1);
      unint64_t v28 = *((void *)this + 2);
      while (v27 < v28 && !*((unsigned char *)this + 24))
      {
        unsigned int v30 = *(char **)(a1 + 40);
        unint64_t v29 = *(void *)(a1 + 48);
        if ((unint64_t)v30 >= v29)
        {
          char v32 = (char *)*v8;
          uint64_t v33 = (v30 - (unsigned char *)*v8) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_127;
          }
          uint64_t v35 = v29 - (void)v32;
          if (v35 >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            uint64_t v37 = (char *)sub_1000DA54C(v9, v36);
            char v32 = *(char **)(a1 + 32);
            unsigned int v30 = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t v37 = 0;
          }
          char v38 = &v37[8 * v33];
          *(void *)char v38 = 0;
          unint64_t v31 = v38 + 8;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(void *)(a1 + 32) = v38;
          *(void *)(a1 + 40) = v31;
          *(void *)(a1 + 48) = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)unsigned int v30 = 0;
          unint64_t v31 = v30 + 8;
        }
        *(void *)(a1 + 40) = v31;
        unint64_t v40 = *((void *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)this + 2))
        {
LABEL_82:
          *((unsigned char *)this + 24) = 1;
          break;
        }
        *(v31 - 1) = *(void *)(*(void *)this + v40);
        unint64_t v28 = *((void *)this + 2);
        unint64_t v27 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    char v56 = *(char **)(a1 + 40);
    unint64_t v55 = *(void *)(a1 + 48);
    if ((unint64_t)v56 >= v55)
    {
      char v60 = (char *)*v8;
      uint64_t v61 = (v56 - (unsigned char *)*v8) >> 3;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61) {
LABEL_127:
      }
        sub_1001D7FD4();
      uint64_t v63 = v55 - (void)v60;
      if (v63 >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        unint64_t v65 = (char *)sub_1000DA54C(v9, v64);
        char v60 = *(char **)(a1 + 32);
        char v56 = *(char **)(a1 + 40);
      }
      else
      {
        unint64_t v65 = 0;
      }
      char v72 = &v65[8 * v61];
      *(void *)char v72 = 0;
      unsigned int v57 = v72 + 8;
      while (v56 != v60)
      {
        uint64_t v73 = *((void *)v56 - 1);
        v56 -= 8;
        *((void *)v72 - 1) = v73;
        v72 -= 8;
      }
      *(void *)(a1 + 32) = v72;
      *(void *)(a1 + 40) = v57;
      *(void *)(a1 + 48) = &v65[8 * v64];
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)char v56 = 0;
      unsigned int v57 = v56 + 8;
    }
    *(void *)(a1 + 40) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_1017915A4(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 64)) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  int v4 = (double *)v3[1];
  uint64_t v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }
  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9, 3u);
  }
  return result;
}

double sub_101791628(uint64_t a1)
{
  *(void *)a1 = &off_10233AD18;
  *(_DWORD *)(a1 + 44) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_101791658(PB::Base *this)
{
  *(void *)this = &off_10233AD18;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1017916EC(PB::Base *a1)
{
  sub_101791658(a1);

  operator delete();
}

uint64_t sub_101791724(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AD18;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(void *)(a2 + 32)) {
    operator new();
  }
  if (a1 != a2) {
    sub_1002DD194((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  if (*(unsigned char *)(a2 + 44))
  {
    char v4 = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a1 + 44) |= 1u;
    *(unsigned char *)(a1 + 40) = v4;
  }
  return a1;
}

uint64_t sub_101791820(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "pose");
  }
  double v6 = *(double **)(a1 + 8);
  double v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  if (*(unsigned char *)(a1 + 44)) {
    PB::TextFormatter::format(this, "wasCorrected", *(unsigned char *)(a1 + 40));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1017918F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 44) |= 1u;
        unint64_t v24 = *((void *)this + 1);
        if (v24 >= *((void *)this + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v25 = v24 + 1;
          int v26 = *(unsigned __int8 *)(*(void *)this + v24);
          *((void *)this + 1) = v25;
          BOOL v27 = v26 != 0;
        }
        *(unsigned char *)(a1 + 40) = v27;
      }
      else if (v23 == 2)
      {
        if (v22 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          while (v28 < v29 && !*((unsigned char *)this + 24))
          {
            unint64_t v31 = *(char **)(a1 + 16);
            unint64_t v30 = *(void *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              uint64_t v33 = (char *)*v8;
              uint64_t v34 = (v31 - (unsigned char *)*v8) >> 3;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61) {
                goto LABEL_86;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                unint64_t v35 = v36 >> 2;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                char v38 = (char *)sub_1000DA54C(v9, v37);
                uint64_t v33 = *(char **)(a1 + 8);
                unint64_t v31 = *(char **)(a1 + 16);
              }
              else
              {
                char v38 = 0;
              }
              uint64_t v39 = &v38[8 * v34];
              *(void *)uint64_t v39 = 0;
              char v32 = v39 + 8;
              while (v31 != v33)
              {
                uint64_t v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }
              *(void *)(a1 + 8) = v39;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + 24) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(void *)unint64_t v31 = 0;
              char v32 = v31 + 8;
            }
            *(void *)(a1 + 16) = v32;
            unint64_t v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)this + 2))
            {
              *((unsigned char *)this + 24) = 1;
              break;
            }
            *(v32 - 1) = *(void *)(*(void *)this + v41);
            unint64_t v29 = *((void *)this + 2);
            unint64_t v28 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v28;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v43 = *(char **)(a1 + 16);
          unint64_t v42 = *(void *)(a1 + 24);
          if ((unint64_t)v43 >= v42)
          {
            unint64_t v45 = (char *)*v8;
            uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61) {
LABEL_86:
            }
              sub_1001D7FD4();
            uint64_t v48 = v42 - (void)v45;
            if (v48 >> 2 > v47) {
              unint64_t v47 = v48 >> 2;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49)
            {
              unint64_t v50 = (char *)sub_1000DA54C(v9, v49);
              unint64_t v45 = *(char **)(a1 + 8);
              unint64_t v43 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v50 = 0;
            }
            unint64_t v51 = &v50[8 * v46];
            *(void *)unint64_t v51 = 0;
            unsigned int v44 = v51 + 8;
            while (v43 != v45)
            {
              uint64_t v52 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v51 - 1) = v52;
              v51 -= 8;
            }
            *(void *)(a1 + 8) = v51;
            *(void *)(a1 + 16) = v44;
            *(void *)(a1 + 24) = &v50[8 * v49];
            if (v45) {
              operator delete(v45);
            }
          }
          else
          {
            *(void *)unint64_t v43 = 0;
            unsigned int v44 = v43 + 8;
          }
          *(void *)(a1 + 16) = v44;
          unint64_t v53 = *((void *)this + 1);
          if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *((void *)this + 2))
          {
            *(v44 - 1) = *(void *)(*(void *)this + v53);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
        }
      }
      else
      {
        if (v23 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(this, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101791D80(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  double v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 2u);
  }
  if (*(unsigned char *)(v3 + 44))
  {
    char v8 = *(unsigned char *)(v3 + 40);
    return PB::Writer::write(this, v8, 3u);
  }
  return result;
}

double sub_101791E14(uint64_t a1)
{
  *(void *)a1 = &off_10233AD50;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return result;
}

void sub_101791E48(PB::Base *this)
{
  *(void *)this = &off_10233AD50;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101791EBC(PB::Base *a1)
{
  sub_101791E48(a1);

  operator delete();
}

uint64_t sub_101791EF4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AD50;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  if (a1 != a2)
  {
    sub_1002DD194(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1002DD194((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }
  if (*(unsigned char *)(a2 + 60))
  {
    int v5 = *(_DWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 56) = v5;
  }
  return a1;
}

uint64_t sub_101791F9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 60)) {
    PB::TextFormatter::format(this, "jointName", *(_DWORD *)(a1 + 56));
  }
  int v5 = *(double **)(a1 + 8);
  double v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "rotation", v7);
  }
  char v8 = *(double **)(a1 + 32);
  uint64_t v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101792064(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 60) |= 1u;
        unint64_t v40 = *((void *)this + 1);
        unint64_t v41 = *((void *)this + 2);
        uint64_t v42 = *(void *)this;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v41)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v45 = 0;
          if (v41 <= v40) {
            unint64_t v41 = *((void *)this + 1);
          }
          while (1)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v67 = v40 + 1;
            char v68 = *(unsigned char *)(v42 + v40);
            *((void *)this + 1) = v67;
            v45 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            unint64_t v40 = v67;
            BOOL v18 = v66++ > 8;
            if (v18)
            {
LABEL_90:
              LODWORD(v45) = 0;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v45) = 0;
          }
        }
        else
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          while (1)
          {
            unint64_t v46 = v40 + 1;
            *((void *)this + 1) = v40 + 1;
            char v47 = *(unsigned char *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            unint64_t v40 = v46;
            BOOL v18 = v44++ > 8;
            if (v18) {
              goto LABEL_90;
            }
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v45;
        goto LABEL_133;
      }
      if (v25 == 2) {
        break;
      }
      if (v25 == 1)
      {
        if (v24 != 2)
        {
          uint64_t v63 = *(char **)(a1 + 16);
          unint64_t v62 = *(void *)(a1 + 24);
          if ((unint64_t)v63 >= v62)
          {
            char v71 = (char *)*v10;
            uint64_t v72 = (v63 - (unsigned char *)*v10) >> 3;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61) {
LABEL_143:
            }
              sub_1001D7FD4();
            uint64_t v74 = v62 - (void)v71;
            if (v74 >> 2 > v73) {
              unint64_t v73 = v74 >> 2;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              unint64_t v76 = (char *)sub_1000DA54C(v11, v75);
              char v71 = *(char **)(a1 + 8);
              uint64_t v63 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v76 = 0;
            }
            uint64_t v83 = &v76[8 * v72];
            *(void *)uint64_t v83 = 0;
            unint64_t v64 = v83 + 8;
            while (v63 != v71)
            {
              uint64_t v84 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v83 - 1) = v84;
              v83 -= 8;
            }
            *(void *)(a1 + 8) = v83;
            *(void *)(a1 + 16) = v64;
            *(void *)(a1 + 24) = &v76[8 * v75];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *(void *)uint64_t v63 = 0;
            unint64_t v64 = v63 + 8;
          }
          *(void *)(a1 + 16) = v64;
LABEL_129:
          unint64_t v87 = *((void *)this + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *((void *)this + 2))
          {
            *(v64 - 1) = *(void *)(*(void *)this + v87);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v26 = *((void *)this + 1);
        unint64_t v27 = *((void *)this + 2);
        while (v26 < v27 && !*((unsigned char *)this + 24))
        {
          unint64_t v29 = *(char **)(a1 + 16);
          unint64_t v28 = *(void *)(a1 + 24);
          if ((unint64_t)v29 >= v28)
          {
            unint64_t v31 = (char *)*v10;
            uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              goto LABEL_143;
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              uint64_t v36 = (char *)sub_1000DA54C(v11, v35);
              unint64_t v31 = *(char **)(a1 + 8);
              unint64_t v29 = *(char **)(a1 + 16);
            }
            else
            {
              uint64_t v36 = 0;
            }
            unint64_t v37 = &v36[8 * v32];
            *(void *)unint64_t v37 = 0;
            unint64_t v30 = v37 + 8;
            while (v29 != v31)
            {
              uint64_t v38 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            *(void *)(a1 + 8) = v37;
            *(void *)(a1 + 16) = v30;
            *(void *)(a1 + 24) = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)unint64_t v29 = 0;
            unint64_t v30 = v29 + 8;
          }
          *(void *)(a1 + 16) = v30;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(v30 - 1) = *(void *)(*(void *)this + v39);
          unint64_t v27 = *((void *)this + 2);
          unint64_t v26 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v26;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if ((PB::Reader::skip(this, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_133:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      unint64_t v70 = *(char **)(a1 + 40);
      unint64_t v69 = *(void *)(a1 + 48);
      if ((unint64_t)v70 >= v69)
      {
        uint64_t v77 = (char *)*v8;
        uint64_t v78 = (v70 - (unsigned char *)*v8) >> 3;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 61) {
LABEL_144:
        }
          sub_1001D7FD4();
        uint64_t v80 = v69 - (void)v77;
        if (v80 >> 2 > v79) {
          unint64_t v79 = v80 >> 2;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          unint64_t v82 = (char *)sub_1000DA54C(v9, v81);
          uint64_t v77 = *(char **)(a1 + 32);
          unint64_t v70 = *(char **)(a1 + 40);
        }
        else
        {
          unint64_t v82 = 0;
        }
        unint64_t v85 = &v82[8 * v78];
        *(void *)unint64_t v85 = 0;
        unint64_t v64 = v85 + 8;
        while (v70 != v77)
        {
          uint64_t v86 = *((void *)v70 - 1);
          v70 -= 8;
          *((void *)v85 - 1) = v86;
          v85 -= 8;
        }
        *(void *)(a1 + 32) = v85;
        *(void *)(a1 + 40) = v64;
        *(void *)(a1 + 48) = &v82[8 * v81];
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        *(void *)unint64_t v70 = 0;
        unint64_t v64 = v70 + 8;
      }
      *(void *)(a1 + 40) = v64;
      goto LABEL_129;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v48 = *((void *)this + 1);
    unint64_t v49 = *((void *)this + 2);
    while (v48 < v49 && !*((unsigned char *)this + 24))
    {
      unint64_t v51 = *(char **)(a1 + 40);
      unint64_t v50 = *(void *)(a1 + 48);
      if ((unint64_t)v51 >= v50)
      {
        unint64_t v53 = (char *)*v8;
        uint64_t v54 = (v51 - (unsigned char *)*v8) >> 3;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61) {
          goto LABEL_144;
        }
        uint64_t v56 = v50 - (void)v53;
        if (v56 >> 2 > v55) {
          unint64_t v55 = v56 >> 2;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          unint64_t v58 = (char *)sub_1000DA54C(v9, v57);
          unint64_t v53 = *(char **)(a1 + 32);
          unint64_t v51 = *(char **)(a1 + 40);
        }
        else
        {
          unint64_t v58 = 0;
        }
        unint64_t v59 = &v58[8 * v54];
        *(void *)unint64_t v59 = 0;
        uint64_t v52 = v59 + 8;
        while (v51 != v53)
        {
          uint64_t v60 = *((void *)v51 - 1);
          v51 -= 8;
          *((void *)v59 - 1) = v60;
          v59 -= 8;
        }
        *(void *)(a1 + 32) = v59;
        *(void *)(a1 + 40) = v52;
        *(void *)(a1 + 48) = &v58[8 * v57];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)unint64_t v51 = 0;
        uint64_t v52 = v51 + 8;
      }
      *(void *)(a1 + 40) = v52;
      unint64_t v61 = *((void *)this + 1);
      if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)this + 2))
      {
LABEL_93:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v52 - 1) = *(void *)(*(void *)this + v61);
      unint64_t v49 = *((void *)this + 2);
      unint64_t v48 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v48;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t sub_101792684(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(double **)(result + 8);
  int v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }
  double v7 = *(double **)(v3 + 32);
  char v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    int v10 = *(_DWORD *)(v3 + 56);
    return PB::Writer::writeVarInt(this, v10, 3u);
  }
  return result;
}

void *sub_101792724(void *result)
{
  *double result = off_10233AD88;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_101792748(void **a1)
{
  *a1 = off_10233AD88;
  unint64_t v2 = a1 + 1;
  sub_1016B1E74(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1017927A4(void **a1)
{
  *a1 = off_10233AD88;
  unint64_t v2 = a1 + 1;
  sub_1016B1E74(&v2);
  PB::Base::~Base((PB::Base *)a1);
  operator delete();
}

void *sub_101792814(void *result, uint64_t a2)
{
  result[1] = 0;
  *double result = off_10233AD88;
  result[2] = 0;
  result[3] = 0;
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16)) {
    sub_10179288C();
  }
  return result;
}

void sub_10179288C()
{
}

void sub_101792990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017929D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(uint64_t **)(a1 + 8);
  double v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "joint");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101792A70(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_101792C2C();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_101792C2C()
{
}

void sub_101792D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101792D98(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    int v5 = *v2++;
  return result;
}

uint64_t sub_101792DE4(uint64_t result)
{
  *(void *)uint64_t result = &off_10233ADC0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_101792E0C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101792E44(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233ADC0;
  *(_DWORD *)(result + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 16) = 1;
    *(void *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_101792E80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 16)) {
    PB::TextFormatter::format(this, "userActivity", *(void *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101792EE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101793118(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 16)) {
    return PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_101793138(uint64_t result)
{
  *(void *)uint64_t result = &off_10233ADF8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101793160(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101793198(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233ADF8;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*(unsigned char *)(a2 + 24))
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1017931FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "dot", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101793278(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }
      unint64_t v2 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_101793454(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_1017934C0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AE30;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1017934E8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101793520(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AE30;
  *(_DWORD *)(result + 40) = 0;
  char v2 = *(unsigned char *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(result + 40) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(result + 40) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(unsigned char *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    char v2 = *(unsigned char *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(unsigned char *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v7;
  char v2 = *(unsigned char *)(a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v8;
  char v2 = *(unsigned char *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_16:
    char v10 = *(unsigned char *)(a2 + 37);
    *(unsigned char *)(result + 40) = v3 | 0x40;
    *(unsigned char *)(result + 37) = v10;
    return result;
  }
LABEL_15:
  char v9 = *(unsigned char *)(a2 + 36);
  v3 |= 0x20u;
  *(unsigned char *)(result + 40) = v3;
  *(unsigned char *)(result + 36) = v9;
  if ((*(unsigned char *)(a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_101793610(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "inlierCount", *(_DWORD *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isOutlierCurrentSample", *(unsigned char *)(a1 + 36));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isValidMeasurement", *(unsigned char *)(a1 + 37));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "range", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "rangeFrequency", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "rangeShift", *(float *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101793734(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_61;
            case 3u:
              *(unsigned char *)(a1 + 40) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_66;
                  }
                  unint64_t v33 = v21++;
                  char v34 = *(unsigned char *)(v22 + v33);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_65;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_66;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_67:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 5u:
              *(unsigned char *)(a1 + 40) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_60:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_61:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *(unsigned char *)(a1 + 40) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 36) = v28;
              goto LABEL_67;
            case 7u:
              *(unsigned char *)(a1 + 40) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 37) = v30;
              goto LABEL_67;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_67;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101793B34(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 36), 6u);
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_15:
  char v5 = *(unsigned char *)(v3 + 37);

  return PB::Writer::write(this, v5, 7u);
}

uint64_t sub_101793C30(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AE68;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101793C58(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101793C90(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AE68;
  *(_DWORD *)(result + 20) = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(unsigned char *)(a2 + 16);
    *(unsigned char *)(result + 20) = v2;
    *(unsigned char *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_101793CF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isStart", *(unsigned char *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101793D70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *(unsigned char *)(a1 + 16) = v22;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101793F58(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_101793FC4(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AEA0;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_101793FEC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101794024(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AEA0;
  *(_DWORD *)(a1 + 92) = 0;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    double result = *(double *)(a2 + 56);
    __int16 v3 = 64;
    *(_WORD *)(a1 + 92) = 64;
    *(double *)(a1 + 56) = result;
    __int16 v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 16) = result;
    __int16 v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 24) = result;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 32) = result;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 40) = result;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 64) = result;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 72) = result;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v5 = *(unsigned char *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 92) = v3;
  *(unsigned char *)(a1 + 88) = v5;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v6 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 84) = v6;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 92) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_27:
  char v7 = *(unsigned char *)(a2 + 89);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 92) = v3;
  *(unsigned char *)(a1 + 89) = v7;
  if ((*(_WORD *)(a2 + 92) & 0x20) != 0) {
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1017941BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "distanceFromParticleFilter", *(float *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalAngle", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "horizontalAngleUncertainty", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "horizontalAngleUncertaintyUnfiltered", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isConverged", *(unsigned char *)(a1 + 88));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isDistanceValid", *(unsigned char *)(a1 + 89));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "revokeReason", *(_DWORD *)(a1 + 84));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "velocityX", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "velocityY", *(double *)(a1 + 72));
LABEL_15:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017943A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 92) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 92) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 92) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 92) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  unint64_t v33 = v23++;
                  char v34 = *(unsigned char *)(v24 + v33);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 84) = v27;
LABEL_84:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 92) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_77:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_78:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_84;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_84;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101794908(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 8u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 88), 9u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 89), 0xCu);
    if ((*(_WORD *)(v3 + 92) & 0x20) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_27:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(this, v5, 0xDu);
}

uint64_t sub_101794AAC(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AED8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101794AD4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101794B0C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AED8;
  *(_DWORD *)(a1 + 44) = 0;
  char v2 = *(unsigned char *)(a2 + 44);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 44) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    char v2 = *(unsigned char *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(unsigned char *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    char v2 = *(unsigned char *)(a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(unsigned char *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(unsigned char *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(unsigned char *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(unsigned char *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(unsigned char *)(a2 + 44) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 44) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_101794C18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "noiseVelocityX", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "noiseVelocityY", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "speedUncertainty", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
    if ((*(unsigned char *)(a1 + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101794D5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(unsigned char *)(a1 + 44) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 3u:
          *(unsigned char *)(a1 + 44) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 4u:
          *(unsigned char *)(a1 + 44) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 5u:
          *(unsigned char *)(a1 + 44) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 6u:
          *(unsigned char *)(a1 + 44) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 7u:
          *(unsigned char *)(a1 + 44) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 8u:
          *(unsigned char *)(a1 + 44) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_47:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_49:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_50:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017950CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 7u);
    if ((*(unsigned char *)(v3 + 44) & 8) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5, 8u);
}

uint64_t sub_1017951E4(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AF10;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_10179520C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101795244(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233AF10;
  *(_DWORD *)(result + 60) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    __int16 v3 = 16;
    *(_WORD *)(result + 60) = 16;
    *(void *)(result + 40) = v4;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 60) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(void *)(result + 48) = v6;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 32) = v7;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 8) = v8;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 24) = v9;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *(unsigned char *)(a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(unsigned char *)(result + 58) = v10;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_20:
    char v12 = *(unsigned char *)(a2 + 57);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(unsigned char *)(result + 57) = v12;
    return result;
  }
LABEL_19:
  char v11 = *(unsigned char *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(unsigned char *)(result + 56) = v11;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0) {
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10179536C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if (v5)
  {
    PB::TextFormatter::format(this, "fractionAboveThreshold", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalDistance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isAboveBelow", *(unsigned char *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isAboveBelowMessageShowing", *(unsigned char *)(a1 + 57));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isConverged", *(unsigned char *)(a1 + 58));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "likelihoodAboveThreshold", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  if ((*(_WORD *)(a1 + 60) & 0x20) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "verticalDistance", *(double *)(a1 + 48));
LABEL_11:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017954D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 60) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 60) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 60) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_55:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_43:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 60) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *(unsigned char *)(a1 + 58) = v24;
          break;
        case 8u:
          *(_WORD *)(a1 + 60) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 56) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 60) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *(unsigned char *)(a1 + 57) = v26;
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101795898(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 56), 8u);
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 58), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_19:
  char v5 = *(unsigned char *)(v3 + 57);

  return PB::Writer::write(this, v5, 9u);
}

uint64_t sub_1017959CC(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AF48;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_1017959F4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101795A2C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AF48;
  *(_DWORD *)(a1 + 80) = 0;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 80) = 1;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 80) = v3;
    *(double *)(a1 + 24) = result;
    __int16 v2 = *(_WORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_32:
    double result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 80) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_31:
  char v5 = *(unsigned char *)(a2 + 76);
  v3 |= 0x4000u;
  *(_WORD *)(a1 + 80) = v3;
  *(unsigned char *)(a1 + 76) = v5;
  if ((*(_WORD *)(a2 + 80) & 2) != 0) {
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_101795BFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 80);
  if (v5)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "qStartW", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "qStartX", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "qStartY", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "qStartZ", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "qStopW", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "qStopX", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "qStopY", *(float *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "qStopZ", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rBoresightX", *(float *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rBoresightY", *(float *)(a1 + 68));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rBoresightZ", *(float *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 24));
  if ((*(_WORD *)(a1 + 80) & 0x4000) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "useForwardPrediction", *(unsigned char *)(a1 + 76));
LABEL_17:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101795E20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 80) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_65;
        case 2u:
          *(_WORD *)(a1 + 80) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_65;
        case 3u:
          *(_WORD *)(a1 + 80) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 4u:
          *(_WORD *)(a1 + 80) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 5u:
          *(_WORD *)(a1 + 80) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 6u:
          *(_WORD *)(a1 + 80) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 7u:
          *(_WORD *)(a1 + 80) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 8u:
          *(_WORD *)(a1 + 80) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 9u:
          *(_WORD *)(a1 + 80) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xAu:
          *(_WORD *)(a1 + 80) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xBu:
          *(_WORD *)(a1 + 80) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xCu:
          *(_WORD *)(a1 + 80) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xDu:
          *(_WORD *)(a1 + 80) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_72:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *(_WORD *)(a1 + 80) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *(unsigned char *)(a1 + 76) = v22;
          break;
        case 0xFu:
          *(_WORD *)(a1 + 80) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_68:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_65:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_73:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101796340(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 3u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 9u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 76), 0xEu);
    if ((*(_WORD *)(v3 + 80) & 2) == 0) {
      return result;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_31:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 0xFu);
}

uint64_t sub_10179651C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AF80;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101796544(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_10179657C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AF80;
  *(_DWORD *)(a1 + 24) = 0;
  char v2 = *(unsigned char *)(a2 + 24);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    *(unsigned char *)(a1 + 24) = v3 | 4;
    *(_DWORD *)(a1 + 20) = v4;
  }
  return *(float *)&v4;
}

uint64_t sub_1017965FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  if (*(unsigned char *)(a1 + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_5:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017966A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_36:
        unint64_t v2 = *((void *)this + 1) + 4;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }
      *(unsigned char *)(a1 + 24) |= 1u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
      {
LABEL_32:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_38;
      }
      *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      unint64_t v2 = *((void *)this + 1) + 8;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 24) |= 4u;
    unint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_1017968C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5, 3u);
}

uint64_t sub_101796950(uint64_t result)
{
  *(void *)uint64_t result = &off_10233AFB8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101796978(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_1017969B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233AFB8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    float result = *(float *)(a2 + 28);
    char v3 = 32;
    *(unsigned char *)(a1 + 32) = 32;
    *(float *)(a1 + 28) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 24);
    v3 |= 0x10u;
    *(unsigned char *)(a1 + 32) = v3;
    *(float *)(a1 + 24) = result;
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    float result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(unsigned char *)(a1 + 32) = v3;
    *(float *)(a1 + 20) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  float result = *(float *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(a1 + 32) = v3;
  *(float *)(a1 + 8) = result;
  char v2 = *(unsigned char *)(a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_14:
    float result = *(float *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = v3 | 4;
    *(float *)(a1 + 16) = result;
    return result;
  }
LABEL_13:
  float result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(unsigned char *)(a1 + 32) = v3;
  *(float *)(a1 + 12) = result;
  if ((*(unsigned char *)(a2 + 32) & 4) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_101796A84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "inertialX", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialY", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "inertialZ", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "maxTemp", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "medTocFactoryTemp", *(float *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "medianToc", *(float *)(a1 + 28));
LABEL_8:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101796B88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_43:
            unint64_t v2 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101796E78(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 5u);
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8), 4u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_13:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(this, v5, 6u);
}

void *sub_101796F58(void *result)
{
  *uint64_t result = &off_10233AFF0;
  result[1] = 0;
  return result;
}

void sub_101796F78(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233AFF0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_101796FF8(PB::Base *a1)
{
  sub_101796F78(a1);

  operator delete();
}

void *sub_101797030(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233AFF0;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_1017970D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101797154(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10179736C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101797388(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

void *sub_101797434(void *result)
{
  *uint64_t result = &off_10233B028;
  result[1] = 0;
  return result;
}

void sub_101797454(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233B028;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1017974D4(PB::Base *a1)
{
  sub_101797454(a1);

  operator delete();
}

void *sub_10179750C(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233B028;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_1017975B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101797630(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101797848(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101797864(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B060;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10179788C(PB::Base *this)
{
  *(void *)this = &off_10233B060;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_101797910(PB::Base *a1)
{
  sub_10179788C(a1);

  operator delete();
}

uint64_t sub_101797948(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B060;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 24) = 1;
    *(void *)(result + 8) = v2;
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  return result;
}

uint64_t sub_101797A14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101797AAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if (v20 == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101797D1C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B098;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_101797D40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 24)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
  }
  int v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(this, v4, 2u);
  }
  return result;
}

void sub_101797DAC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101797DE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B098;
  *(_DWORD *)(a1 + 20) = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 20) = 1;
    *(void *)(a1 + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 16);
    *(unsigned char *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_101797E44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101797EC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v25 = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(void *)(a1 + 8) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101798150(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

void *sub_1017981BC(void *result)
{
  *uint64_t result = &off_10233B0D0;
  result[1] = 0;
  return result;
}

void sub_1017981DC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233B0D0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_10179825C(PB::Base *a1)
{
  sub_1017981DC(a1);

  operator delete();
}

void *sub_101798294(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233B0D0;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_10179833C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017983B8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017985D0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_1017985EC(void *result)
{
  *uint64_t result = &off_10233B108;
  result[1] = 0;
  return result;
}

void sub_10179860C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233B108;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_10179868C(PB::Base *a1)
{
  sub_10179860C(a1);

  operator delete();
}

void *sub_1017986C4(void *result, uint64_t a2)
{
  *uint64_t result = &off_10233B108;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_10179876C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017987E8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101798A00(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101798A1C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B140;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101798A48(PB::Base *this)
{
  *(void *)this = &off_10233B140;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101798ADC(PB::Base *a1)
{
  sub_101798A48(a1);

  operator delete();
}

uint64_t sub_101798B14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &off_10233B140;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (*(void *)(a2 + 40)) {
    operator new();
  }
  if (a1 != a2) {
    sub_1002DD194((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 48) |= 1u;
    *(void *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_101798C10(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 48)) {
    PB::TextFormatter::format(this, "originalTimestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "pose");
  }
  uint64_t v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101798CDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 3) {
        break;
      }
      if (v23 == 2)
      {
        if (v22 != 2)
        {
          unint64_t v40 = *(char **)(a1 + 16);
          unint64_t v39 = *(void *)(a1 + 24);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v42 = (char *)*v8;
            uint64_t v43 = (v40 - (unsigned char *)*v8) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_86:
            }
              sub_1001D7FD4();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              char v47 = (char *)sub_1000DA54C(v9, v46);
              uint64_t v42 = *(char **)(a1 + 8);
              unint64_t v40 = *(char **)(a1 + 16);
            }
            else
            {
              char v47 = 0;
            }
            unint64_t v48 = &v47[8 * v43];
            *(void *)unint64_t v48 = 0;
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *(void *)(a1 + 8) = v48;
            *(void *)(a1 + 16) = v41;
            *(void *)(a1 + 24) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(void *)unint64_t v40 = 0;
            unint64_t v41 = v40 + 8;
          }
          *(void *)(a1 + 16) = v41;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2))
          {
LABEL_75:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_78;
          }
          *(v41 - 1) = *(void *)(*(void *)this + v50);
          goto LABEL_77;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        while (v25 < v26 && !*((unsigned char *)this + 24))
        {
          char v28 = *(char **)(a1 + 16);
          unint64_t v27 = *(void *)(a1 + 24);
          if ((unint64_t)v28 >= v27)
          {
            unint64_t v30 = (char *)*v8;
            uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_86;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              unint64_t v35 = (char *)sub_1000DA54C(v9, v34);
              unint64_t v30 = *(char **)(a1 + 8);
              char v28 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v35 = 0;
            }
            uint64_t v36 = &v35[8 * v31];
            *(void *)uint64_t v36 = 0;
            unsigned int v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            *(void *)(a1 + 8) = v36;
            *(void *)(a1 + 16) = v29;
            *(void *)(a1 + 24) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)char v28 = 0;
            unsigned int v29 = v28 + 8;
          }
          *(void *)(a1 + 16) = v29;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)this + 2))
          {
            *((unsigned char *)this + 24) = 1;
            break;
          }
          *(v29 - 1) = *(void *)(*(void *)this + v38);
          unint64_t v26 = *((void *)this + 2);
          unint64_t v25 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v25;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v23 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(this, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
LABEL_78:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 1u;
    unint64_t v24 = *((void *)this + 1);
    if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
      goto LABEL_75;
    }
    *(void *)(a1 + 32) = *(void *)(*(void *)this + v24);
LABEL_77:
    *((void *)this + 1) += 8;
    goto LABEL_78;
  }
  return v4 == 0;
}

uint64_t sub_10179915C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 40);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 2u);
  }
  if (*(unsigned char *)(v3 + 48))
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(this, v8, 3u);
  }
  return result;
}

uint64_t sub_1017991F0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B178;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101799218(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101799250(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B178;
  *(_DWORD *)(result + 20) = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1017992B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectionMask", *(_DWORD *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101799330(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017995C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(this, v5, 2u);
  }
  return result;
}

uint64_t sub_10179962C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B1B0;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_101799654(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_10179968C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B1B0;
  *(_DWORD *)(a1 + 88) = 0;
  int v2 = *(_DWORD *)(a2 + 88);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 88) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 44);
    v3 |= 0x100u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 44) = result;
    int v2 = *(_DWORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    float result = *(float *)(a2 + 52);
    v3 |= 0x400u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 52) = result;
    int v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  float result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 60) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  float result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 56) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  float result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 76) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  float result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v6 = *(unsigned char *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 84) = v6;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  float result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 68) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  float result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 64) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  float result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 16) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 32) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 36) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 20) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 24) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 28) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_40:
    float result = *(float *)(a2 + 48);
    *(_DWORD *)(a1 + 88) = v3 | 0x200;
    *(float *)(a1 + 48) = result;
    return result;
  }
LABEL_39:
  float result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 88) & 0x200) != 0) {
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_1017998CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "baselineError", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "covariancePostMeasurement00", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "covariancePostMeasurement01", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "covariancePostMeasurement11", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "covariancePreMeasurement00", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "covariancePreMeasurement01", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "covariancePreMeasurement11", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "estimate", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "factoryXTalk", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "gain", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "measurement", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "possibleObstructed", *(unsigned char *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "proxBufferMax", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "proxBufferVariance", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "sensitivityCal", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(this, "temperatureCalError", *(float *)(a1 + 80));
  if (*(_DWORD *)(a1 + 88)) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
LABEL_21:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101799B70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 88) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v31 = v20++;
                  char v32 = *(unsigned char *)(v21 + v31);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_103:
                unint64_t v2 = v31 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_104;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_104:
              *(void *)(a1 + 8) = v24;
              goto LABEL_95;
            case 2u:
              *(_DWORD *)(a1 + 88) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_DWORD *)(a1 + 88) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_DWORD *)(a1 + 88) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_DWORD *)(a1 + 88) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_DWORD *)(a1 + 88) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 7u:
              *(_DWORD *)(a1 + 88) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 8u:
              *(_DWORD *)(a1 + 88) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 84) = v28;
              goto LABEL_95;
            case 9u:
              *(_DWORD *)(a1 + 88) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_DWORD *)(a1 + 88) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_DWORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xCu:
              *(_DWORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xDu:
              *(_DWORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xEu:
              *(_DWORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xFu:
              *(_DWORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x11u:
              *(_DWORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x12u:
              *(_DWORD *)(a1 + 88) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x13u:
              *(_DWORD *)(a1 + 88) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
LABEL_94:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_95:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10179A22C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 88);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 2u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 5u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 84), 8u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 9u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0xBu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0xFu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0x10u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x12u);
    if ((*(_DWORD *)(v3 + 88) & 0x200) == 0) {
      return result;
    }
    goto LABEL_39;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0x11u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_39:
  float v5 = *(float *)(v3 + 48);

  return PB::Writer::write(this, v5, 0x13u);
}

double sub_10179A478(uint64_t a1)
{
  *(void *)a1 = &off_10233B1E8;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10179A4AC(PB::Base *this)
{
  *(void *)this = &off_10233B1E8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10179A520(PB::Base *a1)
{
  sub_10179A4AC(a1);

  operator delete();
}

uint64_t sub_10179A558(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B1E8;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  char v5 = *(unsigned char *)(a2 + 72);
  if ((v5 & 2) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 60);
    char v6 = 2;
    *(unsigned char *)(a1 + 72) = 2;
    *(_DWORD *)(a1 + 60) = v7;
    char v5 = *(unsigned char *)(a2 + 72);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*(unsigned char *)(a2 + 72))
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 56);
    v6 |= 1u;
    *(unsigned char *)(a1 + 72) = v6;
    *(_DWORD *)(a1 + 56) = v8;
    char v5 = *(unsigned char *)(a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v11 = *(_DWORD *)(a2 + 64);
  v6 |= 4u;
  *(unsigned char *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 64) = v11;
  if ((*(unsigned char *)(a2 + 72) & 8) != 0)
  {
LABEL_8:
    int v9 = *(_DWORD *)(a2 + 68);
    *(unsigned char *)(a1 + 72) = v6 | 8;
    *(_DWORD *)(a1 + 68) = v9;
  }
LABEL_9:
  if (a1 != a2)
  {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_1000FB43C((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_10179A658(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 72);
  if (v5)
  {
    PB::TextFormatter::format(this, "bC150RXAVE", *(float *)(a1 + 56));
    char v5 = *(unsigned char *)(a1 + 72);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "gC0RXAVE", *(float *)(a1 + 60));
  }
  char v6 = *(float **)(a1 + 8);
  int v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "ntcRamp", v8);
  }
  int v9 = *(float **)(a1 + 32);
  unsigned int v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "rxXT", v11);
  }
  char v12 = *(unsigned char *)(a1 + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(this, "versionPxCL", *(_DWORD *)(a1 + 64));
    char v12 = *(unsigned char *)(a1 + 72);
  }
  if ((v12 & 8) != 0) {
    PB::TextFormatter::format(this, "versionPxTC", *(_DWORD *)(a1 + 68));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10179A774(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 72) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_153;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_155;
        case 2u:
          *(unsigned char *)(a1 + 72) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_153;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_155;
        case 3u:
          *(unsigned char *)(a1 + 72) |= 4u;
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          uint64_t v29 = *(void *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_133;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v18 = v31++ > 8;
            }
            while (!v18);
LABEL_99:
            LODWORD(v32) = 0;
            goto LABEL_133;
          }
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)this + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v73 = v27 + 1;
              char v74 = *(unsigned char *)(v29 + v27);
              *((void *)this + 1) = v73;
              v32 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                unint64_t v27 = v73;
                BOOL v18 = v72++ > 8;
                if (v18) {
                  goto LABEL_99;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v32) = 0;
              }
            }
            break;
          }
LABEL_133:
          *(_DWORD *)(a1 + 64) = v32;
          goto LABEL_156;
        case 4u:
          *(unsigned char *)(a1 + 72) |= 8u;
          unint64_t v35 = *((void *)this + 1);
          unint64_t v36 = *((void *)this + 2);
          uint64_t v37 = *(void *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            char v38 = 0;
            unsigned int v39 = 0;
            uint64_t v40 = 0;
            do
            {
              unint64_t v41 = v35 + 1;
              *((void *)this + 1) = v35 + 1;
              char v42 = *(unsigned char *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0) {
                goto LABEL_136;
              }
              v38 += 7;
              unint64_t v35 = v41;
              BOOL v18 = v39++ > 8;
            }
            while (!v18);
LABEL_106:
            LODWORD(v40) = 0;
            goto LABEL_136;
          }
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v40 = 0;
          if (v36 <= v35) {
            unint64_t v36 = *((void *)this + 1);
          }
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v77 = v35 + 1;
              char v78 = *(unsigned char *)(v37 + v35);
              *((void *)this + 1) = v77;
              v40 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                unint64_t v35 = v77;
                BOOL v18 = v76++ > 8;
                if (v18) {
                  goto LABEL_106;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v40) = 0;
              }
            }
            break;
          }
LABEL_136:
          *(_DWORD *)(a1 + 68) = v40;
          goto LABEL_156;
        case 5u:
          if (v24 != 2)
          {
            uint64_t v80 = *(char **)(a1 + 16);
            unint64_t v79 = *(void *)(a1 + 24);
            if ((unint64_t)v80 >= v79)
            {
              uint64_t v84 = (char *)*v10;
              uint64_t v85 = (v80 - (unsigned char *)*v10) >> 2;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_166:
              }
                sub_1001D7FD4();
              uint64_t v87 = v79 - (void)v84;
              if (v87 >> 1 > v86) {
                unint64_t v86 = v87 >> 1;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_10017EA34(v11, v88);
                uint64_t v84 = *(char **)(a1 + 8);
                uint64_t v80 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v96 = &v89[4 * v85];
              *(_DWORD *)unint64_t v96 = 0;
              unint64_t v81 = v96 + 4;
              while (v80 != v84)
              {
                int v97 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(void *)(a1 + 8) = v96;
              *(void *)(a1 + 16) = v81;
              *(void *)(a1 + 24) = &v89[4 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v80 = 0;
              unint64_t v81 = v80 + 4;
            }
            *(void *)(a1 + 16) = v81;
            goto LABEL_151;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v43 = *((void *)this + 1);
          unint64_t v44 = *((void *)this + 2);
          while (v43 < v44 && !*((unsigned char *)this + 24))
          {
            unint64_t v46 = *(char **)(a1 + 16);
            unint64_t v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              unint64_t v48 = (char *)*v10;
              uint64_t v49 = (v46 - (unsigned char *)*v10) >> 2;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_166;
              }
              uint64_t v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_10017EA34(v11, v52);
                unint64_t v48 = *(char **)(a1 + 8);
                unint64_t v46 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v53 = 0;
              }
              uint64_t v54 = &v53[4 * v49];
              *(_DWORD *)uint64_t v54 = 0;
              char v47 = v54 + 4;
              while (v46 != v48)
              {
                int v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(void *)(a1 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v46 = 0;
              char v47 = v46 + 4;
            }
            *(void *)(a1 + 16) = v47;
            unint64_t v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_111;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            unint64_t v44 = *((void *)this + 2);
            unint64_t v43 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v43;
          }
          goto LABEL_112;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v57 = *((void *)this + 1);
            unint64_t v58 = *((void *)this + 2);
            while (v57 < v58 && !*((unsigned char *)this + 24))
            {
              uint64_t v60 = *(char **)(a1 + 40);
              unint64_t v59 = *(void *)(a1 + 48);
              if ((unint64_t)v60 >= v59)
              {
                unint64_t v62 = (char *)*v8;
                uint64_t v63 = (v60 - (unsigned char *)*v8) >> 2;
                unint64_t v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v65 = v59 - (void)v62;
                if (v65 >> 1 > v64) {
                  unint64_t v64 = v65 >> 1;
                }
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v64;
                }
                if (v66)
                {
                  unint64_t v67 = (char *)sub_10017EA34(v9, v66);
                  unint64_t v62 = *(char **)(a1 + 32);
                  uint64_t v60 = *(char **)(a1 + 40);
                }
                else
                {
                  unint64_t v67 = 0;
                }
                char v68 = &v67[4 * v63];
                *(_DWORD *)char v68 = 0;
                unint64_t v61 = v68 + 4;
                while (v60 != v62)
                {
                  int v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *(void *)(a1 + 32) = v68;
                *(void *)(a1 + 40) = v61;
                *(void *)(a1 + 48) = &v67[4 * v66];
                if (v62) {
                  operator delete(v62);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v60 = 0;
                unint64_t v61 = v60 + 4;
              }
              *(void *)(a1 + 40) = v61;
              unint64_t v70 = *((void *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2))
              {
LABEL_111:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
              unint64_t v58 = *((void *)this + 2);
              unint64_t v57 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v57;
            }
LABEL_112:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v83 = *(char **)(a1 + 40);
            unint64_t v82 = *(void *)(a1 + 48);
            if ((unint64_t)v83 >= v82)
            {
              unint64_t v90 = (char *)*v8;
              uint64_t v91 = (v83 - (unsigned char *)*v8) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_167:
              }
                sub_1001D7FD4();
              uint64_t v93 = v82 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unsigned int v95 = (char *)sub_10017EA34(v9, v94);
                unint64_t v90 = *(char **)(a1 + 32);
                uint64_t v83 = *(char **)(a1 + 40);
              }
              else
              {
                unsigned int v95 = 0;
              }
              char v98 = &v95[4 * v91];
              *(_DWORD *)char v98 = 0;
              unint64_t v81 = v98 + 4;
              while (v83 != v90)
              {
                int v99 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(void *)(a1 + 32) = v98;
              *(void *)(a1 + 40) = v81;
              *(void *)(a1 + 48) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v83 = 0;
              unint64_t v81 = v83 + 4;
            }
            *(void *)(a1 + 40) = v81;
LABEL_151:
            unint64_t v100 = *((void *)this + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((void *)this + 2))
            {
              *(v81 - 1) = *(_DWORD *)(*(void *)this + v100);
LABEL_155:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_153:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_156:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_156;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10179AF14(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 72);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(result + 60), 1u);
    char v4 = *(unsigned char *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_15:
      double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 3u);
      if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(result + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  char v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 5u);
  }
  uint64_t v9 = *(float **)(v3 + 32);
  float v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    float v10 = *v9++;
    double result = PB::Writer::write(this, v10, 6u);
  }
  return result;
}

uint64_t sub_10179AFF0(uint64_t result)
{
  *(void *)double result = &off_10233B220;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10179B018(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10179B050(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10233B220;
  *(_DWORD *)(result + 48) = 0;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v5;
    __int16 v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 32) = v6;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v7;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v8;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v9;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 20) = v10;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v11;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      return result;
    }
LABEL_22:
    char v13 = *(unsigned char *)(a2 + 44);
    *(_WORD *)(result + 48) = v3 | 0x100;
    *(unsigned char *)(result + 44) = v13;
    return result;
  }
LABEL_21:
  char v12 = *(unsigned char *)(a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(result + 48) = v3;
  *(unsigned char *)(result + 45) = v12;
  if ((*(_WORD *)(a2 + 48) & 0x100) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_10179B194(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineConfidence", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intensityCalDelta", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pocketFlag", *(unsigned char *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rxNtcC", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "scanFlags", *(unsigned char *)(a1 + 45));
  if (*(_WORD *)(a1 + 48)) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
LABEL_12:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10179B318(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  unint64_t v33 = v20++;
                  char v34 = *(unsigned char *)(v21 + v33);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_72:
                unint64_t v2 = v33 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_73;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_73:
              *(void *)(a1 + 8) = v24;
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 48) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 4u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 5u:
              *(_WORD *)(a1 + 48) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 7u:
              *(_WORD *)(a1 + 48) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_68:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 44) = v30;
              goto LABEL_74;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_74:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10179B7C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 6u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 7u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 45), 9u);
    if ((*(_WORD *)(v3 + 48) & 0x100) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_21:
  char v5 = *(unsigned char *)(v3 + 44);

  return PB::Writer::write(this, v5, 0xAu);
}

void *sub_10179B914(void *result)
{
  *uint64_t result = &off_10233B258;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_10179B938(PB::Base *this)
{
  *(void *)this = &off_10233B258;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10179B99C(PB::Base *a1)
{
  sub_10179B938(a1);

  operator delete();
}

void *sub_10179B9D4(void *a1, uint64_t a2)
{
  *a1 = &off_10233B258;
  a1[1] = 0;
  uint64_t v3 = (char *)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  if (a1 != (void *)a2) {
    sub_1000FB43C(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_10179BA40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(int **)(a1 + 8);
  int v6 = *(int **)(a1 + 16);
  while (v5 != v6)
  {
    int v7 = *v5++;
    PB::TextFormatter::format(this, "volts", v7);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10179BAB8(void *a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 1);
    char v9 = a1 + 3;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v35 = v12++ > 8;
        if (v35) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v21 = v13 & 7;
      if (v21 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        if (v21 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
          {
            char v22 = (char *)a1[2];
            do
            {
              if ((unint64_t)v22 >= *v9)
              {
                unsigned int v23 = (char *)*v8;
                uint64_t v24 = (v22 - (unsigned char *)*v8) >> 2;
                unint64_t v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 62) {
                  goto LABEL_118;
                }
                uint64_t v26 = *v9 - (void)v23;
                if (v26 >> 1 > v25) {
                  unint64_t v25 = v26 >> 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v25;
                }
                if (v27)
                {
                  BOOL v28 = (char *)sub_10017EA34((uint64_t)v9, v27);
                  unsigned int v23 = (char *)a1[1];
                  char v22 = (char *)a1[2];
                }
                else
                {
                  BOOL v28 = 0;
                }
                int v29 = &v28[4 * v24];
                *(_DWORD *)int v29 = 0;
                BOOL v30 = v29 + 4;
                while (v22 != v23)
                {
                  int v31 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *((_DWORD *)v29 - 1) = v31;
                  v29 -= 4;
                }
                a1[1] = v29;
                a1[2] = v30;
                a1[3] = &v28[4 * v27];
                if (v23) {
                  operator delete(v23);
                }
                char v22 = v30;
              }
              else
              {
                *(_DWORD *)char v22 = 0;
                v22 += 4;
              }
              a1[2] = v22;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v32 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              BOOL v35 = v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v32;
              if (!v35)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v43 = 0;
                while (1)
                {
                  unint64_t v44 = v33 + 1;
                  *((void *)this + 1) = v33 + 1;
                  char v45 = *(unsigned char *)(v34 + v33);
                  v43 |= (unint64_t)(v45 & 0x7F) << v41;
                  if ((v45 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v41 += 7;
                  unint64_t v33 = v44;
                  BOOL v35 = v42++ > 8;
                  if (v35)
                  {
                    LODWORD(v43) = 0;
                    goto LABEL_65;
                  }
                }
              }
              char v36 = 0;
              unsigned int v37 = 0;
              uint64_t v43 = 0;
              if (v32 <= v33) {
                uint64_t v38 = *((void *)this + 1);
              }
              else {
                uint64_t v38 = *((void *)this + 2);
              }
              while (1)
              {
                if (v38 == v33)
                {
                  *((unsigned char *)this + 24) = 1;
                  *((_DWORD *)v22 - 1) = 0;
                  goto LABEL_81;
                }
                unint64_t v39 = v33++;
                char v40 = *(unsigned char *)(v34 + v39);
                *((void *)this + 1) = v33;
                v43 |= (unint64_t)(v40 & 0x7F) << v36;
                if ((v40 & 0x80) == 0) {
                  break;
                }
                v36 += 7;
                BOOL v35 = v37++ > 8;
                if (v35)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_64;
                }
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v43) = 0;
              }
LABEL_64:
              unint64_t v44 = v39 + 1;
LABEL_65:
              *((_DWORD *)v22 - 1) = v43;
            }
            while (v44 < v32 && !*((unsigned char *)this + 24));
          }
LABEL_81:
          PB::Reader::recallMark();
        }
        else
        {
          char v47 = (char *)a1[2];
          unint64_t v46 = a1[3];
          if ((unint64_t)v47 >= v46)
          {
            uint64_t v49 = (char *)*v8;
            uint64_t v50 = (v47 - (unsigned char *)*v8) >> 2;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
LABEL_118:
            }
              sub_1001D7FD4();
            uint64_t v52 = v46 - (void)v49;
            if (v52 >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              uint64_t v54 = (char *)sub_10017EA34((uint64_t)v9, v53);
              uint64_t v49 = (char *)a1[1];
              char v47 = (char *)a1[2];
            }
            else
            {
              uint64_t v54 = 0;
            }
            int v55 = &v54[4 * v50];
            *(_DWORD *)int v55 = 0;
            unint64_t v48 = v55 + 4;
            while (v47 != v49)
            {
              int v56 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v55 - 1) = v56;
              v55 -= 4;
            }
            a1[1] = v55;
            a1[2] = v48;
            a1[3] = &v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_DWORD *)char v47 = 0;
            unint64_t v48 = v47 + 4;
          }
          a1[2] = v48;
          unint64_t v57 = *((void *)this + 1);
          unint64_t v58 = *((void *)this + 2);
          uint64_t v59 = *(void *)this;
          char v60 = 0;
          unsigned int v61 = 0;
          if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v58)
          {
            uint64_t v65 = 0;
            if (v58 <= v57) {
              unint64_t v58 = *((void *)this + 1);
            }
            while (1)
            {
              if (v58 == v57)
              {
                LODWORD(v65) = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_107;
              }
              unint64_t v63 = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              *((void *)this + 1) = v63;
              v65 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                break;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v35 = v61++ > 8;
              if (v35)
              {
LABEL_103:
                LODWORD(v65) = 0;
                goto LABEL_107;
              }
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v65) = 0;
            }
          }
          else
          {
            uint64_t v65 = 0;
            while (1)
            {
              unint64_t v66 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v67 = *(unsigned char *)(v59 + v57);
              v65 |= (unint64_t)(v67 & 0x7F) << v60;
              if ((v67 & 0x80) == 0) {
                break;
              }
              v60 += 7;
              unint64_t v57 = v66;
              BOOL v35 = v61++ > 8;
              if (v35) {
                goto LABEL_103;
              }
            }
          }
LABEL_107:
          *(v48 - 1) = v65;
        }
      }
      else if ((PB::Reader::skip(this, v13 >> 3, v21, 0) & 1) == 0)
      {
        return 0;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10179BF68(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(int **)(result + 8);
  for (i = *(int **)(result + 16); v2 != i; uint64_t result = PB::Writer::writeVarInt(this, v5, 1u))
    int v5 = *v2++;
  return result;
}

uint64_t sub_10179BFB4(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B290;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10179BFD8(PB::Base *this)
{
  *(void *)this = &off_10233B290;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_10068D784((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_10179C03C(PB::Base *a1)
{
  sub_10179BFD8(a1);

  operator delete();
}

uint64_t sub_10179C074(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B290;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = *(void *)(a2 + 16);
    *(unsigned char *)(result + 24) |= 1u;
    *(void *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_10179C154(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "value", *(double *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10179C1CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v21);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10179C3D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v4 = *(double *)(v3 + 16);
    return PB::Writer::write(this, v4, 2u);
  }
  return result;
}

void *sub_10179C43C(void *result)
{
  *uint64_t result = &off_10233B2C8;
  *(void *)((char *)result + 188) = 0;
  return result;
}

void sub_10179C464(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10179C49C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B2C8;
  *(void *)(result + 188) = 0;
  uint64_t v2 = *(void *)(a2 + 188);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = 1;
    *(void *)(result + 188) = 1;
    *(void *)(result + 8) = v4;
    uint64_t v2 = *(void *)(a2 + 188);
    if ((v2 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x800000uLL;
    *(void *)(result + 188) = v3;
    *(_DWORD *)(result + 104) = v5;
    uint64_t v2 = *(void *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000uLL;
    *(void *)(result + 188) = v3;
    *(_DWORD *)(result + 108) = v6;
    uint64_t v2 = *(void *)(a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 112) = v7;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 24) = v8;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v9 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 28) = v9;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v10 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 32) = v10;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v11 = *(_DWORD *)(a2 + 132);
  v3 |= 0x40000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 132) = v11;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 48) = v12;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v13 = *(_DWORD *)(a2 + 96);
  v3 |= 0x200000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 96) = v13;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v14 = *(_DWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 16) = v14;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v15 = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 116) = v15;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v16 = *(_DWORD *)(a2 + 120);
  v3 |= 0x8000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 120) = v16;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v17 = *(_DWORD *)(a2 + 124);
  v3 |= 0x10000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 124) = v17;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 36) = v18;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 40) = v19;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 44) = v20;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v21 = *(_DWORD *)(a2 + 136);
  v3 |= 0x80000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 136) = v21;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 52) = v22;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v23 = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 100) = v23;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v24 = *(_DWORD *)(a2 + 20);
  v3 |= 4uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 20) = v24;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v25 = *(_DWORD *)(a2 + 148);
  v3 |= 0x400000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 148) = v25;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  int v26 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 68) = v26;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v27 = *(_DWORD *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 160) = v27;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v28 = *(_DWORD *)(a2 + 80);
  v3 |= 0x20000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 80) = v28;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v29 = *(_DWORD *)(a2 + 152);
  v3 |= 0x800000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 152) = v29;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v30 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 72) = v30;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v31 = *(_DWORD *)(a2 + 164);
  v3 |= 0x4000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 164) = v31;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v32 = *(_DWORD *)(a2 + 84);
  v3 |= 0x40000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 84) = v32;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  int v33 = *(_DWORD *)(a2 + 156);
  v3 |= 0x1000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 156) = v33;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v34 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 76) = v34;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  int v35 = *(_DWORD *)(a2 + 168);
  v3 |= 0x8000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v35;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  int v36 = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 88) = v36;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  char v37 = *(unsigned char *)(a2 + 183);
  v3 |= 0x200000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 183) = v37;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  int v38 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 56) = v38;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  int v39 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 60) = v39;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  char v40 = *(unsigned char *)(a2 + 182);
  v3 |= 0x100000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 182) = v40;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  char v41 = *(unsigned char *)(a2 + 184);
  v3 |= 0x400000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 184) = v41;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  int v42 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 64) = v42;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  int v43 = *(_DWORD *)(a2 + 140);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 140) = v43;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_94;
  }
LABEL_93:
  int v44 = *(_DWORD *)(a2 + 144);
  v3 |= 0x200000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 144) = v44;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_95;
  }
LABEL_94:
  char v45 = *(unsigned char *)(a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 186) = v45;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_96;
  }
LABEL_95:
  char v46 = *(unsigned char *)(a2 + 181);
  v3 |= 0x80000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 181) = v46;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_97;
  }
LABEL_96:
  char v47 = *(unsigned char *)(a2 + 180);
  v3 |= 0x40000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 180) = v47;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_98;
  }
LABEL_97:
  int v48 = *(_DWORD *)(a2 + 128);
  v3 |= 0x20000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 128) = v48;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_99;
  }
LABEL_98:
  int v49 = *(_DWORD *)(a2 + 176);
  v3 |= 0x20000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v49;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_100;
  }
LABEL_99:
  int v50 = *(_DWORD *)(a2 + 172);
  v3 |= 0x10000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v50;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_101;
  }
LABEL_100:
  int v51 = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 92) = v51;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0) {
      return result;
    }
LABEL_102:
    char v53 = *(unsigned char *)(a2 + 187);
    *(void *)(result + 188) = v3 | 0x2000000000000;
    *(unsigned char *)(result + 187) = v53;
    return result;
  }
LABEL_101:
  char v52 = *(unsigned char *)(a2 + 185);
  v3 |= 0x800000000000uLL;
  *(void *)(result + 188) = v3;
  *(unsigned char *)(result + 185) = v52;
  if ((*(void *)(a2 + 188) & 0x2000000000000) != 0) {
    goto LABEL_102;
  }
  return result;
}

uint64_t sub_10179CA40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "auxHorizontalRotation", *(float *)(a1 + 16));
    uint64_t v5 = *(void *)(a1 + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_57;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxHorizontalTranslation", *(float *)(a1 + 20));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "auxOmegaInertial_X", *(float *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "auxOmegaInertial_Y", *(float *)(a1 + 28));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "auxOmegaInertial_Z", *(float *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "auxUserAccelInertial_X", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Y", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Z", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "auxVerticalRotation", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "auxVerticalTranslation", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "blockHeadTurnFalsePositive", *(unsigned char *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "bodyTurnDetectionVerticalRotationSrc", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "bodyTurnMaximaBaseline", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "counterBodyTurnAboveBaseline", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "hasRecentHeadTurn", *(unsigned char *)(a1 + 181));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "horizontalRotationSimilarity", *(float *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityBaseline", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityThreshold", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarity", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityBaseline", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityThreshold", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "inBodyTurn", *(unsigned char *)(a1 + 182));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "inComplexTransitionState", *(unsigned char *)(a1 + 183));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "inStrongBodyTurn", *(unsigned char *)(a1 + 184));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "longBodyTurnCounter", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "longBodyTurnState", *(unsigned char *)(a1 + 185));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "overrideHeadTurn", *(unsigned char *)(a1 + 186));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "srcHorizontalRotation", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "srcHorizontalTranslation", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "srcOmegaInertial_X", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "srcOmegaInertial_Y", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "srcOmegaInertial_Z", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "srcUserAccelInertial_X", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Y", *(float *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Z", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "srcVertToHrzRotRatio", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "srcVerticalRotation", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "srcVerticalTranslation", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "srcYawRotationExtremaBuffer", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "srcYawRotationMaximaBaseline", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "verticalRotationSimilarity", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "verticalRotationSimilarityBaseline", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "verticalRotationSimilarityThreshold", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "verticalTranslationSimilarity", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityBaseline", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityThreshold", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "yawRateSimilarity1000ms", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x2000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_103:
  PB::TextFormatter::format(this, "yawRateSimilarity200ms", *(float *)(a1 + 176));
  if ((*(void *)(a1 + 188) & 0x2000000000000) != 0) {
LABEL_51:
  }
    PB::TextFormatter::format(this, "yawRateSimilarityState", *(unsigned char *)(a1 + 187));
LABEL_52:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10179D0C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 188) |= 1uLL;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v20);
          uint64_t v21 = *((void *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(void *)(a1 + 188) |= 0x800000uLL;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_205;
        case 3u:
          *(void *)(a1 + 188) |= 0x1000000uLL;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v24);
          goto LABEL_205;
        case 4u:
          *(void *)(a1 + 188) |= 0x2000000uLL;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_205;
        case 5u:
          *(void *)(a1 + 188) |= 8uLL;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_205;
        case 6u:
          *(void *)(a1 + 188) |= 0x10uLL;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_205;
        case 7u:
          *(void *)(a1 + 188) |= 0x20uLL;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_205;
        case 8u:
          *(void *)(a1 + 188) |= 0x40000000uLL;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_205;
        case 9u:
          *(void *)(a1 + 188) |= 0x200uLL;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_205;
        case 0xAu:
          *(void *)(a1 + 188) |= 0x200000uLL;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_205;
        case 0xBu:
          *(void *)(a1 + 188) |= 2uLL;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_205;
        case 0xCu:
          *(void *)(a1 + 188) |= 0x4000000uLL;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_205;
        case 0xDu:
          *(void *)(a1 + 188) |= 0x8000000uLL;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_205;
        case 0xEu:
          *(void *)(a1 + 188) |= 0x10000000uLL;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_205;
        case 0xFu:
          *(void *)(a1 + 188) |= 0x40uLL;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_205;
        case 0x10u:
          *(void *)(a1 + 188) |= 0x80uLL;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_205;
        case 0x11u:
          *(void *)(a1 + 188) |= 0x100uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_205;
        case 0x12u:
          *(void *)(a1 + 188) |= 0x80000000uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_205;
        case 0x13u:
          *(void *)(a1 + 188) |= 0x400uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_205;
        case 0x14u:
          *(void *)(a1 + 188) |= 0x400000uLL;
          unint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_205;
        case 0x15u:
          *(void *)(a1 + 188) |= 4uLL;
          unint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v42);
          goto LABEL_205;
        case 0x16u:
          *(void *)(a1 + 188) |= 0x400000000uLL;
          unint64_t v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v43);
          goto LABEL_205;
        case 0x17u:
          *(void *)(a1 + 188) |= 0x4000uLL;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_205;
        case 0x18u:
          *(void *)(a1 + 188) |= 0x2000000000uLL;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_205;
        case 0x19u:
          *(void *)(a1 + 188) |= 0x20000uLL;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v46);
          goto LABEL_205;
        case 0x1Au:
          *(void *)(a1 + 188) |= 0x800000000uLL;
          unint64_t v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(void *)(a1 + 188) |= 0x8000uLL;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(void *)(a1 + 188) |= 0x4000000000uLL;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_205;
        case 0x1Du:
          *(void *)(a1 + 188) |= 0x40000uLL;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(void *)(a1 + 188) |= 0x1000000000uLL;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(void *)(a1 + 188) |= 0x10000uLL;
          unint64_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v52);
          goto LABEL_205;
        case 0x20u:
          *(void *)(a1 + 188) |= 0x8000000000uLL;
          unint64_t v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v53);
          goto LABEL_205;
        case 0x21u:
          *(void *)(a1 + 188) |= 0x80000uLL;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v54);
          goto LABEL_205;
        case 0x22u:
          *(void *)(a1 + 188) |= 0x200000000000uLL;
          unint64_t v55 = *((void *)this + 1);
          if (v55 >= *((void *)this + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)this + v55);
            *((void *)this + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *(unsigned char *)(a1 + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(void *)(a1 + 188) |= 0x800uLL;
          unint64_t v59 = *((void *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v59);
          goto LABEL_205;
        case 0x24u:
          *(void *)(a1 + 188) |= 0x1000uLL;
          unint64_t v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_205;
        case 0x25u:
          *(void *)(a1 + 188) |= 0x100000000000uLL;
          unint64_t v61 = *((void *)this + 1);
          if (v61 >= *((void *)this + 2))
          {
            BOOL v64 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v62 = v61 + 1;
            int v63 = *(unsigned __int8 *)(*(void *)this + v61);
            *((void *)this + 1) = v62;
            BOOL v64 = v63 != 0;
          }
          *(unsigned char *)(a1 + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(void *)(a1 + 188) |= 0x400000000000uLL;
          unint64_t v65 = *((void *)this + 1);
          if (v65 >= *((void *)this + 2))
          {
            BOOL v68 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v66 = v65 + 1;
            int v67 = *(unsigned __int8 *)(*(void *)this + v65);
            *((void *)this + 1) = v66;
            BOOL v68 = v67 != 0;
          }
          *(unsigned char *)(a1 + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(void *)(a1 + 188) |= 0x2000uLL;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_219;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v112 = v69 + 1;
              char v113 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                unint64_t v69 = v112;
                BOOL v14 = v111++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 64) = v74;
          goto LABEL_207;
        case 0x28u:
          *(void *)(a1 + 188) |= (unint64_t)&_mh_execute_header;
          unint64_t v77 = *((void *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v77);
          goto LABEL_205;
        case 0x29u:
          *(void *)(a1 + 188) |= 0x200000000uLL;
          unint64_t v78 = *((void *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v78);
          goto LABEL_205;
        case 0x2Au:
          *(void *)(a1 + 188) |= 0x1000000000000uLL;
          unint64_t v79 = *((void *)this + 1);
          if (v79 >= *((void *)this + 2))
          {
            BOOL v82 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v80 = v79 + 1;
            int v81 = *(unsigned __int8 *)(*(void *)this + v79);
            *((void *)this + 1) = v80;
            BOOL v82 = v81 != 0;
          }
          *(unsigned char *)(a1 + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(void *)(a1 + 188) |= 0x80000000000uLL;
          unint64_t v83 = *((void *)this + 1);
          if (v83 >= *((void *)this + 2))
          {
            BOOL v86 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v84 = v83 + 1;
            int v85 = *(unsigned __int8 *)(*(void *)this + v83);
            *((void *)this + 1) = v84;
            BOOL v86 = v85 != 0;
          }
          *(unsigned char *)(a1 + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(void *)(a1 + 188) |= 0x40000000000uLL;
          unint64_t v87 = *((void *)this + 1);
          if (v87 >= *((void *)this + 2))
          {
            BOOL v90 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v88 = v87 + 1;
            int v89 = *(unsigned __int8 *)(*(void *)this + v87);
            *((void *)this + 1) = v88;
            BOOL v90 = v89 != 0;
          }
          *(unsigned char *)(a1 + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(void *)(a1 + 188) |= 0x20000000uLL;
          unint64_t v91 = *((void *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(void *)(a1 + 188) |= 0x20000000000uLL;
          unint64_t v92 = *((void *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(void *)(a1 + 188) |= 0x10000000000uLL;
          unint64_t v93 = *((void *)this + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v93);
LABEL_205:
            uint64_t v21 = *((void *)this + 1) + 4;
LABEL_206:
            *((void *)this + 1) = v21;
          }
          else
          {
LABEL_162:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(void *)(a1 + 188) |= 0x100000uLL;
          unint64_t v94 = *((void *)this + 1);
          unint64_t v95 = *((void *)this + 2);
          uint64_t v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_216;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          char v114 = 0;
          unsigned int v115 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)this + 1);
          }
          break;
        case 0x31u:
          *(void *)(a1 + 188) |= 0x800000000000uLL;
          unint64_t v102 = *((void *)this + 1);
          if (v102 >= *((void *)this + 2))
          {
            BOOL v105 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v103 = v102 + 1;
            int v104 = *(unsigned __int8 *)(*(void *)this + v102);
            *((void *)this + 1) = v103;
            BOOL v105 = v104 != 0;
          }
          *(unsigned char *)(a1 + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(void *)(a1 + 188) |= 0x2000000000000uLL;
          unint64_t v106 = *((void *)this + 1);
          if (v106 >= *((void *)this + 2))
          {
            BOOL v109 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v107 = v106 + 1;
            int v108 = *(unsigned __int8 *)(*(void *)this + v106);
            *((void *)this + 1) = v107;
            BOOL v109 = v108 != 0;
          }
          *(unsigned char *)(a1 + 187) = v109;
          goto LABEL_207;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_216;
        }
        unint64_t v116 = v94 + 1;
        char v117 = *(unsigned char *)(v96 + v94);
        *((void *)this + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0) {
          break;
        }
        v114 += 7;
        unint64_t v94 = v116;
        BOOL v14 = v115++ > 8;
        if (v14) {
          goto LABEL_199;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v99) = 0;
      }
LABEL_216:
      *(_DWORD *)(a1 + 92) = v99;
LABEL_207:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10179DFE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 188);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 2u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 3u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 4u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 8u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 9u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0xAu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0xBu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0xCu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 0xDu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0xEu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xFu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x11u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0x12u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x14u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0x15u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148), 0x16u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x17u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0x18u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x19u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0x20u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x21u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 183), 0x22u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x23u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x24u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 182), 0x25u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 184), 0x26u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0x27u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x28u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x29u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 186), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 181), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 180), 0x2Cu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x2Du);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_98;
  }
LABEL_97:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 0x2Eu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_99;
  }
LABEL_98:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0x2Fu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_50;
    }
LABEL_100:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 185), 0x31u);
    if ((*(void *)(v3 + 188) & 0x2000000000000) == 0) {
      return result;
    }
    goto LABEL_101;
  }
LABEL_99:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x30u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000000) != 0) {
    goto LABEL_100;
  }
LABEL_50:
  if ((v4 & 0x2000000000000) == 0) {
    return result;
  }
LABEL_101:
  char v5 = *(unsigned char *)(v3 + 187);

  return PB::Writer::write(this, v5, 0x32u);
}

uint64_t sub_10179E590(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B300;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_10179E5B8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10179E5F0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B300;
  *(_DWORD *)(result + 128) = 0;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(result + 128) = 4;
    *(void *)(result + 24) = v4;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 100);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 100) = v5;
    int v2 = *(_DWORD *)(a2 + 128);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x80u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 48) = v6;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 96) = v7;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v8 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 44) = v8;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 76) = v9;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 72) = v10;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v11 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 68) = v11;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v12 = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 112) = v12;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v13 = *(unsigned char *)(a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 124) = v13;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v14 = *(unsigned char *)(a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 120) = v14;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v15 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 60) = v15;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v16 = *(unsigned char *)(a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 123) = v16;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v17 = *(unsigned char *)(a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 125) = v17;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v18 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 92) = v18;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 40) = v19;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v20 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 88) = v20;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v21 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 36) = v21;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 52) = v22;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 108) = v23;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v24 = *(unsigned char *)(a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 126) = v24;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v25 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 84) = v25;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v26 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 32) = v26;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v27 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 56) = v27;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v28 = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v28;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v29 = *(unsigned char *)(a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 121) = v29;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v30 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 64) = v30;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v31 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 8) = v31;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v32 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 16) = v32;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v33 = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v33;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0) {
      return result;
    }
LABEL_66:
    char v35 = *(unsigned char *)(a2 + 122);
    *(_DWORD *)(result + 128) = v3 | 0x8000000;
    *(unsigned char *)(result + 122) = v35;
    return result;
  }
LABEL_65:
  int v34 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 80) = v34;
  if ((*(_DWORD *)(a2 + 128) & 0x8000000) != 0) {
    goto LABEL_66;
  }
  return result;
}

uint64_t sub_10179E99C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "auxAvgOmegaAroundGrav2s", *(float *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravLong", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravShort", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "auxAvgOmegaLong", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "auxAvgOmegaShort", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "auxHistoricalOmegaStdMax", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "auxOverSrcYawDiffSum", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "dotRotGrav", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "hasUnCorrelatedSrcMotion", *(unsigned char *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "inHeadTurnState", *(unsigned char *)(a1 + 121));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "inLikelySlowBodyTurnPed", *(unsigned char *)(a1 + 122));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isInCorrelatedActivity", *(unsigned char *)(a1 + 123));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isInCorrelatedMotion", *(unsigned char *)(a1 + 124));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "lastHeadTurnStartTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "lastHeadTurnStopTime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "lastHeadTurnYawRadians", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "likelyOnGymMachine", *(unsigned char *)(a1 + 125));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "relOmegaMeanLong", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "relOmegaVarLong", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "relOmegaVarShort", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "srcAccumulatedYaw4s", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGrav2s", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravLong", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravShort", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "srcAvgOmegaLong", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "srcAvgOmegaShort", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "srcAvgYawBufferSum", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "srcHistoricalOmegaStdMax", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "srcRotationAxisAlignment", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "srcYawBufferLongStd", *(float *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(this, "steadyStatePedestrian", *(unsigned char *)(a1 + 126));
  if ((*(_DWORD *)(a1 + 128) & 4) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
LABEL_34:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10179EDE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 128) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_102;
        case 2u:
          *(_DWORD *)(a1 + 128) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 3u:
          *(_DWORD *)(a1 + 128) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 4u:
          *(_DWORD *)(a1 + 128) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 5u:
          *(_DWORD *)(a1 + 128) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 6u:
          *(_DWORD *)(a1 + 128) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 7u:
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 8u:
          *(_DWORD *)(a1 + 128) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 9u:
          *(_DWORD *)(a1 + 128) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0xAu:
          *(_DWORD *)(a1 + 128) |= 0x20000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *(unsigned char *)(a1 + 124) = v22;
          break;
        case 0xBu:
          *(_DWORD *)(a1 + 128) |= 0x2000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *(unsigned char *)(a1 + 120) = v24;
          break;
        case 0xCu:
          *(_DWORD *)(a1 + 128) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0xDu:
          *(_DWORD *)(a1 + 128) |= 0x10000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *(unsigned char *)(a1 + 123) = v26;
          break;
        case 0xEu:
          *(_DWORD *)(a1 + 128) |= 0x40000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v28 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v28 = v27 != 0;
          }
          *(unsigned char *)(a1 + 125) = v28;
          break;
        case 0xFu:
          *(_DWORD *)(a1 + 128) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x10u:
          *(_DWORD *)(a1 + 128) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x11u:
          *(_DWORD *)(a1 + 128) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x12u:
          *(_DWORD *)(a1 + 128) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x13u:
          *(_DWORD *)(a1 + 128) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x14u:
          *(_DWORD *)(a1 + 128) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x15u:
          *(_DWORD *)(a1 + 128) |= 0x80000000;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v30 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v30 = v29 != 0;
          }
          *(unsigned char *)(a1 + 126) = v30;
          break;
        case 0x16u:
          *(_DWORD *)(a1 + 128) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x17u:
          *(_DWORD *)(a1 + 128) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x18u:
          *(_DWORD *)(a1 + 128) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x19u:
          *(_DWORD *)(a1 + 128) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Au:
          *(_DWORD *)(a1 + 128) |= 0x4000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v32 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v32 = v31 != 0;
          }
          *(unsigned char *)(a1 + 121) = v32;
          break;
        case 0x1Bu:
          *(_DWORD *)(a1 + 128) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Cu:
          *(_DWORD *)(a1 + 128) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_102;
        case 0x1Du:
          *(_DWORD *)(a1 + 128) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_102:
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *(_DWORD *)(a1 + 128) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Fu:
          *(_DWORD *)(a1 + 128) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_113:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
LABEL_129:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_130:
            *((void *)this + 1) = v2;
          }
          break;
        case 0x20u:
          *(_DWORD *)(a1 + 128) |= 0x8000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v34 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v34 = v33 != 0;
          }
          *(unsigned char *)(a1 + 122) = v34;
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10179F758(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 4u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 8u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 9u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 124), 0xAu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 120), 0xBu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 123), 0xDu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 125), 0xEu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xFu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x11u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x12u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x14u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 126), 0x15u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x16u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0x17u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x18u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x19u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 121), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0x1Du);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x1Fu);
    if ((*(_DWORD *)(v3 + 128) & 0x8000000) == 0) {
      return result;
    }
    goto LABEL_65;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x1Eu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x8000000) == 0) {
    return result;
  }
LABEL_65:
  char v5 = *(unsigned char *)(v3 + 122);

  return PB::Writer::write(this, v5, 0x20u);
}

double sub_10179FB10(uint64_t a1)
{
  *(void *)a1 = &off_10233B338;
  *(_DWORD *)(a1 + 164) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10179FB44(PB::Base *this)
{
  *(void *)this = &off_10233B338;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10179FBB8(PB::Base *a1)
{
  sub_10179FB44(a1);

  operator delete();
}

uint64_t sub_10179FBF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B338;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    int v6 = 2;
    *(_DWORD *)(a1 + 164) = 2;
    *(void *)(a1 + 64) = v7;
    int v5 = *(_DWORD *)(a2 + 164);
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x800u;
    *(_DWORD *)(a1 + 164) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    int v5 = *(_DWORD *)(a2 + 164);
  }
LABEL_6:
  if ((v5 & 0x1000) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 112);
    v6 |= 0x1000u;
    *(_DWORD *)(a1 + 164) = v6;
    *(_DWORD *)(a1 + 112) = v13;
    int v5 = *(_DWORD *)(a2 + 164);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *(_DWORD *)(a2 + 116);
  v6 |= 0x2000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 116) = v14;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v15 = *(_DWORD *)(a2 + 120);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 120) = v15;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v16 = *(_DWORD *)(a2 + 124);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 124) = v16;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v17 = *(_DWORD *)(a2 + 128);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 128) = v17;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v18 = *(_DWORD *)(a2 + 140);
  v6 |= 0x80000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 140) = v18;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v19 = *(_DWORD *)(a2 + 144);
  v6 |= 0x100000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 144) = v19;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v20 = *(_DWORD *)(a2 + 148);
  v6 |= 0x200000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 148) = v20;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v21 = *(_DWORD *)(a2 + 96);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 96) = v21;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v22 = *(_DWORD *)(a2 + 100);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 100) = v22;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_51:
  int v23 = *(_DWORD *)(a2 + 104);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 104) = v23;
  if ((*(_DWORD *)(a2 + 164) & 0x80) != 0)
  {
LABEL_18:
    int v9 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a1 + 164) = v6 | 0x80;
    *(_DWORD *)(a1 + 92) = v9;
  }
LABEL_19:
  if (a1 != a2)
  {
    sub_1000FB43C((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x8000000) != 0)
  {
    char v24 = *(unsigned char *)(a2 + 157);
    *(_DWORD *)(a1 + 164) |= 0x8000000u;
    *(unsigned char *)(a1 + 157) = v24;
    int v10 = *(_DWORD *)(a2 + 164);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_55;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }
  char v25 = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 164) |= 0x400000u;
  *(unsigned char *)(a1 + 152) = v25;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v26 = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 164) |= 0x1000000u;
  *(unsigned char *)(a1 + 154) = v26;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v27 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 164) |= 0x10u;
  *(_DWORD *)(a1 + 80) = v27;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v28 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 164) |= 8u;
  *(_DWORD *)(a1 + 76) = v28;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v29 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) |= 4u;
  *(_DWORD *)(a1 + 72) = v29;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  char v30 = *(unsigned char *)(a2 + 159);
  *(_DWORD *)(a1 + 164) |= 0x20000000u;
  *(unsigned char *)(a1 + 159) = v30;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v31 = *(unsigned char *)(a2 + 161);
  *(_DWORD *)(a1 + 164) |= 0x80000000;
  *(unsigned char *)(a1 + 161) = v31;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x800000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20) == 0) {
      goto LABEL_31;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v32 = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 164) |= 0x800000u;
  *(unsigned char *)(a1 + 153) = v32;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v33 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 164) |= 0x20u;
  *(_DWORD *)(a1 + 84) = v33;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40000) == 0)
  {
LABEL_32:
    if ((v10 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v34 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 164) |= 0x40000u;
  *(_DWORD *)(a1 + 136) = v34;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v35 = *(unsigned char *)(a2 + 158);
  *(_DWORD *)(a1 + 164) |= 0x10000000u;
  *(unsigned char *)(a1 + 158) = v35;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v36 = *(unsigned char *)(a2 + 156);
  *(_DWORD *)(a1 + 164) |= 0x4000000u;
  *(unsigned char *)(a1 + 156) = v36;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v10 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_67;
  }
LABEL_66:
  char v37 = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 164) |= 0x40000000u;
  *(unsigned char *)(a1 + 160) = v37;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v38 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 164) |= 1u;
  *(void *)(a1 + 56) = v38;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_38;
    }
LABEL_69:
    char v40 = *(unsigned char *)(a2 + 155);
    *(_DWORD *)(a1 + 164) |= 0x2000000u;
    *(unsigned char *)(a1 + 155) = v40;
    if ((*(_DWORD *)(a2 + 164) & 0x20000) == 0) {
      return a1;
    }
    goto LABEL_39;
  }
LABEL_68:
  int v39 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 164) |= 0x40u;
  *(_DWORD *)(a1 + 88) = v39;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x2000000) != 0) {
    goto LABEL_69;
  }
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    int v11 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 164) |= 0x20000u;
    *(_DWORD *)(a1 + 132) = v11;
  }
  return a1;
}

uint64_t sub_1017A0058(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(this, "btz", *(unsigned char *)(a1 + 152));
    int v5 = *(_DWORD *)(a1 + 164);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btzDisturbanceDuration", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "btzIsCurrentlyQuiescent", *(unsigned char *)(a1 + 153));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "btzQuiescentDurationLoose", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "btzQuiescentDurationStrict", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "btzStaticPoseDuration", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "centeredBoresight", *(unsigned char *)(a1 + 154));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "centeredBoresightInHighDynamics", *(unsigned char *)(a1 + 155));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_51:
  PB::TextFormatter::format(this, "clientMode", *(_DWORD *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 164) & 0x4000000) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "inComplexTransitionState", *(unsigned char *)(a1 + 156));
LABEL_12:
  int v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "noiseVariance", v8);
  }
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(this, "pinnedBoresight", *(unsigned char *)(a1 + 157));
    int v9 = *(_DWORD *)(a1 + 164);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_55;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "qHat_W", *(float *)(a1 + 92));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "qHat_X", *(float *)(a1 + 96));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "qHat_Y", *(float *)(a1 + 100));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "qHat_Z", *(float *)(a1 + 104));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rBoresight_X", *(float *)(a1 + 108));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rBoresight_Y", *(float *)(a1 + 112));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rBoresight_Z", *(float *)(a1 + 116));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rHat_X", *(float *)(a1 + 120));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rHat_Y", *(float *)(a1 + 124));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rHat_Z", *(float *)(a1 + 128));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_64:
  PB::TextFormatter::format(this, "requestingCamera", *(unsigned char *)(a1 + 158));
  if (*(_DWORD *)(a1 + 164)) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
LABEL_28:
  int v10 = *(float **)(a1 + 32);
  int v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(this, "stateVariance", v12);
  }
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
    int v13 = *(_DWORD *)(a1 + 164);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_68;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(this, "tracking1IMU", *(unsigned char *)(a1 + 159));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "trackingBehavior", *(_DWORD *)(a1 + 132));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "trackingDisabled", *(unsigned char *)(a1 + 160));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "trackingScheme", *(_DWORD *)(a1 + 136));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "useRelaxedQuiescenceBounds", *(unsigned char *)(a1 + 161));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vHat_X", *(float *)(a1 + 140));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x100000) == 0)
  {
LABEL_38:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_73:
  PB::TextFormatter::format(this, "vHat_Y", *(float *)(a1 + 144));
  if ((*(_DWORD *)(a1 + 164) & 0x200000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(this, "vHat_Z", *(float *)(a1 + 148));
LABEL_40:

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1017A0504(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 164) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v25);
          goto LABEL_153;
        case 2u:
          *(_DWORD *)(a1 + 164) |= 0x800u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_265;
        case 3u:
          *(_DWORD *)(a1 + 164) |= 0x1000u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_265;
        case 4u:
          *(_DWORD *)(a1 + 164) |= 0x2000u;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_265;
        case 5u:
          *(_DWORD *)(a1 + 164) |= 0x4000u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_265;
        case 6u:
          *(_DWORD *)(a1 + 164) |= 0x8000u;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_265;
        case 7u:
          *(_DWORD *)(a1 + 164) |= 0x10000u;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_265;
        case 8u:
          *(_DWORD *)(a1 + 164) |= 0x80000u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_265;
        case 9u:
          *(_DWORD *)(a1 + 164) |= 0x100000u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_265;
        case 0xAu:
          *(_DWORD *)(a1 + 164) |= 0x200000u;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_265;
        case 0xBu:
          *(_DWORD *)(a1 + 164) |= 0x100u;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_265;
        case 0xCu:
          *(_DWORD *)(a1 + 164) |= 0x200u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_265;
        case 0xDu:
          *(_DWORD *)(a1 + 164) |= 0x400u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_265;
        case 0xEu:
          *(_DWORD *)(a1 + 164) |= 0x80u;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_265;
        case 0xFu:
          if (v24 != 2)
          {
            v138 = *(char **)(a1 + 40);
            unint64_t v137 = *(void *)(a1 + 48);
            if ((unint64_t)v138 >= v137)
            {
              unint64_t v154 = (char *)*v10;
              uint64_t v155 = (v138 - (unsigned char *)*v10) >> 2;
              unint64_t v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62) {
LABEL_277:
              }
                sub_1001D7FD4();
              uint64_t v157 = v137 - (void)v154;
              if (v157 >> 1 > v156) {
                unint64_t v156 = v157 >> 1;
              }
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v156;
              }
              if (v158)
              {
                unint64_t v159 = (char *)sub_10017EA34(v11, v158);
                unint64_t v154 = *(char **)(a1 + 32);
                v138 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v159 = 0;
              }
              unint64_t v166 = &v159[4 * v155];
              *(_DWORD *)unint64_t v166 = 0;
              uint64_t v139 = v166 + 4;
              while (v138 != v154)
              {
                int v167 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *(void *)(a1 + 32) = v166;
              *(void *)(a1 + 40) = v139;
              *(void *)(a1 + 48) = &v159[4 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *(_DWORD *)v138 = 0;
              uint64_t v139 = v138 + 4;
            }
            *(void *)(a1 + 40) = v139;
            goto LABEL_261;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)this + 1);
          unint64_t v40 = *((void *)this + 2);
          while (v39 < v40 && !*((unsigned char *)this + 24))
          {
            unint64_t v42 = *(char **)(a1 + 40);
            unint64_t v41 = *(void *)(a1 + 48);
            if ((unint64_t)v42 >= v41)
            {
              unint64_t v44 = (char *)*v10;
              uint64_t v45 = (v42 - (unsigned char *)*v10) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_277;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                unint64_t v49 = (char *)sub_10017EA34(v11, v48);
                unint64_t v44 = *(char **)(a1 + 32);
                unint64_t v42 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v49 = 0;
              }
              unint64_t v50 = &v49[4 * v45];
              *(_DWORD *)unint64_t v50 = 0;
              unint64_t v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(void *)(a1 + 32) = v50;
              *(void *)(a1 + 40) = v43;
              *(void *)(a1 + 48) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v42 = 0;
              unint64_t v43 = v42 + 4;
            }
            *(void *)(a1 + 40) = v43;
            unint64_t v52 = *((void *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
              goto LABEL_217;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)this + v52);
            unint64_t v40 = *((void *)this + 2);
            unint64_t v39 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v39;
          }
          goto LABEL_218;
        case 0x10u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v53 = *((void *)this + 1);
            unint64_t v54 = *((void *)this + 2);
            while (v53 < v54 && !*((unsigned char *)this + 24))
            {
              unint64_t v56 = *(char **)(a1 + 16);
              unint64_t v55 = *(void *)(a1 + 24);
              if ((unint64_t)v56 >= v55)
              {
                BOOL v58 = (char *)*v8;
                uint64_t v59 = (v56 - (unsigned char *)*v8) >> 2;
                unint64_t v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62) {
                  goto LABEL_278;
                }
                uint64_t v61 = v55 - (void)v58;
                if (v61 >> 1 > v60) {
                  unint64_t v60 = v61 >> 1;
                }
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v62 = v60;
                }
                if (v62)
                {
                  int v63 = (char *)sub_10017EA34(v9, v62);
                  BOOL v58 = *(char **)(a1 + 8);
                  unint64_t v56 = *(char **)(a1 + 16);
                }
                else
                {
                  int v63 = 0;
                }
                BOOL v64 = &v63[4 * v59];
                *(_DWORD *)BOOL v64 = 0;
                int v57 = v64 + 4;
                while (v56 != v58)
                {
                  int v65 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }
                *(void *)(a1 + 8) = v64;
                *(void *)(a1 + 16) = v57;
                *(void *)(a1 + 24) = &v63[4 * v62];
                if (v58) {
                  operator delete(v58);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v56 = 0;
                int v57 = v56 + 4;
              }
              *(void *)(a1 + 16) = v57;
              unint64_t v66 = *((void *)this + 1);
              if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2))
              {
LABEL_217:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_DWORD *)(*(void *)this + v66);
              unint64_t v54 = *((void *)this + 2);
              unint64_t v53 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v53;
            }
LABEL_218:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v141 = *(char **)(a1 + 16);
            unint64_t v140 = *(void *)(a1 + 24);
            if ((unint64_t)v141 >= v140)
            {
              char v160 = (char *)*v8;
              uint64_t v161 = (v141 - (unsigned char *)*v8) >> 2;
              unint64_t v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62) {
LABEL_278:
              }
                sub_1001D7FD4();
              uint64_t v163 = v140 - (void)v160;
              if (v163 >> 1 > v162) {
                unint64_t v162 = v163 >> 1;
              }
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v164 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v162;
              }
              if (v164)
              {
                v165 = (char *)sub_10017EA34(v9, v164);
                char v160 = *(char **)(a1 + 8);
                uint64_t v141 = *(char **)(a1 + 16);
              }
              else
              {
                v165 = 0;
              }
              unint64_t v168 = &v165[4 * v161];
              *(_DWORD *)unint64_t v168 = 0;
              uint64_t v139 = v168 + 4;
              while (v141 != v160)
              {
                int v169 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(void *)(a1 + 8) = v168;
              *(void *)(a1 + 16) = v139;
              *(void *)(a1 + 24) = &v165[4 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v141 = 0;
              uint64_t v139 = v141 + 4;
            }
            *(void *)(a1 + 16) = v139;
LABEL_261:
            unint64_t v170 = *((void *)this + 1);
            if (v170 <= 0xFFFFFFFFFFFFFFFBLL && v170 + 4 <= *((void *)this + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(void *)this + v170);
LABEL_265:
              uint64_t v116 = *((void *)this + 1) + 4;
LABEL_266:
              *((void *)this + 1) = v116;
            }
            else
            {
LABEL_263:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_267:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0x11u:
          *(_DWORD *)(a1 + 164) |= 0x8000000u;
          unint64_t v67 = *((void *)this + 1);
          if (v67 >= *((void *)this + 2))
          {
            BOOL v70 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v68 = v67 + 1;
            int v69 = *(unsigned __int8 *)(*(void *)this + v67);
            *((void *)this + 1) = v68;
            BOOL v70 = v69 != 0;
          }
          *(unsigned char *)(a1 + 157) = v70;
          goto LABEL_267;
        case 0x12u:
          *(_DWORD *)(a1 + 164) |= 0x400000u;
          unint64_t v71 = *((void *)this + 1);
          if (v71 >= *((void *)this + 2))
          {
            BOOL v74 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v72 = v71 + 1;
            int v73 = *(unsigned __int8 *)(*(void *)this + v71);
            *((void *)this + 1) = v72;
            BOOL v74 = v73 != 0;
          }
          *(unsigned char *)(a1 + 152) = v74;
          goto LABEL_267;
        case 0x13u:
          *(_DWORD *)(a1 + 164) |= 0x1000000u;
          unint64_t v75 = *((void *)this + 1);
          if (v75 >= *((void *)this + 2))
          {
            BOOL v78 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v76 = v75 + 1;
            int v77 = *(unsigned __int8 *)(*(void *)this + v75);
            *((void *)this + 1) = v76;
            BOOL v78 = v77 != 0;
          }
          *(unsigned char *)(a1 + 154) = v78;
          goto LABEL_267;
        case 0x14u:
          *(_DWORD *)(a1 + 164) |= 0x10u;
          unint64_t v79 = *((void *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v79);
          goto LABEL_265;
        case 0x15u:
          *(_DWORD *)(a1 + 164) |= 8u;
          unint64_t v80 = *((void *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v80);
          goto LABEL_265;
        case 0x16u:
          *(_DWORD *)(a1 + 164) |= 4u;
          unint64_t v81 = *((void *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v81);
          goto LABEL_265;
        case 0x17u:
          *(_DWORD *)(a1 + 164) |= 0x20000000u;
          unint64_t v82 = *((void *)this + 1);
          if (v82 >= *((void *)this + 2))
          {
            BOOL v85 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v83 = v82 + 1;
            int v84 = *(unsigned __int8 *)(*(void *)this + v82);
            *((void *)this + 1) = v83;
            BOOL v85 = v84 != 0;
          }
          *(unsigned char *)(a1 + 159) = v85;
          goto LABEL_267;
        case 0x18u:
          *(_DWORD *)(a1 + 164) |= 0x80000000;
          unint64_t v86 = *((void *)this + 1);
          if (v86 >= *((void *)this + 2))
          {
            BOOL v89 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v87 = v86 + 1;
            int v88 = *(unsigned __int8 *)(*(void *)this + v86);
            *((void *)this + 1) = v87;
            BOOL v89 = v88 != 0;
          }
          *(unsigned char *)(a1 + 161) = v89;
          goto LABEL_267;
        case 0x19u:
          *(_DWORD *)(a1 + 164) |= 0x800000u;
          unint64_t v90 = *((void *)this + 1);
          if (v90 >= *((void *)this + 2))
          {
            BOOL v93 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v91 = v90 + 1;
            int v92 = *(unsigned __int8 *)(*(void *)this + v90);
            *((void *)this + 1) = v91;
            BOOL v93 = v92 != 0;
          }
          *(unsigned char *)(a1 + 153) = v93;
          goto LABEL_267;
        case 0x1Au:
          *(_DWORD *)(a1 + 164) |= 0x20u;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v94);
          goto LABEL_265;
        case 0x1Bu:
          *(_DWORD *)(a1 + 164) |= 0x40000u;
          unint64_t v95 = *((void *)this + 1);
          unint64_t v96 = *((void *)this + 2);
          uint64_t v97 = *(void *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            char v98 = 0;
            unsigned int v99 = 0;
            uint64_t v100 = 0;
            do
            {
              unint64_t v101 = v95 + 1;
              *((void *)this + 1) = v95 + 1;
              char v102 = *(unsigned char *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0) {
                goto LABEL_240;
              }
              v98 += 7;
              unint64_t v95 = v101;
              BOOL v18 = v99++ > 8;
            }
            while (!v18);
LABEL_194:
            LODWORD(v100) = 0;
            goto LABEL_240;
          }
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v100 = 0;
          if (v96 <= v95) {
            unint64_t v96 = *((void *)this + 1);
          }
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v144 = v95 + 1;
              char v145 = *(unsigned char *)(v97 + v95);
              *((void *)this + 1) = v144;
              v100 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v95 = v144;
                BOOL v18 = v143++ > 8;
                if (v18) {
                  goto LABEL_194;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v100) = 0;
              }
            }
            break;
          }
LABEL_240:
          *(_DWORD *)(a1 + 136) = v100;
          goto LABEL_267;
        case 0x1Cu:
          *(_DWORD *)(a1 + 164) |= 0x10000000u;
          unint64_t v103 = *((void *)this + 1);
          if (v103 >= *((void *)this + 2))
          {
            BOOL v106 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v104 = v103 + 1;
            int v105 = *(unsigned __int8 *)(*(void *)this + v103);
            *((void *)this + 1) = v104;
            BOOL v106 = v105 != 0;
          }
          *(unsigned char *)(a1 + 158) = v106;
          goto LABEL_267;
        case 0x1Du:
          *(_DWORD *)(a1 + 164) |= 0x4000000u;
          unint64_t v107 = *((void *)this + 1);
          if (v107 >= *((void *)this + 2))
          {
            BOOL v110 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v108 = v107 + 1;
            int v109 = *(unsigned __int8 *)(*(void *)this + v107);
            *((void *)this + 1) = v108;
            BOOL v110 = v109 != 0;
          }
          *(unsigned char *)(a1 + 156) = v110;
          goto LABEL_267;
        case 0x1Eu:
          *(_DWORD *)(a1 + 164) |= 0x40000000u;
          unint64_t v111 = *((void *)this + 1);
          if (v111 >= *((void *)this + 2))
          {
            BOOL v114 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v112 = v111 + 1;
            int v113 = *(unsigned __int8 *)(*(void *)this + v111);
            *((void *)this + 1) = v112;
            BOOL v114 = v113 != 0;
          }
          *(unsigned char *)(a1 + 160) = v114;
          goto LABEL_267;
        case 0x1Fu:
          *(_DWORD *)(a1 + 164) |= 1u;
          unint64_t v115 = *((void *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v115);
LABEL_153:
          uint64_t v116 = *((void *)this + 1) + 8;
          goto LABEL_266;
        case 0x20u:
          *(_DWORD *)(a1 + 164) |= 0x40u;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          uint64_t v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_243;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v18 = v121++ > 8;
            }
            while (!v18);
LABEL_207:
            LODWORD(v122) = 0;
            goto LABEL_243;
          }
          char v146 = 0;
          unsigned int v147 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v148 = v117 + 1;
              char v149 = *(unsigned char *)(v119 + v117);
              *((void *)this + 1) = v148;
              v122 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                unint64_t v117 = v148;
                BOOL v18 = v147++ > 8;
                if (v18) {
                  goto LABEL_207;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_243:
          *(_DWORD *)(a1 + 88) = v122;
          goto LABEL_267;
        case 0x21u:
          *(_DWORD *)(a1 + 164) |= 0x2000000u;
          unint64_t v125 = *((void *)this + 1);
          if (v125 >= *((void *)this + 2))
          {
            BOOL v128 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v126 = v125 + 1;
            int v127 = *(unsigned __int8 *)(*(void *)this + v125);
            *((void *)this + 1) = v126;
            BOOL v128 = v127 != 0;
          }
          *(unsigned char *)(a1 + 155) = v128;
          goto LABEL_267;
        case 0x22u:
          *(_DWORD *)(a1 + 164) |= 0x20000u;
          unint64_t v129 = *((void *)this + 1);
          unint64_t v130 = *((void *)this + 2);
          uint64_t v131 = *(void *)this;
          if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
          {
            char v132 = 0;
            unsigned int v133 = 0;
            uint64_t v134 = 0;
            do
            {
              unint64_t v135 = v129 + 1;
              *((void *)this + 1) = v129 + 1;
              char v136 = *(unsigned char *)(v131 + v129);
              v134 |= (unint64_t)(v136 & 0x7F) << v132;
              if ((v136 & 0x80) == 0) {
                goto LABEL_246;
              }
              v132 += 7;
              unint64_t v129 = v135;
              BOOL v18 = v133++ > 8;
            }
            while (!v18);
LABEL_216:
            LODWORD(v134) = 0;
            goto LABEL_246;
          }
          char v150 = 0;
          unsigned int v151 = 0;
          uint64_t v134 = 0;
          if (v130 <= v129) {
            unint64_t v130 = *((void *)this + 1);
          }
          while (2)
          {
            if (v130 == v129)
            {
              LODWORD(v134) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v152 = v129 + 1;
              char v153 = *(unsigned char *)(v131 + v129);
              *((void *)this + 1) = v152;
              v134 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                unint64_t v129 = v152;
                BOOL v18 = v151++ > 8;
                if (v18) {
                  goto LABEL_216;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v134) = 0;
              }
            }
            break;
          }
LABEL_246:
          *(_DWORD *)(a1 + 132) = v134;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_267;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A14A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 164);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    int v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = PB::Writer::write(this, *(float *)(v3 + 112), 3u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = PB::Writer::write(this, *(float *)(v3 + 116), 4u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = PB::Writer::write(this, *(float *)(v3 + 120), 5u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = PB::Writer::write(this, *(float *)(v3 + 124), 6u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = PB::Writer::write(this, *(float *)(v3 + 128), 7u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = PB::Writer::write(this, *(float *)(v3 + 140), 8u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = PB::Writer::write(this, *(float *)(v3 + 144), 9u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = PB::Writer::write(this, *(float *)(v3 + 148), 0xAu);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  double result = PB::Writer::write(this, *(float *)(v3 + 96), 0xBu);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
LABEL_53:
    double result = PB::Writer::write(this, *(float *)(v3 + 104), 0xDu);
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_52:
  double result = PB::Writer::write(this, *(float *)(v3 + 100), 0xCu);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0) {
    goto LABEL_53;
  }
LABEL_14:
  if ((v4 & 0x80) != 0) {
LABEL_15:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 92), 0xEu);
LABEL_16:
  int v5 = *(float **)(v3 + 32);
  int v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 0xFu);
  }
  float v8 = *(float **)(v3 + 8);
  uint64_t v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10, 0x10u);
  }
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    double result = PB::Writer::write(this, *(unsigned char *)(v3 + 157), 0x11u);
    int v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 152), 0x12u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 154), 0x13u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = PB::Writer::write(this, *(float *)(v3 + 80), 0x14u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = PB::Writer::write(this, *(float *)(v3 + 76), 0x15u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = PB::Writer::write(this, *(float *)(v3 + 72), 0x16u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 159), 0x17u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 161), 0x18u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 153), 0x19u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Au);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x1Bu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 158), 0x1Cu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 156), 0x1Du);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 160), 0x1Eu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = PB::Writer::write(this, *(double *)(v3 + 56), 0x1Fu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_39;
    }
LABEL_71:
    double result = PB::Writer::write(this, *(unsigned char *)(v3 + 155), 0x21u);
    if ((*(_DWORD *)(v3 + 164) & 0x20000) == 0) {
      return result;
    }
    goto LABEL_72;
  }
LABEL_70:
  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x20u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) != 0) {
    goto LABEL_71;
  }
LABEL_39:
  if ((v11 & 0x20000) == 0) {
    return result;
  }
LABEL_72:
  unsigned int v12 = *(_DWORD *)(v3 + 132);

  return PB::Writer::writeVarInt(this, v12, 0x22u);
}

uint64_t sub_1017A18AC(uint64_t result)
{
  *(void *)double result = &off_10233B370;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1017A18D4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_1017A190C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B370;
  *(_DWORD *)(a1 + 48) = 0;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 48) = 1;
    *(void *)(a1 + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v5 = *(unsigned char *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 44) = v5;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  if ((*(_WORD *)(a2 + 48) & 4) == 0) {
    return *(float *)&v4;
  }
LABEL_20:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 48) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

uint64_t sub_1017A1A34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "avgRotationMax", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "historicalDisturbanceDuration", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "historicalQuiescenceDuration", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "instAccelMagDiff", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "instRotationMax", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "isAvgGrav", *(unsigned char *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "lpfAccelMagDiff", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "measNoiseVar", *(float *)(a1 + 40));
  if (*(_WORD *)(a1 + 48)) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_11:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A1B98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 48) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_54;
        case 2u:
          *(_WORD *)(a1 + 48) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 3u:
          *(_WORD *)(a1 + 48) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 4u:
          *(_WORD *)(a1 + 48) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 5u:
          *(_WORD *)(a1 + 48) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 6u:
          *(_WORD *)(a1 + 48) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 7u:
          *(_WORD *)(a1 + 48) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 44) = v21;
          break;
        case 8u:
          *(_WORD *)(a1 + 48) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 9u:
          *(_WORD *)(a1 + 48) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_53:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_54:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_47:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A1F50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 8u);
    if ((*(_WORD *)(v3 + 48) & 4) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 44), 7u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_19:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5, 9u);
}

uint64_t sub_1017A2084(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B3A8;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1017A20A8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_10233B3A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1017A2128(PB::Base *a1)
{
  sub_1017A20A8(a1);

  operator delete();
}

uint64_t sub_1017A2160(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B3A8;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 20))
  {
    char v2 = *(unsigned char *)(a2 + 16);
    *(unsigned char *)(result + 20) |= 1u;
    *(unsigned char *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1017A2228(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "isAvgGrav", *(unsigned char *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A22C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 >= *((void *)this + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)this + v21);
          *((void *)this + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *(unsigned char *)(a1 + 16) = v24;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A250C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_1017A2574(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B3E0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1017A259C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_1017A25D4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B3E0;
  *(_DWORD *)(result + 24) = 0;
  char v2 = *(unsigned char *)(a2 + 24);
  if ((v2 & 2) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 12);
    char v3 = 2;
    *(unsigned char *)(result + 24) = 2;
    *(_DWORD *)(result + 12) = v4;
    char v2 = *(unsigned char *)(a2 + 24);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 24) & 8) != 0)
  {
LABEL_5:
    char v5 = *(unsigned char *)(a2 + 20);
    v3 |= 8u;
    *(unsigned char *)(result + 24) = v3;
    *(unsigned char *)(result + 20) = v5;
    char v2 = *(unsigned char *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(unsigned char *)(result + 24) = v3;
    *(_DWORD *)(result + 16) = v6;
    char v2 = *(unsigned char *)(a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      char v8 = *(unsigned char *)(a2 + 21);
      *(unsigned char *)(result + 24) = v3 | 0x10;
      *(unsigned char *)(result + 21) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(result + 24) = v3;
  *(_DWORD *)(result + 8) = v7;
  if ((*(unsigned char *)(a2 + 24) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1017A268C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activeGnssSession", *(unsigned char *)(a1 + 20));
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentModesOfOperation", *(_DWORD *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "gnssModeOfOperation", *(_DWORD *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "hasSubscribedRhythmicClient", *(unsigned char *)(a1 + 21));
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "rhythmicMode", *(_DWORD *)(a1 + 16));
LABEL_7:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A2770(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 24) |= 2u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  unint64_t v45 = v20++;
                  char v46 = *(unsigned char *)(v21 + v45);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_80:
                unint64_t v3 = v45 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_81;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_81:
              *(_DWORD *)(a1 + 12) = v24;
              goto LABEL_92;
            case 2u:
              *(unsigned char *)(a1 + 24) |= 8u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 20) = v28;
              goto LABEL_92;
            case 3u:
              *(unsigned char *)(a1 + 24) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v49 = v29++;
                  char v50 = *(unsigned char *)(v30 + v49);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    unint64_t v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_85;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v3 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v31 += 7;
                unint64_t v29 = v3;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_92;
            case 4u:
              *(unsigned char *)(a1 + 24) |= 1u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v53 = v35++;
                  char v54 = *(unsigned char *)(v36 + v53);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    unint64_t v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_90;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v3 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v37 += 7;
                unint64_t v35 = v3;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 8) = v39;
LABEL_92:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 24) |= 0x10u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 21) = v42;
              goto LABEL_92;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              goto LABEL_92;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1017A2C40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 24) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_11:
  char v5 = *(unsigned char *)(v3 + 21);

  return PB::Writer::write(this, v5, 5u);
}

uint64_t sub_1017A2D04(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B418;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1017A2D2C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_1017A2D64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B418;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(unsigned char *)(a2 + 28);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 28) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(unsigned char *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(unsigned char *)(a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_1017A2E00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A2EC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 28) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 28) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 28) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 28) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_38:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A3144(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_1017A31EC(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B450;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1017A3214(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017A324C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B450;
  *(_DWORD *)(a1 + 64) = 0;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(a1 + 64) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(unsigned char *)(a2 + 64);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(unsigned char *)(a1 + 64) = v3;
    *(double *)(a1 + 56) = result;
    char v2 = *(unsigned char *)(a2 + 64);
  }
LABEL_6:
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(a1 + 64) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(a1 + 64) = v3;
  *(double *)(a1 + 24) = result;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(unsigned char *)(a1 + 64) = v3;
  *(double *)(a1 + 40) = result;
  char v2 = *(unsigned char *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_16:
    double result = *(double *)(a2 + 32);
    *(unsigned char *)(a1 + 64) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
LABEL_15:
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(unsigned char *)(a1 + 64) = v3;
  *(double *)(a1 + 48) = result;
  if ((*(unsigned char *)(a2 + 64) & 8) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1017A333C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "swingAccelX", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "swingAccelXStandardized", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "swingAccelY", *(double *)(a1 + 40));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "swingAccelZ", *(double *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 64) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A3460(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 64) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 2u:
          *(unsigned char *)(a1 + 64) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(unsigned char *)(a1 + 64) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(unsigned char *)(a1 + 64) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(unsigned char *)(a1 + 64) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(unsigned char *)(a1 + 64) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 8u:
          *(unsigned char *)(a1 + 64) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_44:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_46:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A3790(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 64);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 7u);
    if ((*(unsigned char *)(v3 + 64) & 8) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(this, v5, 8u);
}

uint64_t sub_1017A388C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B488;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_1017A38B4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017A38EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B488;
  *(_DWORD *)(a1 + 120) = 0;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x200) != 0)
  {
    double result = *(double *)(a2 + 80);
    __int16 v3 = 512;
    *(_WORD *)(a1 + 120) = 512;
    *(double *)(a1 + 80) = result;
    __int16 v2 = *(_WORD *)(a2 + 120);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 120) & 0x2000) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 112);
    v3 |= 0x2000u;
    *(_WORD *)(a1 + 120) = v3;
    *(double *)(a1 + 112) = result;
    __int16 v2 = *(_WORD *)(a2 + 120);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    double result = *(double *)(a2 + 88);
    v3 |= 0x400u;
    *(_WORD *)(a1 + 120) = v3;
    *(double *)(a1 + 88) = result;
    __int16 v2 = *(_WORD *)(a2 + 120);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 96) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 104) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 56) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 64) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 72) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 32) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 40) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 48) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 8) = result;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 120) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }
LABEL_29:
  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 120) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_1017A3AA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 120);
  if (v5)
  {
    PB::TextFormatter::format(this, "centerOfMassPrefiltAccelX", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelY", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelZ", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "centripetalAccelX", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "centripetalAccelY", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "centripetalAccelZ", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "centripetalRotationRateX", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "centripetalRotationRateY", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "centripetalRotationRateZ", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "swingVelocityX", *(double *)(a1 + 88));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "swingVelocityY", *(double *)(a1 + 96));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "swingVelocityZ", *(double *)(a1 + 104));
  if ((*(_WORD *)(a1 + 120) & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 112));
LABEL_16:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A3CA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 3u:
          *(_WORD *)(a1 + 120) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 4u:
          *(_WORD *)(a1 + 120) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 5u:
          *(_WORD *)(a1 + 120) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 6u:
          *(_WORD *)(a1 + 120) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 9u:
          *(_WORD *)(a1 + 120) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xEu:
          *(_WORD *)(a1 + 120) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_65:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_67:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A4174(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 120);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    __int16 v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 2u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 3u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 4u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 5u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 6u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 8u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xDu);
    if ((*(_WORD *)(v3 + 120) & 4) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5, 0xEu);
}

void *sub_1017A4334(void *result)
{
  *uint64_t result = &off_10233B4C0;
  result[28] = 0;
  return result;
}

void sub_1017A435C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017A4394(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B4C0;
  *(void *)(a1 + 224) = 0;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x40) != 0)
  {
    double result = *(double *)(a2 + 56);
    uint64_t v3 = 64;
    *(void *)(a1 + 224) = 64;
    *(double *)(a1 + 56) = result;
    uint64_t v2 = *(void *)(a2 + 224);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 64);
    v3 |= 0x80uLL;
    *(void *)(a1 + 224) = v3;
    *(double *)(a1 + 64) = result;
    uint64_t v2 = *(void *)(a2 + 224);
  }
LABEL_6:
  if ((v2 & 0x200000000) != 0)
  {
    char v5 = *(unsigned char *)(a2 + 220);
    v3 |= 0x200000000uLL;
    *(void *)(a1 + 224) = v3;
    *(unsigned char *)(a1 + 220) = v5;
    uint64_t v2 = *(void *)(a2 + 224);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v6 = *(unsigned char *)(a2 + 217);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 224) = v3;
  *(unsigned char *)(a1 + 217) = v6;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *(double *)(a2 + 160);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 160) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v7 = *(unsigned char *)(a2 + 221);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 224) = v3;
  *(unsigned char *)(a1 + 221) = v7;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *(double *)(a2 + 8);
  v3 |= 1uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 8) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  char v8 = *(unsigned char *)(a2 + 216);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 224) = v3;
  *(unsigned char *)(a1 + 216) = v8;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v9 = *(unsigned char *)(a2 + 218);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 224) = v3;
  *(unsigned char *)(a1 + 218) = v9;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *(double *)(a2 + 128);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 128) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *(double *)(a2 + 152);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 152) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *(double *)(a2 + 120);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 120) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v10 = *(_DWORD *)(a2 + 208);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 208) = v10;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v11 = *(_DWORD *)(a2 + 204);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 204) = v11;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v12 = *(_DWORD *)(a2 + 212);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 212) = v12;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v13 = *(_DWORD *)(a2 + 192);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 192) = v13;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  double result = *(double *)(a2 + 104);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 104) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v14 = *(_DWORD *)(a2 + 200);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 200) = v14;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v15 = *(_DWORD *)(a2 + 196);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 196) = v15;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = *(double *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = *(double *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v16 = *(unsigned char *)(a2 + 219);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 224) = v3;
  *(unsigned char *)(a1 + 219) = v16;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  double result = *(double *)(a2 + 72);
  v3 |= 0x100uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 72) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  double result = *(double *)(a2 + 96);
  v3 |= 0x800uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 96) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = *(double *)(a2 + 136);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 136) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = *(double *)(a2 + 144);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 144) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = *(double *)(a2 + 48);
  v3 |= 0x20uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = *(double *)(a2 + 184);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 184) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = *(double *)(a2 + 112);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 112) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = *(double *)(a2 + 168);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 168) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }
LABEL_70:
  double result = *(double *)(a2 + 80);
  v3 |= 0x200uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 80) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_72:
    double result = *(double *)(a2 + 88);
    *(void *)(a1 + 224) = v3 | 0x400;
    *(double *)(a1 + 88) = result;
    return result;
  }
LABEL_71:
  double result = *(double *)(a2 + 176);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 176) = result;
  if ((*(void *)(a2 + 224) & 0x400) != 0) {
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_1017A4794(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 224);
  if (v5)
  {
    PB::TextFormatter::format(this, "emptyField0", *(double *)(a1 + 8));
    uint64_t v5 = *(void *)(a1 + 224);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField1", *(unsigned char *)(a1 + 216));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "emptyField2", *(_DWORD *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "groundContactTimeCadence", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "groundContactTimeGrade", *(double *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "groundContactTimeGradeSource", *(_DWORD *)(a1 + 196));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "groundContactTimeGradeType", *(_DWORD *)(a1 + 200));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "groundContactTimeIsValid", *(unsigned char *)(a1 + 217));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "groundContactTimePace", *(double *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "groundContactTimeReportingStatus", *(_DWORD *)(a1 + 204));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "groundContactTimeUnsmoothed", *(double *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "groundContactTimeWindowEndTime", *(double *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "isFlat", *(unsigned char *)(a1 + 218));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "isFormBasedStrideLength", *(unsigned char *)(a1 + 219));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "strideLengthGrade", *(double *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "strideLengthGradeType", *(double *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "strideLengthIsValid", *(unsigned char *)(a1 + 220));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "strideLengthPace", *(double *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "strideLengthReportingStatus", *(_DWORD *)(a1 + 208));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "strideLengthUncalibrated", *(double *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "strideLengthUnsmoothed", *(double *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "strideLengthWindowEndTime", *(double *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "verticalOscCadence", *(double *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "verticalOscPace", *(double *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "verticalOscWindowEndTime", *(double *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "verticalOscillation", *(double *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "verticalOscillationGrade", *(double *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "verticalOscillationGradeType", *(double *)(a1 + 176));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "verticalOscillationIsValid", *(unsigned char *)(a1 + 221));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_73:
  PB::TextFormatter::format(this, "verticalOscillationReportingStatus", *(_DWORD *)(a1 + 212));
  if ((*(void *)(a1 + 224) & 0x400000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(this, "verticalOscillationUnsmoothed", *(double *)(a1 + 184));
LABEL_37:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A4C38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 224) |= 0x40uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 2u:
              *(void *)(a1 + 224) |= 0x80uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 3u:
              *(void *)(a1 + 224) |= 0x200000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 220) = v22;
              goto LABEL_203;
            case 4u:
              *(void *)(a1 + 224) |= 2uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 5u:
              *(void *)(a1 + 224) |= 0x40000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 217) = v24;
              goto LABEL_203;
            case 6u:
              *(void *)(a1 + 224) |= 0x80000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 7u:
              *(void *)(a1 + 224) |= 0x400000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 221) = v26;
              goto LABEL_203;
            case 8u:
              *(void *)(a1 + 224) |= 1uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 9u:
              *(void *)(a1 + 224) |= 0x20000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *(void *)(a1 + 224) |= 0x80000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *(void *)(a1 + 224) |= 0x8000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xCu:
              *(void *)(a1 + 224) |= 0x40000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xDu:
              *(void *)(a1 + 224) |= 0x4000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xEu:
              *(void *)(a1 + 224) |= 0x8000000uLL;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_212;
                  }
                  unint64_t v71 = v31++;
                  char v72 = *(unsigned char *)(v32 + v71);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_211;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_212;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *(_DWORD *)(a1 + 208) = v35;
              goto LABEL_203;
            case 0xFu:
              *(void *)(a1 + 224) |= 0x4000000uLL;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_217;
                  }
                  unint64_t v75 = v37++;
                  char v76 = *(unsigned char *)(v38 + v75);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_216;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_217;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *(_DWORD *)(a1 + 204) = v41;
              goto LABEL_203;
            case 0x10u:
              *(void *)(a1 + 224) |= 0x10000000uLL;
              unint64_t v43 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v44 = *(void *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v47 = 0;
                if (v2 <= v43) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_222;
                  }
                  unint64_t v79 = v43++;
                  char v80 = *(unsigned char *)(v44 + v79);
                  *((void *)this + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_221;
              }
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v2 = v43 + 1;
                *((void *)this + 1) = v43 + 1;
                char v48 = *(unsigned char *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_222;
                }
                v45 += 7;
                unint64_t v43 = v2;
                BOOL v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *(_DWORD *)(a1 + 212) = v47;
              goto LABEL_203;
            case 0x11u:
              *(void *)(a1 + 224) |= 0x800000uLL;
              unint64_t v49 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v50 = *(void *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v53 = 0;
                if (v2 <= v49) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_227;
                  }
                  unint64_t v83 = v49++;
                  char v84 = *(unsigned char *)(v50 + v83);
                  *((void *)this + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_226;
              }
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v53 = 0;
              do
              {
                unint64_t v2 = v49 + 1;
                *((void *)this + 1) = v49 + 1;
                char v54 = *(unsigned char *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_227;
                }
                v51 += 7;
                unint64_t v49 = v2;
                BOOL v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *(_DWORD *)(a1 + 192) = v53;
              goto LABEL_203;
            case 0x12u:
              *(void *)(a1 + 224) |= 0x1000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x13u:
              *(void *)(a1 + 224) |= 0x2000000uLL;
              unint64_t v55 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v56 = *(void *)this;
              if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v59 = 0;
                if (v2 <= v55) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_232;
                  }
                  unint64_t v87 = v55++;
                  char v88 = *(unsigned char *)(v56 + v87);
                  *((void *)this + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  BOOL v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    unint64_t v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v59) = 0;
                }
                goto LABEL_231;
              }
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0;
              do
              {
                unint64_t v2 = v55 + 1;
                *((void *)this + 1) = v55 + 1;
                char v60 = *(unsigned char *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0) {
                  goto LABEL_232;
                }
                v57 += 7;
                unint64_t v55 = v2;
                BOOL v14 = v58++ > 8;
              }
              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *(_DWORD *)(a1 + 200) = v59;
              goto LABEL_203;
            case 0x14u:
              *(void *)(a1 + 224) |= 0x1000000uLL;
              unint64_t v61 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v62 = *(void *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v65 = 0;
                if (v2 <= v61) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_237;
                  }
                  unint64_t v91 = v61++;
                  char v92 = *(unsigned char *)(v62 + v91);
                  *((void *)this + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  BOOL v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    unint64_t v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v65) = 0;
                }
                goto LABEL_236;
              }
              char v63 = 0;
              unsigned int v64 = 0;
              uint64_t v65 = 0;
              do
              {
                unint64_t v2 = v61 + 1;
                *((void *)this + 1) = v61 + 1;
                char v66 = *(unsigned char *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0) {
                  goto LABEL_237;
                }
                v63 += 7;
                unint64_t v61 = v2;
                BOOL v14 = v64++ > 8;
              }
              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *(_DWORD *)(a1 + 196) = v65;
LABEL_203:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *(void *)(a1 + 224) |= 8uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x16u:
              *(void *)(a1 + 224) |= 4uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x17u:
              *(void *)(a1 + 224) |= 0x10uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x18u:
              *(void *)(a1 + 224) |= (unint64_t)&_mh_execute_header;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v68 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v67 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v68 = v67 != 0;
              }
              *(unsigned char *)(a1 + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *(void *)(a1 + 224) |= 0x100uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Au:
              *(void *)(a1 + 224) |= 0x800uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Bu:
              *(void *)(a1 + 224) |= 0x10000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Cu:
              *(void *)(a1 + 224) |= 0x20000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Du:
              *(void *)(a1 + 224) |= 0x20uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Eu:
              *(void *)(a1 + 224) |= 0x400000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Fu:
              *(void *)(a1 + 224) |= 0x2000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x20u:
              *(void *)(a1 + 224) |= 0x100000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x21u:
              *(void *)(a1 + 224) |= 0x200uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x22u:
              *(void *)(a1 + 224) |= 0x200000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x23u:
              *(void *)(a1 + 224) |= 0x400uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
LABEL_202:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_146:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_203;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_203;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1017A5A9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 224);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    uint64_t v4 = *(void *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 220), 3u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 217), 5u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 6u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 221), 7u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 216), 9u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 218), 0xAu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0xBu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152), 0xCu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0xEu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 204), 0xFu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0x10u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x11u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0x12u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 200), 0x13u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x14u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0x15u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x16u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0x17u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 219), 0x18u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x19u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168), 0x20u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
LABEL_70:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 0x22u);
    if ((*(void *)(v3 + 224) & 0x400) == 0) {
      return result;
    }
    goto LABEL_71;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x21u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000) != 0) {
    goto LABEL_70;
  }
LABEL_35:
  if ((v4 & 0x400) == 0) {
    return result;
  }
LABEL_71:
  double v5 = *(double *)(v3 + 88);

  return PB::Writer::write(this, v5, 0x23u);
}

uint64_t sub_1017A5EA8(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B4F8;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_1017A5ED0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_1017A5F08(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B4F8;
  *(_DWORD *)(result + 128) = 0;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    int v3 = 64;
    *(_DWORD *)(result + 128) = 64;
    *(void *)(result + 56) = v4;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 128) = v3;
    *(void *)(result + 48) = v5;
    int v2 = *(_DWORD *)(a2 + 128);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 72);
    v3 |= 0x100u;
    *(_DWORD *)(result + 128) = v3;
    *(void *)(result + 72) = v6;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 124) = v7;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v8 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 96) = v8;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = *(void *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 88) = v9;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v10 = *(_DWORD *)(a2 + 108);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 108) = v10;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v11 = *(_DWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v11;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 16) = v12;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v13 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 32) = v13;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v14 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 24) = v14;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v15 = *(unsigned char *)(a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 123) = v15;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v16 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 40) = v16;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v17 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 80) = v17;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v18 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 64) = v18;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v19 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 8) = v19;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  char v20 = *(unsigned char *)(a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 125) = v20;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v21 = *(unsigned char *)(a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 121) = v21;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v22 = *(_DWORD *)(a2 + 116);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v22;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v23 = *(unsigned char *)(a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 120) = v23;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      return result;
    }
LABEL_46:
    int v25 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(result + 128) = v3 | 0x4000;
    *(_DWORD *)(result + 112) = v25;
    return result;
  }
LABEL_45:
  char v24 = *(unsigned char *)(a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 122) = v24;
  if ((*(_DWORD *)(a2 + 128) & 0x4000) != 0) {
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_1017A619C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 104));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "activityTypeWithoutOverride", *(_DWORD *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "elevationSource", *(_DWORD *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "eta", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "gradeOnsetCounter", *(_DWORD *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "horizSpeed", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isArmConstrainedStateValid", *(unsigned char *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isGradeOnsetEscalated", *(unsigned char *)(a1 + 121));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isRunning", *(unsigned char *)(a1 + 122));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isValid", *(unsigned char *)(a1 + 123));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "isWeightSet", *(unsigned char *)(a1 + 124));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "isWorkoutSelected", *(unsigned char *)(a1 + 125));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "powerWattage", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userHeight", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userWeight", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_22:
    if ((v5 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(this, "wLoad", *(double *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 128) & 0x800) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "workrateMETs", *(double *)(a1 + 96));
LABEL_24:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A64A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 124) = v22;
              goto LABEL_162;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v59 = v23++;
                  char v60 = *(unsigned char *)(v24 + v59);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_145;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 108) = v27;
              goto LABEL_162;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v63 = v29++;
                  char v64 = *(unsigned char *)(v30 + v63);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_150;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 104) = v33;
              goto LABEL_162;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_141:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_162;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *(unsigned char *)(a1 + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v67 = v41++;
                  char v68 = *(unsigned char *)(v42 + v67);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_155;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 116) = v45;
              goto LABEL_162;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v71 = v51++;
                  char v72 = *(unsigned char *)(v52 + v71);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_160;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 112) = v55;
LABEL_162:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_162;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1017A6E68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 3u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 124), 4u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 5u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 6u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 7u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 8u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 123), 0xCu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xDu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0xEu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0xFu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0x10u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 125), 0x11u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 121), 0x12u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x13u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 122), 0x15u);
    if ((*(_DWORD *)(v3 + 128) & 0x4000) == 0) {
      return result;
    }
    goto LABEL_45;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 120), 0x14u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x4000) == 0) {
    return result;
  }
LABEL_45:
  int v5 = *(_DWORD *)(v3 + 112);

  return PB::Writer::writeVarInt(this, v5, 0x16u);
}

uint64_t sub_1017A7108(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B530;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1017A7130(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017A7168(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B530;
  *(_DWORD *)(a1 + 48) = 0;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(unsigned char *)(a1 + 48) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(unsigned char *)(a1 + 48) = v3;
    *(double *)(a1 + 40) = result;
    char v2 = *(unsigned char *)(a2 + 48);
  }
LABEL_6:
  if (v2)
  {
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(a1 + 48) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *(double *)(a2 + 24);
      *(unsigned char *)(a1 + 48) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(unsigned char *)(a1 + 48) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(unsigned char *)(a2 + 48) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1017A7220(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "primaryAxisX", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "primaryAxisY", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "primaryAxisZ", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
LABEL_7:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A7304(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 48) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 2u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_40:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A75B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
    if ((*(unsigned char *)(v3 + 48) & 4) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5, 5u);
}

uint64_t sub_1017A767C(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B568;
  *(_DWORD *)(result + 188) = 0;
  return result;
}

void sub_1017A76A4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_1017A76DC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B568;
  *(_DWORD *)(result + 188) = 0;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x80000) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 160);
    int v3 = 0x80000;
    *(_DWORD *)(result + 188) = 0x80000;
    *(void *)(result + 160) = v4;
    int v2 = *(_DWORD *)(a2 + 188);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 64);
    v3 |= 0x80u;
    *(_DWORD *)(result + 188) = v3;
    *(void *)(result + 64) = v5;
    int v2 = *(_DWORD *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 152);
    v3 |= 0x40000u;
    *(_DWORD *)(result + 188) = v3;
    *(void *)(result + 152) = v6;
    int v2 = *(_DWORD *)(a2 + 188);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(result + 188) = v3;
  *(unsigned char *)(result + 184) = v7;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v8 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 144) = v8;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v9 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 136) = v9;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v10 = *(unsigned char *)(a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 188) = v3;
  *(unsigned char *)(result + 182) = v10;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  char v11 = *(unsigned char *)(a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 188) = v3;
  *(unsigned char *)(result + 183) = v11;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v12 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 56) = v12;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v13 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 32) = v13;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v14 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 48) = v14;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 40) = v15;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 8) = v16;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 16) = v17;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v18 = *(void *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 128) = v18;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v19 = *(void *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 120) = v19;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v20 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 72) = v20;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v21 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 80) = v21;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v22 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 24) = v22;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v23 = *(_DWORD *)(a2 + 176);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v23;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *(_DWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v24;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v25 = *(_DWORD *)(a2 + 172);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v25;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v26 = *(unsigned char *)(a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 188) = v3;
  *(unsigned char *)(result + 180) = v26;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v27 = *(void *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 104) = v27;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v28 = *(void *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 112) = v28;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v29 = *(void *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 88) = v29;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0) {
      return result;
    }
LABEL_58:
    char v31 = *(unsigned char *)(a2 + 181);
    *(_DWORD *)(result + 188) = v3 | 0x1000000;
    *(unsigned char *)(result + 181) = v31;
    return result;
  }
LABEL_57:
  uint64_t v30 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 96) = v30;
  if ((*(_DWORD *)(a2 + 188) & 0x1000000) != 0) {
    goto LABEL_58;
  }
  return result;
}

uint64_t sub_1017A7A18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 188);
  if (v5)
  {
    PB::TextFormatter::format(this, "algDelay", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 188);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasFactor", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "deltaCalibratedPedometerDistance", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaOdometerDistance", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaOdometerTime", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "deltaPedometerTime", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "deltaRawPedometerDistance", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "gestureState", *(_DWORD *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "gestureType", *(_DWORD *)(a1 + 172));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "interruptFlag", *(unsigned char *)(a1 + 180));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isTrackRunOdometer", *(unsigned char *)(a1 + 181));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isValidOdometerSpeed", *(unsigned char *)(a1 + 182));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isValidPedometerSpeed", *(unsigned char *)(a1 + 183));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isValidRunningSpeed", *(unsigned char *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "kalmanEpsOdometer", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "kalmanEpsPedometer", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "kalmanGainOdometer", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "kalmanGainPedometer", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "kalmanMeasurementNoiseOdometer", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "kalmanMeasurementNoisePedometer", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "kalmanProcessNoise", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "kalmanStateCovariance", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "odometerQuality", *(_DWORD *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "pedometerSpeed", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_59:
  PB::TextFormatter::format(this, "runningSpeed", *(double *)(a1 + 152));
  if ((*(_DWORD *)(a1 + 188) & 0x80000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 160));
LABEL_30:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A7DDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 188) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 188) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 188) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 188) |= 0x8000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 184) = v22;
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 188) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 6u:
              *(_DWORD *)(a1 + 188) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 7u:
              *(_DWORD *)(a1 + 188) |= 0x2000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 182) = v24;
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 188) |= 0x4000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 183) = v26;
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 188) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xAu:
              *(_DWORD *)(a1 + 188) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 188) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 188) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 188) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xEu:
              *(_DWORD *)(a1 + 188) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 188) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x10u:
              *(_DWORD *)(a1 + 188) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 188) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 188) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x13u:
              *(_DWORD *)(a1 + 188) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x14u:
              *(_DWORD *)(a1 + 188) |= 0x400000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_156;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 176) = v31;
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 188) |= 0x100000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_161;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 168) = v37;
              goto LABEL_148;
            case 0x16u:
              *(_DWORD *)(a1 + 188) |= 0x200000u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_166;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 172) = v43;
LABEL_148:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 188) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *(_DWORD *)(a1 + 188) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x19u:
              *(_DWORD *)(a1 + 188) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x1Au:
              *(_DWORD *)(a1 + 188) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x1Bu:
              *(_DWORD *)(a1 + 188) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
LABEL_147:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_148;
            case 0x1Cu:
              *(_DWORD *)(a1 + 188) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 181) = v48;
              goto LABEL_148;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_148;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1017A8864(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 188);
  if ((v4 & 0x80000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 160), 1u);
    int v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152), 3u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 184), 4u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 5u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 6u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 182), 7u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 183), 8u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xEu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0xFu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0x10u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x11u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x12u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x13u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x14u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0x15u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x16u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 180), 0x17u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0x18u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x19u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
LABEL_56:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0x1Bu);
    if ((*(_DWORD *)(v3 + 188) & 0x1000000) == 0) {
      return result;
    }
    goto LABEL_57;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) != 0) {
    goto LABEL_56;
  }
LABEL_28:
  if ((v4 & 0x1000000) == 0) {
    return result;
  }
LABEL_57:
  char v5 = *(unsigned char *)(v3 + 181);

  return PB::Writer::write(this, v5, 0x1Cu);
}

uint64_t sub_1017A8BAC(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B5A0;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_1017A8BD4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017A8C0C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B5A0;
  *(_DWORD *)(a1 + 136) = 0;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(a1 + 136) = 4;
    *(double *)(a1 + 24) = result;
    int v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 80);
    v3 |= 0x200u;
    *(_DWORD *)(a1 + 136) = v3;
    *(double *)(a1 + 80) = result;
    int v2 = *(_DWORD *)(a2 + 136);
  }
LABEL_6:
  if ((v2 & 0x4000) != 0)
  {
    double result = *(double *)(a2 + 120);
    v3 |= 0x4000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(double *)(a1 + 120) = result;
    int v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 88) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 48) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 64) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 56) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 32) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 104) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 96) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 8) = result;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v5 = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 128) = v5;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  char v6 = *(unsigned char *)(a2 + 132);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(unsigned char *)(a1 + 132) = v6;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_36:
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 136) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_35:
  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 136) & 2) != 0) {
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_1017A8E14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "algorithmType", *(_DWORD *)(a1 + 128));
    int v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alpha", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "formBasedStartTime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "heightCM", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "horizontalAccelMagnitudeMeanSqrt", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isValid", *(unsigned char *)(a1 + 132));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rotationRateGravityProjectionMax", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotationRateMagnitudeMin", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "speedBasedStartTime", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "strideLengthFormBasedCalibrated", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "strideLengthFormBasedUncalibrated", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(this, "strideLengthSpeedBased", *(double *)(a1 + 112));
  if ((*(_DWORD *)(a1 + 136) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
LABEL_19:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A9078(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 128) = v25;
LABEL_94:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_88:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_94;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_94;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1017A96BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 136);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 3u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0xAu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0xBu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0xCu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0xEu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x10u);
    if ((*(_DWORD *)(v3 + 136) & 2) == 0) {
      return result;
    }
    goto LABEL_35;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 132), 0xFu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_35:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 0x11u);
}

uint64_t sub_1017A98D0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B5D8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1017A98F8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1017A9930(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10233B5D8;
  *(_DWORD *)(a1 + 40) = 0;
  char v2 = *(unsigned char *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    char v3 = 4;
    *(unsigned char *)(a1 + 40) = 4;
    *(double *)(a1 + 24) = result;
    char v2 = *(unsigned char *)(a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(unsigned char *)(a1 + 40) = v3;
    *(double *)(a1 + 32) = result;
    char v2 = *(unsigned char *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 16);
    *(unsigned char *)(a1 + 40) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(a1 + 40) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(unsigned char *)(a2 + 40) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1017A99CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "displacement", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017A9A90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017A9D08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
      if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 4u);
}

uint64_t sub_1017A9DB0(uint64_t result)
{
  *(void *)uint64_t result = &off_10233B610;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_1017A9DD8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_1017A9E10(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10233B610;
  *(_DWORD *)(result + 212) = 0;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 152);
    int v3 = 0x40000;
    *(_DWORD *)(result + 212) = 0x40000;
    *(void *)(result + 152) = v4;
    int v2 = *(_DWORD *)(a2 + 212);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 120);
    v3 |= 0x4000u;
    *(_DWORD *)(result + 212) = v3;
    *(void *)(result + 120) = v5;
    int v2 = *(_DWORD *)(a2 + 212);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    v3 |= 0x400u;
    *(_DWORD *)(result + 212) = v3;
    *(void *)(result + 88) = v6;
    int v2 = *(_DWORD *)(a2 + 212);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 96) = v7;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v8 = *(void *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 104) = v8;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v9 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 16) = v9;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v10 = *(void *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 200) = v10;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v11 = *(void *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 176) = v11;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v12 = *(void *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 168) = v12;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v13 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 144) = v13;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v14 = *(void *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 128) = v14;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v15 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 80) = v15;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v16 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 56) = v16;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 48) = v17;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 32) = v18;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = *(void *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 192) = v19;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 40) = v20;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = *(void *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 112) = v21;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 72) = v22;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v23 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 136) = v23;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v24 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 64) = v24;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v25 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 24) = v25;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v26 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 8) = v26;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v27 = *(void *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 184) = v27;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0) {
      return result;
    }
LABEL_54:
    char v29 = *(unsigned char *)(a2 + 208);
    *(_DWORD *)(result + 212) = v3 | 0x2000000;
    *(unsigned char *)(result + 208) = v29;
    return result;
  }
LABEL_53:
  uint64_t v28 = *(void *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 160) = v28;
  if ((*(_DWORD *)(a2 + 212) & 0x2000000) != 0) {
    goto LABEL_54;
  }
  return result;
}

uint64_t sub_1017AA114(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 212);
  if (v5)
  {
    PB::TextFormatter::format(this, "centerOfMassAccelZAmplitudeBackwards", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "integratedAngleYg", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "integratedAngleYgBackwards", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "integratedCenterOfAccelZMaxBackwards", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "integratedRotationAxisWZ", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "integratedRotationAxisWZForwards", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "integratedRotationRateYBackwards", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "integratedUserAccelTForwards", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "integratedUserAccelY", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "integratedVelocityZ", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "integratedVelocityZBackwards", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "integratedVelocityZForwards", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isValidPeak", *(unsigned char *)(a1 + 208));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "medianCadence", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rotationAxisWTAmplitudeXForwards", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "rotationRateMaxZForwards", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "rotationTMaxZForwards", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 160));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "swingAccelAmplitudeYBackwards", *(double *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "swingAccelMeanXBackwards", *(double *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "swingAccelTZMean", *(double *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(this, "userAccelTMeanXBackards", *(double *)(a1 + 192));
  if ((*(_DWORD *)(a1 + 212) & 0x1000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
LABEL_28:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1017AA498(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 4u:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 5u:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 6u:
          *(_DWORD *)(a1 + 212) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_100:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
LABEL_104:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 208) = v21;
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1017AAC40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 212);
  if ((v4 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152), 1u);
    int v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 2u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 3u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 4u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 5u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200), 7u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 8u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168), 9u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 0xAu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0xBu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0xCu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0xDu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xEu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xFu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192), 0x10u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0x11u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x12u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x13u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 0x14u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0x15u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x16u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0x17u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0x19u);
    if ((*(_DWORD *)(v3 + 212) & 0x2000000) == 0) {
      return result;
    }
    goto LABEL_53;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184), 0x18u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x2000000) == 0) {
    return result;
  }
LABEL_53:
  char v5 = *(unsigned char *)(v3 + 208);

  return PB::Writer::write(this, v5, 0x1Au);
}

uint64_t sub_1017AAF50(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1017AAFC8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1017AAFC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1017AB060((uint64_t)v13);
  return v11;
}

uint64_t sub_1017AB060(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C34144((void *)a1);
  }
  return a1;
}

void sub_1017AB098(uint64_t a1, void *a2)
{
  *(void *)a1 = off_10233C170;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x4122750000000000;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = "clPressureavl.avl";
  *(void *)(a1 + 208) = "clPressureavl.avl.gz";
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  sub_100134750((void *)(a1 + 256), "clPressureavl.avl");
  *(unsigned char *)(a1 + 280) = 0;
  sub_100513074(a1 + 288, "clPressure", 1, 1);
  sub_1005C3A50(a1 + 304, a2, (uint64_t)sub_1017ABC50, a1);
}

void sub_1017ABAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13)
{
  uint64_t v21 = *(void *)(v13 + 712);
  *(void *)(v13 + 712) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  sub_1017B4478((void *)(v13 + 648));
  if (*(char *)(v13 + 647) < 0) {
    operator delete(*(void **)(v13 + 624));
  }
  if (*(char *)(v13 + 623) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v13 + 599) < 0) {
    operator delete(*a12);
  }
  sub_1005C3B7C(v15);
  sub_10051310C(a13);
  sub_1005471B8(v14);
  sub_1017ACD00(v19 - 128);
  if (*(char *)(v13 + 103) < 0) {
    operator delete(*v18);
  }
  if (*(unsigned char *)(v13 + 56) && *(char *)(v13 + 55) < 0) {
    operator delete(*v17);
  }
  uint64_t v22 = *(void *)(v13 + 8);
  *(void *)(v13 + 8) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_1017ABC50(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 552), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10233C1B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureDataManager::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10233C1B0);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureDataManager::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_1017B2054(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1017ABE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017ABE2C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 552), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10233C1B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureDataManager::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10233C1B0);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureDataManager::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1017B3C70(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1017ABFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017AC008(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 552), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10233C1B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureDataManager::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10233C1B0);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureDataManager::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1017B37D8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1017AC1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017AC1E4(uint64_t a1)
{
  sub_1000C7F88(v9);
  unint64_t v2 = v9[0];
  if (byte_102489038[23] < 0) {
    sub_1000DC48C(&__p, *(void **)byte_102489038, *(unint64_t *)&byte_102489038[8]);
  }
  else {
    std::string __p = *(std::string *)byte_102489038;
  }
  sub_1005B66DC((uint64_t)v2, "CLBaroAltReferencePressureUrl", &__p, (uint64_t)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)v9[1]);
  }
  unint64_t v3 = v13;
  unsigned __int8 v4 = v13;
  if ((v13 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)v12[1];
  }
  if (v3)
  {
    sub_1000C7F88(&v7);
    uint64_t v5 = v7;
    if (byte_102489038[23] < 0) {
      sub_1000DC48C(&v6, *(void **)byte_102489038, *(unint64_t *)&byte_102489038[8]);
    }
    else {
      std::string v6 = *(std::string *)byte_102489038;
    }
    sub_1005B66DC(v5, "CLBaroAltReferencePressureUrl", &v6, (uint64_t)v9);
    sub_100ECBC54(a1 + 32, (long long *)v9);
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
    if (v8) {
      sub_1000DB0A0(v8);
    }
    unsigned __int8 v4 = v13;
  }
  if ((v4 & 0x80) != 0) {
    operator delete(v12[0]);
  }
}

void sub_1017AC334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1017AC3C0(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 623) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 600), *(void *)(a1 + 608));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 600);
    uint64_t v34 = *(void *)(a1 + 616);
  }
  sub_1017AF37C(a1, (uint64_t)&v32);
  std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (v34 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if (v34 >= 0) {
      std::string::size_type v6 = HIBYTE(v34);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v32, (const std::string::value_type *)v5, v6);
    uint64_t v7 = (char *)sub_1000A6958();
    sub_1000A5670(v7, (uint64_t)&v31);
    if (v34 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if (v34 >= 0) {
      std::string::size_type v9 = HIBYTE(v34);
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    std::string::append(&v31, (const std::string::value_type *)v8, v9);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    char v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      char v11 = &v32;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v11 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      __int16 v12 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v42 = 2082;
      double v43 = *(double *)&v12;
      __int16 v44 = 2050;
      uint64_t v45 = 0x40AC200000000000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      uint64_t v22 = &v32;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      uint64_t v23 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      int v35 = 136446722;
      unsigned int v36 = v22;
      __int16 v37 = 2082;
      double v38 = *(double *)&v23;
      __int16 v39 = 2050;
      uint64_t v40 = 0x40AC200000000000;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
    *(void *)(a1 + 704) = *a2;
    uint64_t v30 = 0x404E000000000000;
    unsigned __int8 v13 = (double *)(a1 + 304);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v14 = &v32;
    }
    else {
      __int16 v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v31;
    }
    else {
      uint64_t v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if (sub_1005C653C(a1 + 304, (const std::string::value_type *)v14, (const std::string::value_type *)v15, (double *)&v30))
    {
      double v29 = sub_1017B316C(a1);
      double v28 = 0.0;
      double v16 = sub_1017B34B0(a1);
      if (v16 > 604800.0) {
        double v16 = 604800.0;
      }
      double v28 = v16;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      uint64_t v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&uint8_t buf[4] = v28;
        __int16 v42 = 2050;
        double v43 = v29;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#CLPDM,AVL file update rate over cellular,%{public}.1lf,wifi,%{public}.1lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        int v35 = 134349312;
        unsigned int v36 = *(std::string **)&v28;
        __int16 v37 = 2050;
        double v38 = v29;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
      }
      if (sub_1005C6BBC((uint64_t)v13, &v28, &v29))
      {
        *(double *)buf = *(double *)a2 + 3600.0 + -0.5;
        sub_1005C6FFC(v13, (double *)buf);
LABEL_63:
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      int v20 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#CLPDM,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateSource AVL file updater", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v35) = 0;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v21 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#CLPDM,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateRate AVl file updater", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(v35) = 0;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    goto LABEL_63;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  __int16 v18 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#CLPDM,invalid URL path", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    LOWORD(v35) = 0;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
LABEL_65:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1017ACC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017ACD00(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_1017ACD48(uint64_t a1)
{
  *(void *)a1 = off_10233C170;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:2];
  }

  *(void *)(a1 + 568) = 0;
  sub_1017ACEC4(a1);
  uint64_t v3 = *(void *)(a1 + 712);
  *(void *)(a1 + 712) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1017B4478((void *)(a1 + 648));
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  sub_1005C3B7C(a1 + 304);
  sub_10051310C(a1 + 288);
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  unsigned __int8 v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(void *)(a1 + 168) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t sub_1017ACEC4(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  (*(void (**)(uint64_t))(*(void *)(a1 + 288) + 16))(a1 + 288);
  HIBYTE(v4) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 681) = v4;
  sub_1005C70E0(a1 + 304);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_1017ACF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017ACFC0(uint64_t a1)
{
  sub_1017ACD48(a1);

  operator delete();
}

uint64_t sub_1017ACFF8(double *a1, long double *a2)
{
  double v4 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      BOOL v8 = (*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      BOOL v9 = (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(_DWORD *)buf = 67109376;
      LODWORD(v16[0]) = v8;
      WORD2(v16[0]) = 1024;
      *(_DWORD *)((char *)v16 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,is latitude finite,%d,is longitude finite,%d", buf, 0xEu);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_20:
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLPressureDataManager::isLatLonValid(const double &, double &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        return 0;
      }
LABEL_23:
      dispatch_once(&qword_102419380, &stru_10233C1D0);
      goto LABEL_20;
    }
  }
  else
  {
    if (v4 >= -90.0 && v4 <= 90.0)
    {
      sub_10005B720(*a2);
      *(void *)a2 = v5;
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    char v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      double v12 = *a1;
      *(_DWORD *)buf = 134283521;
      *(double *)double v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,latitude is beyond the valid range,lat,%{private}.7lf", buf, 0xCu);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_1017AD370(uint64_t a1, double a2, double a3)
{
  sub_101171D90((uint64_t)v62);
  long long v47 = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v48 = _Q1;
  long long v49 = _Q1;
  long long v50 = _Q1;
  int v44 = 0xFFFF;
  int v51 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  unint64_t v52 = 0xBFF0000000000000;
  unint64_t v56 = 0xBFF0000000000000;
  int v55 = 0;
  int v57 = 0x7FFFFFFF;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  char v61 = 0;
  int v27 = 0xFFFF;
  int8x16_t v28 = 0uLL;
  long long v29 = xmmword_101D1C320;
  long long v30 = _Q1;
  long long v31 = _Q1;
  long long v32 = _Q1;
  int v33 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v34 = 0xBFF0000000000000;
  int v37 = 0;
  unint64_t v38 = 0xBFF0000000000000;
  int v39 = 0x7FFFFFFF;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  char v43 = 0;
  double v45 = a2;
  double v46 = a3;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  char v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#CLPDM,findBestPressureDataIndexFromTile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    LOWORD(v63) = 0;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLPressureDataManager::findBestPressureDataIndexFromTile(double, double)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 168);
  if (v12 == v13)
  {
    uint64_t v14 = 0;
  }
  else
  {
    LODWORD(v14) = 0;
    unsigned int v15 = 0;
    double v16 = 0.0;
    do
    {
      int8x16_t v17 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v12 + 20));
      int8x16_t v28 = vextq_s8(v17, v17, 8uLL);
      sub_1000F1268(v62, (uint64_t)&v44, (uint64_t)&v27);
      double v19 = v18;
      if (v15)
      {
        unsigned int v20 = v14;
      }
      else
      {
        double v16 = v18;
        unsigned int v20 = 0;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      uint64_t v21 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218240;
        double v68 = v19;
        __int16 v69 = 2048;
        double v70 = v16;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#CLPDM,distance,%f,lastShortDist,%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        int v63 = 134218240;
        double v64 = v19;
        __int16 v65 = 2048;
        double v66 = v16;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLPressureDataManager::findBestPressureDataIndexFromTile(double, double)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (v19 >= v16)
      {
        uint64_t v14 = v20;
      }
      else
      {
        double v16 = v19;
        uint64_t v14 = v15;
      }
      ++v15;
      v12 += 28;
    }
    while (v12 != v13);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  uint64_t v23 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v68) = v14;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#CLPDM,pressure grid index,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v63 = 67109120;
    LODWORD(v64) = v14;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLPressureDataManager::findBestPressureDataIndexFromTile(double, double)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return v14;
}

uint64_t sub_1017AD8D8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v54 = a5;
  double v55 = a4;
  uint64_t v10 = a1 + 288;
  (*(void (**)(uint64_t))(*(void *)(a1 + 288) + 16))(a1 + 288);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  char v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)&uint8_t buf[4] = a4;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#CLPDM,GetPressure,lat,%f,lon,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v56 = 134218240;
    double v57 = a4;
    __int16 v58 = 2048;
    double v59 = a5;
    double v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v46);
    if (v46 != buf) {
      free(v46);
    }
  }
  if (sub_1017ACFF8(&v55, &v54))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (*(double *)(a1 + 192) >= 7200.0 || (double v13 = *(double *)(a1 + 112), v13 == 0.0) || Current - v13 >= 60.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      long long v31 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = *(void *)(a1 + 112);
        uint64_t v33 = *(void *)(a1 + 192);
        *(_DWORD *)buf = 134283777;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&buf[14] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#CLPDM,#Warning,GetPressure,downloadTime,%{private}.2lf,tileAge,%{private}.2lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_45;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v34 = *(double *)(a1 + 112);
      double v35 = *(double *)(a1 + 192);
      int v56 = 134283777;
      double v57 = v34;
      __int16 v58 = 2049;
      double v59 = v35;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v36);
    }
    else
    {
      float v14 = *(float *)(a1 + 156);
      long double v15 = *(float *)(a1 + 152);
      sub_10005B720(v15);
      double v17 = v16;
      sub_10005B720(v15 + 0.05);
      double v19 = v18;
      double v20 = v14;
      double v21 = v14 + 0.05;
      if (v20 <= a4 && v21 > a4)
      {
        double v22 = v54;
        if (v54 >= v17 && v54 < v18)
        {
          unsigned int v23 = sub_1017AD370(a1, a4, v54);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          uint64_t v24 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,grid index,%u", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            int v56 = 67109120;
            LODWORD(v57) = v23;
            int v51 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v51);
            if (v51 != buf) {
              free(v51);
            }
          }
          if (v23 < *(_DWORD *)(a1 + 184))
          {
            float v25 = a4;
            float v26 = v22;
            *(float *)(a2 + 40) = v26;
            *(float *)(a2 + 44) = v25;
            *(_OWORD *)(a2 + 24) = *(_OWORD *)(*(void *)(a1 + 160) + 28 * v23);
            *(void *)a2 = *(void *)(a1 + 104);
            *(void *)(a2 + 16) = *(void *)(a1 + 192);
            *(double *)(a2 + 8) = sub_10016C458();
            *(_DWORD *)(a2 + 48) = *(_DWORD *)(*(void *)(a1 + 160) + 28 * v23 + 16);
            *(unsigned char *)(a1 + 680) = 0;
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            int v27 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              double v28 = *(float *)(a2 + 24);
              *(_DWORD *)buf = 134284033;
              *(double *)&uint8_t buf[4] = a4;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(double *)&buf[14] = v22;
              *(_WORD *)&buf[22] = 2049;
              double v69 = v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,lat,%{private}.7lf,lon,%{private}.7lf,Pressure,%{private}f", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10233C1D0);
              }
              double v52 = *(float *)(a2 + 24);
              int v56 = 134284033;
              double v57 = a4;
              __int16 v58 = 2049;
              double v59 = v22;
              __int16 v60 = 2049;
              double v61 = v52;
              uint64_t v53 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v53);
              if (v53 != buf) {
                free(v53);
              }
            }
            uint64_t v29 = 0;
            goto LABEL_67;
          }
        }
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      int v37 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284801;
        *(double *)&uint8_t buf[4] = a4;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&buf[14] = v54;
        *(_WORD *)&buf[22] = 2049;
        double v69 = v20;
        __int16 v70 = 2049;
        double v71 = v21;
        __int16 v72 = 2049;
        double v73 = v17;
        __int16 v74 = 2049;
        double v75 = v19;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,pressure not retrived in past for,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", buf, 0x3Eu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_45:
        double v38 = v54;
        char v39 = sub_1000A56C8(a1 + 216, a4, v54);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        uint64_t v40 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283777;
          *(double *)&uint8_t buf[4] = a4;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&buf[14] = v38;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          int v56 = 134283777;
          double v57 = a4;
          __int16 v58 = 2049;
          double v59 = v38;
          long long v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v48);
          if (v48 != buf) {
            free(v48);
          }
        }
        if (v39)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          uint64_t v41 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "#CLPDM,GetPressure,tile available", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            LOWORD(v56) = 0;
            long long v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v49);
            if (v49 != buf) {
              free(v49);
            }
          }
          *(unsigned char *)(a1 + 680) = 1;
          *(double *)(a1 + 688) = a4;
          *(double *)(a1 + 696) = v38;
          int v42 = sub_1017AE820(a1, a4, v38);
          char v43 = (void *)(a1 + 648);
          if (v42)
          {
            sub_1017AF308(v43, a3);
            uint64_t v29 = 3;
            goto LABEL_67;
          }
          sub_1017B4800(v43);
        }
        else
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          int v44 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#CLPDM,GetPressure,tile not available", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            LOWORD(v56) = 0;
            long long v50 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v50);
            if (v50 != buf) {
              free(v50);
            }
          }
          *(void *)&buf[15] = 0;
          *(void *)&buf[7] = 0;
          *(unsigned char *)(a1 + 680) = 0;
          *(void *)(a1 + 696) = 0;
          *(_OWORD *)(a1 + 681) = *(_OWORD *)buf;
          if (sub_1000E6EF0(a1 + 216))
          {
            *(void *)buf = CFAbsoluteTimeGetCurrent();
            sub_1017AC3C0(a1, buf);
            uint64_t v29 = 4;
            goto LABEL_67;
          }
        }
        uint64_t v29 = 1;
        goto LABEL_67;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      int v56 = 134284801;
      double v57 = a4;
      __int16 v58 = 2049;
      double v59 = v54;
      __int16 v60 = 2049;
      double v61 = v20;
      __int16 v62 = 2049;
      double v63 = v21;
      __int16 v64 = 2049;
      double v65 = v17;
      __int16 v66 = 2049;
      double v67 = v19;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v36);
    }
    if (v36 != buf) {
      free(v36);
    }
    goto LABEL_45;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  long long v30 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    *(double *)&uint8_t buf[4] = a4;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&buf[14] = v54;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#CLPDM,GetPressure,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v56 = 134283777;
    double v57 = a4;
    __int16 v58 = 2049;
    double v59 = v54;
    long long v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLPressureDataManager::CLPressureDataType CLPressureDataManager::getPressureForLocation(double, double, CLPressureDataManager::CLPressureUpdateToBaro &, pressureDataDownloadCb)", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
  uint64_t v29 = 2;
LABEL_67:
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  return v29;
}

void sub_1017AE7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017AE820(uint64_t a1, double a2, double a3)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((sub_1017B1170((uint64_t)&v32, 0, a2, a3, 0.05) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    long double v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLPDM,#RefPressureDataDownload,invalid tile path to download", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_72;
    }
    goto LABEL_87;
  }
  uint64_t v4 = HIBYTE(v34);
  if (v34 < 0) {
    uint64_t v4 = v33;
  }
  if (!v4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#CLPDM,#RefPressureDataDownload,invalid path", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_72:
      LOWORD(v30[0]) = 0;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
LABEL_37:
      uint64_t v14 = 0;
      goto LABEL_68;
    }
LABEL_87:
    dispatch_once(&qword_102419380, &stru_10233C1D0);
    goto LABEL_72;
  }
  sub_1017AF37C(a1, (uint64_t)v30);
  unint64_t v5 = v31;
  if ((v31 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)v30[1];
  }
  if (!v5)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v17 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,invalid URL path", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(__p[0]) = 0;
      float v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    uint64_t v14 = 0;
    goto LABEL_66;
  }
  sub_1002F0A00((const void **)v30, (const void **)&v32, (uint64_t)__p);
  if ((v29 & 0x80u) == 0) {
    unint64_t v6 = v29;
  }
  else {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (!v6)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#CLPDM,#Warning,#RefPressureDataDownload,invalid server", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_63;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_85;
    }
    goto LABEL_88;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    BOOL v8 = __p;
    if ((v29 & 0x80u) != 0) {
      BOOL v8 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136380675;
    double v38 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#CLPDM,#RefPressureDataDownload,urlString,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    unsigned int v23 = __p;
    if ((v29 & 0x80u) != 0) {
      unsigned int v23 = (void **)__p[0];
    }
    int v35 = 136380675;
    uint64_t v36 = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if ((v29 & 0x80u) == 0) {
    BOOL v9 = __p;
  }
  else {
    BOOL v9 = (void **)__p[0];
  }
  uint64_t v10 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v9]);
  if (!v10)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLPDM,#RefPressureDataDownload,Invalid NSurl", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_63;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_85;
    }
LABEL_88:
    dispatch_once(&qword_102419380, &stru_10233C1D0);
LABEL_85:
    LOWORD(v35) = 0;
    float v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::downloadTile(double, double)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
    goto LABEL_63;
  }
  id v11 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v10];
  uint64_t v12 = v11;
  if (v11)
  {
    [v11 setHTTPMethod:@"GET"];
    [v12 setAllowsCellularAccess:1];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1017B122C;
    v27[3] = &unk_10233C180;
    v27[4] = a1;
    double v13 = [+[NSURLSession sharedSession] dataTaskWithRequest:v12 completionHandler:v27];
    [(NSURLSessionDataTask *)v13 setTaskDescription:@"ReferencePressureDownload"];
    [(NSURLSessionDataTask *)v13 resume];
    uint64_t v14 = 1;
    goto LABEL_64;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  double v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#CLPDM,#Warning,#RefPressureDataDownload,failed to form request", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_85;
    }
    goto LABEL_88;
  }
LABEL_63:
  uint64_t v14 = 0;
LABEL_64:
  if ((char)v29 < 0) {
    operator delete(__p[0]);
  }
LABEL_66:
  if ((char)v31 < 0) {
    operator delete(v30[0]);
  }
LABEL_68:
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  return v14;
}

void sub_1017AF28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1017AF308(void *a1, uint64_t a2)
{
  sub_1017B44FC((uint64_t)v4, a2);
  sub_1017B4594(v4, a1);
  sub_1017B4478(v4);
  return a1;
}

void sub_1017AF37C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1017AC1E4(a1);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = "Not set";
    if (*(unsigned char *)(a1 + 56))
    {
      unint64_t v6 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unint64_t v6 = *(const char **)v6;
      }
    }
    else
    {
      unint64_t v6 = "Not set";
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (*(void *)(a1 + 88)) {
        unint64_t v5 = *(const char **)(a1 + 80);
      }
      else {
        unint64_t v5 = "Not set";
      }
    }
    else if (*(unsigned char *)(a1 + 103))
    {
      unint64_t v5 = (const char *)(a1 + 80);
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = v6;
    __int16 v13 = 2080;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure data URL,default,%s,MA-OTA,%s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLPressureDataManager::getPressureDataServerUrl()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      uint64_t v7 = a1 + 32;
LABEL_22:
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(void *)(a2 + 16) = *(void *)(v7 + 16);
      return;
    }
    BOOL v8 = *(void **)(a1 + 32);
    unint64_t v9 = *(void *)(a1 + 40);
  }
  else
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      uint64_t v7 = a1 + 80;
      goto LABEL_22;
    }
    BOOL v8 = *(void **)(a1 + 80);
    unint64_t v9 = *(void *)(a1 + 88);
  }
  sub_1000DC48C((unsigned char *)a2, v8, v9);
}

void sub_1017AF644(uint64_t a1, int a2, uint64_t a3, double a4)
{
  int v40 = 0;
  memset(v39, 0, sizeof(v39));
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  BOOL v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    unint64_t v9 = "FAIL";
    if (a2) {
      unint64_t v9 = "SUCCESS";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v53 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#CLPDM,sendPressureDataToRequester,status,%s", buf, 0xCu);
  }
  uint64_t v10 = sub_10013D1A0(115, 2);
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    unsigned __int8 v31 = "FAIL";
    if (a2) {
      unsigned __int8 v31 = "SUCCESS";
    }
    int v41 = 136315138;
    *(void *)int v42 = v31;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    uint64_t v10 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  if (*(void *)(a1 + 672))
  {
    uint64_t v11 = a1 + 648;
    if (a2)
    {
      if (sub_1017B0110(v10, a3, (uint64_t *)(a1 + 104)))
      {
        *(double *)(a1 + 192) = vabdd_f64(a4, *(double *)(a1 + 104));
        unsigned int v12 = sub_1017AD370(a1, *(double *)(a1 + 688), *(double *)(a1 + 696));
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        __int16 v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          int v14 = *(unsigned __int8 *)(a1 + 680);
          int v15 = *(_DWORD *)(a1 + 184);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)uint64_t v53 = v14;
          *(_WORD *)&v53[4] = 1024;
          *(_DWORD *)&v53[6] = v12;
          LOWORD(v54) = 1024;
          *(_DWORD *)((char *)&v54 + 2) = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#CLPDM,sendPressureDataToRequester,send to Baro,isNeeded,%d,index,%d,size,%u", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          int v33 = *(unsigned __int8 *)(a1 + 680);
          int v34 = *(_DWORD *)(a1 + 184);
          int v41 = 67109632;
          *(_DWORD *)int v42 = v33;
          *(_WORD *)&v42[4] = 1024;
          *(_DWORD *)&v42[6] = v12;
          LOWORD(v43) = 1024;
          *(_DWORD *)((char *)&v43 + 2) = v34;
          int v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v35);
          if (v35 != (char *)buf) {
            free(v35);
          }
        }
        if (v12 < *(_DWORD *)(a1 + 184))
        {
          uint64_t v16 = *(void *)(a1 + 160);
          if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 168) - v16) >> 2) <= (unint64_t)v12) {
            sub_100273D6C();
          }
          double v17 = (long long *)(v16 + 28 * v12);
          int v18 = *((_DWORD *)v17 + 4);
          long long v19 = *v17;
          *((int32x2_t *)&v39[2] + 1) = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 688)));
          *(_OWORD *)((char *)&v39[1] + 8) = v19;
          *(void *)&v39[0] = *(void *)(a1 + 104);
          double v20 = sub_10016C458();
          uint64_t v21 = *(void *)(a1 + 192);
          *((double *)v39 + 1) = v20;
          *(void *)&v39[1] = v21;
          int v40 = v18;
          *(unsigned char *)(a1 + 680) = 0;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          double v22 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v23 = *(void *)(a1 + 192);
            *(_DWORD *)buf = 134284801;
            *(double *)uint64_t v53 = *((float *)&v39[2] + 3);
            *(_WORD *)&v53[8] = 2049;
            double v54 = *((float *)&v39[2] + 2);
            __int16 v55 = 2049;
            double v56 = *((float *)&v39[1] + 2);
            __int16 v57 = 2049;
            uint64_t v58 = *(void *)&v39[0];
            __int16 v59 = 2049;
            double v60 = a4;
            __int16 v61 = 2049;
            uint64_t v62 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#CLPDM,sendPressureDataToRequester,lat,%{private}.7lf,lon,%{private}.7lf,Pressure,%{private}.3lf,CreationTime,%{private}.3lf,tileDownloadHttpHeaderTime_s,%{private}.3lf,tileAge,%{private}.3lf", buf, 0x3Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            uint64_t v36 = *(void *)(a1 + 192);
            int v41 = 134284801;
            *(double *)int v42 = *((float *)&v39[2] + 3);
            *(_WORD *)&v42[8] = 2049;
            double v43 = *((float *)&v39[2] + 2);
            __int16 v44 = 2049;
            double v45 = *((float *)&v39[1] + 2);
            __int16 v46 = 2049;
            uint64_t v47 = *(void *)&v39[0];
            __int16 v48 = 2049;
            double v49 = a4;
            __int16 v50 = 2049;
            uint64_t v51 = v36;
            int v37 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v37);
            if (v37 != (char *)buf) {
              free(v37);
            }
          }
          if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || a4 <= 0.0
            || (*(void *)&v39[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
            || *(double *)v39 <= 0.0
            || a4 - *(double *)v39 < 7200.0)
          {
            uint64_t v24 = v11;
            char v25 = 1;
LABEL_60:
            sub_1017B00BC(v24, (uint64_t)v39, v25);
            return;
          }
LABEL_59:
          uint64_t v24 = v11;
          char v25 = 0;
          goto LABEL_60;
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        long long v30 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,send to Baro,Invalid Data", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_59;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v41) = 0;
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        unsigned __int8 v29 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,ProtoParse fails", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_59;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v41) = 0;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v28 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,DataDownload fails", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_59;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(v41) = 0;
    }
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    goto LABEL_59;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  float v26 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#CLPDM,sendPressureDataToRequester,callback invalid", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    LOWORD(v41) = 0;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLPressureDataManager::sendPressureDataToRequester(const BOOL, const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, const double)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
}

uint64_t sub_1017B00BC(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v3 + 48))(v3, a2, &v5);
}

BOOL sub_1017B0110(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  char v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#CLPDM,readProtobufMessageToData,readProtobuf", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    LOWORD(v59) = 0;
    double v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v49);
    if (v49 != (char *)buf) {
      free(v49);
    }
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248D860 + 8);
  }
  if (*(unsigned char *)(v6 + 20))
  {
    *a3 = *(void *)(v6 + 8);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail has_cf_absolute_time_s", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(v59) = 0;
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 76) & 2) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    unint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail status", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(v59) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    goto LABEL_41;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if (!v11)
  {
    *((_DWORD *)a3 + 4) = 0;
LABEL_41:
    if ((*(unsigned char *)(a2 + 76) & 4) != 0)
    {
      *((_DWORD *)a3 + 5) = *(_DWORD *)(a2 + 20);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      int v15 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail version", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v59) = 0;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    if ((*(unsigned char *)(a2 + 76) & 8) != 0)
    {
      std::string::operator=((std::string *)a3 + 1, *(const std::string **)(a2 + 24));
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail tile_id", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v59) = 0;
        int v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
    if ((*(unsigned char *)(a2 + 76) & 0x10) != 0)
    {
      float v21 = *(double *)(a2 + 32);
      *((float *)a3 + 12) = v21;
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      long long v19 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,invalid swLongitude", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v59) = 0;
        double v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    if ((*(unsigned char *)(a2 + 76) & 0x20) != 0)
    {
      float v24 = *(double *)(a2 + 40);
      *((float *)a3 + 13) = v24;
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,invalid swLatitude", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        LOWORD(v59) = 0;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    unint64_t v25 = *(unsigned int *)(a2 + 56);
    *((_DWORD *)a3 + 20) = v25;
    float v26 = a3 + 7;
    sub_1017B2010((uint64_t)(a3 + 7), v25);
    if (*((_DWORD *)a3 + 20))
    {
      unsigned int v27 = 0;
      uint64_t v28 = 24;
      do
      {
        if (*(_DWORD *)(a2 + 56) <= (signed int)v27)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)buf);
        }
        sub_1017BAA7C(&v59, *(void *)(*(void *)(a2 + 48) + 8 * (int)v27));
        uint64_t v29 = *v26 + v28;
        *(float32x4_t *)(v29 - 24) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v61), *(float64x2_t *)v62);
        *(_DWORD *)(v29 - 8) = v63;
        *(float32x2_t *)(v29 - 4) = vcvt_f32_f64(*(float64x2_t *)&v62[16]);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        long long v30 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          unsigned __int8 v31 = (float *)(*v26 + v28);
          double v32 = *(v31 - 6);
          double v33 = *(v31 - 5);
          double v34 = *(v31 - 4);
          double v35 = *(v31 - 3);
          int v36 = *((_DWORD *)v31 - 2);
          double v37 = *(v31 - 1);
          double v38 = *v31;
          *(_DWORD *)buf = 134219521;
          *(double *)double v65 = v32;
          *(_WORD *)&v65[8] = 2048;
          *(double *)&v65[10] = v33;
          *(_WORD *)&v65[18] = 2048;
          *(double *)__int16 v66 = v34;
          *(_WORD *)&v66[8] = 2048;
          *(double *)double v67 = v35;
          *(_WORD *)&v67[8] = 1024;
          LODWORD(v68) = v36;
          WORD2(v68) = 2049;
          *(double *)((char *)&v68 + 6) = v37;
          HIWORD(v68) = 2049;
          double v69 = v38;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#CLPDM,readProtobuf,TileGrid,pressurePa,%.7lf,pressureUnc,%.7lf,PressureRate,%.7lf,PressureRateUnc,%.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf", buf, 0x44u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          char v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v39);
          if (v39 != (char *)buf) {
            free(v39);
          }
        }
        sub_1017BAA80((wireless_diagnostics::google::protobuf::MessageLite *)&v59);
        ++v27;
        v28 += 28;
      }
      while (v27 < *((_DWORD *)a3 + 20));
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v40 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = *a3;
      int v43 = *((_DWORD *)a3 + 4);
      int v42 = *((_DWORD *)a3 + 5);
      __int16 v44 = (const char *)(a3 + 3);
      double v45 = (const char *)a3[3];
      if (!v45) {
        double v45 = "FAIL TILEID";
      }
      if (*((char *)a3 + 47) < 0) {
        __int16 v44 = v45;
      }
      double v46 = *((float *)a3 + 13);
      double v47 = *((float *)a3 + 12);
      int v48 = *((_DWORD *)a3 + 20);
      *(_DWORD *)buf = 67110659;
      *(_DWORD *)double v65 = v42;
      *(_WORD *)&v65[4] = 2048;
      *(void *)&v65[6] = v41;
      *(_WORD *)&v65[14] = 1024;
      *(_DWORD *)&v65[16] = v43;
      *(_WORD *)__int16 v66 = 2080;
      *(void *)&v66[2] = v44;
      *(_WORD *)double v67 = 2049;
      *(double *)&v67[2] = v46;
      LOWORD(v68) = 2049;
      *(double *)((char *)&v68 + 2) = v47;
      WORD5(v68) = 1024;
      HIDWORD(v68) = v48;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#CLPDM,readProtobuf,TileData,version,%d,dataCreation,%f,status,%d,tileId,%s,SwLat,%{private}.7lf,SwLong,%{private}.7lf,Size,%u", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      uint64_t v50 = *a3;
      int v52 = *((_DWORD *)a3 + 4);
      int v51 = *((_DWORD *)a3 + 5);
      uint64_t v53 = (const char *)(a3 + 3);
      double v54 = (const char *)a3[3];
      if (!v54) {
        double v54 = "FAIL TILEID";
      }
      if (*((char *)a3 + 47) < 0) {
        uint64_t v53 = v54;
      }
      double v55 = *((float *)a3 + 13);
      double v56 = *((float *)a3 + 12);
      int v57 = *((_DWORD *)a3 + 20);
      int v59 = 67110659;
      int v60 = v51;
      LOWORD(v61.f64[0]) = 2048;
      *(void *)((char *)v61.f64 + 2) = v50;
      WORD1(v61.f64[1]) = 1024;
      HIDWORD(v61.f64[1]) = v52;
      *(_WORD *)uint64_t v62 = 2080;
      *(void *)&v62[2] = v53;
      *(_WORD *)&v62[10] = 2049;
      *(double *)&v62[12] = v55;
      *(_WORD *)&v62[20] = 2049;
      *(double *)&v62[22] = v56;
      *(_WORD *)&v62[30] = 1024;
      int v63 = v57;
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v58);
      if (v58 != (char *)buf) {
        free(v58);
      }
    }
    *((CFAbsoluteTime *)a3 + 1) = CFAbsoluteTimeGetCurrent();
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  unsigned int v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)double v65 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLPDM,readProtobuf,fail,status,%u", buf, 8u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v59 = 67109120;
    int v60 = v11;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureDataManager::readProtobufMessageToData(const CLP::LogEntry::ReferencePressure::ReferencePressureTile &, CLServerPressureResponse &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  return result;
}

void sub_1017B113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1017BAA80((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017B1170(uint64_t a1, int a2, double a3, double a4, double a5)
{
  uint64_t v8 = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  uint64_t v6 = sub_1017B1C34((int *)&v8, (int *)&v8 + 1, a2, a3, a4, a5);
  if (v6)
  {
    snprintf(__str, 0x40uLL, "%d_%d", v8, HIDWORD(v8));
    std::string::assign((std::string *)a1, __str);
  }
  return v6;
}

uint64_t sub_1017B122C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  sub_1017B9F60((uint64_t)v31);
  if (a4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      double v9 = COERCE_DOUBLE([objc_msgSend(objc_msgSend(a4, "localizedDescription"), "UTF8String") UTF8String]);
      int v34 = 136380675;
      double v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,#RefPressureDataDownload,server error,%{private}s", (uint8_t *)&v34, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(&v34, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v10 = COERCE_DOUBLE([[objc_msgSend(a4, "localizedDescription") UTF8String];
    int v32 = 136380675;
    double v33 = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v11);
    if (v11 == (char *)&v34) {
      goto LABEL_35;
    }
    goto LABEL_10;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    goto LABEL_35;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  unsigned int v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v34) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#CLPDM,#RefPressureDataDownload,server response received", (uint8_t *)&v34, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    LOWORD(v32) = 0;
    unsigned int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v27);
    if (v27 != (char *)&v34) {
      free(v27);
    }
  }
  double v13 = COERCE_DOUBLE([a3 statusCode]);
  if (*(void *)&v13 != 200)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v34 = 134349056;
      double v35 = v13;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,#RefPressureDataDownload,FAILED code,%{public}ld", (uint8_t *)&v34, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(&v34, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v32 = 134349056;
    double v33 = v13;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v11);
    if (v11 == (char *)&v34) {
      goto LABEL_35;
    }
LABEL_10:
    free(v11);
LABEL_35:
    sub_1017AF644(v7, 0, (uint64_t)v31, 0.0);
    return sub_1017BB59C(v31);
  }
  int v14 = *(void **)(v7 + 64);
  if (!v14)
  {
    *(void *)(v7 + 64) = objc_alloc_init((Class)NSDateFormatter);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(v7 + 64);
      int v34 = 134217984;
      double v35 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#CLPDM,#RefPressureDataDownload,fDateFormatter,%p", (uint8_t *)&v34, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v34, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v29 = *(double *)(v7 + 64);
      int v32 = 134217984;
      double v33 = v29;
      long long v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v30);
      if (v30 != (char *)&v34) {
        free(v30);
      }
    }
    int v14 = *(void **)(v7 + 64);
    if (!v14) {
      goto LABEL_43;
    }
  }
  [v14 setDateFormat:@"EEE',' dd MMM yyyy HH':'mm':'ss zzz"];
  id v17 = [objc_msgSend(*(id *)(v7 + 64), "dateFromString:", objc_msgSend(objc_msgSend(a3, "allHeaderFields"), "objectForKey:", @"Date"));
  if (v17)
  {
    [v17 timeIntervalSinceReferenceDate];
    double v19 = v18;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v34 = 134283521;
      double v35 = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#CLPDM,#RefPressureDataDownload,tileDownloadTime,%{private}.3lf", (uint8_t *)&v34, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v34, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      int v32 = 134283521;
      double v33 = v19;
      float v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v21);
      if (v21 != (char *)&v34) {
        free(v21);
      }
    }
  }
  else
  {
LABEL_43:
    double v19 = 0.0;
  }
  int v24 = [a2 length];
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  unint64_t v25 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = 67109120;
    LODWORD(v35) = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#CLPDM,#RefPressureDataDownload,COMPLETED,len,%d", (uint8_t *)&v34, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v32 = 67109120;
    LODWORD(v33) = v24;
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::downloadTile(double, double)_block_invoke", "%s\n", v28);
    if (v28 != (char *)&v34) {
      free(v28);
    }
  }
  [a2 length];
  float v26 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0)];
  [a2 getBytes:v26 length:[a2 length]];
  wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray((wireless_diagnostics::google::protobuf::MessageLite *)v31, v26, v24);
  sub_1017AF644(v7, 1, (uint64_t)v31, v19);
  return sub_1017BB59C(v31);
}

void sub_1017B1BE4(_Unwind_Exception *a1)
{
  sub_1017BB59C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017B1C34(int *a1, int *a2, int a3, double a4, double a5, double a6)
{
  double v27 = a5;
  double v28 = a4;
  if ((sub_1017ACFF8(&v28, &v27) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      double v38 = a4;
      __int16 v39 = 2049;
      double v40 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,getTileYX,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v19) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v29 = 134283777;
    double v30 = a4;
    __int16 v31 = 2049;
    double v32 = v27;
LABEL_28:
    float v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLPressureDataManager::getTileYX(double, double, int &, int &, int, double)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
    return 0;
  }
  double v11 = (double)a3 + 0.05;
  double v12 = a4 + v11 * a6;
  double v13 = v27 + v11 * a6;
  if (a3 <= 0) {
    double v14 = a4;
  }
  else {
    double v14 = v12;
  }
  if (a3 <= 0) {
    double v15 = v27;
  }
  else {
    double v15 = v13;
  }
  *a2 = (int)(round(floor(v15 / 0.05) * 0.05 / 0.0001) + 1800000.0);
  int v16 = (int)(round(floor(v14 / 0.05) * 0.05 / 0.0001) + 900000.0);
  *a1 = v16;
  if ((*a2 & 0x80000000) == 0 && (v16 & 0x80000000) == 0) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  double v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    int v21 = *a2;
    int v22 = *a1;
    *(_DWORD *)buf = 134284289;
    double v38 = v14;
    __int16 v39 = 2049;
    double v40 = v15;
    __int16 v41 = 1025;
    int v42 = v21;
    __int16 v43 = 1025;
    int v44 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,getTileYX,bad x or y,lat,%{private}.7lf,lon%{private}.7lf,x,%{private}d,y,%{private}d", buf, 0x22u);
  }
  BOOL v23 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v23)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v24 = *a2;
    int v25 = *a1;
    int v29 = 134284289;
    double v30 = v14;
    __int16 v31 = 2049;
    double v32 = v15;
    __int16 v33 = 1025;
    int v34 = v24;
    __int16 v35 = 1025;
    int v36 = v25;
    goto LABEL_28;
  }
  return result;
}

void sub_1017B2010(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1017B4888((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 28 * a2;
  }
}

uint64_t sub_1017B2054(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 288;
  (*(void (**)(uint64_t))(*(void *)(a1 + 288) + 16))(a1 + 288);
  if (a2)
  {
    switch(a3)
    {
      case 0:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        uint64_t v7 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,NONE", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            goto LABEL_143;
          }
          goto LABEL_9;
        }
        break;
      case 1:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        double v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,STARTED", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          LOWORD(__p[0]) = 0;
          __int16 v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v35);
          if (v35 != buf) {
            free(v35);
          }
        }
        *(CFAbsoluteTime *)(a1 + 704) = CFAbsoluteTimeGetCurrent();
        break;
      case 2:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        double v10 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLPDM,Pressure,onAvlFileUpdated,avl download status,COMPLETED", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          LOWORD(__p[0]) = 0;
          int v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v34);
          if (v34 != buf) {
            free(v34);
          }
        }
        sub_1005C768C(a2, (uint64_t)__p);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        double v11 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v12 = __p;
          if (v45 < 0) {
            double v12 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136380675;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,onAvlFileUpdated,avl downloaded,%{private}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          int v36 = __p;
          if (v45 < 0) {
            int v36 = (void **)__p[0];
          }
          LODWORD(v43.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
          double v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v37);
          if (v37 != buf) {
            free(v37);
          }
        }
        if (v45 >= 0) {
          double v13 = __p;
        }
        else {
          double v13 = (void **)__p[0];
        }
        if (!sub_1004BF004((const char *)v13, 4))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          double v14 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            double v15 = __p;
            if (v45 < 0) {
              double v15 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136380675;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,Cannot set protection class for Pressure avl file,%{private}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            double v40 = __p;
            if (v45 < 0) {
              double v40 = (void **)__p[0];
            }
            LODWORD(v43.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
            __int16 v41 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v41);
            if (v41 != buf) {
              free(v41);
            }
          }
        }
        int v16 = (char *)sub_1000A6958();
        sub_1000A5670(v16, (uint64_t)&v43);
        if (*(char *)(a1 + 599) < 0)
        {
          sub_1000DC48C(buf, *(void **)(a1 + 576), *(void *)(a1 + 584));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 576);
          *(void *)&buf[16] = *(void *)(a1 + 592);
        }
        if (buf[23] >= 0) {
          double v20 = buf;
        }
        else {
          double v20 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v21 = buf[23];
        }
        else {
          std::string::size_type v21 = *(void *)&buf[8];
        }
        std::string::append(&v43, v20, v21);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        *(CFAbsoluteTime *)(a1 + 704) = CFAbsoluteTimeGetCurrent();
        if (v45 >= 0) {
          int v22 = __p;
        }
        else {
          int v22 = (void **)__p[0];
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v23 = &v43;
        }
        else {
          BOOL v23 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        sub_1004BC3D8((const char *)v22, (const char *)v23);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        int v24 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v25 = __p;
          if (v45 < 0) {
            int v25 = (void **)__p[0];
          }
          float v26 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float v26 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136380931;
          *(void *)&uint8_t buf[4] = v25;
          *(_WORD *)&unsigned char buf[12] = 2081;
          *(void *)&buf[14] = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,onAvlFileUpdated,avl file decompressed,%{private}s,to,%{private}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          double v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v38);
          if (v38 != buf) {
            free(v38);
          }
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v27 = &v43;
        }
        else {
          double v27 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if (!sub_1004BF004((const char *)v27, 4))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          double v28 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            int v29 = &v43;
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v29 = (std::string *)v43.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136380675;
            *(void *)&uint8_t buf[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,Cannot set protection class for Pressure decompressed avl file,%{private}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1D0);
            }
            int v42 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v42);
            if (v42 != buf) {
              free(v42);
            }
          }
        }
        uint64_t v30 = a1 + 216;
        int v31 = sub_1017B63D4(v30);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        double v32 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#CLPDM,Pressure,onAvlFileUpdated,is availability file valid,%{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          __int16 v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v39);
          if (v39 != buf) {
            free(v39);
          }
        }
        sub_1017B4E40(v30);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v45 < 0) {
          operator delete(__p[0]);
        }
        break;
      case 3:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        id v17 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,avl download status,FAILED", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
LABEL_143:
          }
            dispatch_once(&qword_102419380, &stru_10233C1D0);
LABEL_9:
          LOWORD(__p[0]) = 0;
          uint64_t v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
          goto LABEL_64;
        }
        break;
      default:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        BOOL v19 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = a3;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLPDM,#Warning,Pressure,onAvlFileUpdated,avl download status,%{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          LODWORD(__p[0]) = 67240192;
          HIDWORD(__p[0]) = a3;
          uint64_t v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
          goto LABEL_64;
        }
        break;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLPDM,#Error,Pressure,onAvlFileUpdated,null pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPressureDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
LABEL_64:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_1017B30B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1019DB560((uint64_t)&a12);
  _Unwind_Resume(a1);
}

double sub_1017B316C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    unint64_t v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_27;
      }
      uint64_t v3 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#CLPDM,AVL file download rate over wifi,default,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_27;
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (*(unsigned char *)(a1 + 24))
    {
      double result = *(double *)(a1 + 16);
      if (result >= 86400.0) {
        return 86400.0;
      }
      return result;
    }
LABEL_27:
    sub_10020D700();
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  char v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 72);
    *(_DWORD *)buf = 134217984;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#CLPDM,AVL file download rate over wifi,MA-OTA,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileDownloadRateOverWifi() const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return fmin(*(double *)(a1 + 72), 86400.0);
}

double sub_1017B34B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    unint64_t v2 = (uint64_t *)(a1 + 16);
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_9;
      }
      uint64_t v4 = *v2;
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#CLPDM,AVL file expiry age,default,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      if (!*(unsigned char *)(a1 + 24)) {
LABEL_9:
      }
        sub_10020D700();
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileExpirationAge() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_9;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    char v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#CLPDM,AVL file expiry age,MA-OTA,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLPressureDataManager::getAvlFileExpirationAge() const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    unint64_t v2 = (uint64_t *)(a1 + 72);
  }
  return *(double *)v2;
}

uint64_t sub_1017B37D8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7 = a1 + 288;
  uint64_t v24 = a1 + 288;
  (*(void (**)(uint64_t))(*(void *)(a1 + 288) + 16))(a1 + 288);
  __int16 v25 = 256;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  uint64_t v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLPDM,Notification,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v19 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v19;
    double v20 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", (const char *)v20);
    if (v20 != buf) {
      free(v20);
    }
  }
  if (*a3 == 4)
  {
    int v10 = *(_DWORD *)(a4 + 188);
    if (v10 == 1)
    {
      if (!*(unsigned char *)(a1 + 560))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_1017AC3C0(a1, buf);
        *(unsigned char *)(a1 + 560) = 1;
      }
    }
    else if (!v10)
    {
      uint64_t v11 = (char *)sub_1000A6958();
      sub_1000A5670(v11, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&__dst, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = buf[0];
      }
      if (*(char *)(a1 + 599) < 0) {
        sub_1000DC48C(&__p, *(void **)(a1 + 576), *(void *)(a1 + 584));
      }
      else {
        std::string __p = *(std::string *)(a1 + 576);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      sub_1004BEB14((const char *)p_dst);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&__p, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = buf[0];
      }
      if (*(char *)(a1 + 623) < 0)
      {
        sub_1000DC48C(v21, *(void **)(a1 + 600), *(void *)(a1 + 608));
      }
      else
      {
        *(_OWORD *)std::string::size_type v21 = *(_OWORD *)(a1 + 600);
        uint64_t v22 = *(void *)(a1 + 616);
      }
      if (v22 >= 0) {
        double v15 = v21;
      }
      else {
        double v15 = (void **)v21[0];
      }
      if (v22 >= 0) {
        std::string::size_type v16 = HIBYTE(v22);
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v21[1];
      }
      std::string::append(&__p, (const std::string::value_type *)v15, v16);
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v17 = &__p;
      }
      else {
        id v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1004BEB14((const char *)v17);
      *(unsigned char *)(a1 + 560) = 0;
      sub_1005C70E0(a1 + 304);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_1017B3BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void sub_1017B3C70(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    sub_1000E9354();
    if (sub_100012960(a4, "RefPressureConfig", v22))
    {
      uint64_t v6 = (const char **)(a1 + 80);
      if (!sub_1004D1284((uint64_t)v22, "BaroAltReferencePressureUrl", (std::string *)(a1 + 80)))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        uint64_t v7 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,MA-OTA,ref pressure URL config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          LOWORD(v23) = 0;
          double v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
      }
      if (sub_1000A699C((uint64_t)v22, "AvlExpirationAge", (void *)(a1 + 72)))
      {
        sub_1017B4B70(a1 + 216, *(double *)(a1 + 72));
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1D0);
        }
        double v15 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,MA-OTA,AVL file exp age config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1D0);
          }
          LOWORD(v23) = 0;
          std::string::size_type v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        *(void *)(a1 + 72) = 0x4122750000000000;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      std::string::size_type v16 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 72);
        double v18 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
        {
          double v18 = *v6;
          if (!*v6) {
            double v18 = "default";
          }
        }
        *(_DWORD *)buf = 134218242;
        uint64_t v28 = v17;
        __int16 v29 = 2080;
        uint64_t v30 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#CLPDM,MA-OTA,AvlFileExpAge,%f,Url,%s", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      uint64_t v19 = *(void *)(a1 + 72);
      if (*(char *)(a1 + 103) < 0)
      {
        if (*v6) {
          uint64_t v6 = (const char **)*v6;
        }
        else {
          uint64_t v6 = (const char **)"default";
        }
      }
      int v23 = 134218242;
      uint64_t v24 = v19;
      __int16 v25 = 2080;
      float v26 = v6;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v14);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      double v13 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,MA-OTA,ReferencePressure Config not available", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1D0);
      }
      LOWORD(v23) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v14);
    }
    if (v14 != (char *)buf) {
      free(v14);
    }
LABEL_42:
    sub_10013F3C4(v22);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  int v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v10 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v28) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#CLPDM,#Warning,Invalid notification,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    int v11 = *a3;
    int v23 = 67109120;
    LODWORD(v24) = v11;
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureDataManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1017B43EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1017B4418(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1017B4448(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void *sub_1017B4478(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1017B44FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017B4594(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017B47F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1017B4800(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017B4888(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  char v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (unsigned char *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      double v13 = &v7[7 * a2];
      __asm { FMOV            V0.4S, #-1.0 }
      do
      {
        *(_OWORD *)uint64_t v7 = _Q0;
        v7[6] = 0;
        *((void *)v7 + 2) = 0;
        v7 += 7;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x924924924924924) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x492492492492492) {
      unint64_t v11 = 0x924924924924924;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      double v12 = (char *)sub_100ADA48C(v4, v11);
    }
    else {
      double v12 = 0;
    }
    uint64_t v19 = &v12[28 * v8];
    double v20 = &v19[28 * a2];
    __asm { FMOV            V0.4S, #-1.0 }
    uint64_t v22 = v19;
    do
    {
      *(_OWORD *)uint64_t v22 = _Q0;
      *((_DWORD *)v22 + 6) = 0;
      *((void *)v22 + 2) = 0;
      v22 += 28;
    }
    while (v22 != v20);
    int v23 = &v12[28 * v11];
    __int16 v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 28);
        *((_OWORD *)v19 - 1) = *((_OWORD *)v24 - 1);
        *(_OWORD *)(v19 - 28) = v26;
        v19 -= 28;
        v24 -= 28;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

void sub_1017B4A1C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1017B4A9C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1017B4B2C(_Unwind_Exception *a1)
{
}

uint64_t sub_1017B4B44()
{
  *(void *)byte_102489038 = 0;
  *(void *)&byte_102489038[8] = 0;
  *(void *)&byte_102489038[16] = 0;
  return __cxa_atexit((void (*)(void *))&std::string::~string, byte_102489038, (void *)&_mh_execute_header);
}

uint64_t sub_1017B4B70(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

BOOL sub_1017B4B78(uint64_t a1)
{
  unint64_t v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)&__str);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 56);
  }
  if (v16 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if (v16 >= 0) {
    std::string::size_type v4 = HIBYTE(v16);
  }
  else {
    std::string::size_type v4 = (std::string::size_type)__p[1];
  }
  std::string::append(&__str, (const std::string::value_type *)v3, v4);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  char v5 = (void **)(a1 + 16);
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v7 = *v5;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,doesAvlFileExist,FilePath,%s", (uint8_t *)__p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    if (*(char *)(a1 + 39) < 0) {
      char v5 = (void **)*v5;
    }
    int v13 = 136315138;
    double v14 = v5;
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::doesAvlFileExist()", "%s\n", v11);
    if (v11 != (char *)__p) {
      free(v11);
    }
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  BOOL v9 = sub_1000A569C((const char *)p_str);
  if (!v9) {
    *(unsigned char *)(a1 + 64) = 1;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1017B4DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017B4E40(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  unint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLPDA,clear AVL cache", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureTileAvailability::clearAvlCache()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
}

uint64_t sub_1017B4FDC(uint64_t a1, double a2, long double a3)
{
  if ((sub_1017B63D4(a1) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v16 = *(unsigned __int8 *)(a1 + 64);
      int buf = 67240192;
      *(_DWORD *)double v75 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v17 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v62[0]) = 67240192;
    DWORD1(v62[0]) = v17;
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf) {
      return 0;
    }
LABEL_127:
    free(v18);
    return 0;
  }
  uint64_t v72 = 0;
  uint64_t v71 = 0;
  uint64_t v73 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  memset(v70, 0, sizeof(v70));
  uint64_t v56 = 0;
  memset(v62, 0, sizeof(v62));
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    int buf = 136446210;
    *(void *)double v75 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,Reading,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    char v45 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      char v45 = (void *)*v45;
    }
    int v57 = 136446210;
    *(void *)uint64_t v58 = v45;
    double v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v46);
    if (v46 != (char *)&buf) {
      free(v46);
    }
  }
  uint64_t v8 = (const char **)(a1 + 16);
  BOOL v9 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    BOOL v9 = *v8;
  }
  unint64_t v10 = fopen(v9, "rb");
  unint64_t v11 = v10;
  if (!v10)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    uint64_t v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      double v20 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        double v20 = *v8;
      }
      int v21 = *(unsigned __int8 *)(a1 + 64);
      int v22 = *__error();
      int buf = 136446722;
      *(void *)double v75 = v20;
      *(_WORD *)&v75[8] = 1026;
      int v76 = v21;
      __int16 v77 = 1026;
      int v78 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,could not open file,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v8 = (const char **)*v8;
    }
    int v47 = *(unsigned __int8 *)(a1 + 64);
    int v48 = *__error();
    int v57 = 136446722;
    *(void *)uint64_t v58 = v8;
    *(_WORD *)&v58[8] = 1026;
    int v59 = v47;
    __int16 v60 = 1026;
    int v61 = v48;
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf) {
      return 0;
    }
    goto LABEL_127;
  }
  uint64_t v55 = 0;
  if ((sub_1017B70EC(v10, v62, (uint64_t)&v63, &v56, &v55) & 1) == 0)
  {
    *(unsigned char *)(a1 + 64) = 1;
    fclose(v11);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    uint64_t v24 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      int v25 = *(unsigned __int8 *)(a1 + 64);
      int buf = 67240192;
      *(_DWORD *)double v75 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#CLPDA,#AVL,readAvlHelperData failed,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_43;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v49 = *(unsigned __int8 *)(a1 + 64);
    int v57 = 67240192;
    *(_DWORD *)uint64_t v58 = v49;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
    goto LABEL_131;
  }
  double v12 = (double)v70[24];
  if (v12 > a2)
  {
    fclose(v11);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,invalid Lat min", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_43;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_20;
    }
LABEL_151:
    dispatch_once(&qword_102419380, &stru_10233C1F0);
LABEL_20:
    LOWORD(v57) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
LABEL_131:
    if (v14 != (char *)&buf) {
      free(v14);
    }
    goto LABEL_43;
  }
  if ((double)v70[25] <= a2)
  {
    fclose(v11);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v34 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,invalid lat Max", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_43;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_20;
    }
    goto LABEL_151;
  }
  sub_100142F58(a3);
  int v28 = (int)((double)(int)vcvtmd_s64_f64(v27 * 20.0)
            + (double)(int)(2 * (vcvtmd_s64_f64((a2 + 90.0) * 20.0) - (int)((v12 + 90.0) * 20.0))) * 180.0 * 20.0);
  if (v28 >= 0) {
    int v29 = v28;
  }
  else {
    int v29 = v28 + 7;
  }
  unsigned __int8 __ptr = 0;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  uint64_t v30 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int buf = 67109120;
    *(_DWORD *)double v75 = v73;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,dataSizeBytes,%d", (uint8_t *)&buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v57 = 67109120;
    unsigned int v50 = v73;
    *(_DWORD *)uint64_t v58 = v73;
    int v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v51);
    if (v51 != (char *)&buf) {
      free(v51);
    }
    unsigned int v31 = v50;
  }
  else
  {
    unsigned int v31 = v73;
  }
  if (v29 >> 3 >= v31)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    __int16 v35 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int buf = 67240192;
      *(_DWORD *)double v75 = v29 >> 3;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,byte index,%{public}d,is larger than the AVL file size", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_91;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v57 = 67240192;
    *(_DWORD *)uint64_t v58 = v29 >> 3;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v36);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v32 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int buf = 67109120;
      *(_DWORD *)double v75 = v29 >> 3;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,iByte,%d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      int v57 = 67109120;
      *(_DWORD *)uint64_t v58 = v29 >> 3;
      int v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v52);
      if (v52 != (char *)&buf) {
        free(v52);
      }
    }
    fseek(v11, v29 >> 3, 1);
    if (fread(&__ptr, 1uLL, 1uLL, v11) == 1)
    {
      fclose(v11);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      __int16 v33 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        int buf = 67109120;
        *(_DWORD *)double v75 = v28 - (v29 & 0xFFFFFFF8);
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,iBitInByte,%d", (uint8_t *)&buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        int v57 = 67109120;
        *(_DWORD *)uint64_t v58 = v28 - (v29 & 0xFFFFFFF8);
        uint64_t v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v53);
        if (v53 != (char *)&buf) {
          free(v53);
        }
      }
      switch(v28 - (v29 & 0xFFFFFFF8))
      {
        case 0u:
          uint64_t v23 = (__ptr & 0x80u) != 0;
          break;
        case 1u:
          uint64_t v23 = (__ptr >> 6) & 1;
          break;
        case 2u:
          uint64_t v23 = (__ptr >> 5) & 1;
          break;
        case 3u:
          uint64_t v23 = (__ptr >> 4) & 1;
          break;
        case 4u:
          uint64_t v23 = (__ptr >> 3) & 1;
          break;
        case 5u:
          uint64_t v23 = (__ptr >> 2) & 1;
          break;
        case 6u:
          uint64_t v23 = (__ptr >> 1) & 1;
          break;
        case 7u:
          uint64_t v23 = __ptr & 1;
          break;
        default:
          *(unsigned char *)(a1 + 64) = 1;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1F0);
          }
          int v42 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
          {
            int v43 = *(unsigned __int8 *)(a1 + 64);
            int buf = 67240192;
            *(_DWORD *)double v75 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "Pressure,#AVL,unexpected case,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_43;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1F0);
          }
          int v44 = *(unsigned __int8 *)(a1 + 64);
          int v57 = 67240192;
          *(_DWORD *)uint64_t v58 = v44;
          double v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
          goto LABEL_131;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      double v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        int v39 = *(unsigned __int8 *)(a1 + 64);
        int buf = 67240448;
        *(_DWORD *)double v75 = v23;
        *(_WORD *)&v75[4] = 1026;
        *(_DWORD *)&v75[6] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#CLPDM,#AVL,finished,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        int v40 = *(unsigned __int8 *)(a1 + 64);
        int v57 = 67240448;
        *(_DWORD *)uint64_t v58 = v23;
        *(_WORD *)&v58[4] = 1026;
        *(_DWORD *)&v58[6] = v40;
        __int16 v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v41);
        if (v41 != (char *)&buf) {
          free(v41);
        }
      }
      goto LABEL_44;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v37 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,unable to get data byte", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_91;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    LOWORD(v57) = 0;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v36);
  }
  if (v36 != (char *)&buf) {
    free(v36);
  }
LABEL_91:
  *(unsigned char *)(a1 + 64) = 1;
  fclose(v11);
LABEL_43:
  uint64_t v23 = 0;
LABEL_44:
  if (SBYTE7(v64) < 0) {
    operator delete((void *)v63);
  }
  return v23;
}

void sub_1017B634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(*v54);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017B63D4(uint64_t a1)
{
  long long v64 = 0uLL;
  uint64_t v65 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  memset(v63, 0, sizeof(v63));
  uint64_t v46 = 0;
  memset(v55, 0, sizeof(v55));
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  unint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v52) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLPDM,#AVL,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v33 = *(unsigned __int8 *)(a1 + 64);
    int v47 = 67240192;
    LODWORD(v48) = v33;
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  if (!sub_1017B4B78(a1))
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v19 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#CLPDA,#Warning,#AVL,file does not exist,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v20 = *(unsigned __int8 *)(a1 + 64);
    int v47 = 67240192;
    LODWORD(v48) = v20;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v21);
    if (v21 == (char *)buf) {
      return 0;
    }
LABEL_75:
    free(v21);
    return 0;
  }
  std::string::size_type v4 = (const char **)(a1 + 16);
  char v5 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    char v5 = *v4;
  }
  uint64_t v6 = fopen(v5, "rb");
  uint64_t v7 = v6;
  if (!v6)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v22 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        uint64_t v23 = *v4;
      }
      int v24 = *(unsigned __int8 *)(a1 + 64);
      int v25 = *__error();
      *(_DWORD *)int buf = 136446722;
      double v52 = *(double *)&v23;
      __int16 v53 = 1026;
      LODWORD(v54[0]) = v24;
      WORD2(v54[0]) = 1026;
      *(_DWORD *)((char *)v54 + 6) = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,could not open file,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    if (*(char *)(a1 + 39) < 0) {
      std::string::size_type v4 = (const char **)*v4;
    }
    int v35 = *(unsigned __int8 *)(a1 + 64);
    int v36 = *__error();
    int v47 = 136446722;
    double v48 = *(double *)&v4;
    __int16 v49 = 1026;
    LODWORD(v50[0]) = v35;
    WORD2(v50[0]) = 1026;
    *(_DWORD *)((char *)v50 + 6) = v36;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v21);
    if (v21 == (char *)buf) {
      return 0;
    }
    goto LABEL_75;
  }
  uint64_t v45 = 0;
  if ((sub_1017B70EC(v6, v55, (uint64_t)__p, &v46, &v45) & 1) == 0)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    long long v26 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      int v27 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#CLPDA,#AVL,readAvlHelperData failed,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      int v37 = *(unsigned __int8 *)(a1 + 64);
      int v47 = 67240192;
      LODWORD(v48) = v37;
      double v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    fclose(v7);
    goto LABEL_62;
  }
  fclose(v7);
  if (v63[22] != 1)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v28 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v29 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,file version does not match expected with version,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_62;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_89;
    }
LABEL_91:
    dispatch_once(&qword_102419380, &stru_10233C1F0);
LABEL_89:
    int v43 = *(unsigned __int8 *)(a1 + 64);
    int v47 = 67240192;
    LODWORD(v48) = v43;
    int v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
    goto LABEL_62;
  }
  LODWORD(v8) = HIDWORD(v64);
  double v9 = (double)v8;
  if (*(double *)(a1 + 8) <= 0.0) {
    double v10 = v9;
  }
  else {
    double v10 = *(double *)(a1 + 8);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  unint64_t v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)int buf = 134349312;
    double v52 = v10;
    __int16 v53 = 2050;
    *(CFAbsoluteTime *)double v54 = Current;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,file expiry age is,%{public}.1f,current,%{public}.1f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    CFAbsoluteTime v39 = CFAbsoluteTimeGetCurrent();
    int v47 = 134349312;
    double v48 = v10;
    __int16 v49 = 2050;
    *(CFAbsoluteTime *)unsigned int v50 = v39;
    int v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
  double v13 = CFAbsoluteTimeGetCurrent();
  double v14 = *(double *)((char *)&v64 + 4);
  if (v13 <= v10 + v14 + (double)(random() % 3600))
  {
    *(unsigned char *)(a1 + 64) = 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,end of checkAvlFileValidityAndSetDownloadFlag function reached,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      int v41 = *(unsigned __int8 *)(a1 + 64);
      int v47 = 67240192;
      LODWORD(v48) = v41;
      int v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    uint64_t v17 = 1;
    goto LABEL_63;
  }
  *(unsigned char *)(a1 + 64) = 1;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  uint64_t v30 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v52) = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,file has expired,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_89;
    }
    goto LABEL_91;
  }
LABEL_62:
  uint64_t v17 = 0;
LABEL_63:
  if (SBYTE7(v57) < 0) {
    operator delete(__p[0]);
  }
  return v17;
}

void sub_1017B7094(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x7B7]) < 0) {
    operator delete((void *)STACK[0x7A0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1017B70EC(FILE *a1, _OWORD *a2, uint64_t a3, uint64_t *a4, void *a5)
{
  if (!a1)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file", (uint8_t *)&buf, 2u);
    }
    BOOL v11 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v11)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      *(_WORD *)unint64_t v168 = 0;
      goto LABEL_28;
    }
    return result;
  }
  if (!a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    double v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,null buffer", (uint8_t *)&buf, 2u);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v13)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      *(_WORD *)unint64_t v168 = 0;
      goto LABEL_28;
    }
    return result;
  }
  long long v197 = 0u;
  memset(v198, 0, sizeof(v198));
  long long v195 = 0u;
  long long v196 = 0u;
  long long v193 = 0u;
  long long v194 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  long long v189 = 0u;
  long long v190 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v184 = 0u;
  long long v183 = 0u;
  long long v182 = 0u;
  long long v181 = 0u;
  long long v180 = 0u;
  long long v179 = 0u;
  long long v178 = 0u;
  long long v177 = 0u;
  long long v176 = 0u;
  long long v175 = 0u;
  long long v174 = 0u;
  long long v173 = 0u;
  long long v172 = 0u;
  long long v171 = 0u;
  long long v170 = 0u;
  long long v169 = 0u;
  *(_OWORD *)&v168[1] = 0u;
  if (feof(a1))
  {
LABEL_4:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,did not synchronize to tile header string", (uint8_t *)&buf, 2u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v8) {
      return result;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    LOWORD(v158) = 0;
    goto LABEL_28;
  }
  unsigned int v15 = 0;
  uint64_t v16 = a3 + 24;
  uint64_t v156 = a3;
  while (1)
  {
    char __ptr = 0;
    size_t v17 = fread(&__ptr, 1uLL, 1uLL, a1);
    if (v17 != 1)
    {
      size_t v25 = v17;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      long long v26 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        int buf = 134217984;
        *(void *)v200 = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,Header Data is not valid,%zu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        int v158 = 134217984;
        *(void *)unint64_t v159 = v25;
        goto LABEL_68;
      }
      return 0;
    }
    uint64_t v18 = ftell(a1);
    if (__ptr != 67) {
      goto LABEL_44;
    }
    uint64_t v19 = v18;
    v168[0] = 67;
    size_t v20 = fread(&v168[1], 1uLL, 9uLL, a1);
    if (v20 != 9)
    {
      size_t v27 = v20;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      int v28 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        int buf = 134217984;
        *(void *)v200 = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,Header data is not CLPRESSAVL,%zu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        int v158 = 134217984;
        *(void *)unint64_t v159 = v27;
LABEL_68:
        double v14 = (int *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n");
        goto LABEL_29;
      }
      return 0;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v21 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int buf = 67111424;
      *(_DWORD *)v200 = v168[0];
      *(_WORD *)&v200[4] = 1024;
      *(_DWORD *)&v200[6] = v168[1];
      LOWORD(v201) = 1024;
      *(_DWORD *)((char *)&v201 + 2) = v168[2];
      HIWORD(v201) = 1024;
      int v202 = v168[3];
      __int16 v203 = 1024;
      *(_DWORD *)uint64_t v204 = v168[4];
      *(_WORD *)&v204[4] = 1024;
      *(_DWORD *)&v204[6] = v168[5];
      LOWORD(v205) = 1024;
      *(_DWORD *)((char *)&v205 + 2) = v168[6];
      HIWORD(v205) = 1024;
      *(_DWORD *)v206 = v168[7];
      *(_WORD *)&v206[4] = 1024;
      *(_DWORD *)v207 = v168[8];
      *(_WORD *)&v207[4] = 1024;
      v208[0] = v168[9];
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,Header Bytes read are %c,%c,%c,%c,%c,%c,%c,%c,%c,%c", (uint8_t *)&buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      int v158 = 67111424;
      *(_DWORD *)unint64_t v159 = v168[0];
      *(_WORD *)&v159[4] = 1024;
      *(_DWORD *)&v159[6] = v168[1];
      LOWORD(v160) = 1024;
      *(_DWORD *)((char *)&v160 + 2) = v168[2];
      HIWORD(v160) = 1024;
      int v161 = v168[3];
      __int16 v162 = 1024;
      *(_DWORD *)uint64_t v163 = v168[4];
      *(_WORD *)&v163[4] = 1024;
      *(_DWORD *)&v163[6] = v168[5];
      LOWORD(v164) = 1024;
      *(_DWORD *)((char *)&v164 + 2) = v168[6];
      HIWORD(v164) = 1024;
      *(_DWORD *)v165 = v168[7];
      *(_WORD *)&v165[4] = 1024;
      *(_DWORD *)unint64_t v166 = v168[8];
      *(_WORD *)&v166[4] = 1024;
      *(_DWORD *)int v167 = v168[9];
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v24);
      if (v24 != (char *)&buf) {
        free(v24);
      }
    }
    *(_WORD *)(v16 + 8) = *(_WORD *)&v168[8];
    *(void *)uint64_t v16 = *(void *)v168;
    uint64_t v22 = v156;
    if (*(void *)(v156 + 24) == 0x4153534552504C43 && *(unsigned char *)(v156 + 32) == 86 && *(unsigned char *)(v156 + 33) == 76) {
      break;
    }
    if (fseek(a1, v19, 0))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      long long v69 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,fseek returned non-zero", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        LOWORD(v158) = 0;
LABEL_28:
        double v14 = (int *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n");
LABEL_29:
        if (v14 != &buf) {
          free(v14);
        }
        return 0;
      }
      return 0;
    }
LABEL_44:
    if (!feof(a1) && v15++ < 0x1FF) {
      continue;
    }
    goto LABEL_4;
  }
  unint64_t v29 = 0;
  int v31 = a2;
  uint64_t v30 = a4;
  *a4 = 11;
  do
  {
    *((unsigned char *)a2 + v29) = *(unsigned char *)(v16 + v29);
    ++v29;
  }
  while (*a4 > v29);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  double v32 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v33 = *a4;
    int buf = 134217984;
    *(void *)v200 = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    uint64_t v111 = *a4;
    int v158 = 134217984;
    *(void *)unint64_t v159 = v111;
    unint64_t v112 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v112);
    if (v112 != (char *)&buf) {
      free(v112);
    }
    uint64_t v22 = v156;
    int v31 = a2;
    uint64_t v30 = a4;
  }
  size_t v34 = 110 - *v30;
  size_t v35 = fread((char *)v31 + *v30, 1uLL, v34, a1);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  int v36 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int buf = 134218240;
    *(void *)v200 = v35;
    *(_WORD *)&v200[8] = 1024;
    LODWORD(v201) = v34;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,count,%zu,nb,%u", (uint8_t *)&buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    int v158 = 134218240;
    *(void *)unint64_t v159 = v35;
    *(_WORD *)&v159[8] = 1024;
    LODWORD(v160) = v34;
    int v113 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v113);
    if (v113 != (char *)&buf) {
      free(v113);
    }
    uint64_t v22 = v156;
    int v31 = a2;
    uint64_t v30 = a4;
  }
  if (v35 == v34)
  {
    long long v37 = *v31;
    long long v38 = v31[2];
    *(_OWORD *)(v16 + 16) = v31[1];
    *(_OWORD *)(v16 + 32) = v38;
    *(_OWORD *)uint64_t v16 = v37;
    long long v39 = v31[3];
    long long v40 = v31[4];
    long long v41 = v31[5];
    *(_OWORD *)(v16 + 94) = *(_OWORD *)((char *)v31 + 94);
    *(_OWORD *)(v16 + 64) = v40;
    *(_OWORD *)(v16 + 80) = v41;
    *(_OWORD *)(v16 + 48) = v39;
    size_t v42 = *v30 + v34;
    uint64_t *v30 = v42;
    if (*(void *)(v22 + 24) == 0x4153534552504C43 && *(unsigned char *)(v22 + 32) == 86 && *(unsigned char *)(v22 + 33) == 76)
    {
      fread((char *)v31 + v42, 1uLL, 1uLL, a1);
      size_t v43 = fread((char *)v31 + *v30, 1uLL, 1uLL, a1);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      int v44 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        int buf = 134217984;
        *(void *)v200 = v43;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,count,%zu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        int v158 = 134217984;
        *(void *)unint64_t v159 = v43;
        unint64_t v118 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v118);
        if (v118 != (char *)&buf) {
          free(v118);
        }
        uint64_t v22 = v156;
        int v31 = a2;
        uint64_t v30 = a4;
      }
      if (v43 == 1)
      {
        uint64_t v45 = *v30;
        *(unsigned char *)(v22 + 134) = *((unsigned char *)v31 + *v30);
        uint64_t *v30 = v45 + 1;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        uint64_t v46 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          uint64_t v47 = *v30;
          int v48 = *(unsigned __int8 *)(v22 + 134);
          int buf = 134218240;
          *(void *)v200 = v47;
          *(_WORD *)&v200[8] = 1024;
          LODWORD(v201) = v48;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,version,%d", (uint8_t *)&buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1F0);
          }
          uint64_t v119 = *a4;
          int v120 = *(unsigned __int8 *)(v156 + 134);
          int v158 = 134218240;
          *(void *)unint64_t v159 = v119;
          *(_WORD *)&v159[8] = 1024;
          LODWORD(v160) = v120;
          unsigned int v121 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v121);
          if (v121 != (char *)&buf) {
            free(v121);
          }
          uint64_t v22 = v156;
          int v31 = a2;
          uint64_t v30 = a4;
        }
        if (fread((char *)v31 + *v30, 1uLL, 1uLL, a1) == 1)
        {
          uint64_t v49 = *v30;
          *(unsigned char *)(v22 + 135) = *((unsigned char *)v31 + *v30);
          uint64_t *v30 = v49 + 1;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1F0);
          }
          unsigned int v50 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            uint64_t v51 = *v30;
            int v52 = *(unsigned __int8 *)(v22 + 135);
            int buf = 134218240;
            *(void *)v200 = v51;
            *(_WORD *)&v200[8] = 1024;
            LODWORD(v201) = v52;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,headerLength,%d", (uint8_t *)&buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1F0);
            }
            uint64_t v122 = *a4;
            int v123 = *(unsigned __int8 *)(v156 + 135);
            int v158 = 134218240;
            *(void *)unint64_t v159 = v122;
            *(_WORD *)&v159[8] = 1024;
            LODWORD(v160) = v123;
            char v124 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v124);
            if (v124 != (char *)&buf) {
              free(v124);
            }
            uint64_t v22 = v156;
            int v31 = a2;
            uint64_t v30 = a4;
          }
          if (fread((char *)v31 + *v30, 1uLL, 1uLL, a1) == 1)
          {
            uint64_t v53 = *v30;
            *(unsigned char *)(v22 + 136) = *((unsigned char *)v31 + *v30);
            uint64_t *v30 = v53 + 1;
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1F0);
            }
            double v54 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
            {
              uint64_t v55 = *v30;
              int v56 = *(char *)(v22 + 136);
              int buf = 134218240;
              *(void *)v200 = v55;
              *(_WORD *)&v200[8] = 1024;
              LODWORD(v201) = v56;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,minLatitude,%d", (uint8_t *)&buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10233C1F0);
              }
              uint64_t v125 = *a4;
              int v126 = *(char *)(v156 + 136);
              int v158 = 134218240;
              *(void *)unint64_t v159 = v125;
              *(_WORD *)&v159[8] = 1024;
              LODWORD(v160) = v126;
              int v127 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v127);
              if (v127 != (char *)&buf) {
                free(v127);
              }
              uint64_t v22 = v156;
              int v31 = a2;
              uint64_t v30 = a4;
            }
            if (fread((char *)v31 + *v30, 1uLL, 1uLL, a1) == 1)
            {
              uint64_t v57 = *v30;
              *(unsigned char *)(v22 + 137) = *((unsigned char *)v31 + *v30);
              uint64_t *v30 = v57 + 1;
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10233C1F0);
              }
              long long v58 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
              {
                uint64_t v59 = *v30;
                int v60 = *(char *)(v22 + 137);
                int buf = 134218240;
                *(void *)v200 = v59;
                *(_WORD *)&v200[8] = 1024;
                LODWORD(v201) = v60;
                _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,maxLatitude,%d", (uint8_t *)&buf, 0x12u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10233C1F0);
                }
                uint64_t v128 = *a4;
                int v129 = *(char *)(v156 + 137);
                int v158 = 134218240;
                *(void *)unint64_t v159 = v128;
                *(_WORD *)&v159[8] = 1024;
                LODWORD(v160) = v129;
                unint64_t v130 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v130);
                if (v130 != (char *)&buf) {
                  free(v130);
                }
                uint64_t v22 = v156;
                int v31 = a2;
                uint64_t v30 = a4;
              }
              if (fread((char *)v31 + *v30, 1uLL, 4uLL, a1) == 4)
              {
                uint64_t v61 = *v30;
                *(_DWORD *)(v22 + 140) = bswap32(*(_DWORD *)((char *)v31 + *v30));
                uint64_t *v30 = v61 + 4;
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10233C1F0);
                }
                long long v62 = qword_102419388;
                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
                {
                  uint64_t v63 = *v30;
                  double v64 = *(float *)(v22 + 140);
                  int buf = 134218240;
                  *(void *)v200 = v63;
                  *(_WORD *)&v200[8] = 2048;
                  double v201 = v64;
                  _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,.binsize,%f", (uint8_t *)&buf, 0x16u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_102419380 != -1) {
                    dispatch_once(&qword_102419380, &stru_10233C1F0);
                  }
                  uint64_t v131 = *a4;
                  double v132 = *(float *)(v156 + 140);
                  int v158 = 134218240;
                  *(void *)unint64_t v159 = v131;
                  *(_WORD *)&v159[8] = 2048;
                  double v160 = v132;
                  unsigned int v133 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v133);
                  if (v133 != (char *)&buf) {
                    free(v133);
                  }
                  uint64_t v22 = v156;
                  int v31 = a2;
                  uint64_t v30 = a4;
                }
                if (fabsf(*(float *)(v22 + 140) + -0.05) <= 0.0001)
                {
                  if (fread((char *)v31 + *v30, 1uLL, 8uLL, a1) == 8)
                  {
                    uint64_t v84 = *a4;
                    *(void *)(v156 + 144) = bswap64(*(void *)((char *)a2 + *a4));
                    *a4 = v84 + 8;
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_10233C1F0);
                    }
                    char v85 = qword_102419388;
                    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v86 = *a4;
                      double v87 = *(double *)(v156 + 144);
                      int buf = 134218240;
                      *(void *)v200 = v86;
                      *(_WORD *)&v200[8] = 2048;
                      double v201 = v87;
                      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,timestamp,%f", (uint8_t *)&buf, 0x16u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(&buf, 0x65CuLL);
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10233C1F0);
                      }
                      uint64_t v134 = *a4;
                      double v135 = *(double *)(v156 + 144);
                      int v158 = 134218240;
                      *(void *)unint64_t v159 = v134;
                      *(_WORD *)&v159[8] = 2048;
                      double v160 = v135;
                      char v136 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v136);
                      if (v136 != (char *)&buf) {
                        free(v136);
                      }
                    }
                    if (fread((char *)a2 + *a4, 1uLL, 4uLL, a1) == 4)
                    {
                      uint64_t v88 = *a4;
                      *(_DWORD *)(v156 + 152) = bswap32(*(_DWORD *)((char *)a2 + *a4));
                      *a4 = v88 + 4;
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10233C1F0);
                      }
                      char v89 = qword_102419388;
                      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v90 = *a4;
                        int v91 = *(_DWORD *)(v156 + 152);
                        int buf = 134218240;
                        *(void *)v200 = v90;
                        *(_WORD *)&v200[8] = 1024;
                        LODWORD(v201) = v91;
                        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,expirationAge,%u", (uint8_t *)&buf, 0x12u);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(&buf, 0x65CuLL);
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_10233C1F0);
                        }
                        uint64_t v137 = *a4;
                        int v138 = *(_DWORD *)(v156 + 152);
                        int v158 = 134218240;
                        *(void *)unint64_t v159 = v137;
                        *(_WORD *)&v159[8] = 1024;
                        LODWORD(v160) = v138;
                        uint64_t v139 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v139);
                        if (v139 != (char *)&buf) {
                          free(v139);
                        }
                      }
                      if (fread((char *)a2 + *a4, 1uLL, 4uLL, a1) == 4)
                      {
                        uint64_t v92 = *a4;
                        *(_DWORD *)(v156 + 156) = bswap32(*(_DWORD *)((char *)a2 + *a4));
                        *a4 = v92 + 4;
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_10233C1F0);
                        }
                        BOOL v93 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v94 = *a4;
                          int v95 = *(_DWORD *)(v156 + 156);
                          int buf = 134218240;
                          *(void *)v200 = v94;
                          *(_WORD *)&v200[8] = 1024;
                          LODWORD(v201) = v95;
                          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_INFO, "#CLPDA,#AVL,bufferIndex,%zu,dataSizeBytes,%d", (uint8_t *)&buf, 0x12u);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(&buf, 0x65CuLL);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_10233C1F0);
                          }
                          uint64_t v140 = *a4;
                          int v141 = *(_DWORD *)(v156 + 156);
                          int v158 = 134218240;
                          *(void *)unint64_t v159 = v140;
                          *(_WORD *)&v159[8] = 1024;
                          LODWORD(v160) = v141;
                          char v142 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v142);
                          if (v142 != (char *)&buf) {
                            free(v142);
                          }
                        }
                        if (fread((char *)a2 + *a4, 1uLL, 4uLL, a1) == 4)
                        {
                          *a5 = *(int *)a4;
                          uint64_t v96 = *a4;
                          *(_DWORD *)(v156 + 160) = bswap32(*(_DWORD *)((char *)a2 + *a4));
                          *a4 = v96 + 4;
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_10233C1F0);
                          }
                          uint64_t v97 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            int v98 = *(unsigned __int8 *)(v156 + 134);
                            int v99 = *(unsigned __int8 *)(v156 + 135);
                            int v100 = *(char *)(v156 + 136);
                            int v101 = *(char *)(v156 + 137);
                            double v102 = *(float *)(v156 + 140);
                            uint64_t v103 = *(void *)(v156 + 144);
                            int v104 = *(_DWORD *)(v156 + 152);
                            int v105 = *(_DWORD *)(v156 + 156);
                            int v106 = *(_DWORD *)(v156 + 160);
                            int buf = 67176705;
                            *(_DWORD *)v200 = v98;
                            *(_WORD *)&v200[4] = 1025;
                            *(_DWORD *)&v200[6] = v99;
                            LOWORD(v201) = 1025;
                            *(_DWORD *)((char *)&v201 + 2) = v100;
                            HIWORD(v201) = 1025;
                            int v202 = v101;
                            __int16 v203 = 2049;
                            *(double *)uint64_t v204 = v102;
                            *(_WORD *)&v204[8] = 2049;
                            uint64_t v205 = v103;
                            *(_WORD *)v206 = 1025;
                            *(_DWORD *)&v206[2] = v104;
                            *(_WORD *)v207 = 1025;
                            *(_DWORD *)&v207[2] = v105;
                            LOWORD(v208[0]) = 1025;
                            *(_DWORD *)((char *)v208 + 2) = v106;
                            _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "#CLPDA,#AVL,vers,%{private}d,headerLen,%{private}d,minLat,%{private}d,maxLat,%{private}d,binsize,%{private}.7f,timestamp,%{private}.1f,expirationAge,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d", (uint8_t *)&buf, 0x40u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(&buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_10233C1F0);
                            }
                            int v143 = *(unsigned __int8 *)(v156 + 134);
                            int v144 = *(unsigned __int8 *)(v156 + 135);
                            int v145 = *(char *)(v156 + 136);
                            int v146 = *(char *)(v156 + 137);
                            double v147 = *(float *)(v156 + 140);
                            uint64_t v148 = *(void *)(v156 + 144);
                            int v149 = *(_DWORD *)(v156 + 152);
                            int v150 = *(_DWORD *)(v156 + 156);
                            int v151 = *(_DWORD *)(v156 + 160);
                            int v158 = 67176705;
                            *(_DWORD *)unint64_t v159 = v143;
                            *(_WORD *)&v159[4] = 1025;
                            *(_DWORD *)&v159[6] = v144;
                            LOWORD(v160) = 1025;
                            *(_DWORD *)((char *)&v160 + 2) = v145;
                            HIWORD(v160) = 1025;
                            int v161 = v146;
                            __int16 v162 = 2049;
                            *(double *)uint64_t v163 = v147;
                            *(_WORD *)&v163[8] = 2049;
                            uint64_t v164 = v148;
                            *(_WORD *)v165 = 1025;
                            *(_DWORD *)&v165[2] = v149;
                            *(_WORD *)unint64_t v166 = 1025;
                            *(_DWORD *)&v166[2] = v150;
                            *(_WORD *)int v167 = 1025;
                            *(_DWORD *)&v167[2] = v151;
                            unint64_t v152 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureTileAvailability::readAvlHelperData(FILE *, unsigned char *, CLPressureTileAvailabilityFile &, size_t &, size_t &)", "%s\n", v152);
                            if (v152 != (char *)&buf) {
                              free(v152);
                            }
                          }
                          return 1;
                        }
                        else
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_10233C1F0);
                          }
                          uint64_t v116 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(buf) = 0;
                            _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid availability file - crc", (uint8_t *)&buf, 2u);
                          }
                          BOOL v117 = sub_10013D1A0(115, 0);
                          uint64_t result = 0;
                          if (v117)
                          {
                            bzero(&buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_10233C1F0);
                            }
                            LOWORD(v158) = 0;
                            goto LABEL_28;
                          }
                        }
                      }
                      else
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_10233C1F0);
                        }
                        BOOL v114 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
                        {
                          LOWORD(buf) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - data size", (uint8_t *)&buf, 2u);
                        }
                        BOOL v115 = sub_10013D1A0(115, 0);
                        uint64_t result = 0;
                        if (v115)
                        {
                          bzero(&buf, 0x65CuLL);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_10233C1F0);
                          }
                          LOWORD(v158) = 0;
                          goto LABEL_28;
                        }
                      }
                    }
                    else
                    {
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10233C1F0);
                      }
                      int v109 = qword_102419388;
                      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(buf) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - expiration age", (uint8_t *)&buf, 2u);
                      }
                      BOOL v110 = sub_10013D1A0(115, 0);
                      uint64_t result = 0;
                      if (v110)
                      {
                        bzero(&buf, 0x65CuLL);
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_10233C1F0);
                        }
                        LOWORD(v158) = 0;
                        goto LABEL_28;
                      }
                    }
                  }
                  else
                  {
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_10233C1F0);
                    }
                    unint64_t v107 = qword_102419388;
                    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - timestamp", (uint8_t *)&buf, 2u);
                    }
                    BOOL v108 = sub_10013D1A0(115, 0);
                    uint64_t result = 0;
                    if (v108)
                    {
                      bzero(&buf, 0x65CuLL);
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10233C1F0);
                      }
                      LOWORD(v158) = 0;
                      goto LABEL_28;
                    }
                  }
                }
                else
                {
                  if (qword_102419380 != -1) {
                    dispatch_once(&qword_102419380, &stru_10233C1F0);
                  }
                  uint64_t v65 = qword_102419388;
                  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
                  {
                    double v66 = *(float *)(v156 + 140);
                    int buf = 134349056;
                    *(double *)v200 = v66;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,coarse avl file is not 0.05 deg by 0.05 deg,spacing unexpected,%{public}.1f,re-download needed", (uint8_t *)&buf, 0xCu);
                  }
                  BOOL v67 = sub_10013D1A0(115, 0);
                  uint64_t result = 0;
                  if (v67)
                  {
                    bzero(&buf, 0x65CuLL);
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_10233C1F0);
                    }
                    double v68 = *(float *)(v156 + 140);
                    int v158 = 134349056;
                    *(double *)unint64_t v159 = v68;
                    goto LABEL_28;
                  }
                }
              }
              else
              {
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10233C1F0);
                }
                unsigned int v82 = qword_102419388;
                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - binsize", (uint8_t *)&buf, 2u);
                }
                BOOL v83 = sub_10013D1A0(115, 0);
                uint64_t result = 0;
                if (v83)
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_102419380 != -1) {
                    dispatch_once(&qword_102419380, &stru_10233C1F0);
                  }
                  LOWORD(v158) = 0;
                  goto LABEL_28;
                }
              }
            }
            else
            {
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10233C1F0);
              }
              char v80 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - maxLat", (uint8_t *)&buf, 2u);
              }
              BOOL v81 = sub_10013D1A0(115, 0);
              uint64_t result = 0;
              if (v81)
              {
                bzero(&buf, 0x65CuLL);
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10233C1F0);
                }
                LOWORD(v158) = 0;
                goto LABEL_28;
              }
            }
          }
          else
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1F0);
            }
            int v78 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - minLat", (uint8_t *)&buf, 2u);
            }
            BOOL v79 = sub_10013D1A0(115, 0);
            uint64_t result = 0;
            if (v79)
            {
              bzero(&buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10233C1F0);
              }
              LOWORD(v158) = 0;
              goto LABEL_28;
            }
          }
        }
        else
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1F0);
          }
          int v76 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - headerLength", (uint8_t *)&buf, 2u);
          }
          BOOL v77 = sub_10013D1A0(115, 0);
          uint64_t result = 0;
          if (v77)
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10233C1F0);
            }
            LOWORD(v158) = 0;
            goto LABEL_28;
          }
        }
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        __int16 v74 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - version", (uint8_t *)&buf, 2u);
        }
        BOOL v75 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v75)
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10233C1F0);
          }
          LOWORD(v158) = 0;
          goto LABEL_28;
        }
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      uint64_t v72 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - invalid header string", (uint8_t *)&buf, 2u);
      }
      BOOL v73 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v73)
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10233C1F0);
        }
        LOWORD(v158) = 0;
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    __int16 v70 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#CLPDA,#Error,#AVL,invalid file - header string", (uint8_t *)&buf, 2u);
    }
    BOOL v71 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v71)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10233C1F0);
      }
      LOWORD(v158) = 0;
      goto LABEL_28;
    }
  }
  return result;
}

void sub_1017B9BD4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1017B9C04()
{
  if (qword_10248D848) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D848 + 8))(qword_10248D848);
  }
  if (qword_10248D850) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D850 + 8))(qword_10248D850);
  }
  if (qword_10248D858) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D858 + 8))(qword_10248D858);
  }
  uint64_t result = qword_10248D860;
  if (qword_10248D860) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)qword_10248D860 + 8))(qword_10248D860);
  }
  if (qword_10248D868)
  {
    if (*(char *)(qword_10248D868 + 23) < 0) {
      operator delete(*(void **)qword_10248D868);
    }
    operator delete();
  }
  return result;
}

void sub_1017B9D2C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102489050 & 1) == 0)
  {
    byte_102489050 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc", a4);
    operator new();
  }
}

void *sub_1017B9F3C(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &off_10233C220;
  return result;
}

uint64_t sub_1017B9F60(uint64_t result)
{
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)uint64_t result = off_10233C388;
  *(void *)(result + 8) = 0;
  uint64_t v1 = qword_10248D868;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(void *)(result + 72) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

double sub_1017B9F9C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248D848 + 8);
    }
    return sub_1017BA5A0(v5, v6);
  }
  return result;
}

void sub_1017BA094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017BA0AC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10233C220;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248D848 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1017BA13C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1017BA0AC(a1);

  operator delete();
}

uint64_t sub_1017BA174(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248D848;
  if (!qword_10248D848)
  {
    sub_1017B9D2C(0, a2, a3, a4);
    return qword_10248D848;
  }
  return result;
}

void sub_1017BA1A4()
{
}

uint64_t sub_1017BA1F0(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1017BA228(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_1017BA228(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 76);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 76))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(a1 + 76);
      }
    }
    *(void *)(a1 + 16) = 0;
    if ((v2 & 8) != 0)
    {
      std::string::size_type v4 = *(std::string **)(a1 + 24);
      if (v4 != (std::string *)qword_10248D868) {
        std::string::operator=(v4, (const std::string *)qword_10248D868);
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  uint64_t result = sub_10026DEDC(a1 + 48);
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t sub_1017BA2A0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      BOOL v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1017BB63C(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_1017BA47C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248D848 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_1017BA4A8(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248D848 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1017BBD68(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

double sub_1017BA518(uint64_t a1, void *lpsrc)
{
  return sub_1017B9F9C(a1, (uint64_t)lpsrc);
}

double sub_1017BA5A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), *(_DWORD *)(a2 + 56) + *(_DWORD *)(a1 + 56));
  if (*(int *)(a2 + 56) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 48) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 60);
      uint64_t v8 = *(int *)(a1 + 56);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), v7 + 1);
          int v7 = *(_DWORD *)(a1 + 60);
        }
        *(_DWORD *)(a1 + 60) = v7 + 1;
        operator new();
      }
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)(a1 + 56) = v8 + 1;
      double result = sub_1017BA900(*(void *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 56));
  }
  LOBYTE(v10) = *(unsigned char *)(a2 + 76);
  if (!(_BYTE)v10) {
    return result;
  }
  if (*(unsigned char *)(a2 + 76))
  {
    *(_DWORD *)(a1 + 76) |= 1u;
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = *(void *)(a2 + 8);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248D860 + 8);
    }
    double result = sub_1017BB144(v11, v12);
    int v10 = *(_DWORD *)(a2 + 76);
  }
  if ((v10 & 2) != 0)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    if (v13 >= 2) {
      sub_1017BBFB4();
    }
    *(_DWORD *)(a1 + 76) |= 2u;
    *(_DWORD *)(a1 + 16) = v13;
    int v10 = *(_DWORD *)(a2 + 76);
  }
  if ((v10 & 4) == 0)
  {
    if ((v10 & 8) == 0) {
      goto LABEL_23;
    }
LABEL_28:
    int v15 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 76) |= 8u;
    uint64_t v16 = *(std::string **)(a1 + 24);
    if (v16 == (std::string *)qword_10248D868) {
      operator new();
    }
    std::string::operator=(v16, v15);
    int v10 = *(_DWORD *)(a2 + 76);
    if ((v10 & 0x10) == 0)
    {
LABEL_24:
      if ((v10 & 0x20) == 0) {
        return result;
      }
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  int v14 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_DWORD *)(a1 + 20) = v14;
  int v10 = *(_DWORD *)(a2 + 76);
  if ((v10 & 8) != 0) {
    goto LABEL_28;
  }
LABEL_23:
  if ((v10 & 0x10) == 0) {
    goto LABEL_24;
  }
LABEL_31:
  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 76) |= 0x10u;
  *(double *)(a1 + 32) = result;
  if ((*(_DWORD *)(a2 + 76) & 0x20) != 0)
  {
LABEL_25:
    double result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(double *)(a1 + 40) = result;
  }
  return result;
}

void sub_1017BA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017BA87C()
{
  return 1;
}

void *sub_1017BA884@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ReferencePressure.LogEntry");
}

uint64_t sub_1017BA894(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10233C298;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  sub_1017BA900(a1, a2);
  return a1;
}

void sub_1017BA8EC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double sub_1017BA900(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 64);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 64))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 64) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 64);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_16;
      }
    }
    else if ((*(unsigned char *)(a2 + 64) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(double *)(a1 + 16) = result;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
LABEL_16:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(double *)(a1 + 24) = result;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
LABEL_17:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 8u;
    *(double *)(a1 + 32) = result;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
LABEL_18:
    unsigned int v6 = *(_DWORD *)(a2 + 56);
    if (v6 > 5 || v6 == 2) {
      sub_1017BBFE0();
    }
    *(_DWORD *)(a1 + 64) |= 0x10u;
    *(_DWORD *)(a1 + 56) = v6;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_10:
    double result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(double *)(a1 + 40) = result;
    int v5 = *(_DWORD *)(a2 + 64);
LABEL_11:
    if ((v5 & 0x40) != 0)
    {
      double result = *(double *)(a2 + 48);
      *(_DWORD *)(a1 + 64) |= 0x40u;
      *(double *)(a1 + 48) = result;
    }
  }
  return result;
}

void sub_1017BAA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017BAA80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10233C298;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1017BAAA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10233C298;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1017BAAF4()
{
}

uint64_t sub_1017BAB50(uint64_t result)
{
  if (*(unsigned char *)(result + 64))
  {
    *(_DWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_1017BAB74(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_36;
        }
        *(void *)uint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v19;
        }
        *(_DWORD *)(a1 + 64) |= 1u;
        uint64_t v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_36;
        }
LABEL_14:
        *(void *)uint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v19;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 25) {
          continue;
        }
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        *(void *)uint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0; {
        *(void *)(a1 + 24) = *(void *)v19;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 33) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
LABEL_24:
        *(void *)uint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v19;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v12 >= v11 || *v12 != 40) {
          continue;
        }
        unsigned int v13 = v12 + 1;
        *((void *)this + 1) = v13;
LABEL_30:
        v19[0] = 0;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v19);
          if (!result) {
            return result;
          }
          unsigned int v14 = v19[0];
        }
        else
        {
          unsigned int v14 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v14 <= 5 && v14 != 2)
        {
          *(_DWORD *)(a1 + 64) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v14;
        }
        unsigned int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 49) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_49:
        *(void *)uint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v19;
        }
        *(_DWORD *)(a1 + 64) |= 0x20u;
        uint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 57) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_53:
        *(void *)uint64_t v19 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v19))
        {
          *(void *)(a1 + 48) = *(void *)v19;
          *(_DWORD *)(a1 + 64) |= 0x40u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_36;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_24;
        }
        goto LABEL_36;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_36;
        }
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_30;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_49;
        }
        goto LABEL_36;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_36;
        }
        goto LABEL_53;
      default:
        int v7 = TagFallback & 7;
LABEL_36:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1017BAEF8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v5 + 40), a3);
    if ((*(_DWORD *)(v5 + 64) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 56), a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    return result;
  }
LABEL_15:
  double v7 = *(double *)(v5 + 48);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, v7, a3);
}

uint64_t sub_1017BAFF4(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned char *)(a1 + 64))
  {
    int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      int v5 = v4 + 9;
    }
    else {
      int v5 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        int v7 = 2;
      }
      v5 += v7;
    }
    unsigned int v9 = v5 + 9;
    if ((v3 & 0x20) == 0) {
      unsigned int v9 = v5;
    }
    if ((v3 & 0x40) != 0) {
      uint64_t result = v9 + 9;
    }
    else {
      uint64_t result = v9;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 60) = result;
  return result;
}

double sub_1017BB0A4(uint64_t a1, void *lpsrc)
{
  return sub_1017BA900(a1, (uint64_t)lpsrc);
}

uint64_t sub_1017BB12C()
{
  return 1;
}

void *sub_1017BB134@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureData");
}

double sub_1017BB144(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    double result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_1017BB1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017BB1E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10233C310;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1017BB208(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10233C310;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1017BB25C()
{
}

uint64_t sub_1017BB2A8(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1017BB2BC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 9) {
        break;
      }
      unint64_t v8 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0) {
        return 0;
      }
      *(void *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1017BB3B0(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(unsigned char *)(result + 20)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  }
  return result;
}

uint64_t sub_1017BB3C8(uint64_t a1)
{
  uint64_t v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_1017BB3E4(uint64_t a1, void *lpsrc)
{
  return sub_1017BB144(a1, (uint64_t)lpsrc);
}

uint64_t sub_1017BB46C()
{
  return 1;
}

void *sub_1017BB474@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureTimestamp");
}

void sub_1017BB484(uint64_t *a1)
{
  *a1 = (uint64_t)off_10233C388;
  int v2 = a1 + 6;
  sub_1017BB4E8(a1);
  sub_10016B2E8(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_1017BB4E8(void *result)
{
  uint64_t v1 = result[3];
  if (v1) {
    BOOL v2 = v1 == qword_10248D868;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  if ((void *)qword_10248D860 != result)
  {
    uint64_t result = (void *)result[1];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_1017BB5A0(uint64_t *a1)
{
  sub_1017BB484(a1);

  operator delete();
}

void sub_1017BB5D8()
{
}

uint64_t sub_1017BB63C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48);
  while (1)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 < *((void *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        *(_DWORD *)(a1 + 76) |= 1u;
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          operator new();
        }
        v44[0] = 0;
        int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44))return 0; {
        }
          }
        else
        {
          v44[0] = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v44[0]);
        if (!sub_1017BB2BC(v9, this, v19) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        uint64_t v23 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v23 >= v11 || *v23 != 16) {
          continue;
        }
        uint64_t v12 = v23 + 1;
        *((void *)this + 1) = v12;
        goto LABEL_38;
      case 2u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_38:
        v44[0] = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!result) {
            return result;
          }
          unsigned int v24 = v44[0];
        }
        else
        {
          unsigned int v24 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v24 <= 1)
        {
          *(_DWORD *)(a1 + 76) |= 2u;
          *(_DWORD *)(a1 + 16) = v24;
        }
        long long v26 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v26 >= v13 || *v26 != 24) {
          continue;
        }
        unsigned int v14 = v26 + 1;
        *((void *)this + 1) = v14;
LABEL_48:
        v44[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!result) {
            return result;
          }
          unsigned int v27 = v44[0];
          int v28 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int v27 = *v14;
          int v28 = v14 + 1;
          *((void *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 20) = v27;
        int v15 = *(_DWORD *)(a1 + 76) | 4;
        *(_DWORD *)(a1 + 76) = v15;
        if ((unint64_t)v28 >= v13 || *v28 != 34) {
          continue;
        }
        *((void *)this + 1) = v28 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 76) = v15 | 8;
        if (*(void *)(a1 + 24) == qword_10248D868) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v29 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 != 41) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_62:
        *(void *)int v44 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v44) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v44;
        }
        *(_DWORD *)(a1 + 76) |= 0x10u;
        uint64_t v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 49) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_66:
        *(void *)int v44 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v44) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v44;
        }
        *(_DWORD *)(a1 + 76) |= 0x20u;
        int v31 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v31 < *((void *)this + 2) && *v31 == 58)
        {
          do
          {
            *((void *)this + 1) = v31 + 1;
LABEL_70:
            int v32 = *(_DWORD *)(a1 + 60);
            uint64_t v33 = *(int *)(a1 + 56);
            if ((int)v33 >= v32)
            {
              if (v32 == *(_DWORD *)(a1 + 64))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v32 + 1);
                int v32 = *(_DWORD *)(a1 + 60);
              }
              *(_DWORD *)(a1 + 60) = v32 + 1;
              operator new();
            }
            uint64_t v34 = *(void *)(a1 + 48);
            *(_DWORD *)(a1 + 56) = v33 + 1;
            uint64_t v35 = *(void *)(v34 + 8 * v33);
            v44[0] = 0;
            int v36 = (char *)*((void *)this + 1);
            if ((unint64_t)v36 >= *((void *)this + 2) || *v36 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44))return 0; {
            }
              }
            else
            {
              v44[0] = *v36;
              *((void *)this + 1) = v36 + 1;
            }
            int v37 = *((_DWORD *)this + 14);
            int v38 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v37 + 1;
            if (v37 >= v38) {
              return 0;
            }
            int v39 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v44[0]);
            if (!sub_1017BAB74(v35, this, v40) || !*((unsigned char *)this + 36)) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v39);
            int v41 = *((_DWORD *)this + 14);
            BOOL v21 = __OFSUB__(v41, 1);
            int v42 = v41 - 1;
            if (v42 < 0 == v21) {
              *((_DWORD *)this + 14) = v42;
            }
            int v31 = (unsigned char *)*((void *)this + 1);
            size_t v43 = (unsigned char *)*((void *)this + 2);
          }
          while (v31 < v43 && *v31 == 58);
          if (v31 == v43 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
        }
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        unsigned int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_48;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v15 = *(_DWORD *)(a1 + 76);
        goto LABEL_56;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_62;
        }
        goto LABEL_26;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_66;
        }
        goto LABEL_26;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        goto LABEL_70;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_1017BBC10()
{
}

uint64_t sub_1017BBC50(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 76);
  if (v6)
  {
    uint64_t v8 = *(void *)(result + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D860 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v8, a2, a4);
    int v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 32), a3);
  if ((*(_DWORD *)(v5 + 76) & 0x20) != 0) {
LABEL_7:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
LABEL_8:
  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(void *)(*(void *)(v5 + 48) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 56));
  }
  return result;
}

uint64_t sub_1017BBD68(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 76);
  if (!*(unsigned char *)(a1 + 76)) {
    goto LABEL_37;
  }
  if ((v3 & 1) == 0)
  {
    int v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248D860 + 8);
  }
  int v6 = ((int)(*(_DWORD *)(v5 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v5 + 16) = v6;
  int v4 = v6 | 2;
  int v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 2) != 0)
  {
LABEL_8:
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      int v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 76);
    }
    else
    {
      int v8 = 2;
    }
    v4 += v8;
  }
LABEL_14:
  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 76);
    }
    else
    {
      int v10 = 2;
    }
    v4 += v10;
    if ((v3 & 8) == 0) {
      goto LABEL_32;
    }
LABEL_23:
    uint64_t v11 = *(void *)(a1 + 24);
    int v12 = *(unsigned __int8 *)(v11 + 23);
    char v13 = v12;
    uint64_t v14 = *(void *)(v11 + 8);
    if ((v12 & 0x80u) == 0) {
      unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, a2);
      int v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v14 = *(void *)(v11 + 8);
      int v3 = *(_DWORD *)(a1 + 76);
      char v13 = *(unsigned char *)(v11 + 23);
    }
    else
    {
      int v16 = 1;
    }
    if (v13 < 0) {
      int v12 = v14;
    }
    v4 += v16 + v12 + 1;
    goto LABEL_32;
  }
  if ((v3 & 8) != 0) {
    goto LABEL_23;
  }
LABEL_32:
  int v17 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    int v17 = v4;
  }
  if ((v3 & 0x20) != 0) {
    int v3 = v17 + 9;
  }
  else {
    int v3 = v17;
  }
LABEL_37:
  int v18 = *(_DWORD *)(a1 + 56);
  uint64_t v19 = (v18 + v3);
  if (v18 >= 1)
  {
    uint64_t v20 = 0;
    do
    {
      BOOL v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1017BAFF4(*(void *)(*(void *)(a1 + 48) + 8 * v20), a2);
      int v22 = (int)v21;
      if (v21 >= 0x80) {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      }
      else {
        int v23 = 1;
      }
      uint64_t v19 = (v22 + v19 + v23);
      ++v20;
    }
    while (v20 < *(int *)(a1 + 56));
  }
  *(_DWORD *)(a1 + 72) = v19;
  return v19;
}

double sub_1017BBF14(uint64_t a1, void *lpsrc)
{
  return sub_1017BA5A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1017BBF9C()
{
  return 1;
}

void *sub_1017BBFA4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureTile");
}

void sub_1017BBFB4()
{
}

void sub_1017BBFE0()
{
}

void sub_1017BC010(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", [objc_alloc((Class)CLDispatchSilo) initWithUnderlyingQueue:a2]);
  v7[0] = off_10233C6F8;
  v7[1] = a1;
  v7[3] = v7;
  sub_1018D63BC(a1 + 200);
  sub_1017C6FF0(v7);
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 513) = a4;
  *(unsigned char *)(a1 + 514) = a3;
  *(unsigned char *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 532) = 255;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 549) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  sub_1018C7500(a1 + 608, *(void *)(a1 + 192));
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  sub_1017C7074((void *)(a1 + 896));
}

void sub_1017BC500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v17 = *v15;
  uint64_t *v15 = 0;
  if (v17) {
    sub_1017C6CD8((uint64_t)v15, v17);
  }
  sub_1000FA7C8((void ***)va);
  int v18 = *(std::__shared_weak_count **)(v11 + 856);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  sub_1017C765C(v14, 0);
  sub_1018C755C(v13);
  if (*(char *)(v11 + 607) < 0) {
    operator delete(*(void **)(v11 + 584));
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v11 + 568);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  sub_1017BC9D8(v12);
  sub_1017C75D8((void *)(v11 + 160));
  sub_1017C7554((void *)(v11 + 128));
  sub_1017C74D0((void *)(v11 + 96));
  sub_1017C744C((void *)(v11 + 64));
  sub_1017C73C8((void *)(v11 + 32));
  sub_1017C7344((void *)v11);
  _Unwind_Resume(a1);
}

void sub_1017BC63C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1017BC688(v1);
  BOOL v2 = (void *)(v1 + 584);
  if (*(char *)(v1 + 607) < 0) {
    BOOL v2 = (void *)*v2;
  }

  sub_1017BC77C(v1, (uint64_t)v2);
}

id sub_1017BC688(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  BOOL v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,#bb.e,clearQmiPdsErrorRecovery\"}", (uint8_t *)v4, 0x12u);
  }
  *(unsigned char *)(a1 + 554) = 0;
  *(_WORD *)(a1 + 552) = 0;
  return [*(id *)(a1 + 576) setNextFireDelay:1.79769313e308];
}

void sub_1017BC77C(uint64_t a1, uint64_t a2)
{
  if (sub_100D33A54(a1 + 532))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,Cannot reset during emergency, scheduling reinit at end of call\"}", (uint8_t *)&v7, 0x12u);
    }
    *(unsigned char *)(a1 + 552) = 1;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#tb,#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
    }
    int v6 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#tb,#bb.e,Reset device", "{\"msg%{public}.0s\":\"#tb,#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
    }
    sub_1018D4B10(a1 + 200);
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 192), "vendor"), "proxyForService:", @"CLTelephonyService"), "resetModemWithReason:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)];
  }
}

uint64_t sub_1017BC9D8(void *a1)
{
  *a1 = off_10233C6A0;
  BOOL v2 = (std::__shared_weak_count *)a1[34];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1018D046C((uint64_t)a1);
}

id sub_1017BCA38(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 528);
  *(unsigned char *)(a1 + 528) = 1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 528);
    v6[0] = 68289794;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    int v10 = "onConnected";
    __int16 v11 = 1026;
    int v12 = v2 ^ 1;
    __int16 v13 = 1026;
    int v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,onConnected\", \"event\":%{public, location:escape_only}s, \"wasDisconnected\":%{public}hhd, \"fConnected\":%{public}hhd}", (uint8_t *)v6, 0x28u);
  }
  if (!v2) {
    sub_1017BCB68(a1);
  }
  return sub_1017BC688(a1);
}

void sub_1017BCB68(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#tb,postInitConfig", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::postInitConfig()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 896) + 7)) {
    sub_1017BE110(a1, 0);
  }
  else {
    sub_1017BE334(a1, 0);
  }
  if (*(unsigned char *)(sub_1017BE0C0((void *)(a1 + 896), 1) + 7)) {
    sub_1017BE110(a1, 1);
  }
  else {
    sub_1017BE334(a1, 1);
  }
  if (*(unsigned char *)(a1 + 513)) {
    sub_1017BD004(a1);
  }
}

id sub_1017BCD68(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 528);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 2082;
    __int16 v9 = "onDisConnected";
    __int16 v10 = 1026;
    int v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,onDisConnected\", \"event\":%{public, location:escape_only}s, \"fConnected\":%{public}hhd}", (uint8_t *)v5, 0x22u);
  }
  *(unsigned char *)(a1 + 528) = 0;
  return sub_1017BC688(a1);
}

uint64_t sub_1017BCE70(uint64_t a1)
{
  uint64_t v2 = a1 + 200;
  v11[3] = 0;
  sub_1018D0594(a1 + 200, 1, (uint64_t)v11);
  sub_10068280C(v11);
  v10[3] = 0;
  sub_1018D0594(v2, 0, (uint64_t)v10);
  sub_10068280C(v10);
  v9[3] = 0;
  sub_1018D066C(v2, (uint64_t)v9);
  sub_1017C6FF0(v9);

  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 912) = 0;
  uint64_t v3 = *(void *)(a1 + 896);
  *(void *)(a1 + 896) = 0;
  if (v3) {
    sub_1017C6CD8(a1 + 896, v3);
  }
  __int16 v8 = (void **)(a1 + 872);
  sub_1000FA7C8(&v8);
  int v4 = *(std::__shared_weak_count **)(a1 + 856);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1017C765C((qmi::Client **)(a1 + 840), 0);
  sub_1018C755C(a1 + 608);
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 568);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  *(void *)(a1 + 200) = off_10233C6A0;
  __int16 v6 = *(std::__shared_weak_count **)(a1 + 472);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_1018D046C(v2);
  sub_1017C75D8((void *)(a1 + 160));
  sub_1017C7554((void *)(a1 + 128));
  sub_1017C74D0((void *)(a1 + 96));
  sub_1017C744C((void *)(a1 + 64));
  sub_1017C73C8((void *)(a1 + 32));
  sub_1017C7344((void *)a1);
  return a1;
}

void sub_1017BCFF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1017BD004(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 513)) {
    uint64_t v1 = 2;
  }
  else {
    uint64_t v1 = 2 * *(unsigned __int8 *)(a1 + 514);
  }
  v3[0] = off_10233C9D8;
  v3[1] = v1;
  v3[3] = v3;
  sub_1018D6764(a1 + 200, (uint64_t)v3);
  return sub_1017C825C(v3);
}

void sub_1017BD0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1017BD0B8(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = a2[5];
    int v6 = a2[6];
    int v7 = a2[2];
    *(_DWORD *)int buf = 67240704;
    int v21 = v5;
    __int16 v22 = 1026;
    int v23 = v6;
    __int16 v24 = 1026;
    int v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,sendLocation,posProtocol,%{public}d,sessionId,%{public}d,result,%{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v9 = a2[5];
    int v10 = a2[6];
    int v11 = a2[2];
    int v14 = 67240704;
    int v15 = v9;
    __int16 v16 = 1026;
    int v17 = v10;
    __int16 v18 = 1026;
    int v19 = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  v13[0] = off_10233CAA8;
  v13[1] = a2;
  void v13[3] = v13;
  sub_1018D6764(a1 + 200, (uint64_t)v13);
  return sub_1017C825C(v13);
}

void sub_1017BD2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1017BD2F4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1017BD55C;
  v8[3] = &unk_10233C458;
  v8[5] = &v13;
  v8[6] = a1;
  v8[4] = &v17;
  *(void *)int buf = v8;
  sub_1017C8CB0(a2, 1, (uint64_t)buf);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1017BD6B0;
  v7[3] = &unk_10233C480;
  void v7[4] = &v9;
  *(void *)int buf = v7;
  sub_1017C8D58(a2, 16, (uint64_t)buf);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *((unsigned __int8 *)v18 + 24);
    int v5 = *((unsigned __int8 *)v14 + 24);
    uint64_t v6 = v10[3];
    *(void *)int buf = 68289794;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 1026;
    int v25 = v4;
    __int16 v26 = 1026;
    int v27 = v5;
    __int16 v28 = 1026;
    int v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,PdsServiceState\", \"unlock\":%{public}hhd, \"trackingState\":%{public}d, \"allowedServices\":%{public}d}", buf, 0x24u);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1017BD528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1017BD55C(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *a2;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a2[1];
  if (*(unsigned char *)(v2 + 512)
    && (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24) || *(unsigned char *)(*(void *)(a1[5] + 8) + 24) != 2))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      int v6 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
      v7[0] = 68289538;
      v7[1] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 1026;
      int v11 = v5;
      __int16 v12 = 1026;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,#trkstate,service state indication hints tracking state mismatch\", \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)v7, 0x1Eu);
    }
  }
}

uint64_t sub_1017BD6B0(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t sub_1017BD6C4(uint64_t a1, qmi::Client *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289026;
    __int16 v13 = 2082;
    int v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#bb.e,Register PDS\"}", (uint8_t *)&buf, 0x12u);
  }
  *(unsigned char *)(a1 + 554) = 0;
  v11[0] = off_10233CBA0;
  v11[1] = a1;
  v11[3] = v11;
  sub_1017BD9A0(a1, (uint64_t)a2, (uint64_t)v11);
  sub_1017C91FC(v11);
  v10[0] = off_10233CC60;
  v10[1] = a1;
  v10[3] = v10;
  sub_1017BDAD0(a1, (uint64_t)a2, (uint64_t)v10);
  sub_1017C967C(v10);
  v9[0] = off_10233CD20;
  v9[1] = a1;
  v9[3] = v9;
  sub_1017BDC00(a1, (uint64_t)a2, (uint64_t)v9);
  sub_1017C9AFC(v9);
  v8[0] = off_10233CDE0;
  v8[1] = a1;
  v8[3] = v8;
  sub_1017BDD30(a1, (uint64_t)a2, (uint64_t)v8);
  sub_1017C9F7C(v8);
  v7[0] = off_10233CEA0;
  v7[1] = a1;
  v7[3] = v7;
  sub_1017BDE60(a1, (uint64_t)a2, (uint64_t)v7);
  sub_1017CA3F8(v7);
  v6[0] = off_10233CF60;
  v6[1] = a1;
  void v6[3] = v6;
  sub_1017BDF90(a1, (uint64_t)a2, (uint64_t)v6);
  sub_1017CA878(v6);
  sub_100103240();
  uint64_t result = sub_10073E3D4();
  if (result) {
    return qmi::Client::setIndShouldWake(a2);
  }
  return result;
}

void sub_1017BD934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1017BD9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017C9084((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017C91FC(v4);
}

void sub_1017BDAB4(_Unwind_Exception *a1)
{
  sub_1017C91FC(v1);
  _Unwind_Resume(a1);
}

void *sub_1017BDAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017C9504((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017C967C(v4);
}

void sub_1017BDBE4(_Unwind_Exception *a1)
{
  sub_1017C967C(v1);
  _Unwind_Resume(a1);
}

void *sub_1017BDC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017C9984((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017C9AFC(v4);
}

void sub_1017BDD14(_Unwind_Exception *a1)
{
  sub_1017C9AFC(v1);
  _Unwind_Resume(a1);
}

void *sub_1017BDD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017C9E04((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017C9F7C(v4);
}

void sub_1017BDE44(_Unwind_Exception *a1)
{
  sub_1017C9F7C(v1);
  _Unwind_Resume(a1);
}

void *sub_1017BDE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017CA284((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017CA3F8(v4);
}

void sub_1017BDF74(_Unwind_Exception *a1)
{
  sub_1017CA3F8(v1);
  _Unwind_Resume(a1);
}

void *sub_1017BDF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017CA700((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017CA878(v4);
}

void sub_1017BE0A4(_Unwind_Exception *a1)
{
  sub_1017CA878(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017BE0C0(void *a1, int a2)
{
  if (a2 && (a2 != 1 || (sub_1000FFBA8() & 1) == 0)) {
    sub_1017CF27C();
  }
  return *a1 + 1336 * (a2 != 0);
}

id sub_1017BE110(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,Supl,enableSupl", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233C6C8);
    }
    __int16 v10 = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::enableSupl(CLTelephonyService_Type::SimInstance)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a2 == 1) {
    int v5 = 1;
  }
  else {
    int v5 = -1;
  }
  if (a2) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v6 != -1)
  {
    *(void *)uint64_t buf = 0;
    __int16 v12 = 0;
    uint64_t v13 = 0;
    uint64_t v7 = sub_1017BE0C0((void *)(a1 + 896), a2);
    sub_1004BF998((int)&v10, (unint64_t *)buf, (unsigned __int8 *)(v7 + 968));
    sub_1017C51C0(a1, v6, (uint64_t)buf);
    if (*(void *)buf)
    {
      __int16 v12 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  return sub_1017C5480(a1, a2);
}

void sub_1017BE310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017BE334(uint64_t a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,Supl,disableSupl", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233C6C8);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::disableSupl(CLTelephonyService_Type::SimInstance)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a2 == 1) {
    int v5 = 1;
  }
  else {
    int v5 = -1;
  }
  if (!a2) {
    int v5 = 0;
  }
  if (v5 != -1) {
    sub_1017C56A4(a1, v5);
  }
}

void sub_1017BE4F0(uint64_t a1, char *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2082;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,InitError\", \"error\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  sub_1017BE5F0(a1, a2, 0);
}

void sub_1017BE5F0(uint64_t a1, char *a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  __int16 v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)__int16 v12 = 68289282;
    *(_WORD *)&v12[8] = 2082;
    *(void *)&v12[10] = "";
    *(_WORD *)&v12[18] = 2082;
    *(void *)&v12[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#bb.e,handleQmiPdsError\", \"error\":%{public, location:escape_only}s}", v12, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 554))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)__int16 v12 = 68289026;
      *(_WORD *)&v12[8] = 2082;
      *(void *)&v12[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,ErrorHandlingInProgress\"}", v12, 0x12u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 554) = 1;
    if (sub_100D33A54(a1 + 532))
    {
      if (a3 == 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233C670);
        }
        __int16 v8 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__int16 v12 = 68289026;
          *(_WORD *)&v12[8] = 2082;
          *(void *)&v12[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,InEmergency,restart@OnEmergencyExit\"}", v12, 0x12u);
        }
        *(unsigned char *)(a1 + 553) = 1;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233C670);
        }
        int v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__int16 v12 = 68289026;
          *(_WORD *)&v12[8] = 2082;
          *(void *)&v12[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,InEmergency,reinit@OnEmergencyExit\"}", v12, 0x12u);
        }
        *(unsigned char *)(a1 + 552) = 1;
      }
    }
    else
    {
      sub_100134750(v12, a2);
      uint64_t v9 = (void **)(a1 + 584);
      if (*(char *)(a1 + 607) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v12;
      *(void *)(a1 + 600) = *(void *)&v12[16];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      __int16 v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)__int16 v12 = 68289282;
        *(_WORD *)&v12[8] = 2082;
        *(void *)&v12[10] = "";
        *(_WORD *)&v12[18] = 1026;
        *(_DWORD *)&v12[20] = 18;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,NotInEmergency,deferring Reset\", \"delay\":%{public}d}", v12, 0x18u);
      }
      [*(id *)(a1 + 576) setNextFireDelay:18.0];
    }
  }
}

uint64_t sub_1017BE978(uint64_t a1, qmi::MessageBase *a2)
{
  long long v68 = 0u;
  long long v67 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  char v66 = 0;
  int v69 = 1;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  char v73 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v74 = _Q1;
  char v75 = 0;
  long long v76 = _Q1;
  char v77 = 0;
  long long v78 = _Q1;
  char v79 = 0;
  uint64_t v82 = 0;
  memset(v81, 0, sizeof(v81));
  long long v80 = 0u;
  int v83 = 1065353216;
  uint64_t v84 = 0x100000005;
  uint64_t v85 = 0;
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_1017BF058;
  v62[3] = &unk_1022ACDD8;
  v62[4] = a1;
  int v25 = v62;
  sub_1017CA8FC(a2, 26, (uint64_t)&v25);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_1017BF1E4;
  v61[3] = &unk_10233C4A0;
  v61[4] = a1;
  int v25 = v61;
  sub_1017C8CB0(a2, 27, (uint64_t)&v25);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_1017BF3BC;
  v60[3] = &unk_10233C4C0;
  v60[4] = a1;
  int v25 = v60;
  sub_1017CACF0(a2, 39, (uint64_t)&v25);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_1017BF5C4;
  v59[3] = &unk_10233C4E0;
  v59[4] = a1;
  int v25 = v59;
  sub_1017CACF0(a2, 40, (uint64_t)&v25);
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472;
  v58[2] = sub_1017BF77C;
  v58[3] = &unk_10233C500;
  v58[4] = a1;
  int v25 = v58;
  sub_1017CACF0(a2, 50, (uint64_t)&v25);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_1017BFA40;
  v57[3] = &unk_10233C520;
  v57[4] = a1;
  int v25 = v57;
  sub_1017CAD98(a2, 19, &v25);
  int v25 = 0;
  __int16 v26 = &v25;
  uint64_t v27 = 0x11012000000;
  __int16 v28 = sub_10017803C;
  int v29 = sub_100177780;
  uint64_t v30 = "";
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v32 = 0;
  char v36 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  int v37 = 0;
  char v40 = 9;
  int v44 = 0;
  uint64_t v45 = 0;
  size_t v43 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  __int16 v46 = -1;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  int v48 = 0;
  char v50 = -1;
  uint64_t v53 = 0;
  int v54 = 0;
  std::string __p = 0;
  int v52 = 0;
  __int16 v55 = 255;
  uint64_t v56 = 0;
  uint64_t v35 = 0xFFFFFFFFLL;
  int v31 = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1017BFE94;
  v23[3] = &unk_10233C548;
  v23[4] = &v25;
  __int16 v24 = v23;
  sub_1017CACF0(a2, 43, (uint64_t)&v24);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1017BFFA8;
  v22[3] = &unk_10233C570;
  v22[4] = &v25;
  __int16 v24 = v22;
  sub_1017CACF0(a2, 41, (uint64_t)&v24);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1017C00BC;
  v21[3] = &unk_10233C598;
  v21[4] = &v25;
  __int16 v24 = v21;
  sub_1017CAE68(a2, 42, (uint64_t)&v24);
  __int16 v8 = v26;
  *((_WORD *)v26 + 130) = 255;
  *((_DWORD *)v8 + 64) = 255;
  v8[33] = 0;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1017C01D8;
  v20[3] = &unk_10233C5C0;
  v20[4] = &v25;
  v20[5] = a1;
  __int16 v24 = v20;
  sub_1017CACF0(a2, 55, (uint64_t)&v24);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  unsigned int v19[2] = sub_1017C0204;
  v19[3] = &unk_10233C5E8;
  v19[4] = &v25;
  __int16 v24 = v19;
  sub_1017C8D58(a2, 54, (uint64_t)&v24);
  int v9 = *((_DWORD *)v26 + 64);
  if (v9 == 1) {
    int v10 = 1;
  }
  else {
    int v10 = 255;
  }
  if (v9 == 1) {
    char v11 = 1;
  }
  else {
    char v11 = -1;
  }
  _ZF = v9 == 0;
  if (v9) {
    char v13 = v11;
  }
  else {
    char v13 = 0;
  }
  *((unsigned char *)v26 + 260) = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1017C0228;
  v17[3] = &unk_10233C610;
  if (_ZF) {
    int v14 = 0;
  }
  else {
    int v14 = v10;
  }
  v17[4] = &v25;
  v17[5] = a1;
  int v18 = v14;
  __int16 v24 = v17;
  sub_1017CAFD0(a2, 25, (uint64_t)&v24);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1017C0B8C;
  v16[3] = &unk_10233C630;
  v16[4] = a1;
  __int16 v24 = v16;
  sub_1017CACF0(a2, 49, (uint64_t)&v24);
  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    int v52 = __p;
    operator delete(__p);
  }
  if (v47)
  {
    int v48 = v47;
    operator delete(v47);
  }
  if (v43)
  {
    int v44 = v43;
    operator delete(v43);
  }
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  return sub_10071874C((uint64_t)&v81[8]);
}

void sub_1017BEFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  sub_1017BFE20(v49 + 48);
  sub_10071874C((uint64_t)&STACK[0x438]);
  _Unwind_Resume(a1);
}

void sub_1017BF05C()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#tb,Recvd UmtsCpNetworkPrompt", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleUmtsCpNetworkPrompt(const pds::tlv::umtsCpNetworkPrompt &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1017BF1E8(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a2[1];
    int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67240448;
    int v8 = v4;
    __int16 v9 = 1026;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Cplane,#tb,Recvd CommEvent,protocol,%{public}d,type,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleCommEvent(const pds::tlv::commEvent &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1017BF3BC(uint64_t a1, int *a2)
{
}

void sub_1017BF3C4(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,Recvd tlv::resetState,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleResetState(const pds::tlv::resetState &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(void *)uint64_t buf = 0;
  if (*(unsigned char *)(a1 + 513) || *(unsigned char *)(a1 + 514))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v6 + 48))(v6, buf);
  }
}

void sub_1017BF5C8(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#tb,Recvd tlv::sessionEndReason,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleSessionEndReason(const pds::tlv::sessionEndReason &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1017BF77C(uint64_t a1, int *a2)
{
}

void sub_1017BF784(uint64_t a1, int *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1019BCAD4(*a2, __p);
    int v5 = v17 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,EmergencyEvent,%{public}s", buf, 0xCu);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233C6C8);
    }
    sub_1019BCAD4(*a2, buf);
    if (v12 >= 0) {
      __int16 v9 = buf;
    }
    else {
      __int16 v9 = *(unsigned char **)buf;
    }
    int v13 = 136446210;
    int v14 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    if (v12 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleEmergencyEvent(const pds::tlv::emergencyEvent &)", "%s\n", v10);
    if (v10 != __p) {
      free(v10);
    }
  }
  int v6 = *a2;
  if (*a2 > 8 || ((1 << v6) & 0x1E9) == 0)
  {
    *(void *)&__p[4] = -1;
    int v16 = -1;
    *(_DWORD *)std::string __p = *(_DWORD *)(a1 + 908);
    unsigned int v7 = v6 - 1;
    if (v7 <= 9 && ((0x30Bu >> v7) & 1) != 0) {
      int v17 = dword_101E3601C[v7];
    }
    uint64_t v8 = *(void *)(a1 + 184);
    if (!v8) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 48))(v8, __p);
  }
}

void sub_1017BFA40(uint64_t a1, int *a2)
{
}

void sub_1017BFA48(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)((char *)a2 + 15);
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)((char *)a2 + 27);
    uint64_t v8 = *(void *)((char *)a2 + 35);
    double v9 = *(float *)((char *)a2 + 43);
    double v10 = *(float *)((char *)a2 + 63);
    double v11 = *(float *)((char *)a2 + 67);
    double v12 = *(float *)((char *)a2 + 71);
    double v13 = *(float *)((char *)a2 + 51);
    double v14 = *(float *)((char *)a2 + 83);
    int v15 = *((unsigned __int8 *)a2 + 91);
    int v16 = *((unsigned __int8 *)a2 + 104);
    *(_DWORD *)uint64_t buf = 68292099;
    int v28 = 0;
    __int16 v29 = 2082;
    uint64_t v30 = "";
    __int16 v31 = 2049;
    uint64_t v32 = v5;
    __int16 v33 = 2049;
    uint64_t v34 = v6;
    __int16 v35 = 2049;
    uint64_t v36 = v7;
    __int16 v37 = 2049;
    uint64_t v38 = v8;
    __int16 v39 = 2049;
    double v40 = v9;
    __int16 v41 = 2050;
    double v42 = v10;
    __int16 v43 = 2050;
    double v44 = v11;
    __int16 v45 = 2050;
    double v46 = v12;
    __int16 v47 = 2050;
    double v48 = v13;
    __int16 v49 = 2050;
    double v50 = v14;
    __int16 v51 = 1026;
    int v52 = v15;
    __int16 v53 = 1026;
    int v54 = v16;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,PositionDataEvent\", \"utc\":%{private}lld, \"valid\":%{private}ld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"horAcc\":\"%{public}f\", \"uncMaj\":\"%{public}f\", \"uncMinor\":\"%{public}f\", \"horzSpeed\":\"%{public}f\", \"horzSpeedUnc\":\"%{public}f\", \"horzConf\":%{public}d, \"fixMode\":%{public}d}", buf, 0x82u);
    int v17 = *((unsigned __int8 *)a2 + 104);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
  }
  else
  {
    int v17 = *((unsigned __int8 *)a2 + 104);
  }
  int v18 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v28 = 0;
    __int16 v29 = 2082;
    uint64_t v30 = "";
    __int16 v31 = 1026;
    LODWORD(v32) = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,PositionDataEvent\", \"mode\":%{public}d}", buf, 0x18u);
  }
  if (v17 == 1 && (*(unsigned char *)(a1 + 513) || *(unsigned char *)(a1 + 514)))
  {
    uint64_t v24 = -1;
    int v25 = -1;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233C6C8);
    }
    uint64_t v19 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#tb,simulator/conformance mode, send cplane end indication", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233C6C8);
      }
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleParsedPositionData(const pds::tlv::parsedPositionData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    int v20 = *(_DWORD *)(a1 + 908);
    int v26 = 1;
    int v23 = v20;
    uint64_t v21 = *(void *)(a1 + 184);
    if (!v21) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, int *))(*(void *)v21 + 48))(v21, &v23);
  }
}

uint64_t sub_1017BFE20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 112);
  if (v4)
  {
    *(void *)(a1 + 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1017BFE94(uint64_t a1, _DWORD *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 49) = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) = *a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  uint64_t v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 80);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,SuplInitSource\", \"suplinitsource\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_1017BFFA8(uint64_t a1, _DWORD *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 50) = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 84) = *a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  uint64_t v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 84);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,suplTriggerType\", \"supltriggertype\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_1017C00BC(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = 1;
  std::string::operator=((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 56), a2);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  uint64_t v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (void *)(v4 + 56);
    if (*(char *)(v4 + 79) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2082;
    double v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,suplEmergencyNotification\", \"suplemergencynotification\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
}

uint64_t sub_1017C01D8(uint64_t result, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(result + 40);
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 256) = *a2;
  if (v2 == 1) {
    int v4 = 1;
  }
  else {
    int v4 = 255;
  }
  if (v2) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(v3 + 908) = v5;
  return result;
}

uint64_t sub_1017C0204(uint64_t result, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 261) = 1;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 264) = *a2;
  return result;
}

void *sub_1017C0228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  uint64_t v104 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 51) = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 88) = *(_DWORD *)a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 92) = *(unsigned char *)(a2 + 4);
  do
  {
    int v5 = *(void **)(*(void *)(v3 + 32) + 8);
    uint64_t v6 = *(void *)(a2 + 8) >> (8 * v4);
    __int16 v8 = (unsigned char *)v5[13];
    unint64_t v7 = v5[14];
    if ((unint64_t)v8 >= v7)
    {
      unint64_t v10 = v5[12];
      double v11 = &v8[-v10];
      uint64_t v12 = (uint64_t)&v8[-v10 + 1];
      if (v12 < 0) {
LABEL_115:
      }
        sub_1001D7FD4();
      unint64_t v13 = v7 - v10;
      if (2 * v13 > v12) {
        uint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        int v15 = (char *)operator new(v14);
      }
      else {
        int v15 = 0;
      }
      int v16 = &v11[(void)v15];
      int v17 = &v11[(void)v15];
      unsigned char *v17 = v6;
      __int16 v9 = v17 + 1;
      if (v8 != (unsigned char *)v10)
      {
        int v18 = &v8[~v10];
        do
        {
          char v19 = *--v8;
          (v18--)[(void)v15] = v19;
        }
        while (v8 != (unsigned char *)v10);
        __int16 v8 = (unsigned char *)v5[12];
        int v16 = v15;
      }
      v5[12] = v16;
      v5[13] = v9;
      v5[14] = &v15[v14];
      uint64_t v3 = a1;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      unsigned char *v8 = v6;
      __int16 v9 = v8 + 1;
    }
    v5[13] = v9;
    ++v4;
  }
  while (v4 != 8);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 120) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 124) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 128) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 132) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 136) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 140) = *(_OWORD *)(a2 + 36);
  if (*(char *)(a2 + 79) >= 0) {
    size_t v20 = *(unsigned __int8 *)(a2 + 79);
  }
  else {
    size_t v20 = *(void *)(a2 + 64);
  }
  sub_10008AB10((unint64_t *)(*(void *)(*(void *)(v3 + 32) + 8) + 160), v20);
  BOOL v21 = *(char *)(a2 + 79) < 0;
  uint64_t v22 = *(unsigned __int8 *)(a2 + 79);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 64);
  }
  if (v22)
  {
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = *(void **)(*(void *)(v3 + 32) + 8);
      if (v21) {
        uint64_t v25 = *(void *)(a2 + 56);
      }
      else {
        uint64_t v25 = a2 + 56;
      }
      char v26 = *(unsigned char *)(v25 + v23);
      int v28 = (unsigned char *)v24[21];
      unint64_t v27 = v24[22];
      if ((unint64_t)v28 >= v27)
      {
        unint64_t v30 = v24[20];
        __int16 v31 = &v28[-v30];
        uint64_t v32 = (uint64_t)&v28[-v30 + 1];
        if (v32 < 0) {
          goto LABEL_115;
        }
        unint64_t v33 = v27 - v30;
        if (2 * v33 > v32) {
          uint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v34 = v32;
        }
        if (v34) {
          __int16 v35 = (char *)operator new(v34);
        }
        else {
          __int16 v35 = 0;
        }
        uint64_t v36 = &v31[(void)v35];
        __int16 v37 = &v31[(void)v35];
        *__int16 v37 = v26;
        __int16 v29 = v37 + 1;
        if (v28 != (unsigned char *)v30)
        {
          uint64_t v38 = &v28[~v30];
          do
          {
            char v39 = *--v28;
            (v38--)[(void)v35] = v39;
          }
          while (v28 != (unsigned char *)v30);
          int v28 = (unsigned char *)v24[20];
          uint64_t v36 = v35;
        }
        v24[20] = v36;
        v24[21] = v29;
        v24[22] = &v35[v34];
        uint64_t v3 = a1;
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        unsigned char *v28 = v26;
        __int16 v29 = v28 + 1;
      }
      v24[21] = v29;
      ++v23;
      BOOL v21 = *(char *)(a2 + 79) < 0;
      unint64_t v40 = *(unsigned __int8 *)(a2 + 79);
      if ((v40 & 0x80u) != 0) {
        unint64_t v40 = *(void *)(a2 + 64);
      }
    }
    while (v40 > v23);
  }
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 184) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 185) = *(unsigned char *)(a2 + 81);
  if (*(char *)(a2 + 111) >= 0) {
    size_t v41 = *(unsigned __int8 *)(a2 + 111);
  }
  else {
    size_t v41 = *(void *)(a2 + 96);
  }
  sub_10008AB10((unint64_t *)(*(void *)(*(void *)(v3 + 32) + 8) + 192), v41);
  BOOL v42 = *(char *)(a2 + 111) < 0;
  uint64_t v43 = *(unsigned __int8 *)(a2 + 111);
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *(void *)(a2 + 96);
  }
  if (v43)
  {
    unint64_t v44 = 0;
    do
    {
      __int16 v45 = *(void **)(*(void *)(v3 + 32) + 8);
      if (v42) {
        uint64_t v46 = *(void *)(a2 + 88);
      }
      else {
        uint64_t v46 = a2 + 88;
      }
      char v47 = *(unsigned char *)(v46 + v44);
      __int16 v49 = (unsigned char *)v45[25];
      unint64_t v48 = v45[26];
      if ((unint64_t)v49 >= v48)
      {
        unint64_t v51 = v45[24];
        int v52 = &v49[-v51];
        uint64_t v53 = (uint64_t)&v49[-v51 + 1];
        if (v53 < 0) {
          goto LABEL_115;
        }
        unint64_t v54 = v48 - v51;
        if (2 * v54 > v53) {
          uint64_t v53 = 2 * v54;
        }
        if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v55 = v53;
        }
        if (v55) {
          uint64_t v56 = (char *)operator new(v55);
        }
        else {
          uint64_t v56 = 0;
        }
        uint64_t v57 = &v52[(void)v56];
        long long v58 = &v52[(void)v56];
        unsigned char *v58 = v47;
        double v50 = v58 + 1;
        if (v49 != (unsigned char *)v51)
        {
          uint64_t v59 = &v49[~v51];
          do
          {
            char v60 = *--v49;
            (v59--)[(void)v56] = v60;
          }
          while (v49 != (unsigned char *)v51);
          __int16 v49 = (unsigned char *)v45[24];
          uint64_t v57 = v56;
        }
        v45[24] = v57;
        v45[25] = v50;
        v45[26] = &v56[v55];
        uint64_t v3 = a1;
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        unsigned char *v49 = v47;
        double v50 = v49 + 1;
      }
      v45[25] = v50;
      ++v44;
      BOOL v42 = *(char *)(a2 + 111) < 0;
      unint64_t v61 = *(unsigned __int8 *)(a2 + 111);
      if ((v61 & 0x80u) != 0) {
        unint64_t v61 = *(void *)(a2 + 96);
      }
    }
    while (v61 > v44);
  }
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 216) = *(unsigned char *)(a2 + 112);
  if (*(char *)(a2 + 143) >= 0) {
    size_t v62 = *(unsigned __int8 *)(a2 + 143);
  }
  else {
    size_t v62 = *(void *)(a2 + 128);
  }
  sub_10008AB10((unint64_t *)(*(void *)(*(void *)(v3 + 32) + 8) + 224), v62);
  BOOL v63 = *(char *)(a2 + 143) < 0;
  uint64_t v64 = *(unsigned __int8 *)(a2 + 143);
  if ((v64 & 0x80u) != 0) {
    uint64_t v64 = *(void *)(a2 + 128);
  }
  if (v64)
  {
    unint64_t v65 = 0;
    do
    {
      char v66 = *(void **)(*(void *)(v3 + 32) + 8);
      if (v63) {
        uint64_t v67 = *(void *)(a2 + 120);
      }
      else {
        uint64_t v67 = a2 + 120;
      }
      char v68 = *(unsigned char *)(v67 + v65);
      long long v70 = (unsigned char *)v66[29];
      unint64_t v69 = v66[30];
      if ((unint64_t)v70 >= v69)
      {
        unint64_t v72 = v66[28];
        char v73 = &v70[-v72];
        uint64_t v74 = (uint64_t)&v70[-v72 + 1];
        if (v74 < 0) {
          goto LABEL_115;
        }
        unint64_t v75 = v69 - v72;
        if (2 * v75 > v74) {
          uint64_t v74 = 2 * v75;
        }
        if (v75 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v76 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v76 = v74;
        }
        if (v76) {
          char v77 = (char *)operator new(v76);
        }
        else {
          char v77 = 0;
        }
        long long v78 = &v73[(void)v77];
        char v79 = &v73[(void)v77];
        *char v79 = v68;
        long long v71 = v79 + 1;
        if (v70 != (unsigned char *)v72)
        {
          long long v80 = &v70[~v72];
          do
          {
            char v81 = *--v70;
            (v80--)[(void)v77] = v81;
          }
          while (v70 != (unsigned char *)v72);
          long long v70 = (unsigned char *)v66[28];
          long long v78 = v77;
        }
        v66[28] = v78;
        v66[29] = v71;
        v66[30] = &v77[v76];
        uint64_t v3 = a1;
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        *long long v70 = v68;
        long long v71 = v70 + 1;
      }
      v66[29] = v71;
      ++v65;
      BOOL v63 = *(char *)(a2 + 143) < 0;
      unint64_t v82 = *(unsigned __int8 *)(a2 + 143);
      if ((v82 & 0x80u) != 0) {
        unint64_t v82 = *(void *)(a2 + 128);
      }
    }
    while (v82 > v65);
  }
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 248) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 249) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 250) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 251) = *(unsigned char *)(a2 + 147);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  int v83 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v84 = *(void *)(*(void *)(v3 + 32) + 8);
    int v85 = *(_DWORD *)(v84 + 88);
    int v86 = *(unsigned __int8 *)(v84 + 92);
    int v87 = *(unsigned __int8 *)(v84 + 120);
    int v88 = *(_DWORD *)(v84 + 124);
    int v89 = *(_DWORD *)(v84 + 128);
    int v90 = *(_DWORD *)(v84 + 132);
    int v91 = *(_DWORD *)(v84 + 136);
    int v92 = *(unsigned __int8 *)(v84 + 184);
    int v93 = *(unsigned __int8 *)(v84 + 185);
    int v94 = *(unsigned __int8 *)(v84 + 216);
    int v95 = *(unsigned __int8 *)(v84 + 248);
    int v96 = *(unsigned __int8 *)(v84 + 249);
    int v97 = *(unsigned __int8 *)(v84 + 250);
    int v98 = *(unsigned __int8 *)(v84 + 251);
    int v99 = *(_DWORD *)(v84 + 256);
    int v100 = *(unsigned __int8 *)(v84 + 260);
    int v101 = *(unsigned __int8 *)(v84 + 261);
    uint64_t v102 = *(void *)(v84 + 264);
    *(_DWORD *)uint64_t buf = 68293634;
    int v107 = 0;
    __int16 v108 = 2082;
    int v109 = "";
    __int16 v110 = 1026;
    int v111 = v85;
    __int16 v112 = 1026;
    int v113 = v86;
    __int16 v114 = 1026;
    int v115 = v87;
    __int16 v116 = 1026;
    int v117 = v88;
    __int16 v118 = 1026;
    int v119 = v89;
    __int16 v120 = 1026;
    int v121 = v90;
    __int16 v122 = 1026;
    int v123 = v91;
    __int16 v124 = 1026;
    int v125 = v92;
    __int16 v126 = 1026;
    int v127 = v93;
    __int16 v128 = 1026;
    int v129 = v94;
    __int16 v130 = 1026;
    int v131 = v95;
    __int16 v132 = 1026;
    int v133 = v96;
    __int16 v134 = 1026;
    int v135 = v97;
    __int16 v136 = 1026;
    int v137 = v98;
    __int16 v138 = 1026;
    int v139 = v99;
    __int16 v140 = 1026;
    int v141 = v100;
    __int16 v142 = 1026;
    int v143 = v101;
    __int16 v144 = 2050;
    uint64_t v145 = v102;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,SuplInit\", \"validmask\":%{public}d, \"privacy\":%{public}d, \"mode\":%{public}d, \"sessionid\":%{public}d, \"slpserveripv4port\":%{public}d, \"slpserveripv4addr\":%{public}d, \"slpserveripv6port\":%{public}d, \"dcs\":%{public}d, \"requestoriddcs\":%{public}d, \"clientnamedcs\":%{public}d, \"qophorizacc\":%{public}d, \"qopvertzacc\":%{public}d, \"qopmaxlocage\":%{public}d, \"qopdelay\":%{public}d, \"instance\":%{public}d, \"certIndex\":%{public}d, \"isMaskPresent\":%{public}hhd, \"mask\":%{public}llu}", buf, 0x82u);
  }
  return sub_1017C09C8(v104, *(void *)(*(void *)(v3 + 32) + 8) + 48, *(_DWORD *)(v3 + 48));
}

void *sub_1017C09C8(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#tb,handlesuplinit", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleSuplInit(const CLEurekaNilrTypes::SuplInit &, CLTelephonyService_Type::SimInstance)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  unsigned int v7 = sub_1017C58AC(a1, a2, a3);
  return sub_1017C5FC8(a1, v7, a2);
}

void sub_1017C0B8C(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(_DWORD *)(v3 + 904);
  *(_DWORD *)(v3 + 904) = 255;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  int v5 = qword_1024193E8;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    int v7 = *a2;
    *(_DWORD *)uint64_t buf = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 1026;
    int v15 = v7;
    __int16 v16 = 1026;
    unsigned int v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplEndReason\", \"suplendreason\":%{public}d, \"instance\":%{public}d}", buf, 0x1Eu);
  }
  if (v4 > 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "NonMatchingSuplEnd", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaModemController::handlePdsEventReport(const pds::eventReportInd::Indication &)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    sub_1017C0DDC(v6, a2);
  }
}

void sub_1017C0DDC(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#tb,handleSuplEnd,reason,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleSuplEnd(const qmi::pds::SuplEndReason &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void *sub_1017C0F94(void *a1, uint64_t a2)
{
  sub_1017CB4F8((uint64_t)v4, a2);
  sub_1017CB590(v4, a1);
  sub_1017C7344(v4);
  return a1;
}

void *sub_1017C1008(uint64_t a1, uint64_t a2)
{
  return sub_1017C1010((void *)(a1 + 32), a2);
}

void *sub_1017C1010(void *a1, uint64_t a2)
{
  sub_1017CB7FC((uint64_t)v4, a2);
  sub_1017CB894(v4, a1);
  sub_1017C73C8(v4);
  return a1;
}

void *sub_1017C1084(uint64_t a1, uint64_t a2)
{
  return sub_1017C108C((void *)(a1 + 160), a2);
}

void *sub_1017C108C(void *a1, uint64_t a2)
{
  sub_1017CBB00((uint64_t)v4, a2);
  sub_1017CBB98(v4, a1);
  sub_1017C75D8(v4);
  return a1;
}

void *sub_1017C1100(uint64_t a1, uint64_t a2)
{
  return sub_1017C1108((void *)(a1 + 64), a2);
}

void *sub_1017C1108(void *a1, uint64_t a2)
{
  sub_1017CBE04((uint64_t)v4, a2);
  sub_1017CBE9C(v4, a1);
  sub_1017C744C(v4);
  return a1;
}

void *sub_1017C117C(uint64_t a1, uint64_t a2)
{
  return sub_1017C1184((void *)(a1 + 96), a2);
}

void *sub_1017C1184(void *a1, uint64_t a2)
{
  sub_1017CC108((uint64_t)v4, a2);
  sub_1017CC1A0(v4, a1);
  sub_1017C74D0(v4);
  return a1;
}

void *sub_1017C11F8(uint64_t a1, uint64_t a2)
{
  return sub_1017C1200((void *)(a1 + 128), a2);
}

void *sub_1017C1200(void *a1, uint64_t a2)
{
  sub_1017CC40C((uint64_t)v4, a2);
  sub_1017CC4A4(v4, a1);
  sub_1017C7554(v4);
  return a1;
}

void sub_1017C1274(uint64_t a1, qmi::MessageBase *a2)
{
  v14[0] = 0;
  sub_1017CC710(a2, 16, (uint64_t)v14);
  v12[0] = 0;
  sub_1017CC710(a2, 17, (uint64_t)v12);
  v10[0] = 0;
  sub_1017CC710(a2, 18, (uint64_t)v10);
  v8[0] = 0;
  sub_1017CC710(a2, 19, (uint64_t)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    if (v14[0]) {
      int v4 = v15;
    }
    else {
      int v4 = -1;
    }
    if (v12[0]) {
      int v5 = v13;
    }
    else {
      int v5 = -1;
    }
    if (v10[0]) {
      int v6 = v11;
    }
    else {
      int v6 = -1;
    }
    if (v8[0]) {
      int v7 = v9;
    }
    else {
      int v7 = -1;
    }
    *(_DWORD *)uint64_t buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    char v19 = "";
    __int16 v20 = 1026;
    int v21 = v4;
    __int16 v22 = 1026;
    int v23 = v5;
    __int16 v24 = 1026;
    int v25 = v6;
    __int16 v26 = 1026;
    int v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#wwanAntTuneL5Blanking,report\", \"L5BestDurationMsec\":%{public}d, \"L5OtherDurationMsec\":%{public}d, \"L5WorstDurationMsec\":%{public}d, \"wwanAntTuneL5BlankingDurationMsec\":%{public}d}", buf, 0x2Au);
  }
}

uint64_t sub_1017C1408(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNetworkRLIReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    *(_WORD *)unint64_t v44 = 0;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNetworkRLIReport(const pds::pdsNetworkRLIReport::Indication &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  __int16 v61 = -1;
  int v62 = -1;
  __int16 v63 = -1;
  char v64 = 0;
  int v65 = -1;
  __int16 v66 = 0;
  char v67 = 0;
  uint64_t v68 = -1;
  int v69 = -16777216;
  char v70 = -1;
  uint64_t v71 = -1;
  v58[0] = 0;
  sub_1017CC774(a2, 1, (uint64_t)v58);
  if (v58[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v58[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v59;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"wwanType,\":%{public}d}", v44, 0x18u);
    }
  }
  v56[0] = 0;
  sub_1017CC774(a2, 2, (uint64_t)v56);
  if (v56[0])
  {
    int v6 = -1;
    switch(v57)
    {
      case 1:
        int v6 = 2;
        break;
      case 2:
        int v6 = 1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        int v6 = 0;
        break;
      case 8:
        goto LABEL_16;
      default:
        if (v57 == 16) {
LABEL_16:
        }
          int v6 = 3;
        break;
    }
    LODWORD(v71) = v6;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v56[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v57;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"protocolType,\":%{public}d}", v44, 0x18u);
    }
  }
  v54[0] = 0;
  sub_1017CC774(a2, 3, (uint64_t)v54);
  if (v54[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v54[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v55;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"transportType,\":%{public}d}", v44, 0x18u);
    }
    if (!v54[0]) {
      sub_101A50B74();
    }
    *(_DWORD *)(a1 + 864) = v55;
  }
  v42[0] = 0;
  sub_1017CC710(a2, 4, (uint64_t)v42);
  if (v42[0])
  {
    LODWORD(v9) = v43;
    __int16 v63 = llround((double)v9 / 1000.0);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v42[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v43;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"qosTimeModemMsec,\":%{public}d}", v44, 0x18u);
    }
  }
  v40[0] = 0;
  sub_1017CC710(a2, 18, (uint64_t)v40);
  if (v40[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v40[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v41;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"qosTimeNetworkMsec,\":%{public}d}", v44, 0x18u);
    }
  }
  v38[0] = 0;
  sub_1017CC710(a2, 5, (uint64_t)v38);
  if (v38[0])
  {
    int v12 = v39;
    if (v39 != 1)
    {
      if (v39 == 128)
      {
        int v12 = 2;
      }
      else if (v39 == 2)
      {
        int v12 = 0;
      }
      else
      {
        int v12 = -1;
      }
    }
    int v62 = v12;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v38[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v39;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"sessionType,\":%{public}d}", v44, 0x18u);
    }
  }
  char v36 = 0;
  sub_1017CC7D8(a2, 6, &v36);
  if (v36)
  {
    int v65 = v37;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v36) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v37;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"velocityRequested,\":%{public}hhd}", v44, 0x18u);
    }
  }
  v34[0] = 0;
  sub_1017CC710(a2, 19, (uint64_t)v34);
  if (v34[0])
  {
    char v64 = sub_101811674(v35);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v34[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v35;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"qosAccuracyMeters,\":%{public}d}", v44, 0x18u);
    }
  }
  char v32 = 0;
  sub_1017CC7D8(a2, 20, &v32);
  if (v32)
  {
    LOBYTE(v66) = v33;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v32) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v33;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"horizontalConfidence,\":%{public}d}", v44, 0x18u);
    }
  }
  v52[0] = 0;
  int v17 = sub_1017CC774(a2, 22, (uint64_t)v52);
  if (v52[0])
  {
    BYTE2(v69) = sub_1017C21A0((uint64_t)v17, v53);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v52[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289538;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v53;
      __int16 v50 = 1026;
      int v51 = BYTE2(v69);
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"shapeType,\":%{public}d, \"shapeType,\":%{public}d}", v44, 0x1Eu);
    }
    if (BYTE2(v69) != 32)
    {
      BYTE2(v69) = 32;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      char v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)unint64_t v44 = 68289026;
        int v45 = 0;
        __int16 v46 = 2082;
        char v47 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,hard coding locCordinateTypeAllowed\"}", v44, 0x12u);
      }
    }
  }
  v30[0] = 0;
  sub_1017CC710(a2, 16, (uint64_t)v30);
  if (v30[0])
  {
    *(_DWORD *)uint64_t buf = v31;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v30[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v31;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"callSubId,\":%{public}d}", v44, 0x18u);
    }
  }
  v28[0] = 0;
  sub_1017CC710(a2, 17, (uint64_t)v28);
  if (v28[0])
  {
    __int16 v21 = 0;
    if (v29 > 7)
    {
      if (v29 == 8)
      {
        __int16 v21 = 16;
      }
      else if (v29 == 16)
      {
        __int16 v21 = 2;
      }
    }
    else if (v29 == 1)
    {
      __int16 v21 = 1;
    }
    else if (v29 == 2)
    {
      __int16 v21 = 32;
    }
    LOWORD(v69) = v21;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v28[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)unint64_t v44 = 68289282;
      int v45 = 0;
      __int16 v46 = 2082;
      char v47 = "";
      __int16 v48 = 1026;
      unsigned int v49 = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"requestedConstellations,\":%{public}d}", v44, 0x18u);
    }
    if ((unsigned __int16)v69 != 1)
    {
      LOWORD(v69) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      int v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)unint64_t v44 = 68289026;
        int v45 = 0;
        __int16 v46 = 2082;
        char v47 = "";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,hard coding requestedGnss\"}", v44, 0x12u);
      }
    }
  }
  __int16 v61 = 0;
  char v70 = 1;
  int v24 = *(_DWORD *)(a1 + 864);
  HIDWORD(v71) = 1;
  int v72 = v24;
  uint64_t v25 = *(void *)(a1 + 56);
  if (!v25) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v25 + 48))(v25, buf);
}

uint64_t sub_1017C21A0(uint64_t a1, uint64_t a2)
{
  if (a2 == 128) {
    int v2 = 64;
  }
  else {
    int v2 = 0;
  }
  if (a2 == 64) {
    unsigned int v3 = 32;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a2 == 32) {
    int v4 = 16;
  }
  else {
    int v4 = 0;
  }
  if (a2 == 16) {
    int v5 = 8;
  }
  else {
    int v5 = v4;
  }
  if (a2 <= 63) {
    unsigned int v3 = v5;
  }
  if (a2 == 8) {
    int v6 = 4;
  }
  else {
    int v6 = 0;
  }
  if (a2 == 4) {
    int v7 = 2;
  }
  else {
    int v7 = v6;
  }
  if (a2 == 2) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = v7;
  }
  if (a2 <= 15) {
    return v8;
  }
  else {
    return v3;
  }
}

uint64_t sub_1017C2208(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  unsigned int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    *(_WORD *)unsigned int v35 = 0;
    char v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceLocation(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  uint64_t v24 = -1;
  unint64_t v25 = 0xFFFFFFFF7FFFFFFFLL;
  uint64_t v27 = -1;
  int v28 = -1;
  __int16 v26 = -1;
  v35[0] = 0;
  sub_1017CC83C(a2, 18, v35);
  if (v35[0])
  {
    LOBYTE(v24) = v36;
    BYTE1(v24) = v37 != 0;
    int v4 = v38;
    int v5 = v39;
    HIDWORD(v24) = v38;
    LODWORD(v25) = v39;
    int v6 = v46;
    HIBYTE(v26) = v46;
    int v7 = v41;
    *(_WORD *)((char *)&v25 + 5) = v41;
    int v8 = HIBYTE(v41);
    HIBYTE(v25) = v40;
    if (v42)
    {
      WORD1(v24) = v44;
      LOBYTE(v26) = v45;
      BYTE4(v25) = v43;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68290307;
      int v48 = 0;
      __int16 v49 = 2082;
      __int16 v50 = "";
      __int16 v51 = 1025;
      int v52 = v4;
      __int16 v53 = 1025;
      int v54 = v5;
      __int16 v55 = 1026;
      int v56 = v7;
      __int16 v57 = 1026;
      int v58 = v8;
      __int16 v59 = 1026;
      int v60 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"lat,\":%{private}d, \"lon,\":%{private}d, \"semiMajorUncert,\":%{public}d, \"semiMinorUncert,\":%{public}d, \"confidence,\":%{public}d}", buf, 0x30u);
    }
  }
  v33[0] = 0;
  sub_1017CC774(a2, 1, (uint64_t)v33);
  if (v33[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v33[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v48 = 0;
      __int16 v49 = 2082;
      __int16 v50 = "";
      __int16 v51 = 1026;
      int v52 = v34;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"wwanType,\":%{public}d}", buf, 0x18u);
    }
  }
  v31[0] = 0;
  sub_1017CC774(a2, 2, (uint64_t)v31);
  if (v31[0])
  {
    int v11 = -1;
    switch(v32)
    {
      case 1:
        int v11 = 2;
        break;
      case 2:
        int v11 = 1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        int v11 = 0;
        break;
      case 8:
        goto LABEL_23;
      default:
        if (v32 == 16) {
LABEL_23:
        }
          int v11 = 3;
        break;
    }
    HIDWORD(v27) = v11;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v31[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v48 = 0;
      __int16 v49 = 2082;
      __int16 v50 = "";
      __int16 v51 = 1026;
      int v52 = v32;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"protocolType,\":%{public}d}", buf, 0x18u);
    }
  }
  v29[0] = 0;
  sub_1017CC774(a2, 3, (uint64_t)v29);
  if (v29[0])
  {
    if (v30 == 2) {
      int v13 = 1;
    }
    else {
      int v13 = -1;
    }
    if (v30 == 1) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    LODWORD(v27) = v14;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v29[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v48 = 0;
      __int16 v49 = 2082;
      __int16 v50 = "";
      __int16 v51 = 1026;
      int v52 = v30;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"transportType,\":%{public}d}", buf, 0x18u);
    }
  }
  v21[0] = 0;
  sub_1017CC710(a2, 16, (uint64_t)v21);
  if (v21[0])
  {
    int v23 = v22;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v21[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v48 = 0;
      __int16 v49 = 2082;
      __int16 v50 = "";
      __int16 v51 = 1026;
      int v52 = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"SubId,\":%{public}d}", buf, 0x18u);
    }
  }
  int v28 = 1;
  uint64_t v17 = *(void *)(a1 + 120);
  if (!v17) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v17 + 48))(v17, &v23);
}

void sub_1017C28D8(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceTime", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    LOWORD(v37) = 0;
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceTime(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  uint64_t v38 = -1;
  uint64_t v5 = 12;
  do
  {
    int v6 = (char *)&v37 + v5;
    *(_WORD *)int v6 = -1;
    _DWORD v6[2] = -1;
    *(void *)(v6 + 4) = -1;
    v6[12] = -1;
    v5 += 16;
  }
  while (v6 + 16 != &v40);
  char v40 = -1;
  uint64_t v41 = -1;
  int v42 = -1;
  sub_1017C3400(a2, v59);
  if (v59[0])
  {
    if (v59[8])
    {
      LODWORD(v38) = v61;
      WORD2(v38) = v60;
      BYTE6(v38) = (int)v62;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240960;
      int v66 = v41;
      __int16 v67 = 1026;
      *(_DWORD *)uint64_t v68 = HIDWORD(v41);
      *(_WORD *)&v68[4] = 1026;
      *(_DWORD *)&v68[6] = WORD2(v38);
      *(_WORD *)int v69 = 1026;
      *(_DWORD *)&v69[2] = v38;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tb,RefTime,sessionProtocol,%{public}d,posProtocol,%{public}d,gpsWeek,%{public}d,gpsTow,%{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      int v45 = 67240960;
      int v46 = v41;
      *(_WORD *)char v47 = 1026;
      *(_DWORD *)&v47[2] = HIDWORD(v41);
      __int16 v48 = 1026;
      int v49 = WORD2(v38);
      __int16 v50 = 1026;
      int v51 = v38;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceTime(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    if (!v59[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    std::string __p = 0;
    __int16 v57 = 0;
    uint64_t v58 = 0;
    sub_1001DD364(&__p, v63, (uint64_t)v64, (v64 - (unsigned char *)v63) >> 3);
    int v8 = __p;
    if (__p != v57)
    {
      HIBYTE(v38) = (v57 - (unsigned char *)__p) >> 3;
      if ((((_WORD)v57 - (_WORD)__p) & 0x7F8u) <= 0x87uLL)
      {
        if ((unint64_t)((v57 - (unsigned char *)__p) >> 3) <= 1) {
          uint64_t v9 = 1;
        }
        else {
          uint64_t v9 = (v57 - (unsigned char *)__p) >> 3;
        }
        unint64_t v10 = &v39;
        int v11 = (unsigned __int8 *)__p + 3;
        uint64_t v12 = v9;
        do
        {
          *((unsigned char *)v10 + 2) = *(v11 - 3);
          v10[1] = *(v11 - 1);
          v10[2] = *v11;
          *((unsigned char *)v10 + 12) = v11[1];
          *(_WORD *)unint64_t v10 = *(_WORD *)(v11 + 3);
          v10 += 4;
          v11 += 8;
          --v12;
        }
        while (v12);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233C670);
        }
        int v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v14 = &v37 + 4 * v9;
          int v15 = *((unsigned __int8 *)v14 + 14);
          int v16 = v14[4];
          int v17 = v14[5];
          int v18 = *((unsigned __int8 *)v14 + 24);
          LODWORD(v14) = *((unsigned __int16 *)v14 + 6);
          *(_DWORD *)uint64_t buf = 67241472;
          int v66 = v9;
          __int16 v67 = 1026;
          *(_DWORD *)uint64_t v68 = v15;
          *(_WORD *)&v68[4] = 1026;
          *(_DWORD *)&v68[6] = v16;
          *(_WORD *)int v69 = 1026;
          *(_DWORD *)&v69[2] = v17;
          __int16 v70 = 1026;
          int v71 = v18;
          __int16 v72 = 1026;
          int v73 = (int)v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#tb,RefTime,towAssist,%{public}d,satId,%{public}d,antiSpoof,%{public}d,alert,%{public}d,tlmReserved,%{public}d,tlmMsg,%{public}d", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233C670);
          }
          int v29 = &v37 + 4 * v9;
          int v30 = *((unsigned __int8 *)v29 + 14);
          int v31 = v29[4];
          int v32 = v29[5];
          int v33 = *((unsigned __int8 *)v29 + 24);
          LODWORD(v29) = *((unsigned __int16 *)v29 + 6);
          int v45 = 67241472;
          int v46 = v9;
          *(_WORD *)char v47 = 1026;
          *(_DWORD *)&v47[2] = v30;
          __int16 v48 = 1026;
          int v49 = v31;
          __int16 v50 = 1026;
          int v51 = v32;
          __int16 v52 = 1026;
          int v53 = v33;
          __int16 v54 = 1026;
          int v55 = (int)v29;
          uint64_t v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceTime(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
      }
      int v8 = __p;
    }
    if (v8)
    {
      __int16 v57 = v8;
      operator delete(v8);
    }
  }
  LOBYTE(v45) = 0;
  sub_1017CC774(a2, 1, (uint64_t)&v45);
  if ((_BYTE)v45)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    char v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!(_BYTE)v45) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v66 = 0;
      __int16 v67 = 2082;
      *(void *)uint64_t v68 = "";
      *(_WORD *)&v68[8] = 1026;
      *(_DWORD *)int v69 = *(_DWORD *)v47;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"wwanType,\":%{public}d}", buf, 0x18u);
    }
  }
  LOBYTE(__p) = 0;
  sub_1017CC774(a2, 2, (uint64_t)&__p);
  if ((_BYTE)__p)
  {
    int v20 = -1;
    switch((unint64_t)v57)
    {
      case 1uLL:
        int v20 = 2;
        break;
      case 2uLL:
        int v20 = 1;
        break;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        break;
      case 4uLL:
        int v20 = 0;
        break;
      case 8uLL:
        goto LABEL_42;
      default:
        if (v57 == (unsigned char *)16) {
LABEL_42:
        }
          int v20 = 3;
        break;
    }
    HIDWORD(v41) = v20;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!(_BYTE)__p) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v66 = 0;
      __int16 v67 = 2082;
      *(void *)uint64_t v68 = "";
      *(_WORD *)&v68[8] = 1026;
      *(_DWORD *)int v69 = v57;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"protocolType,\":%{public}d}", buf, 0x18u);
    }
  }
  v43[0] = 0;
  sub_1017CC774(a2, 3, (uint64_t)v43);
  if (v43[0])
  {
    if (v44 == 2) {
      int v22 = 1;
    }
    else {
      int v22 = -1;
    }
    if (v44 == 1) {
      int v23 = 0;
    }
    else {
      int v23 = v22;
    }
    LODWORD(v41) = v23;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v43[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v66 = 0;
      __int16 v67 = 2082;
      *(void *)uint64_t v68 = "";
      *(_WORD *)&v68[8] = 1026;
      *(_DWORD *)int v69 = v44;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"transportType,\":%{public}d}", buf, 0x18u);
    }
  }
  v35[0] = 0;
  sub_1017CC710(a2, 16, (uint64_t)v35);
  if (v35[0])
  {
    int v37 = v36;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unint64_t v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v35[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v66 = 0;
      __int16 v67 = 2082;
      *(void *)uint64_t v68 = "";
      *(_WORD *)&v68[8] = 1026;
      *(_DWORD *)int v69 = v36;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"SubId,\":%{public}d}", buf, 0x18u);
    }
  }
  int v42 = 1;
  uint64_t v26 = *(void *)(a1 + 152);
  if (!v26) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v26 + 48))(v26, &v37);
  if (v59[0])
  {
    if (v63)
    {
      char v64 = v63;
      operator delete(v63);
    }
  }
}

void sub_1017C336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    if (a62) {
      operator delete(a62);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1017C3400(qmi::MessageBase *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  sub_1017CCA64(a1, 19, (uint64_t)a2);
}

void sub_1017C3430(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1017CF438((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017C344C(uint64_t a1, qmi::MessageBase *a2)
{
  int v4 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v5 = &qword_102419000;
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceEphemeris", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    LOWORD(v93) = 0;
    unint64_t v75 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceNavModel(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v75);
    if (v75 != (char *)buf) {
      free(v75);
    }
  }
  char v94 = -1;
  uint64_t v7 = 8;
  *(void *)&long long v8 = 0x8000000080000000;
  *((void *)&v8 + 1) = 0x8000000080000000;
  do
  {
    uint64_t v9 = (char *)&v93 + v7;
    *(_OWORD *)uint64_t v9 = xmmword_101E34EE0;
    *((_OWORD *)v9 + 1) = v8;
    *((_OWORD *)v9 + 2) = xmmword_101E34EF0;
    *((void *)v9 + 6) = 0x8000800080008000;
    *((_DWORD *)v9 + 14) = 0x80000000;
    *((_WORD *)v9 + 30) = -1;
    *((_DWORD *)v9 + 16) = -1;
    v9[68] = 127;
    *((_DWORD *)v9 + 18) = -1;
    v7 += 96;
    v9[76] = -1;
  }
  while (v9 + 96 != (char *)&v96);
  uint64_t v96 = -1;
  int v97 = -1;
  v163[0] = 0;
  sub_1017CC774(a2, 1, (uint64_t)v163);
  if (v163[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v163[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v166 = 0;
      __int16 v167 = 2082;
      *(void *)unint64_t v168 = "";
      *(_WORD *)&v168[8] = 1026;
      *(_DWORD *)long long v169 = v164;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"wwanType,\":%{public}d}", buf, 0x18u);
    }
  }
  v161[0] = 0;
  sub_1017CC774(a2, 2, (uint64_t)v161);
  if (v161[0])
  {
    int v11 = -1;
    switch(v162)
    {
      case 1:
        int v11 = 2;
        break;
      case 2:
        int v11 = 1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        int v11 = 0;
        break;
      case 8:
        goto LABEL_18;
      default:
        if (v162 == 16) {
LABEL_18:
        }
          int v11 = 3;
        break;
    }
    HIDWORD(v96) = v11;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v161[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v166 = 0;
      __int16 v167 = 2082;
      *(void *)unint64_t v168 = "";
      *(_WORD *)&v168[8] = 1026;
      *(_DWORD *)long long v169 = v162;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"protocolType,\":%{public}d}", buf, 0x18u);
    }
  }
  v159[0] = 0;
  sub_1017CC774(a2, 3, (uint64_t)v159);
  if (v159[0])
  {
    if (v160 == 2) {
      int v13 = 1;
    }
    else {
      int v13 = -1;
    }
    if (v160 == 1) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    LODWORD(v96) = v14;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v159[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v166 = 0;
      __int16 v167 = 2082;
      *(void *)unint64_t v168 = "";
      *(_WORD *)&v168[8] = 1026;
      *(_DWORD *)long long v169 = v160;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"transportType,\":%{public}d}", buf, 0x18u);
    }
  }
  v91[0] = 0;
  sub_1017CC710(a2, 16, (uint64_t)v91);
  if (v91[0])
  {
    int v93 = v92;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v91[0]) {
        sub_101A50B74();
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v166 = 0;
      __int16 v167 = 2082;
      *(void *)unint64_t v168 = "";
      *(_WORD *)&v168[8] = 1026;
      *(_DWORD *)long long v169 = v92;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"SubId,\":%{public}d}", buf, 0x18u);
    }
  }
  sub_1017C4128(a2, v156);
  if (v156[0])
  {
    int v17 = v158;
    int v18 = v157;
    unint64_t v19 = ((unsigned char *)v158 - (unsigned char *)v157) / 100;
    std::string __p = 0;
    int v89 = 0;
    uint64_t v90 = 0;
    sub_1017C6DF0(&__p, v157, (uint64_t)v158, v19);
    int v20 = __p;
    if (__p != v89)
    {
      if (!v156[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      char v94 = 41 * ((v158 - v157) >> 2);
      if (v17 != v18)
      {
        uint64_t v76 = a1;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        if (v19 <= 1) {
          unint64_t v19 = 1;
        }
        int v23 = &v95;
        unint64_t v77 = v19;
        do
        {
          uint64_t v24 = (char *)__p;
          unint64_t v25 = (char *)__p + v21;
          *((_DWORD *)v23 - 10) = *(_DWORD *)((char *)__p + v21 + 32);
          *((_DWORD *)v23 - 9) = *((_DWORD *)v25 + 11);
          *((_DWORD *)v23 - 8) = *((_DWORD *)v25 + 13);
          *((_DWORD *)v23 - 7) = *((_DWORD *)v25 + 15);
          LODWORD(v26) = *((_DWORD *)v25 + 18);
          DWORD1(v26) = *((_DWORD *)v25 + 20);
          *((void *)&v26 + 1) = *((void *)v25 + 11);
          *(_OWORD *)(v23 - 3) = v26;
          *((_WORD *)v23 - 4) = *((_WORD *)v25 + 3);
          *((_WORD *)v23 - 3) = *((_WORD *)v25 + 13);
          *((_WORD *)v23 - 2) = *((_WORD *)v25 + 15);
          *((_WORD *)v23 - 1) = *((_WORD *)v25 + 19);
          *(_WORD *)int v23 = *((_WORD *)v25 + 20);
          *((_WORD *)v23 + 1) = *((_WORD *)v25 + 24);
          *((_WORD *)v23 + 2) = *((_WORD *)v25 + 28);
          *((_WORD *)v23 + 3) = *((_WORD *)v25 + 32);
          *((_WORD *)v23 + 4) = *((_WORD *)v25 + 35);
          *((_WORD *)v23 + 5) = *((_WORD *)v25 + 38);
          *((_WORD *)v23 + 6) = *((_WORD *)v25 + 42);
          *((_WORD *)v23 + 7) = *((_WORD *)v25 + 48);
          *((unsigned char *)v23 + 16) = *v25 - 1;
          *((unsigned char *)v23 + 17) = v25[3];
          *((unsigned char *)v23 + 18) = v25[4];
          *((unsigned char *)v23 + 19) = v25[28];
          *((unsigned char *)v23 + 20) = 0;
          *((unsigned char *)v23 + 21) = v25[2];
          *((_DWORD *)v23 + 6) = v25[9];
          *((unsigned char *)v23 + 28) = v25[25];
          if (v25[66]) {
            *((_DWORD *)v23 + 8) = v25[67];
          }
          *((unsigned char *)v23 + 36) = v25[69];
          if (v25[10])
          {
            uint64_t v27 = &v24[v21];
            *((_DWORD *)v23 + 10) = *((_DWORD *)v27 + 3);
            *((_DWORD *)v23 + 11) = *((_DWORD *)v27 + 4);
            *((_DWORD *)v23 + 12) = *((_DWORD *)v27 + 5);
          }
          if (v4[122] != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233C670);
          }
          int v28 = v5[123];
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            int v29 = *((_DWORD *)v25 + 8);
            int v30 = *((_DWORD *)v25 + 11);
            int v31 = *((_DWORD *)v25 + 13);
            int v32 = *((_DWORD *)v25 + 15);
            int v33 = *((_DWORD *)v25 + 18);
            int v34 = *((_DWORD *)v25 + 20);
            int v36 = *((_DWORD *)v25 + 22);
            int v35 = *((_DWORD *)v25 + 23);
            int v37 = *((unsigned __int16 *)v25 + 3);
            int v38 = *((unsigned __int16 *)v25 + 13);
            int v39 = *((unsigned __int16 *)v25 + 15);
            int v40 = *((unsigned __int16 *)v25 + 19);
            int v41 = *((unsigned __int16 *)v25 + 20);
            int v42 = *((unsigned __int16 *)v25 + 24);
            int v43 = *((unsigned __int16 *)v25 + 28);
            int v44 = *((unsigned __int16 *)v25 + 32);
            int v45 = *((unsigned __int16 *)v25 + 35);
            int v46 = *((unsigned __int16 *)v25 + 38);
            int v47 = *((unsigned __int16 *)v25 + 42);
            int v48 = *((unsigned __int16 *)v25 + 48);
            int v49 = v25[3];
            int v78 = v25[4];
            int v79 = v25[28];
            int v80 = v25[98];
            int v82 = v25[2];
            int v84 = v25[9];
            int v86 = v25[69];
            *(_DWORD *)unint64_t v168 = *((unsigned __int8 *)v23 + 16);
            *(_DWORD *)&v168[6] = v29;
            *(_DWORD *)&v169[2] = v30;
            int v171 = v31;
            int v173 = v32;
            int v175 = v33;
            int v177 = v34;
            int v179 = v36;
            int v181 = v35;
            int v183 = v37;
            int v185 = v38;
            int v187 = v39;
            int v189 = v40;
            int v191 = v41;
            int v193 = v42;
            int v195 = v43;
            int v197 = v44;
            int v199 = v45;
            int v201 = v46;
            int v4 = &qword_102419000;
            int v203 = v47;
            unint64_t v19 = v77;
            int v205 = v48;
            uint64_t v5 = &qword_102419000;
            int v207 = v49;
            int v209 = v78;
            int v211 = v79;
            int v213 = v80;
            int v215 = v82;
            int v217 = v84;
            int v219 = v86;
            *(_DWORD *)uint64_t buf = 67247360;
            int v166 = v22;
            __int16 v167 = 1026;
            *(_WORD *)&v168[4] = 1026;
            *(_WORD *)long long v169 = 1026;
            __int16 v170 = 1026;
            __int16 v172 = 1026;
            __int16 v174 = 1026;
            __int16 v176 = 1026;
            __int16 v178 = 1026;
            __int16 v180 = 1026;
            __int16 v182 = 1026;
            __int16 v184 = 1026;
            __int16 v186 = 1026;
            __int16 v188 = 1026;
            __int16 v190 = 1026;
            __int16 v192 = 1026;
            __int16 v194 = 1026;
            __int16 v196 = 1026;
            __int16 v198 = 1026;
            __int16 v200 = 1026;
            __int16 v202 = 1026;
            __int16 v204 = 1026;
            __int16 v206 = 1026;
            __int16 v208 = 1026;
            __int16 v210 = 1026;
            __int16 v212 = 1026;
            __int16 v214 = 1026;
            __int16 v216 = 1026;
            __int16 v218 = 1026;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#tb,NavModel,ephemeris,%{public}d,satId,%{public}u,af0,%{public}u,m0,%{public}u,eccentricity,%{public}u,sqrtA,%{public}u,omega0,%{public}u,i0,%{public}u,omega,%{public}u,omegaDot,%{public}u,iodc,%{public}u,toc,%{public}u,af1,%{public}u,crs,%{public}u,deltaN,%{public}u,cuc,%{public}u,cus,%{public}u,toe,%{public}u,cic,%{public}u,cis,%{public}u,crc,%{public}u,idot,%{public}u,userRangeAccuracy,%{public}u,svHealth,%{public}u,af2,%{public}u,satelliteStatus,%{public}u,codeL2,%{public}u,pcodeFlag,%{public}u,aodo,%{public}u", buf, 0xB0u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v4[122] != -1) {
              dispatch_once(&qword_1024193D0, &stru_10233C670);
            }
            int v50 = *((_DWORD *)v25 + 8);
            int v51 = *((_DWORD *)v25 + 11);
            int v52 = *((_DWORD *)v25 + 13);
            int v53 = *((_DWORD *)v25 + 15);
            int v54 = *((_DWORD *)v25 + 18);
            int v55 = *((_DWORD *)v25 + 20);
            int v57 = *((_DWORD *)v25 + 22);
            int v56 = *((_DWORD *)v25 + 23);
            int v58 = *((unsigned __int16 *)v25 + 3);
            int v59 = *((unsigned __int16 *)v25 + 13);
            int v60 = *((unsigned __int16 *)v25 + 15);
            int v61 = *((unsigned __int16 *)v25 + 19);
            int v62 = *((unsigned __int16 *)v25 + 20);
            int v63 = *((unsigned __int16 *)v25 + 24);
            int v64 = *((unsigned __int16 *)v25 + 28);
            int v65 = *((unsigned __int16 *)v25 + 32);
            int v66 = *((unsigned __int16 *)v25 + 35);
            int v67 = *((unsigned __int16 *)v25 + 38);
            int v68 = *((unsigned __int16 *)v25 + 42);
            int v69 = *((unsigned __int16 *)v25 + 48);
            int v70 = v25[3];
            int v71 = v25[4];
            int v81 = v25[28];
            int v83 = v25[98];
            int v85 = v25[2];
            int v87 = v25[9];
            int v72 = v25[69];
            int v101 = *((unsigned __int8 *)v23 + 16);
            int v103 = v50;
            int v105 = v51;
            int v107 = v52;
            int v109 = v53;
            int v111 = v54;
            int v113 = v55;
            int v115 = v57;
            int v117 = v56;
            int v119 = v58;
            int v121 = v59;
            int v123 = v60;
            int v125 = v61;
            int v127 = v62;
            int v129 = v63;
            int v131 = v64;
            int v133 = v65;
            int v135 = v66;
            int v137 = v67;
            int v139 = v68;
            int v141 = v69;
            int v143 = v70;
            int v145 = v71;
            int v147 = v81;
            int v149 = v83;
            int v151 = v85;
            int v153 = v87;
            int v155 = v72;
            uint64_t v5 = &qword_102419000;
            int v98 = 67247360;
            int v99 = v22;
            __int16 v100 = 1026;
            __int16 v102 = 1026;
            __int16 v104 = 1026;
            __int16 v106 = 1026;
            __int16 v108 = 1026;
            __int16 v110 = 1026;
            __int16 v112 = 1026;
            __int16 v114 = 1026;
            __int16 v116 = 1026;
            __int16 v118 = 1026;
            __int16 v120 = 1026;
            __int16 v122 = 1026;
            __int16 v124 = 1026;
            __int16 v126 = 1026;
            __int16 v128 = 1026;
            __int16 v130 = 1026;
            __int16 v132 = 1026;
            __int16 v134 = 1026;
            __int16 v136 = 1026;
            __int16 v138 = 1026;
            __int16 v140 = 1026;
            __int16 v142 = 1026;
            __int16 v144 = 1026;
            __int16 v146 = 1026;
            __int16 v148 = 1026;
            __int16 v150 = 1026;
            __int16 v152 = 1026;
            __int16 v154 = 1026;
            int v73 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceNavModel(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v73);
            int v4 = &qword_102419000;
            unint64_t v19 = v77;
            if (v73 != (char *)buf) {
              free(v73);
            }
          }
          ++v22;
          v21 += 100;
          v23 += 12;
        }
        while (v19 != v22);
        int v20 = __p;
        a1 = v76;
      }
    }
    if (v20)
    {
      int v89 = v20;
      operator delete(v20);
    }
  }
  int v97 = 1;
  uint64_t v74 = *(void *)(a1 + 88);
  if (!v74) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v74 + 48))(v74, &v93);
  if (v156[0])
  {
    if (v157)
    {
      int v158 = v157;
      operator delete(v157);
    }
  }
}

void sub_1017C40B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x740]))
  {
    int v20 = (void *)STACK[0x748];
    if (STACK[0x748])
    {
      STACK[0x750] = (unint64_t)v20;
      operator delete(v20);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1017C4128(qmi::MessageBase *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  sub_1017CCEA0(a1, 17, (uint64_t)a2);
}

void sub_1017C4158(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1017CF46C((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017C4174(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    *(_WORD *)int v17 = 0;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceReport(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  v17[0] = 0;
  sub_1017CC83C(a2, 18, v17);
  if (v17[0]) {
    sub_1017C2208(a1, a2);
  }
  sub_1017C3400(a2, buf);
  if (buf[0]) {
    sub_1017C28D8(a1, a2);
  }
  sub_1017C4128(a2, v14);
  if (v14[0]) {
    sub_1017C344C(a1, a2);
  }
  v7[0] = 0;
  sub_1017CC7D8(a2, 4, v7);
  if (v7[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v7[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)long long v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 1026;
      int v13 = v7[1];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,ADReport\", \"Islast,\":%{public}hhd}", v8, 0x18u);
    }
  }
  if (v14[0] && __p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (buf[0])
  {
    if (v19)
    {
      int v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_1017C4488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15 && __p) {
    operator delete(__p);
  }
  if (a25)
  {
    uint64_t v27 = *(void **)(v25 + 24);
    if (v27)
    {
      *(void *)(v25 + 32) = v27;
      operator delete(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1017C44E0(uint64_t a1, _DWORD *a2)
{
  int v4 = (_OWORD *)(a1 + 532);
  BOOL v5 = sub_100D33A54(a1 + 532);
  int v6 = a2[4];
  _OWORD *v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 548) = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100D335B8(a2, __p);
    long long v8 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tb,EMERGENCY: state,%{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    sub_100D335B8(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v13 = 136446210;
    int v14 = p_buf;
    int v11 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v11);
    if (v11 != __p) {
      free(v11);
    }
  }
  BOOL v9 = sub_100D33A54((uint64_t)a2);
  if (!v5 || v9)
  {
    if (!v5 && v9) {
      sub_1017C4A1C();
    }
  }
  else
  {
    sub_1017C4750((unsigned char *)a1);
  }
}

void sub_1017C4750(unsigned char *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#tb,onEmergencyEntry", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::onEmergencyExit()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (a1[553])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unsigned int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      BOOL v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,Restart GPS at end of emergency mode\"}", buf, 0x12u);
    }
    sub_1017BC688((uint64_t)a1);
  }
  else if (a1[552])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      BOOL v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,Restart QMI connection to enable reinitialization\"}", buf, 0x12u);
    }
    sub_1017BC688((uint64_t)a1);
    sub_1018D63C0((uint64_t)(a1 + 200));
  }
  if (a1[556]) {
    a1[556] = 0;
  }
}

void sub_1017C4A1C()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#tb,onEmergencyEntry", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::onEmergencyEntry()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1017C4BA4(uint64_t a1, uint64_t *a2, int a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  BOOL v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10101AE9C(a3, &__p);
    int v6 = v42 >= 0 ? &__p : (void **)__p;
    int v7 = *(_DWORD *)a2;
    *(_DWORD *)std::string buf = 68289538;
    int v54 = 0;
    __int16 v55 = 2082;
    *(void *)int v56 = "";
    *(_WORD *)&unsigned char v56[8] = 2082;
    *(void *)&v56[10] = v6;
    *(_WORD *)&v56[18] = 1026;
    *(_DWORD *)int v57 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,emergency settings changed\", \"reason\":%{public, location:escape_only}s, \"instance\":%{public}d}", buf, 0x22u);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
  }
  int v8 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2) {
    goto LABEL_13;
  }
  if (v8 == 1 && sub_1000FFBA8())
  {
    int v8 = *(_DWORD *)a2;
LABEL_13:
    BOOL v9 = (void *)(a1 + 896);
    uint64_t v10 = sub_1017BE0C0((void *)(a1 + 896), v8);
    sub_10083C6B4(v10, a2);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 7);
      int v13 = *(unsigned __int16 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 992);
      uint64_t v14 = sub_1017BE0C0(v9, *(_DWORD *)a2);
      if (*(char *)(v14 + 967) >= 0) {
        uint64_t v15 = v14 + 944;
      }
      else {
        uint64_t v15 = *(void *)(v14 + 944);
      }
      char v16 = *(unsigned char *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v17 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v18 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v19 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v20 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      *(_DWORD *)std::string buf = 67241986;
      int v54 = v12;
      __int16 v55 = 1026;
      *(_DWORD *)int v56 = v13;
      *(_WORD *)&v56[4] = 2080;
      *(void *)&v56[6] = v15;
      *(_WORD *)&v56[14] = 1026;
      *(_DWORD *)&v56[16] = v16 & 1;
      *(_WORD *)int v57 = 1026;
      *(_DWORD *)&v57[2] = (v17 >> 1) & 1;
      __int16 v58 = 1026;
      int v59 = (v18 >> 2) & 1;
      __int16 v60 = 1026;
      int v61 = (v19 >> 3) & 1;
      __int16 v62 = 1026;
      int v63 = (v20 >> 4) & 1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tb,carrierBundleSettings,supported,%{public}d,port,%{public}d,hslp,%s,allowNonEmergencySupl,%{public}d,allowSuplWithoutEmergencyNotification,%{public}d,allowHslpMismatch,%{public}d,allowHslpWildCard,%{public}d,allowNonConformingEslpAddress,%{public}d\n", buf, 0x36u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      int v27 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 7);
      int v28 = *(unsigned __int16 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 992);
      uint64_t v29 = sub_1017BE0C0(v9, *(_DWORD *)a2);
      if (*(char *)(v29 + 967) >= 0) {
        uint64_t v30 = v29 + 944;
      }
      else {
        uint64_t v30 = *(void *)(v29 + 944);
      }
      char v31 = *(unsigned char *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v32 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v33 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v34 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      unsigned int v35 = *(unsigned __int8 *)(sub_1017BE0C0(v9, *(_DWORD *)a2) + 1000);
      LODWORD(__p) = 67241986;
      HIDWORD(__p) = v27;
      __int16 v39 = 1026;
      int v40 = v28;
      __int16 v41 = 2080;
      uint64_t v42 = v30;
      __int16 v43 = 1026;
      int v44 = v31 & 1;
      __int16 v45 = 1026;
      int v46 = (v32 >> 1) & 1;
      __int16 v47 = 1026;
      int v48 = (v33 >> 2) & 1;
      __int16 v49 = 1026;
      int v50 = (v34 >> 3) & 1;
      __int16 v51 = 1026;
      int v52 = (v35 >> 4) & 1;
      int v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    uint64_t v21 = sub_1017BE0C0(v9, *(_DWORD *)a2);
    uint64_t v22 = *(unsigned int *)a2;
    if (*(unsigned char *)(v21 + 7)) {
      sub_1017BE110(a1, v22);
    }
    else {
      sub_1017BE334(a1, v22);
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v23 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v24 = *(_DWORD *)a2;
    *(_DWORD *)std::string buf = 67240192;
    int v54 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#tb,InvalidArgs for handleEmergencySettingsChange,instance,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v25 = *(_DWORD *)a2;
    LODWORD(__p) = 67240192;
    HIDWORD(__p) = v25;
    long long v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaModemController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
}

void sub_1017C51C0(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    *(_DWORD *)std::string buf = 67240448;
    int v21 = a2;
    __int16 v22 = 1026;
    int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#tb,#supl,sendInjectSuplCertReq,index,%{public}d,len,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v9 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    int v16 = 67240448;
    int v17 = a2;
    __int16 v18 = 1026;
    int v19 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  int v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  sub_10016989C(&__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  uint64_t v15 = 0;
  int v8 = operator new(0x28uLL);
  *(void *)int v8 = off_10233D130;
  v8[8] = a2;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 2) = 0;
  sub_10016989C((void *)v8 + 2, __p, (uint64_t)v12, v12 - (unsigned char *)__p);
  uint64_t v15 = v8;
  sub_1018D6764(a1 + 200, (uint64_t)v14);
  sub_1017C825C(v14);
  if (__p)
  {
    int v12 = __p;
    operator delete(__p);
  }
}

void sub_1017C543C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1017C5480(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,fetchUmtsApn,instance,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v10 = 67240192;
    int v11 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  id v5 = [[[*(id *)(a1 + 192) vendor] proxyForService:@"CLTelephonyService" forClient:@"CLGnssProvider"];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1017C6460;
  v8[3] = &unk_10233C650;
  uint8_t v8[4] = a1;
  int v9 = a2;
  return [v5 fetchUmtsApnForInstance:a2 WithReply:v8];
}

void *sub_1017C56A4(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,sendDeleteSuplCert,index,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v10 = 67240192;
    int v11 = a2;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  int v7 = off_10233D1D0;
  char v8 = a2;
  int v9 = &v7;
  sub_1018D6764(a1 + 200, (uint64_t)&v7);
  return sub_1017C825C(&v7);
}

void sub_1017C5890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

BOOL sub_1017C58AC(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  int v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a2 + 8;
    int v8 = *(_DWORD *)(a2 + 36);
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)int v25 = 0;
    *(_WORD *)&v25[4] = 2082;
    *(void *)&v25[6] = "";
    __int16 v26 = 1026;
    *(_DWORD *)int v27 = v8;
    *(_WORD *)&v27[4] = 2082;
    *(void *)&v27[6] = v7;
    __int16 v28 = 1026;
    int v29 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,isValidSupl\", \"trigger\":%{public}d, \"url\":%{public, location:escape_only}s, \"simInstance\":%{public}d}", buf, 0x28u);
  }
  if (*(_DWORD *)(a2 + 36) != -1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233C6C8);
    }
    int v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)int v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,unsupported trigger,%{public}d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_14;
      }
      goto LABEL_62;
    }
    return result;
  }
  uint64_t v13 = *(unsigned __int8 *)(a2 + 31);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a2 + 16);
  }
  if (v13)
  {
    if ((*(unsigned char *)(sub_1017BE0C0((void *)(a1 + 896), a3) + 1000) & 4) == 0)
    {
      uint64_t v14 = sub_1017BE0C0((void *)(a1 + 896), a3) + 944;
      uint64_t v15 = sub_1017BE0C0((void *)(a1 + 896), a3);
      if (!sub_10102B2B0((uint64_t *)(a2 + 8), v14, (*(unsigned __int8 *)(v15 + 1000) >> 3) & 1))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233C6C8);
        }
        __int16 v18 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 31) >= 0) {
            uint64_t v19 = a2 + 8;
          }
          else {
            uint64_t v19 = *(void *)(a2 + 8);
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)int v25 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,url check failed ,%{public}s", buf, 0xCu);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_14:
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaModemController::isValidSupl(const CLEurekaNilrTypes::SuplInit &, CLTelephonyService_Type::SimInstance)", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
          return 0;
        }
LABEL_62:
        dispatch_once(&qword_1024193E0, &stru_10233C6C8);
        goto LABEL_14;
      }
    }
  }
  if (!sub_100D33A54(a1 + 532) && (*(unsigned char *)(sub_1017BE0C0((void *)(a1 + 896), a3) + 1000) & 1) == 0)
  {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 31);
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a2 + 16);
    }
    if (!v16)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233C6C8);
      }
      int v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v22 = sub_100D33A54(a1 + 532);
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)int v25 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,emerg check failed,isBasebandEmergency,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233C6C8);
        }
        sub_100D33A54(a1 + 532);
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaModemController::isValidSupl(const CLEurekaNilrTypes::SuplInit &, CLTelephonyService_Type::SimInstance)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      sub_1017C6068(a1, 2);
      return 0;
    }
  }
  if (*(_DWORD *)(a2 + 32) != 3 || *(_DWORD *)(sub_1017BE0C0((void *)(a1 + 896), a3) + 996))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233C6C8);
    }
    int v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)int v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&v25[6] = "";
      __int16 v26 = 2082;
      *(void *)int v27 = "Pass";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,isValidSupl\", \"result\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233C6C8);
  }
  unsigned int v20 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,UDP check failed", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
  return result;
}

void *sub_1017C5FC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v4[0] = off_10233CFF0;
  v4[1] = a2;
  _DWORD v4[2] = a3;
  v4[3] = v4;
  sub_1018D6764(a1 + 200, (uint64_t)v4);
  return sub_1017C825C(v4);
}

void sub_1017C6054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1017C6068(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67241216;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v19 = 1026;
    *(_DWORD *)&unsigned int v19[2] = a2;
    __int16 v20 = 1026;
    int v21 = 0;
    __int16 v22 = 1026;
    int v23 = 0;
    __int16 v24 = 1026;
    int v25 = 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,#ca,submitNonEmergencyNILRSessionStatsToCA,posProtocol,%{public}d,sessionProtocol,%{public}d,msgType,%{public}d,methodType,%{public}d,discardReason,%{public}d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v13 = 67241216;
    LOWORD(v14) = 1026;
    *(_DWORD *)((char *)&v14 + 2) = a2;
    HIWORD(v14) = 1026;
    *(_DWORD *)uint64_t v15 = 0;
    *(_WORD *)&v15[4] = 1026;
    *(_DWORD *)&v15[6] = 0;
    __int16 v16 = 1026;
    int v17 = 1;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::submitNonEmergencyNILRSessionStatsToCA(Emergency::PositionSession)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)std::string buf = 86;
  *(_DWORD *)uint64_t v19 = 0;
  int v26 = 0;
  int v27 = 51;
  int v28 = a2;
  int v29 = 0;
  int v30 = 52;
  int v31 = 0;
  int v32 = 0;
  int v33 = 84;
  int v34 = 1;
  int v35 = 0;
  int v36 = 85;
  int v37 = 0;
  int v38 = 0;
  uint64_t v14 = 0;
  *(void *)uint64_t v15 = 0;
  uint64_t v13 = 0;
  v11[3] = (uint64_t)&v13;
  char v12 = 0;
  uint64_t v13 = (uint64_t)operator new(0xC8uLL);
  uint64_t v14 = v13;
  *(void *)uint64_t v15 = v13 + 200;
  uint64_t v14 = sub_100682A48((uint64_t)v15, (uint64_t)buf, (uint64_t)&v39, v13);
  for (uint64_t i = 168; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  int v6 = *(void **)(a1 + 912);
  memset(v11, 0, 24);
  sub_100682C20(v11, v13, v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 3));
  [v6 setMeasurements:sub_10067C03C(v11)];
  *(void *)std::string buf = v11;
  sub_100682B1C((void ***)buf);
  uint64_t v7 = *(void **)(a1 + 912);
  if (byte_10248A8FF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8E8, *((unint64_t *)&xmmword_10248A8E8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_10248A8E8;
    uint64_t v10 = unk_10248A8F8;
  }
  [v7 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  *(void *)std::string buf = &v13;
  sub_100682B1C((void ***)buf);
}

void sub_1017C63D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_1017C6460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  [*(id *)(v4 + 192) silo];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v20, a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  id v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    p_src = &__src;
    if (v22 < 0) {
      p_src = (long long *)__src;
    }
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)std::string buf = 136446466;
    int v30 = p_src;
    __int16 v31 = 1026;
    int v32 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#tb,SUPL: UMTS apn:%{public}s,instance,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v13 = &__src;
    if (v22 < 0) {
      uint64_t v13 = (long long *)__src;
    }
    int v14 = *(_DWORD *)(a1 + 40);
    int v25 = 136446466;
    int v26 = v13;
    __int16 v27 = 1026;
    int v28 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v8 = HIBYTE(v22);
  if (v22 < 0) {
    uint64_t v8 = *((void *)&__src + 1);
  }
  if (v8)
  {
    uint64_t v16 = v20;
    if (SHIBYTE(v22) < 0)
    {
      sub_1000DC48C(&__p, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      long long __p = __src;
      uint64_t v18 = v22;
    }
    int v11 = *(_DWORD *)(a1 + 40);
    int v19 = v11;
    __int16 v24 = 0;
    char v12 = operator new(0x30uLL);
    void *v12 = off_10233D090;
    v12[1] = v16;
    *((_OWORD *)v12 + 1) = __p;
    unsigned char v12[4] = v18;
    long long __p = 0uLL;
    uint64_t v18 = 0;
    *((_DWORD *)v12 + 10) = v11;
    __int16 v24 = v12;
    sub_1018D6764(v4 + 200, (uint64_t)v23);
    sub_1017C825C(v23);
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#tb,SUPL: can't find usable APN", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      LOWORD(v25) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__src);
  }
}

void sub_1017C6890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017C68E4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "handlePdsSessionStatisticsReport,enter", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (!sub_100D33A54(a1 + 532) && !*(unsigned char *)(a1 + 513)) {
    sub_1017C6068(a1, 1);
  }
}

void sub_1017C6A98(uint64_t *a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,queryTimingAdvanceForTailBoneDevices", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    __int16 v7 = 0;
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaModemController::queryTimingAdvanceForTailBoneDevices(SimInstance)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  memset(v6, 0, sizeof(v6));
  sub_1000F71D8(v6, a1[109], a1[110], 0x66FD0EB66FD0EB67 * ((a1[110] - a1[109]) >> 3));
  sub_1019D4850(a2, v6, (uint64_t)(a1 + 25), a1[24]);
  *(void *)std::string buf = v6;
  sub_1000FA7C8((void ***)buf);
}

void sub_1017C6C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000FA7C8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1017C6CA8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017C6CD8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v3 = a2 - 1336;
      uint64_t v4 = 1336 * v2;
      do
      {
        sub_10084DD34(v3 + v4);
        v4 -= 1336;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void sub_1017C6D50(void *a1)
{
  *a1 = off_10233C6A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[34];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1018D046C((uint64_t)a1);

  operator delete();
}

void sub_1017C6DC0(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void *sub_1017C6DF0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    BOOL result = sub_1017C6E6C(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8 - 1);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1017C6E50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1017C6E6C(void *a1, unint64_t a2)
{
  if (a2 >= 0x28F5C28F5C28F5DLL) {
    sub_1001D7FD4();
  }
  BOOL result = (char *)sub_1017C6EC4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[100 * v4];
  return result;
}

void *sub_1017C6EC4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x28F5C28F5C28F5DLL) {
    sub_1001D7FA0();
  }
  return operator new(100 * a2);
}

void sub_1017C6F14()
{
}

void *sub_1017C6F28(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233C6F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C6F70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233C6F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017C6F9C(uint64_t a1, qmi::Client *a2)
{
  return sub_1017BD6C4(*(void *)(a1 + 8), a2);
}

uint64_t sub_1017C6FA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017C6FE4()
{
}

void *sub_1017C6FF0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017C7074(void *a1)
{
  *a1 = 0;
  if (sub_1000FFBA8()) {
    sub_1017C7120(2uLL);
  }
  sub_1017C7120(1uLL);
}

void sub_1017C70F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_1017C6CD8((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017C7120(unint64_t a1)
{
}

void *sub_1017C7344(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017C73C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017C744C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017C74D0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017C7554(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017C75D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

qmi::Client *sub_1017C765C(qmi::Client **a1, qmi::Client *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017D0064(result);
    operator delete();
  }
  return result;
}

void sub_1017C76B0()
{
}

void *sub_1017C76C4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233C788;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C770C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233C788;
  a2[1] = v2;
  return result;
}

id sub_1017C7738(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 560);
  if (v2) {
    sub_1018B2D04(v2);
  }

  return sub_1017BCD68(v1);
}

uint64_t sub_1017C7778(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017C77B8()
{
}

void sub_1017C77C8()
{
}

void *sub_1017C77DC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233C808;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C7824(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233C808;
  a2[1] = v2;
  return result;
}

id sub_1017C7850(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 560);
  if (v2) {
    sub_1018B2D0C(v2);
  }

  return sub_1017BCA38(v1);
}

uint64_t sub_1017C7890(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017C78D0()
{
}

void sub_1017C78E0()
{
}

void *sub_1017C78F4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233C888;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C793C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233C888;
  a2[1] = v2;
  return result;
}

void sub_1017C7968(uint64_t a1)
{
}

uint64_t sub_1017C7974(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017C79B4()
{
}

void sub_1017C79C4()
{
}

void *sub_1017C79D8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233C908;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C7A20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233C908;
  a2[1] = v2;
  return result;
}

void sub_1017C7A4C(uint64_t a1)
{
}

uint64_t sub_1017C7A5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017C7A9C()
{
}

void *sub_1017C7AA8@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  BOOL result = sub_1017C7B04(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1017C7AF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1017C7B04(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10233C988;
  sub_1018B134C(a1 + 3, *a2);
  return a1;
}

void sub_1017C7B50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1017C7B64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10233C988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1017C7B84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10233C988;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1017C7BD8(uint64_t a1)
{
  return sub_1017C7BE4(a1 + 24);
}

uint64_t sub_1017C7BE4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1017C7C54(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1017C7C54(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    id v5 = a1;
    do
    {
      sub_1017C7CD4(a3, *((_DWORD *)v5 + 8));
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          id v5 = v7;
        }
        while (!v8);
      }
      id v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1017C7CD4(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      char v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v12 = (void *)*v12;
      }
      sub_1018B1464(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      __int16 v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      int v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v14 = (void *)*v14;
      }
      sub_1018B1464(a2, buf);
      if (v25 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssIratState>::cancelTimeoutEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      sub_1018B1464(a2, __p);
      if (v31 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      __int16 v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      uint64_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      sub_1018B1464(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_1017C816C()
{
}

void *sub_1017C8180(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233C9D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C81C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233C9D8;
  a2[1] = v2;
  return result;
}

void sub_1017C81F4(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1017C820C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017C824C()
{
}

void *sub_1017C825C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017C82E0(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 696;
        sub_1000FA860((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1017C8354()
{
}

void *sub_1017C8368(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10233CAA8;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C83B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CAA8;
  a2[1] = v2;
  return result;
}

void sub_1017C83DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(v3 + 72);
  double v5 = 0.0;
  if (v4 == 9 || v4 == 3)
  {
    double v12 = sub_1018115AC(*(_DWORD *)(v3 + 100));
    double v11 = sub_1018115D0(*(_DWORD *)(v3 + 104));
    double v9 = sub_101811540(*(unsigned __int8 *)(v3 + 110));
    double v8 = sub_101811540(*(unsigned __int8 *)(v3 + 111));
    double v10 = sqrt(v8 * v8 + v9 * v9);
    int v7 = *(unsigned __int8 *)(v3 + 114);
    int v4 = *(_DWORD *)(v3 + 72);
  }
  else
  {
    int v7 = 0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
  }
  double v13 = 0.0;
  if (v4 == 9)
  {
    double v13 = sub_101811524(*(_WORD *)(v3 + 108));
    double v5 = sub_101811574(*(unsigned __int8 *)(v3 + 113));
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(v3 + 100);
    int v16 = *(_DWORD *)(v3 + 104);
    int v17 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)std::string buf = 67177217;
    BOOL v37 = v15;
    __int16 v38 = 1025;
    BOOL v39 = v16;
    __int16 v40 = 2049;
    *(double *)__int16 v41 = v12;
    *(_WORD *)&v41[8] = 2049;
    double v42 = v11;
    __int16 v43 = 2049;
    double v44 = v13;
    __int16 v45 = 2050;
    double v46 = v5;
    __int16 v47 = 2050;
    double v48 = v9;
    __int16 v49 = 2050;
    double v50 = v8;
    __int16 v51 = 2050;
    double v52 = v10;
    __int16 v53 = 1026;
    int v54 = v7;
    __int16 v55 = 1026;
    int v56 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#tb,sendLocation,Fix,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,alt,%{private}.3f,uncAlt,%{public}.3f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,hunc,%{public}.3f,confidence,%{public}d,shape,%{public}d", buf, 0x60u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  unsigned int v18 = *(unsigned __int16 *)(v3 + 32);
  uint64_t v19 = *(unsigned int *)(v3 + 28);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v20 = v19 + 604800000 * v18;
  int v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int16 *)(v3 + 32);
    int v23 = *(_DWORD *)(v3 + 28);
    *(_DWORD *)std::string buf = 67240704;
    BOOL v37 = v22;
    __int16 v38 = 1026;
    BOOL v39 = v23;
    __int16 v40 = 2050;
    *(void *)__int16 v41 = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#tb,sendLocation,gpsWeek,%{public}d,gpsTow,%{public}d,gpsTimestamp,%{public}llu", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  if (sub_1000EF68C(v12, v11)
    && !sub_1000EF668(v12, v11)
    && sub_1000F0E28(v13)
    && sub_1004BDCBC(v5)
    && sub_1004BDCBC(v10))
  {
    float v24 = v13;
    float v25 = v10;
    float v26 = v5;
    sub_1018598AC(a2, v20, 4, 4, 7, 9, 1, 1, v12, v11, v24, v25, v26, -1.0, -1.0, 0.0, 0x44u, 0x44u, (uint64_t)&stru_10233CB08);
  }
  else
  {
    BOOL v27 = sub_1004BDC74(v12);
    BOOL v28 = sub_1004BDC98(v11);
    BOOL v29 = sub_1000F0E28(v13);
    BOOL v30 = sub_1004BDCBC(v10);
    BOOL v31 = sub_1004BDCBC(v5);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67241216;
      BOOL v37 = v27;
      __int16 v38 = 1026;
      BOOL v39 = v28;
      __int16 v40 = 1026;
      *(_DWORD *)__int16 v41 = v29;
      *(_WORD *)&v41[4] = 1026;
      *(_DWORD *)&v41[6] = v30;
      LOWORD(v42) = 1026;
      *(_DWORD *)((char *)&v42 + 2) = v31;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#tb,sendLocation,Error in position fix,wasLatitudeValid,%{public}d,wasLongitudeValid,%{public}d,wasAltitudeValid,%{public}d,wasHorizontalUncertaintyValid,%{public}d,wasVerticalUncertaintyValid,%{public}d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
      int v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
}

uint64_t sub_1017C8B70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017C8BB0()
{
}

void sub_1017C8BBC(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,injectPositionDataError\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

uint64_t sub_1017C8CB0(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 2)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      int v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

uint64_t sub_1017C8D58(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 8)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      int v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

void sub_1017C8E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 848);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 848);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1017C8ED0(uint64_t a1, uint64_t a2)
{
  return sub_1017C9084(a1 + 40, a2 + 40);
}

void *sub_1017C8EDC(uint64_t a1)
{
  return sub_1017C91FC((void *)(a1 + 40));
}

void sub_1017C8EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017C8F48(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017C8F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017C8F48(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017C9040(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017C8FFC((uint64_t)a2);
  }
}

void sub_1017C8FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017C8FFC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 1u);
  return a1;
}

void sub_1017C902C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017C9040(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 1u);
  return a1;
}

void sub_1017C9070(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017C9084(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017C9120()
{
}

void *sub_1017C9134(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233CBA0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C917C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CBA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017C91A8(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_1017BE978(*(void *)(a1 + 8), a2);
}

uint64_t sub_1017C91B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017C91F0()
{
}

void *sub_1017C91FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017C9280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 848);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 848);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1017C9350(uint64_t a1, uint64_t a2)
{
  return sub_1017C9504(a1 + 40, a2 + 40);
}

void *sub_1017C935C(uint64_t a1)
{
  return sub_1017C967C((void *)(a1 + 40));
}

void sub_1017C9364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017C93C8(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017C93B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017C93C8(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017C94C0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017C947C((uint64_t)a2);
  }
}

void sub_1017C9460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017C947C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x20u);
  return a1;
}

void sub_1017C94AC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017C94C0(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x20u);
  return a1;
}

void sub_1017C94F0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017C9504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017C95A0()
{
}

void *sub_1017C95B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233CC60;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C95FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CC60;
  a2[1] = v2;
  return result;
}

void sub_1017C9628(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_1017C9630(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017C9670()
{
}

void *sub_1017C967C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017C9700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 848);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 848);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1017C97D0(uint64_t a1, uint64_t a2)
{
  return sub_1017C9984(a1 + 40, a2 + 40);
}

void *sub_1017C97DC(uint64_t a1)
{
  return sub_1017C9AFC((void *)(a1 + 40));
}

void sub_1017C97E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017C9848(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017C9834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017C9848(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017C9940(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017C98FC((uint64_t)a2);
  }
}

void sub_1017C98E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017C98FC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xBDu);
  return a1;
}

void sub_1017C992C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017C9940(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xBDu);
  return a1;
}

void sub_1017C9970(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017C9984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017C9A20()
{
}

void *sub_1017C9A34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233CD20;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C9A7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CD20;
  a2[1] = v2;
  return result;
}

void sub_1017C9AA8(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_1017C9AB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017C9AF0()
{
}

void *sub_1017C9AFC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017C9B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 848);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 848);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1017C9C50(uint64_t a1, uint64_t a2)
{
  return sub_1017C9E04(a1 + 40, a2 + 40);
}

void *sub_1017C9C5C(uint64_t a1)
{
  return sub_1017C9F7C((void *)(a1 + 40));
}

void sub_1017C9C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017C9CC8(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017C9CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017C9CC8(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017C9DC0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017C9D7C((uint64_t)a2);
  }
}

void sub_1017C9D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017C9D7C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xBEu);
  return a1;
}

void sub_1017C9DAC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017C9DC0(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xBEu);
  return a1;
}

void sub_1017C9DF0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017C9E04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017C9EA0()
{
}

void *sub_1017C9EB4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233CDE0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017C9EFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CDE0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017C9F28(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_1017C1408(*(void *)(a1 + 8), a2);
}

uint64_t sub_1017C9F30(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017C9F70()
{
}

void *sub_1017C9F7C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017CA000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 848);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 848);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1017CA0D0(uint64_t a1, uint64_t a2)
{
  return sub_1017CA284(a1 + 40, a2 + 40);
}

void *sub_1017CA0DC(uint64_t a1)
{
  return sub_1017CA3F8((void *)(a1 + 40));
}

void sub_1017CA0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017CA148(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017CA134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017CA148(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017CA240(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017CA1FC((uint64_t)a2);
  }
}

void sub_1017CA1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CA1FC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xD0u);
  return a1;
}

void sub_1017CA22C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017CA240(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xD0u);
  return a1;
}

void sub_1017CA270(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017CA284(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017CA320()
{
}

void *sub_1017CA334(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233CEA0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017CA37C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CEA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017CA3AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017CA3EC()
{
}

void *sub_1017CA3F8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017CA47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 848);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 848);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1017CA54C(uint64_t a1, uint64_t a2)
{
  return sub_1017CA700(a1 + 40, a2 + 40);
}

void *sub_1017CA558(uint64_t a1)
{
  return sub_1017CA878((void *)(a1 + 40));
}

void sub_1017CA560(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017CA5C4(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017CA5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017CA5C4(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017CA6BC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017CA678((uint64_t)a2);
  }
}

void sub_1017CA65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CA678(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB2u);
  return a1;
}

void sub_1017CA6A8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017CA6BC(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB2u);
  return a1;
}

void sub_1017CA6EC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017CA700(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017CA79C()
{
}

void *sub_1017CA7B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233CF60;
  result[1] = v3;
  return result;
}

uint64_t sub_1017CA7F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233CF60;
  a2[1] = v2;
  return result;
}

void sub_1017CA824(uint64_t a1)
{
}

uint64_t sub_1017CA82C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017CA86C()
{
}

void *sub_1017CA878(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1017CA8FC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1017CA9A0((uint64_t)a1, (std::string::value_type *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_1017CA9A0(uint64_t a1, std::string::value_type *a2, int a3, uint64_t a4)
{
  uint64_t v20 = a2;
  memset(v7, 0, 7);
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)int v9 = 0u;
  long long v10 = 0u;
  __int16 v11 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  double v12 = 0;
  char v15 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = 0;
  char v19 = 0;
  int v21 = a3;
  if (sub_1017CAB0C((uint64_t)v7, &v21, &v20))
  {
    uint64_t v5 = 0;
    uint64_t v20 = 0;
  }
  else if (v20)
  {
    (*(void (**)(void))(*(void *)a4 + 16))();
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v12);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
  return v5;
}

void sub_1017CAA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1017CAAA8(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1017CAB0C(uint64_t a1, int *a2, std::string::value_type **a3)
{
  int v5 = *a2;
  if (*a2 >= 4)
  {
    *(_DWORD *)a1 = *(_DWORD *)*a3;
    uint64_t v6 = *a3;
    *a3 += 4;
    if (v5 != 4)
    {
      *(unsigned char *)(a1 + 4) = v6[4];
      int v7 = v6 + 5;
      *a3 = v7;
      if (v5 != 5)
      {
        *(unsigned char *)(a1 + 5) = *v7;
        uint64_t v8 = *a3 + 1;
        *a3 = v8;
        if (v5 != 6)
        {
          *(unsigned char *)(a1 + 6) = *v8;
          ++*a3;
        }
      }
    }
  }
  int v9 = sub_1017CAC74((int)&v16, a3, v5 - 7, (std::string *)(a1 + 8));
  int v10 = sub_1017CAC74((int)&v17, a3, v9, (std::string *)(a1 + 32));
  if (v10 >= 1)
  {
    *(unsigned char *)(a1 + 56) = **a3;
    __int16 v11 = *a3 + 1;
    *a3 = v11;
    if (v10 != 1)
    {
      *(unsigned char *)(a1 + 57) = *v11;
      ++*a3;
    }
  }
  int v12 = sub_1017CAC74((int)&v18, a3, v10 - 2, (std::string *)(a1 + 64));
  if (v12 >= 1) {
    *(unsigned char *)(a1 + 88) = *(*a3)++;
  }
  int v13 = sub_1017CAC74((int)&v19, a3, v12 - 1, (std::string *)(a1 + 96));
  BOOL v14 = __OFSUB__(v13, 1);
  uint64_t result = (v13 - 1);
  if ((int)result < 0 == v14) {
    *(unsigned char *)(a1 + 120) = *(*a3)++;
  }
  return result;
}

uint64_t sub_1017CAC74(int a1, std::string::value_type **a2, int a3, std::string *this)
{
  if (a3 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *a2;
  int v7 = *a2 + 1;
  *a2 = v7;
  uint64_t v8 = *v6;
  if (v8 < a3)
  {
    sub_1001E9118(this, v7, &v7[v8], *v6);
    *a2 += v8;
  }
  return (~v8 + a3);
}

uint64_t sub_1017CACF0(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 4)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      int v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

uint64_t sub_1017CAD98(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v13 = result;
    if (v7 < 105) {
      goto LABEL_6;
    }
    long long v14 = *(_OWORD *)result;
    long long v15 = *(_OWORD *)(result + 32);
    v21[1] = *(_OWORD *)(result + 16);
    v21[2] = v15;
    v21[0] = v14;
    long long v16 = *(_OWORD *)(result + 48);
    long long v17 = *(_OWORD *)(result + 64);
    long long v18 = *(_OWORD *)(result + 80);
    *(_OWORD *)&v22[9] = *(_OWORD *)(result + 89);
    unsigned char v21[4] = v17;
    *(_OWORD *)int v22 = v18;
    v21[3] = v16;
    if (v7 == 105)
    {
      (*(void (**)(void, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a3 + 16))(*a3, v21, result, v8, v9, v10, v11, v12);
      return 1;
    }
    else
    {
LABEL_6:
      char v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v20 = *(unsigned __int16 *)a1;
      return v19(v20, a2, v13, v7);
    }
  }
  return result;
}

uint64_t sub_1017CAE68(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1017CAF0C((uint64_t)a1, (std::string::value_type *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_1017CAF0C(uint64_t a1, std::string::value_type *a2, int a3, uint64_t a4)
{
  memset(&__p, 0, sizeof(__p));
  if (a3 < 1) {
    goto LABEL_6;
  }
  std::string::size_type v6 = *a2;
  if (v6 < a3) {
    sub_1001E9118(&__p, a2 + 1, &a2[v6 + 1], v6);
  }
  if (~v6 + a3)
  {
LABEL_6:
    uint64_t v7 = 0;
  }
  else
  {
    (*(void (**)(void))(*(void *)a4 + 16))();
    uint64_t v7 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1017CAFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CAFD0(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1017CB074((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_1017CB074(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v25 = a2;
  int v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  __int16 v16 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v17 = 0;
  char v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::string __p = 0;
  int v24 = 0;
  float v26 = (std::string::value_type **)&v25;
  if (sub_1017CB1D4(&v26, a3, (uint64_t)&v7))
  {
    uint64_t v5 = 0;
    uint64_t v25 = 0;
  }
  else if (v25)
  {
    (*(void (**)(void))(*(void *)a4 + 16))();
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v13);
  }
  return v5;
}

void sub_1017CB168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017CB180((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017CB180(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

uint64_t sub_1017CB1D4(std::string::value_type ***a1, int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  char v8 = *a1;
  if (a2 < 4
    || (*(_DWORD *)a3 = *(_DWORD *)*v3, uint64_t v4 = *v3, *v3 += 4, a2 == 4)
    || (*(unsigned char *)(a3 + 4) = v4[4], v5 = v4 + 5, NSObject *v3 = v5, (a2 - 4) <= 8))
  {
    uint64_t v9 = a3;
  }
  else
  {
    *(void *)(a3 + 8) = *(void *)v5;
    std::string::size_type v6 = *v3;
    *v3 += 8;
    uint64_t v9 = a3;
    if (a2 != 13)
    {
      *(unsigned char *)(a3 + 16) = v6[8];
      NSObject *v3 = v6 + 9;
    }
  }
  return sub_1017CB280(&v9, a2 - 14, &v8);
}

uint64_t sub_1017CB280(uint64_t *a1, int a2, std::string::value_type ***a3)
{
  uint64_t v4 = *a1;
  if (a2 < 4
    || (*(_DWORD *)(v4 + 20) = *(_DWORD *)**a3, **a3 += 4, a2 < 8)
    || (*(_DWORD *)(v4 + 24) = *(_DWORD *)**a3, **a3 += 4, (a2 - 12) >= 0xFFFFFFF8))
  {
    int v5 = a2 - 16;
  }
  else
  {
    *(_DWORD *)(v4 + 28) = *(_DWORD *)**a3;
    **a3 += 4;
    int v5 = a2 - 16;
    if ((a2 - 16) <= 0xFFFFFFF7)
    {
      *(_DWORD *)(v4 + 32) = *(_DWORD *)**a3;
      **a3 += 4;
    }
  }
  std::string::size_type v6 = *a3;
  for (uint64_t i = 36; i != 52; i += 2)
  {
    BOOL v8 = __OFSUB__(v5, 2);
    v5 -= 2;
    if (v5 < 0 == v8)
    {
      *(_WORD *)(v4 + i) = *(_WORD *)*v6;
      *v6 += 2;
    }
  }
  int v9 = sub_1017CAC74((int)&v13, *a3, a2 - 32, (std::string *)(v4 + 56));
  uint64_t v14 = v4;
  if (v9 >= 1)
  {
    char v10 = *a3;
    long long v11 = **a3;
    *(unsigned char *)(v4 + 80) = *v11;
    *char v10 = v11 + 1;
  }
  return sub_1017CB3D0(&v14, v9 - 1, a3);
}

uint64_t sub_1017CB3D0(uint64_t *a1, int a2, std::string::value_type ***a3)
{
  uint64_t v4 = *a1;
  if (a2 >= 1)
  {
    int v5 = *a3;
    std::string::size_type v6 = **a3;
    *(unsigned char *)(v4 + 81) = *v6;
    std::string::value_type *v5 = v6 + 1;
  }
  int v7 = sub_1017CAC74((int)&v12, *a3, a2 - 1, (std::string *)(v4 + 88));
  if (v7 >= 1)
  {
    BOOL v8 = *a3;
    int v9 = **a3;
    *(unsigned char *)(v4 + 112) = *v9;
    std::string::value_type *v8 = v9 + 1;
  }
  int v10 = sub_1017CAC74((int)&v13, *a3, v7 - 1, (std::string *)(v4 + 120));
  if (v10 >= 1)
  {
    *(unsigned char *)(v4 + 144) = *(**a3)++;
    if (v10 != 1)
    {
      *(unsigned char *)(v4 + 145) = *(**a3)++;
      if (v10 != 2)
      {
        *(unsigned char *)(v4 + 146) = *(**a3)++;
        if (v10 != 3) {
          *(unsigned char *)(v4 + 147) = *(**a3)++;
        }
      }
    }
  }
  return (v10 - 4);
}

uint64_t sub_1017CB4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017CB590(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017CB7F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1017CB7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017CB894(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017CBAF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1017CBB00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017CBB98(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017CBDF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1017CBE04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017CBE9C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017CC0FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1017CC108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017CC1A0(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017CC400(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1017CC40C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017CC4A4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017CC704(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

int *sub_1017CC710(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (int *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 4)
  {
    int v6 = 0;
  }
  else
  {
    int v7 = *result++;
    int v6 = v7;
    if (v5 == 4) {
      goto LABEL_7;
    }
  }
  uint64_t result = 0;
LABEL_7:
  if (!*(unsigned char *)a3) {
    *(unsigned char *)a3 = 1;
  }
  *(_DWORD *)(a3 + 4) = v6;
  if (!result) {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

uint64_t *sub_1017CC774(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 8)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *result++;
    uint64_t v6 = v7;
    if (v5 == 8) {
      goto LABEL_7;
    }
  }
  uint64_t result = 0;
LABEL_7:
  if (!*(unsigned char *)a3) {
    *(unsigned char *)a3 = 1;
  }
  *(void *)(a3 + 8) = v6;
  if (!result) {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

char *sub_1017CC7D8(qmi::MessageBase *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (char *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 1)
  {
    char v6 = 0;
  }
  else
  {
    char v7 = *result++;
    char v6 = v7;
    if (v5 == 1) {
      goto LABEL_7;
    }
  }
  uint64_t result = 0;
LABEL_7:
  if (!*a3) {
    *a3 = 1;
  }
  a3[1] = v6;
  if (!result) {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1017CC83C(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 8)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)result;
  if (v5 == 8)
  {
LABEL_10:
    unsigned __int8 v7 = 0;
    goto LABEL_11;
  }
  unsigned __int8 v7 = *(unsigned char *)(result + 8);
  if ((v5 - 13) > 0xFFFFFFFA)
  {
LABEL_11:
    __int16 v12 = 0;
    unsigned __int8 v13 = 0;
    unsigned __int8 v14 = 0;
    unsigned __int8 v15 = 0;
    unsigned __int8 v16 = 0;
    unsigned __int8 v17 = 0;
    unsigned __int8 v18 = 0;
    unsigned __int8 v11 = 0;
    int v10 = 0;
    int v8 = 0;
    goto LABEL_12;
  }
  int v8 = *(_DWORD *)(result + 9);
  int v9 = v5 - 17;
  if ((v5 - 17) > 0xFFFFFFF7)
  {
    __int16 v12 = 0;
    unsigned __int8 v13 = 0;
    unsigned __int8 v14 = 0;
    unsigned __int8 v15 = 0;
    unsigned __int8 v16 = 0;
    unsigned __int8 v17 = 0;
    unsigned __int8 v18 = 0;
    unsigned __int8 v11 = 0;
    int v10 = 0;
    goto LABEL_12;
  }
  int v10 = *(_DWORD *)(result + 13);
  if (v5 == 17)
  {
    __int16 v12 = 0;
    unsigned __int8 v13 = 0;
    unsigned __int8 v14 = 0;
    unsigned __int8 v15 = 0;
    unsigned __int8 v16 = 0;
    unsigned __int8 v17 = 0;
    unsigned __int8 v18 = 0;
    unsigned __int8 v11 = 0;
    goto LABEL_12;
  }
  unsigned __int8 v11 = *(unsigned char *)(result + 17);
  if (v5 != 18)
  {
    unsigned __int8 v18 = *(unsigned char *)(result + 18);
    if (v5 == 19)
    {
      __int16 v12 = 0;
      unsigned __int8 v13 = 0;
      unsigned __int8 v14 = 0;
      unsigned __int8 v15 = 0;
      unsigned __int8 v16 = 0;
      unsigned __int8 v17 = 0;
      goto LABEL_12;
    }
    unsigned __int8 v17 = *(unsigned char *)(result + 19);
    if (v5 == 20)
    {
      __int16 v12 = 0;
      unsigned __int8 v13 = 0;
      unsigned __int8 v14 = 0;
      unsigned __int8 v15 = 0;
      unsigned __int8 v16 = 0;
      goto LABEL_12;
    }
    unsigned __int8 v16 = *(unsigned char *)(result + 20);
    if (v5 == 21)
    {
      __int16 v12 = 0;
      unsigned __int8 v13 = 0;
      unsigned __int8 v14 = 0;
      unsigned __int8 v15 = 0;
      goto LABEL_12;
    }
    unsigned __int8 v15 = *(unsigned char *)(result + 21);
    uint64_t v19 = (__int16 *)(result + 22);
    if ((v5 - 24) > 0xFFFFFFFC)
    {
      unsigned __int8 v14 = 0;
      unsigned __int8 v13 = 0;
      __int16 v12 = 0;
    }
    else
    {
      int v20 = v5 - 22;
      __int16 v12 = *v19;
      if (v20 == 2)
      {
        unsigned __int8 v13 = 0;
LABEL_31:
        unsigned __int8 v14 = 0;
        goto LABEL_12;
      }
      unsigned __int8 v13 = *(unsigned char *)(result + 24);
      if (v20 == 3) {
        goto LABEL_31;
      }
      unsigned __int8 v14 = *(unsigned char *)(result + 25);
      uint64_t v19 = (__int16 *)(result + 26);
    }
    if (v9 == 9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  __int16 v12 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int8 v14 = 0;
  unsigned __int8 v15 = 0;
  unsigned __int8 v16 = 0;
  unsigned __int8 v17 = 0;
  unsigned __int8 v18 = 0;
LABEL_12:
  uint64_t v19 = 0;
LABEL_13:
  uint64_t result = *a3;
  *((void *)a3 + 1) = v6;
  a3[16] = v7;
  *((_DWORD *)a3 + 5) = v8;
  *((_DWORD *)a3 + 6) = v10;
  a3[28] = v11;
  a3[29] = v18;
  a3[30] = v17;
  a3[31] = v16;
  a3[32] = v15;
  if (!result) {
    *a3 = 1;
  }
  *((_WORD *)a3 + 17) = v12;
  a3[36] = v13;
  a3[37] = v14;
  if (!v19) {
    *a3 = 0;
  }
  return result;
}

void sub_1017CCA64(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  v10[0] = qmi::MessageBase::findTlvValue(a1);
  v10[1] = v4;
  if (v10[0])
  {
    v6.n128_u8[0] = 0;
    v6.n128_u16[1] = 0;
    *(unint64_t *)((char *)v6.n128_u64 + 4) = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    std::string __p = 0;
    unsigned __int8 v11 = (unsigned char **)v10;
    if (sub_1017CCB28(&v11, v4, (uint64_t)&v6)) {
      v10[0] = 0;
    }
    sub_1017CCE48((unsigned __int8 *)a3, &v6);
    if (__p)
    {
      int v8 = __p;
      operator delete(__p);
    }
    if (!v10[0] && *(unsigned char *)a3)
    {
      int v5 = *(void **)(a3 + 24);
      if (v5)
      {
        *(void *)(a3 + 32) = v5;
        operator delete(v5);
      }
      *(unsigned char *)a3 = 0;
    }
  }
}

void sub_1017CCB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CCB28(unsigned char ***a1, int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (a2 < 1
    || (*(unsigned char *)a3 = **v3, v4 = *v3 + 1, void *v3 = v4, a2 < 3)
    || (*(_WORD *)(a3 + 2) = *v4, v5 = *v3 + 2, void *v3 = v5, (a2 - 7) >= 0xFFFFFFFA))
  {
    unsigned int v7 = a2 - 11;
  }
  else
  {
    *(_DWORD *)(a3 + 4) = *v5;
    __n128 v6 = *v3 + 4;
    void *v3 = v6;
    unsigned int v7 = a2 - 11;
    if (v7 <= 0xFFFFFFF7)
    {
      *(_DWORD *)(a3 + 8) = *v6;
      *v3 += 4;
    }
  }
  return sub_1017CCBB8((_WORD **)v3, v7, (uint64_t *)(a3 + 16));
}

uint64_t sub_1017CCBB8(_WORD **a1, int a2, uint64_t *a3)
{
  uint64_t v9 = a1;
  uint64_t v4 = (a2 - 1);
  if (a2 < 1)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)*a1;
    *a1 = (_WORD *)((char *)*a1 + 1);
  }
  sub_1017CCC3C((uint64_t)a3, v5);
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    uint64_t v4 = sub_1017CCC6C(&v9, v4, v6);
    v6 += 8;
  }
  return v4;
}

void sub_1017CCC3C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1017CCD10((void **)a1, a2 - v2);
  }
}

uint64_t sub_1017CCC6C(_WORD ***a1, int a2, uint64_t a3)
{
  if (a2 < 2) {
    return (a2 - 7);
  }
  uint64_t v3 = *a1;
  *(_WORD *)a3 = ***a1;
  uint64_t v4 = (unsigned char *)(*v3 + 2);
  void *v3 = v4;
  if (a2 == 2) {
    return (a2 - 7);
  }
  *(unsigned char *)(a3 + 2) = *v4;
  unint64_t v5 = (unsigned char *)(*v3 + 1);
  void *v3 = v5;
  if (a2 == 3) {
    return (a2 - 7);
  }
  *(unsigned char *)(a3 + 3) = *v5;
  uint64_t v6 = (unsigned char *)(*v3 + 1);
  void *v3 = v6;
  if (a2 == 4) {
    return (a2 - 7);
  }
  *(unsigned char *)(a3 + 4) = *v6;
  int v8 = (_WORD *)(*v3 + 1);
  void *v3 = v8;
  uint64_t result = (a2 - 7);
  if ((a2 - 7) <= 0xFFFFFFFC)
  {
    *(_WORD *)(a3 + 6) = *v8;
    *v3 += 2;
  }
  return result;
}

void sub_1017CCD10(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_WORD **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 3)
  {
    if (a2)
    {
      uint64_t v14 = 8 * a2;
      unsigned __int8 v15 = &v7[4 * a2];
      do
      {
        v7[3] = 0;
        *(_DWORD *)uint64_t v7 = 0;
        *((unsigned char *)v7 + 4) = 0;
        v7 += 4;
        v14 -= 8;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unsigned __int8 v13 = (char *)sub_1000DA54C(v4, v12);
    }
    else {
      unsigned __int8 v13 = 0;
    }
    unsigned __int8 v16 = &v13[8 * v10];
    unsigned __int8 v17 = &v16[8 * a2];
    uint64_t v18 = 8 * a2;
    uint64_t v19 = v16;
    do
    {
      *((_WORD *)v19 + 3) = 0;
      *(_DWORD *)uint64_t v19 = 0;
      v19[4] = 0;
      v19 += 8;
      v18 -= 8;
    }
    while (v18);
    int v20 = &v13[8 * v12];
    uint64_t v22 = (char *)*a1;
    int v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v16 - 1) = v23;
        v16 -= 8;
      }
      while (v21 != v22);
      int v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

__n128 sub_1017CCE48(unsigned __int8 *a1, __n128 *a2)
{
  int v2 = *a1;
  unsigned __int32 v3 = a2->n128_u32[2];
  *((void *)a1 + 1) = a2->n128_u64[0];
  *((_DWORD *)a1 + 4) = v3;
  if (v2)
  {
    result.n128_u64[0] = sub_1000F4EBC((uint64_t)(a1 + 24), a2 + 1).n128_u64[0];
  }
  else
  {
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    __n128 result = a2[1];
    *(__n128 *)(a1 + 24) = result;
    *((void *)a1 + 5) = a2[2].n128_u64[0];
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    *a1 = 1;
  }
  return result;
}

void sub_1017CCEA0(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (unsigned char *)qmi::MessageBase::findTlvValue(a1);
  v8[1] = v4;
  if (v8[0])
  {
    __n128 __p = 0uLL;
    uint64_t v7 = 0;
    if (sub_1017CCF50(v8, (int)v4, &__p)) {
      v8[0] = 0;
    }
    sub_1017CDAAC(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(unsigned char *)a3)
    {
      unint64_t v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(void *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(unsigned char *)a3 = 0;
    }
  }
}

void sub_1017CCF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CCF50(unsigned char **a1, int a2, void *a3)
{
  unint64_t v9 = a1;
  uint64_t v4 = (a2 - 1);
  if (a2 < 1) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *(*a1)++;
  }
  sub_1017CCFD4((uint64_t)a3, v5);
  uint64_t v6 = (_WORD *)*a3;
  uint64_t v7 = (_WORD *)a3[1];
  while (v6 != v7)
  {
    uint64_t v4 = sub_1017CD018(&v9, v4, v6);
    v6 += 50;
  }
  return v4;
}

void sub_1017CCFD4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1017CD068((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 100 * a2;
  }
}

uint64_t sub_1017CD018(unsigned char ***a1, int a2, _WORD *a3)
{
  BOOL v3 = *a1;
  uint64_t v7 = *a1;
  uint64_t v8 = a3;
  BOOL v4 = __OFSUB__(a2, 2);
  int v5 = a2 - 2;
  if (v5 < 0 == v4)
  {
    *a3 = *(_WORD *)*v3;
    *v3 += 2;
  }
  return sub_1017CD3D0((uint64_t *)&v8, v5, &v7);
}

void sub_1017CD068(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x8F5C28F5C28F5C29 * ((uint64_t)&v6[-v7] >> 2) >= a2)
  {
    sub_1017CD2A8((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v8 = 0x8F5C28F5C28F5C29 * ((v7 - (uint64_t)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x28F5C28F5C28F5CLL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x8F5C28F5C28F5C29 * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x147AE147AE147AELL) {
      unint64_t v11 = 0x28F5C28F5C28F5CLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v26 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_1017C6EC4(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v23 = v12;
    int v24 = &v12[100 * v8];
    *(void *)&long long v25 = v24;
    *((void *)&v25 + 1) = &v12[100 * v11];
    sub_1017CD33C((uint64_t)&v23, a2);
    uint64_t v14 = *a1;
    unsigned __int8 v13 = a1[1];
    unsigned __int8 v15 = v24;
    if (v13 == *a1)
    {
      int v21 = a1[1];
    }
    else
    {
      do
      {
        long long v16 = *(_OWORD *)(v13 - 100);
        long long v17 = *(_OWORD *)(v13 - 84);
        *(_OWORD *)(v15 - 68) = *(_OWORD *)(v13 - 68);
        *(_OWORD *)(v15 - 84) = v17;
        *(_OWORD *)(v15 - 100) = v16;
        long long v18 = *(_OWORD *)(v13 - 52);
        long long v19 = *(_OWORD *)(v13 - 36);
        long long v20 = *(_OWORD *)(v13 - 20);
        *(_DWORD *)(v15 - 5) = *(_DWORD *)(v13 - 5);
        *(_OWORD *)(v15 - 20) = v20;
        *(_OWORD *)(v15 - 36) = v19;
        *(_OWORD *)(v15 - 52) = v18;
        v15 -= 100;
        v13 -= 100;
      }
      while (v13 != v14);
      int v21 = *a1;
      unsigned __int8 v13 = a1[1];
    }
    *a1 = v15;
    uint64_t v22 = a1[2];
    *(_OWORD *)(a1 + 1) = v25;
    *(void *)&long long v25 = v13;
    *((void *)&v25 + 1) = v22;
    uint64_t v23 = v21;
    int v24 = v21;
    if (v13 != v21) {
      *(void *)&long long v25 = &v21[(v13 - v21 - 100) % 0x64uLL];
    }
    if (v21) {
      operator delete(v21);
    }
  }
}

void sub_1017CD250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CD2A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 + 100 * a2;
    do
    {
      uint64_t v5 = v2 + v3;
      *(_WORD *)(v5 + 30) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(unsigned char *)(v5 + 36) = 0;
      *(_DWORD *)(v5 + 38) = 0;
      *(_DWORD *)(v5 + 44) = 0;
      *(_WORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 52) = 0;
      *(_WORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 80) = 0;
      *(_WORD *)(v5 + 84) = 0;
      *(_DWORD *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 4) = 0;
      *(_DWORD *)(v5 + 6) = 0;
      *(unsigned char *)(v5 + 10) = 0;
      *(void *)(v5 + 20) = 0;
      *(void *)(v5 + 12) = 0;
      *(unsigned char *)(v5 + 28) = 0;
      *(void *)(v5 + 68) = 0;
      *(void *)(v5 + 60) = 0;
      *(_WORD *)(v5 + 76) = 0;
      *(void *)(v5 + 88) = 0;
      v3 += 100;
      *(_DWORD *)(v5 + 95) = 0;
    }
    while (100 * a2 != v3);
  }
  else
  {
    uint64_t v4 = *(void *)(result + 8);
  }
  *(void *)(result + 8) = v4;
  return result;
}

uint64_t sub_1017CD33C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 + 100 * a2;
    do
    {
      uint64_t v5 = v2 + v3;
      *(_WORD *)(v5 + 30) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(unsigned char *)(v5 + 36) = 0;
      *(_DWORD *)(v5 + 38) = 0;
      *(_DWORD *)(v5 + 44) = 0;
      *(_WORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 52) = 0;
      *(_WORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 80) = 0;
      *(_WORD *)(v5 + 84) = 0;
      *(_DWORD *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 4) = 0;
      *(_DWORD *)(v5 + 6) = 0;
      *(unsigned char *)(v5 + 10) = 0;
      *(void *)(v5 + 20) = 0;
      *(void *)(v5 + 12) = 0;
      *(unsigned char *)(v5 + 28) = 0;
      *(void *)(v5 + 68) = 0;
      *(void *)(v5 + 60) = 0;
      *(_WORD *)(v5 + 76) = 0;
      *(void *)(v5 + 88) = 0;
      v3 += 100;
      *(_DWORD *)(v5 + 95) = 0;
    }
    while (100 * a2 != v3);
  }
  else
  {
    uint64_t v4 = *(void *)(result + 16);
  }
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t sub_1017CD3D0(uint64_t *a1, int a2, unsigned char ***a3)
{
  uint64_t v3 = *a1;
  if (a2 < 1) {
    goto LABEL_7;
  }
  *(unsigned char *)(v3 + 2) = *(**a3)++;
  if (a2 == 1) {
    goto LABEL_7;
  }
  *(unsigned char *)(v3 + 3) = *(**a3)++;
  if (a2 == 2
    || (*(unsigned char *)(v3 + 4) = ***a3, ++**a3, (a2 - 2) < 3)
    || (*(_WORD *)(v3 + 6) = *(_WORD *)**a3, **a3 += 2, a2 == 5)
    || (*(unsigned char *)(v3 + 8) = ***a3, ++**a3, a2 == 6))
  {
LABEL_7:
    uint64_t v5 = v3;
  }
  else
  {
    *(unsigned char *)(v3 + 9) = *(**a3)++;
    uint64_t v5 = v3;
    if (a2 != 7) {
      *(unsigned char *)(v3 + 10) = *(**a3)++;
    }
  }
  return sub_1017CD524(&v5, a2 - 8, (_WORD ***)a3);
}

uint64_t sub_1017CD524(uint64_t *a1, int a2, _WORD ***a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  uint64_t v5 = 12;
  int v6 = a2;
  do
  {
    BOOL v7 = __OFSUB__(v6, 4);
    v6 -= 4;
    if (v6 < 0 == v7)
    {
      *(_DWORD *)(v3 + v5) = *(_DWORD *)*v4;
      *v4 += 4;
    }
    v5 += 4;
  }
  while (v5 != 24);
  if (a2 - 12 < 1) {
    goto LABEL_12;
  }
  *(unsigned char *)(v3 + 24) = *(unsigned char *)**a3;
  **a3 = (_WORD *)((char *)**a3 + 1);
  if (a2 == 13
    || (*(unsigned char *)(v3 + 25) = *(unsigned char *)**a3, **a3 = (_WORD *)((char *)**a3 + 1), (a2 - 13) < 3)
    || (*(_WORD *)(v3 + 26) = ***a3, ++**a3, a2 == 16)
    || (*(unsigned char *)(v3 + 28) = *(unsigned char *)**a3, **a3 = (_WORD *)((char *)**a3 + 1), (a2 - 19) >= 0xFFFFFFFD))
  {
LABEL_12:
    uint64_t v10 = v3;
    unsigned int v8 = a2 - 23;
  }
  else
  {
    *(_WORD *)(v3 + 30) = *(**a3)++;
    uint64_t v10 = v3;
    unsigned int v8 = a2 - 23;
    if (v8 <= 0xFFFFFFF9)
    {
      *(_DWORD *)(v3 + 32) = *(_DWORD *)**a3;
      **a3 += 2;
    }
  }
  return sub_1017CD694(&v10, v8, a3);
}

uint64_t sub_1017CD694(uint64_t *a1, int a2, _WORD ***a3)
{
  uint64_t v3 = *a1;
  if (a2 < 1) {
    goto LABEL_9;
  }
  *(unsigned char *)(v3 + 36) = *(unsigned char *)**a3;
  **a3 = (_WORD *)((char *)**a3 + 1);
  if (a2 < 3) {
    goto LABEL_9;
  }
  *(_WORD *)(v3 + 38) = *(**a3)++;
  if ((a2 - 5) > 0xFFFFFFFB
    || (*(_WORD *)(v3 + 40) = ***a3, ++**a3, (a2 - 9) > 0xFFFFFFF9)
    || (*(_DWORD *)(v3 + 44) = *(_DWORD *)**a3, **a3 += 2, (a2 - 11) > 0xFFFFFFF9)
    || (*(_WORD *)(v3 + 48) = ***a3, ++**a3, (a2 - 15) >= 0xFFFFFFFA))
  {
LABEL_9:
    uint64_t v6 = v3;
    unsigned int v4 = a2 - 17;
  }
  else
  {
    *(_DWORD *)(v3 + 52) = *(_DWORD *)**a3;
    **a3 += 2;
    uint64_t v6 = v3;
    unsigned int v4 = a2 - 17;
    if (v4 <= 0xFFFFFFF9) {
      *(_WORD *)(v3 + 56) = *(**a3)++;
    }
  }
  return sub_1017CD7F8(&v6, v4, (unsigned char ***)a3);
}

uint64_t sub_1017CD7F8(uint64_t *a1, int a2, unsigned char ***a3)
{
  uint64_t v3 = *a1;
  if (a2 < 4) {
    goto LABEL_7;
  }
  *(_DWORD *)(v3 + 60) = *(_DWORD *)**a3;
  **a3 += 4;
  if (a2 < 6) {
    goto LABEL_7;
  }
  *(_WORD *)(v3 + 64) = *(_WORD *)**a3;
  **a3 += 2;
  if (a2 == 6
    || (*(unsigned char *)(v3 + 66) = ***a3, ++**a3, a2 == 7)
    || (*(unsigned char *)(v3 + 67) = ***a3, ++**a3, a2 == 8)
    || (*(unsigned char *)(v3 + 68) = ***a3, ++**a3, a2 == 9))
  {
LABEL_7:
    uint64_t v6 = v3;
    unsigned int v4 = a2 - 12;
  }
  else
  {
    *(unsigned char *)(v3 + 69) = *(**a3)++;
    uint64_t v6 = v3;
    unsigned int v4 = a2 - 12;
    if (v4 <= 0xFFFFFFFC)
    {
      *(_WORD *)(v3 + 70) = *(_WORD *)**a3;
      **a3 += 2;
    }
  }
  return sub_1017CD950(&v6, v4, (_DWORD ***)a3);
}

uint64_t sub_1017CD950(uint64_t *a1, int a2, _DWORD ***a3)
{
  if (a2 >= 4)
  {
    uint64_t v3 = *a1;
    *(_DWORD *)(*a1 + 72) = *(**a3)++;
    if (a2 >= 6)
    {
      *(_WORD *)(v3 + 76) = *(_WORD *)**a3;
      **a3 = (_DWORD *)((char *)**a3 + 2);
      if ((a2 - 10) <= 0xFFFFFFF9)
      {
        *(_DWORD *)(v3 + 80) = *(**a3)++;
        if ((a2 - 12) <= 0xFFFFFFF9)
        {
          *(_WORD *)(v3 + 84) = *(_WORD *)**a3;
          **a3 = (_DWORD *)((char *)**a3 + 2);
          if ((a2 - 16) <= 0xFFFFFFF9)
          {
            *(_DWORD *)(v3 + 88) = *(**a3)++;
            if ((a2 - 20) <= 0xFFFFFFF7)
            {
              *(_DWORD *)(v3 + 92) = *(**a3)++;
              if ((a2 - 16) >= 6)
              {
                *(_WORD *)(v3 + 96) = *(_WORD *)**a3;
                **a3 = (_DWORD *)((char *)**a3 + 2);
                if (a2 != 22)
                {
                  *(unsigned char *)(v3 + 98) = *(unsigned char *)**a3;
                  **a3 = (_DWORD *)((char *)**a3 + 1);
                }
              }
            }
          }
        }
      }
    }
  }
  return (a2 - 23);
}

__n128 sub_1017CDAAC(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)a1)
  {
    result.n128_u64[0] = sub_1000F4EBC(a1 + 8, a2).n128_u64[0];
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    __n128 result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *(void *)(a1 + 24) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)a1 = 1;
  }
  return result;
}

void sub_1017CDAF0()
{
}

__n128 sub_1017CDB04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233CFF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1017CDB50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233CFF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1017CDB80(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  unsigned int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,sendNiResponse,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_10185AACC(a2, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 **)(a1 + 16), (uint64_t)&stru_10233D050);
}

uint64_t sub_1017CDD50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017CDD90()
{
}

void sub_1017CDD9C(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)a2;
    int v5 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67240706;
    int v8 = v4;
    __int16 v9 = 1026;
    int v10 = v5;
    __int16 v11 = 2082;
    uint64_t v12 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#supl,sendNiResponse,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    qmi::asString();
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_1017CDFA4(uint64_t a1)
{
  *(void *)a1 = off_10233D090;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1017CDFF4(uint64_t a1)
{
  *(void *)a1 = off_10233D090;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_1017CE064(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = off_10233D090;
  sub_1017CE498((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1017CE0B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017CE0CC(uint64_t a1, void *a2)
{
  *a2 = off_10233D090;
  return sub_1017CE498((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1017CE0F8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void sub_1017CE10C(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_1017CE150(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1 + 16;
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    *(_DWORD *)std::string buf = 67240962;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v21) = 1026;
    *(_DWORD *)((char *)&v21 + 2) = v7;
    HIWORD(v21) = 1026;
    LODWORD(v22) = v8;
    WORD2(v22) = 2082;
    *(void *)((char *)&v22 + 6) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,setApnProfilesReq,instance,%{public}d,apn,%{public}d,pdnType,%{public}d,apnName,%{public}s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    uint64_t v13 = a1 + 16;
    int v14 = *(_DWORD *)(a1 + 40);
    int v15 = *(_DWORD *)(a1 + 8);
    int v16 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v13 = *(void *)(a1 + 16);
    }
    LODWORD(__p[0]) = 67240962;
    HIDWORD(__p[0]) = v14;
    LOWORD(__p[1]) = 1026;
    *(_DWORD *)((char *)&__p[1] + 2) = v15;
    HIWORD(__p[1]) = 1026;
    LODWORD(v19[0]) = v16;
    WORD2(v19[0]) = 2082;
    *(void *)((char *)v19 + 6) = v13;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
    unsigned int v12 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    *(_OWORD *)__n128 __p = *(_OWORD *)(a1 + 16);
    v19[0] = *(void *)(a1 + 32);
    unsigned int v12 = v9;
  }
  *(void *)std::string buf = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  *(void *)&long long v22 = sub_1017CE4F8;
  *((void *)&v22 + 1) = &unk_10233D0F0;
  unsigned int v23 = v12;
  sub_10185B8E0(a2, v9, v10, v11, (uint64_t *)__p, (uint64_t)buf);
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1017CE428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017CE44C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10233D110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017CE48C()
{
  return &off_10233D110;
}

uint64_t sub_1017CE498(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

void sub_1017CE4F8(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 32);
    int v6 = *a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67240962;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = v6;
    __int16 v13 = 1026;
    int v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,#supl,setApnProfilesRsp,instance,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    qmi::asString();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void *sub_1017CE724(void *a1)
{
  *a1 = off_10233D130;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1017CE774(void *a1)
{
  *a1 = off_10233D130;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

unsigned char *sub_1017CE7E4(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = off_10233D130;
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  sub_10016989C((void *)v2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  return v2;
}

void sub_1017CE84C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1017CE860(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233D130;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return sub_10016989C((void *)(a2 + 16), *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
}

void sub_1017CE8A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_1017CE8B8(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_1017CE8FC(uint64_t a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1017CE9C4;
  v4[3] = &unk_10233D190;
  char v5 = v3;
  sub_10185E39C(a2, v3, a1 + 16, (uint64_t)v4);
}

uint64_t sub_1017CE978(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017CE9B8()
{
}

void sub_1017CE9C4(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 32);
    int v6 = *a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67240962;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = v6;
    __int16 v13 = 1026;
    int v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,#supl,sendInjectSuplCertRsp,index,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    qmi::asString();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_1017CEBF4()
{
}

unsigned char *sub_1017CEC08(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_10233D1D0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1017CEC54(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_10233D1D0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1017CEC84(uint64_t a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1017CED48;
  v4[3] = &unk_10233D190;
  char v5 = v3;
  sub_10185E694(a2, v3, (uint64_t)v4);
}

uint64_t sub_1017CECFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017CED3C()
{
}

void sub_1017CED48(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 32);
    int v6 = *a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67240962;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = v6;
    __int16 v13 = 1026;
    int v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,#supl,sendDeleteSuplCert,index,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
    qmi::asString();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaModemController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_1017CEF74(_DWORD *a1)
{
  sub_101329AF8();
  if (!v3) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"fErrorProcDelayTimer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
  }
  int v10 = *(NSObject **)(v1 + 984);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "fErrorProcDelayTimer is null", "{\"msg%{public}.0s\":\"fErrorProcDelayTimer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 984), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"fErrorProcDelayTimer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 76;
}

void sub_1017CF0F8(_DWORD *a1)
{
  sub_101329AF8();
  if (!v3) {
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"#irat,fGnssIratState is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
  }
  int v10 = *(NSObject **)(v1 + 984);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "#irat,fGnssIratState is null", "{\"msg%{public}.0s\":\"#irat,fGnssIratState is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_10233C670);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 984), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"#irat,fGnssIratState is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 72;
}

void sub_1017CF27C()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    v0 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
    }
    uint64_t v1 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v1, v2, v3, "Invalid sim instance index", "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233C670);
      }
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10233C670);
  }
}

void sub_1017CF438(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  *(unsigned char *)a1 = 0;
}

void sub_1017CF46C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  *(unsigned char *)a1 = 0;
}

uint64_t sub_1017CF4A0(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_10084F794(a1 + 40, a3);
  [objc_msgSend(a2, "silo") queue];
  sub_100134750(&v12, "QMI-PDC");
  sub_100134750(&__p, "location");
  qmi::Client::create();
  long long v5 = *(_OWORD *)&v15[8];
  *(_OWORD *)&v15[8] = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  *(void *)(a1 + 32) = a2;
  v9[5] = _NSConcreteStackBlock;
  v9[6] = 3221225472;
  v9[7] = sub_1017CF7AC;
  v9[8] = &unk_1022A3020;
  v9[9] = a1;
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1017CFD78;
  v9[3] = &unk_1022ACDD8;
  void v9[4] = a1;
  *(void *)std::string buf = _NSConcreteStackBlock;
  *(void *)uint64_t v15 = 3221225472;
  *(void *)&v15[8] = sub_1017D02F8;
  *(void *)&v15[16] = &unk_10233CB70;
  uint64_t v16 = v9;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)a1);
  qmi::Client::start((qmi::Client *)a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D280);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)std::string buf = 68289026;
    *(_WORD *)uint64_t v15 = 2082;
    *(void *)&v15[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#pdc,Initialized\"}", buf, 0x12u);
  }
  return a1;
}

void sub_1017CF754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_10068280C(v31);
  qmi::Client::~Client(v30);
  _Unwind_Resume(a1);
}

void sub_1017CF7AC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D280);
  }
  v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,kEventStarted", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D280);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiPdcController::CLQmiPdcController(CLIntersiloUniverse *, PdcRefreshCallback)_block_invoke", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  sub_1017CF948();
}

void sub_1017CF948()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D280);
  }
  v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,sendRegisterRequest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D280);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdcController::sendRegisterRequest()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v6, 0x20u);
  *sub_1017D0498((uint64_t)v6, 16) = 1;
  *sub_1017D0724((uint64_t)v6, 17) = 0;
  uint64_t v4 = QMIServiceMsg::create((QMIServiceMsg *)v6, v1);
  *(void *)std::string buf = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_1017D0960;
  int v10 = &unk_10233CB70;
  char v11 = &stru_10233D260;
  uint64_t v2 = _Block_copy(buf);
  aBlock = v2;
  if (v4)
  {
    qmi::Client::send();
    uint64_t v2 = aBlock;
  }
  if (v2) {
    _Block_release(v2);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v6);
}

void sub_1017CFBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1017CFBF0(id a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D280);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,kEventStopped", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D280);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiPdcController::CLQmiPdcController(CLIntersiloUniverse *, PdcRefreshCallback)_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

uint64_t sub_1017CFD78(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_1017CFD80(*(void *)(a1 + 32), a2);
}

uint64_t sub_1017CFD80(uint64_t a1, qmi::MessageBase *this)
{
  TlvValue = (int *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    if (v5 == 4)
    {
      int v6 = *TlvValue;
      goto LABEL_6;
    }
    qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)this, 1, TlvValue, v5);
  }
  int v6 = -1;
LABEL_6:
  uint64_t v7 = (int *)qmi::MessageBase::findTlvValue(this);
  if (v7)
  {
    if (v8 == 4)
    {
      int v9 = *v7;
      goto LABEL_11;
    }
    qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)this, 16, v7, v8);
  }
  int v9 = -1;
LABEL_11:
  uint64_t v10 = (int *)qmi::MessageBase::findTlvValue(this);
  if (v10)
  {
    if (v11 == 4)
    {
      int v12 = *v10;
      goto LABEL_16;
    }
    qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)this, 17, v10, v11);
  }
  int v12 = -1;
LABEL_16:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D280);
  }
  char v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109632;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v12;
    __int16 v20 = 1024;
    int v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,RefreshInd,sub,%d,slot,%d,event,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D280);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdcController::handleRefreshInd(const pdc::Refresh::Indication &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    if (v6 == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
  }
  return result;
}

void sub_1017D0064(qmi::Client *a1)
{
  sub_10068280C((void *)a1 + 5);

  qmi::Client::~Client(a1);
}

void sub_1017D00A0(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D280);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67109378;
    int v7 = v4;
    __int16 v8 = 2080;
    uint64_t v9 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,indicationRegisterResponse,error,%d,errorStr,%s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D280);
    }
    qmi::asString();
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdcController::sendRegisterRequest()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_1017D0280(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    qmi::Client::send();
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1017D02C8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017D02F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017D035C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017D0348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017D035C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017D0454(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017D0410((uint64_t)a2);
  }
}

void sub_1017D03F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017D0410(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x2Fu);
  return a1;
}

void sub_1017D0440(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017D0454(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Fu);
  return a1;
}

void sub_1017D0484(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1017D0498(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1017D0548();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1017D0548()
{
}

void sub_1017D0678()
{
}

uint64_t sub_1017D068C(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  uint64_t v4 = *a2 + 1;
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_1017D06C8()
{
}

char *sub_1017D0724(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1017D07D4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1017D07D4()
{
}

void sub_1017D0904()
{
}

void sub_1017D0960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017D09C4(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017D09B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017D09C4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1017D0A78(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017C947C((uint64_t)a2);
  }
}

void sub_1017D0A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_1017D0A78(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x20u);
  return a1;
}

void sub_1017D0AA8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017D0ABC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = a3;
  uint64_t v11 = (uint64_t)(a1 + 5);
  sub_1017DB7F4((uint64_t)(a1 + 1), a5);
  sub_1017DB88C(v11, a6);
  sub_1017DB924((uint64_t)(a1 + 9), a7);
  sub_100134750(&__p, off_102479E68[a2]);
  *(void *)std::string buf = a1;
  operator new();
}

void sub_1017D127C()
{
}

void sub_1017D1298(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1017D12A0()
{
}

void sub_1017D12A8()
{
}

void sub_1017D12B0()
{
}

void sub_1017D12B8()
{
}

uint64_t **sub_1017D1454(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    int v5 = a3;
    int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1017DE248(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_10233D3A0);
LABEL_3:
  __int16 v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    if (v7) {
      uint64_t v11 = "Session";
    }
    else {
      uint64_t v11 = "Idle";
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v25) >= 0) {
      int v12 = __p;
    }
    else {
      int v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v27 = 1024;
    int v28 = v7;
    __int16 v29 = 2080;
    BOOL v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    if (v7) {
      uint64_t v15 = "Session";
    }
    else {
      uint64_t v15 = "Idle";
    }
    sub_100134750(v18, v15);
    if (v19 >= 0) {
      uint64_t v16 = v18;
    }
    else {
      uint64_t v16 = (void **)v18[0];
    }
    *(_DWORD *)__n128 __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v22 = 1024;
    int v23 = v7;
    __int16 v24 = 2080;
    long long v25 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrSupl>::setStateHandler(State, StateHandler) [T = CLNilrSupl]", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  *(void *)std::string buf = &v20;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v20, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1017D17A8(uint64_t a1, int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
      *(void *)(a1 + 360) = 0x4060000000000000;
      sub_1017D5A6C(a1 + 1864);
      *(_DWORD *)(a1 + 1864) = 1;
      *(_DWORD *)(a1 + 1908) = 2 * *(unsigned __int8 *)(a1 + 371);
      *(_DWORD *)(a1 + 1912) = 1;
      *(void *)(a1 + 1872) = *(void *)(a1 + 360);
      *(CFAbsoluteTime *)(a1 + 1888) = CFAbsoluteTimeGetCurrent();
      uint64_t v18 = *(void *)(a1 + 96);
      if (!v18) {
        goto LABEL_165;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, a1 + 1864);
      v112[0] = off_10233D720;
      v112[1] = a1;
      v112[3] = v112;
      uint64_t v19 = *(void *)(a1 + 32);
      if (!v19) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v19 + 48))(v19, v112);
      sub_1017DCC68(v112);
      uint64_t v20 = *(void *)(a1 + 232);
      if (*(int *)(v20 + 8) <= 0)
      {
        sub_100134750(buf, "Session");
        sub_100134750(v110, "Enter");
        if ((v111 & 0x80u) == 0) {
          int v21 = (const std::string::value_type *)v110;
        }
        else {
          int v21 = (const std::string::value_type *)v110[0];
        }
        if ((v111 & 0x80u) == 0) {
          std::string::size_type v22 = v111;
        }
        else {
          std::string::size_type v22 = (std::string::size_type)v110[1];
        }
        int v23 = std::string::append(buf, v21, v22);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v107 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)__n128 __p = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        sub_100EBBFD8(v20, (uint64_t *)__p);
        if (SHIBYTE(v107) < 0) {
          operator delete(__p[0]);
        }
        if ((char)v111 < 0) {
          operator delete(v110[0]);
        }
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      sub_1017D787C(a1 + 104, 15, *(double *)(a1 + 360));
      if (*(unsigned char *)(a1 + 424))
      {
        v109[0] = off_10233D7A0;
        v109[3] = v109;
        uint64_t v25 = *(void *)(a1 + 32);
        if (!v25) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v25 + 48))(v25, v109);
        sub_1017DCC68(v109);
        sub_10198CD34(*(void *)(a1 + 2600));
      }
      goto LABEL_126;
    case 1:
      uint64_t v26 = *(void *)(a1 + 232);
      if (*(int *)(v26 + 8) <= 0)
      {
        sub_1017DE3C8();
        __break(1u);
LABEL_169:
        dispatch_once(&qword_1024193E0, &stru_10233D380);
LABEL_101:
        int v42 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v42;
        __int16 v43 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v43);
        if (v43 != buf) {
          free(v43);
        }
      }
      else
      {
        sub_100EBC6AC(v26);
        sub_1017D8368(a1 + 104, 15);
        *(_DWORD *)(a1 + 1864) = 2;
        *(CFAbsoluteTime *)(a1 + 1896) = CFAbsoluteTimeGetCurrent();
        if (!*(_DWORD *)(a1 + 1868)) {
          *(_DWORD *)(a1 + 1868) = 3;
        }
        uint64_t v27 = *(void *)(a1 + 96);
        if (!v27) {
LABEL_165:
        }
          sub_10015E48C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, a1 + 1864);
        if (*(unsigned char *)(a1 + 2472)) {
          sub_1017D8368(a1 + 104, 18);
        }
        if (*(char *)(a1 + 2591) < 0)
        {
          **(unsigned char **)(a1 + 2568) = 0;
          *(void *)(a1 + 2576) = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 2568) = 0;
          *(unsigned char *)(a1 + 2591) = 0;
        }
      }
      goto LABEL_126;
    case 3:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      BOOL v31 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,Emergency call end", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v60 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v60;
        int v61 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v61);
        if (v61 != buf) {
          free(v61);
        }
      }
      if (*(unsigned char *)(a1 + 314)) {
        goto LABEL_126;
      }
      sub_1017D87FC(a1);
      *(_DWORD *)(a1 + 1868) = 7;
      *(unsigned char *)(a1 + 2092) = 1;
      memcpy(v105, (const void *)(a1 + 1864), sizeof(v105));
      sub_1017D88C4(a1, v105);
      goto LABEL_118;
    case 4:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v33 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v34 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,received SUPL init while in session. Dropping", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v62 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v62;
        int v63 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v63);
        if (v63 != buf) {
          free(v63);
        }
      }
      v88[0] = 0;
      *(void *)((char *)v88 + 5) = 0;
      uint64_t v99 = 0;
      char v100 = 0;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 3) = 0;
      buf[0].__r_.__value_.__s.__data_[11] = 0;
      __asm { FMOV            V1.2D, #-1.0 }
      long long v76 = _Q1;
      long long v77 = _Q1;
      uint64_t v75 = 0x1800000000;
      uint64_t v78 = -1;
      int v79 = 1;
      uint64_t v80 = 0;
      char v81 = 0;
      int64x2_t v82 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      long long v83 = xmmword_101D2A480;
      long long v84 = _Q1;
      unint64_t v85 = 0xBFF0000000000000;
      uint64_t v86 = 0;
      int v87 = 2;
      int v89 = 0;
      char v90 = 0;
      unint64_t v91 = 0xFFFFFFFF00000000;
      int v92 = -1;
      int64x2_t v93 = v82;
      unint64_t v94 = 0xBFF0000000000000;
      unint64_t v95 = 0xFFFFFFFF00000000;
      int v96 = 0;
      __int16 v97 = 255;
      int v98 = 1;
      uint64_t data_low = LODWORD(buf[0].__r_.__value_.__l.__data_);
      int v102 = 0;
      int64x2_t v103 = v82;
      unint64_t v104 = 0xBFF0000000000000;
      sub_1017D4268(a1, &v75);
      goto LABEL_126;
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,asked to abort", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v56 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v56;
        int v57 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v57);
        if (v57 != buf) {
          free(v57);
        }
      }
      sub_1017D87FC(a1);
      *(_DWORD *)(a1 + 1868) = 19;
      *(unsigned char *)(a1 + 2092) = 1;
      memcpy(v74, (const void *)(a1 + 1864), sizeof(v74));
      sub_1017D88C4(a1, v74);
      goto LABEL_118;
    case 6:
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10011CEAC(a2, v110);
        uint64_t v6 = (v111 & 0x80u) == 0 ? v110 : (void **)v110[0];
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,carrier/op change. Abort\", \"event\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
        if ((char)v111 < 0) {
          operator delete(v110[0]);
        }
      }
      sub_1017D87FC(a1);
      int v7 = (const void *)(a1 + 1864);
      if (a2 == 6)
      {
        *(_DWORD *)(a1 + 1868) = 12;
        *(unsigned char *)(a1 + 2092) = 1;
        memcpy(__dst, v7, sizeof(__dst));
        sub_1017D88C4(a1, __dst);
      }
      else
      {
        *(_DWORD *)(a1 + 1868) = 13;
        *(unsigned char *)(a1 + 2092) = 1;
        memcpy(v72, v7, sizeof(v72));
        sub_1017D88C4(a1, v72);
      }
      goto LABEL_118;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      __int16 v40 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,connection to SLP established", (uint8_t *)buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_126;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_101;
      }
      goto LABEL_169;
    case 9:
      goto LABEL_118;
    case 10:
      uint64_t result = 0;
      int v12 = 14;
      goto LABEL_94;
    case 11:
      uint64_t result = 0;
      int v12 = 15;
      goto LABEL_94;
    case 12:
      uint64_t result = 0;
      int v12 = 16;
      goto LABEL_94;
    case 13:
      uint64_t result = 0;
      int v12 = 17;
      goto LABEL_94;
    case 14:
      uint64_t result = 0;
      int v12 = 18;
LABEL_94:
      *(_DWORD *)(a1 + 1868) = v12;
      return result;
    case 15:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v28 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v29 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,#Warning session timeout", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v58 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v58;
        int v59 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v59);
        if (v59 != buf) {
          free(v59);
        }
      }
      sub_1017D87FC(a1);
      *(_DWORD *)(a1 + 1868) = 2;
      *(unsigned char *)(a1 + 2092) = 1;
      memcpy(v70, (const void *)(a1 + 1864), sizeof(v70));
      sub_1017D88C4(a1, v70);
      goto LABEL_118;
    case 16:
      uint64_t v30 = *(void *)(a1 + 2440);
      if (!v30) {
        goto LABEL_165;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 48))(v30))
      {
        sub_1017D787C(a1 + 104, 18, 1.5);
        sub_1017D43CC(a1);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        double v50 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v51 = *(_DWORD *)(a1 + 2564);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v51;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,not on LTE, ecid not needed", (uint8_t *)buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v68 = *(_DWORD *)(a1 + 2564);
          LODWORD(v110[0]) = 67109120;
          HIDWORD(v110[0]) = v68;
          int v65 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v65);
          if (v65 != buf) {
LABEL_156:
          }
            free(v65);
        }
LABEL_108:
        sub_1017D4600(a1);
      }
LABEL_126:
      uint64_t result = 1;
      break;
    case 17:
      sub_1017D8368(a1 + 104, 18);
      sub_1017D4600(a1);
      goto LABEL_126;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      double v44 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v45 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,#Warning Ecid request timeout", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v64 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v64;
        int v65 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v65);
        if (v65 != buf) {
          goto LABEL_156;
        }
      }
      goto LABEL_108;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      __int16 v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,Wlan request received", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v52 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v52;
        __int16 v53 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v53);
        if (v53 != buf) {
          free(v53);
        }
      }
      sub_101990234(*(void *)(a1 + 2600), *(void *)(a1 + 616), *(_DWORD *)(a1 + 624), (int)*(double *)(a1 + 2608));
      sub_1017D787C(a1 + 104, 21, *(double *)(a1 + 2608));
      goto LABEL_126;
    case 20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      char v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,Wlan response received", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v54 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v54;
        __int16 v55 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v55);
        if (v55 != buf) {
          free(v55);
        }
      }
      sub_1017D8368(a1 + 104, 21);
      sub_1017D8A70(a1, a1 + 2624);
      *(_DWORD *)(a1 + 2664) = 3;
      uint64_t v15 = *(void *)(a1 + 2736);
      if (!v15) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, a1 + 2664);
      *(void *)(a1 + 2664) = 0;
      *(void *)(a1 + 2680) = 0xBFF0000000000000;
      *(void *)(a1 + 2688) = 0xBFF0000000000000;
      *(_WORD *)(a1 + 2702) = 0;
      *(_DWORD *)(a1 + 2672) = 0;
      *(_DWORD *)(a1 + 2696) = 0;
      *(unsigned char *)(a1 + 2700) = 0;
      uint64_t result = 1;
      *(_DWORD *)(a1 + 2704) = 1;
      return result;
    case 21:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      double v46 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v47 = *(_DWORD *)(a1 + 2564);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,#Warning,#wlan, Request timeout", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v66 = *(_DWORD *)(a1 + 2564);
        LODWORD(v110[0]) = 67109120;
        HIDWORD(v110[0]) = v66;
        int v67 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", (const char *)v67);
        if (v67 != buf) {
          free(v67);
        }
      }
      memset(&buf[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 3;
      sub_1017D8A70(a1, (uint64_t)buf);
      *(_DWORD *)(a1 + 2668) = 3;
      *(CFAbsoluteTime *)(a1 + 2688) = CFAbsoluteTimeGetCurrent();
      long long v48 = *(_OWORD *)(a1 + 2680);
      v69[0] = *(_OWORD *)(a1 + 2664);
      v69[1] = v48;
      v69[2] = *(_OWORD *)(a1 + 2696);
      sub_1017D8CA8(a1, v69);
      *(void *)(a1 + 2664) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 2680) = _Q0;
      *(_WORD *)(a1 + 2702) = 0;
      *(_DWORD *)(a1 + 2672) = 0;
      *(_DWORD *)(a1 + 2696) = 0;
      *(unsigned char *)(a1 + 2700) = 0;
      *(_DWORD *)(a1 + 2704) = 1;
      if (buf[0].__r_.__value_.__l.__size_)
      {
        buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
        operator delete((void *)buf[0].__r_.__value_.__l.__size_);
      }
      goto LABEL_126;
    case 22:
      if (*(void *)(a1 + 2440)) {
        return result;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(v110, "ServingCellChange");
        uint64_t v11 = (v111 & 0x80u) == 0 ? v110 : (void **)v110[0];
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,servingcell change to non-lte rat while supl in session. Abort\", \"event\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
        if ((char)v111 < 0) {
          operator delete(v110[0]);
        }
      }
      sub_1017D87FC(a1);
      *(_DWORD *)(a1 + 1868) = 26;
      *(unsigned char *)(a1 + 2092) = 1;
      memcpy(v71, (const void *)(a1 + 1864), sizeof(v71));
      sub_1017D88C4(a1, v71);
LABEL_118:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1017D2DD8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x7C7]) < 0) {
    operator delete((void *)STACK[0x7B0]);
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  if (SLOBYTE(STACK[0x7E7]) < 0) {
    operator delete((void *)STACK[0x7D0]);
  }
  _Unwind_Resume(a1);
}

void sub_1017D2EB8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1017D2ECC(uint64_t a1, int a2, uint64_t *a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,dispatch_decodedSuplInit", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v9 = *(_DWORD *)(a1 + 2564);
    int v22 = 67109120;
    int v23 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_decodedSuplInit(gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1017DB648((uint64_t)buf, a3);
  id v8 = [*(id *)a1 silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_1017D31BC;
  v11[3] = &unk_10233D350;
  uint64_t v11[4] = a1;
  sub_1017DB648((uint64_t)&v12, (uint64_t *)buf);
  int v21 = a2;
  [v8 async:v11];
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
}

void sub_1017D3190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_1017D34CC(v37);
  sub_1017D34CC((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1017D31BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,processing decodedSuplInit", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_decodedSuplInit(gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  operator new();
}

void sub_1017D341C()
{
}

uint64_t sub_1017D3448(uint64_t a1, uint64_t a2)
{
  return sub_1017DB648(a1 + 40, (uint64_t *)(a2 + 40));
}

void sub_1017D3454(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 64);
    operator delete(v4);
  }
}

uint64_t sub_1017D34CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  int v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

id sub_1017D3530(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,dispatch_requestLocationId", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v6 = *(_DWORD *)(a1 + 2564);
    int v9 = 67109120;
    int v10 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestLocationId()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  id v4 = [*(id *)a1 silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1017D373C;
  v8[3] = &unk_1022A3020;
  uint8_t v8[4] = a1;
  return [v4 async:v8];
}

uint64_t sub_1017D373C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,requestLocationId", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestLocationId()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_10011C08C(v1 + 104, 16);
}

uint64_t sub_1017D38FC(uint64_t a1, void *a2)
{
  if (a2[1] - *a2 < 3uLL) {
    return 0;
  }
  if (*(unsigned char *)(*a2 + 2) == 2) {
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,SuplMajorVersion is not 2", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSuplVersionSupported(const std::vector<uint8_t> &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1017D3ADC(uint64_t a1, char **a2)
{
  *(_DWORD *)int v60 = *(unsigned __int16 *)(a1 + 2560);
  *(void *)std::string buf = v60;
  id v4 = sub_1017DC844((uint64_t **)(a1 + 2536), (unsigned int *)v60, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5;
  if (v4 != (uint64_t **)a2) {
    sub_100A60544(v4, *a2, a2[1], a2[1] - *a2);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  int v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,process_RawSuplInit", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v20 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)int v60 = 67109120;
    *(_DWORD *)&v60[4] = v20;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (!*(unsigned char *)(a1 + 273)
    && *(unsigned char *)(a1 + 272)
    && *(unsigned char *)(a1 + 313)
    && (*(unsigned char *)(a1 + 318) || *(unsigned char *)(a1 + 314))
    && sub_1017D38FC(a1, a2))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,In emergency mode or SUPL allowed in non emergency , process_RawSuplInit", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v26 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)int v60 = 67109120;
      *(_DWORD *)&v60[4] = v26;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    v62[0] = off_10233D570;
    v62[1] = a1;
    v62[3] = v62;
    uint64_t v19 = *(void *)(a1 + 32);
    if (!v19) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 48))(v19, v62);
    uint64_t result = (uint64_t)sub_1017DCC68(v62);
    ++*(_WORD *)(a1 + 2560);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,received SUPL init while not in emergency or not allowed in non-emergnecy. Dropping", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v22 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)int v60 = 67109120;
      *(_DWORD *)&v60[4] = v22;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    v41[0] = 0;
    *(void *)((char *)v41 + 5) = 0;
    uint64_t v52 = 0;
    char v53 = 0;
    *(void *)&v60[3] = 0;
    char v61 = 0;
    uint64_t v28 = 0x1700000000;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v29 = _Q0;
    long long v30 = _Q0;
    uint64_t v31 = -1;
    int v32 = 1;
    uint64_t v33 = 0;
    char v34 = 0;
    int64x2_t v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v36 = xmmword_101D2A480;
    long long v37 = _Q0;
    unint64_t v38 = 0xBFF0000000000000;
    uint64_t v39 = 0;
    int v40 = 2;
    int v42 = 0;
    char v43 = 0;
    unint64_t v44 = 0xFFFFFFFF00000000;
    int v45 = -1;
    int64x2_t v46 = v35;
    unint64_t v47 = 0xBFF0000000000000;
    unint64_t v48 = 0xFFFFFFFF00000000;
    int v49 = 0;
    __int16 v50 = 255;
    int v51 = 1;
    uint64_t v54 = *(unsigned int *)v60;
    int v55 = 0;
    int64x2_t v56 = v35;
    unint64_t v57 = 0xBFF0000000000000;
    uint64_t result = sub_1017D4268(a1, &v28);
    if (!*(unsigned char *)(a1 + 318))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,Received SUPL INIT outside emergency", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v24 = *(_DWORD *)(a1 + 2564);
        int v58 = 67109120;
        int v59 = v24;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      return sub_100180260(a1 + 2744, 1);
    }
  }
  return result;
}

void sub_1017D424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
}

uint64_t sub_1017D4268(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1018109A8(a2[1], __p);
    int v5 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    char v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,Supl Reject\", \"result\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    *a2 = 3;
    a2[12] = 1;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)result + 48))(result, a2);
  }
  return result;
}

void *sub_1017D43CC(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,issueEcidRequest", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v6 = *(_DWORD *)(a1 + 2564);
    int v9 = 67109120;
    int v10 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::issueEcidRequest()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  v8[0] = off_10233D600;
  v8[1] = a1;
  v8[3] = v8;
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v8);
  return sub_1017DD378(v8);
}

void sub_1017D45E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1017D4600(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,reportCellMeasurements", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::reportCellMeasurements()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1017D47D4(a1, a1 + 2448, (uint64_t *)(a1 + 2480));
  *(void *)(a1 + 2456) = *(void *)(a1 + 2448);
}

void sub_1017D47D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v98 = 0;
  *(_OWORD *)uint64_t v99 = 0u;
  *(_OWORD *)char v100 = 0u;
  long long v101 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  int64x2_t v103 = 0;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  int v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v113 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,sendCellMeasurements", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v87 = *(_DWORD *)(a1 + 2564);
    int v106 = 67109120;
    int v107 = v87;
    int v88 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v88);
    if (v88 != (char *)buf) {
      free(v88);
    }
  }
  for (uint64_t i = *(char **)a2; ; i += 28)
  {
    if (i == *(char **)(a2 + 8)) {
      goto LABEL_26;
    }
    if (*i) {
      break;
    }
  }
  if (*((unsigned __int16 *)i + 1) <= 0x3E7u && *((unsigned __int16 *)i + 2) < 0x3E8u)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    char v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)std::string buf = 67109120;
      int v113 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,usingEcidMeasurements,1", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v95 = *(_DWORD *)(a1 + 2564);
      int v106 = 67109120;
      int v107 = v95;
      int v96 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v96);
      if (v96 != (char *)buf) {
        free(v96);
      }
    }
    int v98 = 5;
    if (v99 != (void **)a2) {
      sub_100ADA2D8((char *)v99, *(char **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    v105[0] = off_10233D8A0;
    v105[1] = &v98;
    v105[3] = v105;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v10 + 48))(v10, v105);
    sub_1017DCC68(v105);
    goto LABEL_104;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  __int16 v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    int v12 = *(_DWORD *)(a1 + 2564);
    int v13 = *((unsigned __int16 *)i + 1);
    int v14 = *((unsigned __int16 *)i + 2);
    *(_DWORD *)std::string buf = 67109632;
    int v113 = v12;
    __int16 v114 = 1024;
    *(_DWORD *)int v115 = v13;
    *(_WORD *)&v115[4] = 1024;
    *(_DWORD *)&v115[6] = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ins%d,nilr,#supl,serving cell with invalid mcc %d, mnc %d. handover?", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v91 = *(_DWORD *)(a1 + 2564);
    int v92 = *((unsigned __int16 *)i + 1);
    int v93 = *((unsigned __int16 *)i + 2);
    int v106 = 67109632;
    int v107 = v91;
    __int16 v108 = 1024;
    int v109 = v92;
    __int16 v110 = 1024;
    int v111 = v93;
    unint64_t v94 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v94);
    if (v94 != (char *)buf) {
      free(v94);
    }
  }
LABEL_26:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v15 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v113 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,usingEcidMeasurements,0", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v89 = *(_DWORD *)(a1 + 2564);
    int v106 = 67109120;
    int v107 = v89;
    char v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v90);
    if (v90 != (char *)buf) {
      free(v90);
    }
  }
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  if (*a3 != v18)
  {
    while (!*(unsigned char *)v17)
    {
LABEL_92:
      v17 += 696;
      if (v17 == v18) {
        goto LABEL_104;
      }
    }
    int v98 = 0;
    v99[1] = v99[0];
    *(void **)&long long v101 = v100[1];
    __p[1] = __p[0];
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    if (v19 >= 3)
    {
      if (v19 == 6)
      {
        int v32 = (int *)sub_100117098(v17);
        BOOL v33 = *(_DWORD *)(v17 + 4) == 0;
        int v34 = *v32;
        int v35 = v32[1];
        int v37 = v32[2];
        int v36 = v32[3];
        int v38 = v32[5];
        int v98 = 5;
        uint64_t v39 = (char *)v99[1];
        if (v99[1] >= v100[0])
        {
          uint64_t v53 = 0x6DB6DB6DB6DB6DB7 * (((char *)v99[1] - (char *)v99[0]) >> 2);
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) > 0x924924924924924) {
            sub_1001D7FD4();
          }
          if (0xDB6DB6DB6DB6DB6ELL * (((char *)v100[0] - (char *)v99[0]) >> 2) > v54) {
            unint64_t v54 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v100[0] - (char *)v99[0]) >> 2);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v100[0] - (char *)v99[0]) >> 2)) >= 0x492492492492492) {
            unint64_t v55 = 0x924924924924924;
          }
          else {
            unint64_t v55 = v54;
          }
          if (v55) {
            int64x2_t v56 = (char *)sub_100ADA48C((uint64_t)v100, v55);
          }
          else {
            int64x2_t v56 = 0;
          }
          long long v76 = (BOOL *)&v56[28 * v53];
          BOOL *v76 = v33;
          *((_WORD *)v76 + 1) = v34;
          *((_WORD *)v76 + 2) = v35;
          *((_DWORD *)v76 + 2) = v37;
          *((_DWORD *)v76 + 3) = v36;
          *((_WORD *)v76 + 8) = v38;
          *((_WORD *)v76 + 9) = 25443;
          *(void *)(v76 + 20) = 0xFFFFFFFF7FFFFFFFLL;
          uint64_t v78 = (char *)v99[0];
          long long v77 = (char *)v99[1];
          int v79 = v76;
          if (v99[1] != v99[0])
          {
            do
            {
              long long v80 = *(_OWORD *)(v77 - 28);
              *((_OWORD *)v79 - 1) = *((_OWORD *)v77 - 1);
              *(_OWORD *)(v79 - 28) = v80;
              v79 -= 28;
              v77 -= 28;
            }
            while (v77 != v78);
            long long v77 = (char *)v99[0];
          }
          int v40 = v76 + 28;
          v99[0] = v79;
          v99[1] = v76 + 28;
          v100[0] = &v56[28 * v55];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          *(unsigned char *)v99[1] = v33;
          *((_WORD *)v39 + 1) = v34;
          *((_WORD *)v39 + 2) = v35;
          *((_DWORD *)v39 + 2) = v37;
          *((_DWORD *)v39 + 3) = v36;
          *((_WORD *)v39 + 8) = v38;
          *((_WORD *)v39 + 9) = 25443;
          int v40 = v39 + 28;
          *(void *)(v39 + 20) = 0xFFFFFFFF7FFFFFFFLL;
        }
        v99[1] = v40;
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        uint64_t v81 = qword_1024193E8;
        if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_90;
        }
        int v82 = *v32;
        int v83 = v32[1];
        int v84 = v32[5];
        int v86 = v32[2];
        int v85 = v32[3];
        *(_DWORD *)std::string buf = 68290562;
        int v113 = 0;
        __int16 v114 = 2082;
        *(void *)int v115 = "";
        *(_WORD *)&v115[8] = 2082;
        __int16 v116 = "lte";
        __int16 v117 = 1026;
        int v118 = v82;
        __int16 v119 = 1026;
        int v120 = v83;
        __int16 v121 = 1026;
        int v122 = v85;
        __int16 v123 = 1026;
        int v124 = v84;
        __int16 v125 = 1026;
        int v126 = v86;
        int v72 = v81;
        int v73 = "{\"msg%{public}.0s\":\"#nilr,#supl,locationId\", \"cellType\":%{public, location:escape_only}s, \"mcc\":%{"
              "public}d, \"mnc\":%{public}d, \"ci\":%{public}d, \"physCellId\":%{public}d, \"tac\":%{public}d}";
        uint32_t v74 = 58;
        goto LABEL_89;
      }
      if (v19 != 7)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v41 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v42 = *(_DWORD *)(v17 + 8);
          *(_DWORD *)std::string buf = 68289282;
          int v113 = 0;
          __int16 v114 = 2082;
          *(void *)int v115 = "";
          *(_WORD *)&v115[8] = 1026;
          LODWORD(v116) = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,locationId RAT not supported\", \"cell\":%{public}d}", buf, 0x18u);
        }
        goto LABEL_92;
      }
    }
    int v20 = (int *)sub_1006E6690(v17);
    int v21 = v20;
    BOOL v22 = *(_DWORD *)(v17 + 4) == 0;
    int v24 = *v20;
    int v23 = v20[1];
    int v26 = v20[2];
    int v25 = v20[3];
    if (*(_DWORD *)(v17 + 8) > 1u)
    {
      int v29 = v20[5];
      int v98 = 2;
      long long v30 = (char *)__p[1];
      if (__p[1] >= v103)
      {
        int64_t v48 = ((char *)__p[1] - (char *)__p[0]) >> 5;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v50 = v103 - (char *)__p[0];
        if ((v103 - (char *)__p[0]) >> 4 > v49) {
          unint64_t v49 = v50 >> 4;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v51 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51) {
          uint64_t v52 = (char *)sub_1001D9EDC((uint64_t)&v103, v51);
        }
        else {
          uint64_t v52 = 0;
        }
        int v62 = (BOOL *)&v52[32 * v48];
        *int v62 = v22;
        *((_WORD *)v62 + 1) = v24;
        *((_WORD *)v62 + 2) = v23;
        *((_DWORD *)v62 + 2) = v26;
        *((_DWORD *)v62 + 3) = v25;
        *((_WORD *)v62 + 8) = v29;
        *(void *)(v62 + 20) = 0x7FFFFFFFLL;
        *((_DWORD *)v62 + 7) = -1;
        int v64 = (char *)__p[0];
        int v63 = (char *)__p[1];
        int v65 = v62;
        if (__p[1] != __p[0])
        {
          do
          {
            long long v66 = *((_OWORD *)v63 - 1);
            *((_OWORD *)v65 - 2) = *((_OWORD *)v63 - 2);
            *((_OWORD *)v65 - 1) = v66;
            v65 -= 32;
            v63 -= 32;
          }
          while (v63 != v64);
          int v63 = (char *)__p[0];
        }
        uint64_t v31 = v62 + 32;
        __p[0] = v65;
        __p[1] = v62 + 32;
        int64x2_t v103 = &v52[32 * v51];
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        *(unsigned char *)__p[1] = v22;
        *((_WORD *)v30 + 1) = v24;
        *((_WORD *)v30 + 2) = v23;
        *((_DWORD *)v30 + 2) = v26;
        *((_DWORD *)v30 + 3) = v25;
        *((_WORD *)v30 + 8) = v29;
        *(void *)(v30 + 20) = 0x7FFFFFFFLL;
        uint64_t v31 = v30 + 32;
        *((_DWORD *)v30 + 7) = -1;
      }
      __p[1] = v31;
      char v61 = "wcdma";
    }
    else
    {
      int v98 = 1;
      uint64_t v27 = v101;
      if ((unint64_t)v101 >= *((void *)&v101 + 1))
      {
        uint64_t v43 = (uint64_t)(v101 - (unint64_t)v100[1]) >> 4;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 60) {
          sub_1001D7FD4();
        }
        int64_t v45 = *((void *)&v101 + 1) - (unint64_t)v100[1];
        if ((uint64_t)(*((void *)&v101 + 1) - (unint64_t)v100[1]) >> 3 > v44) {
          unint64_t v44 = v45 >> 3;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46) {
          unint64_t v47 = (char *)sub_1000C571C((uint64_t)&v101 + 8, v46);
        }
        else {
          unint64_t v47 = 0;
        }
        unint64_t v57 = (BOOL *)&v47[16 * v43];
        BOOL *v57 = v22;
        *((_WORD *)v57 + 1) = v24;
        *((_WORD *)v57 + 2) = v23;
        *((_DWORD *)v57 + 2) = v26;
        *((_DWORD *)v57 + 3) = v25;
        int v59 = (char *)v100[1];
        int v58 = (char *)v101;
        int v60 = v57;
        if ((void *)v101 != v100[1])
        {
          do
          {
            *((_OWORD *)v60 - 1) = *((_OWORD *)v58 - 1);
            v60 -= 16;
            v58 -= 16;
          }
          while (v58 != v59);
          int v58 = (char *)v100[1];
        }
        uint64_t v28 = (char *)(v57 + 16);
        v100[1] = v60;
        *(void *)&long long v101 = v57 + 16;
        *((void *)&v101 + 1) = &v47[16 * v46];
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *(unsigned char *)long long v101 = v22;
        *(_WORD *)(v27 + 2) = v24;
        *(_WORD *)(v27 + 4) = v23;
        uint64_t v28 = (char *)(v27 + 16);
        *(_DWORD *)(v27 + 8) = v26;
        *(_DWORD *)(v27 + 12) = v25;
      }
      *(void *)&long long v101 = v28;
      char v61 = "gsm";
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v67 = qword_1024193E8;
    if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_90;
    }
    int v68 = *v21;
    int v69 = v21[1];
    int v71 = v21[2];
    int v70 = v21[3];
    *(_DWORD *)std::string buf = 68290306;
    int v113 = 0;
    __int16 v114 = 2082;
    *(void *)int v115 = "";
    *(_WORD *)&v115[8] = 2082;
    __int16 v116 = v61;
    __int16 v117 = 1026;
    int v118 = v68;
    __int16 v119 = 1026;
    int v120 = v69;
    __int16 v121 = 1026;
    int v122 = v70;
    __int16 v123 = 1026;
    int v124 = v71;
    int v72 = v67;
    int v73 = "{\"msg%{public}.0s\":\"#nilr,#supl,locationId\", \"cellType\":%{public, location:escape_only}s, \"mcc\":%{publ"
          "ic}d, \"mnc\":%{public}d, \"ci\":%{public}d, \"lac\":%{public}d}";
    uint32_t v74 = 52;
LABEL_89:
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, v73, buf, v74);
LABEL_90:
    v104[0] = off_10233D920;
    v104[1] = &v98;
    v104[3] = v104;
    uint64_t v75 = *(void *)(a1 + 32);
    if (!v75) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v75 + 48))(v75, v104);
    sub_1017DCC68(v104);
    goto LABEL_92;
  }
LABEL_104:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v100[1])
  {
    *(void **)&long long v101 = v100[1];
    operator delete(v100[1]);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
}

void sub_1017D5630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1017DA628(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017D5694(uint64_t a1)
{
  sub_1017D5828(a1);
  sub_1017D5A6C(a1 + 2136);

  *(void *)(a1 + 2408) = 0;
  sub_10065ABCC((void *)(a1 + 2744));
  sub_1017DC09C((void *)(a1 + 2712));
  uint64_t v2 = *(void **)(a1 + 2632);
  if (v2)
  {
    *(void *)(a1 + 2640) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 2591) < 0) {
    operator delete(*(void **)(a1 + 2568));
  }
  sub_1006FE1A8(a1 + 2536, *(void **)(a1 + 2544));
  uint64_t v3 = *(void *)(a1 + 2528);
  *(void *)(a1 + 2528) = 0;
  if (v3) {
    sub_1017DC010(a1 + 2528, v3);
  }
  uint64_t v4 = *(void **)(a1 + 2504);
  if (v4)
  {
    *(void *)(a1 + 2512) = v4;
    operator delete(v4);
  }
  int v9 = (void **)(a1 + 2480);
  sub_1000FA7C8(&v9);
  int v5 = *(void **)(a1 + 2448);
  if (v5)
  {
    *(void *)(a1 + 2456) = v5;
    operator delete(v5);
  }
  sub_1001EFA74((void *)(a1 + 2416));
  sub_10084DD34(a1 + 528);
  sub_1017DB5FC(a1 + 456);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  sub_1017DBFA8((uint64_t *)(a1 + 304), 0);
  int v6 = *(void **)(a1 + 280);
  if (v6)
  {
    *(void *)(a1 + 288) = v6;
    operator delete(v6);
  }
  sub_1017DBF24((void *)(a1 + 240));
  uint64_t v7 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1017DBEB4(a1 + 104);
  sub_1017DBE30((void *)(a1 + 72));
  sub_1017DBDAC((void *)(a1 + 40));
  sub_1017DBD28((void *)(a1 + 8));
  return a1;
}

double sub_1017D5828(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,resetStateData", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::resetStateData()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1017DDD90(*(void **)(a1 + 160), (void *)(a1 + 168), a1 + 104);
  uint64_t v4 = *(void *)(a1 + 232);
  if (*(int *)(v4 + 8) >= 1) {
    sub_100EBC6AC(v4);
  }
  sub_1017D5A6C(a1 + 1864);
  *(void *)(a1 + 2608) = 0;
  *(_WORD *)(a1 + 2616) = -1;
  *(unsigned char *)(a1 + 2618) = 0;
  *(_DWORD *)(a1 + 2624) = 0;
  int v5 = *(void **)(a1 + 2632);
  if (v5)
  {
    *(void *)(a1 + 2640) = v5;
    operator delete(v5);
  }
  double result = 0.0;
  *(void *)(a1 + 2664) = 0;
  *(void *)(a1 + 2640) = 0;
  *(void *)(a1 + 2648) = 0;
  *(void *)(a1 + 2632) = 0;
  *(void *)(a1 + 2680) = 0xBFF0000000000000;
  *(void *)(a1 + 2688) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 2702) = 0;
  *(_DWORD *)(a1 + 2672) = 0;
  *(_DWORD *)(a1 + 2696) = 0;
  *(unsigned char *)(a1 + 2700) = 0;
  *(_DWORD *)(a1 + 2704) = 1;
  *(_DWORD *)(a1 + 2592) = 0;
  return result;
}

double sub_1017D5A6C(uint64_t a1)
{
  *(void *)a1 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q1;
  *(_OWORD *)(a1 + 24) = _Q1;
  *(void *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = xmmword_101D2A480;
  *(_OWORD *)(a1 + 104) = _Q1;
  *(void *)(a1 + 120) = 0xBFF0000000000000;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 2;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(void *)(a1 + 156) = 0;
  *(void *)(a1 + 168) = -1;
  *(int64x2_t *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = 0xBFF0000000000000;
  double result = NAN;
  *(void *)(a1 + 200) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 208) = 0xFF00000000;
  *(_DWORD *)(a1 + 216) = 1;
  *(void *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 228) = 0;
  *(void *)(a1 + 229) = 0;
  *(_DWORD *)(a1 + 237) = 0;
  *(_DWORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  *(int64x2_t *)(a1 + 248) = v6;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  return result;
}

void sub_1017D5B84(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,readCarrierSettings", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::readCarrierSettings()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1017D5D40(a1);
}

void sub_1017D5D40(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 313);
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a1 + 535);
  *(unsigned char *)(a1 + 368) = *(_DWORD *)(a1 + 592) != 0;
  *(_WORD *)(a1 + 369) = *(_WORD *)(a1 + 532);
  int v3 = (const std::string *)(a1 + 456);
  sub_1017D9408((std::string *)(a1 + 456), (std::string *)(a1 + 1472));
  uint64_t v4 = (void *)(a1 + 328);
  std::string::operator=((std::string *)(a1 + 328), v3);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a1 + 504);
  char v5 = *(unsigned char *)(a1 + 512);
  *(unsigned char *)(a1 + 316) = (v5 & 4) != 0;
  *(unsigned char *)(a1 + 317) = (v5 & 8) != 0;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a1 + 508);
  *(unsigned char *)(a1 + 2656) = *(_DWORD *)(a1 + 616) != 0;
  *(unsigned char *)(a1 + 2657) = *(_DWORD *)(a1 + 624) != 0;
  *(unsigned char *)(a1 + 2658) = *(_DWORD *)(a1 + 628) != 0;
  if (*(char *)(a1 + 503) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 480), *(void *)(a1 + 488));
  }
  else
  {
    *(_OWORD *)__n128 __p = *(_OWORD *)(a1 + 480);
    uint64_t v16 = *(void *)(a1 + 496);
  }
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  sub_1004BF998((int)buf, (unint64_t *)(a1 + 280), (unsigned __int8 *)__p);
  char v6 = *(unsigned char *)(a1 + 512);
  *(unsigned char *)(a1 + 314) = v6 & 1;
  *(unsigned char *)(a1 + 315) = (v6 & 2) != 0;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a1 + 313);
    if (*(char *)(a1 + 351) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v9 = *(unsigned __int16 *)(a1 + 352);
    int v10 = *(unsigned __int8 *)(a1 + 314);
    int v11 = *(unsigned __int8 *)(a1 + 315);
    int v12 = *(unsigned __int8 *)(a1 + 2656);
    int v13 = *(unsigned __int8 *)(a1 + 2657);
    int v14 = *(unsigned __int8 *)(a1 + 2658);
    *(_DWORD *)std::string buf = 68291330;
    int v18 = 0;
    __int16 v19 = 2082;
    int v20 = "";
    __int16 v21 = 1026;
    int v22 = v2;
    __int16 v23 = 1026;
    int v24 = v8;
    __int16 v25 = 2082;
    int v26 = v4;
    __int16 v27 = 1026;
    int v28 = v9;
    __int16 v29 = 1026;
    int v30 = v10;
    __int16 v31 = 1026;
    int v32 = v11;
    __int16 v33 = 1026;
    int v34 = v12;
    __int16 v35 = 1026;
    int v36 = v13;
    __int16 v37 = 1026;
    int v38 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,carrier settings update\", \"prevSuplState\":%{public}hhd, \"fSupportsEmergencySupl\":%{public}hhd, \"fHslpAddress\":%{public, location:escape_only}s, \"fHslpPort\":%{public}d, \"fAllowNonEmergencySupl\":%{public}hhd, \"fAllowSuplWithoutEmergencyNotification\":%{public}hhd, \"fEnableLppRel13WlanMeas\":%{public}hhd, \"fSupportsLppRel13WlanMeasTypeRssi\":%{public}hhd, \"fEnableLocationSourceReporting\":%{public}hhd}", buf, 0x4Cu);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1017D5F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

BOOL sub_1017D5FC0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v319 = 0;
  char v320 = 0;
  *(void *)&v318[3] = 0;
  v318[11] = 0;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  char v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004BF988((int)&v226, a1 + 2504, &__str);
    uint64_t v7 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__str
       : (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 68289282;
    int v302 = 0;
    __int16 v303 = 2082;
    v304 = "";
    __int16 v305 = 2082;
    *(void *)v306 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"suplInit\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  int v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(unsigned __int8 *)(a1 + 272);
    int v10 = *(unsigned __int8 *)(a1 + 318);
    int v11 = *(unsigned __int8 *)(a1 + 313);
    int v12 = *(unsigned __int8 *)(a1 + 314);
    int v13 = *(unsigned __int8 *)(a1 + 315);
    int v14 = *(unsigned __int8 *)(a1 + 316);
    int v15 = *(unsigned __int8 *)(a1 + 317);
    *(_DWORD *)std::string buf = 68290818;
    int v302 = 0;
    __int16 v303 = 2082;
    v304 = "";
    __int16 v305 = 1026;
    *(_DWORD *)v306 = v9;
    *(_WORD *)&v306[4] = 1026;
    *(_DWORD *)&v306[6] = v10;
    __int16 v307 = 1026;
    int v308 = v11;
    __int16 v309 = 1026;
    int v310 = v12;
    __int16 v311 = 1026;
    int v312 = v13;
    __int16 v313 = 1026;
    int v314 = v14;
    __int16 v315 = 1026;
    int v316 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"fSuplEnable\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"fSupportsEmergencySupl\":%{public}hhd, \"fAllowNonEmergencySupl\":%{public}hhd, \"fAllowSuplWithoutEmergencyNotification\":%{public}hhd, \"fAllowHslpMismatch\":%{public}hhd, \"fAllowHslpWildcard\":%{public}hhd}", buf, 0x3Cu);
  }
  if (!*(unsigned char *)(a1 + 272) || !*(unsigned char *)(a1 + 313) || !*(unsigned char *)(a1 + 318) && !*(unsigned char *)(a1 + 314))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    __int16 v25 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *(unsigned __int8 *)(a1 + 272);
      if (*(unsigned char *)(a1 + 272)) {
        int v26 = *(unsigned __int8 *)(a1 + 313);
      }
      int v27 = *(unsigned __int8 *)(a1 + 318);
      int v28 = *(unsigned __int8 *)(a1 + 314);
      *(_DWORD *)std::string buf = 68289794;
      int v302 = 0;
      __int16 v303 = 2082;
      v304 = "";
      __int16 v305 = 1026;
      *(_DWORD *)v306 = v26;
      *(_WORD *)&v306[4] = 1026;
      *(_DWORD *)&v306[6] = v27;
      __int16 v307 = 1026;
      int v308 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,fail\", \"isSuplAllowed\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"fAllowNonEmergencySupl\":%{public}hhd}", buf, 0x24u);
    }
    __asm { FMOV            V1.2D, #-1.0 }
    long long v263 = _Q1;
    long long v264 = _Q1;
    uint64_t v262 = 0x1700000000;
    uint64_t v265 = -1;
    int v266 = 1;
    uint64_t v267 = 0;
    char v268 = 0;
    *(_DWORD *)unsigned int v269 = *(_DWORD *)v298;
    *(_DWORD *)&v269[3] = *(_DWORD *)&v298[3];
    int64x2_t v270 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v271 = xmmword_101D2A480;
    long long v272 = _Q1;
    unint64_t v273 = 0xBFF0000000000000;
    uint64_t v274 = 0;
    int v275 = 2;
    memset(v277, 0, sizeof(v277));
    uint64_t v276 = 0;
    __int16 v278 = v296;
    char v279 = v297;
    unint64_t v280 = 0xFFFFFFFF00000000;
    int v281 = -1;
    int64x2_t v282 = v270;
    unint64_t v283 = 0xBFF0000000000000;
    unint64_t v284 = 0xFFFFFFFF00000000;
    int v285 = 0;
    __int16 v286 = 255;
    int v287 = 1;
    uint64_t v288 = v319;
    char v289 = v320;
    int v291 = *(_DWORD *)&v318[8];
    uint64_t v290 = *(void *)v318;
    *(_DWORD *)&v292[3] = *(_DWORD *)&v295[3];
    *(_DWORD *)v292 = *(_DWORD *)v295;
    int64x2_t v293 = v270;
    unint64_t v294 = 0xBFF0000000000000;
    sub_1017D4268(a1, &v262);
    return 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v16 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(unsigned __int8 *)(a1 + 272);
    if (*(unsigned char *)(a1 + 272)) {
      int v17 = *(unsigned char *)(a1 + 313) != 0;
    }
    int v18 = *(unsigned __int8 *)(a1 + 318);
    int v19 = *(unsigned __int8 *)(a1 + 314);
    *(_DWORD *)std::string buf = 68289794;
    int v302 = 0;
    __int16 v303 = 2082;
    v304 = "";
    __int16 v305 = 1026;
    *(_DWORD *)v306 = v17;
    *(_WORD *)&v306[4] = 1026;
    *(_DWORD *)&v306[6] = v18;
    __int16 v307 = 1026;
    int v308 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,pass\", \"isSuplAllowed\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"fAllowNonEmergencySupl\":%{public}hhd}", buf, 0x24u);
  }
  int v20 = a2[34];
  if (v20 == 2) {
    int v21 = 3;
  }
  else {
    int v21 = 1;
  }
  if (v20 == 1) {
    int v22 = 2;
  }
  else {
    int v22 = v21;
  }
  unsigned int v23 = *a2;
  if (*a2 >= 0xF)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v34 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v302 = 0;
      __int16 v303 = 2082;
      v304 = "";
      __int16 v305 = 1026;
      *(_DWORD *)v306 = v23;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#awd,#nilr,#supl,\", \"unsupported positioning method\":%{public}d}", buf, 0x18u);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
    }
    __int16 v35 = qword_1024193E8;
    if (os_signpost_enabled((os_log_t)qword_1024193E8))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v302 = 0;
      __int16 v303 = 2082;
      v304 = "";
      __int16 v305 = 1026;
      *(_DWORD *)v306 = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#awd,#nilr,#supl,", "{\"msg%{public}.0s\":\"#awd,#nilr,#supl,\", \"unsupported positioning method\":%{public}d}", buf, 0x18u);
    }
    int v24 = 0;
  }
  else
  {
    int v24 = *(_DWORD *)&asc_101E37318[4 * v23];
  }
  long double v36 = -1.0;
  if (*((unsigned char *)a2 + 4))
  {
    long double v37 = sub_101811540(*((unsigned __int8 *)a2 + 5));
    unsigned int v38 = *((unsigned __int8 *)a2 + 10);
    if (v38 <= 7) {
      long double v36 = ldexp(1.0, v38);
    }
  }
  else
  {
    long double v37 = 0.0;
  }
  if (a2[34])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v39 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = a2[34];
      *(_DWORD *)std::string buf = 68289282;
      int v302 = 0;
      __int16 v303 = 2082;
      v304 = "";
      __int16 v305 = 1026;
      *(_DWORD *)v306 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,fail\", \"triggerType\":%{public}d}", buf, 0x18u);
    }
    v227[0] = 0x400000000;
    v227[1] = 0xBFF0000000000000;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v228 = _Q0;
    *(long double *)&v227[2] = v36;
    uint64_t v229 = -1;
    int v230 = 1;
    long double v231 = v37;
    char v232 = 0;
    *(_DWORD *)v233 = *(_DWORD *)v298;
    *(_DWORD *)&v233[3] = *(_DWORD *)&v298[3];
    int64x2_t v234 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v235 = xmmword_101D2A480;
    long long v236 = _Q0;
    unint64_t v237 = 0xBFF0000000000000;
    uint64_t v238 = 0;
    int v239 = 2;
    int v240 = v24;
    uint64_t v242 = 0;
    int v241 = v22;
    int v243 = 0;
    char v244 = 0;
    __int16 v245 = v296;
    char v246 = v297;
    unint64_t v247 = 0xFFFFFFFF00000000;
    int v248 = -1;
    int64x2_t v249 = v234;
    unint64_t v250 = 0xBFF0000000000000;
    unint64_t v251 = 0xFFFFFFFF00000000;
    int v252 = 0;
    __int16 v253 = 255;
    int v254 = 1;
    uint64_t v255 = v319;
    char v256 = v320;
    int v258 = *(_DWORD *)&v318[8];
    uint64_t v257 = *(void *)v318;
    *(_DWORD *)&v259[3] = *(_DWORD *)&v295[3];
    *(_DWORD *)unint64_t v259 = *(_DWORD *)v295;
    int64x2_t v260 = v234;
    unint64_t v261 = 0xBFF0000000000000;
    sub_1017D4268(a1, v227);
    return 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v43 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v44 = a2[34];
    *(_DWORD *)std::string buf = 68289282;
    int v302 = 0;
    __int16 v303 = 2082;
    v304 = "";
    __int16 v305 = 1026;
    *(_DWORD *)v306 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,pass\", \"triggerType\":%{public}d}", buf, 0x18u);
  }
  uint64_t v226 = a1;
  if (*((unsigned char *)a2 + 72) && *((unsigned char *)a2 + 73))
  {
    if (*((unsigned char *)a2 + 80))
    {
      if (a2[21] != 3)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        unint64_t v49 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          int v50 = *(_DWORD *)(a1 + 2564);
          *(_DWORD *)std::string buf = 67109120;
          int v302 = v50;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPAddressValidCheck,fail", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v72 = *(_DWORD *)(a1 + 2564);
          LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str.__r_.__value_.__r.__words[0]) = v72;
          int v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v73);
          if (v73 != (char *)buf) {
            free(v73);
          }
        }
        v191[0] = 0x1600000000;
        v191[1] = 0xBFF0000000000000;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v192 = _Q0;
        *(long double *)&v191[2] = v36;
        uint64_t v193 = -1;
        int v194 = 1;
        long double v195 = v37;
        char v196 = 0;
        *(_DWORD *)int v197 = *(_DWORD *)v298;
        *(_DWORD *)&v197[3] = *(_DWORD *)&v298[3];
        int64x2_t v198 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        long long v199 = xmmword_101D2A480;
        long long v200 = _Q0;
        unint64_t v201 = 0xBFF0000000000000;
        uint64_t v202 = 0;
        int v203 = 2;
        int v204 = v24;
        uint64_t v206 = 0;
        int v205 = v22;
        int v207 = 0;
        char v208 = 0;
        __int16 v209 = v296;
        char v210 = v297;
        unint64_t v211 = 0xFFFFFFFF00000000;
        int v212 = -1;
        int64x2_t v213 = v198;
        unint64_t v214 = 0xBFF0000000000000;
        unint64_t v215 = 0xFFFFFFFF00000000;
        int v216 = 0;
        __int16 v217 = 255;
        int v218 = 1;
        uint64_t v219 = v319;
        char v220 = v320;
        int v222 = *(_DWORD *)&v318[8];
        uint64_t v221 = *(void *)v318;
        *(_DWORD *)&v223[3] = *(_DWORD *)&v295[3];
        *(_DWORD *)v223 = *(_DWORD *)v295;
        int64x2_t v224 = v198;
        unint64_t v225 = 0xBFF0000000000000;
        sub_1017D4268(a1, v191);
        return 0;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int64_t v45 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v46 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        int v302 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPAddressValidCheck,pass", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v70 = *(_DWORD *)(a1 + 2564);
        LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__str.__r_.__value_.__r.__words[0]) = v70;
        int v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
      }
    }
    if (*((char *)a2 + 111) < 0) {
      sub_1000DC48C(&__str, *((void **)a2 + 11), *((void *)a2 + 12));
    }
    else {
      std::string __str = *(std::string *)(a2 + 22);
    }
    sub_100134750(__p, "e-slp");
    char v52 = sub_1017D8F2C(&v226, (uint64_t)&__str, (uint64_t)__p);
    if (v190 < 0) {
      operator delete(__p[0]);
    }
    if (v52)
    {
      std::string::operator=((std::string *)a3, &__str);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v53 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v54 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        int v302 = v54;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPIsFQDNCheck,pass", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v55 = *(_DWORD *)(a1 + 2564);
        int v299 = 67109120;
        int v300 = v55;
        int64x2_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      unint64_t v57 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v58 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        int v302 = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPIsFQDNCheck,fail", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v68 = *(_DWORD *)(a1 + 2564);
        int v299 = 67109120;
        int v300 = v68;
        int v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      v154[0] = 0x1600000000;
      v154[1] = 0xBFF0000000000000;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v155 = _Q0;
      *(long double *)&v154[2] = v36;
      uint64_t v156 = -1;
      int v157 = 1;
      long double v158 = v37;
      char v159 = 0;
      *(_DWORD *)uint64_t v160 = *(_DWORD *)v298;
      *(_DWORD *)&v160[3] = *(_DWORD *)&v298[3];
      int64x2_t v161 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      long long v162 = xmmword_101D2A480;
      long long v163 = _Q0;
      unint64_t v164 = 0xBFF0000000000000;
      uint64_t v165 = 0;
      int v166 = 2;
      int v167 = v24;
      uint64_t v169 = 0;
      int v168 = v22;
      int v170 = 0;
      char v171 = 0;
      __int16 v172 = v296;
      char v173 = v297;
      unint64_t v174 = 0xFFFFFFFF00000000;
      int v175 = -1;
      int64x2_t v176 = v161;
      unint64_t v177 = 0xBFF0000000000000;
      unint64_t v178 = 0xFFFFFFFF00000000;
      int v179 = 0;
      __int16 v180 = 255;
      int v181 = 1;
      uint64_t v182 = v319;
      char v183 = v320;
      int v185 = *(_DWORD *)&v318[8];
      uint64_t v184 = *(void *)v318;
      *(_DWORD *)&v186[3] = *(_DWORD *)&v295[3];
      *(_DWORD *)__int16 v186 = *(_DWORD *)v295;
      int64x2_t v187 = v161;
      unint64_t v188 = 0xBFF0000000000000;
      sub_1017D4268(a1, v154);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 315)) {
      return 1;
    }
    if (*((unsigned char *)a2 + 80))
    {
      if (a2[21] != 3)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v60 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          int v61 = *(_DWORD *)(a1 + 2564);
          *(_DWORD *)std::string buf = 67109120;
          int v302 = v61;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPIsFQDNCheck,fail", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v80 = *(_DWORD *)(a1 + 2564);
          LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str.__r_.__value_.__r.__words[0]) = v80;
          uint64_t v81 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v81);
          if (v81 != (char *)buf) {
            free(v81);
          }
        }
        v119[0] = 0x1600000000;
        v119[1] = 0xBFF0000000000000;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v120 = _Q0;
        *(long double *)&v119[2] = v36;
        uint64_t v121 = -1;
        int v122 = 1;
        long double v123 = v37;
        char v124 = 0;
        *(_DWORD *)__int16 v125 = *(_DWORD *)v298;
        *(_DWORD *)&v125[3] = *(_DWORD *)&v298[3];
        int64x2_t v126 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        long long v127 = xmmword_101D2A480;
        long long v128 = _Q0;
        unint64_t v129 = 0xBFF0000000000000;
        uint64_t v130 = 0;
        int v131 = 2;
        int v132 = v24;
        uint64_t v134 = 0;
        int v133 = v22;
        int v135 = 0;
        char v136 = 0;
        __int16 v137 = v296;
        char v138 = v297;
        unint64_t v139 = 0xFFFFFFFF00000000;
        int v140 = -1;
        int64x2_t v141 = v126;
        unint64_t v142 = 0xBFF0000000000000;
        unint64_t v143 = 0xFFFFFFFF00000000;
        int v144 = 0;
        __int16 v145 = 255;
        int v146 = 1;
        uint64_t v147 = v319;
        char v148 = v320;
        int v150 = *(_DWORD *)&v318[8];
        uint64_t v149 = *(void *)v318;
        *(_DWORD *)&v151[3] = *(_DWORD *)&v295[3];
        *(_DWORD *)int v151 = *(_DWORD *)v295;
        int64x2_t v152 = v126;
        unint64_t v153 = 0xBFF0000000000000;
        sub_1017D4268(a1, v119);
        return 0;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      unint64_t v47 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v48 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        int v302 = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPIsFQDNCheck,pass", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v78 = *(_DWORD *)(a1 + 2564);
        LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__str.__r_.__value_.__r.__words[0]) = v78;
        int v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v79);
        if (v79 != (char *)buf) {
          free(v79);
        }
      }
    }
    if (*((char *)a2 + 111) < 0) {
      sub_1000DC48C(&__str, *((void **)a2 + 11), *((void *)a2 + 12));
    }
    else {
      std::string __str = *(std::string *)(a2 + 22);
    }
    sub_100134750(v117, "hslp");
    char v52 = sub_1017D8F2C(&v226, (uint64_t)&__str, (uint64_t)v117);
    if (v118 < 0) {
      operator delete(v117[0]);
    }
    if (v52)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v63 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v64 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        int v302 = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPAddressValidCheck,pass", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v74 = *(_DWORD *)(a1 + 2564);
        int v299 = 67109120;
        int v300 = v74;
        uint64_t v75 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v75);
        if (v75 != (char *)buf) {
          free(v75);
        }
      }
      std::string::operator=((std::string *)a3, &__str);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v65 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v66 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)std::string buf = 67109120;
        int v302 = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPAddressValidCheck,fail", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v76 = *(_DWORD *)(a1 + 2564);
        int v299 = 67109120;
        int v300 = v76;
        long long v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v77);
        if (v77 != (char *)buf) {
          free(v77);
        }
      }
      v82[0] = 0x1600000000;
      v82[1] = 0xBFF0000000000000;
      *(long double *)&v82[2] = v36;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v83 = _Q0;
      uint64_t v84 = -1;
      int v85 = 1;
      long double v86 = v37;
      char v87 = 0;
      *(_DWORD *)int v88 = *(_DWORD *)v298;
      *(_DWORD *)&v88[3] = *(_DWORD *)&v298[3];
      int64x2_t v89 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      long long v90 = xmmword_101D2A480;
      long long v91 = _Q0;
      unint64_t v92 = 0xBFF0000000000000;
      uint64_t v93 = 0;
      int v94 = 2;
      int v95 = v24;
      uint64_t v97 = 0;
      int v96 = v22;
      int v98 = 0;
      char v99 = 0;
      __int16 v100 = v296;
      char v101 = v297;
      unint64_t v102 = 0xFFFFFFFF00000000;
      int v103 = -1;
      int64x2_t v104 = v89;
      unint64_t v105 = 0xBFF0000000000000;
      unint64_t v106 = 0xFFFFFFFF00000000;
      int v107 = 0;
      __int16 v108 = 255;
      int v109 = 1;
      uint64_t v110 = v319;
      char v111 = v320;
      int v113 = *(_DWORD *)&v318[8];
      uint64_t v112 = *(void *)v318;
      *(_DWORD *)&v114[3] = *(_DWORD *)&v295[3];
      *(_DWORD *)__int16 v114 = *(_DWORD *)v295;
      int64x2_t v115 = v89;
      unint64_t v116 = 0xBFF0000000000000;
      sub_1017D4268(a1, v82);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return (v52 & 1) != 0;
}

void sub_1017D7818(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(a1);
}

void sub_1017D787C(uint64_t a1, int a2, double a3)
{
  int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v33 = (void *)*v33;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      long double v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long double v37 = (void *)*v37;
      }
      *(_DWORD *)__n128 __p = 136315138;
      *(void *)&__p[4] = v37;
      unsigned int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrSupl>::setTimeoutEvent(Event, double) [T = CLNilrSupl]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
    }
    __int16 v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
    }
    long double v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_10011CEAC(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&uint8_t buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_10011CEAC(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)__n128 __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrSupl>::setTimeoutEvent(Event, double) [T = CLNilrSupl]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        int v17 = (uint64_t *)v13;
      }
      else {
        int v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      int v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233D3A0);
        }
        int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          unsigned int v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            unsigned int v23 = (void *)*v23;
          }
          sub_10011CEAC(v41, __p);
          if (v49 >= 0) {
            int v24 = __p;
          }
          else {
            int v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&uint8_t buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233D3A0);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_10011CEAC(v41, v42);
          if (v45 >= 0) {
            int v26 = v42;
          }
          else {
            int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)__n128 __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrSupl>::setTimeoutEvent(Event, double) [T = CLNilrSupl]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  int v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    int v18 = v19;
    *(void *)std::string buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1017DDB3C;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  int v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v28 = (void *)*v28;
    }
    sub_10011CEAC(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)__n128 __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_10011CEAC(a2, __p);
    if (v49 >= 0) {
      __int16 v31 = __p;
    }
    else {
      __int16 v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)int v42 = 136315394;
    *(void *)&unsigned char v42[4] = v30;
    __int16 v43 = 2082;
    int v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1017D8368(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_10011CEAC(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_10011CEAC(a2, buf);
      if (v25 >= 0) {
        int v15 = buf;
      }
      else {
        int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v14;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrSupl>::cancelTimeoutEvent(Event) [T = CLNilrSupl]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v18 = (void *)*v18;
      }
      sub_10011CEAC(a2, __p);
      if (v31 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      int v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_10011CEAC(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v20;
      __int16 v28 = 2080;
      __int16 v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void *sub_1017D87FC(uint64_t a1)
{
  v3[0] = off_10233D820;
  v3[3] = v3;
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 48))(v1, v3);
  return sub_1017DCC68(v3);
}

void sub_1017D88B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017D88C4(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1018109A8(a2[1], __p);
    uint64_t v5 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,Supl Failed\", \"result\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    *a2 = 3;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)result + 48))(result, a2);
  }
  return result;
}

uint64_t sub_1017D8A20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *sub_1017D8A70(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)std::string buf = 67109120;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,reportWlanMeasurements", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v8 = *(_DWORD *)(a1 + 2564);
    int v11 = 67109120;
    int v12 = v8;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::reportWlanMeasurements(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  v10[0] = off_10233D9A0;
  v10[1] = a2;
  v10[3] = v10;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v10);
  return sub_1017DCC68(v10);
}

void sub_1017D8C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1017D8CA8(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 2564);
    sub_1018109D4(a2[1], __p);
    uint64_t v6 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v12 = 2080;
    __int16 v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cplane,Wlan,Reject,instance,%d,result,%s", buf, 0x12u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v8 = *(_DWORD *)(a1 + 2564);
    sub_1018109D4(a2[1], buf);
    if (v14 >= 0) {
      int v9 = buf;
    }
    else {
      int v9 = *(uint8_t **)buf;
    }
    int v15 = 67109378;
    int v16 = v8;
    __int16 v17 = 2080;
    int v18 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::logFailedWlanSession(CLNilrTypes::WlanSessionStatus)", "%s\n", v10);
    if (v10 != (char *)__p) {
      free(v10);
    }
  }
  *a2 = 3;
  uint64_t result = *(void *)(a1 + 2736);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)result + 48))(result, a2);
  }
  return result;
}

uint64_t sub_1017D8F20(uint64_t a1)
{
  return sub_10011C08C(a1 + 104, 5);
}

uint64_t sub_1017D8F2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v11 = qword_1024193E8;
    if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    *(_DWORD *)std::string buf = 68289282;
    int v27 = 0;
    __int16 v28 = 2082;
    __int16 v29 = "";
    __int16 v30 = 2082;
    uint64_t v31 = v12;
    __int16 v13 = "{\"msg%{public}.0s\":\"#nilr,#supl,validate,receivedAddressCheck,pass\", \"receivedAddress\":%{public, locatio"
          "n:escape_only}s}";
    char v14 = v11;
    uint32_t v15 = 28;
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
    return 1;
  }
  uint64_t v5 = *a1;
  if (*(unsigned char *)(*a1 + 316))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(v5 + 316);
      *(_DWORD *)std::string buf = 68289282;
      int v27 = 0;
      __int16 v28 = 2082;
      __int16 v29 = "";
      __int16 v30 = 1026;
      LODWORD(v31) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,allowHslpMismatchCheck,pass\", \"fAllowHslpMismatch\":%{public}hhd}", buf, 0x18u);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
    }
    int v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(v5 + 2564);
      *(_DWORD *)std::string buf = 67109120;
      int v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,allowMismatch is set. Not checking against programmed HSLP", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)::(anonymous class)::operator()(const std::string &, std::string) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 1;
  }
  __int16 v17 = (void *)(v5 + 328);
  if (sub_10102B2B0((uint64_t *)a2, v5 + 328, *(unsigned __int8 *)(v5 + 317)))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v18 = qword_1024193E8;
    if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    if (*(char *)(a3 + 23) < 0) {
      a3 = *(void *)a3;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
    if (*(char *)(v5 + 351) < 0) {
      __int16 v17 = (void *)*v17;
    }
    int v20 = *(unsigned __int8 *)(v5 + 317);
    *(_DWORD *)std::string buf = 68290050;
    int v27 = 0;
    __int16 v28 = 2082;
    __int16 v29 = "";
    __int16 v30 = 2082;
    uint64_t v31 = a3;
    __int16 v32 = 2082;
    uint64_t v33 = v19;
    __int16 v34 = 2082;
    __int16 v35 = v17;
    __int16 v36 = 1026;
    int v37 = v20;
    __int16 v13 = "{\"msg%{public}.0s\":\"#nilr,#supl,validate,validHslpAddressCheck,pass\", \"slpType\":%{public, location:escap"
          "e_only}s, \"receivedAddress\":%{public, location:escape_only}s, \"fHslpAddress\":%{public, location:escape_onl"
          "y}s, \"fAllowHslpWildcard\":%{public}d}";
    char v14 = v18;
    uint32_t v15 = 54;
    goto LABEL_36;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  os_log_type_t v22 = qword_1024193E8;
  BOOL v23 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v23)
  {
    if (*(char *)(a3 + 23) < 0) {
      a3 = *(void *)a3;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v24 = a2;
    }
    else {
      uint64_t v24 = *(void *)a2;
    }
    if (*(char *)(v5 + 351) < 0) {
      __int16 v17 = (void *)*v17;
    }
    int v25 = *(unsigned __int8 *)(v5 + 317);
    *(_DWORD *)std::string buf = 68290050;
    int v27 = 0;
    __int16 v28 = 2082;
    __int16 v29 = "";
    __int16 v30 = 2082;
    uint64_t v31 = a3;
    __int16 v32 = 2082;
    uint64_t v33 = v24;
    __int16 v34 = 2082;
    __int16 v35 = v17;
    __int16 v36 = 1026;
    int v37 = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,validHslpAddressCheck,fail\", \"slpType\":%{public, location:escape_only}s, \"receivedAddress\":%{public, location:escape_only}s, \"fHslpAddress\":%{public, location:escape_only}s, \"fAllowHslpWildcard\":%{public}d}", buf, 0x36u);
    return 0;
  }
  return result;
}

std::string *sub_1017D9408(std::string *__dst, std::string *__str)
{
  if (__dst[2].__r_.__value_.__s.__data_[16])
  {
    std::string::operator=(__dst, __str);
    std::string::operator=(__dst + 1, __str + 1);
    int v4 = __str[2].__r_.__value_.__r.__words[1];
    __dst[2].__r_.__value_.__r.__words[0] = __str[2].__r_.__value_.__r.__words[0];
    LODWORD(__dst[2].__r_.__value_.__r.__words[1]) = v4;
  }
  else
  {
    sub_1017DDCE8((char *)__dst, (long long *)__str);
    __dst[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return __dst;
}

uint64_t sub_1017D9478(uint64_t a1, uint64_t *a2, int a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_10101AE9C(a3, __p);
    int v7 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    char v14 = "";
    __int16 v15 = 2082;
    int v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#cb,#supl,received updated emergency settings\", \"reason\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_10083C6B4(a1 + 528, a2);
  if (a3 <= 3) {
    return sub_10011C08C(a1 + 104, dword_101E360F0[a3]);
  }
  return result;
}

void sub_1017D95D0(uint64_t a1, char a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 2592) = a3;
  int v5 = *(unsigned __int8 *)(a1 + 318);
  *(unsigned char *)(a1 + 318) = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 318);
    sub_10192B650(a3, __p);
    int v8 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 68289794;
    int v13 = 0;
    __int16 v14 = 2082;
    __int16 v15 = "";
    __int16 v16 = 1026;
    int v17 = v5;
    __int16 v18 = 1026;
    int v19 = v7;
    __int16 v20 = 2082;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"wasInEmergency\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"commType\":%{public, location:escape_only}s}", buf, 0x28u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned __int8 *)(a1 + 318) != v5)
  {
    if (*(unsigned char *)(a1 + 318)) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 3;
    }
    sub_10011C08C(a1 + 104, v9);
  }
}

void sub_1017D9740(uint64_t a1, char a2, int a3, int a4)
{
  *(unsigned char *)(a1 + 272) = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  int v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a1 + 272);
    int v9 = *(unsigned __int8 *)(a1 + 313);
    uint64_t buf = 68289538;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 1026;
    int v15 = v8;
    __int16 v16 = 1026;
    int v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"fSuplEnable\":%{public}hhd, \"fSupportsEmergencySupl\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
  }
  if (*(unsigned char *)(a1 + 272))
  {
    if (!a3) {
      return;
    }
  }
  else
  {
    sub_10011C08C(a1 + 104, 5);
    if (!a3) {
      return;
    }
  }
  *(_DWORD *)(a1 + 1868) = 8;
  *(_DWORD *)(a1 + 2084) = a4;
  *(_DWORD *)(a1 + 2088) = *(_DWORD *)(a1 + 2592);
  *(unsigned char *)(a1 + 2092) = 1;
  memcpy(v10, (const void *)(a1 + 1864), sizeof(v10));
  sub_1017D88C4(a1, v10);
}

void sub_1017D98B0(uint64_t a1, char a2)
{
  if ((sub_10073CBFC() & 1) == 0)
  {
    *(unsigned char *)(a1 + 273) = a2;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 273);
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      int v8 = "";
      __int16 v9 = 1026;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"fLockOutNILR\":%{public}hhd}", (uint8_t *)v6, 0x18u);
    }
    if (*(unsigned char *)(a1 + 273)) {
      sub_10011C08C(a1 + 104, 5);
    }
  }
}

void sub_1017D99C0(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  if (v3 <= 0x10) {
    *a3 = dword_101E37354[v3];
  }
}

void sub_1017D99E0(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  if (v3 <= 0x10) {
    *a3 = dword_101E37398[v3];
  }
}

void sub_1017D9A00(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 2564);
    int v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)uint64_t buf = 67109376;
    int v52 = v5;
    __int16 v53 = 1024;
    *(_DWORD *)int v54 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,suplStatusReport status=%d", buf, 0xEu);
  }
  uint64_t v7 = sub_10013D1A0(115, 2);
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v46 = (char *)_os_log_send_and_compose_impl();
    uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  int v8 = *(_DWORD *)(a2 + 8);
  if ((v8 - 17) >= 0xC)
  {
    *(_DWORD *)(a1 + 1904) = *(_DWORD *)a2;
  }
  else
  {
    sub_1017D99E0(v7, (int *)(a2 + 4), (_DWORD *)(a1 + 2004));
    sub_1017D99C0(v9, (int *)(a2 + 4), (_DWORD *)(a1 + 2000));
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 2564);
      int v12 = *(_DWORD *)(a2 + 4);
      int v13 = *(_DWORD *)(a1 + 2004);
      int v14 = *(_DWORD *)(a1 + 2000);
      *(_DWORD *)uint64_t buf = 67109888;
      int v52 = v11;
      __int16 v53 = 1024;
      *(_DWORD *)int v54 = v12;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v13;
      *(_WORD *)&v54[10] = 1024;
      *(_DWORD *)&v54[12] = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl, statusReport,posMethod,%d,fSessionStatus,posMethod,%d,method,%d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      __int16 v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    int v8 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 1904) = *(_DWORD *)a2;
    if (v8 == 18)
    {
      *(_OWORD *)(a1 + 1936) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 1952) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a2 + 48);
      *(void *)(a1 + 1984) = *(void *)(a2 + 64);
      *(_WORD *)(a1 + 2072) = *(_WORD *)(a2 + 73);
      *(unsigned char *)(a1 + 2074) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 1920) = *(void *)(a2 + 16);
LABEL_46:
      *(_DWORD *)(a1 + 1868) = 1;
      return;
    }
  }
  if (v8 == 15)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a1 + 2564);
      uint64_t v17 = *(void *)(a2 + 80);
      uint64_t v18 = *(void *)(a2 + 88);
      uint64_t v20 = *(void *)(a2 + 104);
      uint64_t v19 = *(void *)(a2 + 112);
      int v21 = *(unsigned __int8 *)(a2 + 120);
      int v22 = *(unsigned __int8 *)(a2 + 121);
      uint64_t v23 = *(void *)(a2 + 96);
      *(_DWORD *)uint64_t buf = 67110913;
      int v52 = v16;
      __int16 v53 = 2049;
      *(void *)int v54 = v17;
      *(_WORD *)&unsigned char v54[8] = 2049;
      *(void *)&v54[10] = v18;
      __int16 v55 = 2050;
      uint64_t v56 = v19;
      __int16 v57 = 1026;
      *(_DWORD *)int v58 = v21;
      *(_WORD *)&v58[4] = 1026;
      *(_DWORD *)&v58[6] = v22;
      *(_WORD *)int v59 = 2049;
      *(void *)&v59[2] = v23;
      *(_WORD *)int v60 = 2050;
      *(void *)&v60[2] = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl, statusReport,kNwAsstPositionReceived,refLat,%{private}f,refLon,%{private}f,refUnc,%{public}f,horizConf,%{public}hhu,vertConf,%{public}hhu,alt,%{private}.3f,vunc,%{public}.3f", buf, 0x46u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      int v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    *(unsigned char *)(a1 + 2073) = *(unsigned char *)(a2 + 74);
    *(_OWORD *)(a1 + 2040) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 2056) = *(void *)(a2 + 112);
    int v24 = *(unsigned __int8 *)(a2 + 120);
    *(_DWORD *)(a1 + 2064) = v24;
    if (v24 != 90)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v25 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 2564);
        int v27 = *(_DWORD *)(a1 + 2064);
        uint64_t v28 = *(void *)(a1 + 2056);
        *(_DWORD *)uint64_t buf = 67109632;
        int v52 = v26;
        __int16 v53 = 1024;
        *(_DWORD *)int v54 = v27;
        *(_WORD *)&v54[4] = 2048;
        *(void *)&v54[6] = v28;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl,NW Ref location confidence,%d,uncertainity,%f", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        double v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
    }
    memcpy((void *)(a1 + 2136), (const void *)(a1 + 1864), 0x110uLL);
    int v8 = *(_DWORD *)(a2 + 8);
  }
  if (v8 == 30)
  {
    double v29 = *(double *)(a2 + 24);
    if (v29 == 1.79769313e308 || (double v30 = *(double *)(a2 + 32), v30 == 1.79769313e308))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      int v42 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#supl, statusReport,kSuplEndReceived,Invalid lat/lon", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_43;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_67;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 2376) = 1;
      *(double *)(a1 + 2384) = v29;
      *(double *)(a1 + 2392) = v30;
      double v31 = sub_101811540((int)*(double *)(a2 + 48));
      long double v32 = sub_101811540((int)*(double *)(a2 + 56));
      *(double *)(a1 + 2400) = sqrt(v32 * v32 + v31 * v31);
      *(double *)(a1 + 1968) = v31;
      *(long double *)(a1 + 1976) = v32;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      uint64_t v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v34 = *(_DWORD *)(a1 + 2564);
        uint64_t v35 = *(void *)(a2 + 24);
        uint64_t v36 = *(void *)(a2 + 32);
        uint64_t v38 = *(void *)(a2 + 40);
        uint64_t v37 = *(void *)(a2 + 48);
        uint64_t v39 = *(void *)(a2 + 56);
        uint64_t v40 = *(void *)(a2 + 64);
        uint64_t v41 = *(void *)(a1 + 2400);
        *(_DWORD *)uint64_t buf = 67110913;
        int v52 = v34;
        __int16 v53 = 2049;
        *(void *)int v54 = v35;
        *(_WORD *)&unsigned char v54[8] = 2049;
        *(void *)&v54[10] = v36;
        __int16 v55 = 2050;
        uint64_t v56 = v37;
        __int16 v57 = 2050;
        *(void *)int v58 = v39;
        *(_WORD *)&unsigned char v58[8] = 2049;
        *(void *)int v59 = v38;
        *(_WORD *)&v59[8] = 2050;
        *(void *)int v60 = v40;
        *(_WORD *)&v60[8] = 2050;
        uint64_t v61 = v41;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl, statusReport,kSuplEndReceived,Lat,%{private}f,Lon,%{private}f,uncSemiMajor,%{public}f,uncSemiMinor,%{public}f,alt,%{private}f,uncAlt,%{public}f,unc,%{public}f", buf, 0x4Eu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_43;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_67:
        __int16 v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v49);
        if (v49 != (char *)buf) {
          free(v49);
        }
LABEL_43:
        int v8 = *(_DWORD *)(a2 + 8);
        goto LABEL_44;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    goto LABEL_67;
  }
LABEL_44:
  switch(v8)
  {
    case 2:
      uint64_t v44 = a1 + 104;
      uint64_t v45 = 8;
      goto LABEL_50;
    case 3:
    case 4:
      *(_DWORD *)(a1 + 1868) = 15;
      uint64_t v44 = a1 + 104;
      uint64_t v45 = 11;
      goto LABEL_50;
    case 5:
      *(_DWORD *)(a1 + 1868) = 14;
      uint64_t v44 = a1 + 104;
      uint64_t v45 = 10;
      goto LABEL_50;
    case 10:
      uint64_t v44 = a1 + 104;
      uint64_t v45 = 9;
LABEL_50:
      sub_10011C08C(v44, v45);
      break;
    case 14:
      *(unsigned char *)(a1 + 2072) = 1;
      *(unsigned char *)(a1 + 2344) = 1;
      break;
    case 16:
      *(unsigned char *)(a1 + 2074) = 1;
      *(unsigned char *)(a1 + 2346) = 1;
      break;
    case 18:
      goto LABEL_46;
    default:
      return;
  }
}

void *sub_1017DA618@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 2136), 0x110uLL);
}

void *sub_1017DA628(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1017DA67C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 399) < 0) {
    uint64_t v4 = *(void *)(a1 + 384);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 399);
  }
  if (v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v5 = (const std::string *)(a1 + 376);
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 2564);
      int v8 = (void *)(a1 + 376);
      if (*(char *)(a1 + 399) < 0) {
        int v8 = (void *)v5->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t buf = 67109379;
      int v23 = v7;
      __int16 v24 = 2081;
      int v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,imsi is %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    uint64_t v9 = (std::string *)(a2 + 8);
    int v10 = v5;
    goto LABEL_28;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  int v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)uint64_t buf = 67109120;
    int v23 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,imsi is empty", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  int v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(_DWORD *)(a1 + 2564);
    int v15 = (void *)(a1 + 432);
    if (*(char *)(a1 + 455) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 67109379;
    int v23 = v14;
    __int16 v24 = 2081;
    int v25 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,imei,%{private}s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (*(char *)(a1 + 455) < 0)
  {
    if (*(void *)(a1 + 440)) {
      goto LABEL_27;
    }
  }
  else if (*(unsigned char *)(a1 + 455))
  {
LABEL_27:
    int v10 = (const std::string *)(a1 + 432);
    uint64_t v9 = (std::string *)(a2 + 8);
LABEL_28:
    std::string::operator=(v9, v10);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  int v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v17 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)uint64_t buf = 67109120;
    int v23 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,imeiEmpty", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
}

__n128 sub_1017DACC8(uint64_t a1, __int16 *a2)
{
  int v3 = *(_DWORD *)(a1 + 616);
  uint64_t v4 = (_OWORD *)(a1 + 2664);
  uint64_t v5 = a1 + 2696;
  *(unsigned char *)(a1 + 2696) = v3 != 0;
  *(unsigned char *)(a1 + 2697) = *(_DWORD *)(a1 + 624) != 0;
  int v6 = *((unsigned __int8 *)a2 + 2);
  *(unsigned char *)(a1 + 2698) = v6;
  *(_DWORD *)(a1 + 2672) = 7;
  if (!v3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)uint64_t buf = 67109120;
      int v38 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,discard Wlan Meas request as feature disabled", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v28 = *(_DWORD *)(a1 + 2564);
      int v35 = 67109120;
      int v36 = v28;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestWlanMeas(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v16 = (__n128 *)(a1 + 2664);
    *(_DWORD *)(a1 + 2668) = 5;
    *(CFAbsoluteTime *)(a1 + 2688) = CFAbsoluteTimeGetCurrent();
    long long v17 = v4[1];
    v34[0] = *v4;
    v34[1] = v17;
    v34[2] = v4[2];
    uint64_t v18 = v34;
    goto LABEL_22;
  }
  if (v6 && !*(unsigned char *)(a1 + 2657))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v19 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)uint64_t buf = 67109120;
      int v38 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,discard Wlan Meas request as rssi requested even when disabled", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v30 = *(_DWORD *)(a1 + 2564);
      int v35 = 67109120;
      int v36 = v30;
      double v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestWlanMeas(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    int v16 = (__n128 *)(a1 + 2664);
    *(_DWORD *)(a1 + 2668) = 5;
    *(CFAbsoluteTime *)(a1 + 2688) = CFAbsoluteTimeGetCurrent();
    long long v21 = v4[1];
    v33[0] = *v4;
    v33[1] = v21;
    v33[2] = v4[2];
    uint64_t v18 = v33;
LABEL_22:
    sub_1017D8CA8(a1, v18);
    *(void *)(a1 + 2664) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v16[1] = result;
    *(_WORD *)(a1 + 2702) = 0;
    *(_DWORD *)(a1 + 2672) = 0;
    *(_DWORD *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 4) = 0;
    *(_DWORD *)(a1 + 2704) = 1;
    return result;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  int v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)uint64_t buf = 67109120;
    int v38 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,dispatch_requestWlanMeas", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v26 = *(_DWORD *)(a1 + 2564);
    int v35 = 67109120;
    int v36 = v26;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestWlanMeas(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  __int16 v10 = *a2;
  *(unsigned char *)(a1 + 2618) = *((unsigned char *)a2 + 2);
  *(_WORD *)(a1 + 2616) = v10;
  *(_WORD *)(a1 + 2702) = *a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 2680) = Current;
  LOWORD(Current) = *a2;
  *(double *)(a1 + 2608) = (double)*(unint64_t *)&Current + -2.0;
  id v12 = [*(id *)a1 silo];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1017DB284;
  v32[3] = &unk_1022A3020;
  v32[4] = a1;
  [v12 async:v32];
  return result;
}

uint64_t sub_1017DB284(uint64_t a1)
{
  return sub_10011C08C(*(void *)(a1 + 32) + 104, 19);
}

id sub_1017DB294(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)uint64_t buf = 67109120;
    int v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,wlanMeasurementHandler", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v14 = *(_DWORD *)(a1 + 2564);
    int v17 = 67109120;
    int v18 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::wlanMeasurementHandler(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (*(_DWORD *)a2 == 1)
  {
    *(_DWORD *)(a1 + 2668) = 1;
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16) - v6;
    if (v7)
    {
      unint64_t v8 = v7 / 12;
      char v9 = *(unsigned char *)(a1 + 2699);
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      __int16 v10 = (char *)(v6 + 6);
      do
      {
        char v11 = *v10;
        v10 += 12;
        v9 |= v11;
        --v8;
      }
      while (v8);
      *(unsigned char *)(a1 + 2699) = v9;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 2668) = 4;
  }
  id v12 = [*(id *)a1 silo];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1017DB508;
  v16[3] = &unk_1022A3020;
  v16[4] = a1;
  return [v12 async:v16];
}

uint64_t sub_1017DB508(uint64_t a1)
{
  return sub_10011C08C(*(void *)(a1 + 32) + 104, 20);
}

double sub_1017DB518(uint64_t a1)
{
  *(void *)a1 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q1;
  *(_OWORD *)(a1 + 24) = _Q1;
  *(void *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = xmmword_101D2A480;
  *(_OWORD *)(a1 + 104) = _Q1;
  *(void *)(a1 + 120) = 0xBFF0000000000000;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 2;
  *(_DWORD *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 140) = 0;
  *(void *)(a1 + 145) = 0;
  double result = NAN;
  *(void *)(a1 + 164) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 172) = -1;
  *(int64x2_t *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = 0xBFF0000000000000;
  *(void *)(a1 + 200) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 212) = 255;
  *(_DWORD *)(a1 + 216) = 1;
  *(unsigned char *)(a1 + 228) = 0;
  *(void *)(a1 + 220) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(int64x2_t *)(a1 + 248) = v6;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  return result;
}

void sub_1017DB5CC(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1017DB5FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t sub_1017DB648(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), (void *)a2[3], a2[4]);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 3);
    *(void *)(a1 + 40) = a2[5];
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10016989C((void *)(a1 + 48), (const void *)a2[6], a2[7], a2[7] - a2[6]);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(void *)(a1 + 80) = a2[10];
  if (*((char *)a2 + 111) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 88), (void *)a2[11], a2[12]);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 11);
    *(void *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v6;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  sub_10016989C((void *)(a1 + 112), (const void *)a2[14], a2[15], a2[15] - a2[14]);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  return a1;
}

void sub_1017DB73C(_Unwind_Exception *a1)
{
  sub_1017DB780(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017DB780(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1017DB7C4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1017DB7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1017DB88C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1017DB924(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017DB9C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1017DB9FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1017DBA40(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  long long v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_1017DEE28();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    unint64_t v8 = &v11;
  }
  else {
    unint64_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v9 = a2;
    }
    else {
      char v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)long long v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_1017DBBB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1017DBBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1017DBC90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1017DBD28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017DBDAC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017DBE30(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1017DBEB4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1017DDD90(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void *sub_1017DBF24(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1017DBFA8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_100C608D0((void *)(v2 + 40));
    sub_100C6084C((void *)(v2 + 8));
    operator delete();
  }
  return result;
}

void sub_1017DC010(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 112);
    if (v3)
    {
      *(void *)(a2 + 120) = v3;
      operator delete(v3);
    }
    if (*(char *)(a2 + 111) < 0) {
      operator delete(*(void **)(a2 + 88));
    }
    uint64_t v4 = *(void **)(a2 + 48);
    if (v4)
    {
      *(void *)(a2 + 56) = v4;
      operator delete(v4);
    }
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    operator delete();
  }
}

void *sub_1017DC09C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017DC124()
{
}

void *sub_1017DC138(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D430;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DC180(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D430;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017DC1AC(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 371);
}

uint64_t sub_1017DC1B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DC1F8()
{
}

void *sub_1017DC204(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1017DC464(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1017DC474()
{
}

void *sub_1017DC488(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D4B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DC4D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D4B0;
  a2[1] = v2;
  return result;
}

void sub_1017DC4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 2564);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,suplInitUdp", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrSupl::CLNilrSupl(const SimInstance, id<CLIntersiloUniverse>, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLModemController::ExecuteWrapper, CLNilrTypes::StatusCb, CLNilrWlanScanner &, CLNilrTypes::WlanStatusCb, CLNilrTypes::NonEmergencyNilrCb, CLNilrTypes::ProcessRawSuplInitCb)::(anonymous class)::operator()(std::vector<uint8_t> &&) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  long long v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  id v8 = [*(id *)v3 silo];
  *(void *)uint64_t buf = _NSConcreteStackBlock;
  uint64_t v11 = 3321888768;
  uint64_t v12 = sub_1017DC7D8;
  int v13 = &unk_10233D520;
  uint64_t v14 = v3;
  __n128 __p = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  sub_10016989C(&__p, v6, v7, v7 - (void)v6);
  [v8 async:buf];
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1017DC754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

uint64_t sub_1017DC78C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DC7CC()
{
}

uint64_t sub_1017DC7D8(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 264);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 48))(result, a1 + 40);
  }
  return result;
}

void *sub_1017DC814(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_10016989C(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
}

void sub_1017DC82C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t **sub_1017DC844(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1017DC90C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_1006FF4B0((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

void sub_1017DC978()
{
}

void *sub_1017DC98C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D570;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DC9D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017DCA00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 2564);
    int v6 = *(unsigned __int16 *)(v3 + 2560);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v18 = 1024;
    int v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,decodeSuplInit,index,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    unsigned int v11 = *(_DWORD *)(v3 + 2564);
    int v12 = *(unsigned __int16 *)(v3 + 2560);
    v14[0] = 67109376;
    v14[1] = v11;
    __int16 v15 = 1024;
    int v16 = v12;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  int v7 = *(_DWORD *)(v3 + 2564);
  int v8 = *(unsigned __int16 *)(v3 + 2560);
  v14[0] = v8;
  *(void *)uint64_t buf = v14;
  char v9 = sub_1017DC844((uint64_t **)(v3 + 2536), v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  return sub_10195CA8C(a2, v7, v8, (unsigned __int8 **)v9 + 5);
}

uint64_t sub_1017DCC1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DCC5C()
{
}

void *sub_1017DCC68(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017DCCF0()
{
}

void *sub_1017DCD04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D600;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DCD4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D600;
  a2[1] = v2;
  return result;
}

void *sub_1017DCD78(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    BOOL v5 = *(_DWORD *)(v4 + 2564) != 0;
    v6[0] = off_10233D680;
    v6[1] = v4;
    void v6[3] = v6;
    sub_101997AA0((uint64_t)result, v5, (uint64_t)v6);
    return sub_1017DD2F4(v6);
  }
  return result;
}

void sub_1017DCE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DD2F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017DCE2C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017DCE6C()
{
}

void sub_1017DCE7C()
{
}

void *sub_1017DCE90(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D680;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DCED8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D680;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017DCF04(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  int v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v5 + 2564);
    int v8 = -1227133513 * ((*(void *)(a3 + 8) - *(void *)a3) >> 2);
    *(_DWORD *)uint64_t buf = 67109632;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v4;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,ecidCallback,%d,lteCellListSize,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrSupl::issueEcidRequest()::(anonymous class)::operator()(CLModemController &)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    char v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v10 = *(_DWORD *)(v5 + 2564);
      *(_DWORD *)uint64_t buf = 67109120;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,serving_rat_lte,false", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrSupl::issueEcidRequest()::(anonymous class)::operator()(CLModemController &)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  if (v5 + 2448 != a3) {
    sub_100ADA2D8((char *)(v5 + 2448), *(char **)a3, *(void *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
  }
  return sub_10011C08C(v5 + 104, 17);
}

uint64_t sub_1017DD2A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DD2E8()
{
}

void *sub_1017DD2F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1017DD378(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017DD400()
{
}

void *sub_1017DD414(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D720;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DD45C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D720;
  a2[1] = v2;
  return result;
}

void sub_1017DD488(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long double v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (&v32 != (void **)(v3 + 280)) {
    sub_100A60544(&v32, *(char **)(v3 + 280), *(char **)(v3 + 288), *(void *)(v3 + 288) - *(void *)(v3 + 280));
  }
  uint64_t v4 = *(void *)(v3 + 2440);
  if (!v4) {
    sub_10015E48C();
  }
  unsigned __int8 v35 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = 0uLL;
  unsigned __int8 v27 = 0;
  uint64_t v26 = 0;
  memset(&__p, 0, sizeof(__p));
  *(_WORD *)double v29 = 0;
  v29[2] = 1;
  __int16 v30 = 257;
  unint64_t v31 = 0xBFF0000000000000;
  LOWORD(v25.__r_.__value_.__l.__data_) = *(_WORD *)(v3 + 352);
  if (*(char *)(v3 + 2591) < 0) {
    uint64_t v5 = *(void *)(v3 + 2576);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(v3 + 2591);
  }
  if (v5) {
    int v6 = (const std::string *)(v3 + 2568);
  }
  else {
    int v6 = (const std::string *)(v3 + 328);
  }
  std::string::operator=((std::string *)&v25.__r_.__value_.__r.__words[1], v6);
  unsigned __int8 v27 = *(unsigned char *)(v3 + 368);
  __int16 v30 = *(_WORD *)(v3 + 369);
  if (*(unsigned char *)(v3 + 632)) {
    unint64_t v31 = *(void *)(v3 + 640);
  }
  if (*(char *)(v3 + 399) < 0) {
    uint64_t v7 = *(void *)(v3 + 384);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v3 + 399);
  }
  if (v7) {
    int v8 = (const std::string *)(v3 + 376);
  }
  else {
    int v8 = (const std::string *)(v3 + 432);
  }
  std::string::operator=(&__p, v8);
  v29[0] = *(unsigned char *)(v3 + 2656);
  *(_WORD *)&v29[1] = *(_WORD *)(v3 + 2657);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  char v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)(v3 + 2564);
    if (v26 >= 0) {
      p_std::string::size_type size = (std::string::size_type)&v25.__r_.__value_.__l.__size_;
    }
    else {
      p_std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    int v12 = (void *)(v3 + 400);
    if (*(char *)(v3 + 423) < 0) {
      int v12 = (void *)*v12;
    }
    int v13 = *(unsigned __int8 *)(v3 + 632);
    *(_DWORD *)uint64_t buf = 67111682;
    int v59 = v10;
    __int16 v60 = 1024;
    int v61 = HIBYTE(v30);
    __int16 v62 = 1024;
    int v63 = v30;
    __int16 v64 = 1024;
    int data_low = LOWORD(v25.__r_.__value_.__l.__data_);
    __int16 v66 = 2080;
    std::string::size_type v67 = p_size;
    __int16 v68 = 1024;
    int v69 = v27;
    __int16 v70 = 2080;
    int v71 = v12;
    __int16 v72 = 1024;
    int v73 = v29[0];
    __int16 v74 = 1024;
    int v75 = v29[1];
    __int16 v76 = 1024;
    int v77 = v29[2];
    __int16 v78 = 1024;
    int v79 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSA,%d,uuid,%s,enableLPPRel13,%d,enableRssi,%d,enableLocationSource,%d,configureVerticalUncertainty,%d", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v17 = *(_DWORD *)(v3 + 2564);
    if (v26 >= 0) {
      std::string::size_type size = (std::string::size_type)&v25.__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    int v19 = (void *)(v3 + 400);
    if (*(char *)(v3 + 423) < 0) {
      int v19 = (void *)*v19;
    }
    int v20 = *(unsigned __int8 *)(v3 + 632);
    int v36 = 67111682;
    int v37 = v17;
    __int16 v38 = 1024;
    int v39 = HIBYTE(v30);
    __int16 v40 = 1024;
    int v41 = v30;
    __int16 v42 = 1024;
    int v43 = LOWORD(v25.__r_.__value_.__l.__data_);
    __int16 v44 = 2080;
    std::string::size_type v45 = size;
    __int16 v46 = 1024;
    int v47 = v27;
    __int16 v48 = 2080;
    __int16 v49 = v19;
    __int16 v50 = 1024;
    int v51 = v29[0];
    __int16 v52 = 1024;
    int v53 = v29[1];
    __int16 v54 = 1024;
    int v55 = v29[2];
    __int16 v56 = 1024;
    int v57 = v20;
    long long v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrSupl::handler_Session(CLNilrSupl::Event)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(v3 + 2564);
    int v16 = *(_DWORD *)(v3 + 2512) - *(_DWORD *)(v3 + 2504);
    *(_DWORD *)uint64_t buf = 67109888;
    int v59 = v15;
    __int16 v60 = 1024;
    int v61 = v35;
    __int16 v62 = 1024;
    int v63 = v33 - v32;
    __int16 v64 = 1024;
    int data_low = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,sendSuplInitToDD,lte,%d,certLen,%d,rawSuplInitLen,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v22 = *(_DWORD *)(v3 + 2564);
    int v23 = *(_DWORD *)(v3 + 2512) - *(_DWORD *)(v3 + 2504);
    int v36 = 67109888;
    int v37 = v22;
    __int16 v38 = 1024;
    int v39 = v35;
    __int16 v40 = 1024;
    int v41 = v33 - v32;
    __int16 v42 = 1024;
    int v43 = v23;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrSupl::handler_Session(CLNilrSupl::Event)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  sub_10195D270(a2, (unsigned __int8 **)(v3 + 2504), (unsigned __int8 **)&v32, &v25, (std::string *)(v3 + 400));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25.__r_.__value_.__l.__size_);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
}

void sub_1017DDAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017DDAF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017DDB30()
{
}

uint64_t sub_1017DDB3C(uint64_t a1)
{
  return sub_10011C08C(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1017DDB50()
{
}

void *sub_1017DDB64()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_10233D7A0;
  return result;
}

void sub_1017DDB9C(uint64_t a1, void *a2)
{
  *a2 = off_10233D7A0;
}

uint64_t sub_1017DDBC4(uint64_t a1, uint64_t a2)
{
  return sub_10194B17C(a2, 1);
}

uint64_t sub_1017DDBD0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017DDC10()
{
}

void sub_1017DDC20()
{
}

void *sub_1017DDC34()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_10233D820;
  return result;
}

void sub_1017DDC6C(uint64_t a1, void *a2)
{
  *a2 = off_10233D820;
}

uint64_t sub_1017DDC94(uint64_t a1, uint64_t a2)
{
  return sub_10195D99C(a2);
}

uint64_t sub_1017DDC9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017DDCDC()
{
}

char *sub_1017DDCE8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *((void *)a2 + 6);
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  *((void *)__dst + 6) = v7;
  return __dst;
}

void sub_1017DDD74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017DDD90(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1017D8368(a3, *((_DWORD *)v5 + 8));
      long long v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1017DDE14()
{
}

void *sub_1017DDE28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D8A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DDE70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D8A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017DDE9C(uint64_t a1, uint64_t a2)
{
  return sub_10195D8C4(a2, *(void *)(a1 + 8));
}

uint64_t sub_1017DDEAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DDEEC()
{
}

void sub_1017DDEFC()
{
}

void *sub_1017DDF10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D920;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DDF58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D920;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017DDF84(uint64_t a1, uint64_t a2)
{
  return sub_10195D8C4(a2, *(void *)(a1 + 8));
}

uint64_t sub_1017DDF94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DDFD4()
{
}

void sub_1017DDFE4()
{
}

void *sub_1017DDFF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10233D9A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017DE040(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233D9A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017DE06C(uint64_t a1, uint64_t a2)
{
  return sub_10195CD88(a2, *(void *)(a1 + 8));
}

uint64_t sub_1017DE07C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017DE0BC()
{
}

void sub_1017DE0C8()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"noCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v15[0]);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_1024193E8))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "noCallbackQueue", "{\"msg%{public}.0s\":\"noCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"noCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, v15[0]);
  }
}

#error "1017DE2C4: call analysis failed (funcsize=77)"

#error "1017DE44C: call analysis failed (funcsize=79)"

#error "1017DE5CC: call analysis failed (funcsize=75)"

#error "1017DE744: call analysis failed (funcsize=77)"

#error "1017DE8C4: call analysis failed (funcsize=75)"

#error "1017DEA3C: call analysis failed (funcsize=75)"

#error "1017DEBB4: call analysis failed (funcsize=75)"

#error "1017DED2C: call analysis failed (funcsize=75)"

void sub_1017DEE28()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v15[0]);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, v15[0]);
  }
}

uint64_t sub_1017DEF98(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::TimeQuality", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::TimeQuality ProtobufUtil::fromProtobuf(proto::gnss::TimeQuality)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017DF15C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 72);
  if (v2)
  {
    *(void *)a2 = *(void *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(result + 20);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_11:
    *(void *)(a2 + 24) = *(void *)(result + 24);
    return result;
  }
LABEL_10:
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 64);
  if ((*(_DWORD *)(result + 72) & 0x10) != 0) {
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1017DF1B8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 48);
  if (v4)
  {
    *(unsigned char *)a2 = *(unsigned char *)(result + 16);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v5 = *(void *)(result + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A350 + 8);
  }
  uint64_t result = sub_1017DF15C(v5, a2 + 8);
  int v4 = *(_DWORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = sub_1017DEF98(*(_DWORD *)(v3 + 20));
  *(_DWORD *)(a2 + 40) = result;
  int v4 = *(_DWORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v3 + 40);
  int v4 = *(_DWORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    goto LABEL_7;
  }
LABEL_15:
  *(void *)(a2 + 48) = *(void *)(v3 + 24);
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_7:
  *(void *)(a2 + 56) = *(void *)(v3 + 32);
  return result;
}

uint64_t sub_1017DF268(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 52);
  if (v5)
  {
    uint64_t v6 = *(void *)(result + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A358 + 8);
    }
    uint64_t result = sub_1017DF1B8(v6, a2);
    int v5 = *(_DWORD *)(v4 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      goto LABEL_4;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  *a3 = *(void *)(v4 + 16);
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_4:
  a3[1] = *(void *)(v4 + 24);
  return result;
}

uint64_t sub_1017DF2D8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)result;
  int v3 = *(unsigned __int16 *)(result + 2);
  *(_DWORD *)(a2 + 52) = v2 | 7;
  int v4 = *(unsigned __int16 *)(result + 4);
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  int v5 = *(_DWORD *)(result + 8);
  *(_DWORD *)(a2 + 52) = v2 | 0xF;
  int v6 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a2 + 20) = v5;
  *(_DWORD *)(a2 + 24) = v6;
  int v7 = *(unsigned __int8 *)(result + 18);
  *(_DWORD *)(a2 + 28) = *(unsigned __int16 *)(result + 16);
  *(_DWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 52) = v2 | 0xFF;
  int v8 = *(_DWORD *)(result + 20);
  *(_DWORD *)(a2 + 52) = v2 | 0x1FF;
  *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(result + 19);
  *(_DWORD *)(a2 + 40) = v8;
  int v9 = *(_DWORD *)(result + 24);
  *(_DWORD *)(a2 + 52) = v2 | 0x3FF;
  *(_DWORD *)(a2 + 44) = v9;
  return result;
}

BOOL sub_1017DF348(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)a1;
  int v5 = *(unsigned __int16 *)(a1 + 2);
  *(_DWORD *)(a2 + 44) = v4 | 7;
  int v6 = *(unsigned __int16 *)(a1 + 4);
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  int v7 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 44) = v4 | 0xF;
  int v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = v8;
  int v9 = *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a2 + 44) = v4 | 0x3F;
  *(_DWORD *)(a2 + 28) = v9;
  unsigned int v10 = *(_DWORD *)(a1 + 24);
  if (v10 < 3) {
    unsigned int v11 = v10 + 1;
  }
  else {
    unsigned int v11 = 0;
  }
  BOOL result = sub_100165F14(v11);
  if (!result) {
    sub_101A7328C();
  }
  int v13 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v13 | 0x40;
  int v14 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 44) = v13 | 0xC0;
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = v14;
  return result;
}

uint64_t sub_1017DF3F0(uint64_t a1, int *a2)
{
  if (*(_DWORD *)a1 < 6u) {
    unsigned int v4 = *(_DWORD *)a1 + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (!sub_1003DE2E4(v4)) {
    sub_101A732B8();
  }
  a2[22] |= 1u;
  a2[20] = v4;
  int v5 = -1227133513 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v5);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 28 * v5;
    do
    {
      uint64_t v8 = *(void *)(a1 + 8);
      int v9 = a2[5];
      uint64_t v10 = a2[4];
      if ((int)v10 >= v9)
      {
        if (v9 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v9 + 1);
          int v9 = a2[5];
        }
        a2[5] = v9 + 1;
        sub_1017E6CA0();
      }
      uint64_t v11 = *((void *)a2 + 1);
      a2[4] = v10 + 1;
      sub_1017DF2D8(v8 + v6, *(void *)(v11 + 8 * v10));
      v6 += 28;
    }
    while (v7 != v6);
  }
  unint64_t v12 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v12 >> 4);
  if ((int)(v12 >> 4) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v12 & 0xFFFFFFFF0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = a2[11];
      uint64_t v17 = a2[10];
      if ((int)v17 >= v16)
      {
        if (v16 == a2[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v16 + 1);
          int v16 = a2[11];
        }
        a2[11] = v16 + 1;
        sub_1017E6D04();
      }
      uint64_t v18 = *((void *)a2 + 4);
      a2[10] = v17 + 1;
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      int v20 = *(_DWORD *)(v19 + 32);
      *(unsigned char *)(v19 + 8) = *(unsigned char *)(v15 + v13);
      int v21 = *(unsigned __int16 *)(v15 + v13 + 2);
      *(_DWORD *)(v19 + 32) = v20 | 7;
      int v22 = *(unsigned __int16 *)(v15 + v13 + 4);
      *(_DWORD *)(v19 + 12) = v21;
      *(_DWORD *)(v19 + 16) = v22;
      int v23 = *(_DWORD *)(v15 + v13 + 8);
      *(_DWORD *)(v19 + 32) = v20 | 0xF;
      int v24 = *(_DWORD *)(v15 + v13 + 12);
      *(_DWORD *)(v19 + 32) = v20 | 0x1F;
      *(_DWORD *)(v19 + 20) = v23;
      *(_DWORD *)(v19 + 24) = v24;
      v13 += 16;
    }
    while (v14 != v13);
  }
  unint64_t v25 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
  uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 14), v25 >> 5);
  if ((int)(v25 >> 5) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v25 & 0x1FFFFFFFE0;
    do
    {
      uint64_t v29 = *(void *)(a1 + 56);
      int v30 = a2[17];
      uint64_t v31 = a2[16];
      if ((int)v31 >= v30)
      {
        if (v30 == a2[18])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 14), v30 + 1);
          int v30 = a2[17];
        }
        a2[17] = v30 + 1;
        sub_1017E6D68();
      }
      uint64_t v32 = *((void *)a2 + 7);
      a2[16] = v31 + 1;
      uint64_t result = sub_1017DF348(v29 + v27, *(void *)(v32 + 8 * v31));
      v27 += 32;
    }
    while (v28 != v27);
  }
  return result;
}

std::string *sub_1017DF698(std::string *__str, uint64_t a2)
{
  *(_DWORD *)(a2 + 52) |= 0x20u;
  int v3 = *(std::string **)(a2 + 40);
  if (v3 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }

  return std::string::operator=(v3, __str);
}

BOOL sub_1017DF714(unsigned __int16 *a1, _DWORD *a2)
{
  int v4 = *a1;
  a2[20] |= 1u;
  a2[2] = v4;
  int v5 = *((_DWORD *)a1 + 1);
  unsigned int v6 = v5 + 1;
  unsigned int v7 = v5 + 2;
  if (v6 >= 4) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = v7;
  }
  if (!sub_1001662E0(v8)) {
    sub_101A734C8();
  }
  int v9 = a2[20];
  int v10 = a1[4];
  a2[3] = v8;
  a2[4] = v10;
  int v11 = *((unsigned __int8 *)a1 + 10);
  a2[20] = v9 | 0xE;
  int v12 = *((_DWORD *)a1 + 3);
  a2[5] = v11;
  a2[6] = v12;
  int v13 = *((unsigned __int8 *)a1 + 17);
  a2[7] = *((unsigned __int8 *)a1 + 16);
  a2[8] = v13;
  a2[20] = v9 | 0xFE;
  int v14 = *((_DWORD *)a1 + 5);
  a2[20] = v9 | 0x1FE;
  a2[9] = *((unsigned __int8 *)a1 + 18);
  a2[10] = v14;
  int v15 = a1[14];
  a2[11] = *((_DWORD *)a1 + 6);
  a2[12] = v15;
  int v16 = *((unsigned __int8 *)a1 + 31);
  a2[13] = *((unsigned __int8 *)a1 + 30);
  a2[14] = v16;
  a2[20] = v9 | 0x3FFE;
  int v17 = *((_DWORD *)a1 + 9);
  unsigned int v18 = v17 + 1;
  unsigned int v19 = v17 + 2;
  if (v18 >= 6) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = v19;
  }
  a2[15] = *((unsigned __int8 *)a1 + 32);
  BOOL result = sub_1003DE2E4(v20);
  if (!result) {
    sub_101A7349C();
  }
  int v22 = a2[20];
  a2[20] = v22 | 0x4000;
  int v23 = *((_DWORD *)a1 + 10);
  a2[20] = v22 | 0xC000;
  a2[16] = v20;
  a2[17] = v23;
  return result;
}

BOOL sub_1017DF828(uint64_t a1, _DWORD *a2)
{
  int v4 = a2[17];
  int v5 = *(unsigned __int16 *)(a1 + 4);
  a2[2] = *(_DWORD *)a1;
  a2[3] = v5;
  int v6 = *(unsigned __int8 *)(a1 + 6);
  int v7 = *(unsigned __int8 *)(a1 + 7);
  a2[17] = v4 | 0xF;
  a2[4] = v6;
  a2[5] = v7;
  unsigned int v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 6);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 6), 16);
  for (uint64_t i = 0; i != 256; i += 16)
  {
    int v10 = a2[9];
    uint64_t v11 = (int)a2[8];
    if ((int)v11 >= v10)
    {
      if (v10 == a2[10])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v10 + 1);
        int v10 = a2[9];
      }
      a2[9] = v10 + 1;
      sub_1017E6DCC();
    }
    uint64_t v12 = *((void *)a2 + 3);
    a2[8] = v11 + 1;
    int v13 = *(_DWORD **)(v12 + 8 * v11);
    int v14 = *(unsigned __int16 *)(a1 + i + 8);
    int v15 = v13[8];
    v13[8] = v15 | 3;
    int v16 = *(unsigned __int8 *)(a1 + i + 10);
    v13[2] = v14;
    void v13[3] = v16;
    int v17 = *(_DWORD *)(a1 + i + 12);
    v13[8] = v15 | 7;
    int v18 = *(_DWORD *)(a1 + i + 16);
    void v13[4] = v17;
    v13[5] = v18;
    int v19 = *(unsigned __int8 *)(a1 + i + 20);
    v13[8] = v15 | 0x1F;
    v13[6] = v19;
  }
  int v20 = *(unsigned __int8 *)(a1 + 264);
  a2[17] |= 0x20u;
  a2[12] = v20;
  int v21 = *(_DWORD *)(a1 + 268);
  unsigned int v22 = v21 + 1;
  unsigned int v23 = v21 + 2;
  if (v22 >= 5) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = v23;
  }
  if (!sub_1001A4C58(v24)) {
    sub_101A737E0();
  }
  a2[17] |= 0x40u;
  a2[13] = v24;
  int v25 = *(_DWORD *)(a1 + 272);
  unsigned int v26 = v25 + 1;
  unsigned int v27 = v25 + 2;
  if (v26 >= 6) {
    unsigned int v28 = 0;
  }
  else {
    unsigned int v28 = v27;
  }
  BOOL result = sub_1003DE2E4(v28);
  if (!result) {
    sub_101A737B4();
  }
  int v30 = a2[17];
  a2[17] = v30 | 0x80;
  int v31 = *(_DWORD *)(a1 + 276);
  a2[17] = v30 | 0x180;
  a2[14] = v28;
  a2[15] = v31;
  return result;
}

BOOL sub_1017DF9C4(unsigned __int8 *a1, uint64_t a2, uint8x8_t a3)
{
  int v5 = *(_DWORD *)(a2 + 68);
  int v6 = a1[1];
  *(_DWORD *)(a2 + 8) = *a1;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 68) = v5 | 7;
  int v7 = *((_DWORD *)a1 + 1);
  *(_DWORD *)(a2 + 68) = v5 | 0xF;
  *(_DWORD *)(a2 + 16) = *((unsigned __int16 *)a1 + 1);
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 2);
  a3.i32[0] = *((_DWORD *)a1 + 3);
  *(uint32x4_t *)(a2 + 28) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  int v8 = a1[16];
  int v9 = a1[17];
  *(_DWORD *)(a2 + 68) = v5 | 0x7FF;
  *(_DWORD *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 48) = v9;
  int v10 = *((_DWORD *)a1 + 5);
  unsigned int v11 = v10 + 1;
  unsigned int v12 = v10 + 2;
  if (v11 >= 5) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!sub_1001A4C58(v13)) {
    sub_101A73838();
  }
  *(_DWORD *)(a2 + 68) |= 0x800u;
  *(_DWORD *)(a2 + 52) = v13;
  int v14 = *((_DWORD *)a1 + 6);
  unsigned int v15 = v14 + 1;
  unsigned int v16 = v14 + 2;
  if (v15 >= 6) {
    unsigned int v17 = 0;
  }
  else {
    unsigned int v17 = v16;
  }
  BOOL result = sub_1003DE2E4(v17);
  if (!result) {
    sub_101A7380C();
  }
  int v19 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = v19 | 0x1000;
  int v20 = *((_DWORD *)a1 + 7);
  *(_DWORD *)(a2 + 68) = v19 | 0x3000;
  *(_DWORD *)(a2 + 56) = v17;
  *(_DWORD *)(a2 + 60) = v20;
  return result;
}

__n128 sub_1017DFABC(long long *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 148);
  int v3 = *(_DWORD *)(a2 + 152);
  long long v4 = *a1;
  *(_DWORD *)(a2 + 148) = v2 | 1;
  DWORD1(v4) = *((_DWORD *)a1 + 1);
  *(_DWORD *)(a2 + 148) = v2 | 3;
  DWORD2(v4) = *((_DWORD *)a1 + 2);
  *(_DWORD *)(a2 + 148) = v2 | 7;
  HIDWORD(v4) = *((_DWORD *)a1 + 3);
  *(_DWORD *)(a2 + 148) = v2 | 0xF;
  *(_OWORD *)(a2 + 8) = v4;
  long long v5 = a1[1];
  *(_DWORD *)(a2 + 148) = v2 | 0x1F;
  DWORD1(v5) = *((_DWORD *)a1 + 5);
  *(_DWORD *)(a2 + 148) = v2 | 0x3F;
  DWORD2(v5) = *((_DWORD *)a1 + 6);
  *(_DWORD *)(a2 + 148) = v2 | 0x7F;
  HIDWORD(v5) = *((_DWORD *)a1 + 7);
  *(_OWORD *)(a2 + 24) = v5;
  *(void *)&long long v5 = *((void *)a1 + 4);
  int16x4_t v6 = *(int16x4_t *)((char *)a1 + 40);
  *(void *)&long long v7 = vmovl_u16(*(uint16x4_t *)&v5).u64[0];
  *((void *)&v7 + 1) = vmovl_s16(*(int16x4_t *)&v5).i64[1];
  *(_OWORD *)(a2 + 40) = v7;
  int32x4_t v8 = vmovl_s16(v6);
  v8.i32[3] = vmovl_u16(*(uint16x4_t *)&v6).i32[3];
  *(int32x4_t *)(a2 + 56) = v8;
  *(int32x4_t *)(a2 + 72) = vmovl_s16((int16x4_t)a1[3]);
  int v9 = *((unsigned __int8 *)a1 + 57);
  *(_DWORD *)(a2 + 88) = *((unsigned __int8 *)a1 + 56);
  *(_DWORD *)(a2 + 92) = v9;
  int v10 = *((char *)a1 + 59);
  *(_DWORD *)(a2 + 96) = *((unsigned __int8 *)a1 + 58);
  *(_DWORD *)(a2 + 100) = v10;
  int v11 = *((unsigned __int8 *)a1 + 60);
  int v12 = *((unsigned __int8 *)a1 + 61);
  *(_DWORD *)(a2 + 148) = v2 | 0x3FFFFFF;
  *(_DWORD *)(a2 + 104) = v11;
  *(_DWORD *)(a2 + 108) = v12;
  int v13 = *((_DWORD *)a1 + 16);
  int v14 = *((char *)a1 + 68);
  *(_DWORD *)(a2 + 148) = v2 | 0xFFFFFFF;
  *(_DWORD *)(a2 + 112) = v13;
  *(_DWORD *)(a2 + 116) = v14;
  int v15 = *((_DWORD *)a1 + 18);
  int v16 = *((unsigned __int8 *)a1 + 76);
  *(_DWORD *)(a2 + 148) = v2 | 0x3FFFFFFF;
  *(_DWORD *)(a2 + 120) = v15;
  *(_DWORD *)(a2 + 124) = v16;
  __n128 result = (__n128)a1[5];
  *(_DWORD *)(a2 + 148) = v2 | 0x7FFFFFFF;
  result.n128_u32[1] = *((_DWORD *)a1 + 21);
  *(_DWORD *)(a2 + 148) = -1;
  result.n128_u32[2] = *((_DWORD *)a1 + 22);
  *(_DWORD *)(a2 + 152) = v3 | 1;
  result.n128_u32[3] = *((_DWORD *)a1 + 23);
  *(_DWORD *)(a2 + 152) = v3 | 3;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

BOOL sub_1017DFC00(_DWORD *a1, int *a2)
{
  int v4 = *(unsigned __int8 *)a1;
  a2[13] |= 1u;
  a2[8] = v4;
  long long v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), 16);
  for (uint64_t i = 1; i != 385; i += 24)
  {
    int v7 = a2[5];
    uint64_t v8 = a2[4];
    if ((int)v8 >= v7)
    {
      if (v7 == a2[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v7 + 1);
        int v7 = a2[5];
      }
      a2[5] = v7 + 1;
      sub_1017E6E30();
    }
    uint64_t v9 = *((void *)a2 + 1);
    a2[4] = v8 + 1;
    sub_1017DFABC((long long *)&a1[i], *(void *)(v9 + 8 * v8));
  }
  int v10 = a1[385];
  unsigned int v11 = v10 + 1;
  unsigned int v12 = v10 + 2;
  if (v11 >= 5) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!sub_1001A4C58(v13)) {
    sub_101A73890();
  }
  a2[13] |= 4u;
  a2[9] = v13;
  int v14 = a1[386];
  unsigned int v15 = v14 + 1;
  unsigned int v16 = v14 + 2;
  if (v15 >= 6) {
    unsigned int v17 = 0;
  }
  else {
    unsigned int v17 = v16;
  }
  BOOL result = sub_1003DE2E4(v17);
  if (!result) {
    sub_101A73864();
  }
  int v19 = a2[13];
  a2[13] = v19 | 8;
  int v20 = a1[387];
  a2[13] = v19 | 0x18;
  a2[10] = v17;
  a2[11] = v20;
  return result;
}

uint64_t sub_1017DFD40(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) |= 1u;
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2) {
    operator new();
  }
  int v3 = *(_DWORD *)(v2 + 24);
  *(_WORD *)(v2 + 16) = *(_WORD *)result;
  uint64_t v4 = *(void *)(result + 8);
  *(_DWORD *)(v2 + 24) = v3 | 7;
  *(void *)(v2 + 8) = v4;
  *(_DWORD *)(a2 + 28) |= 2u;
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 16) |= 0xFu;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(result + 16);
  return result;
}

void sub_1017DFE0C()
{
}

std::string *sub_1017DFE44(std::string *__str, uint64_t a2)
{
  uint64_t v4 = (const std::string *)&__str->__r_.__value_.__r.__words[1];
  int v5 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a2 + 32) = __str->__r_.__value_.__s.__data_[0];
  *(_DWORD *)(a2 + 40) = v5 | 3;
  int16x4_t v6 = *(std::string **)(a2 + 8);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v6, v4);
  *(_DWORD *)(a2 + 40) |= 4u;
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    operator new();
  }
  std::string::value_type v8 = __str[1].__r_.__value_.__s.__data_[8];
  *(_DWORD *)(v7 + 16) |= 1u;
  *(unsigned char *)(v7 + 8) = v8;
  *(_DWORD *)(a2 + 40) |= 8u;
  if (!*(void *)(a2 + 24)) {
    operator new();
  }
  uint64_t v9 = *(void *)(a2 + 24);

  return sub_1017DFFA4((unsigned __int16 *)&__str[1].__r_.__value_.__r.__words[2], v9);
}

void sub_1017DFF64()
{
}

std::string *sub_1017DFFA4(unsigned __int16 *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 16) = *a1;
  *(_DWORD *)(a2 + 28) = v4 | 3;
  int v5 = *(std::string **)(a2 + 8);
  if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  BOOL result = std::string::operator=(v5, (const std::string *)(a1 + 4));
  *(_DWORD *)(a2 + 28) |= 0x3Cu;
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a1 + 8);
  return result;
}

BOOL sub_1017E0030(unsigned __int16 *a1, uint64_t a2, uint8x8_t a3)
{
  int v4 = *(_DWORD *)(a2 + 64);
  int v5 = (__int16)a1[1];
  *(_DWORD *)(a2 + 8) = *a1;
  *(_DWORD *)(a2 + 12) = v5;
  a3.i32[0] = *((_DWORD *)a1 + 1);
  uint32x4_t v6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  *(uint32x4_t *)(a2 + 16) = v6;
  int v7 = a1[5];
  *(_DWORD *)(a2 + 32) = *((unsigned __int8 *)a1 + 8);
  *(_DWORD *)(a2 + 36) = v7;
  *(_DWORD *)(a2 + 64) = v4 | 0xFFF;
  v6.i32[0] = *((_DWORD *)a1 + 3);
  *(uint32x4_t *)(a2 + 40) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v6.i8));
  int v8 = *((_DWORD *)a1 + 4);
  switch(v8)
  {
    case 0:
      unsigned int v9 = 1;
      break;
    case 1:
      unsigned int v9 = 2;
      break;
    case 2:
      unsigned int v9 = 3;
      break;
    case 3:
      unsigned int v9 = 4;
      break;
    default:
      if (v8 == 255) {
        unsigned int v9 = 5;
      }
      else {
        unsigned int v9 = 0;
      }
      break;
  }
  BOOL result = sub_1003DE2E4(v9);
  if (!result) {
    sub_101A738BC();
  }
  *(_DWORD *)(a2 + 64) |= 0x1000u;
  *(_DWORD *)(a2 + 56) = v9;
  return result;
}

int *sub_1017E011C(int *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) |= 1u;
  uint64_t v2 = *(_DWORD **)(a2 + 8);
  if (!v2) {
    operator new();
  }
  int v3 = *result;
  int v4 = v2[5];
  v2[5] = v4 | 1;
  int v5 = result[1];
  v2[5] = v4 | 3;
  v2[2] = v3;
  v2[3] = v5;
  int v6 = *((unsigned __int16 *)result + 4);
  int v7 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = v7 | 2;
  int v8 = result[3];
  *(_DWORD *)(a2 + 28) = v7 | 6;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v8;
  return result;
}

void sub_1017E01C0()
{
}

int *sub_1017E01E4(unsigned __int16 *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) |= 1u;
  uint64_t v2 = *(_DWORD **)(a2 + 8);
  if (!v2) {
    operator new();
  }
  int v3 = *a1;
  int v4 = v2[6];
  v2[6] = v4 | 1;
  int v5 = *((_DWORD *)a1 + 1);
  v2[2] = v3;
  v2[3] = v5;
  int v6 = a1[4];
  v2[6] = v4 | 7;
  v2[4] = v6;
  *(_DWORD *)(a2 + 28) |= 2u;
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    operator new();
  }
  int v8 = (int *)(a1 + 6);

  return sub_1017E011C(v8, v7);
}

void sub_1017E02C0()
{
}

int *sub_1017E0300(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)a1;
  if (v4 > 4) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = dword_101E373DC[v4];
  }
  if (!sub_1001A4C58(v5)) {
    sub_101A73788();
  }
  int v6 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v6 | 3;
  if (!*(void *)(a2 + 8)) {
    operator new();
  }
  uint64_t v7 = *(void *)(a2 + 8);

  return sub_1017E01E4(a1 + 2, v7);
}

void sub_1017E03B0()
{
}

BOOL sub_1017E03D4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 68);
  int v5 = *(unsigned __int8 *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 68) = v4 | 7;
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    operator new();
  }
  sub_1017E0300((unsigned __int16 *)(a1 + 8), v6);
  for (uint64_t i = 40; i != 360; i += 20)
  {
    int v9 = *(_DWORD *)(a2 + 36);
    uint64_t v10 = *(int *)(a2 + 32);
    if ((int)v10 >= v9)
    {
      if (v9 == *(_DWORD *)(a2 + 40))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 24), v9 + 1);
        int v9 = *(_DWORD *)(a2 + 36);
      }
      *(_DWORD *)(a2 + 36) = v9 + 1;
      sub_1017E6E94();
    }
    uint64_t v11 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = v10 + 1;
    sub_1017E0030((unsigned __int16 *)(a1 + i), *(void *)(v11 + 8 * v10), v7);
  }
  int v12 = *(unsigned __int8 *)(a1 + 360);
  *(_DWORD *)(a2 + 68) |= 0x10u;
  *(_DWORD *)(a2 + 48) = v12;
  int v13 = *(_DWORD *)(a1 + 364);
  unsigned int v14 = v13 + 1;
  unsigned int v15 = v13 + 2;
  if (v14 >= 5) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = v15;
  }
  if (!sub_1001A4C58(v16)) {
    sub_101A73914();
  }
  *(_DWORD *)(a2 + 68) |= 0x20u;
  *(_DWORD *)(a2 + 52) = v16;
  int v17 = *(_DWORD *)(a1 + 368);
  unsigned int v18 = v17 + 1;
  unsigned int v19 = v17 + 2;
  if (v18 >= 6) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = v19;
  }
  BOOL result = sub_1003DE2E4(v20);
  if (!result) {
    sub_101A738E8();
  }
  int v22 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = v22 | 0x40;
  int v23 = *(_DWORD *)(a1 + 372);
  *(_DWORD *)(a2 + 68) = v22 | 0xC0;
  *(_DWORD *)(a2 + 56) = v20;
  *(_DWORD *)(a2 + 60) = v23;
  return result;
}

void sub_1017E0558()
{
}

int *sub_1017E057C(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_101874C30(*(_DWORD *)a1);
  if (!sub_100748708(v4)) {
    sub_101A73998();
  }
  *(_DWORD *)(a2 + 28) |= 1u;
  *(_DWORD *)(a2 + 8) = v4;
  uint64_t v5 = *(int *)(a1 + 4);
  if (v5 > 4) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = dword_101E373DC[v5];
  }
  if (!sub_1001A4C58(v6)) {
    sub_101A7396C();
  }
  int v7 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 28) = v7 | 6;
  if (!*(void *)(a2 + 16)) {
    operator new();
  }
  uint64_t v8 = *(void *)(a2 + 16);

  return sub_1017E01E4((unsigned __int16 *)(a1 + 8), v8);
}

void sub_1017E0654()
{
}

uint64_t sub_1017E0678(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 0x11)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionMethod", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::PositionMethod ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionMethod)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E083C(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionReqType", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::PositionReqType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionReqType)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E0A00(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionSession", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::PositionSession ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionSession)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E0BC4(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionProtocol", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::PositionProtocol ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionProtocol)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E0D88(int a1)
{
  if ((a1 - 1) < 0x10) {
    return dword_101E373F0[a1 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SessionErrorCode", buf, 8u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::SessionErrorCode ProtobufUtil::fromProtobuf(proto::gnss::Emergency::SessionErrorCode)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1017E0F5C(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::TriggerType", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Supl::TriggerType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::TriggerType)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E1120(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 0x20)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::Status", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Supl::Status ProtobufUtil::fromProtobuf(proto::gnss::Emergency::Status)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E12E4(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 0x17)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::EndCause", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Supl::EndCause ProtobufUtil::fromProtobuf(proto::gnss::Emergency::EndCause)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E14A8(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SLPAddressType", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Supl::SLPAddressType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::SLPAddressType)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E166C(int a1)
{
  if ((a1 - 1) < 8) {
    return dword_101E37430[a1 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ErrorCodes", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ErrorCodes ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ErrorCodes)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 4294967294;
}

uint64_t sub_1017E1838(int a1)
{
  if ((a1 - 1) < 4) {
    return (a1 - 2);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ClsModemState", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ClsModemState ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ClsModemState)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1017E19FC(int a1)
{
  if ((a1 - 1) < 5) {
    return (a1 - 2);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SessionProtocol", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::SessionProtocol ProtobufUtil::fromProtobuf(proto::gnss::Emergency::SessionProtocol)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1017E1BC0(int a1)
{
  if ((a1 - 1) < 6) {
    return (a1 - 2);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PosProtocol", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::PosProtocol ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PosProtocol)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1017E1D84(int a1)
{
  if ((a1 - 1) < 3) {
    return (a1 - 2);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::FixType", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::FixType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::FixType)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1017E1F48(int a1)
{
  if ((a1 - 1) < 5) {
    return dword_101E37450[a1 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ClsNetworkType", buf, 8u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ClsNetworkType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ClsNetworkType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1017E211C(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 5)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v6 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::GnssTimeId", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::GnssTimeId ProtobufUtil::fromProtobuf(proto::gnss::Emergency::GnssTimeId)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 4;
  }
  return result;
}

uint64_t sub_1017E22D8(int a1)
{
  if ((a1 - 1) < 8) {
    return dword_101E37464[a1 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ShapeType", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ShapeType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ShapeType)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 255;
}

uint64_t sub_1017E24A4(int a1)
{
  if ((a1 - 1) < 5) {
    return dword_101E37484[a1 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::VelocityType", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::VelocityType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::VelocityType)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 255;
}

uint64_t sub_1017E2670(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 5)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v6 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::MultipathIndicator", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::MultipathIndicator ProtobufUtil::fromProtobuf(proto::gnss::Emergency::MultipathIndicator)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 4;
  }
  return result;
}

uint64_t sub_1017E282C(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v6 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::GanssId", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::GanssId ProtobufUtil::fromProtobuf(proto::gnss::Emergency::GanssId)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 5;
  }
  return result;
}

uint64_t sub_1017E29E8(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v6 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::LcsGanssId", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::LcsGanssId ProtobufUtil::fromProtobuf(proto::gnss::Emergency::LcsGanssId)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 5;
  }
  return result;
}

uint64_t sub_1017E2BA4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 124);
  if (v4)
  {
    *(void *)a2 = *(void *)(result + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(void *)(a2 + 8) = *(void *)(result + 16);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  *(void *)(a2 + 16) = *(void *)(result + 24);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  *(void *)(a2 + 24) = *(void *)(result + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(void *)(a2 + 32) = *(void *)(result + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  *(void *)(a2 + 40) = *(void *)(result + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(result + 56);
  int v4 = *(_DWORD *)(result + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = sub_1017E0678(*(_DWORD *)(result + 60));
  *(_DWORD *)(a2 + 52) = result;
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = sub_1017E0A00(*(_DWORD *)(v3 + 64));
  *(_DWORD *)(a2 + 56) = result;
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = sub_1017E0BC4(*(_DWORD *)(v3 + 68));
  *(_DWORD *)(a2 + 60) = result;
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  *(void *)(a2 + 64) = *(void *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  *(void *)(a2 + 72) = *(void *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  *(void *)(a2 + 80) = *(void *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = sub_1017E083C(*(_DWORD *)(v3 + 96));
  *(_DWORD *)(a2 + 88) = result;
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = sub_1017E0D88(*(_DWORD *)(v3 + 100));
  *(_DWORD *)(a2 + 92) = result;
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(v3 + 104);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  *(unsigned char *)(a2 + 97) = *(unsigned char *)(v3 + 105);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_39:
  *(void *)(a2 + 104) = *(void *)(v3 + 112);
  if ((v4 & 0x40000) == 0) {
    return result;
  }
LABEL_20:
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(v3 + 108);
  return result;
}

uint64_t sub_1017E2D28(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 32);
  if (v2)
  {
    *(unsigned char *)a2 = *(unsigned char *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a2 + 1) = *(_DWORD *)(result + 12);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  *(unsigned char *)(a2 + 2) = *(_DWORD *)(result + 16);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_11:
    *(unsigned char *)(a2 + 6) = *(_DWORD *)(result + 24);
    return result;
  }
LABEL_10:
  *(_WORD *)(a2 + 4) = *(_DWORD *)(result + 20);
  if ((v2 & 0x10) != 0) {
    goto LABEL_11;
  }
  return result;
}

void sub_1017E2D80(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 44);
  if (v4)
  {
    *(unsigned char *)a2 = *(unsigned char *)(a1 + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = sub_1017E14A8(*(_DWORD *)(a1 + 12));
  if ((*(_DWORD *)(a1 + 44) & 4) != 0) {
LABEL_4:
  }
    std::string::operator=((std::string *)(a2 + 8), *(const std::string **)(a1 + 16));
LABEL_5:
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  unsigned int v7 = *(_DWORD *)(a1 + 32);
  if ((int)v7 <= (unint64_t)(v6 - v5))
  {
    if ((int)v7 < (unint64_t)(v6 - v5))
    {
      LODWORD(v6) = v5 + v7;
      *(void *)(a2 + 40) = v5 + (int)v7;
    }
  }
  else
  {
    sub_1004BFB3C((unint64_t *)(a2 + 32), (int)v7 - (v6 - v5));
    unsigned int v7 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v6 = *(void *)(a2 + 40);
  }
  unsigned int v8 = v6 - v5;
  if ((int)v7 >= (int)v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  if ((int)v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (i >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
      }
      *(unsigned char *)(*(void *)(a2 + 32) + i) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * i);
    }
  }
}

void sub_1017E2EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017E2ED4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A480 + 8);
    }
    sub_1017E2D80(v5, a2);
    int v4 = *(_DWORD *)(a1 + 24);
  }
  if ((v4 & 2) != 0) {
    *(_DWORD *)(a2 + 56) = sub_1017E0F5C(*(_DWORD *)(a1 + 16));
  }
}

void sub_1017E2F34(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4)
  {
    *(_DWORD *)a2 = sub_1017E0678(*(_DWORD *)(a1 + 40));
    int v4 = *(_DWORD *)(a1 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A488 + 8);
  }
  sub_1017E2D28(v5, a2 + 4);
  int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248A488 + 16);
  }
  sub_1017E2D80(v6, a2 + 16);
  int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 8) != 0)
  {
LABEL_13:
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A488 + 24);
    }
    int v8 = *(_DWORD *)(v7 + 16);
    if (v8) {
      *(unsigned char *)(a2 + 72) = *(unsigned char *)(v7 + 8);
    }
    if ((v8 & 2) != 0) {
      *(unsigned char *)(a2 + 73) = *(unsigned char *)(v7 + 9);
    }
  }
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248A488 + 32);
    }
    sub_1017E2ED4(v9, a2 + 80);
  }
}

_DWORD *sub_1017E3044(_DWORD *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = result[26];
  if (v4)
  {
    *(_DWORD *)a2 = result[2];
    int v4 = result[26];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = (_DWORD *)sub_1017E0678(result[3]);
  *(_DWORD *)(a2 + 4) = result;
  int v4 = v3[26];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = (_DWORD *)sub_1017E1120(v3[4]);
  *(_DWORD *)(a2 + 8) = result;
  int v4 = v3[26];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = (_DWORD *)sub_1017E12E4(v3[5]);
  *(_DWORD *)(a2 + 12) = result;
  int v4 = v3[26];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  *(void *)(a2 + 16) = *((void *)v3 + 3);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  *(void *)(a2 + 24) = *((void *)v3 + 4);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  *(void *)(a2 + 32) = *((void *)v3 + 5);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  *(void *)(a2 + 40) = *((void *)v3 + 6);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(void *)(a2 + 48) = *((void *)v3 + 7);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  *(void *)(a2 + 56) = *((void *)v3 + 8);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(void *)(a2 + 64) = *((void *)v3 + 9);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  *(unsigned char *)(a2 + 72) = *((unsigned char *)v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  *(unsigned char *)(a2 + 73) = *((unsigned char *)v3 + 97);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  *(unsigned char *)(a2 + 74) = *((unsigned char *)v3 + 98);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      return result;
    }
LABEL_35:
    uint64_t v6 = *((void *)v3 + 11);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A498 + 88);
    }
    int v7 = *(_DWORD *)(v6 + 28);
    if (v7)
    {
      *(_DWORD *)(a2 + 128) = *(_DWORD *)(v6 + 8);
      int v7 = *(_DWORD *)(v6 + 28);
      if ((v7 & 2) == 0)
      {
LABEL_39:
        if ((v7 & 4) == 0) {
          return result;
        }
        goto LABEL_40;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_39;
    }
    *(_WORD *)(a2 + 132) = *(_DWORD *)(v6 + 12);
    if ((v7 & 4) == 0) {
      return result;
    }
LABEL_40:
    *(void *)(a2 + 136) = *(void *)(v6 + 16);
    return result;
  }
LABEL_32:
  uint64_t v5 = *((void *)v3 + 10);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A498 + 80);
  }
  uint64_t result = (_DWORD *)sub_1017E31EC(v5, a2 + 80);
  if ((v3[26] & 0x8000) != 0) {
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_1017E31EC(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 60);
  if (v2)
  {
    *(void *)a2 = *(void *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(void *)(a2 + 8) = *(void *)(result + 16);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  *(void *)(a2 + 16) = *(void *)(result + 24);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(a2 + 24) = *(void *)(result + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(void *)(a2 + 32) = *(void *)(result + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_15:
    *(unsigned char *)(a2 + 41) = *(_DWORD *)(result + 52);
    return result;
  }
LABEL_14:
  *(unsigned char *)(a2 + 40) = *(_DWORD *)(result + 48);
  if ((v2 & 0x40) != 0) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1017E3264(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 36))
  {
    uint64_t v3 = *(_DWORD **)(result + 8);
    if (!v3) {
      uint64_t v3 = *(_DWORD **)(qword_10248A4A8 + 8);
    }
    int v4 = v3[5];
    if (v4)
    {
      *(_DWORD *)a2 = v3[2];
      int v4 = v3[5];
    }
    if ((v4 & 2) != 0) {
      *(_DWORD *)(a2 + 4) = v3[3];
    }
  }
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 2) != 0)
  {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v5 & 4) == 0)
    {
LABEL_10:
      if ((v5 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(_WORD *)(a2 + 10) = *(_DWORD *)(result + 20);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      return result;
    }
    goto LABEL_12;
  }
LABEL_16:
  *(_WORD *)(a2 + 12) = *(_DWORD *)(result + 24);
  if ((v5 & 0x10) == 0) {
    return result;
  }
LABEL_12:
  uint64_t result = sub_1017E1838(*(_DWORD *)(result + 28));
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1017E330C(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = (int *)result;
  int v4 = *(_DWORD *)(result + 24);
  if (v4)
  {
    uint64_t result = sub_1017E19FC(*(_DWORD *)(result + 8));
    *a2 = result;
    int v4 = v3[6];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = sub_1017E1BC0(v3[3]);
  a2[1] = result;
  if ((v3[6] & 4) == 0) {
    return result;
  }
LABEL_4:
  a2[2] = v3[4];
  return result;
}

uint64_t sub_1017E3374(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 28);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A4C8 + 8);
    }
    uint64_t result = sub_1017E3264(v5, a2);
    int v4 = *(_DWORD *)(v3 + 28);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD **)(v3 + 16);
    if (!v6) {
      uint64_t v6 = *(_DWORD **)(qword_10248A4C8 + 16);
    }
    int v7 = v6[5];
    if (v7)
    {
      *(_DWORD *)(a2 + 20) = v6[2];
      int v7 = v6[5];
    }
    if ((v7 & 2) != 0) {
      *(_DWORD *)(a2 + 24) = v6[3];
    }
  }
  return result;
}

uint64_t sub_1017E3400(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 36);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A4E0 + 8);
    }
    uint64_t result = sub_1017E3374(v5, a2);
    int v4 = *(_DWORD *)(v3 + 36);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v6 = *(_DWORD **)(v3 + 16);
    if (!v6) {
      uint64_t v6 = *(_DWORD **)(qword_10248A4E0 + 16);
    }
    int v7 = v6[5];
    if (v7)
    {
      *(_DWORD *)(a2 + 28) = v6[2];
      int v7 = v6[5];
    }
    if ((v7 & 2) != 0) {
      *(unsigned char *)(a2 + 32) = v6[3];
    }
  }
  if ((*(unsigned char *)(v3 + 36) & 4) != 0)
  {
    int v8 = *(_DWORD **)(v3 + 24);
    if (!v8) {
      int v8 = *(_DWORD **)(qword_10248A4E0 + 24);
    }
    int v9 = v8[5];
    if (v9)
    {
      *(_DWORD *)(a2 + 36) = v8[2];
      int v9 = v8[5];
    }
    if ((v9 & 2) != 0) {
      *(unsigned char *)(a2 + 40) = v8[3];
    }
  }
  return result;
}

uint64_t sub_1017E34CC(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 24);
  if (v4)
  {
    uint64_t result = sub_1017E1F48(*(_DWORD *)(result + 16));
    *a2 = result;
    if ((*(_DWORD *)(v3 + 24) & 2) == 0) {
      return result;
    }
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A4E8 + 8);
  }

  return sub_1017E3400(v5, (uint64_t)(a2 + 1));
}

_DWORD *sub_1017E3548(_DWORD *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = result[10];
  if (v4)
  {
    *(_DWORD *)a2 = result[2];
    int v4 = result[10];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(unsigned char *)(a2 + 6) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = (_DWORD *)sub_1017E1D84(result[5]);
  *(_DWORD *)(a2 + 8) = result;
  int v4 = v3[10];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(_DWORD *)(a2 + 12) = v3[8];
  if ((v3[10] & 0x20) == 0) {
    return result;
  }
LABEL_13:
  uint64_t v5 = (_DWORD *)*((void *)v3 + 3);
  if (!v5) {
    uint64_t v5 = *(_DWORD **)(qword_10248A4F8 + 24);
  }
  int v6 = v5[6];
  if (v6)
  {
    *(_DWORD *)(a2 + 16) = v5[2];
    int v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_17:
      if ((v6 & 4) == 0) {
        return result;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_17;
  }
  *(_WORD *)(a2 + 20) = v5[3];
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_18:
  *(unsigned char *)(a2 + 22) = v5[4];
  return result;
}

uint64_t sub_1017E3628(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 32);
  if (v2)
  {
    *(_DWORD *)a2 = *(_DWORD *)(result + 8);
    int v2 = *(_DWORD *)(result + 32);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(result + 12);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      return result;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 24);
  if ((*(_DWORD *)(result + 32) & 8) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v3 = *(_DWORD **)(result + 16);
  if (!v3) {
    uint64_t v3 = *(_DWORD **)(qword_10248A500 + 16);
  }
  int v4 = v3[6];
  if (v4)
  {
    *(_WORD *)(a2 + 12) = v3[2];
    if ((v4 & 2) == 0)
    {
LABEL_13:
      if ((v4 & 4) != 0) {
        goto LABEL_17;
      }
      return result;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_13;
  }
  *(_WORD *)(a2 + 14) = v3[3];
  if ((v4 & 4) != 0) {
LABEL_17:
  }
    *(_DWORD *)(a2 + 16) = v3[4];
  return result;
}

uint64_t sub_1017E36BC(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 36);
  if (v2)
  {
    *(void *)a2 = *(void *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      *(_WORD *)(a2 + 10) = *(_DWORD *)(result + 20);
      if ((v2 & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v2 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v2 & 8) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v3 = *(void *)(result + 24);
  if (!v3) {
    uint64_t v3 = *(void *)(qword_10248A508 + 24);
  }
  return sub_1017E3628(v3, a2 + 12);
}

uint64_t sub_1017E3718(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 28);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    *(_WORD *)(a2 + 2) = *(_DWORD *)(result + 12);
    if ((v2 & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  *(unsigned char *)a2 = *(_DWORD *)(result + 8);
  if ((v2 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v2 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    uint64_t v3 = *(void *)(qword_10248A510 + 16);
  }
  return sub_1017E3628(v3, a2 + 4);
}

uint64_t sub_1017E3764(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 60);
  if (v2)
  {
    *(_WORD *)a2 = *(_DWORD *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(result + 12);
  int v2 = *(_DWORD *)(result + 60);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 20);
    int v2 = *(_DWORD *)(result + 60);
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
LABEL_9:
  *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v2 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v2 & 0x10) == 0) {
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v3 = *(_DWORD **)(result + 24);
  if (!v3) {
    uint64_t v3 = *(_DWORD **)(qword_10248A518 + 24);
  }
  int v4 = v3[6];
  if (v4)
  {
    *(_WORD *)(a2 + 16) = v3[2];
    if ((v4 & 2) == 0)
    {
LABEL_15:
      if ((v4 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_15;
  }
  *(_WORD *)(a2 + 18) = v3[3];
  if ((v4 & 4) != 0)
  {
LABEL_16:
    *(_DWORD *)(a2 + 20) = v3[4];
    int v2 = *(_DWORD *)(result + 60);
  }
LABEL_17:
  if ((v2 & 0x20) != 0)
  {
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 32);
    int v2 = *(_DWORD *)(result + 60);
    if ((v2 & 0x40) == 0)
    {
LABEL_19:
      if ((v2 & 0x80) == 0) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_19;
  }
  *(_WORD *)(a2 + 28) = *(_DWORD *)(result + 36);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 40);
  int v2 = *(_DWORD *)(result + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
LABEL_27:
  *(unsigned char *)(a2 + 36) = *(_DWORD *)(result + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_29:
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 52);
    return result;
  }
LABEL_28:
  *(unsigned char *)(a2 + 37) = *(_DWORD *)(result + 48);
  if ((v2 & 0x400) != 0) {
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_1017E3874(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 36);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A520 + 8);
    }
    uint64_t result = sub_1017E36BC(v5, a2);
    int v4 = *(_DWORD *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v6 = *(void *)(v3 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248A520 + 16);
  }
  uint64_t result = sub_1017E3718(v6, a2 + 32);
  if ((*(_DWORD *)(v3 + 36) & 4) != 0)
  {
LABEL_11:
    uint64_t v7 = *(void *)(v3 + 24);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A520 + 24);
    }
    return sub_1017E3764(v7, a2 + 56);
  }
  return result;
}

uint64_t sub_1017E3930(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 24);
  if (v4)
  {
    uint64_t result = sub_1017E1F48(*(_DWORD *)(result + 16));
    *a2 = result;
    if ((*(_DWORD *)(v3 + 24) & 2) == 0) {
      return result;
    }
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A528 + 8);
  }

  return sub_1017E3874(v5, (uint64_t)(a2 + 2));
}

uint64_t sub_1017E39AC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 36);
  if (v4)
  {
    uint64_t result = sub_1017E211C(*(_DWORD *)(result + 8));
    *(_DWORD *)a2 = result;
    int v4 = v3[9];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = v3[3];
  int v4 = v3[9];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  *(_WORD *)(a2 + 8) = v3[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(unsigned char *)(a2 + 10) = v3[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    goto LABEL_7;
  }
LABEL_13:
  uint64_t result = sub_1017E1D84(v3[6]);
  *(_DWORD *)(a2 + 12) = result;
  if ((v3[9] & 0x20) == 0) {
    return result;
  }
LABEL_7:
  *(_WORD *)(a2 + 16) = v3[7];
  return result;
}

uint64_t sub_1017E3A48(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 24))
  {
    int v2 = *(_DWORD **)(result + 8);
    if (!v2) {
      int v2 = *(_DWORD **)(qword_10248A540 + 8);
    }
    int v3 = v2[5];
    if (v3)
    {
      *(_DWORD *)a2 = v2[2];
      int v3 = v2[5];
    }
    if ((v3 & 2) != 0) {
      *(_DWORD *)(a2 + 4) = v2[3];
    }
  }
  if ((*(unsigned char *)(result + 24) & 2) != 0) {
    *(unsigned char *)(a2 + 8) = *(_DWORD *)(result + 16);
  }
  return result;
}

uint64_t sub_1017E3A9C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 36))
  {
    int v2 = *(_DWORD **)(result + 8);
    if (!v2) {
      int v2 = *(_DWORD **)(qword_10248A548 + 8);
    }
    int v3 = v2[5];
    if (v3)
    {
      *(_DWORD *)a2 = v2[2];
      int v3 = v2[5];
    }
    if ((v3 & 2) != 0) {
      *(_DWORD *)(a2 + 4) = v2[3];
    }
  }
  int v4 = *(_DWORD *)(result + 36);
  if ((v4 & 2) != 0)
  {
    *(unsigned char *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_10:
      if ((v4 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(unsigned char *)(a2 + 9) = *(_DWORD *)(result + 20);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      return result;
    }
LABEL_16:
    *(unsigned char *)(a2 + 11) = *(_DWORD *)(result + 28);
    return result;
  }
LABEL_15:
  *(unsigned char *)(a2 + 10) = *(_DWORD *)(result + 24);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1017E3B24(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 44))
  {
    int v2 = *(_DWORD **)(result + 8);
    if (!v2) {
      int v2 = *(_DWORD **)(qword_10248A550 + 8);
    }
    int v3 = v2[5];
    if (v3)
    {
      *(_DWORD *)a2 = v2[2];
      int v3 = v2[5];
    }
    if ((v3 & 2) != 0) {
      *(_DWORD *)(a2 + 4) = v2[3];
    }
  }
  int v4 = *(_DWORD *)(result + 44);
  if ((v4 & 2) != 0)
  {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_10:
      if ((v4 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(unsigned char *)(a2 + 10) = *(_DWORD *)(result + 20);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(unsigned char *)(a2 + 11) = *(_DWORD *)(result + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(unsigned char *)(a2 + 12) = *(_DWORD *)(result + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      return result;
    }
LABEL_20:
    *(unsigned char *)(a2 + 14) = *(_DWORD *)(result + 36);
    return result;
  }
LABEL_19:
  *(unsigned char *)(a2 + 13) = *(_DWORD *)(result + 32);
  if ((v4 & 0x40) != 0) {
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_1017E3BCC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 40))
  {
    int v2 = *(_DWORD **)(result + 8);
    if (!v2) {
      int v2 = *(_DWORD **)(qword_10248A558 + 8);
    }
    int v3 = v2[5];
    if (v3)
    {
      *(_DWORD *)a2 = v2[2];
      int v3 = v2[5];
    }
    if ((v3 & 2) != 0) {
      *(_DWORD *)(a2 + 4) = v2[3];
    }
  }
  int v4 = *(_DWORD *)(result + 40);
  if ((v4 & 2) != 0)
  {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_10:
      if ((v4 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(unsigned char *)(a2 + 10) = *(_DWORD *)(result + 20);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(unsigned char *)(a2 + 11) = *(_DWORD *)(result + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      return result;
    }
LABEL_18:
    *(unsigned char *)(a2 + 13) = *(_DWORD *)(result + 32);
    return result;
  }
LABEL_17:
  *(unsigned char *)(a2 + 12) = *(_DWORD *)(result + 28);
  if ((v4 & 0x20) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1017E3C64(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 24))
  {
    int v2 = *(_DWORD **)(result + 8);
    if (!v2) {
      int v2 = *(_DWORD **)(qword_10248A560 + 8);
    }
    int v3 = v2[5];
    if (v3)
    {
      *(_DWORD *)a2 = v2[2];
      int v3 = v2[5];
    }
    if ((v3 & 2) != 0) {
      *(_DWORD *)(a2 + 4) = v2[3];
    }
  }
  if ((*(unsigned char *)(result + 24) & 2) != 0) {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  }
  return result;
}

void sub_1017E3CB8(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    *a2 = *(_DWORD *)(a1 + 32);
  }
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    if (v3 >= 15) {
      uint64_t v5 = 15;
    }
    else {
      uint64_t v5 = v3;
    }
    uint64_t v6 = a2 + 8;
    do
    {
      if (v4 >= *(int *)(a1 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
      }
      uint64_t v7 = *(_DWORD **)(*(void *)(a1 + 8) + 8 * v4);
      int v8 = v7[5];
      if (v8)
      {
        *(v6 - 1) = v7[2];
        int v8 = v7[5];
      }
      if ((v8 & 2) != 0) {
        _DWORD *v6 = v7[3];
      }
      ++v4;
      v6 += 2;
    }
    while (v5 != v4);
  }
}

void sub_1017E3DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017E3DC0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A570 + 8);
    }
    sub_1017E3A48(v5, a2);
    int v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248A570 + 16);
  }
  sub_1017E3A9C(v6, a2 + 12);
  int v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A570 + 24);
  }
  sub_1017E3B24(v7, a2 + 24);
  int v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248A570 + 32);
  }
  sub_1017E3BCC(v8, a2 + 40);
  if ((*(_DWORD *)(a1 + 72) & 0x10) != 0)
  {
LABEL_19:
    int v9 = *(_DWORD **)(a1 + 40);
    if (!v9) {
      int v9 = *(_DWORD **)(qword_10248A570 + 40);
    }
    int v10 = v9[5];
    if (v10)
    {
      *(_DWORD *)(a2 + 56) = v9[2];
      int v10 = v9[5];
    }
    if ((v10 & 2) != 0) {
      *(_DWORD *)(a2 + 60) = v9[3];
    }
  }
LABEL_25:
  int v11 = *(_DWORD *)(a1 + 72);
  if ((v11 & 0x20) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248A570 + 48);
    }
    sub_1017E3C64(v12, a2 + 64);
    int v11 = *(_DWORD *)(a1 + 72);
    if ((v11 & 0x40) == 0)
    {
LABEL_27:
      if ((v11 & 0x80) == 0) {
        return;
      }
      goto LABEL_28;
    }
  }
  else if ((v11 & 0x40) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248A570 + 56);
  }
  sub_1017E3CB8(v13, (unsigned char *)(a2 + 76));
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0) {
LABEL_28:
  }
    *(unsigned char *)(a2 + 200) = *(_DWORD *)(a1 + 64);
}

void sub_1017E3F44(uint64_t a1, _DWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    *a2 = sub_1017E22D8(*(_DWORD *)(a1 + 16));
    if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
      return;
    }
  }
  else if ((v4 & 2) == 0)
  {
    return;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A578 + 8);
  }

  sub_1017E3DC0(v5, (uint64_t)(a2 + 1));
}

_DWORD *sub_1017E3FC0(_DWORD *result, uint64_t a2)
{
  int v2 = result[7];
  if (v2)
  {
    *(_WORD *)a2 = result[2];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = result[3];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_9:
    *(unsigned char *)(a2 + 5) = result[5];
    return result;
  }
LABEL_8:
  *(unsigned char *)(a2 + 4) = result[4];
  if ((v2 & 8) != 0) {
    goto LABEL_9;
  }
  return result;
}

_DWORD *sub_1017E4008(_DWORD *result, uint64_t a2)
{
  int v2 = result[9];
  if (v2)
  {
    *(_WORD *)a2 = result[2];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = result[3];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(unsigned char *)(a2 + 4) = result[4];
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  *(unsigned char *)(a2 + 5) = result[5];
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_13:
    *(unsigned char *)(a2 + 7) = result[7];
    return result;
  }
LABEL_12:
  *(unsigned char *)(a2 + 6) = result[6];
  if ((v2 & 0x20) != 0) {
    goto LABEL_13;
  }
  return result;
}

_DWORD *sub_1017E4070(_DWORD *result, uint64_t a2)
{
  int v3 = result;
  int v4 = result[11];
  if (v4)
  {
    uint64_t v5 = (_DWORD *)*((void *)result + 1);
    if (!v5) {
      uint64_t v5 = *(_DWORD **)(qword_10248A5A0 + 8);
    }
    int v6 = v5[5];
    if (v6) {
      *(_WORD *)a2 = v5[2];
    }
    if ((v6 & 2) != 0) {
      *(_WORD *)(a2 + 2) = v5[3];
    }
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v7 = (_DWORD *)*((void *)result + 2);
    if (!v7) {
      uint64_t v7 = *(_DWORD **)(qword_10248A5A0 + 16);
    }
    uint64_t result = sub_1017E3FC0(v7, a2 + 4);
    int v4 = v3[11];
  }
  if ((v4 & 4) != 0)
  {
    uint64_t v8 = (_DWORD *)*((void *)v3 + 3);
    if (!v8) {
      uint64_t v8 = *(_DWORD **)(qword_10248A5A0 + 24);
    }
    int v9 = v8[6];
    if (v9)
    {
      *(_WORD *)(a2 + 10) = v8[2];
      if ((v9 & 2) == 0)
      {
LABEL_17:
        if ((v9 & 4) == 0) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)(a2 + 12) = v8[3];
    if ((v9 & 4) != 0) {
LABEL_18:
    }
      *(unsigned char *)(a2 + 14) = v8[4];
  }
LABEL_19:
  if ((v4 & 8) != 0)
  {
    int v10 = (_DWORD *)*((void *)v3 + 4);
    if (!v10) {
      int v10 = *(_DWORD **)(qword_10248A5A0 + 32);
    }
    return sub_1017E4008(v10, a2 + 16);
  }
  return result;
}

_DWORD *sub_1017E4184(_DWORD *result, _DWORD *a2)
{
  int v3 = result;
  int v4 = result[6];
  if (v4)
  {
    uint64_t result = (_DWORD *)sub_1017E24A4(result[4]);
    *a2 = result;
    if ((v3[6] & 2) == 0) {
      return result;
    }
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  uint64_t v5 = (_DWORD *)*((void *)v3 + 1);
  if (!v5) {
    uint64_t v5 = *(_DWORD **)(qword_10248A5A8 + 8);
  }

  return sub_1017E4070(v5, (uint64_t)(a2 + 1));
}

void sub_1017E4200(uint64_t a1, _DWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    *a2 = sub_1017E166C(*(_DWORD *)(a1 + 8));
    int v4 = *(_DWORD *)(a1 + 64);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = *(_DWORD *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A5B0 + 16);
  }
  sub_1017E330C(v5, a2 + 2);
  int v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_16:
  int v6 = *(_DWORD **)(a1 + 24);
  if (!v6) {
    int v6 = *(_DWORD **)(qword_10248A5B0 + 24);
  }
  sub_1017E3548(v6, (uint64_t)(a2 + 5));
  int v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A5B0 + 32);
  }
  sub_1017E39AC(v7, (uint64_t)(a2 + 11));
  int v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248A5B0 + 40);
  }
  sub_1017E3F44(v8, a2 + 16);
  int v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      return;
    }
    goto LABEL_9;
  }
LABEL_25:
  int v9 = *(_DWORD **)(a1 + 48);
  if (!v9) {
    int v9 = *(_DWORD **)(qword_10248A5B0 + 48);
  }
  sub_1017E4184(v9, a2 + 68);
  if ((*(_DWORD *)(a1 + 64) & 0x80) != 0) {
LABEL_9:
  }
    a2[75] = *(_DWORD *)(a1 + 56);
}

_DWORD *sub_1017E4340(_DWORD *result, uint64_t a2)
{
  int v3 = result;
  int v4 = result[12];
  if (v4)
  {
    *(_WORD *)a2 = result[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a2 + 2) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(unsigned char *)(a2 + 3) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(unsigned char *)(a2 + 4) = result[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = (_DWORD *)sub_1017E2670(result[6]);
  *(_DWORD *)(a2 + 8) = result;
  int v4 = v3[12];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(_DWORD *)(a2 + 12) = v3[7];
  int v4 = v3[12];
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(unsigned char *)(a2 + 16) = v3[8];
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    goto LABEL_10;
  }
LABEL_19:
  *(unsigned char *)(a2 + 17) = v3[9];
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_10:
  *(_DWORD *)(a2 + 20) = v3[10];
  return result;
}

_DWORD *sub_1017E4404(_DWORD *result, unsigned char *a2)
{
  int v2 = result;
  int v3 = result[12];
  if (v3)
  {
    *a2 = result[2];
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = result[3];
  if ((v3 & 4) != 0) {
LABEL_4:
  }
    a2[2] = result[10];
LABEL_5:
  int v4 = result[6];
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    if (v4 >= 32) {
      uint64_t v6 = 32;
    }
    else {
      uint64_t v6 = v4;
    }
    uint64_t v7 = (uint64_t)(a2 + 4);
    do
    {
      if (v5 >= (int)v2[6])
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
      }
      uint64_t result = sub_1017E4340(*(_DWORD **)(*((void *)v2 + 2) + 8 * v5++), v7);
      v7 += 24;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_1017E4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1017E4518(_DWORD *result, uint64_t a2)
{
  int v3 = result;
  int v4 = result[6];
  if (v4)
  {
    uint64_t result = (_DWORD *)sub_1017E282C(result[4]);
    *(_DWORD *)a2 = result;
    if ((v3[6] & 2) == 0) {
      return result;
    }
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  uint64_t v5 = (_DWORD *)*((void *)v3 + 1);
  if (!v5) {
    uint64_t v5 = *(_DWORD **)(qword_10248A5C8 + 8);
  }

  return sub_1017E4404(v5, (unsigned char *)(a2 + 4));
}

_DWORD *sub_1017E4594(_DWORD *result, uint64_t a2)
{
  int v3 = result;
  int v4 = result[13];
  if (v4)
  {
    uint64_t result = (_DWORD *)sub_1017E211C(result[2]);
    *(_DWORD *)a2 = result;
    int v4 = v3[13];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = v3[3];
  int v4 = v3[13];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(_WORD *)(a2 + 8) = v3[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(unsigned char *)(a2 + 10) = v3[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(unsigned char *)(a2 + 11) = v3[8];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    *(unsigned char *)(a2 + 128) = v3[9];
    if ((v4 & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A5D0 + 24);
  }
  uint64_t result = (_DWORD *)sub_1017E3930(v5, (_DWORD *)(a2 + 16));
  int v4 = v3[13];
  if ((v4 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_19:
  uint64_t v6 = (_DWORD *)*((void *)v3 + 5);
  if (!v6) {
    uint64_t v6 = *(_DWORD **)(qword_10248A5D0 + 40);
  }

  return sub_1017E4518(v6, a2 + 132);
}

_DWORD *sub_1017E4690(_DWORD *result, uint64_t a2)
{
  int v3 = result;
  int v4 = result[12];
  if (v4)
  {
    *(_WORD *)a2 = result[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(_WORD *)(a2 + 4) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(unsigned char *)(a2 + 6) = result[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(unsigned char *)(a2 + 7) = result[6];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(unsigned char *)(a2 + 8) = result[7];
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = (_DWORD *)sub_1017E2670(result[8]);
  *(_DWORD *)(a2 + 12) = result;
  int v4 = v3[12];
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    goto LABEL_10;
  }
LABEL_19:
  *(_DWORD *)(a2 + 16) = v3[9];
  if ((v3[12] & 0x100) == 0) {
    return result;
  }
LABEL_10:
  *(unsigned char *)(a2 + 20) = v3[10];
  return result;
}

_DWORD *sub_1017E4754(_DWORD *result, uint64_t a2)
{
  int v3 = result;
  int v4 = result[19];
  if (v4)
  {
    *(_DWORD *)a2 = result[2];
    int v4 = result[19];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_22:
  *(unsigned char *)(a2 + 6) = result[4];
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    *(unsigned char *)(a2 + 7) = result[5];
LABEL_6:
  int v5 = result[8];
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    if (v5 >= 16) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = v5;
    }
    uint64_t v8 = a2 + 8;
    do
    {
      if (v6 >= (int)v3[8])
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
      }
      uint64_t result = sub_1017E4690(*(_DWORD **)(*((void *)v3 + 3) + 8 * v6++), v8);
      v8 += 24;
    }
    while (v7 != v6);
    int v4 = v3[19];
  }
  if ((v4 & 0x20) != 0)
  {
    uint64_t v9 = *((void *)v3 + 6);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248A5E0 + 48);
    }
    uint64_t result = (_DWORD *)sub_1017E34CC(v9, (_DWORD *)(a2 + 392));
    int v4 = v3[19];
    if ((v4 & 0x40) == 0)
    {
LABEL_17:
      if ((v4 & 0x80) == 0) {
        goto LABEL_18;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  *(unsigned char *)(a2 + 440) = v3[14];
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_28:
  *(_DWORD *)(a2 + 444) = v3[15];
  if ((v3[19] & 0x100) == 0) {
    return result;
  }
LABEL_29:
  int v10 = (_DWORD *)*((void *)v3 + 8);
  if (!v10) {
    int v10 = *(_DWORD **)(qword_10248A5E0 + 64);
  }
  int v11 = v10[6];
  if (v11)
  {
    *(_DWORD *)(a2 + 448) = v10[2];
    int v11 = v10[6];
    if ((v11 & 2) == 0)
    {
LABEL_33:
      if ((v11 & 4) == 0) {
        return result;
      }
      goto LABEL_34;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_33;
  }
  *(_WORD *)(a2 + 452) = v10[3];
  if ((v11 & 4) == 0) {
    return result;
  }
LABEL_34:
  *(unsigned char *)(a2 + 454) = v10[4];
  return result;
}

void sub_1017E491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017E4934(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 52);
  if (v4)
  {
    uint64_t result = sub_1017E166C(*(_DWORD *)(result + 8));
    *(_DWORD *)a2 = result;
    int v4 = *(_DWORD *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a2 + 4) = *(_DWORD *)(v3 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A5E8 + 16);
  }
  uint64_t result = sub_1017E330C(v5, (_DWORD *)(a2 + 8));
  int v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v6 = *(_DWORD **)(v3 + 24);
  if (!v6) {
    uint64_t v6 = *(_DWORD **)(qword_10248A5E8 + 24);
  }
  uint64_t result = (uint64_t)sub_1017E4754(v6, a2 + 20);
  int v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v7 = *(_DWORD **)(v3 + 32);
  if (!v7) {
    uint64_t v7 = *(_DWORD **)(qword_10248A5E8 + 32);
  }
  uint64_t result = (uint64_t)sub_1017E4594(v7, a2 + 480);
  int v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    goto LABEL_8;
  }
LABEL_21:
  *(_DWORD *)(a2 + 1392) = *(_DWORD *)(v3 + 40);
  if ((*(_DWORD *)(v3 + 52) & 0x40) == 0) {
    return result;
  }
LABEL_8:
  *(unsigned char *)(a2 + 1396) = *(unsigned char *)(v3 + 44);
  return result;
}

void sub_1017E4A2C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    *(_WORD *)a2 = *(_DWORD *)(a1 + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_25:
  *(unsigned char *)(a2 + 4) = *(_DWORD *)(a1 + 16);
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    *(unsigned char *)(a2 + 5) = *(_DWORD *)(a1 + 20);
LABEL_6:
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    if (v5 >= 15) {
      uint64_t v7 = 15;
    }
    else {
      uint64_t v7 = v5;
    }
    do
    {
      if (v6 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
      }
      *(unsigned char *)(a2 + 6 + v6) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6);
      ++v6;
    }
    while (v7 != v6);
  }
  int v8 = *(_DWORD *)(a1 + 48);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    if (v8 >= 15) {
      uint64_t v10 = 15;
    }
    else {
      uint64_t v10 = v8;
    }
    do
    {
      if (v9 >= *(int *)(a1 + 48))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
      }
      *(unsigned char *)(a2 + 21 + v9) = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v9);
      ++v9;
    }
    while (v10 != v9);
  }
  if ((*(unsigned char *)(a1 + 64) & 0x40) != 0) {
    *(unsigned char *)(a2 + 36) = *(_DWORD *)(a1 + 56);
  }
}

void sub_1017E4BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017E4BF4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(unsigned char *)(a2 + 6) = *(_DWORD *)(a1 + 16);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_19:
  *(unsigned char *)(a2 + 7) = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x10) != 0) {
LABEL_6:
  }
    *(unsigned char *)(a2 + 8) = *(_DWORD *)(a1 + 40);
LABEL_7:
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    if (v4 >= 15) {
      uint64_t v6 = 15;
    }
    else {
      uint64_t v6 = v4;
    }
    uint64_t v7 = a2 + 9;
    do
    {
      if (v5 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
      }
      *(unsigned char *)(v7 + v5) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5);
      ++v5;
    }
    while (v6 != v5);
  }
}

void sub_1017E4D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017E4D24(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 52);
  if (v3)
  {
    *(_WORD *)a2 = *(_DWORD *)(a1 + 8);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a2 + 2) = *(_DWORD *)(a1 + 12);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_21:
  *(unsigned char *)(a2 + 3) = *(_DWORD *)(a1 + 16);
  if ((v3 & 8) != 0) {
LABEL_5:
  }
    *(unsigned char *)(a2 + 4) = *(_DWORD *)(a1 + 20);
LABEL_6:
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    if (v4 >= 15) {
      uint64_t v6 = 15;
    }
    else {
      uint64_t v6 = v4;
    }
    uint64_t v7 = (_WORD *)(a2 + 8);
    do
    {
      if (v5 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
      }
      int v8 = *(_DWORD **)(*(void *)(a1 + 24) + 8 * v5);
      int v9 = v8[5];
      if (v9) {
        *((unsigned char *)v7 - 2) = v8[2];
      }
      if ((v9 & 2) != 0) {
        _WORD *v7 = v8[3];
      }
      ++v5;
      v7 += 2;
    }
    while (v6 != v5);
  }
}

void sub_1017E4E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1017E4E5C(_DWORD *result, unsigned char *a2)
{
  int v2 = result[7];
  if (v2)
  {
    *a2 = result[2];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = result[3];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_9:
    a2[3] = result[5];
    return result;
  }
LABEL_8:
  a2[2] = result[4];
  if ((v2 & 8) != 0) {
    goto LABEL_9;
  }
  return result;
}

void sub_1017E4EA4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 72);
  if (v4)
  {
    *(_DWORD *)a2 = sub_1017E29E8(*(_DWORD *)(a1 + 8));
    int v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) != 0) {
LABEL_4:
  }
    *(unsigned char *)(a2 + 6) = *(_DWORD *)(a1 + 64);
LABEL_5:
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    if (v5 >= 15) {
      uint64_t v7 = 15;
    }
    else {
      uint64_t v7 = v5;
    }
    int v8 = (_DWORD *)(a2 + 12);
    do
    {
      if (v6 >= *(int *)(a1 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
      }
      int v9 = *(_DWORD **)(*(void *)(a1 + 16) + 8 * v6);
      int v10 = v9[5];
      if (v10) {
        *((unsigned char *)v8 - 4) = v9[2];
      }
      if ((v10 & 2) != 0) {
        _DWORD *v8 = v9[3];
      }
      ++v6;
      v8 += 2;
    }
    while (v7 != v6);
    int v4 = *(_DWORD *)(a1 + 72);
  }
  if ((v4 & 0x10) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (!v11) {
      uint64_t v11 = *(void *)(qword_10248A620 + 40);
    }
    sub_1017E4BF4(v11, a2 + 128);
    int v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 0x20) == 0)
    {
LABEL_20:
      if ((v4 & 0x40) == 0) {
        return;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248A620 + 48);
  }
  sub_1017E4D24(v12, a2 + 152);
  if ((*(_DWORD *)(a1 + 72) & 0x40) != 0)
  {
LABEL_31:
    uint64_t v13 = *(_DWORD **)(a1 + 56);
    if (!v13) {
      uint64_t v13 = *(_DWORD **)(qword_10248A620 + 56);
    }
    sub_1017E4E5C(v13, (unsigned char *)(a2 + 218));
  }
}

void sub_1017E504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017E5064(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 72);
  if (v4) {
    *(unsigned char *)a2 = *(_DWORD *)(a1 + 8);
  }
  if ((v4 & 2) != 0) {
    *(unsigned char *)(a2 + 1) = *(_DWORD *)(a1 + 12);
  }
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    if (v5 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v5;
    }
    do
    {
      if (v6 >= *(int *)(a1 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
      }
      *(_DWORD *)(a2 + 4 + 4 * v6) = sub_1017E29E8(*(_DWORD *)(*(void *)(a1 + 16) + 4 * v6));
      ++v6;
    }
    while (v7 != v6);
    int v4 = *(_DWORD *)(a1 + 72);
  }
  if ((v4 & 8) != 0)
  {
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 0x10) == 0)
    {
LABEL_15:
      if ((v4 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 40) = *(_DWORD *)(a1 + 36);
  if ((v4 & 0x20) != 0) {
LABEL_16:
  }
    *(unsigned char *)(a2 + 41) = *(_DWORD *)(a1 + 64);
LABEL_17:
  int v8 = *(_DWORD *)(a1 + 48);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    if (v8 >= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v8;
    }
    uint64_t v11 = a2 + 44;
    do
    {
      if (v9 >= *(int *)(a1 + 48))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
      }
      sub_1017E4EA4(*(void *)(*(void *)(a1 + 40) + 8 * v9++), v11);
      v11 += 224;
    }
    while (v10 != v9);
  }
}

void sub_1017E5218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1017E5238(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 44);
  if (v4)
  {
    *(_DWORD *)a2 = sub_1017E166C(*(_DWORD *)(a1 + 8));
    int v4 = *(_DWORD *)(a1 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A630 + 16);
  }
  sub_1017E330C(v5, (_DWORD *)(a2 + 8));
  int v4 = *(_DWORD *)(a1 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return;
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248A630 + 24);
  }
  sub_1017E4A2C(v6, a2 + 20);
  if ((*(_DWORD *)(a1 + 44) & 0x10) != 0)
  {
LABEL_15:
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A630 + 32);
    }
    sub_1017E5064(v7, a2 + 60);
  }
}

uint64_t sub_1017E531C(uint64_t result)
{
  int v1 = result;
  if (result != 1)
  {
    if (result == 4)
    {
      return 3;
    }
    else if (result == 2)
    {
      return 2;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      int v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v6 = v1;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::SuplInitDecodeResult", buf, 8u);
      }
      BOOL v3 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v3)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DAC8);
        }
        int v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Supl::DecodeResult ProtobufUtil::fromProtobuf(proto::gpsd::SuplInitDecodeResult)", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
        return 0;
      }
    }
  }
  return result;
}

double sub_1017E5504(uint64_t a1, double *a2)
{
  int v2 = *(_DWORD *)(a1 + 48);
  if (v2)
  {
    double result = *(double *)(a1 + 8);
    *a2 = result;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = *(double *)(a1 + 16);
  a2[1] = result;
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_9:
    double result = *(double *)(a1 + 32);
    a2[3] = result;
    return result;
  }
LABEL_8:
  double result = *(double *)(a1 + 24);
  a2[2] = result;
  if ((v2 & 8) != 0) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1017E554C(int *a1, uint64_t a2)
{
  int v4 = *a1;
  int v5 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v5 | 1;
  int v6 = a1[1];
  *(_DWORD *)(a2 + 52) = v5 | 3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  uint64_t v7 = a2 + 16;
  sub_100221DFC(a2 + 16, 135);
  uint64_t result = sub_100221DFC(a2 + 32, 135);
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 137;
  do
  {
    int v11 = v10[v9 - 135];
    int v12 = *(_DWORD *)(a2 + 24);
    if (v12 == *(_DWORD *)(a2 + 28))
    {
      uint64_t result = sub_100221DFC(v7, v12 + 1);
      int v12 = *(_DWORD *)(a2 + 24);
    }
    uint64_t v13 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 24) = v12 + 1;
    *(_DWORD *)(v13 + 4 * v12) = v11;
    int v14 = *((unsigned __int16 *)v10 + v9);
    int v15 = *(_DWORD *)(a2 + 40);
    if (v15 == *(_DWORD *)(a2 + 44))
    {
      uint64_t result = sub_100221DFC(a2 + 32, v15 + 1);
      int v15 = *(_DWORD *)(a2 + 40);
    }
    uint64_t v16 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 40) = v15 + 1;
    *(_DWORD *)(v16 + 4 * v15) = v14;
    ++v9;
  }
  while (v9 != 135);
  return result;
}

uint64_t sub_1017E563C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  uint64_t result = sub_100221DFC(a2 + 8, 8);
  uint64_t v6 = 0;
  do
  {
    int v7 = *(__int16 *)(a1 + v6);
    int v8 = *(_DWORD *)(a2 + 16);
    if (v8 == *(_DWORD *)(a2 + 20))
    {
      uint64_t result = sub_100221DFC(v4, v8 + 1);
      int v8 = *(_DWORD *)(a2 + 16);
    }
    v6 += 2;
    uint64_t v9 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = v8 + 1;
    *(_DWORD *)(v9 + 4 * v8) = v7;
  }
  while (v6 != 16);
  int v10 = *(unsigned __int8 *)(a1 + 16);
  int v11 = *(unsigned __int8 *)(a1 + 17);
  *(_DWORD *)(a2 + 36) |= 6u;
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 28) = v11;
  return result;
}

__n128 sub_1017E56D8(__n128 *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 56);
  __n128 result = *a1;
  *(_DWORD *)(a2 + 56) = v2 | 1;
  result.n128_u32[1] = a1->n128_u32[1];
  *(_DWORD *)(a2 + 56) = v2 | 3;
  result.n128_u32[2] = a1->n128_u32[2];
  *(_DWORD *)(a2 + 56) = v2 | 7;
  result.n128_u32[3] = a1->n128_u32[3];
  *(_DWORD *)(a2 + 56) = v2 | 0xF;
  *(__n128 *)(a2 + 8) = result;
  unsigned __int32 v4 = a1[1].n128_u32[0];
  *(_DWORD *)(a2 + 56) = v2 | 0x1F;
  unsigned __int32 v5 = a1[1].n128_u32[1];
  *(_DWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 28) = v5;
  *(unsigned char *)(a2 + 32) = a1[1].n128_u8[8];
  int v6 = a1[1].n128_i16[5];
  *(_DWORD *)(a2 + 56) = v2 | 0xFF;
  unsigned __int32 v7 = a1[1].n128_u32[3];
  *(_DWORD *)(a2 + 56) = v2 | 0x1FF;
  *(_DWORD *)(a2 + 36) = v6;
  *(_DWORD *)(a2 + 40) = v7;
  unsigned __int32 v8 = a1[2].n128_u32[0];
  *(_DWORD *)(a2 + 56) = v2 | 0x3FF;
  unsigned __int32 v9 = a1[2].n128_u32[1];
  *(_DWORD *)(a2 + 56) = v2 | 0x7FF;
  *(_DWORD *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 48) = v9;
  return result;
}

uint64_t sub_1017E5774(char *a1, uint64_t a2)
{
  char v4 = *a1;
  int v5 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v5 | 1;
  *(unsigned char *)(a2 + 8) = v4;
  int v6 = v5 | 3;
  int v7 = *((_DWORD *)a1 + 1);
  int v8 = *((_DWORD *)a1 + 2);
  *(_DWORD *)(a2 + 56) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  if ((v8 + 1) >= 4) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = v8 + 2;
  }
  if (!sub_1001662E0(v9)) {
    sub_101A9C0DC();
  }
  int v10 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 48) = v9;
  *(_DWORD *)(a2 + 56) = v10 | 0xC;
  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11) {
    operator new();
  }
  sub_1017E56D8((__n128 *)(a1 + 12), v11);
  *(_DWORD *)(a2 + 56) |= 0x10u;
  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    operator new();
  }
  sub_1017E554C((int *)a1 + 13, v12);
  *(_DWORD *)(a2 + 56) |= 0x20u;
  uint64_t v13 = *(void *)(a2 + 32);
  if (!v13) {
    operator new();
  }
  uint64_t result = sub_1017E563C((uint64_t)(a1 + 872), v13);
  *(_DWORD *)(a2 + 56) |= 0x40u;
  int v15 = *(_DWORD **)(a2 + 40);
  if (!v15) {
    operator new();
  }
  int v16 = *((unsigned __int16 *)a1 + 445);
  int v17 = *((unsigned __int16 *)a1 + 446);
  v15[5] |= 3u;
  v15[2] = v16;
  v15[3] = v17;
  return result;
}

void sub_1017E5904()
{
}

uint64_t sub_1017E596C(int a1)
{
  uint64_t result = 0xFFFFFFFFLL;
  switch(a1)
  {
    case 0:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      char v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::LtlInfoType", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_14;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 1:
      return result;
    case 2:
      uint64_t result = 0;
      break;
    case 3:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 2;
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v8 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::LtlInfoType", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
LABEL_22:
        }
          dispatch_once(&qword_1024193D0, &stru_10233DAC8);
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "GnssHal::ExtensionsOlaf::LtlInfoType ProtobufUtil::fromProtobuf(proto::gpsd::LtlInfoType)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
LABEL_14:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_1017E5C64(uint64_t result, _DWORD *a2)
{
  if (*(unsigned char *)(result + 16))
  {
    uint64_t result = sub_1017E596C(*(_DWORD *)(result + 8));
    *a2 = result;
  }
  return result;
}

uint64_t sub_1017E5C98(unsigned int a1)
{
  if (a1 < 3) {
    return a1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1017E5CA4(char a1)
{
  return a1 & 0x1F;
}

uint64_t sub_1017E5CAC(unsigned int a1)
{
  if (a1 < 5) {
    return dword_101E37498[a1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for GNSS::ReliabilityIndication", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "proto::gnss::Reliability ProtobufUtil::toProtobuf(GNSS::ReliabilityIndication)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 1;
}

uint64_t sub_1017E5E74(int a1)
{
  if (a1 <= 24)
  {
    if (a1 == 1) {
      return 0;
    }
    if (a1 == 10) {
      return 1;
    }
  }
  else
  {
    switch(a1)
    {
      case 25:
        return 2;
      case 50:
        return 3;
      case 75:
        return 4;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DAC8);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Reliability", buf, 8u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "GNSS::ReliabilityIndication ProtobufUtil::fromProtobuf(proto::gnss::Reliability)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1017E6078(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 24);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_5:
    *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 16);
    return result;
  }
  *(void *)a2 = *(void *)(result + 8);
  if ((v2 & 2) != 0) {
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1017E60A0(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 36);
  if (v2)
  {
    *(void *)(a2 + 8) = *(void *)(result + 8);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      *(unsigned char *)(a2 + 24) = *(unsigned char *)(result + 24);
      if ((v2 & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  *(void *)(a2 + 16) = *(void *)(result + 16);
  if ((v2 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v2 & 8) == 0) {
    return result;
  }
LABEL_9:
  unsigned int v3 = *(_DWORD *)(result + 28) - 1;
  if (v3 <= 5) {
    *(unsigned char *)a2 = 0x30404020100uLL >> (8 * v3);
  }
  return result;
}

uint64_t sub_1017E6108(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 5)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    unsigned int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::GnssContent", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::GnssContent ProtobufUtil::fromProtobuf(proto::gnss::GnssContent)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1017E62CC(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    unsigned int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::EstimationTechnology", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::EstimationTechnology ProtobufUtil::fromProtobuf(proto::gnss::EstimationTechnology)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

double sub_1017E6490(std::string *__str, uint64_t a2)
{
  BOOL v4 = (const std::string *)&__str->__r_.__value_.__r.__words[1];
  int v5 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 32) = LOWORD(__str->__r_.__value_.__l.__data_);
  *(_DWORD *)(a2 + 52) = v5 | 3;
  unsigned int v6 = *(std::string **)(a2 + 8);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v6, v4);
  int v7 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a2 + 36) = __str[1].__r_.__value_.__s.__data_[8];
  *(_DWORD *)(a2 + 52) = v7 | 0xC;
  int v8 = *(std::string **)(a2 + 16);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v8, (std::string *)((char *)__str + 40));
  int v9 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a2 + 37) = __str[2].__r_.__value_.__s.__data_[16];
  *(_WORD *)(a2 + 38) = *(_WORD *)((char *)&__str[2].__r_.__value_.__r.__words[2] + 1);
  *(_DWORD *)(a2 + 52) = v9 | 0x1D0;
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    operator new();
  }
  int v11 = *(_DWORD *)(v10 + 24);
  *(_WORD *)(v10 + 16) = __str[3].__r_.__value_.__l.__data_;
  double result = *(double *)&__str[3].__r_.__value_.__l.__size_;
  *(_DWORD *)(v10 + 24) = v11 | 7;
  *(double *)(v10 + 8) = result;
  return result;
}

void sub_1017E65CC()
{
}

void sub_1017E65F0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 6);
  int v5 = *(unsigned __int16 *)(a1 + 8);
  *(_DWORD *)(a2 + 32) = v4 | 0xE;
  *(_DWORD *)(a2 + 20) = v5;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 6;
  LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)a1;
  WORD2(__str.__r_.__value_.__r.__words[0]) = *(_WORD *)(a1 + 4);
  __str.__r_.__value_.__s.__data_[6] = 0;
  *(_DWORD *)(a2 + 32) = v4 | 0xF;
  unsigned int v6 = *(std::string **)(a2 + 8);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  int v7 = *(__int16 *)(a1 + 10);
  *(_DWORD *)(a2 + 32) |= 0x10u;
  *(_DWORD *)(a2 + 24) = v7;
}

void sub_1017E66C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017E66DC(uint64_t a1, int *a2)
{
  if (*(_DWORD *)a1 < 5u) {
    unsigned int v4 = *(_DWORD *)a1 + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (!sub_1001A4C58(v4)) {
    sub_101A732E4();
  }
  a2[10] |= 1u;
  a2[8] = v4;
  int v5 = -1431655765 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v5);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 12 * v5;
    do
    {
      uint64_t v8 = *(void *)(a1 + 8);
      int v9 = a2[5];
      uint64_t v10 = a2[4];
      if ((int)v10 >= v9)
      {
        if (v9 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v9 + 1);
          int v9 = a2[5];
        }
        a2[5] = v9 + 1;
        sub_1017E6EF8();
      }
      uint64_t v11 = *((void *)a2 + 1);
      a2[4] = v10 + 1;
      sub_1017E65F0(v8 + v6, *(void *)(v11 + 8 * v10));
      v6 += 12;
    }
    while (v7 != v6);
  }
}

uint64_t sub_1017E67FC(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 20);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_5:
    *(unsigned char *)(a2 + 2) = *(unsigned char *)(result + 12);
    return result;
  }
  *(_WORD *)a2 = *(_DWORD *)(result + 8);
  if ((v2 & 2) != 0) {
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1017E6824(int a1)
{
  uint64_t result = (a1 - 1);
  if (result >= 3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DAC8);
    }
    unsigned int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::AfltAction", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DAC8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Emergency::Cplane::AfltAction ProtobufUtil::fromProtobuf(proto::gnss::Emergency::AfltAction)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

_DWORD *sub_1017E69E8(_DWORD *result, uint64_t a2)
{
  unsigned int v3 = result;
  int v4 = result[16];
  if (v4)
  {
    *(_DWORD *)a2 = result[2];
    int v4 = result[16];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = result[3];
  int v4 = result[16];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(unsigned char *)(a2 + 8) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(unsigned char *)(a2 + 9) = result[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(unsigned char *)(a2 + 10) = result[6];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    *(unsigned char *)(a2 + 16) = *((unsigned char *)v3 + 56);
    if ((v4 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = (_DWORD *)sub_1017E1D84(result[7]);
  *(_DWORD *)(a2 + 12) = result;
  int v4 = v3[16];
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    goto LABEL_23;
  }
LABEL_17:
  int v5 = (_DWORD *)*((void *)v3 + 4);
  if (!v5) {
    int v5 = *(_DWORD **)(qword_10248A6F8 + 32);
  }
  int v6 = v5[6];
  if (v6)
  {
    *(_WORD *)(a2 + 18) = v5[2];
    if ((v6 & 2) == 0)
    {
LABEL_21:
      if ((v6 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 20) = v5[3];
  if ((v6 & 4) != 0) {
LABEL_22:
  }
    *(unsigned char *)(a2 + 22) = v5[4];
LABEL_23:
  if ((v4 & 0x100) != 0) {
    *(unsigned char *)(a2 + 24) = *((unsigned char *)v3 + 57);
  }
  if ((v4 & 0x200) != 0)
  {
    int v7 = (_DWORD *)*((void *)v3 + 5);
    if (!v7) {
      int v7 = *(_DWORD **)(qword_10248A6F8 + 40);
    }
    int v8 = v7[5];
    if (v8)
    {
      *(_DWORD *)(a2 + 28) = v7[2];
      int v8 = v7[5];
    }
    if ((v8 & 2) != 0) {
      *(_WORD *)(a2 + 32) = v7[3];
    }
  }
  int v9 = v3[16];
  if ((v9 & 0x400) != 0) {
    *(unsigned char *)(a2 + 36) = *((unsigned char *)v3 + 58);
  }
  if ((v9 & 0x800) != 0)
  {
    uint64_t v10 = (_DWORD *)*((void *)v3 + 6);
    if (!v10) {
      uint64_t v10 = *(_DWORD **)(qword_10248A6F8 + 48);
    }
    int v11 = v10[5];
    if (v11) {
      *(_WORD *)(a2 + 38) = v10[2];
    }
    if ((v11 & 2) != 0) {
      *(unsigned char *)(a2 + 40) = v10[3];
    }
  }
  return result;
}

uint64_t sub_1017E6B74(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 52);
  if (v4)
  {
    uint64_t result = sub_1017E166C(*(_DWORD *)(result + 8));
    *(_DWORD *)a2 = result;
    int v4 = *(_DWORD *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a2 + 4) = *(_DWORD *)(v3 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A700 + 16);
  }
  uint64_t result = sub_1017E330C(v5, (_DWORD *)(a2 + 8));
  int v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_15:
  int v6 = *(_DWORD **)(v3 + 24);
  if (!v6) {
    int v6 = *(_DWORD **)(qword_10248A700 + 24);
  }
  uint64_t result = (uint64_t)sub_1017E4754(v6, a2 + 20);
  int v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_18:
  int v7 = *(_DWORD **)(v3 + 32);
  if (!v7) {
    int v7 = *(_DWORD **)(qword_10248A700 + 32);
  }
  uint64_t result = (uint64_t)sub_1017E69E8(v7, a2 + 476);
  int v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    goto LABEL_8;
  }
LABEL_21:
  uint64_t result = sub_1017E6824(*(_DWORD *)(v3 + 40));
  *(_DWORD *)(a2 + 520) = result;
  if ((*(_DWORD *)(v3 + 52) & 0x40) == 0) {
    return result;
  }
LABEL_8:
  *(unsigned char *)(a2 + 524) = *(unsigned char *)(v3 + 44);
  return result;
}

void sub_1017E6C70(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017E6CA0()
{
}

void sub_1017E6CE0()
{
}

void sub_1017E6D04()
{
}

void sub_1017E6D44()
{
}

void sub_1017E6D68()
{
}

void sub_1017E6DA8()
{
}

void sub_1017E6DCC()
{
}

void sub_1017E6E0C()
{
}

void sub_1017E6E30()
{
}

void sub_1017E6E70()
{
}

void sub_1017E6E94()
{
}

void sub_1017E6ED4()
{
}

void sub_1017E6EF8()
{
}

void sub_1017E6F38()
{
}

void sub_1017E6F5C(void *a1, int a2, uint64_t a3)
{
  *a1 = a3;
  sub_100134750(&__p, off_102479E78[a2]);
  *(void *)uint64_t buf = a1;
  operator new();
}

void sub_1017E7608()
{
}

void sub_1017E7624(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x1017E76E0);
}

void sub_1017E7634()
{
}

uint64_t **sub_1017E76E8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    uint64_t v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101808620(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_3:
  int v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    if (v7 > 3) {
      int v11 = "StateUnknown";
    }
    else {
      int v11 = off_10233F258[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v24) >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v26 = 1024;
    unsigned int v27 = v7;
    __int16 v28 = 2080;
    uint64_t v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v14 = (void *)*v14;
    }
    sub_1017F4E88(v7, v17);
    if (v18 >= 0) {
      int v15 = v17;
    }
    else {
      int v15 = (void **)v17[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v21 = 1024;
    unsigned int v22 = v7;
    __int16 v23 = 2080;
    unsigned int v24 = v15;
    int v16 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrCplane>::setStateHandler(State, StateHandler) [T = CLNilrCplane]", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  *(void *)uint64_t buf = &v19;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

__n128 sub_1017E79D4(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 0u:
      result.n128_f64[0] = sub_1017EE594(a1);
      return result;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v22 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,Emergency mode start", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_77;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_120;
      }
      goto LABEL_121;
    case 3u:
      int v2 = &qword_102419000;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v28 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,Emergency call end", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_77;
      }
      goto LABEL_119;
    case 4u:
      int v19 = *(_DWORD **)(a1 + 2352);
      if (v19)
      {
        sub_1017F26AC(a1, v19);
        return result;
      }
      sub_101808794(0);
      goto LABEL_118;
    case 6u:
      unsigned int v20 = *(int **)(a1 + 2360);
      if (v20)
      {
        sub_1017F2AF4(a1, v20);
        return result;
      }
      sub_101808900(0);
      goto LABEL_118;
    case 7u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v31 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,#Warning, Not implemented", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_71;
      }
      goto LABEL_129;
    case 8u:
      char v18 = *(long long **)(a1 + 2368);
      if (v18)
      {
        sub_1017F2DD8(a1, v18);
        return result;
      }
      sub_101808A6C(0);
      goto LABEL_118;
    case 9u:
    case 0xAu:
      if (!sub_1017F1AC0(a1, a1 + 2228))
      {
        sub_1017EFAF4(a1, -9, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        sub_1017F3D24(a1, 4u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
      }
      return result;
    case 0xBu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x17u:
    case 0x1Du:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 880);
        sub_1017F4204(a2, &__p);
        unsigned int v7 = (v74 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v6;
        __int16 v58 = 2080;
        *(void *)int v59 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v74) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v9 = *(_DWORD *)(a1 + 880);
      sub_1017F4204(a2, buf);
      if ((v61 & 0x8000) == 0) {
        uint64_t v10 = buf;
      }
      else {
        uint64_t v10 = *(uint8_t **)buf;
      }
      int v64 = 67109378;
      int v65 = v9;
      __int16 v66 = 2080;
      std::string::size_type v67 = v10;
      int v11 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE1(v61) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_35;
    case 0xCu:
      sub_10198CD34(*(void *)(a1 + 2408));
      return result;
    case 0x12u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v25 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        int v26 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Timeout but session is closed", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_71;
      }
LABEL_129:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_71:
      int v27 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v27;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v11);
      goto LABEL_101;
    case 0x13u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v41 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v42 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,Baseband connected", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_100;
      }
      goto LABEL_131;
    case 0x14u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_100;
      }
LABEL_131:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_100:
      int v43 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v43;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v11);
      goto LABEL_101;
    case 0x15u:
      int v2 = &qword_102419000;
      if (!*(void *)(a1 + 2384))
      {
        sub_101808D44(qword_1024193D0 == -1);
        goto LABEL_118;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(_DWORD *)(a1 + 880);
        uint64_t v34 = *(_DWORD **)(a1 + 2384);
        int v36 = v34[1];
        int v35 = v34[2];
        LODWORD(v34) = v34[3];
        LODWORD(__p) = 67110144;
        HIDWORD(__p) = v33;
        __int16 v69 = 1024;
        int v70 = v33;
        __int16 v71 = 1024;
        int v72 = v35;
        __int16 v73 = 1024;
        int v74 = v36;
        __int16 v75 = 1024;
        int v76 = (int)v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v37 = *(_DWORD *)(a1 + 880);
        __int16 v38 = *(_DWORD **)(a1 + 2384);
        int v40 = v38[1];
        int v39 = v38[2];
        LODWORD(v38) = v38[3];
        *(_DWORD *)uint64_t buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = v37;
        __int16 v58 = 1024;
        *(_DWORD *)int v59 = v37;
        *(_WORD *)&v59[4] = 1024;
        *(_DWORD *)&v59[6] = v39;
        __int16 v60 = 1024;
        int v61 = v40;
        __int16 v62 = 1024;
        int v63 = (int)v38;
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v11);
LABEL_101:
        if (v11 != (char *)&__p) {
LABEL_102:
        }
          free(v11);
      }
      return result;
    case 0x16u:
      uint64_t v17 = *(void *)(a1 + 2392);
      if (v17)
      {
        sub_1017F379C(a1, v17);
        return result;
      }
      sub_101808BD8(0);
      goto LABEL_118;
    case 0x18u:
      uint64_t v44 = *(void *)(a1 + 2400);
      if (v44)
      {
        sub_1017F4230(a1, v44);
      }
      else
      {
        sub_101808EB8(0);
LABEL_118:
        __break(1u);
LABEL_119:
        bzero(&__p, 0x65CuLL);
        if (v2[122] != -1) {
LABEL_120:
        }
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_121:
        int v52 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v52;
        int v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v53);
        if (v53 != (char *)&__p) {
          free(v53);
        }
LABEL_77:
        result.n128_f64[0] = sub_1017D5A6C(a1 + 512);
      }
      return result;
    case 0x19u:
      if ((sub_1017F468C(a1) & 1) == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        std::string::size_type v45 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v46 = *(_DWORD *)(a1 + 880);
          LODWORD(__p) = 67109120;
          HIDWORD(__p) = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", (uint8_t *)&__p, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v54 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v54;
          int v55 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v55);
          if (v55 != (char *)&__p) {
            free(v55);
          }
        }
        sub_1017F49F8(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        long long v47 = *(_OWORD *)(a1 + 800);
        v56[0] = *(_OWORD *)(a1 + 784);
        v56[1] = v47;
        v56[2] = *(_OWORD *)(a1 + 816);
        sub_1017F4BF8(a1, v56);
        *(void *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(__n128 *)(a1 + 800) = result;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(unsigned char *)(a1 + 820) = 0;
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a1 + 880);
        sub_1017F4204(a2, &__p);
        int v14 = (v74 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v13;
        __int16 v58 = 2080;
        *(void *)int v59 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v74) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v15 = *(_DWORD *)(a1 + 880);
      sub_1017F4204(a2, buf);
      if ((v61 & 0x8000) == 0) {
        int v16 = buf;
      }
      else {
        int v16 = *(uint8_t **)buf;
      }
      int v64 = 67109378;
      int v65 = v15;
      __int16 v66 = 2080;
      std::string::size_type v67 = v16;
      int v11 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE1(v61) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_35:
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v11);
      if (v11 == (char *)&__p) {
        return result;
      }
      goto LABEL_102;
    default:
      return result;
  }
}

uint64_t sub_1017E8A98(uint64_t a1, unsigned int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0u:
      uint64_t v26 = *(void *)(a1 + 840);
      if (*(int *)(v26 + 8) <= 0)
      {
        sub_100134750(&__p, "RILD_Session");
        sub_100134750(buf, "Enter");
        if ((v121 & 0x8000) == 0) {
          int v27 = buf;
        }
        else {
          int v27 = *(uint8_t **)buf;
        }
        if ((v121 & 0x8000) == 0) {
          std::string::size_type v28 = BYTE1(v121);
        }
        else {
          std::string::size_type v28 = *(void *)v119;
        }
        int v29 = std::string::append((std::string *)&__p, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        std::string::size_type v113 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v112 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        sub_100EBBFD8(v26, (uint64_t *)v112);
        if (SHIBYTE(v113) < 0) {
          operator delete(v112[0]);
        }
        if (SBYTE1(v121) < 0) {
          operator delete(*(void **)buf);
        }
        if (SBYTE1(v136) < 0) {
          operator delete(__p);
        }
      }
      sub_1017F0998(a1, (unsigned __int16 *)(a1 + 2228));
      return 1;
    case 1u:
      uint64_t v31 = *(void *)(a1 + 840);
      if (*(int *)(v31 + 8) > 0)
      {
        sub_100EBC6AC(v31);
        sub_1017F0210(a1);
        return 1;
      }
      sub_101809024();
      goto LABEL_226;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started session", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_107;
      }
      goto LABEL_232;
    case 3u:
      if (!*(unsigned char *)(a1 + 878))
      {
        *(_DWORD *)(a1 + 244) = 7;
        sub_1017EFAF4(a1, -2, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        sub_1017F4EB4(a1, 7u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v40 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored in conformance mode", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
LABEL_232:
      }
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_107:
      int v41 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v41;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v10);
      goto LABEL_156;
    case 4u:
      int v42 = *(_DWORD **)(a1 + 2352);
      if (v42)
      {
        sub_1017F26AC(a1, v42);
        return 1;
      }
      sub_1018092FC(1);
      goto LABEL_226;
    case 6u:
      __int16 v23 = *(int **)(a1 + 2360);
      if (v23)
      {
        sub_1017F2AF4(a1, v23);
        return 1;
      }
      sub_101809468(1);
      goto LABEL_226;
    case 7u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        int v33 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Not implemented", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_230;
    case 8u:
      int v35 = *(long long **)(a1 + 2368);
      if (v35)
      {
        sub_1017F2DD8(a1, v35);
        return 1;
      }
      sub_1018095D4(1);
      goto LABEL_226;
    case 9u:
    case 0xAu:
      if (sub_1017F1AC0(a1, a1 + 2228))
      {
        if (*(_WORD *)(a1 + 2228)) {
          return 2;
        }
        sub_1017F1D18((_DWORD *)a1, a1 + 2228);
      }
      else
      {
        sub_1017EFAF4(a1, -9, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        sub_1017F3D24(a1, 4u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
      }
      return 1;
    case 0xBu:
      if (!*(void *)(a1 + 2376))
      {
        sub_1018098AC(qword_1024193D0 == -1);
        goto LABEL_226;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v43 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v44 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v44;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning session aborted", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v99 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v99;
        __int16 v100 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v100);
        if (v100 != (char *)&__p) {
          free(v100);
        }
      }
      uint64_t v45 = *(void *)(a1 + 2376);
      if (*(_DWORD *)(v45 + 12) != *(_DWORD *)(a1 + 856) || *(_DWORD *)(v45 + 4) != *(_DWORD *)(a1 + 860)) {
        return 1;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v46 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v47 = *(_DWORD *)(a1 + 880);
        int v48 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v47;
        __int16 v131 = 1024;
        unsigned int v132 = v47;
        __int16 v133 = 1024;
        int v134 = v48;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,aborted", (uint8_t *)&__p, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v108 = *(_DWORD *)(a1 + 880);
        int v109 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)uint64_t buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v108;
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = v108;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v109;
        uint64_t v110 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v110);
        if (v110 != (char *)&__p) {
          free(v110);
        }
      }
      sub_1017EF868(a1, *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      *(_DWORD *)(a1 + 244) = 5;
      uint64_t result = sub_10073CB54();
      if (!result) {
        return result;
      }
      __int16 v49 = *(_DWORD **)(a1 + 2376);
      int v50 = v49[4];
      *(_DWORD *)(a1 + 456) = v50;
      int v51 = *(_DWORD *)(a1 + 2232);
      int v52 = *(_DWORD *)(a1 + 2264);
      int v53 = *(_DWORD *)(a1 + 2268);
      if (v50 == 6) {
        sub_1017F550C(a1, 8u, v51, v52, v53, 1u, *(_DWORD *)(a1 + 2224), v49[5], v49[6], 1u);
      }
      else {
        sub_1017F5BAC(a1, 5u, v51, v52, v53, v50, 1);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v85 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v86 = *(_DWORD *)(a1 + 880);
        int v87 = *(_DWORD *)(a1 + 856);
        int v88 = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
        std::string __p = (void *)__PAIR64__(v86, 67109888);
        __int16 v131 = 1024;
        unsigned int v132 = v86;
        __int16 v133 = 1024;
        int v134 = v87;
        __int16 v135 = 1024;
        int v136 = v88;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,abortReason,%d", (uint8_t *)&__p, 0x1Au);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v89 = *(_DWORD *)(a1 + 880);
      int v90 = *(_DWORD *)(a1 + 856);
      int v91 = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
      *(_DWORD *)uint64_t buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v89;
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = v89;
      *(_WORD *)&v119[6] = 1024;
      *(_DWORD *)&v119[8] = v90;
      __int16 v120 = 1024;
      int v121 = v91;
      unint64_t v92 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v92);
      if (v92 != (char *)&__p) {
        free(v92);
      }
      return 0;
    case 0xCu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,#Warning,OTA delete unexpected during RILD_Session state", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_107;
      }
      goto LABEL_232;
    case 0xDu:
      uint64_t v16 = *(void *)(a1 + 2272);
      if (!v16)
      {
        sub_101809A20(1);
        goto LABEL_226;
      }
      sub_1017F251C(a1, v16);
      if (*(_DWORD *)(a1 + 860)) {
        return 1;
      }
      uint64_t result = 0;
      *(_DWORD *)(a1 + 244) = 10;
      return result;
    case 0xEu:
      if (!*(void *)(a1 + 2304))
      {
        sub_101809190(1);
        goto LABEL_226;
      }
      v129[0] = off_10233E5A8;
      v129[1] = a1;
      v129[3] = v129;
      uint64_t v60 = *(void *)(a1 + 200);
      if (!v60) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v60 + 48))(v60, v129);
      sub_1017DD378(v129);
      int v61 = **(_DWORD **)(a1 + 2304);
      if (v61 == -9)
      {
        int v38 = 4;
      }
      else if (v61 == -4)
      {
        int v38 = 3;
      }
      else
      {
        if (v61) {
          goto LABEL_158;
        }
        int v38 = 1;
      }
      goto LABEL_172;
    case 0xFu:
    case 0x11u:
      *(unsigned char *)(a1 + 876) = 0;
      *(_DWORD *)(a1 + 244) = 3;
      sub_1017EFAF4(a1, -4, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      return 0;
    case 0x10u:
      if (!*(void *)(a1 + 2320))
      {
        sub_101809B8C(1);
        goto LABEL_226;
      }
      v128[0] = off_10233E6A8;
      v128[1] = a1;
      v128[3] = v128;
      uint64_t v36 = *(void *)(a1 + 200);
      if (!v36) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v36 + 48))(v36, v128);
      sub_1017DD378(v128);
      int v37 = **(_DWORD **)(a1 + 2320) + 9;
      if (v37 >= 0xA) {
LABEL_158:
      }
        int v38 = 11;
      else {
        int v38 = dword_101E3A260[v37];
      }
LABEL_172:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 244) = v38;
LABEL_173:
      *(unsigned char *)(a1 + 876) = 0;
      return result;
    case 0x12u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning no fix to send. sending back error", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v97 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v97;
        int v98 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v98);
        if (v98 != (char *)&__p) {
          free(v98);
        }
      }
      *(_DWORD *)(a1 + 244) = 2;
      sub_1017EFAF4(a1, -4, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      sub_1017F4EB4(a1, 2u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
      return 0;
    case 0x13u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v62 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v63 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_93;
      }
LABEL_230:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_93:
      int v34 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v34;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v10);
      goto LABEL_156;
    case 0x14u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v95 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v95;
        int v96 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v96);
        if (v96 != (char *)&__p) {
          free(v96);
        }
      }
      *(_DWORD *)(a1 + 244) = 6;
      sub_1017F4EB4(a1, 6u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
      return 0;
    case 0x15u:
      uint64_t v54 = *(void *)(a1 + 2384);
      if (!v54)
      {
        sub_101809CF8(1);
        goto LABEL_226;
      }
      if (*(_DWORD *)(v54 + 8) == *(_DWORD *)(a1 + 860) && *(_DWORD *)(v54 + 12) == *(_DWORD *)(a1 + 856))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v55 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v56 = *(_DWORD *)(a1 + 880);
          int v57 = *(_DWORD **)(a1 + 2384);
          int v59 = v57[1];
          int v58 = v57[2];
          LODWORD(v57) = v57[3];
          LODWORD(__p) = 67110144;
          HIDWORD(__p) = v56;
          __int16 v131 = 1024;
          unsigned int v132 = v56;
          __int16 v133 = 1024;
          int v134 = v58;
          __int16 v135 = 1024;
          int v136 = v59;
          __int16 v137 = 1024;
          int v138 = (int)v57;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v103 = *(_DWORD *)(a1 + 880);
          int64x2_t v104 = *(_DWORD **)(a1 + 2384);
          int v106 = v104[1];
          int v105 = v104[2];
          LODWORD(v104) = v104[3];
          *(_DWORD *)uint64_t buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v103;
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = v103;
          *(_WORD *)&v119[6] = 1024;
          *(_DWORD *)&v119[8] = v105;
          __int16 v120 = 1024;
          int v121 = v106;
          __int16 v122 = 1024;
          int v123 = (int)v104;
          int v107 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v107);
          if (v107 != (char *)&__p) {
            free(v107);
          }
        }
        *(_DWORD *)(a1 + 244) = 9;
        sub_1017F4EB4(a1, 9u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v64 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v65 = *(_DWORD *)(a1 + 880);
        __int16 v66 = *(_DWORD **)(a1 + 2384);
        int v68 = v66[1];
        int v67 = v66[2];
        LODWORD(v66) = v66[3];
        int v69 = *(_DWORD *)(a1 + 860);
        int v70 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67110656;
        HIDWORD(__p) = v65;
        __int16 v131 = 1024;
        unsigned int v132 = v65;
        __int16 v133 = 1024;
        int v134 = v67;
        __int16 v135 = 1024;
        int v136 = v68;
        __int16 v137 = 1024;
        int v138 = (int)v66;
        __int16 v139 = 1024;
        int v140 = v69;
        __int16 v141 = 1024;
        int v142 = v70;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x2Cu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v71 = *(_DWORD *)(a1 + 880);
      int v72 = *(_DWORD **)(a1 + 2384);
      int v74 = v72[1];
      int v73 = v72[2];
      LODWORD(v72) = v72[3];
      int v75 = *(_DWORD *)(a1 + 860);
      int v76 = *(_DWORD *)(a1 + 856);
      *(_DWORD *)uint64_t buf = 67110656;
      *(_DWORD *)&uint8_t buf[4] = v71;
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = v71;
      *(_WORD *)&v119[6] = 1024;
      *(_DWORD *)&v119[8] = v73;
      __int16 v120 = 1024;
      int v121 = v74;
      __int16 v122 = 1024;
      int v123 = (int)v72;
      __int16 v124 = 1024;
      int v125 = v75;
      __int16 v126 = 1024;
      int v127 = v76;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v10);
LABEL_156:
      if (v10 == (char *)&__p) {
        return 1;
      }
      goto LABEL_157;
    case 0x16u:
      uint64_t v11 = *(void *)(a1 + 2392);
      if (v11)
      {
        sub_1017F379C(a1, v11);
        return 1;
      }
      sub_101809740(1);
      goto LABEL_226;
    case 0x17u:
      uint64_t v15 = *(void *)(a1 + 2288);
      if (v15)
      {
        sub_1017F25E4(a1, v15);
        return 1;
      }
      sub_101809E64(1);
      goto LABEL_226;
    case 0x18u:
      uint64_t v12 = *(void *)(a1 + 2400);
      if (v12)
      {
        sub_1017F4230(a1, v12);
      }
      else
      {
        sub_101809FD0(1);
LABEL_226:
        __break(1u);
LABEL_227:
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_12:
        int v8 = *(_DWORD *)(a1 + 880);
        sub_1017F4204(a2, buf);
        if ((v121 & 0x8000) == 0) {
          int v9 = buf;
        }
        else {
          int v9 = *(uint8_t **)buf;
        }
        int v114 = 67109378;
        int v115 = v8;
        __int16 v116 = 2080;
        __int16 v117 = v9;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        if (SBYTE1(v121) < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v10);
        if (v10 != (char *)&__p) {
LABEL_157:
        }
          free(v10);
      }
      return 1;
    case 0x19u:
      if (sub_1017F468C(a1))
      {
        if (*(unsigned char *)(a1 + 876))
        {
          *(_DWORD *)(a1 + 244) = 8;
          sub_1017EFAF4(a1, -2, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
          sub_1017F2000(a1, 8u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 6, *(_DWORD *)(a1 + 2224), 1);
          sub_1017F0210(a1);
        }
        return 3;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v77 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v78 = *(_DWORD *)(a1 + 880);
          LODWORD(__p) = 67109120;
          HIDWORD(__p) = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", (uint8_t *)&__p, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v101 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v101;
          unint64_t v102 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v102);
          if (v102 != (char *)&__p) {
            free(v102);
          }
        }
        sub_1017F49F8(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        long long v79 = *(_OWORD *)(a1 + 800);
        v111[0] = *(_OWORD *)(a1 + 784);
        v111[1] = v79;
        v111[2] = *(_OWORD *)(a1 + 816);
        sub_1017F4BF8(a1, v111);
        *(void *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 800) = _Q0;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(unsigned char *)(a1 + 820) = 0;
        uint64_t result = 1;
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 880);
        sub_1017F4204(a2, &__p);
        unsigned int v7 = (v136 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)__int16 v119 = 2080;
        *(void *)&v119[2] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v136) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_12;
      }
      goto LABEL_227;
    case 0x1Du:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,MeasurementAndEstimateResponse response received", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v93 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v93;
        int v94 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v94);
        if (v94 != (char *)&__p) {
          free(v94);
        }
      }
      sub_1017F60D0(a1);
      uint64_t result = 0;
      goto LABEL_173;
    default:
      return result;
  }
}

void sub_1017EA69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017EA784(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2;
  switch(a2)
  {
    case 0u:
      uint64_t v33 = *(void *)(a1 + 840);
      if (*(int *)(v33 + 8) <= 0)
      {
        sub_100134750(&__p, "RILD_SessionPeriodic");
        sub_100134750(buf, "Enter");
        if ((v116 & 0x8000) == 0) {
          int v34 = buf;
        }
        else {
          int v34 = *(uint8_t **)buf;
        }
        if ((v116 & 0x8000) == 0) {
          std::string::size_type v35 = BYTE1(v116);
        }
        else {
          std::string::size_type v35 = *(void *)v114;
        }
        uint64_t v36 = std::string::append((std::string *)&__p, (const std::string::value_type *)v34, v35);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        std::string::size_type v108 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v107 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        sub_100EBBFD8(v33, (uint64_t *)v107);
        if (SHIBYTE(v108) < 0) {
          operator delete(v107[0]);
        }
        if (SBYTE1(v116) < 0) {
          operator delete(*(void **)buf);
        }
        if (SBYTE1(v131) < 0) {
          operator delete(__p);
        }
      }
      sub_1017F0998(a1, (unsigned __int16 *)(a1 + 2228));
      return 2;
    case 1u:
      uint64_t v40 = *(void *)(a1 + 840);
      if (*(int *)(v40 + 8) > 0)
      {
        sub_100EBC6AC(v40);
        sub_1017F0210(a1);
        return 2;
      }
      sub_10180A13C();
      goto LABEL_222;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started session", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_65;
      }
      goto LABEL_225;
    case 3u:
      if (!*(unsigned char *)(a1 + 878))
      {
        *(_DWORD *)(a1 + 244) = 7;
        sub_1017EFAF4(a1, -2, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        sub_1017F4EB4(a1, 7u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v38 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v39 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored for conformance mode", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
LABEL_225:
      }
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_65:
      int v29 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v29;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v10);
      goto LABEL_162;
    case 4u:
      long long v30 = *(_DWORD **)(a1 + 2352);
      if (v30)
      {
        sub_1017F26AC(a1, v30);
        return 2;
      }
      sub_10180A414(2);
      goto LABEL_222;
    case 6u:
      uint64_t v32 = *(int **)(a1 + 2360);
      if (v32)
      {
        sub_1017F2AF4(a1, v32);
        return 2;
      }
      sub_10180A580(2);
      goto LABEL_222;
    case 7u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v49 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        int v50 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Not implemented", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_47;
      }
      goto LABEL_224;
    case 8u:
      int v51 = *(long long **)(a1 + 2368);
      if (v51)
      {
        sub_1017F2DD8(a1, v51);
        return 2;
      }
      sub_10180A6EC(2);
      goto LABEL_222;
    case 9u:
    case 0xAu:
      if (!sub_1017F1AC0(a1, a1 + 2228))
      {
        sub_1017EFAF4(a1, -9, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        sub_1017F3D24(a1, 4u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        return 2;
      }
      if (*(_WORD *)(a1 + 2228))
      {
        sub_1017F1D18((_DWORD *)a1, a1 + 2228);
        return 2;
      }
      return 1;
    case 0xBu:
      uint64_t v41 = *(void *)(a1 + 2376);
      if (!v41)
      {
        sub_10180A9C4(2);
        goto LABEL_222;
      }
      if (*(_DWORD *)(v41 + 12) != *(_DWORD *)(a1 + 856) || *(_DWORD *)(v41 + 4) != *(_DWORD *)(a1 + 860)) {
        return result;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v42 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v43 = *(_DWORD *)(a1 + 880);
        int v44 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v43;
        __int16 v126 = 1024;
        unsigned int v127 = v43;
        __int16 v128 = 1024;
        int v129 = v44;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,aborted", (uint8_t *)&__p, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v99 = *(_DWORD *)(a1 + 880);
        int v100 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)uint64_t buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v99;
        *(_WORD *)int v114 = 1024;
        *(_DWORD *)&v114[2] = v99;
        *(_WORD *)&v114[6] = 1024;
        *(_DWORD *)&v114[8] = v100;
        int v101 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v101);
        if (v101 != (char *)&__p) {
          free(v101);
        }
      }
      sub_1017EF868(a1, *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      *(_DWORD *)(a1 + 244) = 5;
      if (sub_10073CB54())
      {
        *(_DWORD *)(a1 + 456) = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        uint64_t v45 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v46 = *(_DWORD *)(a1 + 880);
          int v47 = *(_DWORD *)(a1 + 856);
          int v48 = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
          std::string __p = (void *)__PAIR64__(v46, 67109888);
          __int16 v126 = 1024;
          unsigned int v127 = v46;
          __int16 v128 = 1024;
          int v129 = v47;
          __int16 v130 = 1024;
          int v131 = v48;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,abortReason,%d", (uint8_t *)&__p, 0x1Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v102 = *(_DWORD *)(a1 + 880);
          int v103 = *(_DWORD *)(a1 + 856);
          int v104 = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
          *(_DWORD *)uint64_t buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v102;
          *(_WORD *)int v114 = 1024;
          *(_DWORD *)&v114[2] = v102;
          *(_WORD *)&v114[6] = 1024;
          *(_DWORD *)&v114[8] = v103;
          __int16 v115 = 1024;
          int v116 = v104;
          int v105 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v105);
          if (v105 != (char *)&__p) {
            free(v105);
          }
        }
      }
      sub_1017F5BAC(a1, 5u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), *(_DWORD *)(*(void *)(a1 + 2376) + 16), 1);
      return 0;
    case 0xCu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v54 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        int v55 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v55;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,OTA delete unexpected during RILD_SessionPeriodic state", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v86 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v86;
        int v87 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v87);
        if (v87 != (char *)&__p) {
          free(v87);
        }
      }
      if (!*(unsigned char *)(a1 + 878)) {
        return 2;
      }
      *(_DWORD *)(a1 + 244) = 9;
      sub_1017F0210(a1);
      return 0;
    case 0xDu:
      uint64_t v53 = *(void *)(a1 + 2272);
      if (v53)
      {
        sub_1017F251C(a1, v53);
        return 2;
      }
      sub_10180AB30(2);
      goto LABEL_222;
    case 0xEu:
      uint64_t v31 = *(_DWORD **)(a1 + 2304);
      if (v31)
      {
        if (*v31)
        {
          if (!*(unsigned char *)(a1 + 877))
          {
LABEL_177:
            sub_1017F0FD4(a1 + 8, 18, *(double *)(a1 + 848));
            return 2;
          }
        }
        else
        {
          *(unsigned char *)(a1 + 877) = 1;
        }
        v124[0] = off_10233E7A8;
        v124[1] = a1;
        v124[3] = v124;
        uint64_t v85 = *(void *)(a1 + 200);
        if (!v85) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v85 + 48))(v85, v124);
        sub_1017DD378(v124);
        goto LABEL_177;
      }
      sub_10180A2A8(2);
LABEL_222:
      __break(1u);
LABEL_223:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_32:
      int v14 = *(_DWORD *)(a1 + 880);
      sub_100134750(buf, "MeasurementAndEstimateResponse");
      if ((v116 & 0x8000) == 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(uint8_t **)buf;
      }
      int v109 = 67109378;
      int v110 = v14;
      __int16 v111 = 2080;
      uint64_t v112 = v15;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE1(v116) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_37:
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v10);
      if (v10 != (char *)&__p) {
LABEL_163:
      }
        free(v10);
      return 2;
    case 0x10u:
      if (!*(void *)(a1 + 2320))
      {
        sub_10180AC9C(2);
        goto LABEL_222;
      }
      v123[0] = off_10233E8A8;
      v123[1] = a1;
      v123[3] = v123;
      uint64_t v56 = *(void *)(a1 + 200);
      if (!v56) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v56 + 48))(v56, v123);
      sub_1017DD378(v123);
      return 2;
    case 0x12u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v57 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v58 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning no fix to send. sending back error", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v88 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v88;
        int v89 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v89);
        if (v89 != (char *)&__p) {
          free(v89);
        }
      }
      *(_DWORD *)(a1 + 244) = 2;
      sub_1017F4EB4(a1, 2u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
      int v59 = *(_DWORD *)(a1 + 868);
      int v60 = *(_DWORD *)(a1 + 860);
      int v61 = *(_DWORD *)(a1 + 856);
      if (*(unsigned char *)(a1 + 877)) {
        sub_1017EFAF4(a1, -2, v59, v60, v61);
      }
      else {
        sub_1017EFAF4(a1, -4, v59, v60, v61);
      }
      return 0;
    case 0x13u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v18 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_47;
      }
LABEL_224:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_47:
      int v19 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v19;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v10);
      goto LABEL_162;
    case 0x14u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v62 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v63 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v90 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v90;
        int v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v91);
        if (v91 != (char *)&__p) {
          free(v91);
        }
      }
      uint64_t result = 0;
      *(_DWORD *)(a1 + 244) = 6;
      return result;
    case 0x15u:
      uint64_t v20 = *(void *)(a1 + 2384);
      if (!v20)
      {
        sub_10180AE08(2);
        goto LABEL_222;
      }
      if (*(_DWORD *)(v20 + 8) == *(_DWORD *)(a1 + 860) && *(_DWORD *)(v20 + 12) == *(_DWORD *)(a1 + 856))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        __int16 v21 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v22 = *(_DWORD *)(a1 + 880);
          __int16 v23 = *(_DWORD **)(a1 + 2384);
          int v25 = v23[1];
          int v24 = v23[2];
          LODWORD(v23) = v23[3];
          LODWORD(__p) = 67110144;
          HIDWORD(__p) = v22;
          __int16 v126 = 1024;
          unsigned int v127 = v22;
          __int16 v128 = 1024;
          int v129 = v24;
          __int16 v130 = 1024;
          int v131 = v25;
          __int16 v132 = 1024;
          int v133 = (int)v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v94 = *(_DWORD *)(a1 + 880);
          int v95 = *(_DWORD **)(a1 + 2384);
          int v97 = v95[1];
          int v96 = v95[2];
          LODWORD(v95) = v95[3];
          *(_DWORD *)uint64_t buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v94;
          *(_WORD *)int v114 = 1024;
          *(_DWORD *)&v114[2] = v94;
          *(_WORD *)&v114[6] = 1024;
          *(_DWORD *)&v114[8] = v96;
          __int16 v115 = 1024;
          int v116 = v97;
          __int16 v117 = 1024;
          int v118 = (int)v95;
          int v98 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v98);
          if (v98 != (char *)&__p) {
            free(v98);
          }
        }
        *(_DWORD *)(a1 + 244) = 9;
        sub_1017F4EB4(a1, 9u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v64 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v65 = *(_DWORD *)(a1 + 880);
        __int16 v66 = *(_DWORD **)(a1 + 2384);
        int v68 = v66[1];
        int v67 = v66[2];
        LODWORD(v66) = v66[3];
        int v69 = *(_DWORD *)(a1 + 860);
        int v70 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67110656;
        HIDWORD(__p) = v65;
        __int16 v126 = 1024;
        unsigned int v127 = v65;
        __int16 v128 = 1024;
        int v129 = v67;
        __int16 v130 = 1024;
        int v131 = v68;
        __int16 v132 = 1024;
        int v133 = (int)v66;
        __int16 v134 = 1024;
        int v135 = v69;
        __int16 v136 = 1024;
        int v137 = v70;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x2Cu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v71 = *(_DWORD *)(a1 + 880);
      int v72 = *(_DWORD **)(a1 + 2384);
      int v74 = v72[1];
      int v73 = v72[2];
      LODWORD(v72) = v72[3];
      int v75 = *(_DWORD *)(a1 + 860);
      int v76 = *(_DWORD *)(a1 + 856);
      *(_DWORD *)uint64_t buf = 67110656;
      *(_DWORD *)&uint8_t buf[4] = v71;
      *(_WORD *)int v114 = 1024;
      *(_DWORD *)&v114[2] = v71;
      *(_WORD *)&v114[6] = 1024;
      *(_DWORD *)&v114[8] = v73;
      __int16 v115 = 1024;
      int v116 = v74;
      __int16 v117 = 1024;
      int v118 = (int)v72;
      __int16 v119 = 1024;
      int v120 = v75;
      __int16 v121 = 1024;
      int v122 = v76;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v10);
LABEL_162:
      if (v10 == (char *)&__p) {
        return 2;
      }
      goto LABEL_163;
    case 0x16u:
      uint64_t v52 = *(void *)(a1 + 2392);
      if (v52)
      {
        sub_1017F379C(a1, v52);
        return 2;
      }
      sub_10180A858(2);
      goto LABEL_222;
    case 0x17u:
      uint64_t v16 = *(void *)(a1 + 2288);
      if (v16)
      {
        sub_1017F25E4(a1, v16);
        return 2;
      }
      sub_10180AF74(2);
      goto LABEL_222;
    case 0x18u:
      uint64_t v26 = *(void *)(a1 + 2400);
      if (v26)
      {
        sub_1017F4230(a1, v26);
        return 2;
      }
      sub_10180B0E0(2);
      goto LABEL_222;
    case 0x19u:
      if (sub_1017F468C(a1))
      {
        if (*(unsigned char *)(a1 + 876))
        {
          *(_DWORD *)(a1 + 244) = 8;
          sub_1017EFAF4(a1, -2, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
          sub_1017F2000(a1, 8u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 6, *(_DWORD *)(a1 + 2224), 1);
          sub_1017F0210(a1);
        }
        return 3;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v77 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v78 = *(_DWORD *)(a1 + 880);
          LODWORD(__p) = 67109120;
          HIDWORD(__p) = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", (uint8_t *)&__p, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v92 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v92;
          int v93 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v93);
          if (v93 != (char *)&__p) {
            free(v93);
          }
        }
        sub_1017F49F8(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        long long v79 = *(_OWORD *)(a1 + 800);
        v106[0] = *(_OWORD *)(a1 + 784);
        v106[1] = v79;
        v106[2] = *(_OWORD *)(a1 + 816);
        sub_1017F4BF8(a1, v106);
        *(void *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 800) = _Q0;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(unsigned char *)(a1 + 820) = 0;
        uint64_t result = 2;
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 880);
        sub_1017F4204(a2, &__p);
        unsigned int v7 = (v131 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)int v114 = 2080;
        *(void *)&v114[2] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v131) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v8 = *(_DWORD *)(a1 + 880);
      sub_1017F4204(a2, buf);
      if ((v116 & 0x8000) == 0) {
        int v9 = buf;
      }
      else {
        int v9 = *(uint8_t **)buf;
      }
      int v109 = 67109378;
      int v110 = v8;
      __int16 v111 = 2080;
      uint64_t v112 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE1(v116) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_37;
    case 0x1Du:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(a1 + 880);
        sub_100134750(&__p, "MeasurementAndEstimateResponse");
        int v13 = (v131 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v12;
        *(_WORD *)int v114 = 2080;
        *(void *)&v114[2] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v131) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_32;
      }
      goto LABEL_223;
    default:
      return result;
  }
}

void sub_1017EC230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017EC318(uint64_t a1, int a2)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 0:
      uint64_t v50 = *(void *)(a1 + 840);
      if (*(int *)(v50 + 8) <= 0)
      {
        sub_100134750(buf, "RILD_WlanSession");
        sub_100134750(v123, "Enter");
        if ((v126 & 0x8000) == 0) {
          int v51 = v123;
        }
        else {
          int v51 = *(uint8_t **)v123;
        }
        if ((v126 & 0x8000) == 0) {
          std::string::size_type v52 = BYTE1(v126);
        }
        else {
          std::string::size_type v52 = *(void *)v124;
        }
        uint64_t v53 = std::string::append((std::string *)buf, (const std::string::value_type *)v51, v52);
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        std::string::size_type v118 = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        sub_100EBBFD8(v50, (uint64_t *)__p);
        if (SHIBYTE(v118) < 0) {
          operator delete(__p[0]);
        }
        if (SBYTE1(v126) < 0) {
          operator delete(*(void **)v123);
        }
        if (SBYTE1(v139) < 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_1017F61AC(a1, a1 + 2416);
      return 3;
    case 1:
      uint64_t v49 = *(void *)(a1 + 840);
      if (*(int *)(v49 + 8) > 0)
      {
        sub_100EBC6AC(v49);
        sub_1017F0504(a1 + 8, 27);
        return 3;
      }
      sub_10180B24C();
      goto LABEL_218;
    case 2:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v56 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v57 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started wlan session", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_219;
    case 3:
      if (!*(unsigned char *)(a1 + 878))
      {
        sub_1017F49F8(a1, -2);
        *(_DWORD *)(a1 + 788) = 7;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        long long v84 = *(_OWORD *)(a1 + 816);
        v115[1] = *(_OWORD *)(a1 + 800);
        v115[2] = v84;
        v115[0] = *(_OWORD *)(a1 + 784);
        sub_1017F4BF8(a1, v115);
        uint64_t result = 0;
        *(void *)(a1 + 784) = 0;
        goto LABEL_26;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      std::string::size_type v35 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored in conformance mode", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_219;
      }
      goto LABEL_159;
    case 4:
      int v48 = *(_DWORD **)(a1 + 2352);
      if (v48)
      {
        sub_1017F26AC(a1, v48);
        return 3;
      }
      sub_10180B3B8(3);
      goto LABEL_218;
    case 6:
      int v58 = *(int **)(a1 + 2360);
      if (v58)
      {
        sub_1017F2AF4(a1, v58);
        return 3;
      }
      sub_10180B524(3);
      goto LABEL_218;
    case 7:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v33 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,#Warning, Not implemented", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_52;
      }
      goto LABEL_220;
    case 8:
      int v34 = *(long long **)(a1 + 2368);
      if (v34)
      {
        sub_1017F2DD8(a1, v34);
        return 3;
      }
      sub_10180B690(3);
      goto LABEL_218;
    case 9:
    case 10:
      if (!sub_1017F1AC0(a1, a1 + 2228))
      {
        sub_1017EFAF4(a1, -9, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        sub_1017F3D24(a1, 4u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268));
        return 3;
      }
      sub_1017F49F8(a1, -2);
      *(_DWORD *)(a1 + 788) = 6;
      *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
      long long v8 = *(_OWORD *)(a1 + 816);
      v114[1] = *(_OWORD *)(a1 + 800);
      v114[2] = v8;
      v114[0] = *(_OWORD *)(a1 + 784);
      sub_1017F4BF8(a1, v114);
      if (*(_WORD *)(a1 + 2228)) {
        return 2;
      }
      else {
        return 1;
      }
    case 11:
      if (!*(void *)(a1 + 2376))
      {
        sub_10180B968(qword_1024193D0 == -1);
        goto LABEL_218;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      long long v37 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,#Warning session aborted", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v89 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)int v123 = 67109120;
        *(_DWORD *)&void v123[4] = v89;
        int v90 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v90);
        if (v90 != (char *)buf) {
          free(v90);
        }
      }
      uint64_t v39 = *(void *)(a1 + 2376);
      if (*(_DWORD *)(v39 + 12) != *(_DWORD *)(a1 + 856) || *(_DWORD *)(v39 + 4) != *(_DWORD *)(a1 + 860)) {
        return 3;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v40 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = *(_DWORD *)(a1 + 880);
        int v42 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)uint64_t buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v41;
        __int16 v134 = 1024;
        int v135 = v41;
        __int16 v136 = 1024;
        int v137 = v42;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,#Warning instance,%d,session,%u,aborted", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v104 = *(_DWORD *)(a1 + 880);
        int v105 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)int v123 = 67109632;
        *(_DWORD *)&void v123[4] = v104;
        *(_WORD *)__int16 v124 = 1024;
        *(_DWORD *)&v124[2] = v104;
        *(_WORD *)&v124[6] = 1024;
        *(_DWORD *)&v124[8] = v105;
        int v106 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v106);
        if (v106 != (char *)buf) {
          free(v106);
        }
      }
      sub_1017EF868(a1, *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      *(_DWORD *)(a1 + 788) = 8;
      *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
      if (sub_10073CB54())
      {
        *(_DWORD *)(a1 + 824) = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v43 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v44 = *(_DWORD *)(a1 + 880);
          int v45 = *(_DWORD *)(a1 + 856);
          int v46 = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
          *(_DWORD *)uint64_t buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v44;
          __int16 v134 = 1024;
          int v135 = v44;
          __int16 v136 = 1024;
          int v137 = v45;
          __int16 v138 = 1024;
          int v139 = v46;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,#Warning instance,%d,session,%u,abortReason,%d", buf, 0x1Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v107 = *(_DWORD *)(a1 + 880);
          int v108 = *(_DWORD *)(a1 + 856);
          int v109 = *(_DWORD *)(*(void *)(a1 + 2376) + 16);
          *(_DWORD *)int v123 = 67109888;
          *(_DWORD *)&void v123[4] = v107;
          *(_WORD *)__int16 v124 = 1024;
          *(_DWORD *)&v124[2] = v107;
          *(_WORD *)&v124[6] = 1024;
          *(_DWORD *)&v124[8] = v108;
          __int16 v125 = 1024;
          int v126 = v109;
          int v110 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v110);
          if (v110 != (char *)buf) {
            free(v110);
          }
        }
      }
      long long v47 = *(_OWORD *)(a1 + 800);
      v116[0] = *(_OWORD *)(a1 + 784);
      v116[1] = v47;
      v116[2] = *(_OWORD *)(a1 + 816);
      sub_1017F4BF8(a1, v116);
      uint64_t result = 0;
      *(void *)(a1 + 784) = 0;
LABEL_26:
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 800) = _Q0;
      *(_WORD *)(a1 + 822) = 0;
      *(_DWORD *)(a1 + 792) = 0;
      *(_DWORD *)(a1 + 816) = 0;
      *(unsigned char *)(a1 + 820) = 0;
      goto LABEL_27;
    case 12:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v68 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v69 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v69;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,#Warning,OTA delete unexpected during RILD_Session state", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_219;
    case 13:
    case 15:
    case 16:
    case 17:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning unexpected event", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_219;
    case 18:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      long long v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning unexpected event", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_219;
    case 19:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v26 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v27 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_52;
      }
LABEL_220:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_52:
      int v28 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)int v123 = 67109120;
      *(_DWORD *)&void v123[4] = v28;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v29);
      goto LABEL_198;
    case 20:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v64 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v65 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", buf, 8u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v66 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)int v123 = 67109120;
      *(_DWORD *)&void v123[4] = v66;
      int v67 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v67);
      if (v67 != (char *)buf) {
        free(v67);
      }
      return 0;
    case 21:
      uint64_t v17 = *(void *)(a1 + 2384);
      if (!v17)
      {
        sub_10180BADC(3);
        goto LABEL_218;
      }
      if (*(_DWORD *)(v17 + 8) == *(_DWORD *)(a1 + 860) && *(_DWORD *)(v17 + 12) == *(_DWORD *)(a1 + 856))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v18 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(_DWORD *)(a1 + 880);
          uint64_t v20 = *(_DWORD **)(a1 + 2384);
          int v22 = v20[1];
          int v21 = v20[2];
          LODWORD(v20) = v20[3];
          *(_DWORD *)uint64_t buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v19;
          __int16 v134 = 1024;
          int v135 = v19;
          __int16 v136 = 1024;
          int v137 = v21;
          __int16 v138 = 1024;
          int v139 = v22;
          __int16 v140 = 1024;
          int v141 = (int)v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v99 = *(_DWORD *)(a1 + 880);
          int v100 = *(_DWORD **)(a1 + 2384);
          int v102 = v100[1];
          int v101 = v100[2];
          LODWORD(v100) = v100[3];
          *(_DWORD *)int v123 = 67110144;
          *(_DWORD *)&void v123[4] = v99;
          *(_WORD *)__int16 v124 = 1024;
          *(_DWORD *)&v124[2] = v99;
          *(_WORD *)&v124[6] = 1024;
          *(_DWORD *)&v124[8] = v101;
          __int16 v125 = 1024;
          int v126 = v102;
          __int16 v127 = 1024;
          int v128 = (int)v100;
          int v103 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v103);
          if (v103 != (char *)buf) {
            free(v103);
          }
        }
        *(_DWORD *)(a1 + 244) = 9;
        sub_1017F4EB4(a1, 9u, *(_DWORD *)(a1 + 2232), *(_DWORD *)(a1 + 2264), *(_DWORD *)(a1 + 2268), 1);
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v73 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v74 = *(_DWORD *)(a1 + 880);
        int v75 = *(_DWORD **)(a1 + 2384);
        int v77 = v75[1];
        int v76 = v75[2];
        LODWORD(v75) = v75[3];
        int v78 = *(_DWORD *)(a1 + 860);
        int v79 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)uint64_t buf = 67110656;
        *(_DWORD *)&uint8_t buf[4] = v74;
        __int16 v134 = 1024;
        int v135 = v74;
        __int16 v136 = 1024;
        int v137 = v76;
        __int16 v138 = 1024;
        int v139 = v77;
        __int16 v140 = 1024;
        int v141 = (int)v75;
        __int16 v142 = 1024;
        int v143 = v78;
        __int16 v144 = 1024;
        int v145 = v79;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v91 = *(_DWORD *)(a1 + 880);
        int v92 = *(_DWORD **)(a1 + 2384);
        int v94 = v92[1];
        int v93 = v92[2];
        LODWORD(v92) = v92[3];
        int v95 = *(_DWORD *)(a1 + 860);
        int v96 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)int v123 = 67110656;
        *(_DWORD *)&void v123[4] = v91;
        *(_WORD *)__int16 v124 = 1024;
        *(_DWORD *)&v124[2] = v91;
        *(_WORD *)&v124[6] = 1024;
        *(_DWORD *)&v124[8] = v93;
        __int16 v125 = 1024;
        int v126 = v94;
        __int16 v127 = 1024;
        int v128 = (int)v92;
        __int16 v129 = 1024;
        int v130 = v95;
        __int16 v131 = 1024;
        int v132 = v96;
        int v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v29);
        goto LABEL_198;
      }
      return 3;
    case 22:
      uint64_t v55 = *(void *)(a1 + 2392);
      if (v55)
      {
        sub_1017F379C(a1, v55);
      }
      else
      {
        sub_10180B7FC(3);
LABEL_218:
        __break(1u);
LABEL_219:
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
LABEL_159:
        int v70 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)int v123 = 67109120;
        *(_DWORD *)&void v123[4] = v70;
        int v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v29);
LABEL_198:
        if (v29 != (char *)buf) {
LABEL_199:
        }
          free(v29);
      }
      return 3;
    case 23:
    case 24:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning unexpected event", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_219;
    case 25:
      if (sub_1017F468C(a1))
      {
        sub_1017F49F8(a1, -2);
        *(_DWORD *)(a1 + 788) = 6;
        long long v71 = *(_OWORD *)(a1 + 816);
        long long v72 = *(_OWORD *)(a1 + 784);
        v113[1] = *(_OWORD *)(a1 + 800);
        v113[2] = v71;
        v113[0] = v72;
        sub_1017F4BF8(a1, v113);
        sub_1017F0FD4(a1 + 8, 27, *(double *)(a1 + 3248));
        return 3;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v80 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v81 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v81;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          int v97 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)int v123 = 67109120;
          *(_DWORD *)&void v123[4] = v97;
          int v98 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v98);
          if (v98 != (char *)buf) {
            free(v98);
          }
        }
        sub_1017F49F8(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        long long v82 = *(_OWORD *)(a1 + 800);
        v112[0] = *(_OWORD *)(a1 + 784);
        v112[1] = v82;
        v112[2] = *(_OWORD *)(a1 + 816);
        sub_1017F4BF8(a1, v112);
        *(void *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 800) = _Q0;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(unsigned char *)(a1 + 820) = 0;
        uint64_t result = 3;
LABEL_27:
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 26:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan response received", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v87 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)int v123 = 67109120;
        *(_DWORD *)&void v123[4] = v87;
        int v88 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v88);
        if (v88 != (char *)buf) {
          free(v88);
        }
      }
      sub_1017F63D8(a1, a1 + 2436);
      *(_DWORD *)(a1 + 784) = 3;
      uint64_t v25 = *(void *)(a1 + 3280);
      if (!v25) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 48))(v25, a1 + 784);
      return 0;
    case 27:
    case 28:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request timeout", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v85 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)int v123 = 67109120;
        *(_DWORD *)&void v123[4] = v85;
        int v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v86);
        if (v86 != (char *)buf) {
          free(v86);
        }
      }
      sub_1017F49F8(a1, -2);
      *(_DWORD *)(a1 + 788) = 3;
      *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
      long long v11 = *(_OWORD *)(a1 + 800);
      v111[0] = *(_OWORD *)(a1 + 784);
      v111[1] = v11;
      v111[2] = *(_OWORD *)(a1 + 816);
      sub_1017F4BF8(a1, v111);
      uint64_t result = 0;
      *(void *)(a1 + 784) = 0;
      goto LABEL_26;
    case 29:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v59 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v60 = *(_DWORD *)(a1 + 880);
        sub_100134750(buf, "MeasurementAndEstimateResponse");
        int v61 = (v139 & 0x8000) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)int v123 = 67109378;
        *(_DWORD *)&void v123[4] = v60;
        *(_WORD *)__int16 v124 = 2080;
        *(void *)&v124[2] = v61;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,unexpected event,%s", v123, 0x12u);
        if (SBYTE1(v139) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v62 = *(_DWORD *)(a1 + 880);
      sub_100134750(v123, "MeasurementAndEstimateResponse");
      if ((v126 & 0x8000) == 0) {
        int v63 = v123;
      }
      else {
        int v63 = *(uint8_t **)v123;
      }
      int v119 = 67109378;
      int v120 = v62;
      __int16 v121 = 2080;
      int v122 = v63;
      int v29 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE1(v126) < 0) {
        operator delete(*(void **)v123);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v29);
      if (v29 == (char *)buf) {
        return 3;
      }
      goto LABEL_199;
    default:
      return result;
  }
}