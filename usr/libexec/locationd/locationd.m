uint64_t sub_1000059B0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1000059F8(uint64_t a1, int a2, int *a3)
{
  int v16 = a2;
  sub_100005EAC((char *)a1, a2, a3);
  if (*a3 == 12)
  {
    *(_DWORD *)buf = 12;
    int v6 = sub_1001072EC(a1, (int *)buf, 1);
    int v7 = *(_DWORD *)(a1 + 284);
    if (v6 != v7 && v7 >= 1)
    {
      int v9 = v6;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      v10 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)buf = &v16;
        v11 = sub_1000FEE0C((uint64_t **)(a1 + 696), &v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
        *(_DWORD *)buf = 67240707;
        *(_DWORD *)&buf[4] = v9;
        __int16 v23 = 1026;
        int v24 = a2;
        __int16 v25 = 2081;
        v26 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@WsbReg, clients, %{public}d, minus, idname, %{public}d, %{private}s", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        int v13 = v16;
        v17 = &v16;
        v14 = sub_1000FEE0C((uint64_t **)(a1 + 696), &v16, (uint64_t)&unk_101D0B290, &v17)[5];
        LODWORD(v17) = 67240707;
        HIDWORD(v17) = v9;
        __int16 v18 = 1026;
        int v19 = v13;
        __int16 v20 = 2081;
        v21 = v14;
        v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiService::unregisterForNotification(int, const CLWifiService_Type::Notification &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      sub_10057F178(a1, 0, v16, 0);
      sub_10056CDC0(a1, 0, 0);
      *(_DWORD *)(a1 + 284) = v9;
    }
    sub_100005CB4(a1, (uint64_t)"unreg");
  }
  return 1;
}

void sub_100005CB4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 712) != *(_DWORD *)(a1 + 284))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 712);
      int v6 = *(_DWORD *)(a1 + 284);
      *(_DWORD *)buf = 136446722;
      uint64_t v9 = a2;
      __int16 v10 = 1026;
      int v11 = v5;
      __int16 v12 = 1026;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbClients, mismatch, %{public}s, %{public}d, %{public}d, #CloneMe", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbConfirmClientCounts(const char *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

BOOL sub_100005EAC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((void *)v8 + 6);
        __int16 v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          int v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              int v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10017C890((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BBAF8);
              }
              v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0) {
                  v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  v28 = __p;
                }
                else {
                  v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BBAF8);
                }
                v29 = a1 + 8;
                if (a1[31] < 0) {
                  v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  v30 = buf;
                }
                else {
                  v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                v38 = v29;
                __int16 v39 = 2082;
                v40 = v30;
                v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

_OWORD *sub_100006280(_OWORD *a1, long long *a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_1000062CC((uint64_t)a1, a2);
  return a1;
}

void sub_1000062B8(_Unwind_Exception *a1)
{
  sub_1001AB240(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000062CC(uint64_t a1, long long *a2)
{
  *(_OWORD *)int v19 = *(_OWORD *)a1;
  uint64_t v20 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  int v7 = (void **)(a1 + 24);
  long long v8 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v7);
  }
  long long v9 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)int v7 = v9;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  uint64_t v11 = *((void *)a2 + 7);
  uint64_t v10 = *((void *)a2 + 8);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  __int16 v12 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v10;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  int v13 = (std::__shared_weak_count *)*((void *)a2 + 8);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v5)
  {
    v14 = std::__shared_weak_count::lock(v5);
    if (v14)
    {
      int v15 = v14;
      if (v6) {
        sub_100099040(v6, (unsigned __int8 *)v19, (uint64_t *)__p, v4, 0);
      }
      sub_1000DB0A0(v15);
    }
    std::__shared_weak_count::__release_weak(v5);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  return a1;
}

void sub_10000644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_1000DB0A0(v22);
  std::__shared_weak_count::__release_weak(v21);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100006488(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_1000064D0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1000064D0(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100006564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onLocationControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onLocationControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100199E74(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100006718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100006738(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)sub_100054C14(a1, a2, a3, a4, a5) = off_1023079B0;
  *(void *)(a1 + 48) = [[CLVO2MaxSubscriptionAdapter alloc] initWithSubscription:a1];
  *(void *)(a1 + 56) = 0;
  id v6 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLVO2MaxService"];
  *(void *)(a1 + 56) = v6;
  [v6 registerDelegate:*(void *)(a1 + 48) inSilo:[*(id *)(a1 + 8) silo]];
  return a1;
}

void sub_1000067D8(_Unwind_Exception *a1)
{
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1000067EC()
{
}

void sub_1000068A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1000068E0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022BBCD0;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

uint64_t sub_1000069C4(double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, double a9, char a10)
{
  memset(&v70, 0, sizeof(v70));
  uint64_t v19 = "type";
  switch(*(_DWORD *)(a5 + 96))
  {
    case 0:
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      uint64_t v19 = "other type";
      if (!a8 || !a10) {
        goto LABEL_38;
      }
      std::string::assign(&v70, "other leashed");
      *a1 = 0.0;
      *a2 = 0;
      goto LABEL_5;
    case 1:
    case 3:
    case 9:
      unsigned int v28 = *(_DWORD *)(a3 + 96);
      BOOL v39 = v28 > 9;
      int v29 = (1 << v28) & 0x20E;
      BOOL v30 = v39 || v29 == 0;
      if (v30
        || vabdd_f64(a9, *a1) > *((double *)sub_100044B44() + 35)
        && vabdd_f64(a9, *(double *)(a3 + 76)) > *((double *)sub_100044B44() + 36))
      {
        goto LABEL_19;
      }
      int v32 = *a2 + 1;
      goto LABEL_29;
    case 4:
    case 0xD:
      if (*(_DWORD *)(a5 + 84) > 0x42u)
      {
        double v37 = *(double *)(a5 + 20);
        if (v37 >= *((double *)sub_100044B44() + 30))
        {
          std::string::assign(&v70, "accuracy");
          *a1 = 0.0;
          *a2 = 0;
          if (a6 <= 1) {
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v19 = "2+AP";
LABEL_38:
          std::string::assign(&v70, v19);
          *a1 = 0.0;
          *a2 = 0;
        }
      }
      else
      {
        std::string::assign(&v70, "one-AP");
        *a1 = 0.0;
        *a2 = 0;
        if (a6 < 2) {
          goto LABEL_5;
        }
      }
      goto LABEL_55;
    case 6:
    case 7:
    case 8:
    case 0xA:
      goto LABEL_38;
    case 0xB:
LABEL_19:
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      v31 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Fence: location treated as new continuous session", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022E9B10);
        }
        LOWORD(v71) = 0;
        v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      int v32 = 0;
      *a1 = a9;
LABEL_29:
      *a2 = v32;
      int v33 = *((_DWORD *)sub_100044B44() + 105);
      int v34 = *((_DWORD *)sub_100044B44() + 106);
      int v35 = *a2;
      if (a6 >= 2 && a7 && v35 >= v33)
      {
        char v36 = "requested";
        goto LABEL_54;
      }
      if ((a8 & 1) == 0 && v35 >= v33)
      {
        char v36 = "wifi off";
        goto LABEL_54;
      }
      if (*(int *)(a5 + 84) >= 51 && v35 > v34)
      {
        char v36 = "good";
        goto LABEL_54;
      }
      if (a8 && (a10 & 1) != 0)
      {
        v38 = "leashed";
        goto LABEL_53;
      }
      BOOL v39 = vabdd_f64(a9, *(double *)(a4 + 76)) <= 120.0 || v35 < v33;
      if (v39)
      {
        v38 = "other";
LABEL_53:
        std::string::assign(&v70, v38);
LABEL_5:
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022E9B10);
        }
        uint64_t v20 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          int v21 = &v70;
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v21 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          int v22 = *(_DWORD *)(a5 + 96);
          uint64_t v23 = *(void *)(a5 + 20);
          int v24 = *(_DWORD *)(a5 + 84);
          int v25 = *(_DWORD *)(a5 + 128);
          int v26 = *a2;
          *(_DWORD *)buf = 136382211;
          v86 = v21;
          __int16 v87 = 1026;
          int v88 = v22;
          __int16 v89 = 2050;
          uint64_t v90 = v23;
          __int16 v91 = 1026;
          int v92 = v24;
          __int16 v93 = 1026;
          int v94 = v25;
          __int16 v95 = 1025;
          int v96 = v26;
          __int16 v97 = 1025;
          int v98 = a6;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Fence: Ignoring location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{public}d, fixCnt, %{private}d, counter, %{private}d", buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022E9B10);
          }
          v62 = &v70;
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          int v63 = *(_DWORD *)(a5 + 96);
          uint64_t v64 = *(void *)(a5 + 20);
          int v65 = *(_DWORD *)(a5 + 84);
          int v66 = *(_DWORD *)(a5 + 128);
          int v67 = *a2;
          int v71 = 136382211;
          v72 = v62;
          __int16 v73 = 1026;
          int v74 = v63;
          __int16 v75 = 2050;
          uint64_t v76 = v64;
          __int16 v77 = 1026;
          int v78 = v65;
          __int16 v79 = 1026;
          int v80 = v66;
          __int16 v81 = 1025;
          int v82 = v67;
          __int16 v83 = 1025;
          int v84 = a6;
          v68 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)", "%s\n", v68);
          if (v68 != (char *)buf) {
            free(v68);
          }
        }
        uint64_t v27 = 1;
        goto LABEL_63;
      }
      char v36 = "last location old";
LABEL_54:
      std::string::assign(&v70, v36);
LABEL_55:
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      v40 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        v41 = &v70;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v41 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        int v42 = *(_DWORD *)(a5 + 96);
        uint64_t v43 = *(void *)(a5 + 20);
        int v44 = *(_DWORD *)(a5 + 84);
        int v45 = *(_DWORD *)(a5 + 128);
        int v46 = *a2;
        *(_DWORD *)buf = 136382211;
        v86 = v41;
        __int16 v87 = 1026;
        int v88 = v42;
        __int16 v89 = 2050;
        uint64_t v90 = v43;
        __int16 v91 = 1026;
        int v92 = v44;
        __int16 v93 = 1026;
        int v94 = v45;
        __int16 v95 = 1025;
        int v96 = v46;
        __int16 v97 = 1025;
        int v98 = a6;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Fence: Accepting location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{public}d, fixCnt, %{private}d, counter, %{private}d", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022E9B10);
        }
        v55 = &v70;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v55 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        int v56 = *(_DWORD *)(a5 + 96);
        uint64_t v57 = *(void *)(a5 + 20);
        int v58 = *(_DWORD *)(a5 + 84);
        int v59 = *(_DWORD *)(a5 + 128);
        int v60 = *a2;
        int v71 = 136382211;
        v72 = v55;
        __int16 v73 = 1026;
        int v74 = v56;
        __int16 v75 = 2050;
        uint64_t v76 = v57;
        __int16 v77 = 1026;
        int v78 = v58;
        __int16 v79 = 1026;
        int v80 = v59;
        __int16 v81 = 1025;
        int v82 = v60;
        __int16 v83 = 1025;
        int v84 = a6;
        v61 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)", "%s\n", v61);
        if (v61 != (char *)buf) {
          free(v61);
        }
      }
      uint64_t v27 = 0;
LABEL_63:
      if (*(double *)(a5 + 20) > 0.0)
      {
        long long v47 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a5;
        *(_OWORD *)(a3 + 16) = v47;
        long long v48 = *(_OWORD *)(a5 + 32);
        long long v49 = *(_OWORD *)(a5 + 48);
        long long v50 = *(_OWORD *)(a5 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a5 + 64);
        *(_OWORD *)(a3 + 80) = v50;
        *(_OWORD *)(a3 + 32) = v48;
        *(_OWORD *)(a3 + 48) = v49;
        long long v51 = *(_OWORD *)(a5 + 96);
        long long v52 = *(_OWORD *)(a5 + 112);
        long long v53 = *(_OWORD *)(a5 + 128);
        *(_OWORD *)(a3 + 140) = *(_OWORD *)(a5 + 140);
        *(_OWORD *)(a3 + 112) = v52;
        *(_OWORD *)(a3 + 128) = v53;
        *(_OWORD *)(a3 + 96) = v51;
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      return v27;
    default:
      goto LABEL_55;
  }
}

void sub_100007234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef sub_100007264(unsigned char *a1)
{
  uint64_t v1 = (CFTypeRef *)&kCFBooleanTrue;
  if (!*a1) {
    uint64_t v1 = (CFTypeRef *)&kCFBooleanFalse;
  }
  CFTypeRef v2 = *v1;
  CFRetain(*v1);
  return v2;
}

void sub_1000072AC(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6 = *a3;
  if ((int)*a3 > 8)
  {
    if (v6 == 9)
    {
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      int v25 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Got kNotificationLocationUnavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        uint64_t v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
      sub_10090B69C(a1, 0);
      return;
    }
    if (v6 == 14)
    {
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      uint64_t v19 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Got kNotificationServiceAuthorization", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        int v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v42);
        if (v42 != (char *)buf) {
          free(v42);
        }
      }
      sub_10090A260(a1);
      return;
    }
    goto LABEL_45;
  }
  if (v6 >= 2 && v6 != 4)
  {
LABEL_45:
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    int v26 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v27 = *a3;
      *(_DWORD *)buf = 67109120;
      LODWORD(v46) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 == -1) {
        goto LABEL_51;
      }
      goto LABEL_80;
    }
    return;
  }
  if (qword_102419590 != -1) {
    dispatch_once(&qword_102419590, &stru_1022D38B0);
  }
  long long v9 = qword_102419598;
  if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
  {
    unsigned int v10 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v46) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Got new time zone location: %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  double v11 = *(double *)(a4 + 88);
  if (v11 < 0.0 || (CFAbsoluteTime v12 = v11 + *(double *)(a4 + 76) + *(double *)(a1 + 904), v12 >= CFAbsoluteTimeGetCurrent()))
  {
    if (*(int *)(a1 + 816) < 1)
    {
      sub_10004A990(a1, a4, 0);
      return;
    }
    double v20 = *(double *)(a4 + 20);
    if (v20 >= 400.0)
    {
      if (v20 > *(double *)(a1 + 888))
      {
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        int v21 = qword_102419598;
        if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = *(void *)(a4 + 4);
          uint64_t v23 = *(void *)(a4 + 12);
          uint64_t v24 = *(void *)(a4 + 20);
          *(_DWORD *)buf = 134284033;
          uint64_t v46 = v22;
          __int16 v47 = 2049;
          uint64_t v48 = v23;
          __int16 v49 = 2048;
          uint64_t v50 = v24;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring inaccurate location <%{private}+.8f, %{private}.8f>, acc %.2f", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_63;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419590 == -1)
        {
LABEL_78:
          int v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v44);
          if (v44 != (char *)buf) {
            free(v44);
          }
LABEL_63:
          long long v34 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)(a1 + 464) = *(_OWORD *)a4;
          *(_OWORD *)(a1 + 480) = v34;
          long long v35 = *(_OWORD *)(a4 + 32);
          long long v36 = *(_OWORD *)(a4 + 48);
          long long v37 = *(_OWORD *)(a4 + 80);
          *(_OWORD *)(a1 + 528) = *(_OWORD *)(a4 + 64);
          *(_OWORD *)(a1 + 544) = v37;
          *(_OWORD *)(a1 + 496) = v35;
          *(_OWORD *)(a1 + 512) = v36;
          long long v38 = *(_OWORD *)(a4 + 96);
          long long v39 = *(_OWORD *)(a4 + 112);
          long long v40 = *(_OWORD *)(a4 + 128);
          *(_OWORD *)(a1 + 604) = *(_OWORD *)(a4 + 140);
          *(_OWORD *)(a1 + 576) = v39;
          *(_OWORD *)(a1 + 592) = v40;
          *(_OWORD *)(a1 + 560) = v38;
          return;
        }
LABEL_82:
        dispatch_once(&qword_102419590, &stru_1022D38B0);
        goto LABEL_78;
      }
      sub_1000F1268((double *)(a1 + 984), a4, a1 + 152);
      if (vabdd_f64(v29, *(double *)(a1 + 80)) < *(double *)(a4 + 20))
      {
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        BOOL v30 = qword_102419598;
        if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void *)(a4 + 4);
          uint64_t v32 = *(void *)(a4 + 12);
          uint64_t v33 = *(void *)(a4 + 20);
          *(_DWORD *)buf = 134284033;
          uint64_t v46 = v31;
          __int16 v47 = 2049;
          uint64_t v48 = v32;
          __int16 v49 = 2048;
          uint64_t v50 = v33;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring borderline location <%{private}+.8f, %{private}.8f>, acc %.2f", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_63;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419590 == -1) {
          goto LABEL_78;
        }
        goto LABEL_82;
      }
    }
    sub_10004A990(a1, a4, 1);
    if (*(int *)(a1 + 816) >= 1) {
      sub_10090B324(a1);
    }
    *(_DWORD *)(a1 + 820) = 0;
    return;
  }
  if (qword_102419590 != -1) {
    dispatch_once(&qword_102419590, &stru_1022D38B0);
  }
  id v13 = qword_102419598;
  if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a4 + 4);
    uint64_t v15 = *(void *)(a4 + 12);
    uint64_t v16 = *(void *)(a4 + 20);
    uint64_t v17 = *(void *)(a4 + 76);
    uint64_t v18 = *(void *)(a4 + 88);
    *(_DWORD *)buf = 134284545;
    uint64_t v46 = v14;
    __int16 v47 = 2049;
    uint64_t v48 = v15;
    __int16 v49 = 2048;
    uint64_t v50 = v16;
    __int16 v51 = 2048;
    uint64_t v52 = v17;
    __int16 v53 = 2048;
    uint64_t v54 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419590 == -1)
    {
LABEL_51:
      unsigned int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
      return;
    }
LABEL_80:
    dispatch_once(&qword_102419590, &stru_1022D38B0);
    goto LABEL_51;
  }
}

void sub_100007D68(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  ++*(_DWORD *)(a1 + 204);
  if (a3 && a3 != 5)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BD688);
    }
    uint64_t v19 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t buf = 68289282;
    __int16 v54 = 2082;
    v55 = "";
    __int16 v56 = 2050;
    uint64_t v57 = 8;
    double v20 = "{\"msg%{public}.0s\":\"Received non-location locationProvider notification, not harvesting\", \"subHarvester\""
          ":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_33:
    unsigned int v28 = v19;
    uint32_t v29 = 28;
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, v20, (uint8_t *)&buf, v29);
    return;
  }
  long long v5 = *a4;
  int v52 = *((_DWORD *)a4 + 4);
  double v6 = *(double *)((char *)a4 + 20);
  long long v50 = *(long long *)((char *)a4 + 28);
  long long v51 = v5;
  double v7 = *(double *)((char *)a4 + 44);
  long long v8 = *(long long *)((char *)a4 + 68);
  long long v48 = *(long long *)((char *)a4 + 52);
  v49[0] = v8;
  *(_OWORD *)((char *)v49 + 12) = a4[5];
  uint64_t v9 = *((unsigned int *)a4 + 24);
  long long v10 = *(long long *)((char *)a4 + 100);
  long long v11 = *(long long *)((char *)a4 + 116);
  long long v12 = *(long long *)((char *)a4 + 132);
  uint64_t v47 = *(void *)((char *)a4 + 148);
  long long v45 = v11;
  long long v46 = v12;
  long long v44 = v10;
  double v13 = *((double *)a4 + 57);
  double v14 = *((double *)a4 + 58);
  double v15 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  BOOL v16 = 0;
  BOOL v17 = v7 < 19.4444 && v7 >= 0.0;
  if (v9 == 1 && v13 != 0.0 && v6 >= 0.0 && v15 - *(double *)(a1 + 376) > 60.0)
  {
    if (*(unsigned char *)(a1 + 372)) {
      BOOL v18 = v17;
    }
    else {
      BOOL v18 = 0;
    }
    BOOL v16 = v18 || *(unsigned char *)(a1 + 373) != 0;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BD688);
  }
  int v21 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(unsigned __int8 *)(a1 + 373);
    double v23 = v15 - *(double *)(a1 + 376);
    int v24 = *(unsigned __int8 *)(a1 + 372);
    uint64_t buf = 68291587;
    __int16 v54 = 2082;
    v55 = "";
    __int16 v56 = 2050;
    uint64_t v57 = 8;
    __int16 v58 = 2049;
    uint64_t v59 = v9;
    __int16 v60 = 1025;
    int v61 = v22;
    __int16 v62 = 2049;
    double v63 = v13;
    __int16 v64 = 2049;
    double v65 = v14;
    __int16 v66 = 2049;
    double v67 = v23;
    __int16 v68 = 2049;
    uint64_t v69 = 0x404E000000000000;
    __int16 v70 = 1025;
    int v71 = v24;
    __int16 v72 = 1025;
    BOOL v73 = v17;
    __int16 v74 = 1025;
    BOOL v75 = v16;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onLocation\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"locationType\":%{private, location:CLLocationType}lld, \"allowingStationaryHarvest\":%{private}hhd, \"pressureValue\":\"%{private}f\", \"pressureStd\":\"%{private}f\", \"timeSinceLastSample_s\":\"%{private}.09f\", \"minGapTime_s\":\"%{private}.09f\", \"isDriving\":%{private}hhd, \"isValidSpeed\":%{private}hhd, \"willHarvest\":%{private}hhd}", (uint8_t *)&buf, 0x66u);
  }
  if (!v16) {
    return;
  }
  *(double *)(a1 + 376) = v15;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)) & 1) == 0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BD688);
    }
    uint64_t v19 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t buf = 68289282;
    __int16 v54 = 2082;
    v55 = "";
    __int16 v56 = 2050;
    uint64_t v57 = 8;
    double v20 = "{\"msg%{public}.0s\":\"harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLSubH"
          "arvesterIdentifier}lld}";
    goto LABEL_33;
  }
  if ((*(_DWORD *)(a1 + 368) & 0x80000000) != 0
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 368))
  {
    id v25 = objc_alloc_init((Class)CLPPressureCollectionRequest);
    [v25 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
    long long v32 = v51;
    int v33 = v52;
    double v34 = v6;
    long long v35 = v50;
    double v36 = v7;
    long long v37 = v48;
    *(_OWORD *)long long v38 = v49[0];
    *(_OWORD *)&v38[12] = *(_OWORD *)((char *)v49 + 12);
    int v39 = v9;
    uint64_t v43 = v47;
    long long v42 = v46;
    long long v41 = v45;
    long long v40 = v44;
    id v26 = [objc_alloc((Class)CLPLocation) initWithDaemonLocation:&v32];
    [v25 setPressureLocation:v26];

    id v27 = [objc_alloc((Class)CLPPressure) initWithPressure:v13 stdDeviation:v14 timestamp:v15];
    [v25 setPressure:v27];

    [objc_msgSend(*(id *)(a1 + 72), "archiveForHarvester:", 8) overwritePrimaryObject:v25];
    ++*(_DWORD *)(a1 + 208);
    sub_100D6B950(a1);
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BD688);
  }
  uint64_t v30 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(_DWORD *)(a1 + 368);
    uint64_t buf = 68289539;
    __int16 v54 = 2082;
    v55 = "";
    __int16 v56 = 2050;
    uint64_t v57 = 8;
    __int16 v58 = 1025;
    LODWORD(v59) = v31;
    double v20 = "{\"msg%{public}.0s\":\"max scans exceeded, not submitting\", \"subHarvester\":%{public, location:CLSubHarveste"
          "rIdentifier}lld, \"maxHarvestPointCount\":%{private}d}";
    unsigned int v28 = v30;
    uint32_t v29 = 34;
    goto LABEL_34;
  }
}

void sub_10000832C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    memset(&v9, 0, sizeof(v9));
    std::string::operator=(&v9, (const std::string *)(a1 + 56));
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v3 = sub_10017FE34(v2 + 24, 0, 0, (uint64_t)&v9);
    v3[1] = v2 + 24;
    uint64_t v4 = *(void *)(v2 + 24);
    *int v3 = v4;
    *(void *)(v4 + 8) = v3;
    *(void *)(v2 + 24) = v3;
    ++*(void *)(v2 + 40);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  else if (*(void *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2200);
    }
    long long v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        double v6 = (void *)*v6;
      }
      id v7 = [[objc_msgSend(*(id *)(a1 + 40), "localizedDescription") UTF8String];
      LODWORD(v9.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v9.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      WORD2(v9.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v9.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't launch application %s (%s)", (uint8_t *)&v9, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v9, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2200);
      }
      [objc_msgSend(*(id *)(a1 + 40), "localizedDescription") UTF8String];
      long long v8 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)_block_invoke", "%s\n", (const char *)v8);
      if (v8 != &v9) {
        free(v8);
      }
    }
  }
}

void sub_1000085A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

BOOL sub_1000085CC(unsigned char *a1)
{
  BOOL v2 = (+[SOSUtilities kappaTriggersEmergencySOS] & 1) != 0
    || +[SOSUtilities getKappaThirdPartyDisplayNameForApp] != 0;
  sub_1000E9354(v23);
  uint64_t v3 = sub_1000A6958();
  if (sub_100012960(v3, "Kappa", v23))
  {
    uint64_t v4 = (void *)sub_1000E9358((uint64_t)v23);
    id v5 = [v4 objectForKey:[NSString stringWithUTF8String:"martyShouldArm"]];
    if (v5) {
      unsigned int v6 = 0;
    }
    else {
      unsigned int v6 = v2;
    }
    if (v5 && v2) {
      unsigned int v6 = [[[v4 valueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyShouldArm")] BOOLValue];
    }
  }
  else
  {
    unsigned int v6 = v2;
  }
  if (!a1[316])
  {
    if (qword_1024887B8 != -1) {
      dispatch_once(&qword_1024887B8, &stru_10232C7B8);
    }
    if (qword_1024887C0)
    {
      a1[316] = off_1024793F0();
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      id v7 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        int v8 = a1[316];
        *(_DWORD *)uint64_t buf = 67109120;
        BOOL v35 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v21 = a1[316];
        int v24 = 67109120;
        BOOL v25 = v21;
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableMarty()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
  }
  if (!v6 || a1[313] || a1[315]) {
    int v9 = 0;
  }
  else {
    int v9 = a1[316];
  }
  LOBYTE(v24) = 0;
  sub_10006ACBC(buf, "MartyForceOn", (unsigned __int8 *)&v24, 0);
  int v10 = buf[1];
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v11 = v9 | v10;
  long long v12 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v13 = a1[313];
    int v14 = a1[315];
    int v15 = a1[316];
    *(_DWORD *)uint64_t buf = 67241216;
    BOOL v35 = v11 != 0;
    __int16 v36 = 1026;
    unsigned int v37 = v6;
    __int16 v38 = 1026;
    int v39 = v13;
    __int16 v40 = 1026;
    int v41 = v14;
    __int16 v42 = 1026;
    int v43 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "shouldEnableMarty, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v17 = a1[313];
    int v18 = a1[315];
    int v19 = a1[316];
    int v24 = 67241216;
    BOOL v25 = v11 != 0;
    __int16 v26 = 1026;
    unsigned int v27 = v6;
    __int16 v28 = 1026;
    int v29 = v17;
    __int16 v30 = 1026;
    int v31 = v18;
    __int16 v32 = 1026;
    int v33 = v19;
    double v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableMarty()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  sub_10013F3C4(v23);
  return v11 != 0;
}

void sub_100008A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100008AC4(uint64_t a1, unsigned char *a2, char a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  unsigned int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v7 = (char)*a2;
    int v8 = *(unsigned __int8 *)(a1 + 675);
    *(_DWORD *)uint64_t buf = 67240448;
    int v32 = v7;
    __int16 v33 = 1026;
    int v34 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Stopping all location providers that are worse than kDynamicLocationProvider %{public}d,KeepGpsOnWithAccessory,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  int v9 = *(void **)(a1 + 240);
  if (v9 != (void *)(a1 + 248))
  {
    char v10 = 0;
    while (1)
    {
      if (*((_DWORD *)v9 + 8))
      {
        int v11 = *((char *)v9 + 901);
        int v12 = (char)*a2;
        BOOL v13 = v11 == -1 || *((unsigned char *)v9 + 903) == 0;
        if (!v13 && v11 < v12) {
          break;
        }
      }
LABEL_48:
      __int16 v26 = (void *)v9[1];
      if (v26)
      {
        do
        {
          unsigned int v27 = v26;
          __int16 v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unsigned int v27 = (void *)v9[2];
          BOOL v13 = *v27 == (void)v9;
          int v9 = v27;
        }
        while (!v13);
      }
      int v9 = v27;
      if (v27 == (void *)(a1 + 248))
      {
        if (v10) {
          sub_10001F5E4(a1);
        }
        return;
      }
    }
    if (*((_DWORD *)v9 + 224) == 1)
    {
      if ((a3 & 1) == 0 && !*(unsigned char *)(a1 + 675))
      {
        int v18 = (unsigned char *)sub_10067B400();
        if (!v18)
        {
          LOBYTE(v12) = *a2;
          goto LABEL_33;
        }
        LOBYTE(v12) = *a2;
        if (!v18[1] || !*v18) {
          goto LABEL_33;
        }
      }
      if (v12 == 5)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        int v15 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v16 = (char)*a2;
          int v17 = *((char *)v9 + 901);
          *(_DWORD *)uint64_t buf = 67240448;
          int v32 = v16;
          __int16 v33 = 1026;
          int v34 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d,isAccessorySpecialCase,1", buf, 0xEu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_48;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_60;
        }
LABEL_62:
        dispatch_once(&qword_102419380, &stru_1022C17A0);
LABEL_60:
        int v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
        goto LABEL_48;
      }
    }
LABEL_33:
    if (*((_DWORD *)v9 + 224) != 1 || v12 != 3)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      double v20 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        int v21 = (char)*a2;
        int v22 = *((char *)v9 + 901);
        *(_DWORD *)uint64_t buf = 67240448;
        int v32 = v21;
        __int16 v33 = 1026;
        int v34 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "got better location provider,%{public}d,stopping worse location provider,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      sub_10067A748(a1, *((_DWORD *)v9 + 10));
      char v10 = 1;
      goto LABEL_48;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    double v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v24 = (char)*a2;
      int v25 = *((char *)v9 + 901);
      *(_DWORD *)uint64_t buf = 67240448;
      int v32 = v24;
      __int16 v33 = 1026;
      int v34 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_60;
    }
    goto LABEL_62;
  }
}

void sub_100009180(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onSimulatedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onSimulatedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1001A52B8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10000934C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000936C(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  int v10 = *a2;
  if (*a2 == 13) {
    *(unsigned char *)(a4 + 288) = *(unsigned char *)(a3 + 824);
  }
  sub_1001AB33C(*(void *)(a4 + 40), a1, v10, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100009548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100009568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F9038);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSignalEnvironmentProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F9038);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSignalEnvironmentProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000116B4(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10000971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000973C()
{
}

void sub_1000097F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100009830(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 64), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D3890);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeZoneManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D3890);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeZoneManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000072AC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000099EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100009A0C(uint64_t *a1)
{
  if (qword_102419620 != -1) {
    dispatch_once(&qword_102419620, &stru_102306598);
  }
  BOOL v2 = qword_102419628;
  if (os_log_type_enabled((os_log_t)qword_102419628, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (uint64_t *)*a1;
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v3 = a1;
    }
    int v4 = *((unsigned __int8 *)a1 + 24);
    int v5 = *((unsigned __int8 *)a1 + 25);
    int v6 = *((unsigned __int8 *)a1 + 26);
    int v7 = *((unsigned __int8 *)a1 + 27);
    int v8 = *((_DWORD *)a1 + 12);
    uint64_t v9 = a1[7];
    uint64_t v10 = a1[8];
    uint64_t v11 = a1[9];
    uint64_t v12 = a1[12];
    int v13 = *((_DWORD *)a1 + 20);
    int v14 = *((_DWORD *)a1 + 21);
    int v15 = *((_DWORD *)a1 + 26);
    int v16 = *((_DWORD *)a1 + 27);
    int v17 = *((unsigned __int8 *)a1 + 91);
    int v18 = *((unsigned __int8 *)a1 + 88);
    int v19 = *((unsigned __int8 *)a1 + 89);
    int v20 = *((unsigned __int8 *)a1 + 90);
    int v21 = *((unsigned __int8 *)a1 + 92);
    int v22 = *((unsigned __int8 *)a1 + 93);
    int v23 = *((unsigned __int8 *)a1 + 94);
    int v24 = *((unsigned __int8 *)a1 + 95);
    *(_DWORD *)uint64_t buf = 67115011;
    int v28 = 1;
    __int16 v29 = 2048;
    uint64_t v30 = 0;
    __int16 v31 = 2080;
    int v32 = v3;
    __int16 v33 = 1024;
    int v34 = v4;
    __int16 v35 = 1024;
    int v36 = v5;
    __int16 v37 = 1024;
    int v38 = v6;
    __int16 v39 = 1024;
    int v40 = v7;
    __int16 v41 = 1024;
    int v42 = v8;
    __int16 v43 = 2048;
    uint64_t v44 = v9;
    __int16 v45 = 2048;
    uint64_t v46 = v10;
    __int16 v47 = 2048;
    uint64_t v48 = v11;
    __int16 v49 = 1024;
    int v50 = v13;
    __int16 v51 = 2049;
    uint64_t v52 = v12;
    __int16 v53 = 1025;
    int v54 = v14;
    __int16 v55 = 1025;
    int v56 = v15;
    __int16 v57 = 1025;
    int v58 = v16;
    __int16 v59 = 1025;
    int v60 = v17;
    __int16 v61 = 1025;
    int v62 = v18;
    __int16 v63 = 1025;
    int v64 = v19;
    __int16 v65 = 1025;
    int v66 = v20;
    __int16 v67 = 1025;
    int v68 = v21;
    __int16 v69 = 1025;
    int v70 = v22;
    __int16 v71 = 1025;
    int v72 = v23;
    __int16 v73 = 1025;
    int v74 = v24;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#FenceMetrics metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,sinceLast,%{private}.1f,fenceType,%{private}d,fenceAPs,%{private}d,totalAPs,%{private}d,conservative,%{private}d,emergency,%{private}d,polygonal,%{private}d,throttled,%{private}d,inVehicle,%{private}d,driving,%{private}d,static,%{private}d,pedestrian,%{private}d", buf, 0xAAu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419620 != -1) {
      dispatch_once(&qword_102419620, &stru_102306598);
    }
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceAnalytics::submitMetric(const CLFenceAnalytics::LocationMonitorTrigger &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return AnalyticsSendEventLazy();
}

BOOL sub_100009E8C(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  BOOL v5 = sub_10002DCFC(a1, a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_100009EE0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100009EF4(uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(unsigned __int8 *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

BOOL sub_100009F60(unsigned char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double *a6, uint64_t *a7, uint64_t a8, uint64_t a9, double *a10, double *a11, uint64_t *a12, int a13)
{
  sub_10019CEC4((uint64_t)a1, a2, a8, a9);
  double v21 = sub_1000123E8((uint64_t)a1, a2, a9, *(double *)(a8 + 76));
  *a10 = v21;
  *(double *)(a2 + 160) = v21;
  double v22 = *(double *)(a9 + 384);
  if (v22 <= 0.0 || v22 >= 12.0 || *(unsigned char *)(a2 + 176) == 0)
  {
    a1[96] = 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    int v25 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "BaroAlt,newCalibSessionStart,attempt DEM and reference weather calibrations,fail", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  *(double *)(a2 + 120) = *a10;
  *a6 = *a10 - *(double *)(a2 + 168);
  *a7 = *(void *)(a9 + 384);
  *(double *)(a5 + 48) = *a11;
  *a11 = *(double *)(a2 + 64);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  __int16 v26 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v27 = *(void *)(a2 + 64);
    uint64_t v28 = *(void *)(a2 + 72);
    double v29 = *a6;
    uint64_t v30 = *a7;
    uint64_t v31 = *(void *)(a8 + 28);
    uint64_t v32 = *(void *)(a8 + 36);
    uint64_t v33 = *(void *)(a8 + 4);
    uint64_t v34 = *(void *)(a8 + 12);
    uint64_t v35 = *(void *)(a8 + 60);
    uint64_t v36 = *(void *)(a8 + 20);
    uint64_t v37 = *(void *)(a2 + 168);
    uint64_t v38 = *a12;
    uint64_t v40 = *(void *)(a2 + 256);
    uint64_t v39 = *(void *)(a2 + 264);
    uint64_t v41 = *(void *)(a3 + 8);
    uint64_t v42 = *(void *)(a2 + 96);
    uint64_t v43 = *(void *)(a2 + 104);
    *(_DWORD *)uint64_t buf = 134353153;
    uint64_t v50 = v27;
    __int16 v51 = 2050;
    uint64_t v52 = v28;
    __int16 v53 = 2049;
    double v54 = v29;
    __int16 v55 = 2050;
    uint64_t v56 = v30;
    __int16 v57 = 2049;
    uint64_t v58 = v31;
    __int16 v59 = 2050;
    uint64_t v60 = v32;
    __int16 v61 = 2049;
    uint64_t v62 = v33;
    __int16 v63 = 2049;
    uint64_t v64 = v34;
    __int16 v65 = 2050;
    uint64_t v66 = v35;
    __int16 v67 = 2050;
    uint64_t v68 = v36;
    __int16 v69 = 2049;
    uint64_t v70 = v37;
    __int16 v71 = 2050;
    uint64_t v72 = v38;
    __int16 v73 = 2049;
    uint64_t v74 = v39;
    __int16 v75 = 2050;
    uint64_t v76 = v40;
    __int16 v77 = 2049;
    uint64_t v78 = v41;
    __int16 v79 = 2049;
    uint64_t v80 = v42;
    __int16 v81 = 2049;
    uint64_t v82 = v43;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,calibrating,time,%{public}.lf,cfAbsTime,%{public}.3lf,baseAlt,%{private}.3lf,baseUnc,%{public}.3lf,alt,%{private}.3lf,altUnc,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,horUnc,%{public}.3lf,relAltOdom,%{private}.3lf,fTimeOfLastOdometerData,%{public}.4lf,pressure,%{private}.3lf,fTimeOfLastCMAltitudeData,%{public}.3lf,fBaroBiasUsingReferencePressure,%{private}.3lf,fReferencePressurePressure,%{private}.3lf,pressureUnc,%{private}.3lf", buf, 0xACu);
  }
  uint64_t v44 = sub_10013D1A0(115, 2);
  if (v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    uint64_t v44 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calibrateBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, BarometricAltitudeComputeAWDData &, double &, double &, CLDaemonLocation &, CLDaemonLocationPrivate &, double &, CFTimeInterval &, const CFTimeInterval &, const int)", "%s\n", v47);
    if (v47 != (char *)buf) {
      free(v47);
    }
  }
  if (!*(unsigned char *)(a2 + 112) || !sub_10187C33C(v44, (double *)a2))
  {
    a1[96] = 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v46 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "BaroAlt,newCalibSessionStart,no valid device pressure or ref pressure feature disabled", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_38;
    }
LABEL_37:
    dispatch_once(&qword_102419380, &stru_102343F08);
LABEL_38:
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calibrateBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, BarometricAltitudeComputeAWDData &, double &, double &, CLDaemonLocation &, CLDaemonLocationPrivate &, double &, CFTimeInterval &, const CFTimeInterval &, const int)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
    return 0;
  }
  return (sub_10187C584(a1, a2, a3, a4, a11, a13, a8) & 1) != 0;
}

uint64_t sub_10000A5B4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_10000A648(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onLocationDerivedNotificationBaro", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onLocationDerivedNotificationBaro\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100022FD0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10000A804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10000A824(uint64_t a1, _OWORD *a2)
{
  id v4 = objc_alloc((Class)CLLocation);
  long long v5 = a2[7];
  v10[6] = a2[6];
  v10[7] = v5;
  v11[0] = a2[8];
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v6 = a2[3];
  v10[2] = a2[2];
  v10[3] = v6;
  long long v7 = a2[5];
  v10[4] = a2[4];
  v10[5] = v7;
  long long v8 = a2[1];
  v10[0] = *a2;
  v10[1] = v8;
  return [*(id *)(a1 + 1072) updateCurrentLocation:[v4 init]];
}

BOOL sub_10000A8A4(unsigned char *a1)
{
  unsigned int v2 = +[SOSUtilities kappaTriggersEmergencySOS];
  if (+[SOSUtilities getKappaThirdPartyDisplayNameForApp])
  {
    int v3 = 1;
  }
  else
  {
    int v3 = v2;
  }
  if (!a1[316])
  {
    if (qword_1024887B8 != -1) {
      dispatch_once(&qword_1024887B8, &stru_10232C7B8);
    }
    if (qword_1024887C0)
    {
      a1[316] = off_1024793F0();
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      id v4 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        int v5 = a1[316];
        *(_DWORD *)uint64_t buf = 67109120;
        BOOL v31 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v18 = a1[316];
        int v20 = 67109120;
        BOOL v21 = v18;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableKappa()", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
  }
  if (!v3 || a1[313] || a1[315]) {
    int v6 = 0;
  }
  else {
    int v6 = a1[316];
  }
  LOBYTE(v20) = 0;
  sub_10006ACBC(buf, "KappaForceOn", (unsigned __int8 *)&v20, 0);
  int v7 = buf[1];
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v8 = v6 | v7;
  uint64_t v9 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v10 = a1[313];
    int v11 = a1[315];
    int v12 = a1[316];
    *(_DWORD *)uint64_t buf = 67241216;
    BOOL v31 = v8 != 0;
    __int16 v32 = 1026;
    int v33 = v3;
    __int16 v34 = 1026;
    int v35 = v10;
    __int16 v36 = 1026;
    int v37 = v11;
    __int16 v38 = 1026;
    int v39 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "shouldEnableKappa, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v14 = a1[313];
    int v15 = a1[315];
    int v16 = a1[316];
    int v20 = 67241216;
    BOOL v21 = v8 != 0;
    __int16 v22 = 1026;
    int v23 = v3;
    __int16 v24 = 1026;
    int v25 = v14;
    __int16 v26 = 1026;
    int v27 = v15;
    __int16 v28 = 1026;
    int v29 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableKappa()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return v8 != 0;
}

void sub_10000ACC8(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 240);
  if (v2 == (void *)(a1 + 248))
  {
    int v3 = 0;
  }
  else
  {
    do
    {
      int v3 = *((unsigned char *)v2 + 903) != 0;
      if (*((unsigned char *)v2 + 903)) {
        break;
      }
      id v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          int v5 = v4;
          id v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          unsigned int v2 = v5;
        }
        while (!v6);
      }
      unsigned int v2 = v5;
    }
    while (v5 != (void *)(a1 + 248));
  }
  if (*(unsigned __int8 *)(a1 + 670) != v3)
  {
    *(unsigned char *)(a1 + 670) = v3;
    sub_1000DB3D4((uint64_t)v9);
    unsigned __int8 v12 = *(unsigned char *)(a1 + 670);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    int v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Notifying clients of providers active update to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v17 = 67240192;
      int v18 = v12;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::checkActiveProviders()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(_DWORD *)uint64_t buf = 11;
    (*(void (**)(uint64_t, uint8_t *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v9, 0, 0xFFFFFFFFLL, 0);

    if (v15) {
      sub_1000DB0A0(v15);
    }
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v11) {
      sub_1000DB0A0(v11);
    }
    if (v10) {
      sub_1000DB0A0(v10);
    }
  }
}

void sub_10000AF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10000AFA8(void *a1)
{
  id Weak = objc_loadWeak((id *)(a1[4] + 16));
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];

  return [Weak onAvengerAdvertisement:v3 reconciledInformation:v4];
}

void sub_10000AFE8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022AEFE0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10000B03C()
{
}

void sub_10000B0F0(uint64_t a1, std::string *a2)
{
  sub_10000FF54(a2, (uint64_t)v18);
  id v3 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLClientManager"];
  sub_100089AE0((char *)v4, (long long *)v18);
  [v3 markReceivingLocationInformation:sub_1000376D4((long long *)v4)];
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_10000B23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

BOOL sub_10000B260(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 248);
  unsigned int v2 = (double *)(a1 + 256);
  if (v1 == (double *)(a1 + 256)) {
    return 1;
  }
  uint64_t v3 = qword_102419540;
  double v4 = 1.79769313e308;
  do
  {
    if (v3 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    char v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((void *)v1 + 5);
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldLocalGPSBeRestricted,list\", \"accuracy\":\"%{public}f\"}", buf, 0x1Cu);
      uint64_t v3 = qword_102419540;
    }
    else
    {
      uint64_t v3 = -1;
    }
    if (v1[5] < v4) {
      double v4 = v1[5];
    }
    char v7 = (double *)*((void *)v1 + 1);
    if (v7)
    {
      do
      {
        int v8 = v7;
        char v7 = *(double **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v8 = (double *)*((void *)v1 + 2);
        BOOL v9 = *(void *)v8 == (void)v1;
        uint64_t v1 = v8;
      }
      while (!v9);
    }
    uint64_t v1 = v8;
  }
  while (v8 != v2);
  return v4 >= 100.0;
}

void sub_10000B404(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 201))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v33 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      int v49 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v49;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v50);
      if (v50 != buf) {
        free(v50);
      }
    }
    if (*a3 == 5)
    {
      long long v35 = *(_OWORD *)a4;
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a1 + 248) = v35;
      long long v36 = *(_OWORD *)(a4 + 32);
      long long v37 = *(_OWORD *)(a4 + 48);
      long long v38 = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 328) = v38;
      *(_OWORD *)(a1 + 280) = v36;
      *(_OWORD *)(a1 + 296) = v37;
      long long v39 = *(_OWORD *)(a4 + 96);
      long long v40 = *(_OWORD *)(a4 + 112);
      long long v41 = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
      *(_OWORD *)(a1 + 360) = v40;
      *(_OWORD *)(a1 + 376) = v41;
      *(_OWORD *)(a1 + 344) = v39;
    }
    return;
  }
  if (*a3 != 5)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v42 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v43 = *a3;
      uint64_t v44 = sub_10008A168(*a3);
      *(_DWORD *)uint64_t buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v43;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, unknown notificaiton, %d, %s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    unsigned int v45 = *a3;
    uint64_t v46 = sub_10008A168(*a3);
    *(_DWORD *)__p = 67109378;
    *(_DWORD *)&__p[4] = v45;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = v46;
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v47);
LABEL_66:
    if (v47 != buf) {
      free(v47);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 428))
  {
    double v7 = (*(double (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
    double v8 = *(double *)(a1 + 408);
    BOOL v9 = (_OWORD *)(a1 + 248);
    int v10 = (double *)(a1 + 268);
    double v11 = *(double *)(a1 + 268);
    BOOL v12 = v11 > *(double *)(a4 + 20) && v11 > 100.0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    __int16 v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 408);
      uint64_t v14 = *(void *)(a1 + 416);
      sub_1000AB340(a4);
      uint64_t v16 = (v59 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 134218755;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v14;
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %{private}s", buf, 0x26u);
      if (SBYTE3(v59) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v52 = *(void *)(a1 + 408);
      uint64_t v51 = *(void *)(a1 + 416);
      sub_1000AB340(a4);
      if (v56 >= 0) {
        __int16 v53 = &v55;
      }
      else {
        __int16 v53 = v55;
      }
      *(_DWORD *)__p = 134218755;
      *(void *)&__p[4] = v52;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v12;
      __int16 v58 = 2048;
      uint64_t v59 = v51;
      __int16 v60 = 2081;
      __int16 v61 = v53;
      double v54 = (char *)_os_log_send_and_compose_impl();
      if (v56 < 0) {
        operator delete(v55);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
    long long v17 = *(_OWORD *)(a4 + 16);
    *BOOL v9 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 264) = v17;
    long long v18 = *(_OWORD *)(a4 + 32);
    long long v19 = *(_OWORD *)(a4 + 48);
    long long v20 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 328) = v20;
    *(_OWORD *)(a1 + 280) = v18;
    *(_OWORD *)(a1 + 296) = v19;
    long long v21 = *(_OWORD *)(a4 + 96);
    long long v22 = *(_OWORD *)(a4 + 112);
    long long v23 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 360) = v22;
    *(_OWORD *)(a1 + 376) = v23;
    *(_OWORD *)(a1 + 344) = v21;
    int v24 = v7 - v8 >= 600.0 || v12;
    if (v24 == 1 && *v10 >= 0.0 && *v10 <= 5000.0)
    {
      *(void *)uint64_t buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10015F5DC;
      *(void *)&buf[24] = &unk_10230CDD8;
      *(void *)&buf[32] = a1;
      uint64_t v63 = a1 + 248;
      double v64 = v7;
      sub_10015E8B0(a1, (uint64_t)"predownloadTilesForLocation", (uint64_t)buf);
      sub_100033CE0(a1, v7);
      sub_1001B4D58(a1, a1 + 248);
      *(double *)(a1 + 408) = v7;
    }
    if (*(unsigned char *)(a1 + 200))
    {
      int v25 = v7 - *(double *)(a1 + 416) >= 330.0 || v12;
      if (v25 == 1)
      {
        long long v26 = *(_OWORD *)(a4 + 16);
        *BOOL v9 = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 264) = v26;
        long long v27 = *(_OWORD *)(a4 + 32);
        long long v28 = *(_OWORD *)(a4 + 48);
        long long v29 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 328) = v29;
        *(_OWORD *)(a1 + 280) = v27;
        *(_OWORD *)(a1 + 296) = v28;
        long long v30 = *(_OWORD *)(a4 + 96);
        long long v31 = *(_OWORD *)(a4 + 112);
        long long v32 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 360) = v31;
        *(_OWORD *)(a1 + 376) = v32;
        *(_OWORD *)(a1 + 344) = v30;
        sub_101058C10(a1, (uint64_t)"onLocationNotification", a1 + 248, 0);
        *(double *)(a1 + 416) = v7;
      }
    }
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v48 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, ignore leech when LS off", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    *(_WORD *)__p = 0;
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v47);
    goto LABEL_66;
  }
}

void sub_10000C1F8(uint64_t a1, uint64_t a2)
{
  if (sub_10019FB5C(a1, a2))
  {
    if (sub_100124E04(a2, a1 + 120))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      double v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,feedCachedReferenceLocation,repeated cached position ", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_16:
          uint64_t v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::feedCachedReferenceLocation(const GNSS::DaemonLocation)", "%s\n", v6);
          if (v6 != (char *)buf) {
            free(v6);
          }
          return;
        }
LABEL_51:
        dispatch_once(&qword_1024193D0, &stru_10232F680);
        goto LABEL_16;
      }
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 136) = v7;
      long long v8 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      long long v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 200) = v10;
      *(_OWORD *)(a1 + 152) = v8;
      *(_OWORD *)(a1 + 168) = v9;
      long long v11 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      long long v13 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 260) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 232) = v12;
      *(_OWORD *)(a1 + 248) = v13;
      *(_OWORD *)(a1 + 216) = v11;
      memcpy((void *)(a1 + 280), (const void *)(a2 + 160), 0x201uLL);
      uint64_t v14 = *(void *)(a2 + 680);
      uint64_t v15 = *(void *)(a2 + 688);
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 800) = v14;
      uint64_t v16 = *(std::__shared_weak_count **)(a1 + 808);
      *(void *)(a1 + 808) = v15;
      if (v16) {
        sub_1000DB0A0(v16);
      }
      long long v17 = *(_OWORD *)(a2 + 696);
      long long v18 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 848) = v18;
      *(_OWORD *)(a1 + 816) = v17;
      long long v19 = *(_OWORD *)(a2 + 744);
      long long v20 = *(_OWORD *)(a2 + 760);
      long long v21 = *(_OWORD *)(a2 + 776);
      *(void *)(a1 + 909) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 880) = v20;
      *(_OWORD *)(a1 + 896) = v21;
      *(_OWORD *)(a1 + 864) = v19;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      long long v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *(_DWORD *)(a1 + 216);
        uint64_t v24 = *(void *)(a1 + 124);
        uint64_t v25 = *(void *)(a1 + 132);
        uint64_t v26 = *(void *)(a1 + 148);
        uint64_t v27 = *(void *)(a1 + 140);
        uint64_t v28 = *(void *)(a1 + 156);
        *(_DWORD *)uint64_t buf = 68290563;
        int v34 = 0;
        __int16 v35 = 2082;
        long long v36 = "";
        __int16 v37 = 1026;
        int v38 = v23;
        __int16 v39 = 2049;
        uint64_t v40 = v24;
        __int16 v41 = 2049;
        uint64_t v42 = v25;
        __int16 v43 = 2050;
        uint64_t v44 = v26;
        __int16 v45 = 2050;
        uint64_t v46 = v27;
        __int16 v47 = 2050;
        uint64_t v48 = v28;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,feedCachedReferenceLocation\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x4Au);
      }
      if ((*(_DWORD *)(a1 + 1140) - 3) <= 1 && sub_1015ACA6C(a1))
      {
        if (*(unsigned char *)(a1 + 920))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          long long v29 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Disabling WiFi/Cell location notification", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232F680);
            }
            long long v31 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::feedCachedReferenceLocation(const GNSS::DaemonLocation)", "%s\n", v31);
            if (v31 != (char *)buf) {
              free(v31);
            }
          }
          sub_1015AD468(a1);
        }
        if (*(unsigned char *)(a1 + 921))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          long long v30 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Disabling Gnss location notification", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232F680);
            }
            long long v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::feedCachedReferenceLocation(const GNSS::DaemonLocation)", "%s\n", v32);
            if (v32 != (char *)buf) {
              free(v32);
            }
          }
          sub_1015ADE18(a1);
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    char v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,feedCachedReferenceLocation,Invalid reference location", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_51;
    }
  }
}

uint64_t sub_10000C89C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {

    unsigned int v2 = *(std::__shared_weak_count **)(v1 + 1168);
    if (v2) {
      sub_1000DB0A0(v2);
    }
    if (*(char *)(v1 + 927) < 0) {
      operator delete(*(void **)(v1 + 904));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 808);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    double v4 = *(std::__shared_weak_count **)(v1 + 688);
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete();
  }
  return result;
}

void sub_10000C930(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if ((*a2 & 0xFFFFFFFE) == 2)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      long long v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v81 = 1024;
        LODWORD(v82) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)__int16 v67 = 67109376;
      *(_DWORD *)&v67[4] = v16;
      *(_WORD *)&v67[8] = 1024;
      *(_DWORD *)&v67[10] = v18;
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(&v76);
    uint64_t v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v66);
    sub_100165AD4((uint64_t)&v76, a2, a3, a4, (uint64_t *)v66);
    v79 |= 2u;
    uint64_t v28 = v78;
    if (!v78) {
      operator new();
    }
    *(_DWORD *)(v78 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x10000u;
    uint64_t v30 = *(void *)(v29 + 128);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 36) |= 1u;
    *(_DWORD *)(v30 + 8) = v31;
    unsigned int v32 = sub_100169B90(a6);
    if (!sub_100169B58(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9437, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 36);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 36) = v33 | 0xA;
    uint64_t v34 = *(void *)(v30 + 24);
    if (!v34) {
      operator new();
    }
    int v35 = *(_DWORD *)(v34 + 60);
    *(_OWORD *)(v34 + 8) = *(_OWORD *)a7;
    *(_WORD *)(v34 + 33) = *(_WORD *)(a7 + 16);
    *(_DWORD *)(v34 + 60) = v35 | 0x33;
    unsigned int v36 = sub_100197698((int *)(a7 + 20));
    if (sub_100165F14(v36))
    {
      *(_DWORD *)(v34 + 60) |= 0x100u;
      *(_DWORD *)(v34 + 48) = v36;
      unsigned int v37 = sub_1001974C0((int *)(a7 + 24));
      if (sub_10016E644(v37))
      {
        *(_DWORD *)(v34 + 60) |= 0x200u;
        *(_DWORD *)(v34 + 52) = v37;
        int v38 = sub_100168A44(a1);
        if (*(unsigned char *)(a1 + 8))
        {
          int v39 = v38;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          uint64_t v40 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            sub_101522B64((int *)a2, v67);
            if (SBYTE3(v69) >= 0) {
              __int16 v41 = v67;
            }
            else {
              __int16 v41 = *(unsigned char **)v67;
            }
            __int16 v57 = v41;
            LODWORD(v59[0]) = a3->i32[0];
            sub_101522E48((int *)v59, v64);
            if (v65 >= 0) {
              uint64_t v42 = v64;
            }
            else {
              uint64_t v42 = (void **)v64[0];
            }
            int v61 = *a4;
            __int16 v43 = __p;
            sub_101522E48(&v61, __p);
            if (v63 < 0) {
              __int16 v43 = (void **)__p[0];
            }
            uint64_t v44 = sub_10008A168(*a6);
            uint64_t v45 = sub_10016BA10();
            double v46 = sub_10018202C(v45);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v39;
            __int16 v81 = 2080;
            uint64_t v82 = v57;
            __int16 v83 = 2080;
            int v84 = v42;
            __int16 v85 = 2080;
            v86 = v43;
            __int16 v87 = 2080;
            int v88 = v44;
            __int16 v89 = 2050;
            double v90 = v46;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x3Au);
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (SBYTE3(v69) < 0) {
              operator delete(*(void **)v67);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022BD0F8);
            }
            sub_101522B64((int *)a2, v64);
            if (v65 >= 0) {
              uint64_t v50 = v64;
            }
            else {
              uint64_t v50 = (void **)v64[0];
            }
            int v61 = a3->i32[0];
            uint64_t v51 = __p;
            sub_101522E48(&v61, __p);
            if (v63 < 0) {
              uint64_t v51 = (void **)__p[0];
            }
            int v58 = *a4;
            sub_101522E48(&v58, v59);
            if (v60 >= 0) {
              uint64_t v52 = v59;
            }
            else {
              uint64_t v52 = (void **)v59[0];
            }
            __int16 v53 = sub_10008A168(*a6);
            uint64_t v54 = sub_10016BA10();
            double v55 = sub_10018202C(v54);
            *(_DWORD *)__int16 v67 = 67110402;
            *(_DWORD *)&v67[4] = v39;
            *(_WORD *)&v67[8] = 2080;
            *(void *)&v67[10] = v50;
            __int16 v68 = 2080;
            __int16 v69 = v51;
            __int16 v70 = 2080;
            __int16 v71 = v52;
            __int16 v72 = 2080;
            __int16 v73 = v53;
            __int16 v74 = 2050;
            double v75 = v55;
            char v56 = (char *)_os_log_send_and_compose_impl();
            if (v60 < 0) {
              operator delete(v59[0]);
            }
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v56);
            if (v56 != (char *)&buf) {
              free(v56);
            }
          }
        }
        sub_1001687EC(&v76);
        return;
      }
      __int16 v47 = "::CLP::LogEntry::PrivateData::PipelineOperatingMode_IsValid(value)";
      int v48 = 9388;
      int v49 = "set_pipeline_operating_mode";
    }
    else
    {
      __int16 v47 = "::CLP::LogEntry::PrivateData::OperatingMode_IsValid(value)";
      int v48 = 9365;
      int v49 = "set_operating_mode";
    }
    __assert_rtn(v49, "CLPLocationController.pb.h", v48, v47);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  long long v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    sub_101522B64((int *)a2, &buf);
    long long v21 = SBYTE3(v84) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)__int16 v67 = 136315138;
    *(void *)&v67[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,unsupported message type,%s", v67, 0xCu);
    if (SBYTE3(v84) < 0) {
      operator delete(buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_101522B64((int *)a2, v67);
    if (SBYTE3(v69) >= 0) {
      long long v22 = v67;
    }
    else {
      long long v22 = *(unsigned char **)v67;
    }
    int v76 = 136315138;
    __int16 v77 = v22;
    long long v19 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v69) < 0) {
      operator delete(*(void **)v67);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v19);
    if (v19 != (char *)&buf) {
      goto LABEL_54;
    }
  }
}

void sub_10000D284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_10000D3AC(unsigned char *a1)
{
  unsigned int v2 = (void *)sub_100007264(a1 + 161);
  values = v2;
  keys = @"kInHomeCountryKey";
  CFDictionaryRef v3 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v4 = v3;
  (*(void (**)(unsigned char *, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256))(a1, @"kInHomeCountryLegacyNotification", v3);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_10000D8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_10000D8F0(uint64_t a1, uint64_t a2, int *a3, int8x16_t *a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1001BAEB4((void *)(a1 + 120), a3, (uint64_t)a4, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v8);
    sub_1000478E0(a3, a4, (uint64_t)v8, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v8);
  }
}

void sub_10000D980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_10000D994(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022C58B8);
  }
  long long v7 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v9 = sub_10016C458();
    int v10 = *a3;
    uint64_t v11 = a4 + 8;
    if (*(char *)(a4 + 31) < 0) {
      uint64_t v11 = *(void *)(a4 + 8);
    }
    *(_DWORD *)uint64_t buf = 134349827;
    CFAbsoluteTime v28 = Current;
    __int16 v29 = 2050;
    double v30 = v9;
    __int16 v31 = 1026;
    int v32 = v10;
    __int16 v33 = 2081;
    uint64_t v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,machContTime,%{public}.1lf,onApp,ReceivedAppNotification,%{public}d,%{private}s", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022C58B8);
    }
    CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
    double v13 = sub_10016C458();
    int v14 = *a3;
    uint64_t v15 = a4 + 8;
    if (*(char *)(a4 + 31) < 0) {
      uint64_t v15 = *(void *)(a4 + 8);
    }
    int v19 = 134349827;
    CFAbsoluteTime v20 = v12;
    __int16 v21 = 2050;
    double v22 = v13;
    __int16 v23 = 1026;
    int v24 = v14;
    __int16 v25 = 2081;
    uint64_t v26 = v15;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAppNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (*(char *)(a4 + 31) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a4 + 8);
    uint64_t v18 = *(void *)(a4 + 24);
  }
  sub_100198934(a1, (unsigned __int8 *)__p, (*a3 - 1) < 2);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10000DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000DC68(uint64_t a1)
{
  *(void *)a1 = off_1022D3D88;
  unsigned int v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *unsigned int v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10000DCD8(int a1, int a2, char *__s)
{
  sub_100134750(&__p, __s);
  CLConnectionMessage::CLConnectionMessage();
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_10000DD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000DD4C(uint64_t a1)
{
  *(void *)a1 = off_102320B68;
  unsigned int v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *unsigned int v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10000DDBC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

void sub_10000DE64(unsigned char *a1, uint64_t a2, double a3)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102300550);
  }
  int v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setLocalGPSRestricted,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStreamingAwareLocationProviderStateMachine::setLocalGPSRestricted(BOOL, CFAbsoluteTime)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a1[92] != a2)
  {
    if (a1[93])
    {
      a1[92] = a2;
      (*(void (**)(unsigned char *, uint64_t, double))(*(void *)a1 + 136))(a1, a2, a3);
    }
  }
}

BOOL sub_10000E068(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5, double a6)
{
  int v12 = *(unsigned __int8 *)(a3 + 609);
  if ((v12 - 2) < 2)
  {
    if (*(unsigned char *)(a3 + 610)) {
      BOOL v13 = *(_DWORD *)(a3 + 56) == 2;
    }
    else {
      BOOL v13 = 0;
    }
    if (!v13) {
      goto LABEL_10;
    }
LABEL_9:
    BOOL v14 = (*(_DWORD *)(a3 + 88) - 8) < 0xFFFFFFFE;
    goto LABEL_11;
  }
  if (v12 == 1 && *(_DWORD *)(a3 + 56) == 2) {
    goto LABEL_9;
  }
LABEL_10:
  BOOL v14 = 0;
LABEL_11:
  *a4 = v14;
  double v15 = *(double *)(a2 + 52);
  BOOL v17 = v15 > 0.0 && v15 < 1.0 && *(double *)(a2 + 44) < 4.46;
  if (*(unsigned char *)(a3 + 576) == 2)
  {
    double v18 = *(double *)(a3 + 592);
    BOOL v20 = v18 <= 1.0 && (*(void *)(a3 + 592) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v18 < 0.8) {
      BOOL v20 = 0;
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  *a5 = v20;
  int v21 = sub_1000A4F84(a1);
  int v22 = v21;
  BOOL v23 = 0;
  if (!*(unsigned char *)(a2 + 152) && v17 && !*(unsigned char *)(a3 + 512))
  {
    BOOL v23 = *a4;
    if (!*a4)
    {
      if (v21)
      {
        if (*(unsigned char *)(a1 + 3481)) {
          BOOL v23 = *a5;
        }
        else {
          BOOL v23 = 0;
        }
      }
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    BOOL v25 = *a4;
    BOOL v26 = *a5;
    int v27 = *(_DWORD *)(a3 + 56);
    int v28 = *(_DWORD *)(a3 + 88);
    int v29 = *(_DWORD *)(a3 + 92);
    uint64_t v30 = *(void *)(a2 + 52);
    uint64_t v31 = *(void *)(a2 + 44);
    int v32 = *(unsigned __int8 *)(a3 + 576);
    uint64_t v33 = *(void *)(a3 + 592);
    int v34 = *(unsigned __int8 *)(a1 + 3481);
    uint64_t v35 = *(void *)(a2 + 76);
    uint64_t v36 = *(void *)(a2 + 4);
    uint64_t v37 = *(void *)(a2 + 12);
    uint64_t v38 = *(void *)(a2 + 60);
    int v39 = *(unsigned __int8 *)(a2 + 152);
    int v40 = *(unsigned __int8 *)(a3 + 512);
    *(_DWORD *)uint64_t buf = 67244801;
    BOOL v44 = v23;
    __int16 v45 = 1026;
    BOOL v46 = v25;
    __int16 v47 = 1026;
    BOOL v48 = v26;
    __int16 v49 = 1026;
    int v50 = v27;
    __int16 v51 = 1026;
    int v52 = v28;
    __int16 v53 = 1026;
    int v54 = v29;
    __int16 v55 = 2050;
    uint64_t v56 = v30;
    __int16 v57 = 2050;
    uint64_t v58 = v31;
    __int16 v59 = 1026;
    int v60 = v22;
    __int16 v61 = 1026;
    int v62 = v32;
    __int16 v63 = 2050;
    uint64_t v64 = v33;
    __int16 v65 = 1026;
    int v66 = v34;
    __int16 v67 = 1026;
    BOOL v68 = v17;
    __int16 v69 = 2050;
    uint64_t v70 = v35;
    __int16 v71 = 2049;
    uint64_t v72 = v36;
    __int16 v73 = 2049;
    uint64_t v74 = v37;
    __int16 v75 = 2050;
    uint64_t v76 = v38;
    __int16 v77 = 1026;
    int v78 = v39;
    __int16 v79 = 1026;
    int v80 = v40;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,appropriatecheck,pass,%{public}d,mapMatched,%{public}d,CNOutdoor,%{public}d,matchQuality,%{public}d,matchFormOfWay,%{public}d,matchRoadClass,%{public}d,speedAccuracy,%{public}.3lf,speed,%{public}.3lf,CnOutdoorCalTriggerEnabled,%{public}d,CNPosContextState,%{public}d,CNPosContextProb,%{public}.3lf,isNotInAVisit,%{public}d,isSpeedSlow,%{public}d,cfAbsTime,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,fromSimulationController,%{public}d,isSimulatedOrSpoofed,%{public}d", buf, 0x90u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isAppropriateToCalibrateBaro(const CFTimeInterval, const CLDaemonLocation &, const CLDaemonLocationPrivate &, BOOL &, BOOL &)", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  *(unsigned char *)(a1 + 1336) = v23;
  *(unsigned char *)(a1 + 1337) = *a4;
  *(unsigned char *)(a1 + 1338) = *a5;
  if (*a4)
  {
    ++*(_DWORD *)(a1 + 3512);
    ++*(_DWORD *)(a1 + 3544);
    ++*(_DWORD *)(a1 + 3576);
  }
  if (*a5)
  {
    ++*(_DWORD *)(a1 + 3516);
    ++*(_DWORD *)(a1 + 3548);
    ++*(_DWORD *)(a1 + 3580);
  }
  if (v23)
  {
    ++*(_DWORD *)(a1 + 3520);
    ++*(_DWORD *)(a1 + 3552);
    ++*(_DWORD *)(a1 + 3584);
    *(double *)(a1 + 3608) = a6;
  }
  return v23;
}

uint64_t sub_10000E5C4(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x151uLL);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  long long v4 = *(_OWORD *)(a2 + 476);
  long long v5 = *(_OWORD *)(a2 + 492);
  long long v6 = *(_OWORD *)(a2 + 508);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 492) = v5;
  *(_OWORD *)(a1 + 508) = v6;
  *(_OWORD *)(a1 + 476) = v4;
  long long v7 = *(_OWORD *)(a2 + 412);
  long long v8 = *(_OWORD *)(a2 + 428);
  long long v9 = *(_OWORD *)(a2 + 460);
  *(_OWORD *)(a1 + 444) = *(_OWORD *)(a2 + 444);
  *(_OWORD *)(a1 + 460) = v9;
  *(_OWORD *)(a1 + 412) = v7;
  *(_OWORD *)(a1 + 428) = v8;
  long long v10 = *(_OWORD *)(a2 + 348);
  long long v11 = *(_OWORD *)(a2 + 364);
  long long v12 = *(_OWORD *)(a2 + 396);
  *(_OWORD *)(a1 + 380) = *(_OWORD *)(a2 + 380);
  *(_OWORD *)(a1 + 396) = v12;
  *(_OWORD *)(a1 + 348) = v10;
  *(_OWORD *)(a1 + 364) = v11;
  uint64_t v13 = *(void *)(a2 + 536);
  uint64_t v14 = *(void *)(a2 + 544);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 536) = v13;
  double v15 = *(std::__shared_weak_count **)(a1 + 544);
  *(void *)(a1 + 544) = v14;
  if (v15) {
    sub_1000DB0A0(v15);
  }
  long long v16 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = v16;
  return a1;
}

void sub_10000E678(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023178F0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023178F0);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000135E4(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10000E844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000E864(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 100);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_55;
  }
  if ((v3 & 1) == 0)
  {
    int v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_102489D38 + 8);
  }
  int v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(unsigned char *)(v6 + 36))
  {
    int v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0) {
      v8 += 9;
    }
    if ((v7 & 4) != 0) {
      int v7 = v8 + 9;
    }
    else {
      int v7 = v8;
    }
  }
  *(_DWORD *)(v6 + 32) = v7;
  int v4 = v7 + 2;
  int v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    long long v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 10;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      int v3 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      int v10 = 1;
    }
    v4 += v10 + 1;
  }
LABEL_21:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_23;
    }
LABEL_31:
    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_102489D38 + 24);
    }
    __int16 v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008471C(v15, a2);
    int v17 = (int)v16;
    if (v16 >= 0x80) {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
    }
    else {
      int v18 = 1;
    }
    v4 += v17 + v18 + 1;
    int v3 = *(_DWORD *)(a1 + 100);
    if ((v3 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_102489D38 + 16);
  }
  long long v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000843B0(v11, a2);
  int v13 = (int)v12;
  if (v12 >= 0x80) {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
  }
  else {
    int v14 = 1;
  }
  v4 += v13 + v14 + 1;
  int v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 8) != 0) {
    goto LABEL_31;
  }
LABEL_23:
  if ((v3 & 0x10) != 0)
  {
LABEL_37:
    uint64_t v19 = *(void *)(a1 + 40);
    if (!v19) {
      uint64_t v19 = *(void *)(qword_102489D38 + 40);
    }
    BOOL v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181B00(v19, a2);
    int v21 = (int)v20;
    if (v20 >= 0x80) {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
    }
    else {
      int v22 = 1;
    }
    v4 += v21 + v22 + 1;
    int v3 = *(_DWORD *)(a1 + 100);
  }
LABEL_43:
  unsigned int v23 = v4 + 2;
  if ((v3 & 0x20) == 0) {
    unsigned int v23 = v4;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t v5 = v23 + 9;
  }
  else {
    uint64_t v5 = v23;
  }
  if ((v3 & 0x80) != 0)
  {
    int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if ((v24 & 0x80000000) != 0)
    {
      int v25 = 10;
    }
    else if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      int v3 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      int v25 = 1;
    }
    uint64_t v5 = (v5 + v25 + 1);
  }
LABEL_55:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_97;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v26 = *(void *)(a1 + 56);
    if (!v26) {
      uint64_t v26 = *(void *)(qword_102489D38 + 56);
    }
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000846D8(v26);
    int v28 = (int)v27;
    if (v27 >= 0x80) {
      int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
    }
    else {
      int v29 = 1;
    }
    uint64_t v5 = (v5 + v28 + v29 + 1);
    int v3 = *(_DWORD *)(a1 + 100);
    if ((v3 & 0x200) == 0)
    {
LABEL_58:
      if ((v3 & 0x400) == 0) {
        goto LABEL_59;
      }
      goto LABEL_76;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_58;
  }
  uint64_t v30 = *(void *)(a1 + 64);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_102489D38 + 64);
  }
  int v31 = *(unsigned __int8 *)(v30 + 28);
  int v32 = (v31 << 31 >> 31) & 9;
  if ((v31 & 2) != 0) {
    v32 += 9;
  }
  if (*(unsigned char *)(v30 + 28)) {
    int v33 = v32;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(v30 + 24) = v33;
  uint64_t v5 = (v5 + v33 + 2);
  int v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 0x400) == 0)
  {
LABEL_59:
    if ((v3 & 0x800) == 0) {
      goto LABEL_60;
    }
LABEL_82:
    uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if ((v38 & 0x80000000) != 0)
    {
      int v39 = 11;
    }
    else if (v38 >= 0x80)
    {
      int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      int v39 = 2;
    }
    uint64_t v5 = (v39 + v5);
    if ((v3 & 0x1000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_88;
  }
LABEL_76:
  uint64_t v34 = *(void *)(a1 + 80);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_102489D38 + 80);
  }
  uint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003E8668(v34, a2);
  int v36 = (int)v35;
  if (v35 >= 0x80) {
    int v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2);
  }
  else {
    int v37 = 1;
  }
  uint64_t v5 = (v5 + v36 + v37 + 1);
  int v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 0x800) != 0) {
    goto LABEL_82;
  }
LABEL_60:
  if ((v3 & 0x1000) == 0) {
    goto LABEL_97;
  }
LABEL_88:
  uint64_t v40 = *(void *)(a1 + 88);
  if (!v40) {
    uint64_t v40 = *(void *)(qword_102489D38 + 88);
  }
  int v41 = *(unsigned __int8 *)(v40 + 36);
  if (*(unsigned char *)(v40 + 36))
  {
    int v42 = (v41 << 31 >> 31) & 9;
    if ((v41 & 2) != 0) {
      v42 += 9;
    }
    if ((v41 & 4) != 0) {
      int v41 = v42 + 9;
    }
    else {
      int v41 = v42;
    }
  }
  *(_DWORD *)(v40 + 32) = v41;
  uint64_t v5 = (v5 + v41 + 2);
LABEL_97:
  *(_DWORD *)(a1 + 96) = v5;
  return v5;
}

id sub_10000EBE4(uint64_t a1, const char *a2)
{
  if (a2) {
    int v3 = a2;
  }
  else {
    int v3 = "null";
  }
  sub_100543CF0(a1 + 184);
  ++*(_DWORD *)(a1 + 2620);
  sub_100036190((void *)a1, (void **)"refresh");
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F9C68);
  }
  int v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@CellFlow, refresh, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::refreshCellState(const char *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [(((id)a1 + 32)->vendor)->proxyForService:@"CLTelephonyService"]->syncgetRefreshCellMonitor;
}

void sub_10000EDDC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1001801AC(exception, a1);
}

void sub_10000EE24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10000EE38(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = vabdd_f64(Current, *(double *)(a1 + 376));
  if (v5 >= 60.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C5170);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 512);
      int v10 = *(_DWORD *)(a1 + 352);
      uint64_t v11 = *(void *)(a1 + 432);
      uint64_t v12 = *(void *)(a1 + 184);
      uint64_t v13 = *(void *)(a1 + 264);
      uint64_t v14 = *(void *)(a1 + 304);
      uint64_t v15 = *(void *)(a1 + 344);
      *(_DWORD *)uint64_t buf = 136317186;
      double v18 = *(double *)&a2;
      __int16 v19 = 2048;
      uint64_t v20 = v9;
      __int16 v21 = 1024;
      int v22 = v10;
      __int16 v23 = 2048;
      uint64_t v24 = v11;
      __int16 v25 = 2048;
      uint64_t v26 = v12;
      __int16 v27 = 2048;
      uint64_t v28 = v13;
      __int16 v29 = 2048;
      uint64_t v30 = v14;
      __int16 v31 = 2048;
      uint64_t v32 = v15;
      __int16 v33 = 2048;
      double v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf", buf, 0x58u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C5170);
      }
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNetworkLocationProvider::resetRetryCounters(const char *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *(_DWORD *)(a1 + 352) = 0;
    *(double *)(a1 + 360) = Current;
    *(double *)(a1 + 376) = Current;
    sub_1006E2918(a1, (uint64_t)"resetRetryCounters");
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C5170);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NETWORK: resetRetryCounters, sinceLastReset, %.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C5170);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNetworkLocationProvider::resetRetryCounters(const char *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

BOOL sub_10000F238(uint64_t a1, int a2, int *a3, long long *a4)
{
  sub_1000DB3D4((uint64_t)v12);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  int v8 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    int v9 = (*(uint64_t (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, v12);
    uint64_t buf = 68289282;
    __int16 v20 = 2082;
    __int16 v21 = "";
    __int16 v22 = 1026;
    int v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"cached location\", \"found\":%{public}d}", (uint8_t *)&buf, 0x18u);
  }
  BOOL v10 = sub_1000AD0C8(a1, a2, a3, a4);

  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  return v10;
}

void sub_10000F3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10000F3F4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 56), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234C7E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v54 = 1;
    int v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNearbydInterfaceManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C7E0);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)uint64_t v70 = 0;
      *(_WORD *)&v70[4] = 2082;
      *(void *)&v70[6] = "";
      *(_WORD *)&v70[14] = 2082;
      *(void *)&v70[16] = "activity";
      *(_WORD *)&v70[24] = 2050;
      *(void *)&v70[26] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNearbydInterfaceManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v54 = 0;
  }
  if (!*(unsigned char *)a4)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    uint64_t v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,gizmo is not nearby.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_35;
    }
LABEL_72:
    dispatch_once(&qword_102419530, &stru_10234C7C0);
LABEL_35:
    LOWORD(v55) = 0;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
    goto LABEL_36;
  }
  double v9 = sub_10016C458();
  double v10 = *(double *)(a4 + 48);
  double v11 = sub_1000F1648((double *)(a4 + 336), *(double *)(a3 + 4), *(double *)(a3 + 12), *(double *)(a4 + 180), *(double *)(a4 + 188), 0.0);
  if (*a2 != 5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10234C800);
    }
    char v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *a2;
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)uint64_t v70 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,Got unknown notification %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10234C800);
    }
    int v18 = *a2;
    int v55 = 67109120;
    LODWORD(v56) = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
LABEL_36:
    if (v19 != (char *)buf) {
      free(v19);
    }
    goto LABEL_61;
  }
  double v12 = v11;
  if ((sub_1000E6DB4(a3) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    __int16 v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,#warning.lastReceivedLocation is invalid.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_61;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
  double v13 = v9 - v10;
  if (*(double *)(a3 + 44) >= 11.0)
  {
    BOOL v14 = (*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1;
    if ((*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1 && v13 >= 1800.0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      __int16 v21 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v22 = *(void *)(a3 + 4);
        uint64_t v23 = *(void *)(a3 + 12);
        uint64_t v24 = *(void *)(a3 + 20);
        uint64_t v25 = *(void *)(a3 + 76);
        uint64_t v26 = *(void *)(a3 + 88);
        int v27 = *(_DWORD *)(a3 + 84);
        uint64_t v28 = *(void *)(a3 + 44);
        *(_DWORD *)uint64_t buf = 134285057;
        *(void *)uint64_t v70 = v22;
        *(_WORD *)&v70[8] = 2049;
        *(void *)&v70[10] = v23;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v24;
        *(_WORD *)&v70[28] = 2048;
        *(void *)&v70[30] = v25;
        __int16 v71 = 2048;
        uint64_t v72 = v26;
        __int16 v73 = 1024;
        int v74 = v27;
        __int16 v75 = 2048;
        uint64_t v76 = v28;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,moving vehicle,lat,%{private}+.6f,lon,%{private}.6f,acc, %.2f,timestamp,%.2f,lifespan,%.2f,confidence,%d,speed,%.3f", buf, 0x44u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_65;
      }
      goto LABEL_71;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  if (v13 < 3600.0 || v14) {
    goto LABEL_61;
  }
  if (v12 > 1000.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    __int16 v29 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v30 = *(void *)(a3 + 4);
      uint64_t v31 = *(void *)(a3 + 12);
      uint64_t v32 = *(void *)(a3 + 20);
      uint64_t v33 = *(void *)(a3 + 76);
      uint64_t v34 = *(void *)(a3 + 88);
      int v35 = *(_DWORD *)(a3 + 84);
      uint64_t v36 = *(void *)(a3 + 44);
      *(_DWORD *)uint64_t buf = 134285057;
      *(void *)uint64_t v70 = v30;
      *(_WORD *)&v70[8] = 2049;
      *(void *)&v70[10] = v31;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = v32;
      *(_WORD *)&v70[28] = 2048;
      *(void *)&v70[30] = v33;
      __int16 v71 = 2048;
      uint64_t v72 = v34;
      __int16 v73 = 1024;
      int v74 = v35;
      __int16 v75 = 2048;
      uint64_t v76 = v36;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,non static,lat,%{private}+.6f,lon,%{private}.6f,acc,%.2f,timestamp, %.2f,lifespan,%.2f,confidence,%d,speed,%.3f", buf, 0x44u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1)
    {
LABEL_65:
      uint64_t v45 = *(void *)(a3 + 4);
      uint64_t v46 = *(void *)(a3 + 12);
      uint64_t v47 = *(void *)(a3 + 20);
      uint64_t v48 = *(void *)(a3 + 76);
      uint64_t v49 = *(void *)(a3 + 88);
      int v50 = *(_DWORD *)(a3 + 84);
      uint64_t v51 = *(void *)(a3 + 44);
      int v55 = 134285057;
      uint64_t v56 = v45;
      __int16 v57 = 2049;
      uint64_t v58 = v46;
      __int16 v59 = 2048;
      uint64_t v60 = v47;
      __int16 v61 = 2048;
      uint64_t v62 = v48;
      __int16 v63 = 2048;
      uint64_t v64 = v49;
      __int16 v65 = 1024;
      int v66 = v50;
      __int16 v67 = 2048;
      uint64_t v68 = v51;
      int v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
LABEL_55:
      long long v37 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a4 + 176) = *(_OWORD *)a3;
      *(_OWORD *)(a4 + 192) = v37;
      long long v38 = *(_OWORD *)(a3 + 32);
      long long v39 = *(_OWORD *)(a3 + 48);
      long long v40 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a4 + 240) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a4 + 256) = v40;
      *(_OWORD *)(a4 + 208) = v38;
      *(_OWORD *)(a4 + 224) = v39;
      long long v41 = *(_OWORD *)(a3 + 96);
      long long v42 = *(_OWORD *)(a3 + 112);
      long long v43 = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a4 + 316) = *(_OWORD *)(a3 + 140);
      *(_OWORD *)(a4 + 288) = v42;
      *(_OWORD *)(a4 + 304) = v43;
      *(_OWORD *)(a4 + 272) = v41;
      sub_1019EEF08(a4);
      goto LABEL_61;
    }
LABEL_71:
    dispatch_once(&qword_102419530, &stru_10234C7C0);
    goto LABEL_65;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234C7C0);
  }
  BOOL v44 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,device is static.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
LABEL_61:
  if (v54) {
    os_activity_scope_leave(&state);
  }
}

void sub_10000FF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000FF54(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  if (_os_feature_enabled_impl())
  {
    *(_DWORD *)(a2 + 95) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 163) = 0u;
    char v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      int64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = a1->__r_.__value_.__l.__size_;
    }
    if (v4 >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    if (size >= 1)
    {
      int v7 = (char *)v6 + size;
      int v8 = v6;
      do
      {
        double v9 = (char *)memchr(v8, 58, size);
        if (!v9) {
          break;
        }
        if (*v9 == 58)
        {
          if (v9 == v7) {
            break;
          }
          std::string::size_type v10 = v9 - (char *)v6;
          if (v10 == -1) {
            break;
          }
          std::string::basic_string(&v15, a1, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
          sub_1000293F8(&v15, (uint64_t)v17);
          sub_1000B6DC8(a2, (long long *)v17);
          if (v28 < 0) {
            operator delete(__p);
          }
          if (v26 < 0) {
            operator delete(v25);
          }
          if (v24 < 0) {
            operator delete(v23);
          }
          if (v22 < 0) {
            operator delete(v21);
          }
          if (v20 < 0) {
            operator delete(v19);
          }
          if (v18 < 0) {
            operator delete(*(void **)&v17[24]);
          }
          if ((v17[23] & 0x80000000) != 0) {
            operator delete(*(void **)v17);
          }
          if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v15.__r_.__value_.__l.__data_);
          }
          std::string::basic_string((std::string *)v17, a1, 0, v10, (std::allocator<char> *)&v15);
          if (*(char *)(a2 + 23) < 0) {
            operator delete(*(void **)a2);
          }
          *(_OWORD *)a2 = *(_OWORD *)v17;
          *(void *)(a2 + 16) = *(void *)&v17[16];
          return;
        }
        int v8 = (std::string *)(v9 + 1);
        int64_t size = v7 - (char *)v8;
      }
      while (v7 - (char *)v8 >= 1);
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10232C318);
    }
    double v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      double v12 = (a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (char **)a1
          : (char **)a1->__r_.__value_.__r.__words[0];
      *(void *)int v17 = 68289282;
      *(_WORD *)&v17[8] = 2082;
      *(void *)&v17[10] = "";
      *(_WORD *)&v17[18] = 2082;
      *(void *)&v17[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multi-User clientKey doesn't have userName!\", \"clientKey\":%{public, location:escape_only}s}", v17, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232C318);
      }
    }
    double v13 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v14 = a1;
      }
      else {
        BOOL v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(void *)int v17 = 68289282;
      *(_WORD *)&v17[8] = 2082;
      *(void *)&v17[10] = "";
      *(_WORD *)&v17[18] = 2082;
      *(void *)&v17[20] = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multi-User clientKey doesn't have userName!", "{\"msg%{public}.0s\":\"#Multi-User clientKey doesn't have userName!\", \"clientKey\":%{public, location:escape_only}s}", v17, 0x1Cu);
    }
  }
  else
  {
    sub_1000293F8(a1, a2);
  }
}

void sub_1000102E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1000064D0(v14);
  _Unwind_Resume(a1);
}

BOOL sub_100010310(uint64_t a1, int a2, unsigned int *a3, uint64_t *a4)
{
  BOOL v6 = sub_1000AC4D0(a1, a2, a3, a4);
  if (v6) {
    sub_100E8DFA4(a1, a3);
  }
  if (!*a3)
  {
    *(_DWORD *)uint64_t buf = 0;
    unsigned int v7 = sub_1001072EC(a1, (int *)buf, 1);
    int v8 = *(_DWORD *)(a1 + 3308);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    double v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 3308);
      *(_DWORD *)uint64_t buf = 67240448;
      int v14 = v10;
      __int16 v15 = 1026;
      unsigned int v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updateRegistrationInfoForClient,prevNumberOfActiveGNSSClients,%{public}d,numberOfActiveGpsClients,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (v8 != v7) {
      sub_100E8DFF8(a1, v7 > *(_DWORD *)(a1 + 3308), v7, (int *)a3);
    }
  }
  return v6;
}

void sub_100010CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100010D2C(void *a1)
{
  *a1 = off_1022B3C88;
  sub_10013F3C4(a1 + 9);
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_100010DE0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000A8C10((uint64_t)&v6, a3);
  [a4 onAppMonitorNotification:v5 data:&v6];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
}

void sub_100010E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100010EC4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  if (v4 == 6)
  {
    BOOL v5 = sub_100009E8C(*(void *)(a1 + 40), a2);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10005BA4C();
      unsigned int v7 = (void **)__p[0];
      char v8 = "yes";
      if (v29 >= 0) {
        unsigned int v7 = __p;
      }
      if (v5) {
        char v8 = "no";
      }
      *(_DWORD *)uint64_t buf = 136380931;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v21 = 2080;
      char v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MovingApDetector, CellOnly, received location: %{private}s, success: %s", buf, 0x16u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      sub_10005BA4C();
      int v17 = *(unsigned char **)buf;
      char v18 = "yes";
      if (v23 >= 0) {
        int v17 = buf;
      }
      if (v5) {
        char v18 = "no";
      }
      int v24 = 136380931;
      uint64_t v25 = v17;
      __int16 v26 = 2080;
      int v27 = v18;
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      if (v23 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMovingApDetector::receiveLocation(CLDaemonLocation &)", "%s\n", v19);
      if (v19 != (char *)__p) {
        free(v19);
      }
    }
    int v4 = *(_DWORD *)(a2 + 96);
  }
  if (v4 != 1 && (v4 != 6 || !sub_1001B1B20()[1])) {
    return 0;
  }
  BOOL v9 = sub_100009E8C(*(void *)(a1 + 24), a2);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  char v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10005BA4C();
    double v11 = (void **)__p[0];
    char v12 = "yes";
    if (v29 >= 0) {
      double v11 = __p;
    }
    if (v9) {
      char v12 = "no";
    }
    *(_DWORD *)uint64_t buf = 136380931;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v21 = 2080;
    char v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MovingApDetector, received location: %{private}s, success: %s", buf, 0x16u);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    sub_10005BA4C();
    double v13 = *(unsigned char **)buf;
    char v14 = "yes";
    if (v23 >= 0) {
      double v13 = buf;
    }
    if (v9) {
      char v14 = "no";
    }
    int v24 = 136380931;
    uint64_t v25 = v13;
    __int16 v26 = 2080;
    int v27 = v14;
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    if (v23 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMovingApDetector::receiveLocation(CLDaemonLocation &)", "%s\n", v15);
    if (v15 != (char *)__p) {
      free(v15);
    }
  }
  return v9;
}

BOOL sub_10001136C(const void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v4 == TypeID)
  {
    sub_100017FD4(a2, (CFDictionaryRef)a1);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      CFTypeID v10 = CFGetTypeID(a1);
      __int16 v11 = 2050;
      CFTypeID v12 = CFDictionaryGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      CFGetTypeID(a1);
      CFDictionaryGetTypeID();
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v4 == TypeID;
}

uint64_t sub_100011590(uint64_t a1, double *a2)
{
  CLMotionActivity::getInit((uint64_t *)v15 + 1, (CLMotionActivity *)a1);
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    return 0;
  }
  BOOL v5 = (_OWORD *)(*(void *)(*(void *)(a1 + 8) + 8 * ((v4 + *(void *)(a1 + 32) - 1) / 0x1CuLL))
                + 144 * ((v4 + *(void *)(a1 + 32) - 1) % 0x1CuLL));
  v15[0] = *v5;
  long long v6 = v5[4];
  long long v8 = v5[1];
  long long v7 = v5[2];
  v15[3] = v5[3];
  v15[4] = v6;
  v15[1] = v8;
  v15[2] = v7;
  long long v9 = v5[8];
  long long v11 = v5[5];
  long long v10 = v5[6];
  v15[7] = v5[7];
  v15[8] = v9;
  v15[5] = v11;
  v15[6] = v10;
  if (*a2 >= 0.0)
  {
    uint64_t v13 = sub_10016BA10();
    int v16 = 1;
    double v14 = sub_10016BA54(v13, &v16);
    if (*(double *)v15 < 0.0 || v14 >= *(double *)v15 && v14 - *(double *)v15 > *a2) {
      return 0;
    }
  }
  LODWORD(result) = CLMotionActivity::isCycling((CLMotionActivity *)((char *)v15 + 8));
  if (SHIDWORD(v15[0]) > 0) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_1000116B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4 = *(double *)(a4 + 20);
  if (v4 < 0.0 || v4 > 2500.0 || !sub_1000EF68C(*(double *)(a4 + 4), *(double *)(a4 + 12))) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 128);
  if (!v7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F9058);
    }
    CFTypeID v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,CLSE,onLocationNotification,null CSE pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F9058);
      }
      LOWORD(v35) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return;
  }
  uint64_t v34 = 0;
  int v9 = *(_DWORD *)(a1 + 120);
  int v8 = *(_DWORD *)(a1 + 124);
  double v10 = *(double *)(a4 + 4);
  long double v11 = *(double *)(a4 + 12);
  if (*(char *)(a1 + 479) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 456), *(void *)(a1 + 464));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 456);
    uint64_t v33 = *(void *)(a1 + 472);
  }
  *(_DWORD *)(a1 + 120) = sub_100193EA8(v7, (const char *)__p, (unsigned char *)(a1 + 156), v10, v11);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 124) = 1;
  sub_100197924(a1);
  if (!*(unsigned char *)(a1 + 488) || *(double *)(a4 + 20) >= 50.0 || *(_DWORD *)(a1 + 120) != 3) {
    goto LABEL_26;
  }
  uint64_t v14 = *(void *)(a1 + 480);
  if (v14)
  {
    int v15 = sub_1013FD600(v14, *(double *)(a4 + 4), *(double *)(a4 + 12));
    if (v15)
    {
      *(_DWORD *)(a1 + 120) = v15;
      *(_DWORD *)(a1 + 124) = 2;
    }
    sub_101402798(*(void *)(a1 + 480), a4, 1);
LABEL_26:
    int v16 = 0;
    switch(*(_DWORD *)(a1 + 492))
    {
      case 0xFFFFFFFF:
        break;
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
        int v16 = *(_DWORD *)(a1 + 492);
        goto LABEL_28;
      default:
LABEL_28:
        *(_DWORD *)(a1 + 120) = v16;
        break;
    }
    switch(*(_DWORD *)(a1 + 496))
    {
      case 0xFFFFFFFF:
        int v17 = *(_DWORD *)(a1 + 124);
        break;
      case 1:
        int v17 = 1;
        goto LABEL_34;
      case 2:
        int v17 = 2;
LABEL_34:
        *(_DWORD *)(a1 + 124) = v17;
        break;
      default:
        int v17 = 0;
        *(_DWORD *)(a1 + 124) = 0;
        break;
    }
    if (v9 != *(_DWORD *)(a1 + 120) || v8 != v17)
    {
      LODWORD(v34) = *(_DWORD *)(a1 + 120);
      HIDWORD(v34) = v17;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F9058);
      }
      char v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v19 = *(_DWORD *)(a1 + 120);
        int v20 = *(_DWORD *)(a1 + 124);
        *(_DWORD *)uint64_t buf = 67240960;
        int v44 = v9;
        __int16 v45 = 1026;
        int v46 = v19;
        __int16 v47 = 1026;
        int v48 = v8;
        __int16 v49 = 1026;
        int v50 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d,fromSignalEnvFidelityLevel,%{public}d,toSignalEnvFidelityLevel,%{public}d", buf, 0x1Au);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F9058);
      }
      int v26 = *(_DWORD *)(a1 + 120);
      int v27 = *(_DWORD *)(a1 + 124);
      int v35 = 67240960;
      int v36 = v9;
      __int16 v37 = 1026;
      int v38 = v26;
      __int16 v39 = 1026;
      int v40 = v8;
      __int16 v41 = 1026;
      int v42 = v27;
      char v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
      if (v28 == (char *)buf) {
        goto LABEL_42;
      }
      goto LABEL_60;
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F9058);
  }
  __int16 v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#Error,CLSE,onLocationNotification,null HRSE pointer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F9058);
    }
    LOWORD(v35) = 0;
    char v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  int v22 = *(_DWORD *)(a1 + 124);
  if (v9 != *(_DWORD *)(a1 + 120) || v8 != v22)
  {
    LODWORD(v34) = *(_DWORD *)(a1 + 120);
    HIDWORD(v34) = v22;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F9058);
    }
    char v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(_DWORD *)(a1 + 120);
      int v25 = *(_DWORD *)(a1 + 124);
      *(_DWORD *)uint64_t buf = 67240960;
      int v44 = v9;
      __int16 v45 = 1026;
      int v46 = v24;
      __int16 v47 = 1026;
      int v48 = v8;
      __int16 v49 = 1026;
      int v50 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d,fromSignalEnvFidelityLevel,%{public}d,toSignalEnvFidelityLevel,%{public}d", buf, 0x1Au);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_42;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F9058);
    }
    int v30 = *(_DWORD *)(a1 + 120);
    int v31 = *(_DWORD *)(a1 + 124);
    int v35 = 67240960;
    int v36 = v9;
    __int16 v37 = 1026;
    int v38 = v30;
    __int16 v39 = 1026;
    int v40 = v8;
    __int16 v41 = 1026;
    int v42 = v31;
    char v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
    if (v28 == (char *)buf) {
      goto LABEL_42;
    }
LABEL_60:
    free(v28);
LABEL_42:
    *(_DWORD *)uint64_t buf = 0;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v34, 1, 0xFFFFFFFFLL, 0);
  }
}

void sub_100011EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100011FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100011FF0(uint64_t a1)
{
  if (*(void *)(a1 + 2360))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelTrackingWake", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::cancelTrackingWake()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_1001B0AE4(*(void *)(a1 + 2360));
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2360), (uint64_t)&__p);
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: ignoring, cancelTrackingWake, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::cancelTrackingWake()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return 0.0;
}

void sub_10001232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void sub_100012364(uint64_t a1)
{
  sub_1000E9420(&off_102307AD0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1000123D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1000123E8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v8 = *(float *)(a3 + 316);
  double v9 = fabs(v8);
  if ((*(_DWORD *)(a3 + 312) - 1) > 0xFFFFFFFD || v9 <= 2.22044605e-16)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    long double v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,invalid undulation model, use last known best undulation", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      char v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLBarometricAltimeterCore::getGroundAltInWgs84(const CLBaroAltEstimatorInput &, const CFAbsoluteTime, const CLDaemonLocationPrivate &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    sub_1001862F4(*(void *)(a1 + 544), (void *)(a1 + 144), (int *)(a1 + 152), a4);
    double v8 = *(double *)(a1 + 144);
  }
  double v12 = *(double *)(a3 + 376);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  double v13 = v12 + v8;
  uint64_t v14 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = *(void *)(a2 + 64);
    uint64_t v16 = *(void *)(a3 + 376);
    double v17 = *(float *)(a3 + 316);
    int v18 = *(_DWORD *)(a3 + 312);
    uint64_t v19 = *(void *)(a1 + 144);
    int v20 = *(_DWORD *)(a1 + 152);
    *(_DWORD *)uint64_t buf = 134350593;
    uint64_t v25 = v15;
    __int16 v26 = 2049;
    double v27 = v13;
    __int16 v28 = 2049;
    uint64_t v29 = v16;
    __int16 v30 = 2050;
    double v31 = v17;
    __int16 v32 = 1026;
    int v33 = v18;
    __int16 v34 = 2050;
    uint64_t v35 = v19;
    __int16 v36 = 1026;
    int v37 = v20;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,compute wgs84 altitude for calibration,time,%{public}.lf,groundAltitudeWgs84,%{private}.3lf,groundAltitude,%{private}.3lf,undulationIn,%{public}.3lf,undulationInModel,%{public}d,storedUndulation,%{public}.3lf,storedUndulationModel,%{public}d", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLBarometricAltimeterCore::getGroundAltInWgs84(const CLBaroAltEstimatorInput &, const CFAbsoluteTime, const CLDaemonLocationPrivate &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  return v13;
}

uint64_t sub_100012848(uint64_t a1, double *a2)
{
  CLMotionActivity::getInit((uint64_t *)v15 + 1, (CLMotionActivity *)a1);
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    return 0;
  }
  BOOL v5 = (_OWORD *)(*(void *)(*(void *)(a1 + 8) + 8 * ((v4 + *(void *)(a1 + 32) - 1) / 0x1CuLL))
                + 144 * ((v4 + *(void *)(a1 + 32) - 1) % 0x1CuLL));
  v15[0] = *v5;
  long long v6 = v5[4];
  long long v8 = v5[1];
  long long v7 = v5[2];
  v15[3] = v5[3];
  v15[4] = v6;
  v15[1] = v8;
  v15[2] = v7;
  long long v9 = v5[8];
  long long v11 = v5[5];
  long long v10 = v5[6];
  v15[7] = v5[7];
  v15[8] = v9;
  v15[5] = v11;
  v15[6] = v10;
  if (*a2 >= 0.0)
  {
    uint64_t v13 = sub_10016BA10();
    int v16 = 1;
    double v14 = sub_10016BA54(v13, &v16);
    if (*(double *)v15 < 0.0 || v14 >= *(double *)v15 && v14 - *(double *)v15 > *a2) {
      return 0;
    }
  }
  LODWORD(result) = CLMotionActivity::isTypePedestrian();
  if (SHIDWORD(v15[0]) > 0) {
    return result;
  }
  else {
    return 0;
  }
}

BOOL sub_100012960(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_100186344(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

void sub_1000129D4(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4)
{
  [*(id *)a1 silo];
  if ((*a3 - 2) > 4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2200);
    }
    __int16 v28 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *a3;
      *(_DWORD *)uint64_t buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = sub_1000A7F94(a3);
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning unhandled app monitor notification, %d, %s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2200);
      }
      int v32 = *a3;
      *(_DWORD *)int v40 = 67109378;
      *(_DWORD *)&v40[4] = v32;
      *(_WORD *)&v40[8] = 2080;
      *(void *)&v40[10] = sub_1000A7F94(a3);
      int v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  else if (*(void *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2200);
    }
    long long v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a3;
      long long v9 = sub_1000A7F94(a3);
      unsigned int v10 = *a4;
      if (*((char *)a4 + 31) >= 0) {
        long long v11 = a4 + 2;
      }
      else {
        long long v11 = (unsigned int *)*((void *)a4 + 1);
      }
      *(_DWORD *)uint64_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v9;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v10;
      __int16 v44 = 2080;
      __int16 v45 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "notification, %d, %s, pid, %d, bundleId, %s", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2200);
      }
      int v34 = *a3;
      uint64_t v35 = sub_1000A7F94(a3);
      unsigned int v36 = *a4;
      if (*((char *)a4 + 31) >= 0) {
        int v37 = a4 + 2;
      }
      else {
        int v37 = (unsigned int *)*((void *)a4 + 1);
      }
      *(_DWORD *)int v40 = 67109890;
      *(_DWORD *)&v40[4] = v34;
      *(_WORD *)&v40[8] = 2080;
      *(void *)&v40[10] = v35;
      *(_WORD *)&v40[18] = 1024;
      *(_DWORD *)&v40[20] = v36;
      __int16 v41 = 2080;
      int v42 = v37;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    uint64_t v39 = 0;
    double v12 = +[RBSProcessIdentifier identifierWithPid:*a4];
    id v13 = +[RBSProcessHandle handleForIdentifier:v12 error:&v39];
    if (v12 && v13)
    {
      CFStringRef v14 = (const __CFString *)[v13 bundle].identifier;
      memset(buf, 0, sizeof(buf));
      if (v14)
      {
        sub_1000FECE0(v14, (uint64_t)v40);
        *(_OWORD *)uint64_t buf = *(_OWORD *)v40;
        *(void *)&buf[16] = *(void *)&v40[16];
        uint64_t v15 = v40[23];
        if (v40[23] < 0) {
          uint64_t v15 = *(void *)&v40[8];
        }
        if (v15)
        {
          uint64_t v16 = *(void *)(a1 + 32);
          if (v16 != a1 + 24)
          {
            char v17 = 0;
            do
            {
              double v18 = *(double *)(v16 + 40);
              if (v18 + 5.0 >= CFAbsoluteTimeGetCurrent())
              {
                uint64_t v21 = buf[23];
                if ((buf[23] & 0x80u) == 0) {
                  uint64_t v22 = buf[23];
                }
                else {
                  uint64_t v22 = *(void *)&buf[8];
                }
                uint64_t v23 = *(unsigned __int8 *)(v16 + 39);
                int v24 = (char)v23;
                if ((v23 & 0x80u) != 0) {
                  uint64_t v23 = *(void *)(v16 + 24);
                }
                if (v22 != v23) {
                  goto LABEL_37;
                }
                if (v24 >= 0) {
                  uint64_t v25 = (unsigned __int8 *)(v16 + 16);
                }
                else {
                  uint64_t v25 = *(unsigned __int8 **)(v16 + 16);
                }
                if ((buf[23] & 0x80) != 0)
                {
                  BOOL v27 = memcmp(*(const void **)buf, v25, *(size_t *)&buf[8]) == 0;
                }
                else
                {
                  if (buf[23])
                  {
                    __int16 v26 = buf;
                    while (*v26 == *v25)
                    {
                      ++v26;
                      ++v25;
                      if (!--v21) {
                        goto LABEL_36;
                      }
                    }
LABEL_37:
                    uint64_t v19 = *(void *)(v16 + 8);
                    goto LABEL_38;
                  }
LABEL_36:
                  BOOL v27 = 1;
                }
                if (v17 & 1 | !v27)
                {
                  uint64_t v19 = *(void *)(v16 + 8);
                  if (!v27) {
                    goto LABEL_38;
                  }
                  goto LABEL_21;
                }
                char v17 = 1;
                sub_100CF8D94((id *)a1, a4, (const void **)buf, 1);
              }
              uint64_t v19 = *(void *)(v16 + 8);
LABEL_21:
              int v20 = *(void **)v16;
              v20[1] = v19;
              **(void **)(v16 + 8) = v20;
              --*(void *)(a1 + 40);
              sub_10017FDF0(a1 + 24, (void **)v16);
LABEL_38:
              uint64_t v16 = v19;
            }
            while (v19 != a1 + 24);
          }
        }
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F21C0);
      }
      __int16 v30 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v31 = *a4;
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ALM: unable to get process handle\", \"pid\":%{public}d}", buf, 0x18u);
      }
    }
  }
}

void sub_100013010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001303C(uint64_t a1, int *a2, int8x16_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10000D8F0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000131F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100013218(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 128), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230E708);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSLCSubscription::onSLCNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230E708);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSLCSubscription::onSLCNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (!*a2) {
    sub_10002D85C(a4, a3);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000133D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000133F8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E90E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E90E0);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10000B404(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000135C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000135E4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (*a3 != 5)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v27 = *a3;
      __int16 v28 = sub_10008A168(*a3);
      *(_DWORD *)uint64_t buf = 67240450;
      *(_DWORD *)int v46 = v27;
      *(_WORD *)&v46[4] = 2082;
      *(void *)&v46[6] = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, location, %{public}d, %{public}s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    unsigned int v29 = *a3;
    *(_DWORD *)std::string __p = 67240450;
    *(_DWORD *)&__p[4] = v29;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = sub_10008A168(v29);
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v30);
LABEL_54:
    if (v30 != (char *)buf) {
      free(v30);
    }
    return;
  }
  uint64_t v6 = a1 + 176;
  double v7 = *(double *)(a1 + 196);
  long long v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a4;
  long long v9 = *(_OWORD *)(a4 + 80);
  long long v11 = *(_OWORD *)(a4 + 32);
  long long v10 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v10;
  long long v13 = *(_OWORD *)(a4 + 112);
  long long v12 = *(_OWORD *)(a4 + 128);
  long long v14 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 316) = *(_OWORD *)(a4 + 140);
  *(_OWORD *)(a1 + 288) = v13;
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 192) = v8;
  if (*(unsigned char *)(a1 + 129))
  {
    double v15 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
    double v16 = *(double *)(a1 + 336);
    BOOL v17 = v7 > *(double *)(a4 + 20) && v7 > 100.0;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = *(void *)(a1 + 336);
      uint64_t v19 = *(void *)(a1 + 344);
      sub_1000AB340(a4);
      uint64_t v21 = (v42 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 134349827;
      *(void *)int v46 = v20;
      *(_WORD *)&v46[8] = 1026;
      *(_DWORD *)&v46[10] = v17;
      __int16 v47 = 2050;
      uint64_t v48 = v19;
      __int16 v49 = 2081;
      int v50 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TileCell, kNotificationLocationLeech, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s", buf, 0x26u);
      if (SBYTE3(v42) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v34 = *(void *)(a1 + 336);
      uint64_t v33 = *(void *)(a1 + 344);
      sub_1000AB340(a4);
      if (v39 >= 0) {
        uint64_t v35 = &v38;
      }
      else {
        uint64_t v35 = v38;
      }
      *(_DWORD *)std::string __p = 134349827;
      *(void *)&__p[4] = v34;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v17;
      __int16 v41 = 2050;
      uint64_t v42 = v33;
      __int16 v43 = 2081;
      __int16 v44 = v35;
      unsigned int v36 = (char *)_os_log_send_and_compose_impl();
      if (v39 < 0) {
        operator delete(v38);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    int v22 = v15 - v16 >= 600.0 || v17;
    if (v22 == 1)
    {
      double v23 = *(double *)(a1 + 196);
      if (v23 >= 0.0 && v23 <= 5000.0)
      {
        sub_1001AFBBC(a1, v6);
        *(double *)(a1 + 336) = v15;
      }
    }
    if (*(unsigned char *)(a1 + 128))
    {
      int v24 = v15 - *(double *)(a1 + 344) >= 330.0 || v17;
      if (v24 == 1)
      {
        sub_101233234(a1, (uint64_t)"onLocationNotification", v6, 0);
        *(double *)(a1 + 344) = v15;
      }
    }
    return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  unsigned int v31 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v32 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)int v46 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v37 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = v37;
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v30);
    goto LABEL_54;
  }
}

void sub_100013C58(uint64_t a1)
{
  double v3 = __chkstk_darwin(a1);
  int v5 = v4;
  LODWORD(v269) = v6;
  uint64_t v8 = v7;
  uint64_t v9 = v2;
  uint64_t v11 = v10;
  long long v13 = v12;
  double v14 = v3;
  uint64_t v15 = v1;
  long long v16 = v12[7];
  long long v294 = v12[6];
  long long v295 = v16;
  v296[0] = v12[8];
  *(_OWORD *)((char *)v296 + 12) = *(long long *)((char *)v12 + 140);
  long long v17 = v12[3];
  long long v290 = v12[2];
  long long v291 = v17;
  long long v18 = v12[5];
  long long v292 = v12[4];
  long long v293 = v18;
  long long v19 = v12[1];
  *(_OWORD *)v289 = *v12;
  *(_OWORD *)&v289[16] = v19;
  if (*(_DWORD *)(v2 + 180) == 2) {
    int v270 = sub_100DC90C0(v1, v2, (uint64_t)v289) ^ 1;
  }
  else {
    int v270 = 0;
  }
  double v20 = sub_1001ABE80((double *)&v289[4], v9, (double *)(v15 + 1776));
  sub_1001BACE0(v15, (int *)&v294, 0, v14);
  __asm { FMOV            V0.2D, #-1.0 }
  __src[1] = _Q0;
  __src[2] = _Q0;
  __src[3] = _Q0;
  __src[4] = _Q0;
  __src[5] = _Q0;
  __src[6] = _Q0;
  __src[7] = _Q0;
  *(void *)((char *)&__src[9] + 4) = 0;
  *(void *)((char *)&__src[8] + 12) = 0;
  *(_OWORD *)((char *)&__src[9] + 12) = xmmword_101D1C320;
  *(_OWORD *)((char *)&__src[10] + 12) = _Q0;
  *(_OWORD *)((char *)&__src[11] + 12) = _Q0;
  *(_OWORD *)((char *)&__src[12] + 12) = _Q0;
  DWORD2(__src[8]) = 0xFFFF;
  HIDWORD(__src[13]) = 0;
  *(void *)&__src[14] = 0xBFF0000000000000;
  __src[20] = xmmword_101D1C570;
  __src[21] = _Q0;
  long long v25 = *(_OWORD *)(v15 + 288);
  long long v26 = *(_OWORD *)(v15 + 304);
  __src[22] = _Q0;
  *(_OWORD *)((char *)&__src[17] + 4) = *(long long *)((char *)v13 + 140);
  *(_OWORD *)((char *)&__src[16] + 8) = v13[8];
  long long v27 = v13[6];
  *(_OWORD *)((char *)&__src[15] + 8) = v13[7];
  *(_OWORD *)((char *)&__src[14] + 8) = v27;
  long long v28 = v13[3];
  *(_OWORD *)((char *)&__src[10] + 8) = v13[2];
  *(_OWORD *)((char *)&__src[11] + 8) = v28;
  long long v29 = v13[5];
  *(_OWORD *)((char *)&__src[12] + 8) = v13[4];
  long long v30 = *v13;
  *(_OWORD *)((char *)&__src[9] + 8) = v13[1];
  DWORD1(__src[18]) = 0xFFFF;
  *(void *)&__src[19] = 0;
  *((void *)&__src[18] + 1) = 0;
  *((void *)&__src[19] + 1) = 0xBFF0000000000000;
  *(_OWORD *)((char *)&__src[8] + 8) = v30;
  *(_OWORD *)((char *)&__src[13] + 8) = v29;
  long long v31 = *(_OWORD *)(v15 + 560);
  *(_OWORD *)((char *)&__src[24] + 4) = *(_OWORD *)(v15 + 544);
  *(_OWORD *)((char *)&__src[25] + 4) = v31;
  *(_OWORD *)((char *)&__src[26] + 4) = *(_OWORD *)(v15 + 576);
  long long v32 = *(_OWORD *)(v15 + 496);
  *(_OWORD *)((char *)&__src[20] + 4) = *(_OWORD *)(v15 + 480);
  *(_OWORD *)((char *)&__src[21] + 4) = v32;
  long long v33 = *(_OWORD *)(v15 + 528);
  *(_OWORD *)((char *)&__src[22] + 4) = *(_OWORD *)(v15 + 512);
  *(_OWORD *)((char *)&__src[23] + 4) = v33;
  long long v34 = *(_OWORD *)(v15 + 464);
  *(_OWORD *)((char *)&__src[18] + 4) = *(_OWORD *)(v15 + 448);
  *(_OWORD *)((char *)&__src[19] + 4) = v34;
  *(_OWORD *)((char *)&__src[36] + 12) = *(_OWORD *)(v15 + 428);
  long long v35 = *(_OWORD *)(v15 + 400);
  __src[34] = *(_OWORD *)(v15 + 384);
  __src[35] = v35;
  __src[36] = *(_OWORD *)(v15 + 416);
  long long v36 = *(_OWORD *)(v15 + 336);
  __src[30] = *(_OWORD *)(v15 + 320);
  __src[31] = v36;
  long long v37 = *(_OWORD *)(v15 + 368);
  __src[32] = *(_OWORD *)(v15 + 352);
  __src[33] = v37;
  BYTE8(__src[0]) = 1;
  *(double *)&__src[8] = v14;
  __src[27] = *(_OWORD *)(v15 + 588);
  __src[28] = v25;
  __src[29] = v26;
  DWORD1(__src[38]) = *(_DWORD *)(v15 + 604);
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(v15 + 1768) + 128))(buf);
  __src[48] = *(_OWORD *)&v327[32];
  __src[49] = *(_OWORD *)v328;
  *(void *)&__src[50] = *(void *)&v328[16];
  __src[44] = *(_OWORD *)&buf[32];
  __src[45] = *(_OWORD *)&buf[48];
  __src[47] = *(_OWORD *)&v327[16];
  __src[46] = *(_OWORD *)v327;
  __src[43] = *(_OWORD *)&buf[16];
  __src[42] = *(_OWORD *)buf;
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(v15 + 1768) + 136))(buf);
  *(_OWORD *)((char *)&__src[56] + 8) = *(_OWORD *)&v327[32];
  *(_OWORD *)((char *)&__src[57] + 8) = *(_OWORD *)v328;
  *(_OWORD *)((char *)&__src[52] + 8) = *(_OWORD *)&buf[32];
  *(_OWORD *)((char *)&__src[53] + 8) = *(_OWORD *)&buf[48];
  *(_OWORD *)((char *)&__src[54] + 8) = *(_OWORD *)v327;
  *(_OWORD *)((char *)&__src[55] + 8) = *(_OWORD *)&v327[16];
  *(_OWORD *)((char *)&__src[50] + 8) = *(_OWORD *)buf;
  *(_OWORD *)((char *)&__src[51] + 8) = *(_OWORD *)&buf[16];
  *((void *)&__src[58] + 1) = *(void *)&v328[16];
  int v38 = (*(uint64_t (**)(void))(**(void **)(v15 + 1768) + 16))();
  sub_100043084((uint64_t)v289, v20, v11, v9, (int *)v8, v38, (uint64_t)__src);
  int v39 = __src[0];
  int v287 = __src[0];
  int v40 = *(_DWORD *)(v15 + 604);
  int v41 = *(_DWORD *)v8;
  int v42 = *(_DWORD *)(v8 + 68);
  int v272 = *(_DWORD *)v8;
  unint64_t v274 = v42;
  uint64_t v271 = v40;
  if (v270)
  {
    if (v41) {
      return;
    }
    double v43 = sub_100044A78(v9);
    int v41 = v272;
    if (v20 <= v43 + *((double *)sub_100044B44() + 42)) {
      return;
    }
    int v39 = 1;
    int v287 = 1;
  }
  if (v5)
  {
    __int16 v44 = (uint64_t *)sub_10001A4C4(v15 + 1880, (unsigned __int8 *)v9);
    int v39 = v287;
    if (v287)
    {
      int v41 = v272;
    }
    else
    {
      __int16 v45 = v44;
      int v41 = v272;
      if ((uint64_t *)(v15 + 1888) != v44)
      {
        sub_1000F0A30((uint64_t **)(v15 + 1880), v44);
        sub_100DCE0E0((uint64_t)(v45 + 4));
        operator delete(v45);
        int v39 = v287;
      }
    }
  }
  if (v39 == -1 || v39 == v41)
  {
    BOOL v273 = 0;
    int v51 = v39 | v41;
    _ZF = (~*(_DWORD *)(v9 + 160) & 5) == 0 && v51 == 0;
    BOOL v55 = _ZF && v42 == 1 && v40 == 2;
    goto LABEL_45;
  }
  if (v41 == -1 || v39)
  {
    int v46 = 0;
    if (v41 != -1 && v39 == 1)
    {
      if ((*(unsigned char *)(v9 + 160) & 2) != 0)
      {
        if (*(double *)(v15 + 656) <= 0.0)
        {
          int v46 = 1;
        }
        else
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F7C40);
          }
          __int16 v65 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Fence: invalidate EPNO exit trigger time", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F7C40);
            }
            *(_WORD *)v297 = 0;
            v242 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v242);
            if (v242 != buf) {
              free(v242);
            }
          }
          *(void *)(v15 + 656) = 0;
          int v46 = 1;
        }
      }
      else
      {
        int v46 = 0;
      }
    }
  }
  else
  {
    int v46 = *(unsigned char *)(v9 + 160) & 1;
  }
  BOOL v273 = v46 == 0;
  if ((~*(_DWORD *)(v9 + 160) & 5) != 0)
  {
    BOOL v55 = v46 != 0;
    goto LABEL_45;
  }
  int v47 = v46 ^ 1;
  if (!v287 && v40 != 2)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F7C40);
    }
    uint64_t v48 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v49 = v9 + 24;
      if (*(char *)(v9 + 47) < 0) {
        uint64_t v49 = *(void *)(v9 + 24);
      }
      if ((v287 + 1) > 4) {
        int v50 = "---";
      }
      else {
        int v50 = off_1022F7E10[v287 + 1];
      }
      *(_DWORD *)uint64_t buf = 136380931;
      *(void *)&uint8_t buf[4] = v49;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v50;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Fence: %{private}s, filtering unwanted, %{private}s, nofitication, has not achieved settled state yet", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      uint64_t v223 = v9 + 24;
      if (*(char *)(v9 + 47) < 0) {
        uint64_t v223 = *(void *)(v9 + 24);
      }
      if ((v287 + 1) > 4) {
        v224 = "---";
      }
      else {
        v224 = off_1022F7E10[v287 + 1];
      }
      *(_DWORD *)v297 = 136380931;
      *(void *)&v297[4] = v223;
      *(_WORD *)&v297[12] = 2081;
      *(void *)&v297[14] = v224;
      v235 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v235);
      if (v235 != buf) {
        free(v235);
      }
    }
    int v47 = 0;
    int v46 = 0;
  }
  BOOL v273 = v47 != 0;
  BOOL v55 = v46 != 0;
  if (v287 != 1 || v42 == 2 || (*(unsigned char *)(v9 + 160) & 2) == 0) {
    goto LABEL_45;
  }
  v103 = &qword_102419000;
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F7C40);
  }
  unint64_t v104 = qword_1024193C8;
  if (!os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_389;
  }
  sub_100918454((const void **)v9, (std::string *)buf);
  if (buf[23] >= 0) {
    v105 = buf;
  }
  else {
    v105 = *(unsigned char **)buf;
  }
  if ((v287 + 1) > 4) {
    goto LABEL_386;
  }
  for (i = off_1022F7E10[v287 + 1]; ; i = "---")
  {
    *(_DWORD *)v297 = 136380931;
    *(void *)&v297[4] = v105;
    *(_WORD *)&v297[12] = 2081;
    *(void *)&v297[14] = i;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v104, OS_LOG_TYPE_DEBUG, "Fence: %{private}s, filtering unwanted, %{private}s, nofitication, never achieved settled state for entry notification", v297, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
LABEL_389:
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v103[120] != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      sub_100918454((const void **)v9, (std::string *)v297);
      if (v297[23] >= 0) {
        v236 = v297;
      }
      else {
        v236 = *(unsigned char **)v297;
      }
      if ((v287 + 1) > 4) {
        v237 = "---";
      }
      else {
        v237 = off_1022F7E10[v287 + 1];
      }
      v325.type = 136380931;
      *(void *)&v325.confidence = v236;
      LOWORD(v325.mountedState) = 2081;
      *(void *)((char *)&v325.mountedState + 2) = v237;
      v243 = (char *)_os_log_send_and_compose_impl();
      if ((v297[23] & 0x80000000) != 0) {
        operator delete(*(void **)v297);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v243);
      if (v243 != buf) {
        free(v243);
      }
    }
    BOOL v273 = 0;
    BOOL v55 = 0;
LABEL_45:
    int v268 = sub_1001BAD4C(v15, v14);
    if (!v273 && !v55)
    {
      int v262 = 0;
      int log = 0;
      BOOL v273 = 0;
      BOOL v55 = 0;
      goto LABEL_223;
    }
    if ((*(unsigned char *)(v9 + 160) & 0x80) != 0)
    {
      if (v15 + 824 != sub_10001A4C4(v15 + 816, (unsigned __int8 *)v9))
      {
        sub_100110970(buf);
        if (sub_100DC9174(v15, (unsigned __int8 *)v9, (uint64_t)buf))
        {
          uint64_t v63 = sub_10001A4C4(v15 + 240, buf);
          if (v15 + 248 == v63)
          {
            sub_100488394((uint64_t)buf);
          }
          else
          {
            int v64 = *(_DWORD *)(v63 + 280);
            sub_100488394((uint64_t)buf);
            if (v64 != -1) {
              goto LABEL_220;
            }
          }
        }
        else
        {
          if (*(void *)&v348[12])
          {
            *(void *)&long long v349 = *(void *)&v348[12];
            operator delete(*(void **)&v348[12]);
          }

          if ((v348[3] & 0x80000000) != 0) {
            operator delete(v344);
          }
          if ((v327[7] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[48]);
          }
          if ((buf[47] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      if (v272 == -1)
      {
        if (v55)
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F7C40);
          }
          v114 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "#significantFence, state init on transition", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F7C40);
            }
            *(_WORD *)v297 = 0;
            v238 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v238);
            if (v238 != buf) {
              free(v238);
            }
          }
        }
        sub_100134750(v277, "SigFence");
        sub_100DBB3D0(v15, v9, &v287, (uint64_t *)v277);
        if ((v278 & 0x80000000) == 0) {
          goto LABEL_220;
        }
        v113 = v277[0];
        goto LABEL_219;
      }
      if (!v55)
      {
        int log = 0;
        BOOL v273 = 0;
        goto LABEL_222;
      }
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      v107 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(v9 + 47) >= 0) {
          uint64_t v108 = v9 + 24;
        }
        else {
          uint64_t v108 = *(void *)(v9 + 24);
        }
        int v109 = *(unsigned __int8 *)(v15 + 619);
        uint64_t v111 = *(void *)(v9 + 72);
        uint64_t v110 = *(void *)(v9 + 80);
        double v112 = sub_100044A78(v9);
        *(_DWORD *)uint64_t buf = 136381699;
        *(void *)&uint8_t buf[4] = v108;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v109;
        *(_WORD *)&buf[18] = 2049;
        *(void *)&buf[20] = v111;
        *(_WORD *)&buf[28] = 2049;
        *(void *)&buf[30] = v110;
        *(_WORD *)&buf[38] = 2050;
        *(double *)&unsigned char buf[40] = v112;
        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#significantRegion: fence, %{private}s, fence event, hint, %{public}d, latLon, %{private}.6lf,%{private}.6lf, radius, %{public}.1lf", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F7C40);
        }
        if (*(char *)(v9 + 47) >= 0) {
          uint64_t v229 = v9 + 24;
        }
        else {
          uint64_t v229 = *(void *)(v9 + 24);
        }
        int v230 = *(unsigned __int8 *)(v15 + 619);
        uint64_t v232 = *(void *)(v9 + 72);
        uint64_t v231 = *(void *)(v9 + 80);
        double v233 = sub_100044A78(v9);
        *(_DWORD *)v297 = 136381699;
        *(void *)&v297[4] = v229;
        *(_WORD *)&v297[12] = 1026;
        *(_DWORD *)&v297[14] = v230;
        *(_WORD *)&v297[18] = 2049;
        *(void *)&v297[20] = v232;
        *(_WORD *)&v297[28] = 2049;
        *(void *)&v297[30] = v231;
        *(_WORD *)&v297[38] = 2050;
        *(double *)&v297[40] = v233;
        v234 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v234);
        if (v234 != buf) {
          free(v234);
        }
      }
      (*(void (**)(void, int *, uint64_t, unsigned char *))(**(void **)(v15 + 1768) + 424))(*(void *)(v15 + 1768), &v287, v9, v289);
      if (!*(unsigned char *)(v15 + 619))
      {
        sub_100134750(&v275, "SigFence");
        sub_100DBB9B0(v15);
        if (v276 < 0)
        {
          v113 = v275;
LABEL_219:
          operator delete(v113);
        }
      }
LABEL_220:
      int log = 0;
      BOOL v273 = 0;
      BOOL v55 = 0;
LABEL_222:
      int v262 = 1;
      goto LABEL_223;
    }
    BOOL v56 = sub_100DC9CD4(v15, (long long *)(v9 + 24), (long long *)v9);
    BOOL v57 = v56;
    if (*(unsigned char *)(v9 + 176) || !v56) {
      goto LABEL_62;
    }
    BOOL v59 = v55;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F7C40);
    }
    uint64_t v60 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      if (*(char *)(v9 + 23) >= 0) {
        uint64_t v61 = v9;
      }
      else {
        uint64_t v61 = *(void *)v9;
      }
      if (*(char *)(v9 + 47) >= 0) {
        uint64_t v62 = v9 + 24;
      }
      else {
        uint64_t v62 = *(void *)(v9 + 24);
      }
      *(_DWORD *)uint64_t buf = 136446467;
      *(void *)&uint8_t buf[4] = v61;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v62;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "LOI helper fence %{public}s/%{private}s has isHelperFence=false", buf, 0x16u);
    }
    BOOL v55 = v59;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      if (*(char *)(v9 + 23) >= 0) {
        uint64_t v225 = v9;
      }
      else {
        uint64_t v225 = *(void *)v9;
      }
      if (*(char *)(v9 + 47) >= 0) {
        uint64_t v226 = v9 + 24;
      }
      else {
        uint64_t v226 = *(void *)(v9 + 24);
      }
      *(_DWORD *)v297 = 136446467;
      *(void *)&v297[4] = v225;
      *(_WORD *)&v297[12] = 2081;
      *(void *)&v297[14] = v226;
      v227 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v227);
      if (v227 != buf) {
        free(v227);
      }
    }
    else
    {
LABEL_62:
      if (!v57)
      {
        int v262 = 0;
        int log = 0;
        goto LABEL_223;
      }
    }
    if (*(char *)(v9 + 47) < 0)
    {
      sub_1000DC48C(__dst, *(void **)(v9 + 24), *(void *)(v9 + 32));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v9 + 24);
      uint64_t v286 = *(void *)(v9 + 40);
    }
    int v66 = *(void **)(v15 + 816);
    if (v66 != (void *)(v15 + 824))
    {
      uint64_t v67 = v15 + 240;
      uint64_t v68 = v15 + 248;
      do
      {
        uint64_t v69 = *((unsigned __int8 *)v66 + 303);
        if ((v69 & 0x80u) == 0) {
          uint64_t v70 = (void *)*((unsigned __int8 *)v66 + 303);
        }
        else {
          uint64_t v70 = (void *)v66[36];
        }
        __int16 v71 = (void *)HIBYTE(v286);
        if (v286 < 0) {
          __int16 v71 = __dst[1];
        }
        if (v70 != v71) {
          goto LABEL_146;
        }
        uint64_t v72 = (const void **)(v66 + 35);
        if (v286 >= 0) {
          __int16 v73 = __dst;
        }
        else {
          __int16 v73 = (void **)__dst[0];
        }
        if ((v69 & 0x80) != 0)
        {
          if (memcmp(*v72, v73, v66[36])) {
            goto LABEL_146;
          }
        }
        else if (*((unsigned char *)v66 + 303))
        {
          while (*(unsigned __int8 *)v72 == *(unsigned __int8 *)v73)
          {
            uint64_t v72 = (const void **)((char *)v72 + 1);
            __int16 v73 = (void **)((char *)v73 + 1);
            if (!--v69) {
              goto LABEL_107;
            }
          }
          goto LABEL_146;
        }
LABEL_107:
        uint64_t v74 = *((unsigned __int8 *)v66 + 55);
        if ((v74 & 0x80u) == 0) {
          uint64_t v75 = *((unsigned __int8 *)v66 + 55);
        }
        else {
          uint64_t v75 = v66[5];
        }
        uint64_t v76 = *(unsigned __int8 *)(v9 + 23);
        int v77 = (char)v76;
        if ((v76 & 0x80u) != 0) {
          uint64_t v76 = *(void *)(v9 + 8);
        }
        if (v75 != v76) {
          goto LABEL_146;
        }
        if (v77 >= 0) {
          int v78 = (unsigned __int8 *)v9;
        }
        else {
          int v78 = *(unsigned __int8 **)v9;
        }
        if ((v74 & 0x80) != 0)
        {
          if (memcmp((const void *)v66[4], v78, v66[5])) {
            goto LABEL_146;
          }
        }
        else if (*((unsigned char *)v66 + 55))
        {
          __int16 v79 = (unsigned __int8 *)(v66 + 4);
          while (*v79 == *v78)
          {
            ++v79;
            ++v78;
            if (!--v74) {
              goto LABEL_123;
            }
          }
          goto LABEL_146;
        }
LABEL_123:
        uint64_t v80 = sub_10001A4C4(v67, (unsigned __int8 *)v66 + 32);
        if (v68 != v80)
        {
          int v81 = *(_DWORD *)(v80 + 280);
          if (v81 != -1)
          {
            int v82 = v287 != v81 || v55;
            if (v287 == -1 || !v82) {
              goto LABEL_146;
            }
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F7C40);
            }
            loga = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v83 = v66 + 7;
              BOOL v258 = v55;
              uint64_t v263 = v67;
              uint64_t v254 = v68;
              if (*((char *)v66 + 79) < 0) {
                __int16 v83 = (void *)*v83;
              }
              int v84 = SHIBYTE(v286);
              __int16 v85 = (void **)__dst[0];
              int v86 = *(unsigned __int8 *)(v15 + 619);
              uint64_t v87 = *(void *)(v9 + 72);
              uint64_t v247 = *(void *)(v9 + 80);
              v251 = v83;
              double v88 = sub_100044A78(v9);
              *(_DWORD *)uint64_t buf = 136381955;
              if (v84 >= 0) {
                __int16 v89 = __dst;
              }
              else {
                __int16 v89 = v85;
              }
              *(void *)&uint8_t buf[4] = v251;
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v89;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&uint8_t buf[24] = v86;
              *(_WORD *)&buf[28] = 2049;
              *(void *)&buf[30] = v87;
              *(_WORD *)&buf[38] = 2049;
              *(void *)&unsigned char buf[40] = v247;
              *(_WORD *)&buf[48] = 2050;
              *(double *)&buf[50] = v88;
              _os_log_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_DEFAULT, "#significantRegion: fence, %{private}s, loi fence event, id, %{public}s, hint, %{public}d, latLon, %{private}.6lf,%{private}.6lf, radius, %{public}.1lf", buf, 0x3Au);
              BOOL v55 = v258;
              uint64_t v67 = v263;
              uint64_t v68 = v254;
            }
            if (sub_10013D1A0(115, 2))
            {
              uint64_t v255 = v68;
              uint64_t v264 = v67;
              BOOL v259 = v55;
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F7C40);
              }
              os_log_t logb = (os_log_t)(v66 + 7);
              if (*((char *)v66 + 79) < 0) {
                os_log_t logb = (os_log_t)logb->isa;
              }
              int v93 = SHIBYTE(v286);
              int v94 = (void **)__dst[0];
              int v95 = *(unsigned __int8 *)(v15 + 619);
              uint64_t v96 = *(void *)(v9 + 72);
              uint64_t v248 = *(void *)(v9 + 80);
              double v97 = sub_100044A78(v9);
              *(_DWORD *)v297 = 136381955;
              int v98 = __dst;
              if (v93 < 0) {
                int v98 = v94;
              }
              *(void *)&v297[4] = logb;
              *(_WORD *)&v297[12] = 2082;
              *(void *)&v297[14] = v98;
              *(_WORD *)&v297[22] = 1026;
              *(_DWORD *)&v297[24] = v95;
              *(_WORD *)&v297[28] = 2049;
              *(void *)&v297[30] = v96;
              *(_WORD *)&v297[38] = 2049;
              *(void *)&v297[40] = v248;
              *(_WORD *)&v297[48] = 2050;
              *(double *)&v297[50] = v97;
              v99 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v99);
              if (v99 != buf) {
                free(v99);
              }
              BOOL v55 = v259;
              uint64_t v67 = v264;
              uint64_t v68 = v255;
            }
            (*(void (**)(void, int *, void *, unsigned char *))(**(void **)(v15 + 1768) + 424))(*(void *)(v15 + 1768), &v287, v66 + 4, v289);
            if (*(unsigned char *)(v15 + 619)) {
              goto LABEL_146;
            }
            sub_100134750(v281, "LoiFence");
            sub_100DBB9B0(v15);
            if ((v282 & 0x80000000) == 0) {
              goto LABEL_146;
            }
            double v90 = (void **)v281;
            goto LABEL_145;
          }
        }
        sub_100134750(v283, "LoiFence");
        sub_100DBB3D0(v15, (uint64_t)(v66 + 4), &v287, v283);
        if (v284 < 0)
        {
          double v90 = (void **)v283;
LABEL_145:
          operator delete(*v90);
        }
LABEL_146:
        __int16 v91 = (void *)v66[1];
        if (v91)
        {
          do
          {
            int v92 = v91;
            __int16 v91 = (void *)*v91;
          }
          while (v91);
        }
        else
        {
          do
          {
            int v92 = (void *)v66[2];
            _ZF = *v92 == (void)v66;
            int v66 = v92;
          }
          while (!_ZF);
        }
        int v66 = v92;
      }
      while (v92 != (void *)(v15 + 824));
    }
    if (v55 && sub_100F5E718((unsigned char *)(v15 + 1312)))
    {
      sub_10048AEC0(v297, (long long *)v9);
      *(_DWORD *)&v302[24] = sub_100DDAF8C(v15 + 904, (unsigned __int8 *)v9);
      *(_DWORD *)&v302[20] = sub_100DDAFCC(v15 + 904);
      long long v100 = *(_OWORD *)(v8 + 48);
      v279[2] = *(_OWORD *)(v8 + 32);
      v279[3] = v100;
      v279[4] = *(_OWORD *)(v8 + 64);
      uint64_t v280 = *(void *)(v8 + 80);
      long long v101 = *(_OWORD *)(v8 + 16);
      v279[0] = *(_OWORD *)v8;
      v279[1] = v101;
      LODWORD(v279[0]) = v287;
      (*(void (**)(CLMotionActivity *__return_ptr))(**(void **)(v15 + 1768) + 128))(&v325);
      char v102 = (*(uint64_t (**)(void))(**(void **)(v15 + 1768) + 16))(*(void *)(v15 + 1768));
      sub_100F608A4((uint64_t)buf, (uint64_t)v297, (double *)v279, (long long *)(v15 + 1648), &v325, (uint64_t)v289, v15 + 144, v102, v14, *(unsigned char *)(v15 + 613), *(unsigned char *)(v15 + 728));
      sub_100F608B8((uint64_t)buf);
      *(double *)(v8 + 56) = v14;
      *(_DWORD *)(v8 + 64) = v294;
      if (*((void *)&v349 + 1))
      {
        *(void *)v350 = *((void *)&v349 + 1);
        operator delete(*((void **)&v349 + 1));
      }
      if ((buf[31] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[8]);
      }
      if (*(void *)&v310[12])
      {
        *(void *)v311 = *(void *)&v310[12];
        operator delete(*(void **)&v310[12]);
      }

      if ((v310[3] & 0x80000000) != 0) {
        operator delete(v306);
      }
      if (SHIBYTE(v299) < 0) {
        operator delete(*(void **)&v297[48]);
      }
      if ((v297[47] & 0x80000000) != 0) {
        operator delete(*(void **)&v297[24]);
      }
      if ((v297[23] & 0x80000000) != 0) {
        operator delete(*(void **)v297);
      }
    }
    if (SHIBYTE(v286) < 0) {
      operator delete(__dst[0]);
    }
    int v262 = 0;
    BOOL v273 = 0;
    BOOL v55 = 0;
    int log = 1;
LABEL_223:
    if (v269 && (*(unsigned char *)(v15 + 1875) || *(unsigned char *)(v15 + 1874)))
    {
      BOOL v115 = v287 == 1 && v55;
      if (v115 && v294 == 4 && *(_DWORD *)(v9 + 172) == 1)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F7C40);
        }
        v116 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          BOOL v117 = sub_100DB91F8((double *)(v15 + 1840), v14);
          uint64_t v118 = *(void *)(v15 + 1848);
          *(_DWORD *)uint64_t buf = 67174913;
          *(_DWORD *)&uint8_t buf[4] = v117;
          *(_WORD *)&uint8_t buf[8] = 2049;
          *(void *)&buf[10] = v118;
          _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "Fence: MiLo, homeLoi exit detected, isMicroLocationEventRecent, %{private}d, homeLoiProbability, %{private}.2f", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F7C40);
          }
          BOOL v220 = sub_100DB91F8((double *)(v15 + 1840), v14);
          uint64_t v221 = *(void *)(v15 + 1848);
          *(_DWORD *)v297 = 67174913;
          *(_DWORD *)&v297[4] = v220;
          *(_WORD *)&v297[8] = 2049;
          *(void *)&v297[10] = v221;
          v222 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v222);
          if (v222 != buf) {
            free(v222);
          }
        }
        if (!sub_100DB91F8((double *)(v15 + 1840), v14))
        {
          *(void *)uint64_t buf = v9;
          v123 = sub_100DCEADC((uint64_t **)(v15 + 1880), (unsigned __int8 *)v9, (uint64_t)&unk_101D0B290, (long long **)buf);
          long long v124 = v293;
          *(_OWORD *)(v123 + 43) = v292;
          *(_OWORD *)(v123 + 45) = v124;
          long long v125 = v291;
          *(_OWORD *)(v123 + 39) = v290;
          *(_OWORD *)(v123 + 41) = v125;
          *(_OWORD *)((char *)v123 + 420) = *(_OWORD *)((char *)v296 + 12);
          long long v126 = v296[0];
          long long v127 = v294;
          *(_OWORD *)(v123 + 49) = v295;
          *(_OWORD *)(v123 + 51) = v126;
          *(_OWORD *)(v123 + 47) = v127;
          long long v128 = *(_OWORD *)&v289[16];
          *(_OWORD *)(v123 + 35) = *(_OWORD *)v289;
          *(_OWORD *)(v123 + 37) = v128;
          if (!*(unsigned char *)(v15 + 1872))
          {
            (*(void (**)(void))(**(void **)(v15 + 1768) + 448))(*(void *)(v15 + 1768));
            uint64_t v129 = *(void *)(v15 + 1768);
            v130 = sub_100044B44();
            (*(void (**)(uint64_t, char *))(*(void *)v129 + 248))(v129, v130 + 400);
            *(unsigned char *)(v15 + 1872) = 1;
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F7C40);
          }
          v131 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v132 = v9 + 24;
            if (*(char *)(v9 + 47) < 0) {
              uint64_t v132 = *(void *)(v9 + 24);
            }
            int v133 = *(unsigned __int8 *)(v15 + 1872);
            uint64_t v134 = *(void *)(v15 + 1896);
            *(_DWORD *)uint64_t buf = 136381187;
            *(void *)&uint8_t buf[4] = v132;
            *(_WORD *)&unsigned char buf[12] = 1025;
            *(_DWORD *)&buf[14] = v133;
            *(_WORD *)&buf[18] = 1025;
            *(_DWORD *)&buf[20] = v134;
            _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, Added fencePendingMiloLocalizer, %{private}s, fIsPendingMicroLocationEventUpdate, %{private}d, fFenceToLocationPendingMiLoLocalizer size, %{private}d", buf, 0x18u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F7C40);
            }
            uint64_t v137 = *(void *)(v9 + 24);
            uint64_t v136 = v9 + 24;
            uint64_t v135 = v137;
            if (*(char *)(v136 + 23) >= 0) {
              uint64_t v135 = v136;
            }
            int v138 = *(unsigned __int8 *)(v15 + 1872);
            uint64_t v139 = *(void *)(v15 + 1896);
            *(_DWORD *)v297 = 136381187;
            *(void *)&v297[4] = v135;
            *(_WORD *)&v297[12] = 1025;
            *(_DWORD *)&v297[14] = v138;
            *(_WORD *)&v297[18] = 1025;
            *(_DWORD *)&v297[20] = v139;
            v140 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v140);
            if (v140 != buf) {
              free(v140);
            }
          }
          return;
        }
        double v119 = *(double *)(v15 + 1848);
        if (v119 >= *((double *)sub_100044B44() + 49) && *(unsigned char *)(v15 + 1856))
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F7C40);
          }
          v120 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v121 = v9 + 24;
            if (*(char *)(v9 + 47) < 0) {
              uint64_t v121 = *(void *)(v9 + 24);
            }
            uint64_t v122 = *(void *)(v15 + 1848);
            *(_DWORD *)uint64_t buf = 136380931;
            *(void *)&uint8_t buf[4] = v121;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)&buf[14] = v122;
            _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "#Warning Fence: MiLo, false exit detected, fence, %{private}s, homeLoiProbability, %{private}.2f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F7C40);
            }
            uint64_t v239 = v9 + 24;
            if (*(char *)(v9 + 47) < 0) {
              uint64_t v239 = *(void *)(v9 + 24);
            }
            uint64_t v240 = *(void *)(v15 + 1848);
            *(_DWORD *)v297 = 136380931;
            *(void *)&v297[4] = v239;
            *(_WORD *)&v297[12] = 2049;
            *(void *)&v297[14] = v240;
            v241 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v241);
            if (v241 != buf) {
              free(v241);
            }
          }
          BOOL v55 = *(unsigned char *)(v15 + 1875) == 0;
          if (*(unsigned char *)(v15 + 1875))
          {
            BOOL v273 = 0;
            int v287 = 0;
          }
          if (*(unsigned char *)(v15 + 1874))
          {
            sub_100F5FD48(v15 + 1312);
            sub_100DC9D54(v15, v9, v14, *(double *)(v15 + 1848));
          }
        }
        else
        {
          if (*(unsigned char *)(v15 + 1874)) {
            sub_100F5FD58(v15 + 1312);
          }
          BOOL v55 = 1;
        }
      }
    }
    if (*(unsigned char *)(v15 + 1874))
    {
      if (v287 == 1 && v55)
      {
        sub_100F5FD78(v15 + 1312);
        if (*(_DWORD *)(v9 + 172) == 1)
        {
          sub_100F5FD68(v15 + 1312);
          if (v294 == 4 && *(_DWORD *)(v9 + 172) == 1) {
            sub_100F5FD88(v15 + 1312);
          }
        }
      }
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F7C40);
    }
    v142 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v9 + 47) >= 0) {
        uint64_t v143 = v9 + 24;
      }
      else {
        uint64_t v143 = *(void *)(v9 + 24);
      }
      uint64_t v269 = v143;
      if (*(char *)(v9 + 23) >= 0) {
        uint64_t v144 = v9;
      }
      else {
        uint64_t v144 = *(void *)v9;
      }
      uint64_t v256 = v144;
      v252 = sub_10003E9A4(v294);
      uint64_t v145 = *(void *)&v289[12];
      uint64_t v245 = *(void *)&v289[20];
      uint64_t v249 = *(void *)&v289[4];
      v146 = v297;
      sub_10002931C(*(_DWORD *)(v8 + 8), (std::string *)v297);
      BOOL v260 = v55;
      if (v297[23] < 0) {
        v146 = *(unsigned char **)v297;
      }
      if ((*(unsigned int (**)(void))(**(void **)(v15 + 1768) + 16))(*(void *)(v15 + 1768))) {
        v147 = "+";
      }
      else {
        v147 = "-";
      }
      int v148 = *(unsigned __int8 *)(v15 + 623);
      if (*(void *)(v9 + 232) == *(void *)(v9 + 224)) {
        unint64_t v149 = *(void *)(v9 + 72);
      }
      else {
        unint64_t v149 = 0xBFF0000000000000;
      }
      if (*(void *)(v9 + 232) == *(void *)(v9 + 224)) {
        unint64_t v150 = *(void *)(v9 + 80);
      }
      else {
        unint64_t v150 = 0xBFF0000000000000;
      }
      double v151 = sub_100044A78(v9);
      double v152 = *(double *)(v8 + 40);
      double v153 = v14 - v152;
      BOOL v154 = v152 <= 0.0;
      double v155 = -1.0;
      if (!v154) {
        double v155 = v153;
      }
      unsigned int v156 = *(_DWORD *)v8 + 1;
      if (v156 > 4) {
        v157 = "---";
      }
      else {
        v157 = off_1022F7E10[v156];
      }
      if ((v287 + 1) > 4) {
        v158 = "---";
      }
      else {
        v158 = off_1022F7E10[v287 + 1];
      }
      if (v274 > 2) {
        v159 = "---";
      }
      else {
        v159 = off_1022F7E38[v274];
      }
      uint64_t v160 = *(void *)(v9 + 120);
      int v161 = *(_DWORD *)(v15 + 684);
      int v162 = *(_DWORD *)(v15 + 688);
      int v163 = *(_DWORD *)(v15 + 704);
      int v164 = *(_DWORD *)(v15 + 708);
      if (v271 > 2) {
        v165 = "---";
      }
      else {
        v165 = off_1022F7E38[v271];
      }
      uint64_t v352 = *(void *)(v8 + 72);
      int v166 = *(_DWORD *)(v8 + 84);
      int v354 = *(_DWORD *)(v8 + 80);
      *(void *)&uint8_t buf[4] = v269;
      *(void *)&buf[14] = v256;
      *(void *)&uint8_t buf[24] = v252;
      *(void *)&buf[34] = v249;
      *(void *)&buf[44] = v145;
      *(_WORD *)&buf[52] = 2050;
      *(void *)&buf[54] = v245;
      *(void *)&v327[10] = v146;
      *(void *)&v327[20] = v147;
      *(_DWORD *)&v327[42] = v148;
      *(void *)v328 = v149;
      *(void *)&v328[10] = v150;
      uint64_t v330 = v160;
      int v332 = v161;
      int v334 = v162;
      int v336 = v163;
      int v338 = v164;
      v344 = v157;
      v346 = v158;
      *(void *)v348 = v159;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(_WORD *)&buf[22] = 2081;
      *(_WORD *)&v327[8] = 2081;
      *(_WORD *)&v327[18] = 2081;
      __int16 v343 = 2081;
      __int16 v345 = 2081;
      __int16 v347 = 2081;
      *(_WORD *)&v348[8] = 2081;
      *(void *)&v348[10] = v165;
      *(_WORD *)&v327[28] = 1025;
      *(_WORD *)&v327[34] = 1025;
      *(_WORD *)&v327[40] = 1025;
      __int16 v331 = 1025;
      __int16 v333 = 1025;
      __int16 v335 = 1025;
      __int16 v337 = 1025;
      __int16 v341 = 1025;
      *(_WORD *)&v348[18] = 1025;
      *(_WORD *)&buf[32] = 2049;
      *(_WORD *)&buf[42] = 2049;
      *(_WORD *)&buf[62] = 2049;
      *(_WORD *)&v327[46] = 2049;
      *(_WORD *)&v328[8] = 2049;
      *(_WORD *)&v328[18] = 2049;
      __int16 v329 = 2049;
      __int16 v339 = 2049;
      WORD2(v349) = 2049;
      __int16 v351 = 2048;
      HIWORD(v349) = 1024;
      *(_WORD *)&v350[4] = 1024;
      __int16 v353 = 1024;
      __int16 v355 = 1024;
      int v356 = v166;
      double v167 = *(double *)(v8 + 56);
      double v168 = v14 - v167;
      BOOL v154 = v167 <= 0.0;
      double v169 = -1.0;
      if (!v154) {
        double v169 = v168;
      }
      *(_DWORD *)uint64_t buf = 136388867;
      *(double *)v327 = v20;
      BOOL v55 = v260;
      *(_DWORD *)&v327[30] = v260;
      *(_DWORD *)&v327[36] = v273;
      *(double *)&v328[20] = v151;
      double v340 = v155;
      int v342 = v268;
      LODWORD(v349) = v270;
      *(double *)((char *)&v349 + 6) = v169;
      *(_DWORD *)v350 = v262;
      *(_DWORD *)&v350[6] = log;
      _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "Fence: fenceUpdate, %{private}s, bundle, %{private}s, type, %{private}-16s, loc, %{private}12.7lf, %{private}12.7lf, acc, %{public}4.0lf, distance, %{private}9.0lf, tech, %{private}4s%{private}s, trans, %{private}d, state, %{private}d, cont, %{private}d, fence, %{private}12.8lf, %{private}12.8lf, %{private}.1lf, %{private}.1lf, sCount, %{private}d, %{private}d, trig, %{private}d, %{private}d, sinceLastLoc, %{private}.1lf, events, 0x%{private}08x, status, %{private}-10s => %{private}-10s, settled state, %{private}s ==> %{private}s, cantShiftButNeedTo, %{private}d, sinceLastTransition, %{private}.1lf, significant, %d, loi, %d, lastProximityStateTimestamp, %f, lastProximityState, %d, lastApproachingState, %d", buf, 0x118u);
      if ((v297[23] & 0x80000000) != 0) {
        operator delete(*(void **)v297);
      }
    }
    BOOL v170 = sub_10013D1A0(115, 2);
    v103 = (uint64_t *)v297;
    int v171 = v272;
    unint64_t v104 = v274;
    int v172 = v271;
    if (v170)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      LODWORD(v269) = qword_1024193C8;
      if (*(char *)(v9 + 47) >= 0) {
        uint64_t v188 = v9 + 24;
      }
      else {
        uint64_t v188 = *(void *)(v9 + 24);
      }
      if (*(char *)(v9 + 23) >= 0) {
        uint64_t v189 = v9;
      }
      else {
        uint64_t v189 = *(void *)v9;
      }
      uint64_t v253 = v189;
      uint64_t v257 = v188;
      v250 = sub_10003E9A4(v294);
      uint64_t v190 = *(void *)&v289[4];
      uint64_t v191 = *(void *)&v289[12];
      uint64_t v192 = *(void *)&v289[20];
      sub_10002931C(*(_DWORD *)(v8 + 8), (std::string *)&v325);
      BOOL v261 = v55;
      if (v325.conservativeMountedState >= 0) {
        v193 = &v325;
      }
      else {
        v193 = *(CLMotionActivity **)&v325.type;
      }
      int v194 = (*(uint64_t (**)(void))(**(void **)(v15 + 1768) + 16))(*(void *)(v15 + 1768));
      v195 = "-";
      if (v194) {
        v195 = "+";
      }
      v246 = v195;
      int v244 = *(unsigned __int8 *)(v15 + 623);
      if (*(void *)(v9 + 232) == *(void *)(v9 + 224)) {
        unint64_t v196 = *(void *)(v9 + 72);
      }
      else {
        unint64_t v196 = 0xBFF0000000000000;
      }
      if (*(void *)(v9 + 232) == *(void *)(v9 + 224)) {
        unint64_t v197 = *(void *)(v9 + 80);
      }
      else {
        unint64_t v197 = 0xBFF0000000000000;
      }
      double v198 = sub_100044A78(v9);
      double v199 = *(double *)(v8 + 40);
      double v200 = v14 - v199;
      BOOL v154 = v199 <= 0.0;
      double v201 = -1.0;
      if (!v154) {
        double v201 = v200;
      }
      unsigned int v202 = *(_DWORD *)v8 + 1;
      if (v202 > 4) {
        v203 = "---";
      }
      else {
        v203 = off_1022F7E10[v202];
      }
      if ((v287 + 1) > 4) {
        v205 = "---";
      }
      else {
        v205 = off_1022F7E10[v287 + 1];
      }
      if (v274 > 2) {
        v206 = "---";
      }
      else {
        v206 = off_1022F7E38[v274];
      }
      uint64_t v207 = *(void *)(v9 + 120);
      int v208 = *(_DWORD *)(v15 + 684);
      int v209 = *(_DWORD *)(v15 + 688);
      int v210 = *(_DWORD *)(v15 + 704);
      int v211 = *(_DWORD *)(v15 + 708);
      if (v271 > 2) {
        v212 = "---";
      }
      else {
        v212 = off_1022F7E38[v271];
      }
      *((void *)&v314 + 1) = *(void *)(v8 + 72);
      int v213 = *(_DWORD *)(v8 + 84);
      *(_DWORD *)((char *)&v315 + 2) = *(_DWORD *)(v8 + 80);
      *(void *)&v297[4] = v257;
      *(void *)&v297[14] = v253;
      *(void *)&v297[24] = v250;
      *(void *)&v297[34] = v190;
      *(void *)&v297[44] = v191;
      *(_WORD *)&v297[52] = 2050;
      *(void *)&v297[54] = v192;
      *(void *)&v300[2] = v193;
      *(void *)&v300[12] = v246;
      *(_DWORD *)((char *)&v301 + 2) = v244;
      *((void *)&v301 + 1) = v196;
      *(void *)&v302[2] = v197;
      *(void *)&v302[22] = v207;
      LODWORD(v303) = v208;
      *(_DWORD *)((char *)&v303 + 6) = v209;
      HIDWORD(v303) = v210;
      *(_DWORD *)&v304[2] = v211;
      v306 = v203;
      v308 = v205;
      *(void *)v310 = v206;
      *(_WORD *)&v297[12] = 2081;
      *(_WORD *)&v297[22] = 2081;
      *(_WORD *)v300 = 2081;
      *(_WORD *)&v300[10] = 2081;
      __int16 v305 = 2081;
      __int16 v307 = 2081;
      __int16 v309 = 2081;
      *(_WORD *)&v310[8] = 2081;
      *(void *)&v310[10] = v212;
      *(_WORD *)&v300[20] = 1025;
      *(_WORD *)&v300[26] = 1025;
      LOWORD(v301) = 1025;
      *(_WORD *)&v302[30] = 1025;
      WORD2(v303) = 1025;
      WORD5(v303) = 1025;
      *(_WORD *)v304 = 1025;
      *(_WORD *)&v304[16] = 1025;
      *(_WORD *)&v310[18] = 1025;
      *(_DWORD *)v311 = v270;
      *(_WORD *)&v297[32] = 2049;
      *(_WORD *)&v297[42] = 2049;
      __int16 v298 = 2049;
      WORD3(v301) = 2049;
      *(_WORD *)v302 = 2049;
      *(_WORD *)&v302[10] = 2049;
      *(_WORD *)&v302[20] = 2049;
      *(_WORD *)&v304[6] = 2049;
      *(_WORD *)&v311[4] = 2049;
      BOOL v55 = v261;
      int v313 = v262;
      *(_DWORD *)((char *)&v314 + 2) = log;
      WORD3(v314) = 2048;
      __int16 v312 = 1024;
      LOWORD(v314) = 1024;
      LOWORD(v315) = 1024;
      WORD3(v315) = 1024;
      DWORD2(v315) = v213;
      double v214 = *(double *)(v8 + 56);
      double v215 = v14 - v214;
      BOOL v154 = v214 <= 0.0;
      double v216 = -1.0;
      if (!v154) {
        double v216 = v215;
      }
      *(_DWORD *)v297 = 136388867;
      double v299 = v20;
      *(_DWORD *)&v300[22] = v261;
      *(_DWORD *)&v300[28] = v273;
      *(double *)&v302[12] = v198;
      *(double *)&v304[8] = v201;
      *(_DWORD *)&v304[18] = v268;
      *(double *)&v311[6] = v216;
      v217 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v325.conservativeMountedState) < 0) {
        operator delete(*(void **)&v325.type);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v217);
      if (v217 != buf) {
        free(v217);
      }
      int v171 = v272;
      unint64_t v104 = v274;
      int v172 = v271;
    }
    int v173 = v287;
    if (v287 != -1)
    {
      *(_DWORD *)uint64_t v8 = v287;
      if (v171 == 1 && !v173)
      {
        int v172 = 1;
LABEL_324:
        *(_DWORD *)(v8 + 68) = v172;
        goto LABEL_325;
      }
      if (!v173 && v104 != 2 && v172 == 2) {
        goto LABEL_324;
      }
    }
LABEL_325:
    if (!v55 && !v273) {
      goto LABEL_371;
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F7C40);
    }
    v174 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleLocationMonitoredFence";
      _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "%s, issuing state/transition", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      *(_DWORD *)v297 = 136315138;
      *(void *)&v297[4] = "handleLocationMonitoredFence";
      v204 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v204);
      if (v204 != buf) {
        free(v204);
      }
    }
    sub_100D8EB6C(v297);
    std::string::operator=((std::string *)v297, (const std::string *)v9);
    int v171 = v272;
    std::string::operator=((std::string *)&v297[24], (const std::string *)(v9 + 24));
    std::string::operator=((std::string *)&v297[48], (const std::string *)(v9 + 48));
    *(_OWORD *)&v302[16] = *(_OWORD *)(v9 + 136);
    long long v303 = *(_OWORD *)(v9 + 152);
    *(_OWORD *)v304 = *(_OWORD *)(v9 + 168);
    *(void *)&v304[13] = *(void *)(v9 + 181);
    *(_OWORD *)v300 = *(_OWORD *)(v9 + 72);
    *(_OWORD *)&v300[16] = *(_OWORD *)(v9 + 88);
    long long v301 = *(_OWORD *)(v9 + 104);
    *(_OWORD *)v302 = *(_OWORD *)(v9 + 120);
    std::string::operator=((std::string *)&v306, (const std::string *)(v9 + 192));
    v175 = *(void **)&v310[4];
    *(void *)&v310[4] = *(id *)(v9 + 216);

    if (v297 != (unsigned char *)v9) {
      sub_10027C3B4(&v310[12], *(char **)(v9 + 224), *(void *)(v9 + 232), (uint64_t)(*(void *)(v9 + 232) - *(void *)(v9 + 224)) >> 4);
    }
    *(void *)&v302[8] = *(void *)(v8 + 40);
    long long v321 = v295;
    *(_OWORD *)v322 = v296[0];
    *(_OWORD *)&v322[12] = *(_OWORD *)((char *)v296 + 12);
    long long v317 = v291;
    long long v318 = v292;
    *(_DWORD *)&v302[16] = v268;
    long long v319 = v293;
    long long v320 = v294;
    long long v315 = *(_OWORD *)&v289[16];
    long long v316 = v290;
    long long v314 = *(_OWORD *)v289;
    double v176 = *(double *)(v8 + 56);
    double v177 = v14 - v176;
    BOOL v154 = v176 <= 0.0;
    int v313 = v287;
    int v323 = v272;
    double v178 = -1.0;
    if (!v154) {
      double v178 = v177;
    }
    *(double *)&long long v303 = v178;
    *(_DWORD *)&v302[24] = sub_100DDAF8C(v15 + 904, (unsigned __int8 *)v9);
    *(_DWORD *)&v302[20] = sub_100DDAFCC(v15 + 904);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F7C40);
    }
    v179 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleLocationMonitoredFence";
      _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_DEFAULT, "%s, collecting state change metrics", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      v325.type = 136315138;
      *(void *)&v325.confidence = "handleLocationMonitoredFence";
      v218 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v218);
      if (v218 != buf) {
        free(v218);
      }
    }
    memcpy(v324, __src, sizeof(v324));
    long long v180 = *(_OWORD *)(v15 + 1728);
    *(_OWORD *)&v324[9] = *(_OWORD *)(v15 + 1712);
    *(_OWORD *)&v324[11] = v180;
    *(_OWORD *)&v324[13] = *(_OWORD *)(v15 + 1744);
    v324[15] = *(void *)(v15 + 1760);
    long long v181 = *(_OWORD *)(v15 + 1664);
    *(_OWORD *)&v324[1] = *(_OWORD *)(v15 + 1648);
    *(_OWORD *)&v324[3] = v181;
    long long v182 = *(_OWORD *)(v15 + 1696);
    *(_OWORD *)&v324[5] = *(_OWORD *)(v15 + 1680);
    *(_OWORD *)&v324[7] = v182;
    *(_DWORD *)uint64_t buf = 6;
    sub_100DBB74C(v15, buf, (uint64_t)v297);
    unint64_t v104 = v274;
    if (v55)
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      v183 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleLocationMonitoredFence";
        _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEFAULT, "%s, issuing transition", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F7C40);
        }
        v325.type = 136315138;
        *(void *)&v325.confidence = "handleLocationMonitoredFence";
        v219 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v219);
        if (v219 != buf) {
          free(v219);
        }
        int v171 = v272;
      }
      *(_DWORD *)uint64_t buf = 0;
      sub_100DBB74C(v15, buf, (uint64_t)v297);
      if (sub_100F5E718((unsigned char *)(v15 + 1312)))
      {
        (*(void (**)(CLMotionActivity *__return_ptr))(**(void **)(v15 + 1768) + 128))(&v325);
        char v184 = (*(uint64_t (**)(void))(**(void **)(v15 + 1768) + 16))(*(void *)(v15 + 1768));
        sub_100F608A4((uint64_t)buf, (uint64_t)v297, (double *)v8, (long long *)(v15 + 1648), &v325, (uint64_t)v289, v15 + 144, v184, v14, *(unsigned char *)(v15 + 613), *(unsigned char *)(v15 + 728));
        sub_100F608B8((uint64_t)buf);
        if (*((void *)&v349 + 1))
        {
          *(void *)v350 = *((void *)&v349 + 1);
          operator delete(*((void **)&v349 + 1));
        }
        if ((buf[31] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[8]);
        }
      }
      *(double *)(v8 + 56) = v14;
      *(_DWORD *)(v8 + 64) = v294;
LABEL_359:
      unint64_t v104 = v274;
      goto LABEL_360;
    }
    if (v273)
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F7C40);
      }
      v185 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleLocationMonitoredFence";
        _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEFAULT, "%s, issuing state", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F7C40);
        }
        v325.type = 136315138;
        *(void *)&v325.confidence = "handleLocationMonitoredFence";
        v228 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)", "%s\n", v228);
        if (v228 != buf) {
          free(v228);
        }
        int v171 = v272;
      }
      *(_DWORD *)uint64_t buf = 1;
      sub_100DBB74C(v15, buf, (uint64_t)v297);
      goto LABEL_359;
    }
LABEL_360:
    if (*(void *)&v310[12])
    {
      *(void *)v311 = *(void *)&v310[12];
      operator delete(*(void **)&v310[12]);
    }

    if ((v310[3] & 0x80000000) != 0) {
      operator delete(v306);
    }
    if (SHIBYTE(v299) < 0) {
      operator delete(*(void **)&v297[48]);
    }
    if ((v297[47] & 0x80000000) != 0) {
      operator delete(*(void **)&v297[24]);
    }
    if ((v297[23] & 0x80000000) != 0) {
      operator delete(*(void **)v297);
    }
    int v173 = v287;
LABEL_371:
    if (*(double *)(v8 + 32) < 0.0
      || vabdd_f64(*(double *)(v8 + 24), v20) >= 100.0
      || v173 != v171
      || *(_DWORD *)(v8 + 68) != v104)
    {
      unint64_t v104 = v173 != v171;
      int v186 = sub_100DC8898(v15, v9, (_DWORD *)v8, (uint64_t)v289);
      sub_100DC7C50(v15, (const void **)v9, (_DWORD *)v8, v186, v104, v14);
      *(double *)(v8 + 24) = v20;
      *(double *)(v8 + 32) = v14;
    }
    int v187 = v294;
    if (v294 > 0xD) {
      goto LABEL_381;
    }
    if (((1 << v294) & 0x2E1E) != 0) {
      break;
    }
    if (v294 != 5) {
      goto LABEL_381;
    }
    sub_101A8EA54();
    __break(1u);
LABEL_386:
    ;
  }
  *(double *)(v8 + 40) = v14;
  *(_DWORD *)(v8 + 48) = v187;
  *(double *)(v8 + 16) = v20;
  if ((*(unsigned char *)(v9 + 160) & 0x80) != 0 || *(unsigned char *)(v9 + 176))
  {
    *(_DWORD *)(v8 + 80) = sub_1007773E4((uint64_t)v289, v9, (_DWORD *)v8);
    *(_DWORD *)(v8 + 84) = 0;
    *(double *)(v8 + 72) = v14;
  }
LABEL_381:
  if (sub_1001AF7CC(v15 + 904, v14)) {
    sub_100F5F9BC(v15 + 1312);
  }
}

void sub_100016D20(_Unwind_Exception *a1)
{
}

uint64_t sub_100016E64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_100016E6C(uint64_t a1)
{
  return sub_100016E64(a1 + 2064);
}

void sub_100016E74()
{
}

void sub_100016F0C()
{
}

void sub_100016F30(uint64_t a1)
{
  double v2 = sub_100036BC0(a1);
  double v3 = objc_opt_new();
  int v4 = *(void **)(a1 + 392);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003C14B4;
  v5[3] = &unk_1022ADD30;
  *(double *)&v5[5] = v2;
  v5[4] = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v5];
  [*(id *)(a1 + 392) removeObjectsForKeys:v3];
}

BOOL sub_1000171E8(void *a1, double *a2)
{
  uint64_t v2 = a1[5];
  BOOL result = 0;
  if (v2)
  {
    if (*a2 < 0.0
      || (unint64_t v7 = v2 + a1[4] - 1,
          uint64_t v8 = *(void *)(a1[1] + 8 * (v7 / 0x1C)),
          uint64_t v9 = sub_10016BA10(),
          int v12 = 1,
          double v10 = sub_10016BA54(v9, &v12),
          double v11 = *(double *)(v8 + 144 * (v7 % 0x1C)),
          v11 >= 0.0)
      && (v10 < v11 || v10 - v11 <= *a2))
    {
      if (CLMotionActivity::isTypeStatic())
      {
        unint64_t v5 = a1[5] + a1[4] - 1;
        if (*(int *)(*(void *)(a1[1] + 8 * (v5 / 0x1C)) + 144 * (v5 % 0x1C) + 12) > 0) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100017358(uint64_t **a1, int a2, int a3, double a4)
{
  int v11 = a2;
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102300550);
  }
  uint64_t v8 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = a2;
    __int16 v18 = 1026;
    int v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client interest changed\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"is interested\":%{public}d}", buf, 0x22u);
  }
  uint64_t v9 = a1 + 1;
  if (a3) {
    sub_1000EDED4(v9, &v11, &v11);
  }
  else {
    sub_1000ED9F4((uint64_t)v9, &v11);
  }
  return ((uint64_t (*)(uint64_t **, double))(*a1)[12])(a1, a4);
}

void sub_1000174B8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C5130);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C5130);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10019C2CC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100017674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100017694(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022AF238;
  sub_10001B064(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1000176FC(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = sub_100103E24((uint64_t)a1, a2);
  id v30 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    [v5 cppClientKey];
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)long long v32 = 0;
    *(void *)&v32[8] = 0;
  }
  v23[0] = (uint64_t *)buf;
  int v6 = sub_100024ABC((uint64_t)(a1 + 122), buf, (uint64_t)&unk_101D0B290, (long long **)v23) + 40;
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)uint64_t buf = &v29;
  uint64_t v7 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v8 = (std::__shared_weak_count *)v7[4];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      double v10 = (const void *)v7[3];
      if (v10)
      {
        if (!v11)
        {
          *a3 = 0;
          a3[1] = 0;
          if (qword_102419530 != -1) {
            goto LABEL_48;
          }
          while (1)
          {
            __int16 v18 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)long long v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            uint64_t v19 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)long long v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            double v20 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)long long v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            abort_report_np();
            __break(1u);
LABEL_48:
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        *a3 = v11;
        a3[1] = v9;
        goto LABEL_36;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  int v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    *(void *)uint64_t buf = 68289538;
    *(_WORD *)long long v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = (unint64_t)"17CLSLCSubscription" & 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)&v32[20] = 2114;
    *(void *)&v32[22] = v30;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  long long v28 = sub_100122128((uint64_t)a1, (uint64_t)v30, &xmmword_101D82EB8);
  if (v30)
  {
    [v30 cppClientKey];
  }
  else
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
  }
  sub_1010AB560(__p);
  sub_1001A5B94((char *)buf, &v26, (long long *)__p, (uint64_t)v29);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  sub_1007E4924(a1 + 4, (uint64_t *)&v28, (uint64_t *)&v30, (uint64_t)buf, v23);
  __int16 v14 = v23[0];
  int v13 = v23[1];
  *a3 = v23[0];
  a3[1] = v13;
  v23[0] = (uint64_t *)&v29;
  uint64_t v15 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, v23);
  if (v13) {
    atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
  }
  __int16 v16 = (std::__shared_weak_count *)v15[4];
  v15[3] = v14;
  v15[4] = v13;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[128];
  uint64_t v21 = a1[127];
  int v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1001962A8(v14, &v21);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v33 < 0) {
    operator delete(*(void **)&v32[16]);
  }
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v9) {
LABEL_36:
  }
    sub_1000DB0A0(v9);
}

void sub_100017C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000DB0A0(v29);
  if (*(void *)(v28 + 8)) {
    sub_1000DB0A0(*(std::__shared_weak_count **)(v28 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_100017E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100017E3C(id a1, unint64_t a2, unint64_t a3)
{
  double v5 = sub_1000D3D90(a3 - a2);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  int v6 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68290050;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    char v11 = "elapsed";
    __int16 v12 = 2050;
    unint64_t v13 = a2;
    __int16 v14 = 2050;
    unint64_t v15 = a3;
    __int16 v16 = 2050;
    double v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reduceFreePages\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\"}", (uint8_t *)v7, 0x3Au);
  }
}

uint64_t sub_100017F64(uint64_t a1)
{
  *(void *)a1 = off_1022BE108;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_100017FD4(void *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    int v4 = (const void *)a1[1];
    if (v4) {
      CFRelease(v4);
    }
    a1[1] = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
    double v5 = *(uint64_t (**)(void *))(*a1 + 848);
    return v5(a1);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(*a1 + 872);
    return v7();
  }
}

void *sub_1000180B4(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100018190(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_100018190(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_100018190(a1 + 6, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4));
  return a1;
}

void sub_100018164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10014FEE0((void ***)va);
  sub_10014FEE0((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_100018190(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_100018218(result, a4);
    BOOL result = (void *)sub_10001826C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000181F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10014FEE0(&a9);
  _Unwind_Resume(a1);
}

char *sub_100018218(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1001D7FD4();
  }
  BOOL result = (char *)sub_10014F86C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t sub_10001826C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    int v6 = (long long *)(a2 + 24);
    do
    {
      long long v7 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 16) = *((void *)v6 - 1);
      *(_OWORD *)uint64_t v4 = v7;
      __int16 v8 = (unsigned char *)(v4 + 24);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000DC48C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v15;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 40) = *((void *)v6 + 2);
        *(_OWORD *)__int16 v8 = v9;
      }
      uint64_t v10 = (uint64_t)v6 - 24;
      v4 += 48;
      uint64_t v15 = v4;
      v6 += 3;
    }
    while (v10 + 48 != a3);
  }
  char v13 = 1;
  sub_100018344((uint64_t)v12);
  return v4;
}

void sub_100018330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100018344(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100436CE4(a1);
  }
  return a1;
}

void sub_10001837C(uint64_t a1, void *a2)
{
  if (objc_msgSend(objc_msgSend(a2, "attributions"), "containsObject:", *(void *)(a1 + 32)))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus adding attribution; already exists!\", \"AttributionIdentifier\":%{public, "
        "location:escape_only}@}",
        (uint8_t *)&v9,
        0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    int v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus adding attribution; already exists!",
        "{\"msg%{public}.0s\":\"#SystemStatus adding attribution; already exists!\", \"AttributionIdentifier\":%{public, "
        "location:escape_only}@}",
        (uint8_t *)&v9,
        0x1Cu);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    [a2 addAttribution:v8];
  }
}

void sub_100018728(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  id v9 = sub_100103D58(a1, a2);
  if ([v9 isAuthSharingSubIdentity]) {
    id v9 = [v9 anchorKeyPath];
  }
  if (a4 == 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#IncidentalPrompt CLCM:InUseAssertion IncidentalPresence\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1007AA6B8(a1, v9);
  }
  __int16 v11 = *(void **)(a1 + 376);
  if (v9)
  {
    [v9 cppClientKey];
  }
  else
  {
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v19 = 0;
  }
  std::string __p = *a3;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  sub_100098B10(&__p, v11, (uint64_t)v18, a4, (uint64_t *)a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  __int16 v12 = [(char *)[v9 legacyClientKey] UTF8String];
  if (v12) {
    __int16 v13 = v12;
  }
  else {
    __int16 v13 = "";
  }
  sub_100134750(buf, v13);
  if (sub_100186124(a5))
  {
    sub_10029A978(a1 + 616, buf, (uint64_t)buf);
    id v14 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:v9];
    if (v14)
    {
      if ([*(id *)(a1 + 392) objectForKeyedSubscript:v14])
      {
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_1000DC48C(v15, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)uint64_t v15 = *(_OWORD *)buf;
          uint64_t v16 = *(void *)&buf[16];
        }
        sub_1007AAF38(a1, (uint64_t *)v15);
        if (SHIBYTE(v16) < 0) {
          operator delete(v15[0]);
        }
        sub_1007AB170();
      }
    }
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100018988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_1001AB2CC(v33);
  _Unwind_Resume(a1);
}

void sub_1000189FC(uint64_t a1)
{
  uint64_t v2 = sub_1001B02F8(a1);
  [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:0];
  uint64_t v3 = sub_1001B01F0(a1);
  [*(id *)(*(void *)v3 + 16) unregister:*(void *)(*(void *)v3 + 8) forNotification:0];
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4) {
    [v4 clientName];
  }
  sub_1001C203C();
}

void sub_100018B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFAbsoluteTime sub_100018B28(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  if (!sub_1001072EC(a1, &v5, 1))
  {
    int v6 = 2;
    if (!sub_1001072EC(a1, &v6, 1))
    {
      int v7 = 1;
      if (!sub_1001072EC(a1, &v7, 1)) {
        return 1.79769313e308;
      }
    }
  }
  if (*(double *)(a1 + 1024) >= 0.0 && *(double *)(a2 + 20) >= 0.0) {
    return *(double *)(a2 + 76) + *(double *)(a1 + 1032);
  }
  return CFAbsoluteTimeGetCurrent();
}

uint64_t sub_100018BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 240);
  if (!v2) {
    return 1;
  }
  uint64_t v5 = 1;
  do
  {
    uint64_t v2 = (void *)*v2;
    --v5;
  }
  while (v2);
  if (v5)
  {
    if (sub_100E9BD78(a1)
      || *(_DWORD *)(a2 + 128) == 1
      && *(_DWORD *)(a1 + 908)
      && (unint64_t v17 = *(void *)(a1 + 288) + *(void *)(a1 + 280) - 1,
          uint64_t v18 = *(void *)(*(void *)(a1 + 256) + 8 * (v17 / 0x17)),
          unint64_t v19 = v17 % 0x17,
          (*(_DWORD *)(v18 + 176 * v19 + 160) - 6) <= 2)
      && *(double *)(v18 + 176 * v19 + 72) > 50.0)
    {
      int v6 = *(uint64_t **)(a1 + 240);
      if (v6)
      {
        int v7 = 0;
        do
        {
          int v8 = *((_DWORD *)v6 + 167);
          if (v8)
          {
            uint64_t v9 = v6[6];
            if (v9)
            {
              if (v8 == 1)
              {
                if (*(unsigned char *)(*(void *)(v6[2] + 8 * ((v9 + v6[5] - 1) / 0x17uLL))
                              + 176 * ((v9 + v6[5] - 1) % 0x17uLL)
                              + 168))
                {
                  sub_100022744((uint64_t)(v6 + 1), (double *)(a2 + 16));
                  if (*((_DWORD *)v6 + 180) == 1) {
                    int v7 = v6;
                  }
                }
              }
            }
          }
          int v6 = (uint64_t *)*v6;
        }
        while (v6);
        if (v7)
        {
          for (i = *(uint64_t **)(a1 + 240); i; i = (uint64_t *)*i)
          {
            if (*((_DWORD *)i + 165) != *((_DWORD *)v7 + 165))
            {
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              __int16 v11 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v12 = *((_DWORD *)i + 165);
                int v13 = *((_DWORD *)v7 + 165);
                *(_DWORD *)uint64_t buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v12;
                *(_WORD *)&uint8_t buf[8] = 1026;
                *(_DWORD *)&buf[10] = v13;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#selection,Rejecting hypothesis,hID,%{public}d,in favor of,hID,%{public}d", buf, 0xEu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1022FFA18);
                }
                int v14 = *((_DWORD *)i + 165);
                int v15 = *((_DWORD *)v7 + 165);
                LODWORD(v116) = 67240448;
                HIDWORD(v116) = v14;
                LOWORD(v117) = 1026;
                *(_DWORD *)((char *)&v117 + 2) = v15;
                uint64_t v16 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v16);
                if (v16 != buf) {
                  free(v16);
                }
              }
              *((_DWORD *)i + 167) = 4;
            }
          }
          return 1;
        }
      }
    }
  }
  if (!*(_DWORD *)(a1 + 908)) {
    return 1;
  }
  uint64_t v20 = *(void *)(a1 + 288);
  if (!v20) {
    return 1;
  }
  unint64_t v21 = v20 + *(void *)(a1 + 280) - 1;
  uint64_t v22 = *(void *)(a1 + 256);
  unint64_t v23 = v21 / 0x17;
  uint64_t v24 = *(void *)(v22 + 8 * (v21 / 0x17));
  unint64_t v25 = v21 % 0x17;
  if (!*(unsigned char *)(v24 + 176 * v25 + 168)) {
    return 1;
  }
  v116 = off_10232A710;
  uint64_t v26 = 176 * v25;
  uint64_t v27 = v24 + v26;
  long long v28 = *(_OWORD *)(v27 + 40);
  long long v29 = *(_OWORD *)(v27 + 56);
  long long v30 = *(_OWORD *)(v27 + 72);
  long long v120 = *(_OWORD *)(v27 + 88);
  long long v119 = v30;
  long long v118 = v29;
  long long v117 = v28;
  long long v31 = *(_OWORD *)(v27 + 104);
  long long v32 = *(_OWORD *)(v27 + 120);
  long long v33 = *(_OWORD *)(v27 + 136);
  *(_OWORD *)((char *)v123 + 12) = *(_OWORD *)(v27 + 148);
  v123[0] = v33;
  long long v122 = v32;
  long long v121 = v31;
  double v34 = *(double *)(*(void *)(v22 + 8 * v23) + v26 + 8);
  sub_100022744(a1 + 248, (double *)(a2 + 16));
  if ((*(_DWORD *)(a1 + 960) - 6) > 2 || (*(_DWORD *)(a2 + 128) - 6) > 2) {
    goto LABEL_42;
  }
  double v35 = sub_1000F1648((double *)(a1 + 1800), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)&v118, *((double *)&v118 + 1), *((double *)&v119 + 1));
  double v36 = (*(double *)&v119 * *(double *)&v119 + *(double *)(a2 + 40) * *(double *)(a2 + 40)) * 0.5;
  if (v36 < 2500000000.0) {
    double v36 = 2500000000.0;
  }
  double v37 = v35 * v35 / v36;
  if (v37 <= 36.0)
  {
LABEL_42:
    int v38 = *(uint64_t **)(a1 + 240);
    if (!v38) {
      return 1;
    }
    double v88 = (void *)(a1 + 1840);
    int v86 = (double *)(a1 + 184);
    double v87 = v34;
    while (1)
    {
      if (*((_DWORD *)v38 + 167))
      {
        uint64_t v39 = v38[6];
        if (v39)
        {
          unint64_t v40 = v39 + v38[5] - 1;
          uint64_t v41 = *(void *)(v38[2] + 8 * (v40 / 0x17));
          unint64_t v42 = v40 % 0x17;
          if (*(unsigned char *)(v41 + 176 * v42 + 168))
          {
            uint64_t v108 = off_10232A710;
            uint64_t v43 = v41 + 176 * v42;
            long long v44 = *(_OWORD *)(v43 + 40);
            long long v45 = *(_OWORD *)(v43 + 56);
            long long v46 = *(_OWORD *)(v43 + 88);
            long long v111 = *(_OWORD *)(v43 + 72);
            long long v112 = v46;
            long long v110 = v45;
            long long v47 = *(_OWORD *)(v43 + 104);
            long long v48 = *(_OWORD *)(v43 + 120);
            long long v49 = *(_OWORD *)(v43 + 136);
            *(_OWORD *)((char *)v115 + 12) = *(_OWORD *)(v43 + 148);
            long long v114 = v48;
            v115[0] = v49;
            long long v113 = v47;
            long long v109 = v44;
            double v50 = sub_1000F1648((double *)(a1 + 1800), *(double *)&v110, *((double *)&v110 + 1), *(double *)&v118, *((double *)&v118 + 1), *((double *)&v119 + 1));
            double v51 = *((double *)&v109 + 1) - v34;
            if (*((double *)&v109 + 1) - v34 >= -1.0 && v51 <= 900.0) {
              break;
            }
          }
        }
      }
LABEL_87:
      int v38 = (uint64_t *)*v38;
      if (!v38) {
        return 1;
      }
    }
    double v52 = fabs(v51);
    double v53 = fmax(v52 - *(double *)(a1 + 2136), 0.0);
    double v54 = v53 * 50.0;
    double v55 = fmax(*(double *)&v119 + v53 * 50.0, 1.0);
    double v56 = v50 / v55;
    if (v50 / v55 > 1.0) {
      goto LABEL_51;
    }
    if (sub_100031028((uint64_t)v88, &dbl_101D944D0)) {
      goto LABEL_51;
    }
    int v63 = *(_DWORD *)(a1 + 1912);
    if ((v63 - 1) >= 5 && v63 != 10) {
      goto LABEL_51;
    }
    if (v52 <= 6.0 || !*(unsigned char *)(a1 + 2096))
    {
      double v34 = v87;
      if (*(unsigned char *)(a1 + 2096)) {
        goto LABEL_53;
      }
LABEL_90:
      int v71 = *(_DWORD *)(a1 + 1912);
      if ((v71 - 3) < 8 || !v71)
      {
        if ((sub_100031028((uint64_t)v88, &dbl_101D944D0) & 1) != 0
          || (*(void *)uint64_t buf = 0xBFF0000000000000, sub_1001805B4(v88, (double *)buf)))
        {
          unint64_t v72 = v38[6] + v38[5] - 1;
          double v57 = 1.0;
          if (sub_100022DBC(*(void *)(v38[2] + 8 * (v72 / 0x17)) + 176 * (v72 % 0x17), v86) < 30.0) {
            double v57 = 3.0;
          }
          goto LABEL_54;
        }
      }
LABEL_53:
      double v57 = 1.0;
LABEL_54:
      unint64_t v58 = v38[6] + v38[5] - 1;
      if (*(unsigned char *)(*(void *)(v38[2] + 8 * (v58 / 0x17)) + 176 * (v58 % 0x17) + 156))
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        BOOL v59 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          *(void *)&uint8_t buf[4] = 0x4008000000000000;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#selection Inflating gate for associated AP to %{public}.1f", buf, 0xCu);
        }
        double v57 = 3.0;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          int v92 = 134349056;
          *(void *)int v93 = 0x4008000000000000;
          uint64_t v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v76);
          double v34 = v87;
          if (v76 != buf) {
            free(v76);
          }
        }
      }
      if (v56 <= v57)
      {
        if (*((_DWORD *)v38 + 167) == 4) {
          *((_DWORD *)v38 + 167) = 1;
        }
        unint64_t v62 = v38[6] + v38[5] - 1;
        if (sub_100022DBC(*(void *)(v38[2] + 8 * (v62 / 0x17)) + 176 * (v62 % 0x17), v86) <= 30.0)
        {
          unint64_t v70 = v38[6] + v38[5] - 1;
          *(_OWORD *)(*(void *)(v38[2] + 8 * (v70 / 0x17)) + 176 * (v70 % 0x17)) = *(_OWORD *)(a2 + 8);
        }
        else
        {
          *((_DWORD *)v38 + 167) = 0;
        }
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        uint64_t v60 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          int v61 = *((_DWORD *)v38 + 165);
          *(_DWORD *)uint64_t buf = 67110912;
          *(_DWORD *)&uint8_t buf[4] = v61;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(double *)&buf[10] = v56;
          __int16 v125 = 2050;
          double v126 = v57;
          __int16 v127 = 2050;
          double v128 = v52;
          __int16 v129 = 2050;
          double v130 = v53;
          __int16 v131 = 2050;
          double v132 = v54;
          __int16 v133 = 2050;
          double v134 = v55;
          __int16 v135 = 2050;
          double v136 = v50;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#selection,Rejecting inconsistence hypothesis,hID,%d,ndis,%{public}.3f,gating,%{public}.1f,dt,%{public}.3f,dtNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,%{public}.3f", buf, 0x4Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          int v77 = *((_DWORD *)v38 + 165);
          int v92 = 67110912;
          *(_DWORD *)int v93 = v77;
          *(_WORD *)&v93[4] = 2050;
          *(double *)&v93[6] = v56;
          __int16 v94 = 2050;
          double v95 = v57;
          __int16 v96 = 2050;
          double v97 = v52;
          __int16 v98 = 2050;
          double v99 = v53;
          __int16 v100 = 2050;
          double v101 = v54;
          __int16 v102 = 2050;
          double v103 = v55;
          __int16 v104 = 2050;
          double v105 = v50;
          int v78 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v78);
          double v34 = v87;
          if (v78 != buf) {
            free(v78);
          }
        }
        *((_DWORD *)v38 + 167) = 4;
      }
      goto LABEL_87;
    }
    sub_100E9D7D0(*(void *)(a1 + 1696), (uint64_t)&v89);
    if (v89 >= 0.0 && (*((double *)&v109 + 1) < v89 || *((double *)&v109 + 1) - v89 <= 6.0)
      || (*(void *)uint64_t buf = 0xBFF0000000000000, sub_1000171E8(v88, (double *)buf)))
    {
      double v64 = v90;
      double v65 = *(double *)&v119;
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v54 = fmax(v64 * 3.0, 25.0);
      double v55 = fmax(v65 + v54, 1.0);
      double v56 = v50 / v55;
      int v66 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        int v67 = *((_DWORD *)v38 + 165);
        *(_DWORD *)uint64_t buf = 67111168;
        *(_DWORD *)&uint8_t buf[4] = v67;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(double *)&buf[10] = v50 / v55;
        __int16 v125 = 2050;
        double v126 = v52;
        __int16 v127 = 2050;
        double v128 = v53;
        __int16 v129 = 2050;
        double v130 = v54;
        __int16 v131 = 2050;
        double v132 = v55;
        __int16 v133 = 2050;
        double v134 = v50;
        __int16 v135 = 2050;
        double v136 = v90;
        __int16 v137 = 2050;
        double v138 = v91;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#selection,IO-based distance moved xCheck,hID,%d,ndis,%{public}.3f,dt,%{public}.3f,dtNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", buf, 0x58u);
      }
      double v34 = v87;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        int v68 = *((_DWORD *)v38 + 165);
        int v92 = 67111168;
        *(_DWORD *)int v93 = v68;
        *(_WORD *)&v93[4] = 2050;
        *(double *)&v93[6] = v50 / v55;
        __int16 v94 = 2050;
        double v95 = v52;
        __int16 v96 = 2050;
        double v97 = v53;
        __int16 v98 = 2050;
        double v99 = v54;
        __int16 v100 = 2050;
        double v101 = v55;
        __int16 v102 = 2050;
        double v103 = v50;
        __int16 v104 = 2050;
        double v105 = v90;
        __int16 v106 = 2050;
        double v107 = v91;
        uint64_t v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v69);
LABEL_107:
        if (v69 != buf) {
          free(v69);
        }
LABEL_51:
        double v34 = v87;
      }
    }
    else
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v34 = v87;
      __int16 v73 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        int v74 = *((_DWORD *)v38 + 165);
        *(_DWORD *)uint64_t buf = 67241216;
        *(_DWORD *)&uint8_t buf[4] = v74;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(void *)&buf[10] = *((void *)&v109 + 1);
        __int16 v125 = 2050;
        double v126 = v89;
        __int16 v127 = 2050;
        double v128 = v90;
        __int16 v129 = 2050;
        double v130 = v91;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "#selection,IO data usage timed out,hID,%{public}d,hypo_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        int v75 = *((_DWORD *)v38 + 165);
        int v92 = 67241216;
        *(_DWORD *)int v93 = v75;
        *(_WORD *)&v93[4] = 2050;
        *(void *)&v93[6] = *((void *)&v109 + 1);
        __int16 v94 = 2050;
        double v95 = v89;
        __int16 v96 = 2050;
        double v97 = v90;
        __int16 v98 = 2050;
        double v99 = v91;
        uint64_t v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v69);
        goto LABEL_107;
      }
    }
    if (*(unsigned char *)(a1 + 2096)) {
      goto LABEL_53;
    }
    goto LABEL_90;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  __int16 v79 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    int v80 = *(_DWORD *)(a1 + 900);
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v80;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(double *)&buf[10] = v37;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "#selection,Rejecting last yielded/selected hypothesis,hID,%{public}d,in favor of new location/hypothesis,ratio,%{public}.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v84 = *(_DWORD *)(a1 + 900);
    LODWORD(v108) = 67240448;
    HIDWORD(v108) = v84;
    LOWORD(v109) = 2050;
    *(double *)((char *)&v109 + 2) = v37;
    __int16 v85 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)", "%s\n", v85);
    if (v85 != buf) {
      free(v85);
    }
  }
  int v81 = *(uint64_t **)(a1 + 240);
  if (v81)
  {
    int v82 = *(_DWORD *)(a1 + 900);
    do
    {
      if (*((_DWORD *)v81 + 165) == v82) {
        *((_DWORD *)v81 + 167) = 4;
      }
      int v81 = (uint64_t *)*v81;
    }
    while (v81);
  }
  bzero(buf, 0x2D0uLL);
  sub_1008A93D4((uint64_t)buf);
  sub_100E98064(a1 + 248, (uint64_t)buf);
  sub_1008A9614(buf);
  return 1;
}

void sub_100019D0C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100019D24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v10 = a3;
  ++*(_DWORD *)(a1 + 204);
  if (*(unsigned char *)(a1 + 88) && (a3 == 5 || !a3))
  {
    sub_1000E65E0(a1);
    double v6 = *(double *)(a4 + 20);
    BOOL v7 = v6 > 0.0 && v6 < 200.0;
    if (v7 && (sub_1000E6694(a1) & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 440))
      {
        sub_1001A7F0C(a1, a1 + 1336);
      }
      else
      {
        if (sub_1001A7F0C(a1, a1 + 936))
        {
          uint64_t v8 = a1;
          int v9 = 0;
        }
        else
        {
          uint64_t v8 = a1;
          int v9 = 1;
        }
        sub_1001A7CCC(v8, v9);
      }
    }
    if (sub_1000E6694(a1)) {
      sub_101093390(a1 + 608, (uint64_t)&v10, a4, 0);
    }
    sub_1001A7D50(a1);
  }
}

void sub_100019E08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  BOOL v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  int v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100019EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100019ECC(void *a1, void **a2, double a3, double a4)
{
  unint64_t v7 = a1[6];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  int v10 = (void *)(v8 + 8 * (v7 >> 8));
  if (v9 == v8) {
    __int16 v11 = 0;
  }
  else {
    __int16 v11 = (_OWORD *)(*v10 + 16 * v7);
  }
  double v12 = a4 + 1.0e-13;
  while (1)
  {
    if (v9 == v8)
    {
      uint64_t v14 = 0;
    }
    else
    {
      unint64_t v13 = a1[7] + a1[6];
      uint64_t v14 = *(void *)(v8 + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v13;
    }
    if (v11 == (_OWORD *)v14) {
      break;
    }
    if (*(double *)v11 <= v12 && *(double *)v11 + 1.0e-13 > a3)
    {
      unint64_t v17 = a2[1];
      unint64_t v16 = (unint64_t)a2[2];
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v19 = ((char *)v17 - (unsigned char *)*a2) >> 4;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v21 = v16 - (void)*a2;
        if (v21 >> 3 > v20) {
          unint64_t v20 = v21 >> 3;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          unint64_t v23 = (char *)sub_1000C571C((uint64_t)(a2 + 2), v22);
        }
        else {
          unint64_t v23 = 0;
        }
        uint64_t v24 = &v23[16 * v19];
        *(_OWORD *)uint64_t v24 = *v11;
        uint64_t v26 = (char *)*a2;
        unint64_t v25 = (char *)a2[1];
        uint64_t v27 = v24;
        if (v25 != *a2)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }
          while (v25 != v26);
          unint64_t v25 = (char *)*a2;
        }
        uint64_t v18 = v24 + 16;
        *a2 = v27;
        a2[1] = v24 + 16;
        a2[2] = &v23[16 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        _OWORD *v17 = *v11;
        uint64_t v18 = v17 + 1;
      }
      a2[1] = v18;
    }
    if ((_OWORD *)((char *)++v11 - *v10) == (_OWORD *)4096)
    {
      long long v28 = (_OWORD *)v10[1];
      ++v10;
      __int16 v11 = v28;
    }
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
  }
}

void sub_10001A084(uint64_t a1)
{
  *(_DWORD *)uint64_t buf = 0;
  uint64_t v2 = sub_1000A6958();
  sub_10006EF84(v2, "CLIgneousArmMinutes", buf);
  int v3 = *(_DWORD *)buf;
  buf[0] = 0;
  uint64_t v4 = sub_1000A6958();
  sub_1000D2988(v4, "CLIgneousArmStatus", (BOOL *)buf);
  int v5 = buf[0];
  double Current = CFAbsoluteTimeGetCurrent();
  if (v5)
  {
    double v7 = Current;
    double v8 = *(double *)(a1 + 464);
    if (v8 > 0.0)
    {
      unsigned int v9 = llround((v7 - v8) / 60.0);
      v14[0] = (v3 - v9) & ~((int)(v3 - v9) >> 31);
      *(double *)(a1 + 464) = v7;
      uint64_t v10 = sub_1000A6958();
      sub_1000EA838(v10, "CLIgneousArmMinutes", v14);
      uint64_t v11 = *(void *)sub_1000A6958();
      (*(void (**)(void))(v11 + 944))();
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      double v12 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240448;
        int v18 = v14[0];
        __int16 v19 = 2050;
        double v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "saved Igneous arm minutes,%{public}d,now,%{public}f", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        v14[1] = 67240448;
        v14[2] = v14[0];
        __int16 v15 = 2050;
        double v16 = v7;
        unint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::saveIgneousArmMinutes()", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10001A4C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = sub_10001A540((unsigned __int8 *)(v3 + 32), a2);
    double v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      double v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10001A540(a2, (unsigned __int8 *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

uint64_t sub_10001A540(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = (const void **)(a1 + 48);
  signed __int8 v3 = a1[71];
  if (v3 >= 0) {
    size_t v4 = a1[71];
  }
  else {
    size_t v4 = *((void *)a1 + 7);
  }
  int v5 = (char)a2[71];
  if (v5 >= 0) {
    size_t v6 = a2[71];
  }
  else {
    size_t v6 = *((void *)a2 + 7);
  }
  if (v5 >= 0) {
    double v7 = a2 + 48;
  }
  else {
    double v7 = (unsigned __int8 *)*((void *)a2 + 6);
  }
  if (v4 != v6) {
    goto LABEL_18;
  }
  if ((a1[71] & 0x80) != 0)
  {
    if (!memcmp(*v2, v7, *((void *)a1 + 7))) {
      goto LABEL_25;
    }
LABEL_18:
    if (v3 >= 0) {
      unint64_t v13 = v2;
    }
    else {
      unint64_t v13 = *v2;
    }
    if (v6 >= v4) {
      size_t v14 = v4;
    }
    else {
      size_t v14 = v6;
    }
    int v15 = memcmp(v13, v7, v14);
    BOOL v16 = v4 >= v6;
    goto LABEL_72;
  }
  if (a1[71])
  {
    uint64_t v10 = v7;
    uint64_t v11 = a1 + 48;
    uint64_t v12 = a1[71];
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        goto LABEL_25;
      }
    }
    goto LABEL_18;
  }
LABEL_25:
  signed __int8 v17 = a1[23];
  if (v17 >= 0) {
    size_t v18 = a1[23];
  }
  else {
    size_t v18 = *((void *)a1 + 1);
  }
  unsigned __int8 v19 = a2[23];
  if ((v19 & 0x80u) == 0) {
    size_t v20 = a2[23];
  }
  else {
    size_t v20 = *((void *)a2 + 1);
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = *(unsigned __int8 **)a2;
  }
  if (v18 != v20) {
    goto LABEL_42;
  }
  if ((a1[23] & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, v21, *((void *)a1 + 1))) {
      goto LABEL_49;
    }
LABEL_42:
    if (v17 >= 0) {
      unint64_t v25 = a1;
    }
    else {
      unint64_t v25 = *(const void **)a1;
    }
    if (v20 >= v18) {
      size_t v26 = v18;
    }
    else {
      size_t v26 = v20;
    }
    int v15 = memcmp(v25, v21, v26);
    BOOL v16 = v18 >= v20;
    goto LABEL_72;
  }
  if (a1[23])
  {
    unint64_t v22 = v21;
    unint64_t v23 = a1;
    uint64_t v24 = a1[23];
    while (*v23 == *v22)
    {
      ++v23;
      ++v22;
      if (!--v24) {
        goto LABEL_49;
      }
    }
    goto LABEL_42;
  }
LABEL_49:
  uint64_t v27 = (const void **)(a1 + 24);
  uint64_t v28 = a1[47];
  size_t v29 = *((void *)a1 + 4);
  if ((v28 & 0x80u) == 0) {
    size_t v30 = a1[47];
  }
  else {
    size_t v30 = *((void *)a1 + 4);
  }
  long long v33 = (unsigned __int8 *)*((void *)a2 + 3);
  long long v32 = a2 + 24;
  long long v31 = v33;
  int v34 = (char)v32[23];
  if (v34 >= 0) {
    size_t v35 = v32[23];
  }
  else {
    size_t v35 = *((void *)v32 + 1);
  }
  if (v34 < 0) {
    long long v32 = v31;
  }
  if (v30 == v35)
  {
    if ((v28 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v27, v32, v29);
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!v28) {
        return 0;
      }
      double v36 = v32;
      double v37 = v27;
      uint64_t v38 = v28;
      while (*(unsigned __int8 *)v37 == *v36)
      {
        uint64_t result = 0;
        double v37 = (const void **)((char *)v37 + 1);
        ++v36;
        if (!--v38) {
          return result;
        }
      }
    }
  }
  if ((v28 & 0x80u) == 0) {
    unint64_t v40 = v27;
  }
  else {
    unint64_t v40 = *v27;
  }
  if (v35 >= v30) {
    size_t v41 = v30;
  }
  else {
    size_t v41 = v35;
  }
  int v15 = memcmp(v40, v32, v41);
  BOOL v16 = v30 >= v35;
LABEL_72:
  unsigned int v42 = !v16;
  if (v15) {
    return v15 < 0;
  }
  else {
    return v42;
  }
}

std::string *sub_10001A794(const std::string *a1, unsigned int a2, uint64_t a3, double a4, double a5)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v9 = *(void *)(a3 + 32);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 44) |= 1u;
  *(double *)(v9 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v10 = *(void *)(a3 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 492) |= 0x4000000u;
  uint64_t v11 = *(void *)(v10 + 464);
  if (!v11) {
    operator new();
  }
  if (a2 - 1 >= 3) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = a2;
  }
  if (!sub_100165F14(v12)) {
    sub_101A762BC();
  }
  *(_DWORD *)(v11 + 36) |= 1u;
  *(_DWORD *)(v11 + 16) = v12;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v13 = *(void *)(a3 + 40);
  if (!v13) {
    operator new();
  }
  *(_DWORD *)(v13 + 492) |= 0x4000000u;
  uint64_t v14 = *(void *)(v13 + 464);
  if (!v14) {
    operator new();
  }
  *(_DWORD *)(v14 + 36) |= 2u;
  int v15 = *(std::string **)(v14 + 8);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  uint64_t result = std::string::operator=(v15, a1);
  if (a2 == 2)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    uint64_t v17 = *(void *)(a3 + 40);
    if (!v17) {
      operator new();
    }
    *(_DWORD *)(v17 + 492) |= 0x4000000u;
    uint64_t v18 = *(void *)(v17 + 464);
    if (!v18) {
      operator new();
    }
    float v19 = a5;
    *(_DWORD *)(v18 + 36) |= 4u;
    *(float *)(v18 + 20) = v19;
  }
  return result;
}

void sub_10001AA08()
{
}

void sub_10001AA60()
{
}

void *sub_10001B064(void *result)
{
  if ((void *)qword_102489D38 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[7];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[8];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[10];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t result = (void *)v1[11];
    if (result)
    {
      uint64_t v9 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v9();
    }
  }
  return result;
}

uint64_t sub_10001B20C(uint64_t a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301180);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
    uint64_t v6 = *(unsigned char **)__p;
    uint64_t v7 = "not entitled";
    if (v19 >= 0) {
      uint64_t v6 = __p;
    }
    if (isEntitled) {
      uint64_t v7 = "entitled";
    }
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    unint64_t v22 = v6;
    __int16 v23 = 2080;
    uint64_t v24 = v7;
    __int16 v25 = 2080;
    size_t v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301180);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(v14, a1);
    uint64_t v10 = (void **)v14[0];
    uint64_t v11 = "not entitled";
    if (v15 >= 0) {
      uint64_t v10 = v14;
    }
    if (isEntitled) {
      uint64_t v11 = "entitled";
    }
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v12 = a2;
    }
    else {
      unsigned int v12 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v10;
    __int16 v17 = 2080;
    uint64_t v18 = v11;
    __int16 v19 = 2080;
    size_t v20 = v12;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonInUseAssertion::isEntitled(const std::string &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return isEntitled;
}

uint64_t sub_10001BCB0(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 60);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 32), a2, a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 33), a2, a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 34), a2, a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 48), a2, a4);
    if ((*(_DWORD *)(v5 + 60) & 0x200) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 36), a2, a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v6 & 0x200) == 0) {
    return result;
  }
LABEL_21:
  int v7 = *(_DWORD *)(v5 + 52);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v7, a2, a4);
}

void sub_10001BEC0(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  char v21 = 0;
  sub_1000B71D0(&v21, (uint64_t)&__str);
  if (v21)
  {
    std::string::operator=((std::string *)(a2 + 24), &__str);
  }
  else
  {
    sub_1000B7144(&__str, (uint64_t)&v7);
    sub_1000B6DC8(a2, (long long *)&v7);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
  long long v5 = a1[1];
  v6[0] = *a1;
  v6[1] = v5;
  CLConnection::getUserNameFromAuditToken((uint64_t *)&v7, (CLConnection *)v6, v4);
  sub_1001A5B7C((std::string *)a2, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10001C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  sub_1000064D0(v19);
  _Unwind_Resume(a1);
}

id sub_10001C058(void *a1)
{
  uint64_t v6 = 0;
  id v2 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:a1 allowPlaceholder:0 error:&v6];
  if (v6)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      id v4 = [a1 UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      id v12 = v4;
      __int16 v13 = 2114;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LSApplicationRecord returned an error for bundleId on getLSApplicationRecord\", \"bundleID\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
  }
  return v2;
}

void sub_10001C190(uint64_t a1, uint64_t a2, int a3, int a4)
{
  std::string v7 = (unsigned char *)(a1 + 11544);
  uint64_t v8 = a2 + 160;
  double v9 = sub_100121610(a2, a2 + 160);
  double Current = CFAbsoluteTimeGetCurrent();
  if (v7[128])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000AB340(a2);
      if (v289 >= 0) {
        id v12 = v288;
      }
      else {
        id v12 = (void **)v288[0];
      }
      double v13 = *(float *)(a2 + 476);
      int v14 = *(_DWORD *)(a2 + 472);
      int v15 = *(_DWORD *)(a2 + 128);
      int v16 = *(_DWORD *)(a2 + 132);
      int v17 = *(_DWORD *)(a2 + 136);
      *(_DWORD *)uint64_t buf = 68291331;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      __int16 v280 = 2081;
      *(void *)v281 = v12;
      *(_WORD *)&v281[8] = 1026;
      *(_DWORD *)&v281[10] = v15;
      *(_WORD *)&v281[14] = 2050;
      *(double *)&v281[16] = v13;
      *(_WORD *)char v282 = 1026;
      *(_DWORD *)&v282[2] = v14;
      *(_WORD *)&v282[6] = 1026;
      *(_DWORD *)&v282[8] = v16;
      *(_WORD *)v283 = 1026;
      *(_DWORD *)&uint64_t v283[2] = v17;
      *(_WORD *)char v284 = 1026;
      *(_DWORD *)&v284[2] = a3;
      *(_WORD *)v285 = 2050;
      *(double *)&v285[2] = v9;
      __int16 v286 = 1026;
      int v287 = a4;
      uint64_t v18 = v11;
      os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      sub_1000AB340(a2);
      if (v289 >= 0) {
        char v21 = v288;
      }
      else {
        char v21 = (void **)v288[0];
      }
      double v22 = *(float *)(a2 + 476);
      int v23 = *(_DWORD *)(a2 + 472);
      int v24 = *(_DWORD *)(a2 + 128);
      int v25 = *(_DWORD *)(a2 + 132);
      int v26 = *(_DWORD *)(a2 + 136);
      *(_DWORD *)uint64_t buf = 68291331;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      __int16 v280 = 2081;
      *(void *)v281 = v21;
      *(_WORD *)&v281[8] = 1026;
      *(_DWORD *)&v281[10] = v24;
      *(_WORD *)&v281[14] = 2050;
      *(double *)&v281[16] = v22;
      *(_WORD *)char v282 = 1026;
      *(_DWORD *)&v282[2] = v23;
      *(_WORD *)&v282[6] = 1026;
      *(_DWORD *)&v282[8] = v25;
      *(_WORD *)v283 = 1026;
      *(_DWORD *)&uint64_t v283[2] = v26;
      *(_WORD *)char v284 = 1026;
      *(_DWORD *)&v284[2] = a3;
      *(_WORD *)v285 = 2050;
      *(double *)&v285[2] = v9;
      __int16 v286 = 1026;
      int v287 = a4;
      uint64_t v18 = v20;
      os_log_type_t v19 = OS_LOG_TYPE_DEBUG;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #GnssAssistancePosition,handlePositionAssistance\", \"location,\":%{private, location:escape_only}s, \"integrity\":%{public}d, \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d, \"referenceFrame\":%{public}d, \"rawReferenceFrame\":%{public}d, \"isCpiCandidate\":%{public}d, \"age\":\"%{public}.1f\", \"isExternalLocationHandling\":%{public}d}", buf, 0x54u);
      if (v289 < 0) {
        operator delete(v288[0]);
      }
    }
  }
  if (*(_DWORD *)(a2 + 96)) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = *(unsigned char *)(a2 + 516) == 0;
  }
  int v28 = !v27;
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (v7[128])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v36 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,hunc invalid\"}";
      double v37 = v36;
      os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v41 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,hunc invalid\"}";
      double v37 = v41;
      os_log_type_t v38 = OS_LOG_TYPE_DEBUG;
    }
    uint32_t v42 = 18;
    goto LABEL_129;
  }
  int v29 = sub_1001833E4(a1);
  int v30 = v29;
  int v31 = *(_DWORD *)(a2 + 96);
  if ((v31 == 11 || v31 == 4) && !v7[128] && ((v29 & 1) != 0 || *(unsigned char *)(a1 + 1571)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v48 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    int v49 = v7[128];
    int v50 = *(unsigned __int8 *)(a1 + 1571);
    *(_DWORD *)uint64_t buf = 68289794;
    int v277 = 0;
    __int16 v278 = 2082;
    v279 = "";
    __int16 v280 = 1026;
    *(_DWORD *)v281 = v49;
    *(_WORD *)&v281[4] = 1026;
    *(_DWORD *)&v281[6] = v30;
    *(_WORD *)&v281[10] = 1026;
    *(_DWORD *)&v281[12] = v50;
    size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,ignoring wifi location assistance in tunnel or a"
          "irborne\", \"InEmergency\":%{public}d, \"InTunnel\":%{public}d, \"IsAirborne\":%{public}d}";
    double v37 = v48;
    os_log_type_t v38 = OS_LOG_TYPE_DEBUG;
    uint32_t v42 = 36;
    goto LABEL_129;
  }
  if (*(double *)(a1 + 6428) > 0.0)
  {
    uint64_t v32 = 3080;
    if (a3) {
      uint64_t v32 = 3236;
    }
    if (sub_10019E45C(a1, a2, a1 + v32 + 1576))
    {
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v33 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        int v34 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)uint64_t buf = 68289282;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 1026;
        *(_DWORD *)v281 = v34;
        size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isCellOverridingRecentWifi\", \"location.type\":%{public}d}";
LABEL_102:
        double v37 = v33;
        os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
LABEL_128:
        uint32_t v42 = 24;
        goto LABEL_129;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v51 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      int v53 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)uint64_t buf = 68289282;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      __int16 v280 = 1026;
      *(_DWORD *)v281 = v53;
      size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isCellOverridingRecentWifi\", \"location.type\":%{public}d}";
      goto LABEL_127;
    }
  }
  if (a3) {
    uint64_t v39 = a1 + 4812;
  }
  else {
    uint64_t v39 = a1 + 4656;
  }
  uint64_t v274 = v39;
  if (sub_10019DD38(a1, a2, v39))
  {
    if (v7[128])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v33 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v40 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)uint64_t buf = 68289282;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      __int16 v280 = 1026;
      *(_DWORD *)v281 = v40;
      size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isWifiOverridingRecentPipeline\", \"location.t"
            "ype\":%{public}d}";
      goto LABEL_102;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v51 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    int v52 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)uint64_t buf = 68289282;
    int v277 = 0;
    __int16 v278 = 2082;
    v279 = "";
    __int16 v280 = 1026;
    *(_DWORD *)v281 = v52;
    size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isWifiOverridingRecentPipeline\", \"location.type\":%{public}d}";
LABEL_127:
    double v37 = v51;
    os_log_type_t v38 = OS_LOG_TYPE_DEBUG;
    goto LABEL_128;
  }
  if (*v7)
  {
    double v43 = sub_100121610(a1 + 10744, a1 + 10904);
    if (v43 < 0.0 || v43 > 10.0)
    {
      long long v44 = *(void ***)(a1 + 8176);
      uint64_t v45 = *(void *)(a1 + 8184);
      *(void *)(a1 + 8208) = 0;
      unint64_t v46 = v45 - (void)v44;
      if (v46 >= 0x11)
      {
        do
        {
          operator delete(*v44);
          long long v44 = (void **)(*(void *)(a1 + 8176) + 8);
          *(void *)(a1 + 8176) = v44;
          unint64_t v46 = *(void *)(a1 + 8184) - (void)v44;
        }
        while (v46 > 0x10);
      }
      if (v46 >> 3 == 1)
      {
        uint64_t v47 = 256;
        goto LABEL_79;
      }
      if (v46 >> 3 == 2)
      {
        uint64_t v47 = 512;
LABEL_79:
        *(void *)(a1 + 8200) = v47;
      }
    }
  }
  if (*(double *)(a2 + 44) >= 0.0 && *(double *)(a2 + 52) > 0.0)
  {
    sub_100F3C528(a1 + 10744, a2);
    sub_10017CCF0((void *)(a1 + 8168), (double *)(a2 + 44));
    unint64_t v54 = *(void *)(a1 + 8208);
    if (v54 >= 0x15)
    {
      uint64_t v55 = *(void *)(a1 + 8200);
      *(void *)(a1 + 8208) = v54 - 1;
      *(void *)(a1 + 8200) = v55 + 1;
      sub_10007F07C(a1 + 8168, 1);
    }
    if (v7[128])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v56 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        double v57 = v56;
        os_log_type_t v58 = OS_LOG_TYPE_DEFAULT;
LABEL_93:
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,valid speed\"}", buf, 0x12u);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v59 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        double v57 = v59;
        os_log_type_t v58 = OS_LOG_TYPE_DEBUG;
        goto LABEL_93;
      }
    }
  }
  if (v9 <= 60.0 && v9 >= 0.0) {
    goto LABEL_96;
  }
  if (*(double *)(a2 + 20) < 500.0)
  {
    *(void *)(a2 + 20) = 0x407F400000000000;
    if (v7[128])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v61 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000AB340(a2);
        if (v289 >= 0) {
          unint64_t v62 = v288;
        }
        else {
          unint64_t v62 = (void **)v288[0];
        }
        *(_DWORD *)uint64_t buf = 68289283;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 2081;
        *(void *)v281 = v62;
        int v63 = v61;
        os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_138;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v71 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        sub_1000AB340(a2);
        if (v289 >= 0) {
          unint64_t v72 = v288;
        }
        else {
          unint64_t v72 = (void **)v288[0];
        }
        *(_DWORD *)uint64_t buf = 68289283;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 2081;
        *(void *)v281 = v72;
        int v63 = v71;
        os_log_type_t v64 = OS_LOG_TYPE_DEBUG;
LABEL_138:
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,hunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (v289 < 0) {
          operator delete(v288[0]);
        }
      }
    }
  }
  double v73 = *(double *)(a2 + 36);
  if (v73 > 0.0 && v73 < 200.0)
  {
    *(void *)(a2 + 36) = 0x4069000000000000;
    if (v7[128])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v74 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_96;
      }
      sub_1000AB340(a2);
      if (v289 >= 0) {
        int v75 = v288;
      }
      else {
        int v75 = (void **)v288[0];
      }
      *(_DWORD *)uint64_t buf = 68289283;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      __int16 v280 = 2081;
      *(void *)v281 = v75;
      uint64_t v76 = v74;
      os_log_type_t v77 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v78 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_96;
      }
      sub_1000AB340(a2);
      if (v289 >= 0) {
        __int16 v79 = v288;
      }
      else {
        __int16 v79 = (void **)v288[0];
      }
      *(_DWORD *)uint64_t buf = 68289283;
      int v277 = 0;
      __int16 v278 = 2082;
      v279 = "";
      __int16 v280 = 2081;
      *(void *)v281 = v79;
      uint64_t v76 = v78;
      os_log_type_t v77 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,vunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v289 < 0) {
      operator delete(v288[0]);
    }
  }
LABEL_96:
  switch(*(_DWORD *)(a2 + 96))
  {
    case 0:
      if (!v28) {
        goto LABEL_254;
      }
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v80 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v81 = *(void *)(a2 + 76);
          *(_DWORD *)uint64_t buf = 68289282;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 2050;
          *(void *)v281 = v81;
          int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, inTunnelEndPointAssistance\", \"timestamp\":\"%{public}f\"}";
          __int16 v83 = v80;
          os_log_type_t v84 = OS_LOG_TYPE_DEFAULT;
LABEL_341:
          uint32_t v132 = 28;
          goto LABEL_253;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v164 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v165 = *(void *)(a2 + 76);
          *(_DWORD *)uint64_t buf = 68289282;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 2050;
          *(void *)v281 = v165;
          int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, inTunnelEndPointAssistance\", \"timestamp\":\"%{public}f\"}";
          __int16 v83 = v164;
          os_log_type_t v84 = OS_LOG_TYPE_DEBUG;
          goto LABEL_341;
        }
      }
      goto LABEL_254;
    case 1:
    case 9:
      if (v9 >= 0.0 && v9 <= 6.0 && *(unsigned char *)(a1 + 1572))
      {
        if (v7[128])
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v65 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000AB340(a2);
            if (v289 >= 0) {
              int v66 = v288;
            }
            else {
              int v66 = (void **)v288[0];
            }
            *(_DWORD *)uint64_t buf = 68289283;
            int v277 = 0;
            __int16 v278 = 2082;
            v279 = "";
            __int16 v280 = 2081;
            *(void *)v281 = v66;
            int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GPS fix\", \"location,\":%{private, location:escape_only}s}";
            int v68 = v65;
            os_log_type_t v69 = OS_LOG_TYPE_DEFAULT;
LABEL_233:
            uint32_t v128 = 28;
            goto LABEL_365;
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v126 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            sub_1000AB340(a2);
            if (v289 >= 0) {
              __int16 v127 = v288;
            }
            else {
              __int16 v127 = (void **)v288[0];
            }
            *(_DWORD *)uint64_t buf = 68289283;
            int v277 = 0;
            __int16 v278 = 2082;
            v279 = "";
            __int16 v280 = 2081;
            *(void *)v281 = v127;
            int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GPS fix\", \"location,\":%{private, location:escape_only}s}";
            int v68 = v126;
            os_log_type_t v69 = OS_LOG_TYPE_DEBUG;
            goto LABEL_233;
          }
        }
        return;
      }
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v91 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_254;
        }
        sub_1000AB340(a2);
        if (v289 >= 0) {
          int v92 = v288;
        }
        else {
          int v92 = (void **)v288[0];
        }
        *(_DWORD *)uint64_t buf = 68289539;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 2081;
        *(void *)v281 = v92;
        *(_WORD *)&v281[8] = 2050;
        *(double *)&v281[10] = v9;
        int v93 = v91;
        os_log_type_t v94 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v129 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_254;
        }
        sub_1000AB340(a2);
        if (v289 >= 0) {
          double v130 = v288;
        }
        else {
          double v130 = (void **)v288[0];
        }
        *(_DWORD *)uint64_t buf = 68289539;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 2081;
        *(void *)v281 = v130;
        *(_WORD *)&v281[8] = 2050;
        *(double *)&v281[10] = v9;
        int v93 = v129;
        os_log_type_t v94 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, qualified GPS location back to GPS as assistance\", \"location,\":%{private, location:escape_only}s, \"age\":\"%{public}.1f\"}", buf, 0x26u);
      if (v289 < 0) {
        operator delete(v288[0]);
      }
      goto LABEL_254;
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v33 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v60 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)uint64_t buf = 68289282;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 1026;
          *(_DWORD *)v281 = v60;
          size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unsupported\", \"locationType\":%{public}d}";
          goto LABEL_102;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v51 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v70 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)uint64_t buf = 68289282;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 1026;
          *(_DWORD *)v281 = v70;
          size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unsupported\", \"locationType\":%{public}d}";
          goto LABEL_127;
        }
      }
      return;
    case 3:
      *(double *)(a1 + 11608) = sub_10016C458();
      if (vabdd_f64(*(double *)(a1 + 11600), Current) >= 1.0)
      {
        *(double *)(a1 + 11600) = Current;
        goto LABEL_254;
      }
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v85 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000AB340(a2);
          if (v289 >= 0) {
            int v86 = v288;
          }
          else {
            int v86 = (void **)v288[0];
          }
          uint64_t v87 = *(void *)(a1 + 11600);
          *(_DWORD *)uint64_t buf = 68289539;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 2081;
          *(void *)v281 = v86;
          *(_WORD *)&v281[8] = 2050;
          *(void *)&v281[10] = v87;
          int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate accessory location\", \"location,\":%{pri"
                "vate, location:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
          goto LABEL_225;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v166 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1000AB340(a2);
          if (v289 >= 0) {
            double v169 = v288;
          }
          else {
            double v169 = (void **)v288[0];
          }
          uint64_t v170 = *(void *)(a1 + 11600);
          *(_DWORD *)uint64_t buf = 68289539;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 2081;
          *(void *)v281 = v169;
          *(_WORD *)&v281[8] = 2050;
          *(void *)&v281[10] = v170;
          int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate accessory location\", \"location,\":%{pri"
                "vate, location:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
          goto LABEL_363;
        }
      }
      return;
    case 6:
      long long v95 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 6408) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 6424) = v95;
      long long v96 = *(_OWORD *)(a2 + 32);
      long long v97 = *(_OWORD *)(a2 + 48);
      long long v98 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 6472) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 6488) = v98;
      *(_OWORD *)(a1 + 6440) = v96;
      *(_OWORD *)(a1 + 6456) = v97;
      long long v99 = *(_OWORD *)(a2 + 96);
      long long v100 = *(_OWORD *)(a2 + 112);
      long long v101 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 6548) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 6520) = v100;
      *(_OWORD *)(a1 + 6536) = v101;
      *(_OWORD *)(a1 + 6504) = v99;
      sub_10019FFEC(a1 + 6568, v8);
      if (a3 && a4)
      {
        long long v102 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 7224) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 7208) = v102;
        long long v103 = *(_OWORD *)(a2 + 32);
        long long v104 = *(_OWORD *)(a2 + 48);
        long long v105 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 7288) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 7272) = v105;
        *(_OWORD *)(a1 + 7256) = v104;
        *(_OWORD *)(a1 + 7240) = v103;
        long long v106 = *(_OWORD *)(a2 + 140);
        long long v107 = *(_OWORD *)(a2 + 96);
        long long v108 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 7336) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 7320) = v108;
        *(_OWORD *)(a1 + 7304) = v107;
        *(_OWORD *)(a1 + 7348) = v106;
        sub_10019FFEC(a1 + 7368, v8);
      }
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v109 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,cell location\"}";
          goto LABEL_206;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v131 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,cell location\"}";
          goto LABEL_251;
        }
      }
      goto LABEL_254;
    case 7:
      long long v110 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 8024) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 8008) = v110;
      long long v111 = *(_OWORD *)(a2 + 32);
      long long v112 = *(_OWORD *)(a2 + 48);
      long long v113 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 8088) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 8072) = v113;
      *(_OWORD *)(a1 + 8056) = v112;
      *(_OWORD *)(a1 + 8040) = v111;
      long long v114 = *(_OWORD *)(a2 + 140);
      long long v115 = *(_OWORD *)(a2 + 96);
      long long v116 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 8136) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 8120) = v116;
      *(_OWORD *)(a1 + 8104) = v115;
      *(_OWORD *)(a1 + 8148) = v114;
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v109 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,LAC location\"}";
          goto LABEL_206;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v131 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,LAC location\"}";
          goto LABEL_251;
        }
      }
      goto LABEL_254;
    case 0xA:
      if (vabdd_f64(*(double *)(a1 + 11600), Current) >= 1.0)
      {
        *(double *)(a1 + 11600) = Current;
        if (!v7[128] || *(double *)(a2 + 36) > 0.0)
        {
LABEL_254:
          __int16 v133 = *(uint64_t **)(a1 + 1552);
          if (v133)
          {
            int v134 = *(_DWORD *)(a2 + 96);
            do
            {
              int v135 = *((_DWORD *)v133 + 7);
              if (v134 >= v135)
              {
                if (v135 >= v134)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102305D90);
                  }
                  unint64_t v149 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
                  {
                    int v150 = *(_DWORD *)(a2 + 96);
                    *(_DWORD *)uint64_t buf = 67109120;
                    int v277 = v150;
                    _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,rejecting position assistance due to location type blocklist,%d", buf, 8u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    int v151 = *(_DWORD *)(a2 + 96);
                    LODWORD(v288[0]) = 67109120;
                    HIDWORD(v288[0]) = v151;
                    double v152 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::handlePositionAssistance(GNSS::DaemonLocation &, BOOL, BOOL)", "%s\n", v152);
                    if (v152 != (char *)buf) {
                      free(v152);
                    }
                  }
                  return;
                }
                ++v133;
              }
              __int16 v133 = (uint64_t *)*v133;
            }
            while (v133);
          }
          if (a3)
          {
            int v136 = *(_DWORD *)(a2 + 96);
            if (v136 != 4 && v136 != 11)
            {
              if (v7[128])
              {
                if (v136 != 10)
                {
                  char v155 = (v136 - 6) < 3 ? 1 : v28;
                  if ((v155 & 1) == 0)
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v156 = qword_1024193D8;
                    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_416;
                    }
                    sub_1000AB340(a2);
                    if (v289 >= 0) {
                      v157 = v288;
                    }
                    else {
                      v157 = (void **)v288[0];
                    }
                    *(_DWORD *)uint64_t buf = 68289539;
                    int v277 = 0;
                    __int16 v278 = 2082;
                    v279 = "";
                    __int16 v280 = 2081;
                    *(void *)v281 = v157;
                    *(_WORD *)&v281[8] = 1026;
                    *(_DWORD *)&v281[10] = 0;
                    v158 = v156;
                    os_log_type_t v159 = OS_LOG_TYPE_DEFAULT;
                    goto LABEL_323;
                  }
                }
              }
              else if ((v28 & 1) == 0)
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102305D90);
                }
                uint64_t v160 = qword_1024193D8;
                if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_416;
                }
                sub_1000AB340(a2);
                if (v289 >= 0) {
                  int v161 = v288;
                }
                else {
                  int v161 = (void **)v288[0];
                }
                *(_DWORD *)uint64_t buf = 68289539;
                int v277 = 0;
                __int16 v278 = 2082;
                v279 = "";
                __int16 v280 = 2081;
                *(void *)v281 = v161;
                *(_WORD *)&v281[8] = 1026;
                *(_DWORD *)&v281[10] = 0;
                v158 = v160;
                os_log_type_t v159 = OS_LOG_TYPE_DEBUG;
LABEL_323:
                _os_log_impl((void *)&_mh_execute_header, v158, v159, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not WiFi nor cell/pipelined during emergency and TunnelEndPointAssist location for CPI\", \"location,\":%{private, location:escape_only}s, \"isTunnelEndPointAssistance\":%{public}d}", buf, 0x22u);
                if (v289 < 0) {
                  operator delete(v288[0]);
                }
                goto LABEL_416;
              }
            }
          }
          if (!sub_10019DB1C(a1, a2, v274) || !sub_10019E658(a1, a2, v9))
          {
            if (v7[128])
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102305D90);
              }
              uint64_t v145 = qword_1024193D8;
              if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_416;
              }
              *(_DWORD *)uint64_t buf = 68289026;
              int v277 = 0;
              __int16 v278 = 2082;
              v279 = "";
              v146 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,repeated or invalid position\"}";
              v147 = v145;
              os_log_type_t v148 = OS_LOG_TYPE_DEFAULT;
            }
            else
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102305D90);
              }
              uint64_t v153 = qword_1024193D8;
              if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_416;
              }
              *(_DWORD *)uint64_t buf = 68289026;
              int v277 = 0;
              __int16 v278 = 2082;
              v279 = "";
              v146 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,repeated or invalid position\"}";
              v147 = v153;
              os_log_type_t v148 = OS_LOG_TYPE_DEBUG;
            }
            uint32_t v154 = 18;
LABEL_301:
            _os_log_impl((void *)&_mh_execute_header, v147, v148, v146, buf, v154);
LABEL_416:
            if (v7[128])
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102305D90);
              }
              uint64_t v198 = qword_1024193D8;
              if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                return;
              }
              int v199 = *(_DWORD *)(a2 + 96);
              uint64_t v200 = *(void *)(a2 + 4);
              uint64_t v201 = *(void *)(a2 + 12);
              uint64_t v202 = *(void *)(a2 + 28);
              int v203 = *(_DWORD *)(a2 + 84);
              *(_DWORD *)uint64_t buf = 68290307;
              int v277 = 0;
              __int16 v278 = 2082;
              v279 = "";
              __int16 v280 = 1026;
              *(_DWORD *)v281 = v199;
              *(_WORD *)&v281[4] = 2049;
              *(void *)&v281[6] = v200;
              *(_WORD *)&v281[14] = 2049;
              *(void *)&v281[16] = v201;
              *(_WORD *)char v282 = 2050;
              *(void *)&v282[2] = v202;
              *(_WORD *)&v282[10] = 1026;
              *(_DWORD *)v283 = v203;
              size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding location\", \"type\":%{public}d, \""
                    "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"conf\":%{public}d}";
              double v37 = v198;
              os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
            }
            else
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102305D90);
              }
              uint64_t v204 = qword_1024193D8;
              if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                return;
              }
              int v205 = *(_DWORD *)(a2 + 96);
              uint64_t v206 = *(void *)(a2 + 4);
              uint64_t v207 = *(void *)(a2 + 12);
              uint64_t v208 = *(void *)(a2 + 28);
              int v209 = *(_DWORD *)(a2 + 84);
              *(_DWORD *)uint64_t buf = 68290307;
              int v277 = 0;
              __int16 v278 = 2082;
              v279 = "";
              __int16 v280 = 1026;
              *(_DWORD *)v281 = v205;
              *(_WORD *)&v281[4] = 2049;
              *(void *)&v281[6] = v206;
              *(_WORD *)&v281[14] = 2049;
              *(void *)&v281[16] = v207;
              *(_WORD *)char v282 = 2050;
              *(void *)&v282[2] = v208;
              *(_WORD *)&v282[10] = 1026;
              *(_DWORD *)v283 = v209;
              size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding location\", \"type\":%{public}d, \""
                    "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"conf\":%{public}d}";
              double v37 = v204;
              os_log_type_t v38 = OS_LOG_TYPE_DEBUG;
            }
            uint32_t v42 = 60;
            goto LABEL_129;
          }
          if (*(double *)(a1 + 5628) > 0.0)
          {
            double v138 = sub_100121610(a1 + 5608, a1 + 5768);
            if (v138 >= 0.0) {
              int v139 = v28;
            }
            else {
              int v139 = 0;
            }
            if (v139 == 1 && v138 < 3.0)
            {
              if (v7[128])
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102305D90);
                }
                uint64_t v140 = qword_1024193D8;
                if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_384;
                }
                sub_1000AB340(a2);
                if (v289 >= 0) {
                  v141 = v288;
                }
                else {
                  v141 = (void **)v288[0];
                }
                *(_DWORD *)uint64_t buf = 68289539;
                int v277 = 0;
                __int16 v278 = 2082;
                v279 = "";
                __int16 v280 = 2081;
                *(void *)v281 = v141;
                *(_WORD *)&v281[8] = 2050;
                *(double *)&v281[10] = v138;
                v142 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding tunnel end point assistance,as G"
                       "NSS is still fresh\", \"location,\":%{private, location:escape_only}s, \"gpsAge\":\"%{public}f\"}";
                uint64_t v143 = v140;
                os_log_type_t v144 = OS_LOG_TYPE_DEFAULT;
              }
              else
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102305D90);
                }
                uint64_t v180 = qword_1024193D8;
                if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_384;
                }
                sub_1000AB340(a2);
                if (v289 >= 0) {
                  long long v181 = v288;
                }
                else {
                  long long v181 = (void **)v288[0];
                }
                *(_DWORD *)uint64_t buf = 68289539;
                int v277 = 0;
                __int16 v278 = 2082;
                v279 = "";
                __int16 v280 = 2081;
                *(void *)v281 = v181;
                *(_WORD *)&v281[8] = 2050;
                *(double *)&v281[10] = v138;
                v142 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding tunnel end point assistance,as G"
                       "NSS is still fresh\", \"location,\":%{private, location:escape_only}s, \"gpsAge\":\"%{public}f\"}";
                uint64_t v143 = v180;
                os_log_type_t v144 = OS_LOG_TYPE_DEBUG;
              }
              uint32_t v182 = 38;
LABEL_382:
              _os_log_impl((void *)&_mh_execute_header, v143, v144, v142, buf, v182);
              if (v289 < 0) {
                operator delete(v288[0]);
              }
LABEL_384:
              char v183 = 1;
LABEL_393:
              if (!v7[128] || *(double *)(a2 + 36) > 0.0)
              {
LABEL_415:
                if (v183) {
                  goto LABEL_416;
                }
LABEL_450:
                int v225 = sub_10019DF34(a1, a2);
                if (v225 != -1)
                {
                  if (v7[128])
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v226 = qword_1024193D8;
                    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_469;
                    }
                    int v227 = *(_DWORD *)(a2 + 96);
                    uint64_t v228 = *(void *)(a2 + 4);
                    uint64_t v229 = *(void *)(a2 + 12);
                    uint64_t v230 = *(void *)(a2 + 28);
                    int v231 = *(_DWORD *)(a2 + 84);
                    int v232 = (int)*(double *)(a2 + 36);
                    *(_DWORD *)uint64_t buf = 68291075;
                    int v277 = 0;
                    __int16 v278 = 2082;
                    v279 = "";
                    __int16 v280 = 1026;
                    *(_DWORD *)v281 = v227;
                    *(_WORD *)&v281[4] = 2049;
                    *(void *)&v281[6] = v228;
                    *(_WORD *)&v281[14] = 2049;
                    *(void *)&v281[16] = v229;
                    *(_WORD *)char v282 = 2050;
                    *(void *)&v282[2] = v230;
                    *(_WORD *)&v282[10] = 1026;
                    *(_DWORD *)v283 = v231;
                    *(_WORD *)&v283[4] = 1026;
                    *(_DWORD *)char v284 = a3;
                    *(_WORD *)&v284[4] = 1026;
                    *(_DWORD *)v285 = v225;
                    *(_WORD *)&v285[4] = 1026;
                    *(_DWORD *)&v285[6] = v232;
                    double v233 = v226;
                    os_log_type_t v234 = OS_LOG_TYPE_DEFAULT;
                  }
                  else
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v239 = qword_1024193D8;
                    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_469;
                    }
                    int v240 = *(_DWORD *)(a2 + 96);
                    uint64_t v241 = *(void *)(a2 + 4);
                    uint64_t v242 = *(void *)(a2 + 12);
                    uint64_t v243 = *(void *)(a2 + 28);
                    int v244 = *(_DWORD *)(a2 + 84);
                    int v245 = (int)*(double *)(a2 + 36);
                    *(_DWORD *)uint64_t buf = 68291075;
                    int v277 = 0;
                    __int16 v278 = 2082;
                    v279 = "";
                    __int16 v280 = 1026;
                    *(_DWORD *)v281 = v240;
                    *(_WORD *)&v281[4] = 2049;
                    *(void *)&v281[6] = v241;
                    *(_WORD *)&v281[14] = 2049;
                    *(void *)&v281[16] = v242;
                    *(_WORD *)char v282 = 2050;
                    *(void *)&v282[2] = v243;
                    *(_WORD *)&v282[10] = 1026;
                    *(_DWORD *)v283 = v244;
                    *(_WORD *)&v283[4] = 1026;
                    *(_DWORD *)char v284 = a3;
                    *(_WORD *)&v284[4] = 1026;
                    *(_DWORD *)v285 = v225;
                    *(_WORD *)&v285[4] = 1026;
                    *(_DWORD *)&v285[6] = v245;
                    double v233 = v239;
                    os_log_type_t v234 = OS_LOG_TYPE_DEBUG;
                  }
                  _os_log_impl((void *)&_mh_execute_header, v233, v234, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,confidence\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"confidence\":%{public}d, \"isCpi\":%{public}d, \"verifiedConf\":%{public}d, \"altUnc\":%{public}d}", buf, 0x4Eu);
LABEL_469:
                  *(_DWORD *)(a2 + 84) = v225;
                  if (sub_100124E04(a1 + 3984, a2))
                  {
                    char v246 = 1;
                    *(unsigned char *)(a1 + 3979) = 1;
                  }
                  else
                  {
                    char v246 = 0;
                  }
                  *(unsigned char *)(a1 + 3977) = v246;
                  if (!a3)
                  {
                    sub_100029AD8(a1, a2, a4);
                    if (!*(unsigned char *)(a1 + 1572) && a4 && (*(_DWORD *)(a2 + 96) | 8) == 9) {
                      *(unsigned char *)(a1 + 1572) = 1;
                    }
                    return;
                  }
                  sub_100F3C654(a1, a2);
                  if (v7[128])
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v247 = qword_1024193D8;
                    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                      return;
                    }
                    int v248 = *(unsigned __int8 *)(a1 + 3979);
                    int v249 = *(unsigned __int8 *)(a1 + 3977);
                    int v250 = *(unsigned __int8 *)(a1 + 3978);
                    int v251 = *(_DWORD *)(a1 + 3980);
                    *(_DWORD *)uint64_t buf = 68290050;
                    int v277 = 0;
                    __int16 v278 = 2082;
                    v279 = "";
                    __int16 v280 = 1026;
                    *(_DWORD *)v281 = v248;
                    *(_WORD *)&v281[4] = 1026;
                    *(_DWORD *)&v281[6] = v249;
                    *(_WORD *)&v281[10] = 1026;
                    *(_DWORD *)&v281[12] = v250;
                    *(_WORD *)&v281[16] = 1026;
                    *(_DWORD *)&v281[18] = v251;
                    size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,injected\", \"was"
                          "HELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{publi"
                          "c}d, \"heloRejectReason\":%{public}d}";
                    double v37 = v247;
                    os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
                  }
                  else
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v264 = qword_1024193D8;
                    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                      return;
                    }
                    int v265 = *(unsigned __int8 *)(a1 + 3979);
                    int v266 = *(unsigned __int8 *)(a1 + 3977);
                    int v267 = *(unsigned __int8 *)(a1 + 3978);
                    int v268 = *(_DWORD *)(a1 + 3980);
                    *(_DWORD *)uint64_t buf = 68290050;
                    int v277 = 0;
                    __int16 v278 = 2082;
                    v279 = "";
                    __int16 v280 = 1026;
                    *(_DWORD *)v281 = v265;
                    *(_WORD *)&v281[4] = 1026;
                    *(_DWORD *)&v281[6] = v266;
                    *(_WORD *)&v281[10] = 1026;
                    *(_DWORD *)&v281[12] = v267;
                    *(_WORD *)&v281[16] = 1026;
                    *(_DWORD *)&v281[18] = v268;
                    size_t v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,injected\", \"was"
                          "HELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{publi"
                          "c}d, \"heloRejectReason\":%{public}d}";
                    double v37 = v264;
                    os_log_type_t v38 = OS_LOG_TYPE_DEBUG;
                  }
                  uint32_t v42 = 42;
LABEL_129:
                  _os_log_impl((void *)&_mh_execute_header, v37, v38, v35, buf, v42);
                  return;
                }
                if (v7[128])
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102305D90);
                  }
                  uint64_t v235 = qword_1024193D8;
                  if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_491;
                  }
                  sub_1000AB340(a2);
                  if (v289 >= 0) {
                    v236 = v288;
                  }
                  else {
                    v236 = (void **)v288[0];
                  }
                  *(_DWORD *)uint64_t buf = 68289283;
                  int v277 = 0;
                  __int16 v278 = 2082;
                  v279 = "";
                  __int16 v280 = 2081;
                  *(void *)v281 = v236;
                  v237 = v235;
                  os_log_type_t v238 = OS_LOG_TYPE_DEFAULT;
                }
                else
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102305D90);
                  }
                  uint64_t v252 = qword_1024193D8;
                  if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_491;
                  }
                  sub_1000AB340(a2);
                  if (v289 >= 0) {
                    uint64_t v253 = v288;
                  }
                  else {
                    uint64_t v253 = (void **)v288[0];
                  }
                  *(_DWORD *)uint64_t buf = 68289283;
                  int v277 = 0;
                  __int16 v278 = 2082;
                  v279 = "";
                  __int16 v280 = 2081;
                  *(void *)v281 = v253;
                  v237 = v252;
                  os_log_type_t v238 = OS_LOG_TYPE_DEBUG;
                }
                _os_log_impl((void *)&_mh_execute_header, v237, v238, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,cell cross-check produce invalid location confidence\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
                if (v289 < 0) {
                  operator delete(v288[0]);
                }
LABEL_491:
                if (v7[128])
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102305D90);
                  }
                  uint64_t v254 = qword_1024193D8;
                  if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_416;
                  }
                  int v255 = *(unsigned __int8 *)(a1 + 3979);
                  int v256 = *(unsigned __int8 *)(a1 + 3977);
                  int v257 = *(unsigned __int8 *)(a1 + 3978);
                  int v258 = *(_DWORD *)(a1 + 3980);
                  *(_DWORD *)uint64_t buf = 68290050;
                  int v277 = 0;
                  __int16 v278 = 2082;
                  v279 = "";
                  __int16 v280 = 1026;
                  *(_DWORD *)v281 = v255;
                  *(_WORD *)&v281[4] = 1026;
                  *(_DWORD *)&v281[6] = v256;
                  *(_WORD *)&v281[10] = 1026;
                  *(_DWORD *)&v281[12] = v257;
                  *(_WORD *)&v281[16] = 1026;
                  *(_DWORD *)&v281[18] = v258;
                  v146 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,rejected\", \"wasH"
                         "ELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{public}"
                         "d, \"heloRejectReason\":%{public}d}";
                  v147 = v254;
                  os_log_type_t v148 = OS_LOG_TYPE_DEFAULT;
                }
                else
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102305D90);
                  }
                  uint64_t v259 = qword_1024193D8;
                  if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_416;
                  }
                  int v260 = *(unsigned __int8 *)(a1 + 3979);
                  int v261 = *(unsigned __int8 *)(a1 + 3977);
                  int v262 = *(unsigned __int8 *)(a1 + 3978);
                  int v263 = *(_DWORD *)(a1 + 3980);
                  *(_DWORD *)uint64_t buf = 68290050;
                  int v277 = 0;
                  __int16 v278 = 2082;
                  v279 = "";
                  __int16 v280 = 1026;
                  *(_DWORD *)v281 = v260;
                  *(_WORD *)&v281[4] = 1026;
                  *(_DWORD *)&v281[6] = v261;
                  *(_WORD *)&v281[10] = 1026;
                  *(_DWORD *)&v281[12] = v262;
                  *(_WORD *)&v281[16] = 1026;
                  *(_DWORD *)&v281[18] = v263;
                  v146 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,rejected\", \"wasH"
                         "ELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{public}"
                         "d, \"heloRejectReason\":%{public}d}";
                  v147 = v259;
                  os_log_type_t v148 = OS_LOG_TYPE_DEBUG;
                }
                uint32_t v154 = 42;
                goto LABEL_301;
              }
              if (sub_100BCE2EC(a1 + 2376))
              {
                char v184 = (double *)(a1 + 2404);
                if (*(double *)(a1 + 2404) != 0.0
                  && *(double *)(a1 + 2412) < 3000.0
                  && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 2452)) < 10.0)
                {
                  if (v7[128])
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v185 = qword_1024193D8;
                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
                    {
                      int v186 = (int)*(double *)(a2 + 28);
                      int v187 = (int)*(double *)(a2 + 36);
                      double v188 = *(double *)(a1 + 2412);
                      int v189 = (int)*v184;
                      int v190 = *(_DWORD *)(a2 + 96);
                      int v191 = *(_DWORD *)(a1 + 2472);
                      *(_DWORD *)uint64_t buf = 68290562;
                      int v277 = 0;
                      __int16 v278 = 2082;
                      v279 = "";
                      __int16 v280 = 1026;
                      *(_DWORD *)v281 = v190;
                      *(_WORD *)&v281[4] = 1026;
                      *(_DWORD *)&v281[6] = v191;
                      *(_WORD *)&v281[10] = 1026;
                      *(_DWORD *)&v281[12] = v186;
                      *(_WORD *)&v281[16] = 1026;
                      *(_DWORD *)&v281[18] = v187;
                      *(_WORD *)&v281[22] = 1026;
                      *(_DWORD *)char v282 = v189;
                      *(_WORD *)&v282[4] = 1026;
                      *(_DWORD *)&v282[6] = (int)v188;
                      uint64_t v192 = v185;
                      os_log_type_t v193 = OS_LOG_TYPE_DEFAULT;
LABEL_448:
                      _os_log_impl((void *)&_mh_execute_header, v192, v193, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite altitude with prior TCP altitude\", \"location type\":%{public}d, \"last tightly coupled position type\":%{public}d, \"altPrior\":%{public}d, \"altUncPrior\":%{public}d, \"altNew\":%{public}d, \"altUncNew\":%{public}d}", buf, 0x36u);
                    }
                  }
                  else
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_102305D90);
                    }
                    uint64_t v218 = qword_1024193D8;
                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
                    {
                      int v219 = (int)*(double *)(a2 + 28);
                      int v220 = (int)*(double *)(a2 + 36);
                      double v221 = *(double *)(a1 + 2412);
                      int v222 = (int)*v184;
                      int v223 = *(_DWORD *)(a2 + 96);
                      int v224 = *(_DWORD *)(a1 + 2472);
                      *(_DWORD *)uint64_t buf = 68290562;
                      int v277 = 0;
                      __int16 v278 = 2082;
                      v279 = "";
                      __int16 v280 = 1026;
                      *(_DWORD *)v281 = v223;
                      *(_WORD *)&v281[4] = 1026;
                      *(_DWORD *)&v281[6] = v224;
                      *(_WORD *)&v281[10] = 1026;
                      *(_DWORD *)&v281[12] = v219;
                      *(_WORD *)&v281[16] = 1026;
                      *(_DWORD *)&v281[18] = v220;
                      *(_WORD *)&v281[22] = 1026;
                      *(_DWORD *)char v282 = v222;
                      *(_WORD *)&v282[4] = 1026;
                      *(_DWORD *)&v282[6] = (int)v221;
                      uint64_t v192 = v218;
                      os_log_type_t v193 = OS_LOG_TYPE_DEBUG;
                      goto LABEL_448;
                    }
                  }
                  *(_OWORD *)(a2 + 28) = *(_OWORD *)v184;
                  *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 2852);
                  *(_DWORD *)(a2 + 472) = *(_DWORD *)(a1 + 2848);
                  if (v183) {
                    goto LABEL_416;
                  }
                  goto LABEL_450;
                }
              }
              if (v7[128])
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102305D90);
                }
                uint64_t v194 = qword_1024193D8;
                if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_414;
                }
                *(_DWORD *)uint64_t buf = 68289026;
                int v277 = 0;
                __int16 v278 = 2082;
                v279 = "";
                v195 = v194;
                os_log_type_t v196 = OS_LOG_TYPE_DEFAULT;
              }
              else
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102305D90);
                }
                uint64_t v197 = qword_1024193D8;
                if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_414;
                }
                *(_DWORD *)uint64_t buf = 68289026;
                int v277 = 0;
                __int16 v278 = 2082;
                v279 = "";
                v195 = v197;
                os_log_type_t v196 = OS_LOG_TYPE_DEBUG;
              }
              _os_log_impl((void *)&_mh_execute_header, v195, v196, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite altitude with default invalid value\"}", buf, 0x12u);
LABEL_414:
              *(_OWORD *)(a2 + 28) = xmmword_101D98730;
              goto LABEL_415;
            }
            if (v138 < 10.0)
            {
              if (v7[128])
              {
                if (v7[168] && (*(_DWORD *)(a2 + 84) < 0x45u || *(double *)(a2 + 20) > 100.0))
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102305D90);
                  }
                  uint64_t v162 = qword_1024193D8;
                  if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_384;
                  }
                  sub_1000AB340(a2);
                  if (v289 >= 0) {
                    int v163 = v288;
                  }
                  else {
                    int v163 = (void **)v288[0];
                  }
                  *(_DWORD *)uint64_t buf = 68289283;
                  int v277 = 0;
                  __int16 v278 = 2082;
                  v279 = "";
                  __int16 v280 = 2081;
                  *(void *)v281 = v163;
                  v142 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,recent GPS low confidence\", \"location,\""
                         ":%{private, location:escape_only}s}";
                  uint64_t v143 = v162;
                  os_log_type_t v144 = OS_LOG_TYPE_DEFAULT;
                  goto LABEL_437;
                }
              }
              else if (*(_DWORD *)(a2 + 84) < 0x45u || *(double *)(a2 + 20) > 100.0)
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102305D90);
                }
                uint64_t v210 = qword_1024193D8;
                if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_384;
                }
                sub_1000AB340(a2);
                if (v289 >= 0) {
                  int v211 = v288;
                }
                else {
                  int v211 = (void **)v288[0];
                }
                *(_DWORD *)uint64_t buf = 68289283;
                int v277 = 0;
                __int16 v278 = 2082;
                v279 = "";
                __int16 v280 = 2081;
                *(void *)v281 = v211;
                v142 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,recent GPS low confidence\", \"location,\":%"
                       "{private, location:escape_only}s}";
                uint64_t v143 = v210;
                os_log_type_t v144 = OS_LOG_TYPE_DEBUG;
LABEL_437:
                uint32_t v182 = 28;
                goto LABEL_382;
              }
            }
          }
          char v183 = 0;
          goto LABEL_393;
        }
        if (sub_100BCE2EC(a1 + 4812) && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 4888)) < 10.0)
        {
          if (v7[128])
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
            uint64_t v117 = qword_1024193D8;
            if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_443;
            }
            int v118 = (int)*(double *)(a2 + 28);
            int v119 = (int)*(double *)(a2 + 36);
            int v120 = (int)*(double *)(a1 + 4840);
            int v121 = (int)*(double *)(a1 + 4848);
            *(_DWORD *)uint64_t buf = 68290050;
            int v277 = 0;
            __int16 v278 = 2082;
            v279 = "";
            __int16 v280 = 1026;
            *(_DWORD *)v281 = v118;
            *(_WORD *)&v281[4] = 1026;
            *(_DWORD *)&v281[6] = v119;
            *(_WORD *)&v281[10] = 1026;
            *(_DWORD *)&v281[12] = v120;
            *(_WORD *)&v281[16] = 1026;
            *(_DWORD *)&v281[18] = v121;
            long long v122 = v117;
            os_log_type_t v123 = OS_LOG_TYPE_DEFAULT;
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
            uint64_t v212 = qword_1024193D8;
            if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_443;
            }
            int v213 = (int)*(double *)(a2 + 28);
            int v214 = (int)*(double *)(a2 + 36);
            int v215 = (int)*(double *)(a1 + 4840);
            int v216 = (int)*(double *)(a1 + 4848);
            *(_DWORD *)uint64_t buf = 68290050;
            int v277 = 0;
            __int16 v278 = 2082;
            v279 = "";
            __int16 v280 = 1026;
            *(_DWORD *)v281 = v213;
            *(_WORD *)&v281[4] = 1026;
            *(_DWORD *)&v281[6] = v214;
            *(_WORD *)&v281[10] = 1026;
            *(_DWORD *)&v281[12] = v215;
            *(_WORD *)&v281[16] = 1026;
            *(_DWORD *)&v281[18] = v216;
            long long v122 = v212;
            os_log_type_t v123 = OS_LOG_TYPE_DEBUG;
          }
          _os_log_impl((void *)&_mh_execute_header, v122, v123, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite pipelined altitude with prior TCP altitude\", \"altPrior\":%{public}d, \"altUncPrior\":%{public}d, \"altNew\":%{public}d, \"altUncNew\":%{public}d}", buf, 0x2Au);
LABEL_443:
          *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 4840);
          *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 5284);
          int v217 = *(_DWORD *)(a1 + 5280);
LABEL_512:
          *(_DWORD *)(a2 + 472) = v217;
          goto LABEL_254;
        }
        if (!sub_100BCE2EC(a1 + 7208) || vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 7284)) >= 10.0)
        {
          if (v7[128])
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
            uint64_t v109 = qword_1024193D8;
            if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_254;
            }
            *(_DWORD *)uint64_t buf = 68289026;
            int v277 = 0;
            __int16 v278 = 2082;
            v279 = "";
            int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Stored TCP and cell locations are not valid\"}";
LABEL_206:
            __int16 v83 = v109;
            os_log_type_t v84 = OS_LOG_TYPE_DEFAULT;
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
            uint64_t v131 = qword_1024193D8;
            if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_254;
            }
            *(_DWORD *)uint64_t buf = 68289026;
            int v277 = 0;
            __int16 v278 = 2082;
            v279 = "";
            int v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Stored TCP and cell locations are not valid\"}";
LABEL_251:
            __int16 v83 = v131;
            os_log_type_t v84 = OS_LOG_TYPE_DEBUG;
          }
          uint32_t v132 = 18;
LABEL_253:
          _os_log_impl((void *)&_mh_execute_header, v83, v84, v82, buf, v132);
          goto LABEL_254;
        }
        if (v7[128])
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v173 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_511;
          }
          int v174 = (int)*(double *)(a2 + 28);
          int v175 = (int)*(double *)(a2 + 36);
          int v176 = (int)*(double *)(a1 + 7236);
          int v177 = (int)*(double *)(a1 + 7244);
          *(_DWORD *)uint64_t buf = 68290050;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 1026;
          *(_DWORD *)v281 = v174;
          *(_WORD *)&v281[4] = 1026;
          *(_DWORD *)&v281[6] = v175;
          *(_WORD *)&v281[10] = 1026;
          *(_DWORD *)&v281[12] = v176;
          *(_WORD *)&v281[16] = 1026;
          *(_DWORD *)&v281[18] = v177;
          double v178 = v173;
          os_log_type_t v179 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v269 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_511;
          }
          int v270 = (int)*(double *)(a2 + 28);
          int v271 = (int)*(double *)(a2 + 36);
          int v272 = (int)*(double *)(a1 + 7236);
          int v273 = (int)*(double *)(a1 + 7244);
          *(_DWORD *)uint64_t buf = 68290050;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 1026;
          *(_DWORD *)v281 = v270;
          *(_WORD *)&v281[4] = 1026;
          *(_DWORD *)&v281[6] = v271;
          *(_WORD *)&v281[10] = 1026;
          *(_DWORD *)&v281[12] = v272;
          *(_WORD *)&v281[16] = 1026;
          *(_DWORD *)&v281[18] = v273;
          double v178 = v269;
          os_log_type_t v179 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite pipelined altitude with prior cell location altitude\", \"altPrior\":%{public}d, \"altUncPrior\":%{public}d, \"altNew\":%{public}d, \"altUncNew\":%{public}d}", buf, 0x2Au);
LABEL_511:
        *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 7236);
        *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 7684);
        int v217 = *(_DWORD *)(a1 + 7680);
        goto LABEL_512;
      }
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v85 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        sub_1000AB340(a2);
        if (v289 >= 0) {
          double v88 = v288;
        }
        else {
          double v88 = (void **)v288[0];
        }
        uint64_t v89 = *(void *)(a1 + 11600);
        *(_DWORD *)uint64_t buf = 68289539;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 2081;
        *(void *)v281 = v88;
        *(_WORD *)&v281[8] = 2050;
        *(void *)&v281[10] = v89;
        int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate pipe location\", \"location,\":%{private, l"
              "ocation:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
LABEL_225:
        int v68 = v85;
        os_log_type_t v69 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v166 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        sub_1000AB340(a2);
        if (v289 >= 0) {
          double v167 = v288;
        }
        else {
          double v167 = (void **)v288[0];
        }
        uint64_t v168 = *(void *)(a1 + 11600);
        *(_DWORD *)uint64_t buf = 68289539;
        int v277 = 0;
        __int16 v278 = 2082;
        v279 = "";
        __int16 v280 = 2081;
        *(void *)v281 = v167;
        *(_WORD *)&v281[8] = 2050;
        *(void *)&v281[10] = v168;
        int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate pipe location\", \"location,\":%{private, l"
              "ocation:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
LABEL_363:
        int v68 = v166;
        os_log_type_t v69 = OS_LOG_TYPE_DEBUG;
      }
      uint32_t v128 = 38;
LABEL_365:
      _os_log_impl((void *)&_mh_execute_header, v68, v69, v67, buf, v128);
      if (v289 < 0) {
        operator delete(v288[0]);
      }
      return;
    case 0xB:
      double v90 = sub_10016C458();
      if (v90 - *(double *)(a1 + 11616) >= *(double *)(a1 + 11624))
      {
        *(double *)(a1 + 11616) = v90;
        goto LABEL_254;
      }
      if (v7[128])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v85 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000AB340(a2);
          if (v289 >= 0) {
            long long v124 = v288;
          }
          else {
            long long v124 = (void **)v288[0];
          }
          uint64_t v125 = *(void *)(a1 + 11616);
          *(_DWORD *)uint64_t buf = 68289539;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 2081;
          *(void *)v281 = v124;
          *(_WORD *)&v281[8] = 2050;
          *(void *)&v281[10] = v125;
          int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate WiFi2 location\", \"location,\":%{private"
                ", location:escape_only}s, \"machTimeOfLastHighRateWifi2Assistance\":\"%{public}f\"}";
          goto LABEL_225;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v166 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1000AB340(a2);
          if (v289 >= 0) {
            int v171 = v288;
          }
          else {
            int v171 = (void **)v288[0];
          }
          uint64_t v172 = *(void *)(a1 + 11616);
          *(_DWORD *)uint64_t buf = 68289539;
          int v277 = 0;
          __int16 v278 = 2082;
          v279 = "";
          __int16 v280 = 2081;
          *(void *)v281 = v171;
          *(_WORD *)&v281[8] = 2050;
          *(void *)&v281[10] = v172;
          int v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate WiFi2 location\", \"location,\":%{private"
                ", location:escape_only}s, \"machTimeOfLastHighRateWifi2Assistance\":\"%{public}f\"}";
          goto LABEL_363;
        }
      }
      return;
    default:
      goto LABEL_254;
  }
}

void sub_10001F3A0(int a1, void *__p)
{
  if (__p)
  {
    id v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
}

id sub_10001F40C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,sendCellMonitorRefreshResult,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendCellMonitorRefreshResult(BOOL)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  CFDictionaryRef v5 = sub_1001A5AF4(a2);
  CFDictionaryRef v6 = v5;
  return [*(id *)(a1 + 112) sendNotificationToClients:@"kCellMonitorRefreshResultNotification" notificationData:v5];
}

void sub_10001F5E4(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  id v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#techstatus,signalling", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::signalTechStatusChanged()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 688));
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 696));
  uint64_t v3 = (__CFRunLoop *)sub_1001C2710();
  CFRunLoopWakeUp(v3);
}

id sub_10001F790(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1001C2270(a1);
}

void sub_10001F7F0()
{
}

void sub_10001FAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001FAF4(uint64_t a1, void *a2, void *a3, void *a4, long long *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022C53C0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = a4;
  long long v9 = *a5;
  *(void *)(a1 + 88) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 72) = v9;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  long long v10 = *(long long *)((char *)a5 + 24);
  *(void *)(a1 + 112) = *((void *)a5 + 5);
  *(_OWORD *)(a1 + 96) = v10;
  *((void *)a5 + 4) = 0;
  *((void *)a5 + 5) = 0;
  *((void *)a5 + 3) = 0;
  *(void *)(a1 + 120) = *((void *)a5 + 6);
  *(void *)(a1 + 128) = a2;
  id v11 = a3;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 136) = v11;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(void *)(a1 + 240) = objc_alloc_init((Class)NSMutableDictionary);
  *(_WORD *)(a1 + 248) = 257;
  return a1;
}

void sub_10001FBFC(_Unwind_Exception *a1)
{
  sub_1007031D8(v3);
  sub_1000D7D80(v1 + 160);
  sub_100286A7C(v1 + 72);
  CFDictionaryRef v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_1000F5BB0(v2, *(void **)(v1 + 32));
  CFDictionaryRef v6 = *(std::__shared_weak_count **)(v1 + 16);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(a1);
}

void sub_10001FC58(void *a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_102307A00);
  }
  CFDictionaryRef v5 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[3];
    *(_DWORD *)uint64_t buf = 138412802;
    uint64_t v11 = v6;
    __int16 v12 = 2048;
    double v13 = a1;
    __int16 v14 = 1024;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "VO2Max Retrocompute Status, Subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_102307A00);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxSubscription::handleRequestVO2MaxRetrocomputeStatusUpdate(BOOL, const CLNameValuePair &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10009C834((uint64_t)a1);
  uint64_t v8 = a1[6];
  std::string v7 = (void *)a1[7];
  if (a2) {
    [v7 registerForRetrocomputeStatusUpdates:v8];
  }
  else {
    [v7 unregisterForRetrocomputeStatusUpdates:v8];
  }
}

void sub_10001FE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10001FEB0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = sqlite3_step(a2);
  int v6 = v5;
  BOOL v7 = v5 == 101;
  if (v5 != 101)
  {
    sub_1005F93F0(v5, (uint64_t)"sqlite3_step()", v5, a2);
    sub_1005F9B94(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v6);
  }
  uint64_t v8 = sqlite3_reset(a2);
  int v9 = v8;
  if (v8)
  {
    sub_1005F93F0(v8, (uint64_t)"sqlite3_reset()", v8, a2);
    sub_1005F9B94(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v9);
    BOOL v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v7;
}

void sub_10001FFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10001FFE4(uint64_t a1, void *a2, double a3)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  int v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 2082;
    id v18 = [[objc_msgSend(a2, "description") UTF8String];
    __int16 v19 = 2050;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion taken\", \"client\":%{public, location:escape_only}s, \"accuracy\":\"%{public}f\"}", buf, 0x26u);
  }
  for (i = *(void **)(a1 + 256); i; i = (void *)*i)
  {
    unint64_t v8 = i[4];
    if (v8 <= (unint64_t)a2)
    {
      if (v8 >= (unint64_t)a2) {
        goto LABEL_11;
      }
      ++i;
    }
  }
  id v9 = a2;
LABEL_11:
  double v13 = a2;
  *(void *)uint64_t buf = &v13;
  *((double *)sub_10017C9B0((uint64_t **)(a1 + 248), (unint64_t *)&v13, (uint64_t)&unk_101D0B290, (uint64_t **)buf)
  + 5) = a3;
  BOOL v10 = sub_10000B260(a1);
  uint64_t v11 = *(unsigned char **)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10000DE64(v11, v10, Current);
}

void *sub_10002016C(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A86128();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      BOOL v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"20CLVO2MaxSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100020368()
{
}

void sub_100020394()
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  v0 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#techstatus,posting notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::sendTechStatusNotification()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLTechStatusChangedNotification, 0, 0, 0);
}

void sub_10002063C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100020650(uint64_t a1, uint64_t a2)
{
  char v3 = BYTE4(a1);
  uint64_t v7 = a1;
  unsigned int v4 = sub_10016D640((unsigned int *)&v7);
  BOOL result = sub_10016D634(v4);
  if (!result) {
    sub_101A5EC5C();
  }
  int v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 20) = v6 | 3;
  *(unsigned char *)(a2 + 12) = v3;
  return result;
}

void sub_1000206B8(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022EA4C8);
  }
  uint64_t v5 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received request to query VO2Max retrocompute status", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022EA4C8);
    }
    __int16 v11 = 0;
    __int16 v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVO2MaxRetrocomputeStatusQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "isServiceRunning:", @"CLVO2MaxService"))
  {
    id v6 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLVO2MaxService"];
    [v6 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    v9[2] = sub_10017B1E4;
    v9[3] = &unk_1022EA260;
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    v9[4] = *a2;
    BOOL v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v6 queryVO2MaxRetrocomputeStatusWithReply:v9];
    if (v10) {
      sub_1000DB0A0(v10);
    }
  }
  else
  {
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v12 = CMErrorMessage;
    double v13 = &off_1023931B8;
    +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    CLConnectionMessage::sendReply();
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100020980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1000209E0(uint64_t a1, unsigned int a2, double a3)
{
  LODWORD(v6) = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 32))(*(void *)(a1 + 448));
  int v7 = *(_DWORD *)(a1 + 408);
  __int16 v8 = &qword_102419000;
  unint64_t v9 = &qword_102419000;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 448) + 16))(*(void *)(a1 + 448)) & 1) == 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    double v13 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, wifi off - no tile downloads", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      goto LABEL_27;
    }
LABEL_74:
    if (v8[118] != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    size_t v35 = v9[119];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      int v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 16))(*(void *)(a1 + 448));
      int v37 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 48))(*(void *)(a1 + 448));
      int v38 = *(unsigned __int8 *)(a1 + 217);
      int v39 = *(unsigned __int8 *)(a1 + 216);
      int v40 = *(unsigned __int8 *)(a1 + 420);
      int v41 = *(_DWORD *)(a1 + 408);
      int v42 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)uint64_t buf = 67241984;
      *(_DWORD *)&uint8_t buf[4] = v36;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v37;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v38;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v39;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&unsigned char buf[28] = v40;
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&buf[34] = v41;
      __int16 v108 = 1026;
      int v109 = v42;
      __int16 v110 = 1026;
      int v111 = (int)v6;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "WIFITILE: checkDownloadSchedule, skip, wifion, %{public}d, ls, %{public}d, indexed, %{public}d, protection, %{public}d, lockdisable, %{public}d, reach, %{public}d, companion, %{public}d, broadband, %{public}d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v8[118] != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      int v80 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 16))(*(void *)(a1 + 448));
      int v81 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 48))(*(void *)(a1 + 448));
      int v82 = *(unsigned __int8 *)(a1 + 217);
      int v83 = *(unsigned __int8 *)(a1 + 216);
      int v84 = *(unsigned __int8 *)(a1 + 420);
      int v85 = *(_DWORD *)(a1 + 408);
      int v86 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)long long v102 = 67241984;
      *(_DWORD *)&v102[4] = v80;
      *(_WORD *)&v102[8] = 1026;
      *(_DWORD *)&v102[10] = v81;
      *(_WORD *)&v102[14] = 1026;
      *(_DWORD *)&v102[16] = v82;
      *(_WORD *)&v102[20] = 1026;
      *(_DWORD *)&v102[22] = v83;
      *(_WORD *)&v102[26] = 1026;
      *(_DWORD *)&v102[28] = v84;
      *(_WORD *)&v102[32] = 1026;
      *(_DWORD *)&v102[34] = v85;
      __int16 v103 = 1026;
      int v104 = v86;
      __int16 v105 = 1026;
      int v106 = (int)v6;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v29);
      goto LABEL_191;
    }
    return;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 448) + 48))(*(void *)(a1 + 448)) & 1) == 0)
  {
    if (qword_1024193B0 != -1) {
LABEL_194:
    }
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    char v15 = v9[119];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, location services disabled - no tile downloads", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v8[118] != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      *(_WORD *)long long v102 = 0;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v14);
      goto LABEL_211;
    }
    goto LABEL_74;
  }
  if (!*(unsigned char *)(a1 + 217))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    int v16 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      int v18 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)long long v102 = 67240192;
      *(_DWORD *)&v102[4] = v18;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v14);
      goto LABEL_211;
    }
    goto LABEL_74;
  }
  if (!*(_DWORD *)(a1 + 408) && !*(unsigned char *)(a1 + 412))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v32 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v33 = *(_DWORD *)(a1 + 408);
      int v34 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %{public}d, companion, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      int v92 = *(_DWORD *)(a1 + 408);
      int v93 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)long long v102 = 67240448;
      *(_DWORD *)&v102[4] = v92;
      *(_WORD *)&v102[8] = 1026;
      *(_DWORD *)&v102[10] = v93;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v14);
      goto LABEL_211;
    }
    goto LABEL_74;
  }
  if (v7 == 1) {
    char v10 = (char)v6;
  }
  else {
    char v10 = 1;
  }
  if ((v10 & 1) == 0 && !*(unsigned char *)(a1 + 412))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    int v31 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, no download on none broadband cellular connections", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
LABEL_27:
      *(_WORD *)long long v102 = 0;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v14);
LABEL_211:
      if (v14 != buf) {
        free(v14);
      }
      goto LABEL_74;
    }
    goto LABEL_74;
  }
  unsigned int v95 = sub_1001AE3D8(a1);
  if (v95 >= 2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    __int16 v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v95;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, not scheduling more", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      *(_DWORD *)long long v102 = 67240192;
      *(_DWORD *)&v102[4] = v95;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v12);
      goto LABEL_215;
    }
LABEL_50:
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    double v20 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(unsigned __int8 *)(a1 + 192);
      int v22 = *(unsigned __int8 *)(a1 + 160);
      BOOL v23 = *(void *)(a1 + 176) == 0;
      BOOL v24 = *(void *)(a1 + 208) == 0;
      *(_DWORD *)uint64_t buf = 67241216;
      *(_DWORD *)&uint8_t buf[4] = v95;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v21;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v22;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v23;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&unsigned char buf[28] = v24;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "WIFITILE: checkDownloadSchedule, skip, active, %{public}d, inprogress, %{public}d, %{public}d, shutdown, %{public}d, %{public}d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      int v25 = *(unsigned __int8 *)(a1 + 192);
      int v26 = *(unsigned __int8 *)(a1 + 160);
      BOOL v27 = *(void *)(a1 + 176) == 0;
      BOOL v28 = *(void *)(a1 + 208) == 0;
      *(_DWORD *)long long v102 = 67241216;
      *(_DWORD *)&v102[4] = v95;
      *(_WORD *)&v102[8] = 1026;
      *(_DWORD *)&v102[10] = v25;
      *(_WORD *)&v102[14] = 1026;
      *(_DWORD *)&v102[16] = v26;
      *(_WORD *)&v102[20] = 1026;
      *(_DWORD *)&v102[22] = v27;
      *(_WORD *)&v102[26] = 1026;
      *(_DWORD *)&v102[28] = v28;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v29);
LABEL_191:
      if (v29 != buf) {
        free(v29);
      }
      return;
    }
    return;
  }
  if (*(unsigned char *)(a1 + 192) && *(unsigned char *)(a1 + 160))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    __int16 v19 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, both download requests are already in use", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_214;
    }
    goto LABEL_218;
  }
  if (!*(void *)(a1 + 176) && !*(void *)(a1 + 208))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    __int16 v79 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "WIFITILE: checkDownloadSchedule, both download requests null, shutdown?", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_214:
      *(_WORD *)long long v102 = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v12);
LABEL_215:
      if (v12 != buf) {
        free(v12);
      }
      goto LABEL_50;
    }
LABEL_218:
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    goto LABEL_214;
  }
  BOOL v30 = *(int *)(a1 + 408) > 1 || *(unsigned char *)(a1 + 412) != 0;
  int v94 = v30;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  double v43 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    id v6 = buf;
    sub_1000AB340(a1 + 232);
    long long v44 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)long long v102 = 67240451;
    *(_DWORD *)&v102[4] = a2;
    *(_WORD *)&v102[8] = 2081;
    *(void *)&v102[10] = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, priority, %{public}d, lastLocation, %{private}s", v102, 0x12u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    id v6 = v102;
    sub_1000AB340(a1 + 232);
    if (v102[23] >= 0) {
      uint64_t v87 = v102;
    }
    else {
      uint64_t v87 = *(unsigned char **)v102;
    }
    int v98 = 67240451;
    unsigned int v99 = a2;
    __int16 v100 = 2081;
    long long v101 = v87;
    double v88 = (char *)_os_log_send_and_compose_impl();
    if ((v102[23] & 0x80000000) != 0) {
      operator delete(*(void **)v102);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v88);
    if (v88 != buf) {
      free(v88);
    }
  }
  uint64_t v45 = *(void **)(a1 + 128);
  if (v45 != (void *)(a1 + 136))
  {
    while (1)
    {
      if (*(unsigned char *)(a1 + 160) && *(unsigned char *)(a1 + 192)) {
        goto LABEL_166;
      }
      uint64_t v46 = v45[10];
      unint64_t v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
      char v97 = 0;
      char v97 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v46);
      if (*(_DWORD *)(v46 + 48))
      {
        sub_101AAAE84();
        __break(1u);
        goto LABEL_194;
      }
      if (sub_100065F70(v46)) {
        break;
      }
      if (!sub_100065380(v46, v94, *((float *)v9 + 32), a3))
      {
        int v47 = 65;
        goto LABEL_138;
      }
      char v96 = 0;
      int v48 = sub_1001AD904(a1, (unsigned char *)v46);
      if (v48 == 2)
      {
        id v6 = (unsigned char *)(a1 + 184);
        if (!a2)
        {
          id v6 = (unsigned char *)(a1 + 184);
          if (!v96)
          {
            int v47 = 76;
            goto LABEL_138;
          }
        }
      }
      else
      {
        if (v48 != 1)
        {
          int v47 = 67;
          goto LABEL_138;
        }
        char v96 = 1;
        id v6 = (unsigned char *)(a1 + 152);
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      int v49 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v50 = *(void *)v6;
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, chose, downloadState, %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        uint64_t v66 = *(void *)v6;
        *(_DWORD *)long long v102 = 136446210;
        *(void *)&v102[4] = v66;
        int v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v67);
        if (v67 != buf) {
          free(v67);
        }
      }
      uint64_t v51 = *((void *)v6 + 3);
      *(unsigned char *)(v51 + 80) = v96;
      *(unsigned char *)(v51 + 81) = 1;
      if (*((char *)v9 + 79) >= 0) {
        int v52 = v9 + 7;
      }
      else {
        int v52 = (uint64_t *)v9[7];
      }
      __int16 v8 = +[NSString stringWithUTF8String:v52];
      if (!*((unsigned char *)v9 + 80))
      {
        id v53 = +[GEOCountryConfiguration sharedConfiguration];
        if (*((char *)v9 + 111) >= 0) {
          unint64_t v54 = v9 + 11;
        }
        else {
          unint64_t v54 = (uint64_t *)v9[11];
        }
        __int16 v8 = (uint64_t *)[v53 defaultForKey:[NSString stringWithUTF8String:v54] defaultValue:v8];
      }
      sub_100134750(buf, (char *)[v8 UTF8String]);
      int v55 = sub_101045C74(v46, (uint64_t)buf, *((void *)v6 + 3));
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v55)
      {
        v6[8] = 1;
        *((double *)v6 + 2) = a3;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        ++v95;
        uint64_t v56 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v46 + 16))(buf, v46);
          double v57 = buf;
          if (buf[23] < 0) {
            double v57 = *(unsigned char **)buf;
          }
          *(_DWORD *)long long v102 = 67240451;
          *(_DWORD *)&v102[4] = v95;
          *(_WORD *)&v102[8] = 2081;
          *(void *)&v102[10] = v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %{public}d, tile, %{private}s", v102, 0x12u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231ADF0);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v46 + 16))(v102, v46);
          int v68 = v102;
          if (v102[23] < 0) {
            int v68 = *(unsigned char **)v102;
          }
          int v98 = 67240451;
          unsigned int v99 = v95;
          __int16 v100 = 2081;
          long long v101 = v68;
          os_log_type_t v69 = (char *)_os_log_send_and_compose_impl();
          if ((v102[23] & 0x80000000) != 0) {
            operator delete(*(void **)v102);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v69);
          if (v69 != buf) {
            free(v69);
          }
        }
        (*(void (**)(uint64_t *))(v9[29] + 16))(v9 + 29);
        ++*((_DWORD *)v9 + 70);
        (*(void (**)(uint64_t *))(v9[29] + 24))(v9 + 29);
        sub_100134750(buf, "startDownloading");
        sub_100D3B360((uint64_t)(v9 + 29), (uint64_t *)buf, *(_DWORD *)(a1 + 408));
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (sub_1000FC450())
        {
          sub_1000E9354(buf);
          os_log_type_t v58 = (char *)(v46 + 8);
          if (*(char *)(v46 + 31) < 0) {
            os_log_type_t v58 = *(char **)v58;
          }
          sub_1004D34AC((uint64_t)buf, "getTile", v58);
          sub_1000EA238((uint64_t)buf, "protection", (unsigned char *)(a1 + 216));
          sub_1000EA238((uint64_t)buf, "isCurrentTile", &v97);
          sub_1000EA238((uint64_t)buf, "isAllowCellular", &v96);
          sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
          sub_10013F3C4(buf);
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        uint64_t v59 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          double v60 = sub_10013DAC0(v46 + 48);
          double v61 = sub_10013DA9C(v46 + 48);
          LODWORD(v6) = *(_DWORD *)(a1 + 408);
          id v62 = [v8 UTF8String];
          *(_DWORD *)uint64_t buf = 134284291;
          *(double *)&uint8_t buf[4] = v60;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&buf[14] = v61;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&uint8_t buf[24] = v6;
          *(_WORD *)&unsigned char buf[28] = 2081;
          *(void *)&buf[30] = v62;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231ADF0);
          }
          double v70 = sub_10013DAC0(v46 + 48);
          double v71 = sub_10013DA9C(v46 + 48);
          LODWORD(v6) = *(_DWORD *)(a1 + 408);
          id v72 = [v8 UTF8String];
          *(_DWORD *)long long v102 = 134284291;
          *(double *)&v102[4] = v70;
          *(_WORD *)&v102[12] = 2049;
          *(double *)&v102[14] = v71;
          *(_WORD *)&v102[22] = 1026;
          *(_DWORD *)&v102[24] = v6;
          *(_WORD *)&v102[28] = 2081;
          *(void *)&v102[30] = v72;
          double v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v73);
          if (v73 != buf) {
            free(v73);
          }
        }
        sub_1001BF28C(v46, 68);
        if (v95 > 1) {
          goto LABEL_166;
        }
      }
LABEL_139:
      int v63 = (void *)v45[1];
      if (v63)
      {
        do
        {
          os_log_type_t v64 = v63;
          int v63 = (void *)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          os_log_type_t v64 = (void *)v45[2];
          BOOL v65 = *v64 == (void)v45;
          uint64_t v45 = v64;
        }
        while (!v65);
      }
      uint64_t v45 = v64;
      if (v64 == (void *)(a1 + 136)) {
        goto LABEL_166;
      }
    }
    int v47 = 80;
LABEL_138:
    sub_1001BF28C(v46, v47);
    goto LABEL_139;
  }
LABEL_166:
  uint64_t v74 = *(void *)(a1 + 144);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  int v75 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v76 = *(unsigned __int8 *)(a1 + 160);
    int v77 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)uint64_t buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v95;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v74;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v76;
    *(_WORD *)&uint8_t buf[24] = 1026;
    *(_DWORD *)&buf[26] = v77;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, tilesToDownload, %{public}lu, small, %{public}d, large, %{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    int v89 = *(unsigned __int8 *)(a1 + 160);
    int v90 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)long long v102 = 67240960;
    *(_DWORD *)&v102[4] = v95;
    *(_WORD *)&v102[8] = 2050;
    *(void *)&v102[10] = v74;
    *(_WORD *)&v102[18] = 1026;
    *(_DWORD *)&v102[20] = v89;
    *(_WORD *)&v102[24] = 1026;
    *(_DWORD *)&v102[26] = v90;
    uint64_t v91 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v91);
    if (v91 != buf) {
      free(v91);
    }
  }
  if (!*(unsigned char *)(a1 + 160) && !*(unsigned char *)(a1 + 192))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v78 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, NoActiveDownloads", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      *(_WORD *)long long v102 = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v29);
      goto LABEL_191;
    }
  }
}

void sub_1000226FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100022744(uint64_t a1, double *a2)
{
  int v49 = 0;
  unint64_t v4 = *(void *)(a1 + 32) + *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = (void *)(v5 + 8 * (v4 / 0x17));
  if (v6 == v5) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *v7 + 176 * (v4 % 0x17);
  }
  while (1)
  {
    unint64_t v9 = v6 == v5
       ? 0
       : *(void *)(v5 + 8 * (*(void *)(a1 + 32) / 0x17uLL)) + 176 * (*(void *)(a1 + 32) % 0x17uLL);
    if (v8 == v9) {
      break;
    }
    uint64_t v10 = v8;
    if (v8 == *v7) {
      uint64_t v10 = *(v7 - 1) + 4048;
    }
    if (sub_100022DBC(v10 - 176, a2) > 5.0) {
      break;
    }
    uint64_t v11 = v8;
    if (v8 == *v7) {
      uint64_t v11 = *(v7 - 1) + 4048;
    }
    uint64_t v12 = (char *)off_10241ADE0;
    if (!off_10241ADE0) {
      goto LABEL_32;
    }
    double v13 = &off_10241ADE0;
    int v14 = *(_DWORD *)(v11 - 16);
    char v15 = (char *)off_10241ADE0;
    do
    {
      int v16 = *((_DWORD *)v15 + 7);
      BOOL v17 = v16 < v14;
      if (v16 >= v14) {
        int v18 = (char **)v15;
      }
      else {
        int v18 = (char **)(v15 + 8);
      }
      if (!v17) {
        double v13 = (_UNKNOWN **)v15;
      }
      char v15 = *v18;
    }
    while (*v18);
    if (v13 == &off_10241ADE0 || v14 < *((_DWORD *)v13 + 7)) {
      goto LABEL_32;
    }
    __int16 v19 = &off_10241ADE0;
    int v20 = *(_DWORD *)(a1 + 712);
    do
    {
      int v21 = *((_DWORD *)v12 + 7);
      BOOL v22 = v21 < v20;
      if (v21 >= v20) {
        BOOL v23 = (char **)v12;
      }
      else {
        BOOL v23 = (char **)(v12 + 8);
      }
      if (!v22) {
        __int16 v19 = (_UNKNOWN **)v12;
      }
      uint64_t v12 = *v23;
    }
    while (*v23);
    if (v19 == &off_10241ADE0 || v20 < *((_DWORD *)v19 + 7))
    {
LABEL_32:
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      BOOL v24 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = v8;
        if (v8 == *v7) {
          uint64_t v25 = *(v7 - 1) + 4048;
        }
        double v26 = *a2;
        int v27 = *(_DWORD *)(a1 + 652);
        int v28 = *(_DWORD *)(v25 - 16);
        int v29 = *(_DWORD *)(a1 + 712);
        *(_DWORD *)uint64_t buf = 134349824;
        *(double *)double v57 = v26;
        *(_WORD *)&v57[8] = 1026;
        *(_DWORD *)os_log_type_t v58 = v27;
        *(_WORD *)&v58[4] = 1026;
        int v59 = v28;
        __int16 v60 = 1026;
        int v61 = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "FusedLoc,Invalid provider type,time,%{public}.2lf,ID,%{public}d,locType,%{public}d,prominentType,%{public}d", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1023207F0);
        }
        double v34 = *a2;
        int v35 = *(_DWORD *)(a1 + 652);
        uint64_t v36 = v8;
        if (v8 == *v7) {
          uint64_t v36 = *(v7 - 1) + 4048;
        }
        int v37 = *(_DWORD *)(v36 - 16);
        int v38 = *(_DWORD *)(a1 + 712);
        int v50 = 134349824;
        *(double *)uint64_t v51 = v34;
        *(_WORD *)&v51[8] = 1026;
        *(_DWORD *)int v52 = v35;
        *(_WORD *)&v52[4] = 1026;
        int v53 = v37;
        __int16 v54 = 1026;
        int v55 = v38;
        int v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLLocationType cllcf::LCFusionLocationHypothesis::updateProminentProviderType(const CFTimeInterval &)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
    }
    else
    {
      uint64_t v31 = v8;
      if (v8 == *v7) {
        uint64_t v31 = *(v7 - 1) + 4048;
      }
      int v32 = *(_DWORD *)sub_100022F78((uint64_t)&unk_10241ADD8, (int *)(v31 - 16));
      if (v32 <= *(_DWORD *)sub_100022F78((uint64_t)&unk_10241ADD8, &v49))
      {
        uint64_t v33 = v8;
        if (v8 == *v7) {
          uint64_t v33 = *(v7 - 1) + 4048;
        }
        int v49 = *(_DWORD *)(v33 - 16);
      }
    }
    if (v8 == *v7)
    {
      uint64_t v30 = *--v7;
      unint64_t v8 = v30 + 4048;
    }
    v8 -= 176;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  if (v49)
  {
    *(_DWORD *)(a1 + 712) = v49;
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    int v40 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v41 = *(_DWORD *)(a1 + 652);
      unint64_t v42 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
      LODWORD(v42) = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8 * (v42 / 0x17)) + 176 * (v42 % 0x17) + 160);
      int v43 = *(_DWORD *)(a1 + 712);
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)double v57 = v41;
      *(_WORD *)&v57[4] = 1026;
      *(_DWORD *)&v57[6] = v42;
      *(_WORD *)os_log_type_t v58 = 1026;
      *(_DWORD *)&v58[2] = v43;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "FusedLoc,Unable to set a provider type for hypothesis ID,%{public}d,currentLocationType,%{public}d,previously set type,%{public}d,will be used", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      int v45 = *(_DWORD *)(a1 + 652);
      unint64_t v46 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
      LODWORD(v46) = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8 * (v46 / 0x17)) + 176 * (v46 % 0x17) + 160);
      int v47 = *(_DWORD *)(a1 + 712);
      int v50 = 67240704;
      *(_DWORD *)uint64_t v51 = v45;
      *(_WORD *)&v51[4] = 1026;
      *(_DWORD *)&v51[6] = v46;
      *(_WORD *)int v52 = 1026;
      *(_DWORD *)&v52[2] = v47;
      int v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationType cllcf::LCFusionLocationHypothesis::updateProminentProviderType(const CFTimeInterval &)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
  }
  return *(unsigned int *)(a1 + 712);
}

void sub_100022DAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

double sub_100022DBC(uint64_t a1, double *a2)
{
  double v2 = *(double *)(a1 + 8);
  if (v2 > 0.0) {
    return *a2 - v2;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1023207F0);
  }
  unint64_t v4 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,getAge called while MCT not set", buf, 2u);
  }
  double v3 = -1.0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CFTimeInterval cllcf::LCFusionFusedLocation::getAge(const CFTimeInterval &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v3;
}

void sub_100022F6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t *sub_100022F78(uint64_t a1, int *a2)
{
  double v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10000EDDC("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4) {
        break;
      }
      double v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 4;
    }
    double v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void sub_100022FD0(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67174657;
    int v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,received onLocationDerivedNotification,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    BOOL v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (sub_10016CCBC())
  {
    double v9 = a4[117];
    double v10 = a4[119];
    double v11 = a4[118];
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    float v14 = v9;
    float v15 = v10;
    float v13 = Current - v11;
    float v16 = fabsf(v13);
    BOOL v17 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a1 + 1316);
      *(_DWORD *)uint64_t buf = 67241472;
      int v28 = v18;
      __int16 v29 = 2050;
      double v30 = v14;
      __int16 v31 = 2050;
      double v32 = v15;
      __int16 v33 = 2050;
      double v34 = v11;
      __int16 v35 = 2050;
      double v36 = Current;
      __int16 v37 = 2050;
      double v38 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BaroAlt,received WSB update, activity type,%{public}u,speed,%{public}.3lf,Unc,%{public}.3lf,timestamp,%{public}.3lf,curTime,%{public}.3lf,ageOfEstimation,%{public}.3lf", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    unsigned int v19 = *(_DWORD *)(a1 + 1316);
    if (v19 <= 0x38
      && ((1 << v19) & 0x110000000000C20) != 0
      && (*(_DWORD *)(a1 + 1320) - 1) <= 1
      && *(unsigned char *)(a1 + 3481)
      && v16 <= 180.0
      && v14 >= 0.0
      && v14 <= 13.0
      && v15 > 0.0
      && v15 < 4.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v20 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "BaroAlt,received WSB update, turn GPS ON", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      if (sub_10191DA04(a1, Current))
      {
        sub_10191E3C8(a1, 1, Current);
        return;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      BOOL v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,no power budget to turn GPS ON", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1)
        {
LABEL_50:
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
          return;
        }
LABEL_56:
        dispatch_once(&qword_102419380, &stru_102345560);
        goto LABEL_50;
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v21 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "BaroAlt,#Warning,ALS is not supported on legacy HW", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_50;
      }
      goto LABEL_56;
    }
  }
}

void sub_100023760(uint64_t a1, int *a2, int a3, int a4, int a5, double a6)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a2;
    *(_DWORD *)uint64_t buf = 67241216;
    int v35 = v13;
    __int16 v36 = 1026;
    BOOL v37 = a3 != 0;
    __int16 v38 = 1026;
    BOOL v39 = a4 != 0;
    __int16 v40 = 1026;
    BOOL v41 = a5 != 0;
    __int16 v42 = 2050;
    *(double *)int v43 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#LCStats,feedLCFuserSessionStartMetrics,ntfy,%{public}d,%{public}d,%{public}d,%{public}d,hunc,%{public}0.2f", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedLCFuserSessionStartMetrics(const CLLocationProvider_Type::Notification &, const int, const int, const int, const double)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  int v14 = *a2;
  if (*a2 > 2) {
    return;
  }
  if (a3 >= 2 && !v14) {
    goto LABEL_9;
  }
  if (v14 == 2)
  {
    if (a3 > 0 || a4 > 0 || a5 >= 2)
    {
LABEL_9:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      float v15 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#LCStats,feedLCFuserSessionStartMetrics,not a first client at given granularity", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1)
        {
LABEL_59:
          __int16 v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedLCFuserSessionStartMetrics(const CLLocationProvider_Type::Notification &, const int, const int, const int, const double)", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
          return;
        }
LABEL_62:
        dispatch_once(&qword_102419380, &stru_102318208);
        goto LABEL_59;
      }
      return;
    }
  }
  else if (v14 == 1 && (a3 > 0 || a4 > 1))
  {
    goto LABEL_9;
  }
  unint64_t v16 = *(unsigned char *)(a1 + 384) == 0;
  uint64_t v17 = *(void *)(a1 + 344);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 352) - v17) >> 4) <= v16) {
    sub_100273D6C();
  }
  switch(v14)
  {
    case 2:
      ++*(_DWORD *)(v17 + 48 * (*(unsigned char *)(a1 + 384) == 0) + 44);
      if (a6 >= 1000.0) {
        break;
      }
      int v18 = (_DWORD *)(v17 + 48 * v16 + 8);
      goto LABEL_34;
    case 1:
      ++*(_DWORD *)(v17 + 48 * (*(unsigned char *)(a1 + 384) == 0) + 40);
      if (a6 >= 100.0) {
        break;
      }
      int v18 = (_DWORD *)(v17 + 48 * v16 + 4);
      goto LABEL_34;
    case 0:
      int v18 = (_DWORD *)(v17 + 48 * (*(unsigned char *)(a1 + 384) == 0));
      ++v18[9];
      if (a6 < 50.0) {
LABEL_34:
      }
        ++*v18;
      break;
  }
  if (a6 < 25.0)
  {
    uint64_t v19 = v17 + 48 * v16;
    v20.i64[0] = 0x100000001;
    v20.i64[1] = 0x100000001;
    *(int32x4_t *)(v19 + 12) = vaddq_s32(*(int32x4_t *)(v19 + 12), v20);
LABEL_42:
    int v21 = (_DWORD *)(v19 + 28);
    goto LABEL_43;
  }
  if (a6 < 50.0)
  {
    uint64_t v19 = v17 + 48 * v16;
    *(int32x2_t *)(v19 + 16) = vadd_s32(*(int32x2_t *)(v19 + 16), (int32x2_t)0x100000001);
LABEL_39:
    ++*(_DWORD *)(v19 + 24);
    goto LABEL_42;
  }
  if (a6 < 100.0)
  {
    uint64_t v19 = v17 + 48 * v16;
    *(int32x2_t *)(v19 + 20) = vadd_s32(*(int32x2_t *)(v19 + 20), (int32x2_t)0x100000001);
    goto LABEL_42;
  }
  if (a6 < 200.0)
  {
    uint64_t v19 = v17 + 48 * v16;
    goto LABEL_39;
  }
  int v21 = (_DWORD *)(v17 + 48 * v16 + 32);
  if (a6 < 500.0) {
    int v21 = (_DWORD *)(v17 + 48 * v16 + 28);
  }
LABEL_43:
  ++*v21;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  BOOL v22 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *(unsigned __int8 *)(a1 + 384);
    BOOL v24 = (_DWORD *)(v17 + 48 * v16);
    int v25 = v24[3];
    int v26 = v24[4];
    int v27 = v24[5];
    int v28 = v24[6];
    int v29 = v24[7];
    int v30 = v24[9];
    int v31 = v24[10];
    LODWORD(v24) = v24[11];
    *(_DWORD *)uint64_t buf = 67176705;
    int v35 = v23;
    __int16 v36 = 1026;
    BOOL v37 = v25;
    __int16 v38 = 1026;
    BOOL v39 = v26;
    __int16 v40 = 1026;
    BOOL v41 = v27;
    __int16 v42 = 1026;
    *(_DWORD *)int v43 = v28;
    *(_WORD *)&v43[4] = 1026;
    *(_DWORD *)&v43[6] = v29;
    __int16 v44 = 1026;
    int v45 = v30;
    __int16 v46 = 1026;
    int v47 = v31;
    __int16 v48 = 1026;
    int v49 = (int)v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#LCStats,feedLCFuserSessionStartMetrics,homeVisit,%{private}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_59;
    }
    goto LABEL_62;
  }
}

void sub_100023EA8(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 95) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v4 + 72);
    uint64_t v14 = *(void *)(v4 + 88);
  }
  if (*(char *)(v4 + 119) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(v4 + 96), *(void *)(v4 + 104));
  }
  else
  {
    long long __p = *(_OWORD *)(v4 + 96);
    uint64_t v16 = *(void *)(v4 + 112);
  }
  uint64_t v17 = *(void *)(v4 + 120);
  if (v14 >= 0) {
    uint64_t v5 = __dst;
  }
  else {
    uint64_t v5 = (void **)__dst[0];
  }
  id v6 = [*(id *)(*(void *)(a1 + 8) + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5))];
  if (v16 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  int v8 = +[NSString stringWithUTF8String:p_p];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v19 = 0;
    __int16 v20 = 2082;
    int v21 = "";
    __int16 v22 = 2114;
    id v23 = v6;
    __int16 v24 = 2114;
    int v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#PersistentSubscription PersistenceBackend removeAllPersistedDataForSubscription\", \"client\":%{public, location:escape_only}@, \"storageName\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  double v10 = (std::__shared_weak_count *)a2[1];
  unint64_t v11 = *a2;
  uint64_t v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10017CC88(a1 + 16, &v11);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (objc_msgSend(v6, "isValidCKP", v11)) {
    [*(id *)(*(void *)(a1 + 8) + 136) removeValueForKey:v8 atKeyPath:v6];
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1000240EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100024138(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  if (*(char *)(*a2 + 95) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(v6 + 72), *(void *)(v6 + 80));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v6 + 72);
    uint64_t v20 = *(void *)(v6 + 88);
  }
  if (*(char *)(v6 + 119) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(v6 + 96), *(void *)(v6 + 104));
  }
  else
  {
    long long __p = *(_OWORD *)(v6 + 96);
    uint64_t v22 = *(void *)(v6 + 112);
  }
  uint64_t v23 = *(void *)(v6 + 120);
  if (v20 >= 0) {
    int v7 = __dst;
  }
  else {
    int v7 = (void **)__dst[0];
  }
  id v8 = sub_100103E24(*(void *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:v7]));
  if (v22 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  double v10 = +[NSString stringWithUTF8String:p_p];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  unint64_t v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v12 = [a3 UTF8String];
    *(_DWORD *)uint64_t buf = 68289795;
    int v25 = 0;
    __int16 v26 = 2082;
    int v27 = "";
    __int16 v28 = 2114;
    id v29 = v8;
    __int16 v30 = 2114;
    int v31 = v10;
    __int16 v32 = 2081;
    id v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#PersistentSubscription PersistenceBackend clearObjectForKeyForSubscription\", \"client\":%{public, location:escape_only}@, \"storageName\":%{public, location:escape_only}@, \"storageKey\":%{private, location:escape_only}s}", buf, 0x30u);
  }
  int v13 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", [*(id *)(*(void *)(a1 + 8) + 136) dictionaryForKey:v10 atKeyPath:v8 defaultValue:&__NSDictionary0__struct]);
  [(NSMutableDictionary *)v13 removeObjectForKey:a3];
  id v14 = [(NSMutableDictionary *)v13 count];
  float v15 = *(void **)(*(void *)(a1 + 8) + 136);
  if (v14)
  {
    [v15 setDictionary:v13 forKey:v10 atKeyPath:v8];
  }
  else
  {
    [v15 removeValueForKey:v10 atKeyPath:v8];
    uint64_t v16 = (std::__shared_weak_count *)a2[1];
    unint64_t v17 = *a2;
    int v18 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10017CC88(a1 + 16, &v17);
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1000243F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_100286A7C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_100024444(uint64_t a1, int a2)
{
  memset(&v14, 0, sizeof(v14));
  *(_DWORD *)uint64_t buf = 0;
  int v4 = sub_1001072EC(a1, (int *)buf, 1);
  *(_DWORD *)uint64_t buf = 1;
  int v5 = sub_1001072EC(a1, (int *)buf, 1);
  *(_DWORD *)uint64_t buf = 2;
  int v6 = sub_1001072EC(a1, (int *)buf, 1);
  int v7 = "Fine";
  id v8 = "None";
  if (v6 > 0) {
    id v8 = "Coarse";
  }
  if (v5 <= 0) {
    int v7 = v8;
  }
  if (v4 <= 0) {
    double v9 = v7;
  }
  else {
    double v9 = "Best";
  }
  std::string::assign(&v14, v9);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C6458);
  }
  double v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v11 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 67241218;
    int v26 = v4;
    __int16 v27 = 1026;
    int v28 = v5;
    __int16 v29 = 1026;
    int v30 = v6;
    __int16 v31 = 2082;
    __int16 v32 = v11;
    __int16 v33 = 1026;
    int v34 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C6458);
    }
    id v12 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      id v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    int v15 = 67241218;
    int v16 = v4;
    __int16 v17 = 1026;
    int v18 = v5;
    __int16 v19 = 1026;
    int v20 = v6;
    __int16 v21 = 2082;
    uint64_t v22 = v12;
    __int16 v23 = 1026;
    int v24 = a2;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::logRequiredNotificationLevel(BOOL)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_100024718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100024744(uint64_t a1)
{
  double v2 = objc_opt_new();
  double v3 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = *(id *)(a1 + 432);
  id v4 = [obj countByEnumeratingWithState:&v28 objects:v38 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v29;
    *(void *)&long long v5 = 68289282;
    long long v21 = v5;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(obj);
        }
        double v9 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v8);
        unsigned int v27 = [v9 triggerType:v21];
        *(void *)uint64_t buf = &v27;
        double v10 = *((double *)sub_1000C5658((uint64_t **)(a1 + 408), (int *)&v27, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 6);
        [v9 triggerTimestamp];
        if (v10 + v11 <= v3)
        {
          [v2 addObject:v9];
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022ADD90);
          }
          uint64_t v15 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = v21;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v34 = 2082;
            int v35 = "";
            __int16 v36 = 2050;
            uint64_t v37 = 9;
            int v13 = v15;
            std::string v14 = "{\"msg%{public}.0s\":\"found ready transaction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
            goto LABEL_15;
          }
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022ADD90);
          }
          uint64_t v12 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = v21;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v34 = 2082;
            int v35 = "";
            __int16 v36 = 2050;
            uint64_t v37 = 9;
            int v13 = v12;
            std::string v14 = "{\"msg%{public}.0s\":\"found non-ready transaction\", \"subHarvester\":%{public, location:CLSubHarvest"
                  "erIdentifier}lld}";
LABEL_15:
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, v14, buf, 0x1Cu);
          }
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v28 objects:v38 count:16];
    }
    while (v6);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v16 = [v2 countByEnumeratingWithState:&v23 objects:v32 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v24;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v24 != v18) {
          objc_enumerationMutation(v2);
        }
        int v20 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        sub_1003C1510(a1, v20);
        [*(id *)(a1 + 432) removeObject:v20];
        sub_100D6B950(a1);
      }
      id v17 = [v2 countByEnumeratingWithState:&v23 objects:v32 count:16];
    }
    while (v17);
  }

  sub_10003FF00(a1);
  sub_100016F30(a1);
}

unsigned __int8 *sub_100024ABC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  id v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  id v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)id v17 = 0;
  *((void *)v17 + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100100330(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  sub_1007E2624((uint64_t)v29, 0);
  return i;
}

void sub_100024D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007E2624((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

id sub_100024D70(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234C6C8);
      }
      double v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234C6C8);
      }
      long long v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10234C6C8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100025110(uint64_t a1)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::sendTechStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    double v3 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::sendTechStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  id v4 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10017A6F8;
  v5[3] = &unk_1022A3020;
  v5[4] = a1;
  [v4 sync:v5];
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100025304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100025324(uint64_t a1)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::checkActiveProviders", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    double v3 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::checkActiveProviders\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  id v4 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10017A6FC;
  v5[3] = &unk_1022A3020;
  v5[4] = a1;
  [v4 sync:v5];
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100025518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100025538(uint64_t a1, double *a2, uint64_t *a3)
{
  sub_100071848(a1, a2);
  id v6 = (std::__shared_weak_count *)a3[1];
  if (v6)
  {
    char v7 = std::__shared_weak_count::lock(v6);
    id v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a3;
      if (*a3)
      {
        if (*(double *)(v9 + 40) > 0.0)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)(a1 + 536) = v9;
          __int16 v10 = *(std::__shared_weak_count **)(a1 + 544);
          *(void *)(a1 + 544) = v8;
          if (v10) {
            sub_1000DB0A0(v10);
          }
          *(double *)(a1 + 352) = *a2;
          double v11 = *(double *)(v9 + 56);
          *(void *)(a1 + 360) = *(void *)(v9 + 8);
          if (v11 > 0.0)
          {
            *(void *)uint64_t buf = 0;
            unsigned int v12 = *(_DWORD *)(a1 + 344) - 1;
            double v13 = 4.0;
            if (v12 <= 9) {
              double v13 = dbl_101D2AEA8[v12];
            }
            double v51 = v13;
            sub_10070AA9C(a1 + 296, (double *)(v9 + 48), (double *)(v9 + 56), (double *)buf, &v51, (int *)(a1 + 344));
            *(void *)(a1 + 384) = *(void *)(v9 + 48);
          }
          *(double *)(a1 + 8) = *(double *)(v9 + 24) * 0.0174532925;
          *(double *)(a1 + 16) = *(double *)(v9 + 32) * 0.0174532925;
          double v14 = fmax(*(double *)(v9 + 40), 1.0);
          double v15 = *(double *)(v9 + 80);
          if (v15 < 0.0
            || (double v16 = *(double *)(v9 + 88), v16 <= 0.0)
            || (double v17 = *(double *)(v9 + 96), v17 < 0.0)
            || (double v38 = *(double *)(v9 + 104), v38 <= 0.0)
            || v38 >= 360.0)
          {
            unsigned int v18 = *(_DWORD *)(a1 + 344) - 1;
            double v19 = 20.0;
            if (v18 <= 9) {
              double v19 = dbl_101D2AC10[v18];
            }
            *(_OWORD *)(a1 + 256) = 0u;
            *(_OWORD *)(a1 + 272) = 0u;
            *(_OWORD *)(a1 + 224) = 0u;
            *(_OWORD *)(a1 + 240) = 0u;
            *(_OWORD *)(a1 + 192) = 0u;
            *(_OWORD *)(a1 + 208) = 0u;
            *(_OWORD *)(a1 + 176) = 0u;
            double v20 = v19 * v19 * 0.5;
            double v21 = v14 * v14 * 0.5;
            *(double *)(a1 + 168) = v21;
            *(double *)(a1 + 208) = v21;
            *(double *)(a1 + 248) = v20;
            *(double *)(a1 + 288) = v20;
            *(void *)(a1 + 392) = 0;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0;
LABEL_17:
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v22 = sub_1001BD27C((double *)(a1 + 480), (double *)&v50, (double *)&v49, *(double *)(v9 + 24), *(double *)(a1 + 384));
            if (v22)
            {
              *(void *)(a1 + 416) = v49;
              *(unsigned char *)(a1 + 424) = 1;
              *(void *)(a1 + 432) = v50;
              *(unsigned char *)(a1 + 440) = 1;
              *(unsigned char *)a1 = 1;
              *(void *)(a1 + 552) = 0xBFF0000000000000;
              *(unsigned char *)(a1 + 560) = 0;
              *(void *)(a1 + 368) = 0;
              *(void *)(a1 + 376) = 0;
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              unint64_t v23 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v24 = *(_DWORD *)(a1 + 564);
                double v25 = *a2;
                *(_DWORD *)uint64_t buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v24;
                __int16 v55 = 2050;
                double v56 = v25;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,filter reinitialized", buf, 0x12u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_33;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              int v26 = *(_DWORD *)(a1 + 564);
              double v27 = *a2;
              LODWORD(v51) = 67240448;
              HIDWORD(v51) = v26;
              __int16 v52 = 2050;
              double v53 = v27;
              long long v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::reinitialize(const CFTimeInterval &, const std::weak_ptr<const LCFusionProviderLocation>)", "%s\n", v28);
            }
            else
            {
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              __int16 v33 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
              {
                int v34 = *(_DWORD *)(a1 + 564);
                double v35 = *a2;
                *(_DWORD *)uint64_t buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v34;
                __int16 v55 = 2050;
                double v56 = v35;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,reinitialize filter calc_dNdE failed", buf, 0x12u);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_33;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              int v36 = *(_DWORD *)(a1 + 564);
              double v37 = *a2;
              LODWORD(v51) = 67240448;
              HIDWORD(v51) = v36;
              __int16 v52 = 2050;
              double v53 = v37;
              long long v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::reinitialize(const CFTimeInterval &, const std::weak_ptr<const LCFusionProviderLocation>)", "%s\n", v28);
            }
            if (v28 != (char *)buf) {
              free(v28);
            }
LABEL_33:
            sub_1000DB0A0(v8);
            return v22;
          }
          if (v16 >= 5.0 || (int v39 = *(_DWORD *)(a1 + 344), (v39 - 1) >= 5) && v39 != 10)
          {
LABEL_54:
            *(double *)(a1 + 400) = v17;
            *(double *)(a1 + 408) = v38;
            double v41 = *(double *)(v9 + 88);
            *(_OWORD *)(a1 + 256) = 0u;
            *(_OWORD *)(a1 + 272) = 0u;
            *(_OWORD *)(a1 + 224) = 0u;
            *(_OWORD *)(a1 + 240) = 0u;
            *(_OWORD *)(a1 + 192) = 0u;
            *(_OWORD *)(a1 + 208) = 0u;
            *(_OWORD *)(a1 + 176) = 0u;
            double v42 = v41 * v41 * 0.5;
            double v43 = v14 * v14 * 0.5;
            *(double *)(a1 + 168) = v43;
            *(double *)(a1 + 208) = v43;
            *(double *)(a1 + 248) = v42;
            *(double *)(a1 + 288) = v42;
            double v44 = *(double *)(v9 + 80);
            __double2 v45 = __sincos_stret(*(double *)(v9 + 96) * 0.0174532925);
            *(double *)(a1 + 24) = v44 * v45.__cosval;
            *(double *)(a1 + 32) = v45.__sinval * *(double *)(v9 + 80);
            *(void *)(a1 + 392) = *(void *)(v9 + 80);
            goto LABEL_17;
          }
          if (v15 >= 15.0)
          {
            int v40 = 7;
          }
          else
          {
            if (v15 < 6.0) {
              goto LABEL_54;
            }
            int v40 = 6;
          }
          *(_DWORD *)(a1 + 344) = v40;
          goto LABEL_54;
        }
      }
    }
  }
  else
  {
    id v8 = 0;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  long long v29 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    int v30 = *(_DWORD *)(a1 + 564);
    double v31 = *a2;
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v30;
    __int16 v55 = 2050;
    double v56 = v31;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,reinitialize filter failed,null or hunc <= 0", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v46 = *(_DWORD *)(a1 + 564);
    double v47 = *a2;
    LODWORD(v51) = 67240448;
    HIDWORD(v51) = v46;
    __int16 v52 = 2050;
    double v53 = v47;
    __int16 v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::reinitialize(const CFTimeInterval &, const std::weak_ptr<const LCFusionProviderLocation>)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
  uint64_t v22 = 0;
  uint64_t result = 0;
  if (v8) {
    goto LABEL_33;
  }
  return result;
}

void sub_100025CA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100025CB4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  if (!*(unsigned char *)(a1 + 2164))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v15 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Error,LC Fusion is not configured.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      *(_WORD *)uint64_t v254 = 0;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v49);
      if (v49 != buf) {
        free(v49);
      }
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  id v6 = (int *)(a2 + 96);
  if (!sub_100180B40(a1, *(_DWORD *)(a2 + 96))) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 2144) && *(unsigned char *)(a1 + 2208))
  {
    sub_100E9C4CC(a1);
    sub_1000F5BB0(a1 + 2216, *(void **)(a1 + 2224));
    *(void *)(a1 + 2216) = a1 + 2224;
    *(void *)(a1 + 2232) = 0;
    *(void *)(a1 + 2224) = 0;
    sub_1000F5BB0(a1 + 2240, *(void **)(a1 + 2248));
    *(void *)(a1 + 2240) = a1 + 2248;
    *(void *)(a1 + 2256) = 0;
    *(void *)(a1 + 2248) = 0;
    *(unsigned char *)(a1 + 2208) = 0;
  }
  long long v251 = *(_OWORD *)(a1 + 1040);
  long long v252 = *(_OWORD *)(a1 + 1056);
  *(_OWORD *)uint64_t v253 = *(_OWORD *)(a1 + 1072);
  long long v7 = *(_OWORD *)(a1 + 992);
  long long v247 = *(_OWORD *)(a1 + 976);
  long long v248 = v7;
  long long v8 = *(_OWORD *)(a1 + 1024);
  long long v249 = *(_OWORD *)(a1 + 1008);
  char v246 = off_10232A710;
  long long v250 = v8;
  *(_OWORD *)&v253[12] = *(_OWORD *)(a1 + 1084);
  sub_100188E9C(a1 + 968);
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v17 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a2 + 76);
      double v19 = sub_10003E9A4(*(_DWORD *)(a2 + 96));
      *(_DWORD *)uint64_t buf = 134349314;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Error,timestamp,%{public}.3f,Invalid location update,hunc <= 0,type,%{public}s", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v50 = *(void *)(a2 + 76);
    double v51 = sub_10003E9A4(*(_DWORD *)(a2 + 96));
    *(_DWORD *)uint64_t v254 = 134349314;
    *(void *)&v254[4] = v50;
    *(_WORD *)&v254[12] = 2082;
    *(void *)&v254[14] = v51;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v14);
    goto LABEL_81;
  }
  if (sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v9 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a2 + 76);
      double v11 = sub_10003E9A4(*(_DWORD *)(a2 + 96));
      *(_DWORD *)uint64_t buf = 134349314;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning,timestamp,%{public}.3f,Invalid location update,null island,type,%{public}s", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v12 = *(void *)(a2 + 76);
    double v13 = sub_10003E9A4(*(_DWORD *)(a2 + 96));
    *(_DWORD *)uint64_t v254 = 134349314;
    *(void *)&v254[4] = v12;
    *(_WORD *)&v254[12] = 2082;
    *(void *)&v254[14] = v13;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v14);
LABEL_81:
    if (v14 != buf) {
      free(v14);
    }
LABEL_29:
    *a3 = 1;
    *(_DWORD *)(a1 + 1104) = 2;
    sub_10095C074(a1 + 2272, 2);
    return *a3 != 0;
  }
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  long long v22 = *(_OWORD *)(a2 + 32);
  long long v23 = *(_OWORD *)(a2 + 48);
  long long v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v24;
  *(_OWORD *)(a1 + 32) = v22;
  *(_OWORD *)(a1 + 48) = v23;
  long long v25 = *(_OWORD *)(a2 + 96);
  long long v26 = *(_OWORD *)(a2 + 112);
  long long v27 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v26;
  *(_OWORD *)(a1 + 128) = v27;
  *(_OWORD *)(a1 + 96) = v25;
  if (*(double *)(a2 + 36) > 0.0) {
    *(void *)(a1 + 1704) = *(void *)(a2 + 28);
  }
  long long v245 = 0uLL;
  double v28 = *(double *)(a2 + 20);
  double v244 = v28;
  if (*(_DWORD *)(a2 + 96) == 1)
  {
    sub_100EA39C4(v254);
    uint64_t v29 = *(void *)v254;
    int v30 = *(uint64_t **)(a2 + 680);
    uint64_t v31 = *(void *)(a2 + 688);
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v32 = *(std::__shared_weak_count **)(v29 + 152);
    *(void *)(v29 + 144) = v30;
    *(void *)(v29 + 152) = v31;
    if (v32)
    {
      sub_1000DB0A0(v32);
      uint64_t v29 = *(void *)v254;
      int v30 = *(uint64_t **)(*(void *)v254 + 144);
    }
    *(_DWORD *)(v29 + 160) = *(_DWORD *)(a2 + 696);
    *(void *)(v29 + 132) = *(void *)(a2 + 200);
    *(_DWORD *)(v29 + 140) = *(_DWORD *)(a2 + 208);
    if (!v30 || *v30 == v30[1])
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      int v34 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(void *)(a2 + 504);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#GNSSTracking,mct,%{public}.3f,No satelliteAvailabilityReportPresent", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        uint64_t v125 = *(void *)(a2 + 504);
        int v295 = 134349056;
        uint64_t v296 = v125;
        uint64_t v126 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v126);
        if (v126 != buf) {
          free(v126);
        }
      }
    }
    else
    {
      sub_100E9BF24(a1, a2 + 160, v30, &v244);
    }
    uint64_t v33 = *(void *)v254;
    uint64_t v36 = *(void *)&v254[8];
    if (*(void *)&v254[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v254[8] + 8), 1uLL, memory_order_relaxed);
      *(void *)&long long v245 = v33;
      *((void *)&v245 + 1) = v36;
      if (*(void *)&v254[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&v254[8]);
      }
    }
    else
    {
      long long v245 = *(unint64_t *)v254;
    }
    double v28 = v244;
  }
  else
  {
    sub_10017EEB8(buf);
    long long v245 = *(_OWORD *)buf;
    uint64_t v33 = *(void *)buf;
  }
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v33 + 24))(v33, a2, v28);
  float v37 = *(float *)(a2 + 476);
  uint64_t v38 = *(void *)(a2 + 504);
  *(void *)(v33 + 16) = v38;
  *(double *)(v33 + 64) = v37;
  *(_DWORD *)(v33 + 72) = *(_DWORD *)(a2 + 472);
  int v39 = *(unsigned __int8 *)(a2 + 768);
  *(unsigned char *)(v33 + 124) = v39;
  if (v39)
  {
    if (*(double *)(v33 + 40) <= 60.0)
    {
      *(_OWORD *)(a1 + 2112) = *(_OWORD *)(v33 + 24);
      *(void *)(a1 + 2128) = v38;
    }
    else
    {
      *(unsigned char *)(v33 + 124) = 0;
    }
  }
  LOBYTE(v295) = 0;
  sub_100192684(a1, v33, a3, &v295);
  BOOL v16 = (_BYTE)v295 == 0;
  if ((_BYTE)v295) {
    goto LABEL_141;
  }
  if (*a3) {
    goto LABEL_140;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 32))(v33))
  {
    if (*(double *)(v33 + 88) > 0.0 && *(double *)(v33 + 80) > 0.0 && (*(_DWORD *)(a1 + 1912) - 1) <= 4)
    {
      *(void *)uint64_t buf = 0xBFF0000000000000;
      if ((sub_100011590(a1 + 1840, (double *)buf) & 1) == 0
        && (sub_100031028(a1 + 1840, &dbl_101D944D0) & 1) == 0
        && !sub_1001805B4((void *)(a1 + 1840), &dbl_101D944D0))
      {
        double v40 = *(double *)(v33 + 80);
        double v41 = sub_100E9C6C4((_DWORD *)(a1 + 1912));
        int v232 = (int *)(a1 + 1912);
        int v42 = *(_DWORD *)(a1 + 1912);
        if ((v42 - 2) >= 9 && v42 && *(double *)(v33 + 88) < 5.0) {
          double v41 = 64.0;
        }
        *(void *)uint64_t buf = v33 + 128;
        double v43 = v40 * v40;
        double v44 = 0.0;
        if (sub_10017CBA0((uint64_t **)(a1 + 192), (int *)(v33 + 128), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5]
          && (*(void *)uint64_t buf = v33 + 128,
              sub_10017CBA0((uint64_t **)(a1 + 192), (int *)(v33 + 128), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5][1]))
        {
          *(void *)uint64_t buf = v33 + 128;
          double v45 = 0.0;
          if (*(double *)(sub_10017CBA0((uint64_t **)(a1 + 192), (int *)(v33 + 128), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5][1]+ 80) >= 0.0)
          {
            *(void *)uint64_t buf = v33 + 128;
            int v46 = sub_10017CBA0((uint64_t **)(a1 + 192), (int *)(v33 + 128), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
            double v47 = (*(double (**)(uint64_t, uint64_t))(*(void *)v46[5][1] + 48))(v46[5][1], v33 + 16);
            double v45 = v47;
            if (v47 <= 0.0)
            {
              if (v47 != 0.0 && fabs(v47) <= 3.0) {
                goto LABEL_85;
              }
            }
            else
            {
              double v48 = *(double *)(v33 + 80);
              *(void *)uint64_t buf = v33 + 128;
              double v44 = (v48
                   - *(double *)(sub_10017CBA0((uint64_t **)(a1 + 192), (int *)(v33 + 128), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5][1]+ 80))/ v47;
              if (v45 != 0.0 && fabs(v45) <= 3.0)
              {
                if (v44 > 19.6) {
                  goto LABEL_87;
                }
                goto LABEL_85;
              }
            }
          }
        }
        else
        {
          double v45 = 0.0;
        }
        if (v43 > v41)
        {
LABEL_87:
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          __int16 v52 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
          {
            double v53 = (void *)v245;
            uint64_t v54 = *(void *)(v245 + 16);
            uint64_t v237 = *(void *)(v245 + 8);
            unsigned int v55 = *(_DWORD *)(v245 + 128);
            double v56 = sub_10003E9A4(v55);
            uint64_t v57 = v53[3];
            uint64_t v58 = v53[4];
            uint64_t v60 = v53[5];
            uint64_t v59 = v53[6];
            uint64_t v61 = v53[7];
            uint64_t v62 = v53[10];
            uint64_t v63 = v53[11];
            uint64_t v64 = v53[12];
            uint64_t v65 = v53[13];
            int v66 = *v232;
            *(_DWORD *)uint64_t buf = 134353411;
            *(void *)&uint8_t buf[4] = v237;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v54;
            __int16 v298 = 1026;
            unsigned int v299 = v55;
            __int16 v300 = 2082;
            long long v301 = v56;
            __int16 v302 = 2049;
            uint64_t v303 = v57;
            __int16 v304 = 2049;
            uint64_t v305 = v58;
            __int16 v306 = 2049;
            uint64_t v307 = v59;
            __int16 v308 = 2049;
            uint64_t v309 = v62;
            __int16 v310 = 2049;
            uint64_t v311 = v64;
            __int16 v312 = 2050;
            uint64_t v313 = v60;
            __int16 v314 = 2050;
            uint64_t v315 = v61;
            __int16 v316 = 2050;
            uint64_t v317 = v63;
            __int16 v318 = 2050;
            uint64_t v319 = v65;
            __int16 v320 = 2050;
            *(void *)long long v321 = sqrt(v41);
            *(_WORD *)&v321[8] = 2050;
            *(double *)&v321[10] = v45;
            *(_WORD *)&v321[18] = 2050;
            double v322 = v43;
            *(_WORD *)int v323 = 2050;
            *(double *)&v323[2] = v44;
            *(_WORD *)v324 = 1026;
            *(_DWORD *)&v324[2] = v66;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#fusion Provider estimated speed rejected,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}d", buf, 0xAEu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            uint64_t v160 = (void *)v245;
            uint64_t v161 = *(void *)(v245 + 8);
            uint64_t v231 = *(void *)(v245 + 16);
            unsigned int v162 = *(_DWORD *)(v245 + 128);
            int v163 = sub_10003E9A4(v162);
            uint64_t v164 = v160[3];
            uint64_t v165 = v160[4];
            uint64_t v167 = v160[5];
            uint64_t v166 = v160[6];
            uint64_t v168 = v160[7];
            uint64_t v169 = v160[10];
            uint64_t v170 = v160[11];
            uint64_t v171 = v160[12];
            uint64_t v172 = v160[13];
            int v173 = *v232;
            *(_DWORD *)uint64_t v254 = 134353411;
            *(void *)&v254[4] = v161;
            *(_WORD *)&v254[12] = 2050;
            *(void *)&v254[14] = v231;
            __int16 v255 = 1026;
            unsigned int v256 = v162;
            __int16 v257 = 2082;
            int v258 = v163;
            __int16 v259 = 2049;
            uint64_t v260 = v164;
            __int16 v261 = 2049;
            uint64_t v262 = v165;
            __int16 v263 = 2049;
            uint64_t v264 = v166;
            __int16 v265 = 2049;
            uint64_t v266 = v169;
            __int16 v267 = 2049;
            uint64_t v268 = v171;
            __int16 v269 = 2050;
            uint64_t v270 = v167;
            __int16 v271 = 2050;
            uint64_t v272 = v168;
            __int16 v273 = 2050;
            uint64_t v274 = v170;
            __int16 v275 = 2050;
            uint64_t v276 = v172;
            __int16 v277 = 2050;
            *(void *)__int16 v278 = sqrt(v41);
            *(_WORD *)&v278[8] = 2050;
            *(double *)&v278[10] = v45;
            *(_WORD *)&v278[18] = 2050;
            double v279 = v43;
            *(_WORD *)__int16 v280 = 2050;
            *(double *)&v280[2] = v44;
            *(_WORD *)v281 = 1026;
            *(_DWORD *)&void v281[2] = v173;
            int v174 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v174);
            if (v174 != buf) {
              free(v174);
            }
          }
          uint64_t v67 = v245;
          *(void *)(v245 + 88) = 0xBFF0000000000000;
          *(void *)(v67 + 104) = 0xBFF0000000000000;
          goto LABEL_93;
        }
LABEL_85:
        if (!*(unsigned char *)(a1 + 2096) || v43 <= v41) {
          goto LABEL_93;
        }
        goto LABEL_87;
      }
    }
  }
LABEL_93:
  *(void *)uint64_t buf = v6;
  os_log_type_t v238 = (uint64_t **)(a1 + 192);
  int v68 = sub_10017CBA0((uint64_t **)(a1 + 192), v6, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  os_log_type_t v69 = v68[5];
  double v70 = (char *)operator new(0x18uLL);
  long long v71 = v245;
  *(void *)double v70 = v69;
  *(_OWORD *)(v70 + 8) = v71;
  if (*((void *)&v71 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v68[5] = (uint64_t *)v70;
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  id v72 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v73 = *(void *)(v71 + 8);
    uint64_t v74 = *(void *)(v71 + 16);
    unsigned int v75 = *(_DWORD *)(v71 + 128);
    int v76 = sub_10003E9A4(v75);
    uint64_t v77 = *(void *)(v71 + 24);
    uint64_t v78 = *(void *)(v71 + 32);
    uint64_t v80 = *(void *)(v71 + 40);
    uint64_t v79 = *(void *)(v71 + 48);
    uint64_t v81 = *(void *)(v71 + 56);
    uint64_t v82 = *(void *)(v71 + 80);
    uint64_t v83 = *(void *)(v71 + 88);
    uint64_t v84 = *(void *)(v71 + 96);
    uint64_t v85 = *(void *)(v71 + 104);
    int v86 = *(_DWORD *)(v71 + 120);
    uint64_t v87 = *(void *)(v71 + 112);
    int v88 = *(unsigned __int8 *)(v71 + 124);
    *(_DWORD *)uint64_t buf = 134352899;
    *(void *)&uint8_t buf[4] = v73;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v74;
    __int16 v298 = 1026;
    unsigned int v299 = v75;
    __int16 v300 = 2082;
    long long v301 = v76;
    __int16 v302 = 2049;
    uint64_t v303 = v77;
    __int16 v304 = 2049;
    uint64_t v305 = v78;
    __int16 v306 = 2049;
    uint64_t v307 = v79;
    __int16 v308 = 2049;
    uint64_t v309 = v82;
    __int16 v310 = 2049;
    uint64_t v311 = v84;
    __int16 v312 = 2050;
    uint64_t v313 = v80;
    __int16 v314 = 2050;
    uint64_t v315 = v81;
    __int16 v316 = 2050;
    uint64_t v317 = v83;
    __int16 v318 = 2050;
    uint64_t v319 = v85;
    __int16 v320 = 1026;
    *(_DWORD *)long long v321 = v86;
    *(_WORD *)&v321[4] = 2050;
    *(void *)&v321[6] = v87;
    *(_WORD *)&v321[14] = 1026;
    *(_DWORD *)&v321[16] = v88;
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#fusion inputLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d", buf, 0x96u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v127 = v245;
    uint64_t v128 = *(void *)(v245 + 8);
    uint64_t v129 = *(void *)(v245 + 16);
    unsigned int v130 = *(_DWORD *)(v245 + 128);
    uint64_t v131 = sub_10003E9A4(v130);
    uint64_t v132 = *(void *)(v127 + 24);
    uint64_t v133 = *(void *)(v127 + 32);
    uint64_t v135 = *(void *)(v127 + 40);
    uint64_t v134 = *(void *)(v127 + 48);
    uint64_t v136 = *(void *)(v127 + 56);
    uint64_t v137 = *(void *)(v127 + 80);
    uint64_t v138 = *(void *)(v127 + 88);
    uint64_t v139 = *(void *)(v127 + 96);
    uint64_t v140 = *(void *)(v127 + 104);
    int v141 = *(_DWORD *)(v127 + 120);
    uint64_t v142 = *(void *)(v127 + 112);
    int v143 = *(unsigned __int8 *)(v127 + 124);
    *(_DWORD *)uint64_t v254 = 134352899;
    *(void *)&v254[4] = v128;
    *(_WORD *)&v254[12] = 2050;
    *(void *)&v254[14] = v129;
    __int16 v255 = 1026;
    unsigned int v256 = v130;
    __int16 v257 = 2082;
    int v258 = v131;
    __int16 v259 = 2049;
    uint64_t v260 = v132;
    __int16 v261 = 2049;
    uint64_t v262 = v133;
    __int16 v263 = 2049;
    uint64_t v264 = v134;
    __int16 v265 = 2049;
    uint64_t v266 = v137;
    __int16 v267 = 2049;
    uint64_t v268 = v139;
    __int16 v269 = 2050;
    uint64_t v270 = v135;
    __int16 v271 = 2050;
    uint64_t v272 = v136;
    __int16 v273 = 2050;
    uint64_t v274 = v138;
    __int16 v275 = 2050;
    uint64_t v276 = v140;
    __int16 v277 = 1026;
    *(_DWORD *)__int16 v278 = v141;
    *(_WORD *)&v278[4] = 2050;
    *(void *)&v278[6] = v142;
    *(_WORD *)&v278[14] = 1026;
    *(_DWORD *)&v278[16] = v143;
    os_log_type_t v144 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v144);
    if (v144 != buf) {
      free(v144);
    }
  }
  long long v89 = v245;
  long long v243 = v245;
  if (*((void *)&v245 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v245 + 1) + 8), 1uLL, memory_order_relaxed);
    sub_10003D458(a1, (uint64_t *)&v243, a3);
    sub_1000DB0A0(*((std::__shared_weak_count **)&v89 + 1));
  }
  else
  {
    sub_10003D458(a1, (uint64_t *)&v243, a3);
  }
  if (!*a3)
  {
    int v90 = *(_DWORD *)(a1 + 1096);
    if (v90)
    {
      uint64_t v91 = (_OWORD *)(a1 + 1048);
      if (v90 == 1
        && (*(_DWORD *)uint64_t v254 = 1,
            *(void *)uint64_t buf = v254,
            sub_10017CBA0(v238, (int *)v254, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5])
        && (v295 = 1, *(void *)uint64_t buf = &v295, sub_10017CBA0(v238, &v295, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5][1])
        && (int v242 = 1,
            *(void *)uint64_t buf = &v242,
            int v92 = sub_10017CBA0(v238, &v242, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
            (*(double (**)(uint64_t, uint64_t))(*(void *)v92[5][1] + 48))(v92[5][1], a1 + 984) <= 5.0))
      {
        *(_DWORD *)uint64_t v254 = 1;
        *(void *)uint64_t buf = v254;
        long long v122 = sub_10017CBA0(v238, (int *)v254, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
        uint64_t v124 = v122[1];
        os_log_type_t v123 = (std::__shared_weak_count *)v122[2];
        if (v123)
        {
          atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
          *uint64_t v91 = *(_OWORD *)(v124 + 80);
          *(_OWORD *)(a1 + 1064) = *(_OWORD *)(v124 + 96);
          sub_1000DB0A0(v123);
        }
        else
        {
          *uint64_t v91 = *(_OWORD *)(v124 + 80);
          *(_OWORD *)(a1 + 1064) = *(_OWORD *)(v124 + 96);
        }
      }
      else
      {
        long long v93 = *(_OWORD *)(a1 + 60);
        *uint64_t v91 = *(_OWORD *)(a1 + 44);
        *(_OWORD *)(a1 + 1064) = v93;
      }
    }
  }
  int v94 = (_OWORD *)(a1 + 976);
  if (*((double *)&v247 + 1) >= 0.0 && *(_DWORD *)&v253[24])
  {
    double v95 = sub_1001803DC((uint64_t)&v246, (double *)(a1 + 984));
    double v96 = v95;
    int v97 = *(unsigned __int8 *)(a1 + 165);
    if (!*(unsigned char *)(a1 + 165) && v95 >= 0.0 && v95 < 1.5)
    {
      int v97 = *(unsigned __int8 *)(v89 + 124);
      if (*(unsigned char *)(v89 + 124))
      {
LABEL_116:
        int v97 = 0;
        goto LABEL_127;
      }
      unsigned int v98 = *(_DWORD *)(a1 + 96);
      if (v98 <= 8 && ((1 << v98) & 0x1D0) != 0)
      {
        if ((*(_DWORD *)&v253[24] - 4) >= 5 || ((0x1Du >> (v253[24] - 4)) & 1) == 0)
        {
          *(_DWORD *)(a1 + 1104) = 8;
          *a3 = 1;
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          unsigned int v99 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v227 = *(void *)(a1 + 976);
            uint64_t v239 = *(void *)(a1 + 984);
            unsigned int v100 = *(_DWORD *)(a1 + 96);
            double v233 = sub_10003E9A4(v100);
            uint64_t v175 = *(void *)(a1 + 992);
            uint64_t v179 = *(void *)(a1 + 1000);
            uint64_t v183 = *(void *)(a1 + 1016);
            uint64_t v187 = *(void *)(a1 + 1048);
            uint64_t v191 = *(void *)(a1 + 1064);
            uint64_t v195 = *(void *)(a1 + 1008);
            uint64_t v199 = *(void *)(a1 + 1024);
            uint64_t v203 = *(void *)(a1 + 1056);
            uint64_t v207 = *(void *)(a1 + 1072);
            int v211 = *(_DWORD *)(a1 + 1088);
            uint64_t v215 = *(void *)(a1 + 1080);
            int v219 = *(unsigned __int8 *)(a1 + 1092);
            int v101 = *(_DWORD *)(a1 + 1456);
            uint64_t v102 = *(void *)(a1 + 1696);
            uint64_t v103 = *(void *)(v102 + 392);
            uint64_t v223 = *(void *)(v102 + 384);
            unsigned int v104 = *(_DWORD *)(a1 + 1096);
            __int16 v105 = sub_10003E9A4(v104);
            *(_DWORD *)uint64_t buf = 134355459;
            *(void *)&uint8_t buf[4] = v227;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v239;
            __int16 v298 = 1026;
            unsigned int v299 = v100;
            __int16 v300 = 2082;
            long long v301 = v233;
            __int16 v302 = 2049;
            uint64_t v303 = v175;
            __int16 v304 = 2049;
            uint64_t v305 = v179;
            __int16 v306 = 2049;
            uint64_t v307 = v183;
            __int16 v308 = 2049;
            uint64_t v309 = v187;
            __int16 v310 = 2049;
            uint64_t v311 = v191;
            __int16 v312 = 2050;
            uint64_t v313 = v195;
            __int16 v314 = 2050;
            uint64_t v315 = v199;
            __int16 v316 = 2050;
            uint64_t v317 = v203;
            __int16 v318 = 2050;
            uint64_t v319 = v207;
            __int16 v320 = 1026;
            *(_DWORD *)long long v321 = v211;
            *(_WORD *)&v321[4] = 2050;
            *(void *)&v321[6] = v215;
            *(_WORD *)&v321[14] = 1026;
            *(_DWORD *)&v321[16] = v219;
            LOWORD(v322) = 1026;
            *(_DWORD *)((char *)&v322 + 2) = v101;
            HIWORD(v322) = 2050;
            *(void *)int v323 = v223;
            *(_WORD *)&v323[8] = 1026;
            *(_DWORD *)v324 = v103;
            *(_WORD *)&v324[4] = 1026;
            unsigned int v325 = v104;
            __int16 v326 = 2082;
            v327 = v105;
            __int16 v328 = 1026;
            int v329 = *(_DWORD *)&v253[24];
            __int16 v330 = 2049;
            uint64_t v331 = v248;
            __int16 v332 = 2049;
            uint64_t v333 = *((void *)&v248 + 1);
            __int16 v334 = 2050;
            uint64_t v335 = v249;
            __int16 v336 = 2050;
            double v337 = v96;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "#fusion barredLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{public}.1f,%{public}.3f", buf, 0xEAu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            uint64_t v153 = *(void *)(a1 + 976);
            uint64_t v194 = *(void *)(a1 + 984);
            unsigned int v154 = *(_DWORD *)(a1 + 96);
            int v186 = sub_10003E9A4(v154);
            uint64_t v178 = *(void *)(a1 + 992);
            uint64_t v182 = *(void *)(a1 + 1000);
            uint64_t v190 = *(void *)(a1 + 1016);
            uint64_t v198 = *(void *)(a1 + 1048);
            uint64_t v202 = *(void *)(a1 + 1064);
            uint64_t v206 = *(void *)(a1 + 1008);
            uint64_t v210 = *(void *)(a1 + 1024);
            uint64_t v214 = *(void *)(a1 + 1056);
            uint64_t v218 = *(void *)(a1 + 1072);
            int v222 = *(_DWORD *)(a1 + 1088);
            uint64_t v226 = *(void *)(a1 + 1080);
            int v230 = *(unsigned __int8 *)(a1 + 1092);
            int v241 = *(_DWORD *)(a1 + 1456);
            uint64_t v155 = *(void *)(a1 + 1696);
            uint64_t v156 = *(void *)(v155 + 392);
            uint64_t v236 = *(void *)(v155 + 384);
            unsigned int v157 = *(_DWORD *)(a1 + 1096);
            v158 = sub_10003E9A4(v157);
            *(_DWORD *)uint64_t v254 = 134355459;
            *(void *)&v254[4] = v153;
            *(_WORD *)&v254[12] = 2050;
            *(void *)&v254[14] = v194;
            __int16 v255 = 1026;
            unsigned int v256 = v154;
            __int16 v257 = 2082;
            int v258 = v186;
            __int16 v259 = 2049;
            uint64_t v260 = v178;
            __int16 v261 = 2049;
            uint64_t v262 = v182;
            __int16 v263 = 2049;
            uint64_t v264 = v190;
            __int16 v265 = 2049;
            uint64_t v266 = v198;
            __int16 v267 = 2049;
            uint64_t v268 = v202;
            __int16 v269 = 2050;
            uint64_t v270 = v206;
            __int16 v271 = 2050;
            uint64_t v272 = v210;
            __int16 v273 = 2050;
            uint64_t v274 = v214;
            __int16 v275 = 2050;
            uint64_t v276 = v218;
            __int16 v277 = 1026;
            *(_DWORD *)__int16 v278 = v222;
            *(_WORD *)&v278[4] = 2050;
            *(void *)&v278[6] = v226;
            *(_WORD *)&v278[14] = 1026;
            *(_DWORD *)&v278[16] = v230;
            LOWORD(v279) = 1026;
            *(_DWORD *)((char *)&v279 + 2) = v241;
            HIWORD(v279) = 2050;
            *(void *)__int16 v280 = v236;
            *(_WORD *)&v280[8] = 1026;
            *(_DWORD *)v281 = v156;
            *(_WORD *)&v281[4] = 1026;
            unsigned int v282 = v157;
            __int16 v283 = 2082;
            char v284 = v158;
            __int16 v285 = 1026;
            int v286 = *(_DWORD *)&v253[24];
            __int16 v287 = 2049;
            uint64_t v288 = v248;
            __int16 v289 = 2049;
            uint64_t v290 = *((void *)&v248 + 1);
            __int16 v291 = 2050;
            uint64_t v292 = v249;
            __int16 v293 = 2050;
            double v294 = v96;
            os_log_type_t v159 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v159);
            if (v159 != buf) {
              free(v159);
            }
          }
          long long v106 = v252;
          *(_OWORD *)(a1 + 1040) = v251;
          *(_OWORD *)(a1 + 1056) = v106;
          *(_OWORD *)(a1 + 1072) = *(_OWORD *)v253;
          *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v253[12];
          long long v107 = v248;
          *int v94 = v247;
          *(_OWORD *)(a1 + 992) = v107;
          long long v108 = v250;
          *(_OWORD *)(a1 + 1008) = v249;
          *(_OWORD *)(a1 + 1024) = v108;
          int v97 = *(unsigned __int8 *)(a1 + 165);
          goto LABEL_127;
        }
        goto LABEL_116;
      }
    }
LABEL_127:
    if (!v97
      && v96 >= 0.0
      && v96 < 0.8
      && (*(_DWORD *)(a1 + 96) & 0xFFFFFFFD) == 1
      && (*(_DWORD *)&v253[24] & 0xFFFFFFFD) == 1)
    {
      *(_DWORD *)(a1 + 1104) = 10;
      *a3 = 1;
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      int v109 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v228 = *(void *)(a1 + 976);
        uint64_t v240 = *(void *)(a1 + 984);
        unsigned int v110 = *(_DWORD *)(a1 + 96);
        os_log_type_t v234 = sub_10003E9A4(v110);
        uint64_t v176 = *(void *)(a1 + 992);
        uint64_t v180 = *(void *)(a1 + 1000);
        uint64_t v184 = *(void *)(a1 + 1016);
        uint64_t v188 = *(void *)(a1 + 1048);
        uint64_t v192 = *(void *)(a1 + 1064);
        uint64_t v196 = *(void *)(a1 + 1008);
        uint64_t v200 = *(void *)(a1 + 1024);
        uint64_t v204 = *(void *)(a1 + 1056);
        uint64_t v208 = *(void *)(a1 + 1072);
        int v212 = *(_DWORD *)(a1 + 1088);
        uint64_t v216 = *(void *)(a1 + 1080);
        int v220 = *(unsigned __int8 *)(a1 + 1092);
        int v111 = *(_DWORD *)(a1 + 1456);
        uint64_t v112 = *(void *)(a1 + 1696);
        uint64_t v113 = *(void *)(v112 + 392);
        uint64_t v224 = *(void *)(v112 + 384);
        unsigned int v114 = *(_DWORD *)(a1 + 1096);
        long long v115 = sub_10003E9A4(v114);
        *(_DWORD *)uint64_t buf = 134355459;
        *(void *)&uint8_t buf[4] = v228;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v240;
        __int16 v298 = 1026;
        unsigned int v299 = v110;
        __int16 v300 = 2082;
        long long v301 = v234;
        __int16 v302 = 2049;
        uint64_t v303 = v176;
        __int16 v304 = 2049;
        uint64_t v305 = v180;
        __int16 v306 = 2049;
        uint64_t v307 = v184;
        __int16 v308 = 2049;
        uint64_t v309 = v188;
        __int16 v310 = 2049;
        uint64_t v311 = v192;
        __int16 v312 = 2050;
        uint64_t v313 = v196;
        __int16 v314 = 2050;
        uint64_t v315 = v200;
        __int16 v316 = 2050;
        uint64_t v317 = v204;
        __int16 v318 = 2050;
        uint64_t v319 = v208;
        __int16 v320 = 1026;
        *(_DWORD *)long long v321 = v212;
        *(_WORD *)&v321[4] = 2050;
        *(void *)&v321[6] = v216;
        *(_WORD *)&v321[14] = 1026;
        *(_DWORD *)&v321[16] = v220;
        LOWORD(v322) = 1026;
        *(_DWORD *)((char *)&v322 + 2) = v111;
        HIWORD(v322) = 2050;
        *(void *)int v323 = v224;
        *(_WORD *)&v323[8] = 1026;
        *(_DWORD *)v324 = v113;
        *(_WORD *)&v324[4] = 1026;
        unsigned int v325 = v114;
        __int16 v326 = 2082;
        v327 = v115;
        __int16 v328 = 1026;
        int v329 = *(_DWORD *)&v253[24];
        __int16 v330 = 2049;
        uint64_t v331 = v248;
        __int16 v332 = 2049;
        uint64_t v333 = *((void *)&v248 + 1);
        __int16 v334 = 2050;
        uint64_t v335 = v249;
        __int16 v336 = 2050;
        double v337 = v96;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "#fusion barredNon1HzLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{public}.1f,%{public}.3f", buf, 0xEAu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        uint64_t v145 = *(void *)(a1 + 976);
        uint64_t v185 = *(void *)(a1 + 984);
        unsigned int v146 = *(_DWORD *)(a1 + 96);
        v147 = sub_10003E9A4(v146);
        uint64_t v148 = *(void *)(a1 + 992);
        uint64_t v177 = *(void *)(a1 + 1000);
        uint64_t v181 = *(void *)(a1 + 1016);
        uint64_t v189 = *(void *)(a1 + 1048);
        uint64_t v193 = *(void *)(a1 + 1064);
        uint64_t v197 = *(void *)(a1 + 1008);
        uint64_t v201 = *(void *)(a1 + 1024);
        uint64_t v205 = *(void *)(a1 + 1056);
        uint64_t v209 = *(void *)(a1 + 1072);
        int v213 = *(_DWORD *)(a1 + 1088);
        uint64_t v217 = *(void *)(a1 + 1080);
        int v221 = *(unsigned __int8 *)(a1 + 1092);
        int v229 = *(_DWORD *)(a1 + 1456);
        uint64_t v149 = *(void *)(a1 + 1696);
        uint64_t v225 = *(void *)(v149 + 384);
        uint64_t v235 = *(void *)(v149 + 392);
        unsigned int v150 = *(_DWORD *)(a1 + 1096);
        int v151 = sub_10003E9A4(v150);
        *(_DWORD *)uint64_t v254 = 134355459;
        *(void *)&v254[4] = v145;
        *(_WORD *)&v254[12] = 2050;
        *(void *)&v254[14] = v185;
        __int16 v255 = 1026;
        unsigned int v256 = v146;
        __int16 v257 = 2082;
        int v258 = v147;
        __int16 v259 = 2049;
        uint64_t v260 = v148;
        __int16 v261 = 2049;
        uint64_t v262 = v177;
        __int16 v263 = 2049;
        uint64_t v264 = v181;
        __int16 v265 = 2049;
        uint64_t v266 = v189;
        __int16 v267 = 2049;
        uint64_t v268 = v193;
        __int16 v269 = 2050;
        uint64_t v270 = v197;
        __int16 v271 = 2050;
        uint64_t v272 = v201;
        __int16 v273 = 2050;
        uint64_t v274 = v205;
        __int16 v275 = 2050;
        uint64_t v276 = v209;
        __int16 v277 = 1026;
        *(_DWORD *)__int16 v278 = v213;
        *(_WORD *)&v278[4] = 2050;
        *(void *)&v278[6] = v217;
        *(_WORD *)&v278[14] = 1026;
        *(_DWORD *)&v278[16] = v221;
        LOWORD(v279) = 1026;
        *(_DWORD *)((char *)&v279 + 2) = v229;
        HIWORD(v279) = 2050;
        *(void *)__int16 v280 = v225;
        *(_WORD *)&v280[8] = 1026;
        *(_DWORD *)v281 = v235;
        *(_WORD *)&v281[4] = 1026;
        unsigned int v282 = v150;
        __int16 v283 = 2082;
        char v284 = v151;
        __int16 v285 = 1026;
        int v286 = *(_DWORD *)&v253[24];
        __int16 v287 = 2049;
        uint64_t v288 = v248;
        __int16 v289 = 2049;
        uint64_t v290 = *((void *)&v248 + 1);
        __int16 v291 = 2050;
        uint64_t v292 = v249;
        __int16 v293 = 2050;
        double v294 = v96;
        double v152 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)", "%s\n", v152);
        if (v152 != buf) {
          free(v152);
        }
      }
      long long v116 = v252;
      *(_OWORD *)(a1 + 1040) = v251;
      *(_OWORD *)(a1 + 1056) = v116;
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)v253;
      *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v253[12];
      long long v117 = v248;
      *int v94 = v247;
      *(_OWORD *)(a1 + 992) = v117;
      long long v118 = v250;
      *(_OWORD *)(a1 + 1008) = v249;
      *(_OWORD *)(a1 + 1024) = v118;
    }
  }
  if (*a3)
  {
    long long v119 = v252;
    *(_OWORD *)(a1 + 1040) = v251;
    *(_OWORD *)(a1 + 1056) = v119;
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)v253;
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v253[12];
    long long v120 = v248;
    *int v94 = v247;
    *(_OWORD *)(a1 + 992) = v120;
    long long v121 = v250;
    *(_OWORD *)(a1 + 1008) = v249;
    *(_OWORD *)(a1 + 1024) = v121;
LABEL_140:
    sub_10095C074(a1 + 2272, *(_DWORD *)(a1 + 1104));
    goto LABEL_141;
  }
  sub_10018A0D0(a1, (uint64_t *)&v245);
LABEL_141:
  if (*((void *)&v245 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v245 + 1));
  }
  return v16;
}

void sub_100027B3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100027B48(uint64_t a1, double a2)
{
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_10017EFEC(&v13);
  uint64_t v5 = v13;
  id v4 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v17 = __p;
  id v6 = sub_10017F3F8(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v17);
  *((void *)v6 + 5) = 8;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)v6 + 7);
  *((void *)v6 + 6) = v5;
  *((void *)v6 + 7) = v4;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  for (i = *(void **)(a1 + 176); i; i = (void *)*i)
  {
    uint64_t v9 = i[2];
    uint64_t v11 = v13;
    uint64_t v12 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 16))(v9, &v11, 8);
    if (v12) {
      sub_1000DB0A0(v12);
    }
  }
  if (a2 >= 0.0)
  {
    sub_1010AC268(a1, a2);
  }
  else
  {
    uint64_t v10 = +[NSString stringWithUTF8String:"kCLConnectionMessageSignificantLocationChange"];
    [objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v10) invalidate];
    [*(id *)(a1 + 240) setObject:0 forKeyedSubscript:v10];
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100027CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100027D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(id **)(a1 + 32);
  id v5 = [*v4 silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10005EFC8;
  v7[3] = &unk_1022A56E0;
  v7[4] = a3;
  v7[5] = v4;
  return [v5 async:v7];
}

void sub_100027DC0(uint64_t a1, unsigned int a2)
{
  if (!sub_10016E644(a2)) {
    return;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v44 = -1.79769313e308;
  double v45 = -1.79769313e308;
  switch(a2)
  {
    case 0u:
      id v5 = (int *)(a1 + 296);
      id v6 = (int *)(a1 + 300);
      long long v7 = (unsigned __int8 *)(a1 + 325);
      CFStringRef v8 = @"kAccelBufferSubscription";
      CFStringRef v9 = @"kAccelBufferSubscriptionOverride";
      goto LABEL_8;
    case 2u:
      id v5 = (int *)(a1 + 312);
      id v6 = (int *)(a1 + 320);
      long long v7 = (unsigned __int8 *)(a1 + 327);
      CFStringRef v8 = @"kPressureBufferSubscription";
      CFStringRef v9 = @"kPressureBufferSubscriptionOverride";
LABEL_8:
      int v10 = *v5;
      int v11 = *v6;
      uint64_t v12 = sub_1000A6958();
      sub_1000A6A10(v12, (uint64_t)v9, &v44);
      BOOL v13 = Current < v44 && vabdd_f64(v44, Current) < *(double *)(a1 + 272);
      if (*v7 | v13)
      {
        if (a2)
        {
LABEL_15:
          char v15 = 1;
LABEL_16:
          if ((v15 & (*(unsigned char *)(a1 + 324) != 0)) != 0) {
            int v16 = v11;
          }
          else {
            int v16 = 0;
          }
          if (v16 != v10)
          {
            if (qword_102419110 != -1) {
              dispatch_once(&qword_102419110, &stru_102320268);
            }
            double v17 = qword_102419118;
            if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = *(unsigned __int8 *)(a1 + 324);
              *(_DWORD *)uint64_t buf = 67240704;
              *(_DWORD *)&uint8_t buf[4] = a2;
              __int16 v53 = 1026;
              int v54 = v16;
              __int16 v55 = 1026;
              int v56 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Updating %{location:CLSensorRecorder_Types::DataType,public}d sampling rate %{public}d, fitness tracking enabled, %{public}d", buf, 0x14u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419110 != -1) {
                dispatch_once(&qword_102419110, &stru_102320268);
              }
              int v37 = *(unsigned __int8 *)(a1 + 324);
              int v46 = 67240704;
              unsigned int v47 = a2;
              __int16 v48 = 1026;
              int v49 = v16;
              __int16 v50 = 1026;
              int v51 = v37;
              uint64_t v38 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v38);
              if (v38 != (char *)buf) {
                free(v38);
              }
            }
            uint64_t v19 = sub_1000D3E78();
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_10131F954;
            v41[3] = &unk_1022A3020;
            unsigned int v42 = a2;
            int v43 = v16;
            sub_1009E8F7C(v19, (uint64_t)v41);
            if (a2)
            {
              if (a2 == 2)
              {
                if (v10 >= 1) {
                  sub_100A004B8(*(uint64_t **)(a1 + 176));
                }
                double v20 = (int *)(a1 + 312);
              }
              else
              {
                if (v10 >= 1) {
                  sub_100A004B8(*(uint64_t **)(a1 + 168));
                }
                double v20 = (int *)(a1 + 304);
              }
            }
            else
            {
              if (v10 >= 1) {
                sub_100A004B8(*(uint64_t **)(a1 + 160));
              }
              double v20 = (int *)(a1 + 296);
            }
            *double v20 = v16;
          }
          double v25 = Current + 129600.0;
          if (v45 > v25)
          {
            if (qword_102419110 != -1) {
              dispatch_once(&qword_102419110, &stru_102320268);
            }
            long long v26 = qword_102419118;
            if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = a2;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Updated %{location:CLSensorRecorder_Types::DataType,public}d subscription due to invalid time.", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419110 != -1) {
                dispatch_once(&qword_102419110, &stru_102320268);
              }
              int v46 = 67240192;
              unsigned int v47 = a2;
              int v39 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v39);
              if (v39 != (char *)buf) {
                free(v39);
              }
            }
            uint64_t v27 = sub_1000A6958();
            *(double *)uint64_t buf = v25;
            sub_100163398(v27, v8, buf);
            uint64_t v28 = *(void *)sub_1000A6958();
            (*(void (**)(void))(v28 + 944))();
          }
          if (v44 > v25)
          {
            if (qword_102419110 != -1) {
              dispatch_once(&qword_102419110, &stru_102320268);
            }
            uint64_t v29 = qword_102419118;
            if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = a2;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Updated %{location:CLSensorRecorder_Types::DataType,public}d subscription override due to invalid time.", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419110 != -1) {
                dispatch_once(&qword_102419110, &stru_102320268);
              }
              int v46 = 67240192;
              unsigned int v47 = a2;
              double v40 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v40);
              if (v40 != (char *)buf) {
                free(v40);
              }
            }
            uint64_t v30 = sub_1000A6958();
            *(double *)uint64_t buf = v25;
            sub_100163398(v30, v9, buf);
            uint64_t v31 = *(void *)sub_1000A6958();
            (*(void (**)(void))(v31 + 944))();
          }
          return;
        }
        goto LABEL_13;
      }
      if (a2 || *(_DWORD *)(a1 + 300) == 50)
      {
        if (a2 != 1 || *(_DWORD *)(a1 + 308) == 50)
        {
          if (a2 != 2 || *(_DWORD *)(a1 + 320) == *(_DWORD *)(a1 + 316))
          {
LABEL_71:
            uint64_t v34 = sub_1000A6958();
            sub_1000A6A10(v34, (uint64_t)v8, &v45);
            if (Current >= v45)
            {
              if (a2)
              {
                char v15 = 0;
                goto LABEL_16;
              }
            }
            else
            {
              double v35 = vabdd_f64(v45, Current);
              double v36 = *(double *)(a1 + 272);
              char v15 = v35 < v36;
              if (a2) {
                goto LABEL_16;
              }
              if (v35 < v36)
              {
LABEL_13:
                uint64_t v14 = *(void *)(a1 + 272);
                *(void *)(a1 + 280) = *(void *)(a1 + 264);
LABEL_14:
                *(void *)(a1 + 288) = v14;
                goto LABEL_15;
              }
            }
            char v15 = *(unsigned char *)(a1 + 336);
            if (!v15) {
              goto LABEL_16;
            }
            *(void *)(a1 + 280) = 0x40AF400000000000;
            int v11 = 100;
            uint64_t v14 = 0x40AC200000000000;
            goto LABEL_14;
          }
          uint64_t v32 = sub_1000A6958();
          sub_1004CF870(v32);
          int v11 = *(_DWORD *)(a1 + 316);
          *(_DWORD *)(a1 + 320) = v11;
        }
        else
        {
          uint64_t v24 = sub_1000A6958();
          sub_1004CF870(v24);
          int v11 = 50;
          *(_DWORD *)(a1 + 308) = 50;
        }
      }
      else
      {
        uint64_t v21 = sub_1000A6958();
        sub_1004CF870(v21);
        int v11 = 50;
        *(_DWORD *)(a1 + 300) = 50;
      }
      uint64_t v33 = sub_1000A6958();
      (*(void (**)(uint64_t))(*(void *)v33 + 944))(v33);
      goto LABEL_71;
    case 1u:
      id v5 = (int *)(a1 + 304);
      id v6 = (int *)(a1 + 308);
      long long v7 = (unsigned __int8 *)(a1 + 326);
      CFStringRef v8 = @"kGyroBufferSubscription";
      CFStringRef v9 = @"kGyroBufferSubscriptionOverride";
      goto LABEL_8;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102320288);
  }
  long long v22 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Invalid data type.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102320288);
    }
    LOWORD(v46) = 0;
    long long v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
}

uint64_t sub_1000287A4(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  sub_100028960(a1 + 160, &v10, &v10);
  for (i = *(void **)(a1 + 216); i; i = (void *)*i)
  {
    uint64_t v4 = v10;
    id v5 = (std::__shared_weak_count *)i[7];
    uint64_t v8 = i[6];
    CFStringRef v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v4 + 16))(v4, &v8, i[5]);
    if (v9) {
      sub_1000DB0A0(v9);
    }
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  sub_1000288D0((uint64_t **)(a1 + 24), &v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
}

void sub_1000288B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000288C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

uint64_t *sub_1000288D0(uint64_t **a1, int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  id v6 = a1 + 1;
  int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        id v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        int v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void *sub_100028960(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100028BA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100028BB4(int a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int (**)(uint64_t, const __CFString *))(a2 + 16);
  if (a1 < 2)
  {
    if (v4(a2, @"NSLocationAlwaysUsageDescription")) {
      uint64_t v5 = 7;
    }
    else {
      uint64_t v5 = 1;
    }
  }
  else if (v4(a2, @"NSLocationAlwaysAndWhenInUseUsageDescription"))
  {
    if ((*(unsigned int (**)(uint64_t, const __CFString *))(a2 + 16))(a2, @"NSLocationWhenInUseUsageDescription"))
    {
      uint64_t v5 = 7;
    }
    else
    {
      uint64_t v5 = 1;
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (((*(uint64_t (**)(uint64_t, const __CFString *))(a2 + 16))(a2, @"NSLocationWhenInUseUsageDescription") & 1) != 0|| (*(unsigned int (**)(uint64_t, const __CFString *))(a2 + 16))(a2, @"NSLocationAuthorizationPurposeDescriptionDictionary"))
  {
    v5 |= 2uLL;
  }
  if (v5 == 1 && a1 == 0) {
    return 7;
  }
  else {
    return v5;
  }
}

BOOL sub_100028CB4(uint64_t a1, CFStringRef key)
{
  uint64_t v4 = *(__CFBundle **)(a1 + 40);
  if (v4)
  {
    if (CFBundleGetValueForInfoDictionaryKey(v4, key)) {
      return 1;
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v5 = sub_1001BA55C();
      CFStringRef v6 = sub_100041DC4(v5, *(__CFBundle **)(a1 + 40), key, 0);
      if (v6)
      {
        CFRelease(v6);
        return 1;
      }
    }
  }
  if (!&_SBSCopyBundleInfoValueForKeyAndProcessID) {
    return 0;
  }
  unint64_t v7 = (const void *)SBSCopyBundleInfoValueForKeyAndProcessID();
  if (!v7) {
    return 0;
  }
  CFRelease(v7);
  return !*(unsigned char *)(a1 + 48);
}

double sub_100028D50(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint8x8_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4048; ; uint64_t i = v12 + 4048)
    {
      sub_100028DE4(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      unint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100028DE4(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t sub_100028DE4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a3;
  uint64_t result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - a4 + 4048) >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4) < v10) {
        uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4);
      }
      uint64_t result = sub_100028EB8(result, result + 176 * v10, a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4048 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100028EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100028F18(a3, v4);
      v4 += 176;
      a3 += 176;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_100028F18(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  CFStringRef v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  long long v10 = *(_OWORD *)(a2 + 104);
  long long v11 = *(_OWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  return a1;
}

uint64_t sub_100028FB4(uint64_t a1)
{
  v8[0] = sqlite3_exec(*(sqlite3 **)(a1 + 8), "END TRANSACTION", 0, 0, 0);
  --*(_DWORD *)(a1 + 120);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  id v2 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v3 = (const char *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unint64_t v3 = *(const char **)v3;
    }
    int v4 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)long long v15 = 0;
    *(_WORD *)&v15[4] = 2082;
    *(void *)&v15[6] = "";
    __int16 v16 = 2082;
    unint64_t v17 = v3;
    __int16 v18 = 1026;
    int v19 = v4;
    __int16 v20 = 1040;
    int v21 = 4;
    __int16 v22 = 2098;
    long long v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"endTransaction\", \"path\":%{public, location:escape_only}s, \"count\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x32u);
  }
  if (*(_DWORD *)(a1 + 120))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE4A0);
    }
    CFStringRef v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)long long v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm";
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = 1700;
      __int16 v16 = 2080;
      unint64_t v17 = "fTransactionCount == 0";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE4A0);
      }
      v8[1] = 136315650;
      long long v9 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm";
      __int16 v10 = 1024;
      int v11 = 1700;
      __int16 v12 = 2080;
      unint64_t v13 = "fTransactionCount == 0";
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLSqliteDatabase::endTransaction()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_1004BA578();
  }
  sub_10014D468(*(void *)(a1 + 16));
  return v8[0];
}

std::string *sub_10002931C@<X0>(char a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 6uLL);
  if (a1) {
    int v4 = "L";
  }
  else {
    int v4 = ".";
  }
  std::string::append(a2, v4);
  if ((a1 & 2) != 0) {
    uint64_t v5 = "C";
  }
  else {
    uint64_t v5 = ".";
  }
  std::string::append(a2, v5);
  if ((a1 & 4) != 0) {
    CFStringRef v6 = "W";
  }
  else {
    CFStringRef v6 = ".";
  }
  std::string::append(a2, v6);
  if ((a1 & 8) != 0) {
    long long v7 = "P";
  }
  else {
    long long v7 = ".";
  }
  std::string::append(a2, v7);
  if ((a1 & 0x10) != 0) {
    long long v8 = "S";
  }
  else {
    long long v8 = ".";
  }
  return std::string::append(a2, v8);
}

void sub_1000293DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000293F8(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  char v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __str->__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    CFStringRef v6 = __str;
  }
  else {
    CFStringRef v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  long long v7 = (std::string *)((char *)v6 + size);
  if (size >= 31)
  {
    int64_t v8 = size;
    long long v9 = v6;
    do
    {
      __int16 v10 = (std::string *)memchr(v9, 99, v8 - 30);
      if (!v10) {
        break;
      }
      if (v10->__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63
        && v10->__r_.__value_.__l.__size_ == 0x697461636F6C2E65
        && v10->__r_.__value_.__r.__words[2] == 0x636578652E646E6FLL
        && *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[2] + 7) == 0x2D656C6261747563)
      {
        if (v10 == v7 || v10 != v6) {
          break;
        }
        *(_DWORD *)(a2 + 95) = 0;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 104) = 0u;
        *(_OWORD *)(a2 + 120) = 0u;
        *(_OWORD *)(a2 + 136) = 0u;
        *(_OWORD *)(a2 + 152) = 0u;
        *(_OWORD *)(a2 + 163) = 0u;
        std::string::basic_string(&__p, __str, 0x1FuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
        std::string::operator=((std::string *)(a2 + 24), &__p);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      }
      long long v9 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      int64_t v8 = (char *)v7 - (char *)v9;
    }
    while ((char *)v7 - (char *)v9 >= 31);
  }
  if (size >= 27)
  {
    uint64_t v14 = v6;
    do
    {
      long long v15 = (std::string *)memchr(v14, 99, size - 26);
      if (!v15) {
        break;
      }
      if (v15->__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63
        && v15->__r_.__value_.__l.__size_ == 0x697461636F6C2E65
        && v15->__r_.__value_.__r.__words[2] == 0x646E75622E646E6FLL
        && *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[2] + 3) == 0x2D656C646E75622ELL)
      {
        if (v15 != v7 && v15 == v6)
        {
          std::string::basic_string(&__p, __str, 0x1BuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
          sub_1000B6F5C(&__p, a2);
          goto LABEL_43;
        }
        break;
      }
      uint64_t v14 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
      int64_t size = (char *)v7 - (char *)v14;
    }
    while ((char *)v7 - (char *)v14 >= 27);
  }

  sub_1000B7144(__str, a2);
}

void sub_100029660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef sub_1000296A4(__CFBundle *a1)
{
  CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(a1, @"NSLocationInterestZones");
  if (!ValueForInfoDictionaryKey)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    CFStringRef v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2114;
      long long v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No Info.plist InterestZones\", \"For Bundle\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
    return 0;
  }
  CFTypeRef v3 = ValueForInfoDictionaryKey;
  CFTypeID v4 = CFGetTypeID(ValueForInfoDictionaryKey);
  if (v4 != CFDictionaryGetTypeID())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    long long v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2114;
      long long v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Info.plist InterestZones not of type Dictionary\", \"Bundle\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
    }
    int64_t v8 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2114;
      long long v15 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Info.plist InterestZones not of type Dictionary", "{\"msg%{public}.0s\":\"Info.plist InterestZones not of type Dictionary\", \"Bundle\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
    return 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    long long v15 = a1;
    __int16 v16 = 2114;
    CFTypeRef v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Info.plist InterestZones\", \"For Bundle\":%{public, location:escape_only}@, \"InfoPlistZones\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x26u);
  }
  return v3;
}

void sub_100029990(uint64_t a1, int a2, uint64_t a3)
{
  CFTypeRef v3 = &unk_10247B000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B388, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a1;
    int v8 = a2;
    int v6 = __cxa_guard_acquire(&qword_10247B388);
    CFTypeRef v3 = &unk_10247B000;
    a2 = v8;
    int v7 = v6;
    a3 = v9;
    a1 = v10;
    if (v7)
    {
      qword_10247B380 = (uint64_t)dispatch_queue_create("CoreTelephonyService.getSignalStrengthMeasurementForSim", 0);
      __cxa_guard_release(&qword_10247B388);
      CFTypeRef v3 = &unk_10247B000;
      a3 = v9;
      a1 = v10;
      a2 = v8;
    }
  }
  uint64_t v4 = a1 + 176;
  uint64_t v5 = *((void *)v3 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000485B8;
  block[3] = &unk_1022BB198;
  int v12 = a2;
  block[4] = a3;
  block[5] = v4;
  dispatch_async(v5, block);
}

uint64_t sub_100029A7C(uint64_t a1)
{
  *(void *)a1 = off_10230E2E8;

  return a1;
}

void sub_100029AD8(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (unsigned char *)(a1 + 9856);
  if (*(unsigned char *)(a1 + 1569) && !*(unsigned char *)(a1 + 1537))
  {
    if (*(unsigned char *)(a1 + 11672))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v20 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v131 = 0;
      __int16 v132 = 2082;
      uint64_t v133 = "";
      int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GpsReferenceLocation is set\"}";
      goto LABEL_67;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v79 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v131 = 0;
    __int16 v132 = 2082;
    uint64_t v133 = "";
    int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GpsReferenceLocation is set\"}";
LABEL_91:
    uint64_t v67 = v79;
    os_log_type_t v68 = OS_LOG_TYPE_DEBUG;
    goto LABEL_92;
  }
  if (!*(unsigned char *)(a1 + 1568)) {
    goto LABEL_103;
  }
  int v7 = (uint64_t *)(a1 + 4660);
  double v8 = *(double *)(a1 + 4676);
  if (v8 >= 0.0)
  {
    if (v8 > 10000.0 && *(double *)(a2 + 20) < 10000.0) {
      goto LABEL_29;
    }
    sub_1000F1268((double *)(a1 + 11560), a2, a1 + 4656);
    double v14 = v13;
    if (v13 > 10000.0)
    {
      if (v6[1816])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v15 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_29;
        }
        uint64_t v16 = *(void *)(a2 + 4);
        uint64_t v17 = *(void *)(a2 + 12);
        uint64_t v18 = *v7;
        uint64_t v19 = *(void *)(a1 + 4668);
        *(_DWORD *)uint64_t buf = 68290307;
        int v131 = 0;
        __int16 v132 = 2082;
        uint64_t v133 = "";
        __int16 v134 = 2049;
        *(void *)uint64_t v135 = v16;
        *(_WORD *)&v135[8] = 2049;
        *(void *)&v135[10] = v17;
        *(_WORD *)&v135[18] = 2049;
        *(void *)&v135[20] = v18;
        *(_WORD *)&v135[28] = 2049;
        *(void *)&v135[30] = v19;
        *(_WORD *)&v135[38] = 2049;
        *(double *)&v135[40] = v14;
        uint64_t v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning new assistance location differ from prev, sending"
              " to GPS\", \"newLat\":\"%{private}.7f\", \"newLon\":\"%{private}.7f\", \"oldLat\":\"%{private}.7f\", \"old"
              "Lon\":\"%{private}.7f\", \"dist\":\"%{private}.2f\"}";
        int v11 = v15;
        os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v91 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_29;
        }
        uint64_t v92 = *(void *)(a2 + 4);
        uint64_t v93 = *(void *)(a2 + 12);
        uint64_t v94 = *v7;
        uint64_t v95 = *(void *)(a1 + 4668);
        *(_DWORD *)uint64_t buf = 68290307;
        int v131 = 0;
        __int16 v132 = 2082;
        uint64_t v133 = "";
        __int16 v134 = 2049;
        *(void *)uint64_t v135 = v92;
        *(_WORD *)&v135[8] = 2049;
        *(void *)&v135[10] = v93;
        *(_WORD *)&v135[18] = 2049;
        *(void *)&v135[20] = v94;
        *(_WORD *)&v135[28] = 2049;
        *(void *)&v135[30] = v95;
        *(_WORD *)&v135[38] = 2049;
        *(double *)&v135[40] = v14;
        uint64_t v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning new assistance location differ from prev, sending"
              " to GPS\", \"newLat\":\"%{private}.7f\", \"newLon\":\"%{private}.7f\", \"oldLat\":\"%{private}.7f\", \"old"
              "Lon\":\"%{private}.7f\", \"dist\":\"%{private}.2f\"}";
        int v11 = v91;
        os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      }
      uint32_t v23 = 68;
      goto LABEL_28;
    }
    if (v6[1816])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v84 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v85 = *(void *)(a2 + 4);
        uint64_t v86 = *(void *)(a2 + 12);
        uint64_t v87 = *v7;
        uint64_t v88 = *(void *)(a1 + 4668);
        *(_DWORD *)uint64_t buf = 68290307;
        int v131 = 0;
        __int16 v132 = 2082;
        uint64_t v133 = "";
        __int16 v134 = 2049;
        *(void *)uint64_t v135 = v85;
        *(_WORD *)&v135[8] = 2049;
        *(void *)&v135[10] = v86;
        *(_WORD *)&v135[18] = 2049;
        *(void *)&v135[20] = v87;
        *(_WORD *)&v135[28] = 2049;
        *(void *)&v135[30] = v88;
        *(_WORD *)&v135[38] = 2049;
        *(double *)&v135[40] = v14;
        long long v89 = v84;
        os_log_type_t v90 = OS_LOG_TYPE_DEFAULT;
LABEL_102:
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,new assistance location differ slightly from prev, not sending to GPS\", \"newLat\":\"%{private}.7f\", \"newLon\":\"%{private}.7f\", \"oldLat\":\"%{private}.7f\", \"oldLon\":\"%{private}.7f\", \"dist\":\"%{private}.2f\"}", buf, 0x44u);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v96 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v97 = *(void *)(a2 + 4);
        uint64_t v98 = *(void *)(a2 + 12);
        uint64_t v99 = *v7;
        uint64_t v100 = *(void *)(a1 + 4668);
        *(_DWORD *)uint64_t buf = 68290307;
        int v131 = 0;
        __int16 v132 = 2082;
        uint64_t v133 = "";
        __int16 v134 = 2049;
        *(void *)uint64_t v135 = v97;
        *(_WORD *)&v135[8] = 2049;
        *(void *)&v135[10] = v98;
        *(_WORD *)&v135[18] = 2049;
        *(void *)&v135[20] = v99;
        *(_WORD *)&v135[28] = 2049;
        *(void *)&v135[30] = v100;
        *(_WORD *)&v135[38] = 2049;
        *(double *)&v135[40] = v14;
        long long v89 = v96;
        os_log_type_t v90 = OS_LOG_TYPE_DEBUG;
        goto LABEL_102;
      }
    }
LABEL_103:
    if (v6[1816])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v101 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v102 = *(_DWORD *)(a2 + 96);
      uint64_t v103 = *(void *)(a2 + 4);
      uint64_t v104 = *(void *)(a2 + 12);
      uint64_t v105 = *(void *)(a2 + 28);
      uint64_t v106 = *(void *)(a2 + 20);
      uint64_t v107 = *(void *)(a2 + 36);
      int v108 = *(unsigned __int8 *)(a1 + 1568);
      *(_DWORD *)uint64_t buf = 68290819;
      int v131 = 0;
      __int16 v132 = 2082;
      uint64_t v133 = "";
      __int16 v134 = 1026;
      *(_DWORD *)uint64_t v135 = v102;
      *(_WORD *)&v135[4] = 2049;
      *(void *)&v135[6] = v103;
      *(_WORD *)&v135[14] = 2049;
      *(void *)&v135[16] = v104;
      *(_WORD *)&v135[24] = 2050;
      *(void *)&v135[26] = v105;
      *(_WORD *)&v135[34] = 2050;
      *(void *)&v135[36] = v106;
      *(_WORD *)&v135[44] = 2050;
      *(void *)&v135[46] = v107;
      __int16 v136 = 1026;
      int v137 = v108;
      int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not using location assistance\", \"type\":%{public}d, \""
            "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"v"
            "unc\":\"%{public}.1f\", \"GpsUseCachedLocation\":%{public}hhd}";
      uint64_t v67 = v101;
      os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v109 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      int v110 = *(_DWORD *)(a2 + 96);
      uint64_t v111 = *(void *)(a2 + 4);
      uint64_t v112 = *(void *)(a2 + 12);
      uint64_t v113 = *(void *)(a2 + 28);
      uint64_t v114 = *(void *)(a2 + 20);
      uint64_t v115 = *(void *)(a2 + 36);
      int v116 = *(unsigned __int8 *)(a1 + 1568);
      *(_DWORD *)uint64_t buf = 68290819;
      int v131 = 0;
      __int16 v132 = 2082;
      uint64_t v133 = "";
      __int16 v134 = 1026;
      *(_DWORD *)uint64_t v135 = v110;
      *(_WORD *)&v135[4] = 2049;
      *(void *)&v135[6] = v111;
      *(_WORD *)&v135[14] = 2049;
      *(void *)&v135[16] = v112;
      *(_WORD *)&v135[24] = 2050;
      *(void *)&v135[26] = v113;
      *(_WORD *)&v135[34] = 2050;
      *(void *)&v135[36] = v114;
      *(_WORD *)&v135[44] = 2050;
      *(void *)&v135[46] = v115;
      __int16 v136 = 1026;
      int v137 = v116;
      int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not using location assistance\", \"type\":%{public}d, \""
            "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"v"
            "unc\":\"%{public}.1f\", \"GpsUseCachedLocation\":%{public}hhd}";
      uint64_t v67 = v109;
      os_log_type_t v68 = OS_LOG_TYPE_DEBUG;
    }
    uint32_t v83 = 80;
    goto LABEL_113;
  }
  if (*(unsigned char *)(a1 + 11672))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v131 = 0;
      __int16 v132 = 2082;
      uint64_t v133 = "";
      uint64_t v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, assistance location now available, sending to GPS\"}";
      int v11 = v9;
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
LABEL_27:
      uint32_t v23 = 18;
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, v23);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v131 = 0;
      __int16 v132 = 2082;
      uint64_t v133 = "";
      uint64_t v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, assistance location now available, sending to GPS\"}";
      int v11 = v22;
      os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      goto LABEL_27;
    }
  }
LABEL_29:
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9056) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 9040) = v24;
  long long v25 = *(_OWORD *)(a2 + 32);
  long long v26 = *(_OWORD *)(a2 + 48);
  long long v27 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 9120) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9104) = v27;
  *(_OWORD *)(a1 + 9088) = v26;
  *(_OWORD *)(a1 + 9072) = v25;
  long long v28 = *(_OWORD *)(a2 + 140);
  long long v29 = *(_OWORD *)(a2 + 96);
  long long v30 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 9168) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 9152) = v30;
  *(_OWORD *)(a1 + 9136) = v29;
  *(_OWORD *)(a1 + 9180) = v28;
  memcpy((void *)(a1 + 9200), (const void *)(a2 + 160), 0x201uLL);
  uint64_t v31 = *(void *)(a2 + 680);
  uint64_t v32 = *(void *)(a2 + 688);
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 9720) = v31;
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 9728);
  *(void *)(a1 + 9728) = v32;
  if (v33) {
    sub_1000DB0A0(v33);
  }
  uint64_t v34 = (_OWORD *)(a1 + 1576);
  long long v35 = *(_OWORD *)(a2 + 696);
  long long v36 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 9752) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 9768) = v36;
  *(_OWORD *)(a1 + 9736) = v35;
  long long v37 = *(_OWORD *)(a2 + 744);
  long long v38 = *(_OWORD *)(a2 + 760);
  long long v39 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 9829) = *(void *)(a2 + 789);
  *(_OWORD *)(a1 + 9800) = v38;
  *(_OWORD *)(a1 + 9816) = v39;
  *(_OWORD *)(a1 + 9784) = v37;
  *int v6 = 0;
  int v40 = *(_DWORD *)(a1 + 9124);
  if (v40 <= 74)
  {
    if (v40 <= 49)
    {
      if (v40 <= 24) {
        int v41 = 1;
      }
      else {
        int v41 = 2;
      }
    }
    else
    {
      int v41 = 3;
    }
  }
  else
  {
    int v41 = 4;
  }
  *(_DWORD *)(a1 + 9840) = v41;
  int v118 = v41;
  *(_DWORD *)(a1 + 9844) = v41;
  *(_DWORD *)(a1 + 9860) = 0;
  long long v42 = *(_OWORD *)(a1 + 9152);
  *(_OWORD *)(a1 + 1672) = *(_OWORD *)(a1 + 9136);
  *(_OWORD *)(a1 + 1688) = v42;
  *(_OWORD *)(a1 + 1704) = *(_OWORD *)(a1 + 9168);
  *(_OWORD *)(a1 + 1716) = *(_OWORD *)(a1 + 9180);
  long long v43 = *(_OWORD *)(a1 + 9088);
  *(_OWORD *)(a1 + 1608) = *(_OWORD *)(a1 + 9072);
  *(_OWORD *)(a1 + 1624) = v43;
  long long v44 = *(_OWORD *)(a1 + 9120);
  *(_OWORD *)(a1 + 1640) = *(_OWORD *)(a1 + 9104);
  *(_OWORD *)(a1 + 1656) = v44;
  long long v45 = *(_OWORD *)(a1 + 9056);
  *uint64_t v34 = *(_OWORD *)(a1 + 9040);
  *(_OWORD *)(a1 + 1592) = v45;
  memcpy((void *)(a1 + 1736), (const void *)(a1 + 9200), 0x201uLL);
  uint64_t v46 = *(void *)(a1 + 9720);
  uint64_t v47 = *(void *)(a1 + 9728);
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2256) = v46;
  __int16 v48 = *(std::__shared_weak_count **)(a1 + 2264);
  *(void *)(a1 + 2264) = v47;
  if (v48) {
    sub_1000DB0A0(v48);
  }
  long long v49 = *(_OWORD *)(a1 + 9768);
  *(_OWORD *)(a1 + 2320) = *(_OWORD *)(a1 + 9784);
  long long v50 = *(_OWORD *)(a1 + 9816);
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a1 + 9800);
  *(_OWORD *)(a1 + 2352) = v50;
  long long v51 = *(_OWORD *)(a1 + 9752);
  *(_OWORD *)(a1 + 2272) = *(_OWORD *)(a1 + 9736);
  *(_OWORD *)(a1 + 2288) = v51;
  *(void *)(a1 + 2365) = *(void *)(a1 + 9829);
  *(_OWORD *)(a1 + 2304) = v49;
  uint64_t v52 = *(void *)(a1 + 488);
  if (v52 && a3)
  {
    long long v53 = *(_OWORD *)(a1 + 1688);
    v119[6] = *(_OWORD *)(a1 + 1672);
    v119[7] = v53;
    v120[0] = *(_OWORD *)(a1 + 1704);
    *(_OWORD *)((char *)v120 + 12) = *(_OWORD *)(a1 + 1716);
    long long v54 = *(_OWORD *)(a1 + 1624);
    v119[2] = *(_OWORD *)(a1 + 1608);
    v119[3] = v54;
    long long v55 = *(_OWORD *)(a1 + 1656);
    v119[4] = *(_OWORD *)(a1 + 1640);
    v119[5] = v55;
    long long v56 = *(_OWORD *)(a1 + 1592);
    v119[0] = *v34;
    v119[1] = v56;
    memcpy(v121, (const void *)(a1 + 1736), sizeof(v121));
    uint64_t v122 = *(void *)(a1 + 2256);
    uint64_t v57 = *(std::__shared_weak_count **)(a1 + 2264);
    os_log_type_t v123 = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v58 = *(_OWORD *)(a1 + 2352);
    long long v128 = *(_OWORD *)(a1 + 2336);
    *(_OWORD *)uint64_t v129 = v58;
    *(void *)&v129[13] = *(void *)(a1 + 2365);
    long long v59 = *(_OWORD *)(a1 + 2288);
    long long v124 = *(_OWORD *)(a1 + 2272);
    long long v125 = v59;
    long long v60 = *(_OWORD *)(a1 + 2320);
    long long v126 = *(_OWORD *)(a1 + 2304);
    long long v127 = v60;
    sub_10000C1F8(v52, (uint64_t)v119);
    if (v123) {
      sub_1000DB0A0(v123);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v61 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "GnssAssistancePosition: Feed cached location to position assistance maintenance", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v117 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::handleReferenceLocationAssistance(const GNSS::DaemonLocation &, BOOL)", "%s\n", v117);
      if (v117 != (char *)buf) {
        free(v117);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 1536))
  {
    if (v6[1816])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v20 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v131 = 0;
      __int16 v132 = 2082;
      uint64_t v133 = "";
      int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,location since position assistance engine not running\"}";
LABEL_67:
      uint64_t v67 = v20;
      os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
LABEL_92:
      uint32_t v83 = 18;
      goto LABEL_113;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v79 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v131 = 0;
    __int16 v132 = 2082;
    uint64_t v133 = "";
    int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,location since position assistance engine not running\"}";
    goto LABEL_91;
  }
  if (!v6[1816])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v69 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_73;
    }
    uint64_t v70 = *(void *)(a2 + 4);
    uint64_t v71 = *(void *)(a2 + 12);
    *(_DWORD *)uint64_t buf = 68289795;
    int v131 = 0;
    __int16 v132 = 2082;
    uint64_t v133 = "";
    __int16 v134 = 1025;
    *(_DWORD *)uint64_t v135 = v118;
    *(_WORD *)&v135[4] = 2049;
    *(void *)&v135[6] = v70;
    *(_WORD *)&v135[14] = 2049;
    *(void *)&v135[16] = v71;
    uint64_t v65 = v69;
    os_log_type_t v66 = OS_LOG_TYPE_DEBUG;
    goto LABEL_72;
  }
  if (v6[1817])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v62 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_73;
    }
    uint64_t v63 = *(void *)(a2 + 4);
    uint64_t v64 = *(void *)(a2 + 12);
    *(_DWORD *)uint64_t buf = 68289795;
    int v131 = 0;
    __int16 v132 = 2082;
    uint64_t v133 = "";
    __int16 v134 = 1025;
    *(_DWORD *)uint64_t v135 = v118;
    *(_WORD *)&v135[4] = 2049;
    *(void *)&v135[6] = v63;
    *(_WORD *)&v135[14] = 2049;
    *(void *)&v135[16] = v64;
    uint64_t v65 = v62;
    os_log_type_t v66 = OS_LOG_TYPE_DEFAULT;
LABEL_72:
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed,valid reference location\", \"reliability\":%{private}d, \"latitude\":\"%{private}.7f\", \"longitude\":\"%{private}.7f\"}", buf, 0x2Cu);
LABEL_73:
    sub_100F3D62C(a1, a1 + 9040);
    long long v72 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 4656) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 4672) = v72;
    long long v73 = *(_OWORD *)(a2 + 32);
    long long v74 = *(_OWORD *)(a2 + 48);
    long long v75 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 4720) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 4736) = v75;
    *(_OWORD *)(a1 + 4688) = v73;
    *(_OWORD *)(a1 + 4704) = v74;
    long long v76 = *(_OWORD *)(a2 + 96);
    long long v77 = *(_OWORD *)(a2 + 112);
    long long v78 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 4796) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 4768) = v77;
    *(_OWORD *)(a1 + 4784) = v78;
    *(_OWORD *)(a1 + 4752) = v76;
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v80 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v81 = v6[1816];
    int v82 = v6[1817];
    *(_DWORD *)uint64_t buf = 68289538;
    int v131 = 0;
    __int16 v132 = 2082;
    uint64_t v133 = "";
    __int16 v134 = 1026;
    *(_DWORD *)uint64_t v135 = v81;
    *(_WORD *)&v135[4] = 1026;
    *(_DWORD *)&v135[6] = v82;
    int v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,reference location\", \"fInEmergency\":%{public}d, \"fHel"
          "oEnabled\":%{public}d}";
    uint64_t v67 = v80;
    os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
    uint32_t v83 = 30;
LABEL_113:
    _os_log_impl((void *)&_mh_execute_header, v67, v68, v21, buf, v83);
  }
}

void sub_10002A96C(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2E0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10002A98C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022D3D88;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    os_log_type_t v12 = a3;
  }
  else {
    os_log_type_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_10002AA70(uint64_t a1)
{
  if ((*(void *)(a1 + 64) & 0x14) != 0) {
    (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  }

  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 96) = 0;
  [*(id *)(a1 + 40) setValid:0];

  *(void *)(a1 + 40) = 0;
  for (uint64_t i = *(uint64_t ***)(a1 + 344); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[3] + 24))(i[3], a1 + 8);
  sub_10017F9E4(a1 + 328);
  sub_10017FF2C((uint64_t *)(a1 + 128));
  CFTypeRef v3 = *(CLConnection **)(a1 + 264);
  if (v3)
  {
    CLConnection::deferredDelete(v3);
    *(void *)(a1 + 264) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  if (*(unsigned char *)(a1 + 276))
  {
    *(unsigned char *)(a1 + 276) = 0;
    uint64_t v6 = sub_1012AD420();
    sub_1012AE2B0(v6, a1, 0, 0);
  }

  uint64_t v7 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }

  *(void *)(a1 + 112) = 0;
}

void sub_10002AC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    uint32_t v23 = "";
    __int16 v24 = 2082;
    long long v25 = "activity";
    __int16 v26 = 2082;
    uint64_t v27 = v9;
    __int16 v28 = 2050;
    uint64_t v29 = a2;
    __int16 v30 = 1026;
    int v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    int v11 = (char *)[[*(id *)(a2 + 48) legacyClientKey] UTF8String];
    if (v11) {
      os_log_type_t v12 = v11;
    }
    else {
      os_log_type_t v12 = "";
    }
    sub_100134750(buf, v12);
    sub_100041410(a2, &v18);
    uint64_t v13 = v18;
    id v14 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v16 = *(CLConnectionMessage **)a3;
    uint64_t v17 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v15 + 48))(v15, v13, &v16);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if (v19) {
      sub_1000DB0A0(v19);
    }
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)buf);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_10002AE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_10002AED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    int v11 = sub_10002016C(a2);
    os_log_type_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    id v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_10002B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_10002B154(int a1, CFDictionaryRef theDict, void *a3)
{
  if (theDict)
  {
    value[0] = 0;
    valuePtr[0] = 0.0;
    int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"SCALED_LQM", (const void **)value);
    float v5 = 0.0;
    if (ValueIfPresent && value[0])
    {
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberFloatType, valuePtr);
      float v5 = valuePtr[0];
    }
    unsigned int v6 = vcvtad_u64_f64(v5 * 100.0);
    if (v5 <= 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    [a3 processReceivedWiFiDeviceLinkScore:v7];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B2208);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(value[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLEmergencyWifiAvailability, onWiFiDeviceClientLQMCallback, empty metrics", (uint8_t *)value, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(value, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022B2208);
      }
      LOWORD(valuePtr[0]) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void onWiFiDeviceClientLQMCallback(WiFiDeviceClientRef, CFDictionaryRef, void *)", "%s\n", v9);
      if (v9 != (char *)value) {
        free(v9);
      }
    }
  }
}

uint64_t sub_10002B34C(uint64_t a1)
{
  *(void *)a1 = off_1022E9D30;
  *(void *)(a1 + 8) = &off_1022E9E08;
  if (*(unsigned char *)(a1 + 72) && *(unsigned char *)(a1 + 91)) {
    sub_1007C000C(*(void *)(a1 + 16), *(void **)(a1 + 48), 0, 0, 1, 0, 0);
  }

  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;

  *(void *)(a1 + 392) = 0;
  sub_10002AA70(a1);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  id v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290562;
    v9[1] = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "state_transition";
    __int16 v14 = 2082;
    uint64_t v15 = "DaemonClient";
    __int16 v16 = 2050;
    __int16 v18 = 2082;
    uint64_t v17 = a1;
    __int16 v19 = "lifecycle";
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 2050;
    uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":\"%{public}p\", \"new\":\"%{public}p\"}", (uint8_t *)v9, 0x4Eu);
  }
  sub_10012E38C((void *)(a1 + 400));
  sub_10017FBB4(a1 + 328);
  sub_10017F9A8(a1 + 288);
  uint64_t v3 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1000DB264(a1 + 168, *(char **)(a1 + 176));
  sub_10017FF2C((uint64_t *)(a1 + 128));
  return a1;
}

void sub_10002B634(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10002B640(uint64_t a1)
{
  sub_10014DB24(*(void *)(a1 + 16));
  uint64_t v2 = sqlite3_exec(*(sqlite3 **)(a1 + 8), "BEGIN TRANSACTION", 0, 0, 0);
  unsigned int v7 = v2;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v3 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)uint64_t buf = 68290050;
    int v9 = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = v4;
    __int16 v14 = 1026;
    int v15 = v5;
    __int16 v16 = 1040;
    int v17 = 4;
    __int16 v18 = 2098;
    __int16 v19 = &v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"beginTransaction\", \"path\":%{public, location:escape_only}s, \"count\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x32u);
    uint64_t v2 = v7;
  }
  ++*(_DWORD *)(a1 + 120);
  return v2;
}

uint64_t sub_10002B7AC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102320B68;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_10002B890(uint64_t a1, int a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    int v6 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)uint64_t buf = 138412802;
    uint64_t v9 = v5;
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Background indicator enabled for %@ is now %d (was %d)", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::setBackgroundIndicatorEnabled(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(unsigned __int8 *)(a1 + 56) != a2)
  {
    *(unsigned char *)(a1 + 56) = a2;
    sub_10012A7A0(a1);
  }
}

uint64_t sub_10002BA90(uint64_t a1, int a2)
{
  int v83 = a2;
  uint64_t v3 = (uint64_t **)(a1 + 248);
  uint64_t v2 = *(void *)(a1 + 248);
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v4 = a1;
  uint64_t v5 = (uint64_t ***)(a1 + 240);
  uint64_t v6 = a1 + 248;
  do
  {
    int v7 = *(_DWORD *)(v2 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v2;
    }
    else {
      uint64_t v9 = (uint64_t *)(v2 + 8);
    }
    if (!v8) {
      uint64_t v6 = v2;
    }
    uint64_t v2 = *v9;
  }
  while (*v9);
  if ((uint64_t **)v6 == v3 || *(_DWORD *)(v6 + 32) > a2)
  {
LABEL_11:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    __int16 v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "LocationController,notifyLocationUnavailable,could not find provider from list", buf, 2u);
    }
    uint64_t v11 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v11;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    *(_WORD *)uint64_t v84 = 0;
    uint64_t v61 = (unsigned char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n");
    goto LABEL_114;
  }
  if (!*(unsigned char *)(v6 + 903))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    long long v58 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      long long v59 = (void *)(v6 + 48);
      if (*(char *)(v6 + 71) < 0) {
        long long v59 = (void *)*v59;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v59;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,Got location unavailable notification for non-active provider,%{public}s,ignoring", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    long long v60 = (void *)(v6 + 48);
    if (*(char *)(v6 + 71) < 0) {
      long long v60 = (void *)*v60;
    }
    *(_DWORD *)uint64_t v84 = 136446210;
    *(void *)&v84[4] = v60;
LABEL_90:
    uint64_t v61 = (unsigned char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n");
LABEL_114:
    if (v61 != buf) {
      free(v61);
    }
    return 0;
  }
  *(unsigned char *)(v6 + 902) = 1;
  int v13 = &qword_102419000;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  id v14 = &qword_102419000;
  int v15 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = (void *)(v6 + 48);
    if (*(char *)(v6 + 71) < 0) {
      __int16 v16 = (void *)*v16;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,Got location unavailable notification for location provider,%{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v70 = (void *)(v6 + 48);
    if (*(char *)(v6 + 71) < 0) {
      uint64_t v70 = (void *)*v70;
    }
    *(_DWORD *)uint64_t v84 = 136446210;
    *(void *)&v84[4] = v70;
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (*(unsigned char *)(v4 + 216)) {
    sub_1001A4E60(v4, (char *)(v6 + 901));
  }
  *(void *)uint64_t buf = &v83;
  if (*((double *)sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 23) < 0.0)
  {
    uint64_t v17 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 0;
    double v18 = sub_10016BA54(v17, buf);
    *(void *)uint64_t buf = &v83;
    double v19 = v18 - *(double *)((char *)sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 172);
    double v20 = 15.0;
    if (qword_102419380 != -1)
    {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
      double v20 = 15.0;
    }
    double v21 = v19 + v20;
    __int16 v22 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(void *)uint64_t buf = &v83;
      uint64_t v23 = sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      uint64_t v24 = v23 + 6;
      if (*((char *)v23 + 71) < 0) {
        uint64_t v24 = (void *)*v24;
      }
      *(void *)uint64_t buf = &v83;
      __int16 v25 = sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[23];
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v25;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&uint8_t buf[24] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,setting provider %{public}s location to expire,curr_lifespan,%{public}.1lf,new_lifespan,%{public}.1lf", buf, 0x20u);
      int v13 = &qword_102419000;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      *(void *)uint64_t v84 = &v83;
      long long v72 = sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)v84);
      long long v73 = v72 + 6;
      if (*((char *)v72 + 71) < 0) {
        long long v73 = (void *)*v73;
      }
      *(void *)uint64_t v84 = &v83;
      long long v74 = sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)v84)[23];
      *(_DWORD *)uint64_t v84 = 136446722;
      *(void *)&v84[4] = v73;
      *(_WORD *)&v84[12] = 2050;
      *(void *)&v84[14] = v74;
      *(_WORD *)&v84[22] = 2050;
      *(double *)&v84[24] = v21;
      long long v75 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
      int v13 = &qword_102419000;
    }
    *(void *)uint64_t buf = &v83;
    *((double *)sub_100151D38(v3 - 1, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 23) = v21;
  }
  uint64_t v26 = *v5;
  if (*v5 != v3)
  {
    int v27 = 0;
    int v28 = 0;
    double v29 = 0.0;
    uint64_t v82 = v4;
    do
    {
      if (!*((unsigned char *)v26 + 902) && *((char *)v26 + 900) <= *(char *)(v4 + 161) && *(double *)((char *)v26 + 116) > 0.0)
      {
        if (v13[112] != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        __int16 v30 = v14[113];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          int v31 = v28;
          uint64_t v32 = v26 + 6;
          int v33 = v27;
          uint64_t v34 = v14;
          if (*((char *)v26 + 71) < 0) {
            uint64_t v32 = (void *)*v32;
          }
          uint64_t v35 = *(uint64_t *)((char *)v26 + 100);
          uint64_t v36 = *(uint64_t *)((char *)v26 + 108);
          long long v37 = v26[23];
          uint64_t v38 = sub_10016BA10();
          *(_DWORD *)uint64_t buf = 0;
          double v39 = sub_10016BA54(v38, buf) - *(double *)((char *)v26 + 172);
          uint64_t v40 = sub_10016BA10();
          double v41 = sub_10018202C(v40);
          *(_DWORD *)uint64_t buf = 136447491;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&buf[14] = v35;
          *(_WORD *)&unsigned char buf[22] = 2049;
          *(void *)&uint8_t buf[24] = v36;
          __int16 v92 = 2050;
          uint64_t v93 = v37;
          __int16 v94 = 2050;
          double v95 = v39;
          __int16 v96 = 2050;
          double v97 = v41;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,provider,%{public}s,still available,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1lf,age,%{public}.3fs,propagation_us,%{public}.3f", buf, 0x3Eu);
          id v14 = v34;
          int v13 = &qword_102419000;
          int v28 = v31;
          int v27 = v33;
          uint64_t v4 = v82;
        }
        if (sub_10013D1A0(115, 2))
        {
          int v47 = v27;
          int v48 = v28;
          bzero(buf, 0x65CuLL);
          if (v13[112] != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          long long v49 = v26 + 6;
          if (*((char *)v26 + 71) < 0) {
            long long v49 = (void *)*v49;
          }
          uint64_t v50 = *(uint64_t *)((char *)v26 + 100);
          uint64_t v51 = *(uint64_t *)((char *)v26 + 108);
          uint64_t v52 = v26[23];
          double v53 = sub_1005BFA38() - *(double *)((char *)v26 + 172);
          uint64_t v54 = sub_10016BA10();
          double v55 = sub_10018202C(v54);
          *(_DWORD *)uint64_t v84 = 136447491;
          *(void *)&v84[4] = v49;
          *(_WORD *)&v84[12] = 2049;
          *(void *)&v84[14] = v50;
          *(_WORD *)&v84[22] = 2049;
          *(void *)&v84[24] = v51;
          __int16 v85 = 2050;
          uint64_t v86 = v52;
          __int16 v87 = 2050;
          double v88 = v53;
          __int16 v89 = 2050;
          double v90 = v55;
          long long v56 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v56);
          if (v56 != buf) {
            free(v56);
          }
          id v14 = &qword_102419000;
          int v13 = &qword_102419000;
          int v28 = v48;
          int v27 = v47;
        }
        ++v28;
        double v42 = *((double *)v26 + 23);
        if (v29 < v42) {
          double v43 = *((double *)v26 + 23);
        }
        else {
          double v43 = v29;
        }
        if (v42 < 0.0) {
          int v27 = 1;
        }
        else {
          double v29 = v43;
        }
      }
      long long v44 = v26[1];
      if (v44)
      {
        do
        {
          long long v45 = (uint64_t **)v44;
          long long v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          long long v45 = (uint64_t **)v26[2];
          BOOL v46 = *v45 == (uint64_t *)v26;
          uint64_t v26 = v45;
        }
        while (!v46);
      }
      uint64_t v26 = v45;
    }
    while (v45 != v3);
    if (!((v28 == 0) | v27 & 1))
    {
      if (v13[112] != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      os_log_type_t v66 = v14[113];
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 67240704;
        *(_DWORD *)&uint8_t buf[4] = v28;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(double *)&buf[10] = v29;
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&buf[20] = 0x402E000000000000;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "LocationController,notifyLocationUnavailable,location available from %{public}d providers,setting location unavailable timer next delay to %{public}.1f plus deadline %{public}.1f sec", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v13[112] != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        *(_DWORD *)uint64_t v84 = 67240704;
        *(_DWORD *)&v84[4] = v28;
        *(_WORD *)&v84[8] = 2050;
        *(double *)&v84[10] = v29;
        *(_WORD *)&v84[18] = 2050;
        *(void *)&v84[20] = 0x402E000000000000;
        long long v76 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v76);
        if (v76 != buf) {
          free(v76);
        }
      }
      [*(id *)(v4 + 656) setNextFireDelay:v29 + 15.0];
      return 0;
    }
    if (v28)
    {
      if (v13[112] != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v57 = v14[113];
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,Infinite lifespan location available; not starting location unavailable timer",
          buf,
          2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (v13[112] != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      *(_WORD *)uint64_t v84 = 0;
      goto LABEL_90;
    }
  }
  uint64_t v62 = v13[112];
  if (*(char *)(v4 + 161) <= 0)
  {
    if (v62 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v67 = v14[113];
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      int v68 = *(char *)(v4 + 160);
      int v69 = *(char *)(v4 + 161);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v68;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v69;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "LocationController,notifyLocationUnavailable,Required granularity,%{public}d,not achievable with active granularity,%{public}d,starting fine", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v13[112] != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v79 = *(char *)(v4 + 160);
      int v80 = *(char *)(v4 + 161);
      *(_DWORD *)uint64_t v84 = 67240448;
      *(_DWORD *)&v84[4] = v79;
      *(_WORD *)&v84[8] = 1026;
      *(_DWORD *)&v84[10] = v80;
      int v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v81);
      if (v81 != buf) {
        free(v81);
      }
    }
    buf[0] = 1;
    sub_10014FF84(v4, buf);
    return 0;
  }
  if (v62 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  uint64_t v63 = v14[113];
  if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
  {
    uint64_t v64 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 1;
    double v65 = sub_10016BA54(v64, buf);
    *(_DWORD *)uint64_t buf = 134349056;
    *(double *)&uint8_t buf[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "LocationController,notifyLocationUnavailable,No location is available from any provider,notifying clients of location unavailable,now,%{public}.3f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v13[112] != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    double v77 = sub_1005B5034();
    *(_DWORD *)uint64_t v84 = 134349056;
    *(double *)&v84[4] = v77;
    long long v78 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v78);
    if (v78 != buf) {
      free(v78);
    }
  }
  [*(id *)(v4 + 656) setNextFireDelay:1.79769313e308];
  *(_DWORD *)uint64_t buf = 9;
  uint64_t v11 = 1;
  sub_10067B488(v4, (int *)buf, 1);
  return v11;
}

void sub_10002CAAC(uint64_t a1)
{
  if (qword_102419620 != -1) {
    dispatch_once(&qword_102419620, &stru_1022C5F80);
  }
  uint64_t v2 = qword_102419628;
  if (os_log_type_enabled((os_log_t)qword_102419628, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
    int v4 = *(unsigned __int8 *)(v3 + 48);
    int v5 = *(unsigned __int8 *)(v3 + 49);
    int v6 = *(unsigned __int8 *)(v3 + 50);
    int v7 = *(unsigned __int8 *)(v3 + 51);
    int v8 = *(unsigned __int8 *)(v3 + 52);
    int v9 = *(_DWORD *)(v3 + 56);
    int v10 = *(unsigned __int8 *)(v3 + 60);
    int v11 = *(_DWORD *)(v3 + 64);
    LODWORD(v3) = *(_DWORD *)(v3 + 68);
    *(_DWORD *)uint64_t buf = 67111168;
    int v14 = v4;
    __int16 v15 = 1024;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    __int16 v21 = 1024;
    int v22 = v8;
    __int16 v23 = 1024;
    int v24 = v9;
    __int16 v25 = 1024;
    int v26 = v10;
    __int16 v27 = 1024;
    int v28 = v11;
    char v29 = 0;
    char v30 = 4;
    int v31 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419620 != -1) {
      dispatch_once(&qword_102419620, &stru_1022C5F80);
    }
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLDaemonStats::fetchLocationSystemStateWithReply(id<CLIntersiloUniverse>, void (^)(const CLDaemonStats_Type::LocationSystemState &))_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

BOOL sub_10002CD60(_DWORD *a1)
{
  int v2 = a1[152];
  BOOL v3 = v2 == 2 || v2 == 1 && ((int)a1[153] > 2 || (int)a1[154] >= 3);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C5150);
  }
  int v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[152];
    uint64_t v6 = (int)a1[153];
    uint64_t v7 = (int)a1[154];
    *(_DWORD *)uint64_t buf = 67240960;
    BOOL v11 = v3;
    __int16 v12 = 1026;
    int v13 = v5;
    __int16 v14 = 2050;
    uint64_t v15 = v6;
    __int16 v16 = 2050;
    uint64_t v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Nlp, isBroadConnection, %{public}d, reachability, %{public}d, dataAccessTech, %{public}ld, %{public}ld", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C5150);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNetworkLocationProvider::isBroadConnection()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v3;
}

void sub_10002CFA0(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v14) = 0;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (a2 == 1)
    {
      id v5 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh for SimTwo", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v14) = 0;
    }
    else
    {
      if (a2)
      {
        id v5 = 0;
LABEL_37:
        BOOL v11 = *(void **)(a1 + 16);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_10017A464;
        v13[3] = &unk_1022A5348;
        v13[4] = a1;
        [v11 refreshCellMonitor:v5 completion:v13];
        return;
      }
      id v5 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh for SimOne", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v14) = 0;
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v17 = "triggerCellMonitorRefresh";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v14 = 136315138;
    uint64_t v15 = "triggerCellMonitorRefresh";
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

uint64_t sub_10002D528(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 176), "objectForKey:", @"kCLConnectionMessageDistanceFilterKey") doubleValue];
  double v3 = v2;
  [[*(id *)(a1 + 176) objectForKey:@"kCLConnectionMessageDesiredAccuracyKey"] doubleValue];
  double v5 = v4;
  unsigned int v6 = [*(id *)(a1 + 16) inUseLevelIsAtLeast:3] ^ 1;
  unsigned int v7 = [*(id *)(a1 + 16) isAuthorizedForServiceType:17];
  unsigned int v8 = v7;
  if (v3 > 0.0 || (uint64_t v9 = 0, v5 >= 1000.0) && v5 <= 6383135.0)
  {
    uint64_t v9 = v6 & v7;
    if (!*(unsigned char *)(a1 + 58))
    {
      if (v9)
      {
        uint64_t v9 = 1;
        if ((sub_10012D284(a1) & 1) == 0)
        {
          *(unsigned char *)(a1 + 58) = 1;
          *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1023192F0);
          }
          int v10 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v11 = *(void *)(a1 + 24);
            double v12 = *(double *)(a1 + 64);
            int v18 = 68289538;
            int v19 = 0;
            __int16 v20 = 2082;
            __int16 v21 = "";
            __int16 v22 = 2114;
            uint64_t v23 = v11;
            __int16 v24 = 2050;
            double v25 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver LossTracking enabled\", \"Client\":%{public, location:escape_only}@, \"LossTrackingStartTime\":\"%{public}f\"}", (uint8_t *)&v18, 0x26u);
          }
          uint64_t v9 = 1;
        }
      }
    }
  }
  if (_os_feature_enabled_impl())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    int v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 24);
      int v18 = 68290562;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2114;
      uint64_t v23 = v14;
      __int16 v24 = 2050;
      double v25 = v3;
      __int16 v26 = 2050;
      double v27 = v5;
      __int16 v28 = 1026;
      unsigned int v29 = v6;
      __int16 v30 = 1026;
      unsigned int v31 = v8;
      __int16 v32 = 1026;
      int v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver should release processAssertion\", \"Client\":%{public, location:escape_only}@, \"distanceFilter\":\"%{public}f\", \"desiredAccuracy\":\"%{public}f\", \"inUseLevelLessThanDecayingUserEng\":%{public}hhd, \"backgroundLaunchable\":%{public}hhd, \"eligibleForReleasingProcessAssertion\":%{public}hhd}", (uint8_t *)&v18, 0x42u);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    uint64_t v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 24);
      int v18 = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2114;
      uint64_t v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ineligible for releasing process assertion - #cblsPowerSaver feature-flag not enabled\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v18, 0x1Cu);
    }
    return 0;
  }
  return v9;
}

void sub_10002D85C(uint64_t a1, uint64_t a2)
{
  sub_1000EF97C((uint64_t)v17, a2);
  id v3 = objc_alloc((Class)CLLocation);
  v15[6] = v17[6];
  v15[7] = v17[7];
  v16[0] = v18[0];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v18 + 12);
  v15[2] = v17[2];
  v15[3] = v17[3];
  v15[4] = v17[4];
  v15[5] = v17[5];
  v15[0] = v17[0];
  v15[1] = v17[1];
  id v4 = [v3 initWithClientLocation:v15];
  id v5 = [*(id *)(a1 + 64) legacyClientKey];
  unsigned int v6 = *(void **)(a1 + 480);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_10017ACCC;
  v7[3] = &unk_10230E6A8;
  v7[5] = a1;
  sub_1000EF97C((uint64_t)&v8, (uint64_t)v17);
  v7[4] = v5;
  [v6 handleProvisionalIntermediationForService:3 forClientKey:v5 at:v4 withReply:v7];

  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }

  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20) {
    sub_1000DB0A0(v20);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
}

void sub_10002DA28(_Unwind_Exception *a1)
{
  sub_100458658(v1);
  sub_100458658((uint64_t)&STACK[0x6D8]);
  _Unwind_Resume(a1);
}

void sub_10002DC38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  id v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    id v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_10002DCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10002DCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 264);
  *(_WORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 266) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 311) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  switch(*(_DWORD *)(a2 + 96))
  {
    case 1:
    case 3:
    case 9:
      if (*(void *)(a1 + 208))
      {
        unint64_t v5 = *(void *)(*(void *)(a1 + 176) + 8 * (*(void *)(a1 + 200) / 0x1AuLL))
           + 156 * (*(void *)(a1 + 200) % 0x1AuLL);
        if (*(double *)(a2 + 76) - *(double *)(v5 + 76) < 900.0) {
          *(unsigned char *)(a1 + 289) = *(_DWORD *)(v5 + 84) > 0x49u;
        }
      }
      sub_1000E2114((uint64_t)v48, (void *)(a1 + 168));
      sub_10002ED6C((double *)a1, a2, v48, a1 + 288);
      sub_1000D801C(v48);
      sub_1000E2114((uint64_t)v47, (void *)(a1 + 216));
      sub_10002ED6C((double *)a1, a2, v47, (uint64_t)v3);
      sub_1000D801C(v47);
      *(_DWORD *)(a1 + 336) = 1;
      sub_1001AF3C8((long long *)a2, (void *)(a1 + 120));
      goto LABEL_6;
    case 4:
      *(unsigned char *)(a1 + 289) = *(_DWORD *)(a2 + 84) > 0x49u;
      sub_1000E2114((uint64_t)v50, (void *)(a1 + 216));
      sub_10002ED6C((double *)a1, a2, v50, (uint64_t)v3);
      sub_1000D801C(v50);
      sub_1000E2114((uint64_t)v49, (void *)(a1 + 120));
      sub_10002ED6C((double *)a1, a2, v49, a1 + 312);
      sub_1000D801C(v49);
      int v18 = sub_1001AF42C(a1 + 312, v3);
      *(_DWORD *)(a1 + 336) = v18;
      if (v18 == 5) {
        goto LABEL_6;
      }
      sub_1001AF3C8((long long *)a2, (void *)(a1 + 168));
      if ((*(_DWORD *)(a1 + 336) - 1) > 1 || *(_DWORD *)(a2 + 128) > 0x31u) {
        goto LABEL_6;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      int v19 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *(_DWORD *)(a2 + 128);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)uint64_t v54 = v20;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = 50;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "locationType,integrityPrior,%d,integrityNew,%d", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      int v21 = *(_DWORD *)(a2 + 128);
      int v51 = 67109376;
      *(_DWORD *)uint64_t v52 = v21;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&unsigned char v52[6] = 50;
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v22);
      break;
    case 6:
      if (*(void *)(a1 + 208))
      {
        unint64_t v23 = *(void *)(*(void *)(a1 + 176) + 8 * (*(void *)(a1 + 200) / 0x1AuLL))
            + 156 * (*(void *)(a1 + 200) % 0x1AuLL);
        if (*(double *)(a2 + 76) - *(double *)(v23 + 76) < 900.0) {
          *(unsigned char *)(a1 + 289) = *(_DWORD *)(v23 + 84) > 0x49u;
        }
      }
      sub_1000E2114((uint64_t)v46, (void *)(a1 + 168));
      sub_10002ED6C((double *)a1, a2, v46, a1 + 288);
      sub_1000D801C(v46);
      sub_1000E2114((uint64_t)v45, (void *)(a1 + 120));
      sub_10002ED6C((double *)a1, a2, v45, a1 + 312);
      sub_1000D801C(v45);
      int v24 = sub_1001AF42C(a1 + 312, (unsigned char *)(a1 + 288));
      *(_DWORD *)(a1 + 336) = v24;
      if (v24 == 5) {
        goto LABEL_6;
      }
      sub_1001AF3C8((long long *)a2, (void *)(a1 + 216));
      if ((*(_DWORD *)(a1 + 336) - 1) > 1 || *(_DWORD *)(a2 + 128) > 0x31u) {
        goto LABEL_6;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      double v25 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a2 + 128);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)uint64_t v54 = v26;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = 50;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "locationType,integrityPrior,%d,integrityNew,%d", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      int v44 = *(_DWORD *)(a2 + 128);
      int v51 = 67109376;
      *(_DWORD *)uint64_t v52 = v44;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&unsigned char v52[6] = 50;
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v22);
      break;
    default:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      id v14 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)uint64_t v54 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "location type,%d,not supported", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      int v16 = *(_DWORD *)(a2 + 96);
      int v51 = 67109120;
      *(_DWORD *)uint64_t v52 = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v17);
      goto LABEL_68;
  }
  if (v22 != (char *)buf) {
    free(v22);
  }
LABEL_50:
  *(_DWORD *)(a2 + 128) = 50;
LABEL_6:
  if ((*(_DWORD *)(a1 + 336) & 0xFFFFFFFE) != 4) {
    return 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102324408);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a2 + 96);
    uint64_t v8 = *(void *)(a2 + 4);
    uint64_t v9 = *(void *)(a2 + 12);
    *(_DWORD *)uint64_t buf = 67109632;
    *(_DWORD *)uint64_t v54 = v7;
    *(_WORD *)&v54[4] = 2048;
    *(void *)&v54[6] = v8;
    *(_WORD *)&v54[14] = 2048;
    *(void *)&v54[16] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102324408);
    }
    int v38 = *(_DWORD *)(a2 + 96);
    uint64_t v39 = *(void *)(a2 + 4);
    uint64_t v40 = *(void *)(a2 + 12);
    int v51 = 67109632;
    *(_DWORD *)uint64_t v52 = v38;
    *(_WORD *)&v52[4] = 2048;
    *(void *)&unsigned char v52[6] = v39;
    *(_WORD *)&v52[14] = 2048;
    *(void *)&v52[16] = v40;
    double v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  if (*(unsigned char *)(a1 + 312))
  {
    double v10 = *(double *)(a1 + 328);
    if (v10 > *(double *)(a1 + 320) + *(double *)(a1 + 320))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      uint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)uint64_t v54 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Location rejected by IM,Reason,disagrees with GPS,location type,%d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_95:
        int v42 = *(_DWORD *)(a2 + 96);
        int v51 = 67109120;
        *(_DWORD *)uint64_t v52 = v42;
        double v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
        return 1;
      }
LABEL_103:
      dispatch_once(&qword_102419630, &stru_102324408);
      goto LABEL_95;
    }
    double v30 = fabs(v10) / 3.5;
    *(double *)(a2 + 20) = v30 + *(double *)(a2 + 20);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102324408);
    }
    unsigned int v31 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v32 = *(double *)(a2 + 20);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)uint64_t v54 = v32 - v30;
      *(_WORD *)&v54[8] = 2048;
      *(double *)&v54[10] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "huncBump,fromHunc,%.1lf,toHunc,%.1lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_67;
      }
      goto LABEL_102;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 288) || !*(unsigned char *)(a1 + 289))
    {
      if (*(_DWORD *)(a2 + 96) == 4 && *v3 && !*(unsigned char *)(a1 + 289) && *(double *)(a1 + 280) > 5000.0)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102324408);
        }
        uint64_t v34 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v35 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)uint64_t v54 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_95;
        }
        goto LABEL_103;
      }
      return 0;
    }
    double v27 = *(double *)(a1 + 304);
    if (v27 > *(double *)(a1 + 296) + *(double *)(a1 + 296))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102324408);
      }
      __int16 v28 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)uint64_t v54 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_95;
      }
      goto LABEL_103;
    }
    double v30 = fabs(v27) / 3.5;
    *(double *)(a2 + 20) = v30 + *(double *)(a2 + 20);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102324408);
    }
    uint64_t v36 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v37 = *(double *)(a2 + 20);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)uint64_t v54 = v37 - v30;
      *(_WORD *)&v54[8] = 2048;
      *(double *)&v54[10] = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "huncBump,fromHunc,%.1lf,toHunc,%.1lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_67:
        double v33 = *(double *)(a2 + 20);
        int v51 = 134218240;
        *(double *)uint64_t v52 = v33 - v30;
        *(_WORD *)&v52[8] = 2048;
        *(double *)&v52[10] = v33;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v17);
LABEL_68:
        if (v17 != (char *)buf) {
          free(v17);
        }
        return 0;
      }
LABEL_102:
      dispatch_once(&qword_102419630, &stru_102324408);
      goto LABEL_67;
    }
  }
  return result;
}

void sub_10002ED14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000D801C(va);
  _Unwind_Resume(a1);
}

void sub_10002ED6C(double *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a3[5])
  {
    uint64_t v4 = *(void *)(a3[1] + 8 * (a3[4] / 0x1AuLL)) + 156 * (a3[4] % 0x1AuLL);
    if (*(double *)(a2 + 76) - *(double *)(v4 + 76) < 900.0)
    {
      *(unsigned char *)a4 = 1;
      sub_1013F0548(a1, a2, v4, (double *)(a4 + 8), (BOOL *)(a4 + 2), (double *)(a4 + 16));
    }
  }
}

void sub_10002EEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10002F290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10002F2B0()
{
}

id sub_10002F364(uint64_t a1, void *a2, void *a3)
{
  sub_100103240();
  if (!sub_1001037EC()) {
    return 0;
  }
  uint64_t v5 = sub_100104034(a2, a3);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v5;
  if (v5 != 2)
  {
    CFStringRef v9 = (const __CFString *)[a2 bundlePath];
    if (v9)
    {
      CFStringRef v10 = v9;
      id v7 = objc_alloc((Class)STExecutableIdentity);
      CFStringRef v8 = v10;
      goto LABEL_7;
    }
    id v14 = [a2 executablePath];
    if (v14)
    {
      id v11 = [objc_alloc((Class)STExecutableIdentity) initWithExecutablePath:v14];
      goto LABEL_8;
    }
    id v15 = [a2 bundleId];
    if (v15)
    {
      id v11 = [objc_alloc((Class)STExecutableIdentity) initWithApplicationBundleIdentifier:v15];
      goto LABEL_8;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v19 = 68289282;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      __int16 v23 = 2114;
      int v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CreateAttribution CLClientKeyPath identity did not return a valid anchor type\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v19, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v17 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v19 = 68289282;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      __int16 v23 = 2114;
      int v24 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CreateAttribution CLClientKeyPath identity did not return a valid anchor type", "{\"msg%{public}.0s\":\"#CreateAttribution CLClientKeyPath identity did not return a valid anchor type\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v19, 0x1Cu);
    }
    return 0;
  }
  id v7 = objc_alloc((Class)STExecutableIdentity);
  CFStringRef v8 = @"/System/Library/LocationBundles/Traffic.bundle";
LABEL_7:
  id v11 = [v7 initWithBundlePath:v8];
LABEL_8:
  id v12 = [objc_alloc((Class)STActivityAttribution) initWithAttributedEntity:[objc_alloc((Class)STAttributedEntity) initWithExecutableIdentity:v11 website:[a2 website] systemService:(v6 >> 1) & 1]];
  id v13 = objc_alloc((Class)STLocationStatusDomainLocationAttribution);

  return _[v13 initWithLocationState:1 activityAttribution:v12 eligibleDisplayModes:v6];
}

uint64_t sub_10002F658(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF48 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

void sub_10002F6F4()
{
}

uint64_t sub_10002F800(uint64_t a1, void *__dst, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  char v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 4));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 320 * (v6 & 0xF);
  unint64_t v10 = v5 >> 4;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 4));
  unsigned int v12 = v5 & 0xF;
  uint64_t v13 = v11 + 320 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 5120;
      }
      double v15 = *(double *)(v14 - 320);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 5120;
      }
      v9 -= 320;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 320 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 320 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 5120;
  }
  memcpy(__dst, (const void *)(v9 - 320), 0x140uLL);
  return 1;
}

void sub_10002F904(id a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D8678);
  }
  uint64_t v1 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Ping timer fired, resetting watchdog", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D8678);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v2 = qword_10248A7D0;
  uint64_t v3 = *(NSObject **)(qword_10248A7D0 + 40);
  if (v3
    || (v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q), *(void *)(qword_10248A7D0 + 40) = v4, dispatch_source_set_event_handler(v4, &stru_1022D8638), dispatch_resume(*(dispatch_object_t *)(qword_10248A7D0 + 40)), v2 = qword_10248A7D0, (uint64_t v3 = *(NSObject **)(qword_10248A7D0 + 40)) != 0))
  {
    ++*(_DWORD *)(v2 + 48);
    dispatch_time_t v5 = dispatch_time(0, 60000000000);
    dispatch_source_set_timer(v3, v5, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D8678);
    }
    char v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create watchdog timer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D8678);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10002FC4C(int64x2_t *a1, uint64_t a2)
{
  sub_100175C04((uint64_t)&a1[1].i64[1], (long long *)a2);
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102301FC0);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)uint64_t buf = 134218240;
    uint64_t v9 = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received motion state, startTime, %f, activityType, %u", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::feedActivity(const CLOutdoorActivity &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10002FED4(a1, *(double *)(a2 + 8));
}

uint64_t sub_10002FE38(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_102489D90 + 16);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
  {
LABEL_9:
    int v8 = *(unsigned __int8 *)(v5 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, (BOOL)a2, a4);
  }
  return result;
}

void sub_10002FED4(int64x2_t *a1, double a2)
{
  double v12 = a2;
  uint64_t i64 = (uint64_t)a1[559].i64;
  sub_10017CCF0((int64x2_t *)a1[559].i64, &v12);
  if (!a1->i8[0] && a1[561].i64[1])
  {
    do
    {
      double v5 = *(double *)(*(void *)(a1[559].i64[1] + (((unint64_t)a1[561].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (a1[561].i64[0] & 0x1FF));
      a1[561] = vaddq_s64(a1[561], (int64x2_t)xmmword_101D0A740);
      sub_10007F07C(i64, 1);
      sub_1000B8704((uint64_t)&a1[156].i64[1], v5);
      sub_10007F164((uint64_t)a1[159].i64, (uint64_t)v11, v5);
      uint64_t v6 = a1->i64[1];
      if (v6) {
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, v11);
      }
      sub_10015DCCC((uint64_t)a1[398].i64, (uint64_t)v11, &__p);
      uint64_t v7 = (double *)__p;
      if (a1[397].i64[0])
      {
        int v8 = v10;
        if (__p != v10)
        {
          do
          {
            sub_10103F2F8(a1[397].i64[0], v7);
            v7 += 2;
          }
          while (v7 != v8);
          uint64_t v7 = (double *)__p;
        }
      }
      if (v7)
      {
        __int16 v10 = v7;
        operator delete(v7);
      }
    }
    while (a1[561].i64[1]);
  }
}

void sub_100030050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003006C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8368);
  if (v3) {
    sub_100D09D18(v3, a2);
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022C3000);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    int v9 = *(unsigned __int8 *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    *(_DWORD *)uint64_t buf = 134219520;
    uint64_t v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v10;
    __int16 v23 = 1024;
    int v24 = v9;
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Update reached MotionStateMediator, startTime, %f, mctTimestampSec, %f type, %ld, confidence, %ld, estimatedStateProbabilityOutdoor, %f, isAstronomicalDaytime, %d, daylightConfidence, %ld", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022C3000);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateMediator::onOutdoorUpdate(const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

uint64_t sub_1000302BC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF50 + 8);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AF50 + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_10003034C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF18 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

void sub_1000303E8(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234C6A8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)int v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    __int16 v27 = 2050;
    __int16 v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      __int16 v17 = (uint64_t *)v12;
    }
    else {
      __int16 v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v29 = v30;
    memset(v30, 0, sizeof(v30));
    unsigned int v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    uint64_t v18 = (uint64_t *)operator new(0x158uLL);
    v18[1] = 0;
    v18[2] = 0;
    *uint64_t v18 = (uint64_t)off_10234C6F8;
    memcpy(v18 + 3, a3, 0x140uLL);
    __int16 v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  __int16 v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10000B03C();
  }
  os_activity_scope_leave(&state);
}

void sub_1000309D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100030A20(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100066B7C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100030BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100030BFC(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current - *(double *)(a1 + 8) > 43200.0)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022B23A0);
    }
    uint64_t v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = (int)(Current - *(double *)(a1 + 8));
      *(_DWORD *)uint64_t buf = 67240192;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fence: Output CLFenceLogEntrySerializer log opened for %{public}d seconds, re-opening", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022B23A0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceLogEntrySerializer::append(const ::google::protobuf::MessageLite &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_100428580(a1);
  }
  sub_100030E00(*(void *)(a1 + 16));
}

void sub_100030E00(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString())
  {
    sub_100168EAC(a1, (uint64_t)__p);
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    uint64_t v2 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      char v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "ProtobufSerializer,%{public}s,serialize failed", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      int v4 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v4 = (void *)*v4;
      }
      int v8 = 136446210;
      int v9 = v4;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::append(const ::google::protobuf::MessageLite &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100031008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100031028(uint64_t a1, double *a2)
{
  CLMotionActivity::getInit((uint64_t *)v17 + 1, (CLMotionActivity *)a1);
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (_OWORD *)(*(void *)(*(void *)(a1 + 8) + 8 * ((v4 + *(void *)(a1 + 32) - 1) / 0x1CuLL))
                + 144 * ((v4 + *(void *)(a1 + 32) - 1) % 0x1CuLL));
  v17[0] = *v5;
  long long v6 = v5[4];
  long long v8 = v5[1];
  long long v7 = v5[2];
  v17[3] = v5[3];
  v17[4] = v6;
  v17[1] = v8;
  v17[2] = v7;
  long long v9 = v5[8];
  long long v11 = v5[5];
  long long v10 = v5[6];
  v17[7] = v5[7];
  _OWORD v17[8] = v9;
  v17[5] = v11;
  v17[6] = v10;
  if (*a2 >= 0.0)
  {
    uint64_t v15 = sub_10016BA10();
    int v18 = 1;
    double v16 = sub_10016BA54(v15, &v18);
    if (*(double *)v17 < 0.0 || v16 >= *(double *)v17 && v16 - *(double *)v17 > *a2) {
      return 0;
    }
  }
  if (CLMotionActivity::isInVehicle((CLMotionActivity *)((char *)v17 + 8))
    && ((char isVehicularHighConfidence = CLMotionActivity::isVehicularHighConfidence((CLMotionActivity *)((char *)v17 + 8)),
         SHIDWORD(v17[0]) > 0)
      ? (char v13 = 1)
      : (char v13 = isVehicularHighConfidence),
        (v13 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void sub_100031160(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 3u;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    unsigned int v4 = sub_1001C1CCC((unint64_t *)(a1 + 16));
    if (!sub_10016E644(v4)) {
      sub_101A5F5D0();
    }
    *(_DWORD *)(a2 + 56) |= 4u;
    *(_DWORD *)(a2 + 24) = v4;
    unsigned int v5 = sub_100031398((unint64_t *)(a1 + 24));
    if (!sub_100165F14(v5)) {
      sub_101A5F5A4();
    }
    int v6 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 28) = v5;
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 56) = v6 | 0x18;
    *(void *)(a2 + 32) = v7;
    unsigned int v8 = sub_100031398((unint64_t *)(a1 + 40));
    if (!sub_100165F14(v8)) {
      sub_101A5F578();
    }
    int v9 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 40) = v8;
    *(unsigned char *)(a2 + 44) = *(unsigned char *)(a1 + 48);
    int v10 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 56) = v9 | 0xE0;
    *(_DWORD *)(a2 + 48) = v10;
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    long long v11 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "ConvertOutdoorUpdateToProtobuf,invalid pMsg pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void ConvertOutdoorUpdateToProtobuf(const CLOutdoor_Type::OutdoorUpdate &, CLP::LogEntry::PrivateData::OutdoorUpdate *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

unint64_t sub_100031398(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 4)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102327520);
    }
    uint64_t v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v4 = *a1;
      *(_DWORD *)uint64_t buf = 67240192;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ConvertIndoorOutdoorConfidenceTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
    }
    unint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102327520);
      }
      unsigned int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::PrivateData::IndoorOutdoorConfidence ConvertIndoorOutdoorConfidenceTypeToProtobuf(const CMIndoorOutdoorConfidence &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003155C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v36 = off_10232A710;
  long long v10 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)&v40[16] = v10;
  *(_OWORD *)&v40[32] = *(_OWORD *)(a3 + 104);
  *(_OWORD *)&v40[44] = *(_OWORD *)(a3 + 116);
  long long v11 = *(_OWORD *)(a3 + 24);
  long long v37 = *(_OWORD *)(a3 + 8);
  long long v38 = v11;
  long long v12 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&v39[16] = v12;
  sub_1000318C0((uint64_t)&v36, (uint64_t)"FusedLoc,CC Fusion a priori", *(_DWORD *)(a1 + 652));
  *(double *)v14.uint64_t i64 = *(double *)(a4 + 40) * *(double *)(a4 + 40) * 0.5;
  *(double *)v15.uint64_t i64 = *(double *)(a3 + 40) * *(double *)(a3 + 40) * 0.5;
  if (*(double *)v14.i64 >= 1.0) {
    double v16 = 1.0 / *(double *)v14.i64;
  }
  else {
    double v16 = 1.0;
  }
  if (*(double *)v15.i64 >= 1.0) {
    double v17 = 1.0 / *(double *)v15.i64;
  }
  else {
    double v17 = 1.0;
  }
  double v18 = 1.0 / (v16 + v17);
  *(void *)uint64_t v39 = sqrt(v18 + v18);
  *(double *)v13.uint64_t i64 = v16 * (*(double *)(a4 + 32) * 0.0174532925);
  *(double *)v14.uint64_t i64 = v18 * (*(double *)(a3 + 24) * 0.0174532925 * v17 + v16 * (*(double *)(a4 + 24) * 0.0174532925));
  double v19 = v17 * (*(double *)(a3 + 32) * 0.0174532925) + *(double *)v13.i64;
  v13.i64[0] = 0x400921FB54442D18;
  int8x16_t v34 = v13;
  if (fabs(*(double *)v14.i64) > 3.14159265)
  {
    v20.f64[0] = NAN;
    v20.f64[1] = NAN;
    int8x16_t v33 = vbslq_s8((int8x16_t)vnegq_f64(v20), v13, v14);
    *(double *)v14.uint64_t i64 = fmod(*(double *)v14.i64 + *(double *)v33.i64, 6.28318531);
    v15.i64[1] = v33.i64[1];
    *(double *)v14.uint64_t i64 = *(double *)v14.i64 - *(double *)v33.i64;
  }
  *(double *)v15.uint64_t i64 = v18 * v19;
  if (*(double *)v14.i64 >= 1.57079633)
  {
    int8x16_t v21 = v34;
    *(double *)v14.uint64_t i64 = *(double *)v34.i64 - *(double *)v14.i64;
  }
  else
  {
    if (*(double *)v14.i64 < -1.57079633) {
      *(double *)v14.uint64_t i64 = -3.14159265 - *(double *)v14.i64;
    }
    int8x16_t v21 = v34;
  }
  *(double *)&long long v38 = *(double *)v14.i64 * 57.2957795;
  if (fabs(*(double *)v15.i64) > *(double *)v21.i64)
  {
    v22.f64[0] = NAN;
    v22.f64[1] = NAN;
    double v35 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v22), v21, v15).i64;
    *(double *)v15.uint64_t i64 = fmod(*(double *)v15.i64 + v35, 6.28318531) - v35;
  }
  *((double *)&v38 + 1) = *(double *)v15.i64 * 57.2957795;
  if (a5 <= 2.0)
  {
    if (*(double *)&v39[16] <= 0.0) {
      *(_OWORD *)&v39[8] = *(_OWORD *)(a4 + 48);
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) & 1) == 0)
    {
      if (*(double *)&v40[16] <= 0.0) {
        *(_OWORD *)&v40[8] = *(_OWORD *)(a4 + 80);
      }
      if (*(double *)&v40[32] <= 0.0) {
        *(_OWORD *)&unsigned char v40[24] = *(_OWORD *)(a4 + 96);
      }
    }
  }
  double v23 = *(double *)v39;
  if (*(double *)v39 < 2.0) {
    double v23 = 2.0;
  }
  *(double *)uint64_t v39 = v23;
  sub_1000318C0((uint64_t)&v36, (uint64_t)"FusedLoc,CC Fusion a posteriori", *(_DWORD *)(a1 + 652));
  unint64_t v24 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(void *)(a1 + 32) + a2) % 0x17uLL);
  long long v25 = v37;
  long long v26 = v38;
  long long v27 = *(_OWORD *)v39;
  *(_OWORD *)(v24 + 88) = *(_OWORD *)&v39[16];
  *(_OWORD *)(v24 + 72) = v27;
  *(_OWORD *)(v24 + 56) = v26;
  *(_OWORD *)(v24 + 40) = v25;
  long long v28 = *(_OWORD *)v40;
  long long v29 = *(_OWORD *)&v40[16];
  long long v30 = *(_OWORD *)&v40[32];
  *(_OWORD *)(v24 + 148) = *(_OWORD *)&v40[44];
  *(_OWORD *)(v24 + 136) = v30;
  *(_OWORD *)(v24 + 120) = v29;
  *(_OWORD *)(v24 + 104) = v28;
  unint64_t v31 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(void *)(a1 + 32) + a2) % 0x17uLL);
  *(_WORD *)(v31 + 168) = 1;
  *(_OWORD *)unint64_t v31 = v37;
  return 1;
}

void sub_1000318C0(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_10232A7E8);
  }
  int v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(_DWORD *)(a1 + 128);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    uint64_t v18 = *(void *)(a1 + 104);
    int v19 = *(unsigned __int8 *)(a1 + 124);
    *(_DWORD *)uint64_t buf = 134352643;
    uint64_t v22 = v7;
    __int16 v23 = 2050;
    uint64_t v24 = v8;
    __int16 v25 = 1026;
    int v26 = v9;
    __int16 v27 = 2049;
    uint64_t v28 = v10;
    __int16 v29 = 2049;
    uint64_t v30 = v11;
    __int16 v31 = 2049;
    uint64_t v32 = v12;
    __int16 v33 = 2049;
    uint64_t v34 = v13;
    __int16 v35 = 2050;
    uint64_t v36 = v14;
    __int16 v37 = 2049;
    uint64_t v38 = v16;
    __int16 v39 = 2050;
    uint64_t v40 = v15;
    __int16 v41 = 2049;
    uint64_t v42 = v17;
    __int16 v43 = 2050;
    uint64_t v44 = v18;
    __int16 v45 = 1026;
    int v46 = v19;
    __int16 v47 = 1026;
    int v48 = a3;
    __int16 v49 = 2082;
    uint64_t v50 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ProviderLoc:PositionLog,%{public}.3f,%{public}.3f,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{public}.1f,%{private}.2f,%{public}.2f,%{private}.1f,%{public}.1f,%{public}d,%{public}d,%{public}s", buf, 0x8Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_10232A7E8);
    }
    float64x2_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void cllcf::LCFusionProviderLocation::debugPrintLocation(const char *, int) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

void sub_100031BC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100031BD0(uint64_t a1, uint64_t *a2)
{
  if (!a2)
  {
    sub_101A9DD30();
    __break(1u);
LABEL_32:
    dispatch_once(&qword_102419380, &stru_10230D000);
    goto LABEL_4;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = (unsigned char *)sub_10015EB2C(a1, 0xAu);
  sub_10003203C(v2);
  if (!*v4) {
    return 0;
  }
  unsigned int v5 = &qword_102419000;
  if (qword_102419380 != -1) {
    goto LABEL_32;
  }
LABEL_4:
  int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = sub_10014D19C((uint64_t)(v4 + 184));
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Get manifest tile, %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v5[112] != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    LODWORD(v17) = 134217984;
    *(void *)((char *)&v17 + 4) = sub_10014D19C((uint64_t)(v4 + 184));
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getRegionPreloadManifest(std::vector<CLMarketRegion> *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v7 = (uint64_t)(v4 + 184);
  uint64_t result = sub_10014D19C(v7);
  if (result)
  {
    if ((unint64_t)sub_10014D19C(v7) >= 2)
    {
      if (v5[112] != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      int v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Why do we have more than one, we only want one", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v5[112] != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        LOWORD(v17) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesManager::getRegionPreloadManifest(std::vector<CLMarketRegion> *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    uint64_t v10 = *(void *)(sub_1000D8908(v7) + 80);
    *(_OWORD *)uint64_t buf = *(_OWORD *)(v10 + 48);
    uint64_t v20 = *(void *)(v10 + 64);
    if (*(char *)(v10 + 95) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(v10 + 72), *(void *)(v10 + 80));
    }
    else
    {
      long long __p = *(_OWORD *)(v10 + 72);
      uint64_t v22 = *(void *)(v10 + 88);
    }
    if (sub_1001453B8(v10, *(unsigned char *)(v3 + 200)))
    {
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      if (sub_1007360FC(v10, (uint64_t *)&v17))
      {
        uint64_t v12 = *((void *)&v17 + 1);
        uint64_t v11 = v17;
        if ((void)v17 != *((void *)&v17 + 1))
        {
          unint64_t v13 = v2[1];
          do
          {
            if (v13 >= v2[2])
            {
              unint64_t v13 = sub_100737908(v2, v11);
            }
            else
            {
              sub_1007378A0((uint64_t)v2, v11);
              v13 += 56;
            }
            v2[1] = v13;
            v11 += 56;
          }
          while (v11 != v12);
        }
      }
      uint64_t v16 = (void **)&v17;
      sub_100129808(&v16);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)__p);
    }
    return 1;
  }
  return result;
}

void sub_100031FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  a12 = &a13;
  sub_100129808((void ***)&a12);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10003203C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

BOOL sub_10003208C(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = &qword_102419000;
  if (!a1[64])
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,odometer is not available", (uint8_t *)buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    LOWORD(v163) = 0;
LABEL_148:
    uint64_t v142 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v142);
    if (v142 != (char *)buf) {
      free(v142);
    }
    return 0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,update requested", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    LOWORD(v163) = 0;
    uint64_t v112 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v112);
    if (v112 != (char *)buf) {
      free(v112);
    }
  }
  double v162 = sub_10016C458();
  *((unsigned char *)a1 + 496) = sub_10018440C((uint64_t)a1, v162);
  double v8 = *(double *)(a2 + 20);
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v8 > 0.0 && v8 < 200.0)
  {
    long long v9 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 150) = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 149) = v9;
    long long v10 = *(_OWORD *)(a2 + 32);
    long long v11 = *(_OWORD *)(a2 + 48);
    long long v12 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)a1 + 154) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)a1 + 153) = v12;
    *((_OWORD *)a1 + 152) = v11;
    *((_OWORD *)a1 + 151) = v10;
    long long v13 = *(_OWORD *)(a2 + 96);
    long long v14 = *(_OWORD *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)a1 + 2524) = *(_OWORD *)(a2 + 140);
    *((_OWORD *)a1 + 157) = v15;
    *((_OWORD *)a1 + 156) = v14;
    *((_OWORD *)a1 + 155) = v13;
    *((double *)a1 + 361) = v162;
    if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1 && *((double *)sub_100BCE65C() + 3) != *(double *)(a3 + 24))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v16 = (uint64_t *)((char *)a1 + 2460);
      long long v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *v16;
        uint64_t v19 = *(void *)(a3 + 24);
        LODWORD(buf[0]) = 134218240;
        *(void *)((char *)buf + 4) = v18;
        WORD2(buf[1]) = 2048;
        *(void *)((char *)&buf[1] + 6) = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BaroAlt,fCachedLocation,time override,original cft,%{puboic}lf,gps cft,%{puboic}lf", (uint8_t *)buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v152 = *v16;
        uint64_t v153 = *(void *)(a3 + 24);
        int v163 = 134218240;
        *(void *)uint64_t v164 = v152;
        *(_WORD *)&v164[8] = 2048;
        *(void *)uint64_t v165 = v153;
        unsigned int v154 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v154);
        if (v154 != (char *)buf) {
          free(v154);
        }
      }
      *uint64_t v16 = *(void *)(a3 + 24);
    }
    sub_10004F998((uint64_t)a1, a2);
  }
  if (*a1) {
    sub_10019C5A0((uint64_t)*a1, a2, a3, v162);
  }
  sub_1001572A0((uint64_t)a1, a2, v162);
  if (!*((unsigned char *)a1 + 520))
  {
    [*((id *)a1[64] + 2) register:*((void *)a1[64] + 1) forNotification:7 registrationInfo:0];
    *((unsigned char *)a1 + 520) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt, subscribed to kNotificationOdometerUpdateElevationSpectator", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v163) = 0;
      int v143 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v143);
      if (v143 != (char *)buf) {
        free(v143);
      }
    }
  }
  if (!*((unsigned char *)a1 + 3480)) {
    sub_101917338((uint64_t)a1);
  }
  __int16 v161 = 0;
  unsigned __int8 v160 = sub_10000E068((uint64_t)a1, a2, a3, (BOOL *)&v161 + 1, (BOOL *)&v161, v162);
  if (*((unsigned char *)a1 + 2156)) {
    goto LABEL_30;
  }
  if (!*a1) {
    goto LABEL_46;
  }
  if (sub_10019CD88((uint64_t)*a1, a3, &v160)) {
LABEL_30:
  }
    sub_101917624((uint64_t)a1);
  uint64_t v21 = (uint64_t)*a1;
  if (*a1)
  {
    uint64_t v22 = 236;
    if (!*((unsigned char *)a1 + 237)) {
      uint64_t v22 = 360;
    }
    LOBYTE(buf[0]) = *((unsigned char *)a1 + v22);
    sub_10019CDB4(v21, &v162, (uint64_t)(a1 + 197), a2, a3, a1 + 186, a1 + 195, a1 + 187, a1 + 188, &v160, a1 + 153, buf, a1 + 54, (double *)a1 + 55, a1 + 155, a1 + 56);
  }
LABEL_46:
  __int16 v25 = a1 + 159;
  unint64_t v158 = 0xBFF0000000000000;
  double v159 = 0.0;
  unint64_t v157 = 0xBFF0000000000000;
  if (sub_1001A33FC((uint64_t)a1, &v162, a2, a3, v160, (double *)&v158, (double *)&v157))
  {
    double v26 = *((double *)a1 + 54);
    float v27 = v26;
    *((float *)a1 + 336) = v27;
    *((_DWORD *)a1 + 337) = 1075838976;
    uint64_t v28 = 280;
    if (!*((unsigned char *)a1 + 281)) {
      uint64_t v28 = 380;
    }
    if (*((unsigned char *)a1 + v28))
    {
      memset(buf, 0, sizeof(buf));
      if (sub_10187F7DC((uint64_t)*a1, buf))
      {
        float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x402800A915379FA9uLL);
        float64x2_t v30 = vmulq_f64(*(float64x2_t *)&buf[1], v29);
        *(void *)&v29.f64[0] = a1[54];
        *(void *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(v29, *(float64x2_t *)&buf[1]);
        v31.f64[1] = v30.f64[1];
        float32x2_t v32 = vcvt_f32_f64(v31);
      }
      else
      {
        float32x2_t v32 = (float32x2_t)0xBF80000000000000;
      }
    }
    else
    {
      float64x2_t v33 = *((float64x2_t *)a1 + 130);
      float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x402800A915379FA9uLL);
      v35.f64[1] = v34.f64[1];
      v35.f64[0] = v26;
      float64x2_t v36 = vmulq_f64(v33, v34);
      *(void *)&v33.f64[0] = *(_OWORD *)&vsubq_f64(v35, v33);
      v33.f64[1] = v36.f64[1];
      float32x2_t v32 = vcvt_f32_f64(v33);
    }
    a1[169] = (unsigned char *)v32;
    double v37 = *((double *)a1 + 3);
    double v38 = *((double *)a1 + 1);
    float v39 = *((double *)a1 + 2) + *((double *)a1 + 4);
    *((float *)a1 + 347) = v39;
    float v40 = v37;
    *((float *)a1 + 348) = v40;
    double v42 = sub_1000A4F34(v162, v38, 0.0);
    if (v42 > 5.0)
    {
      if (v42 > 864000.0) {
        double v42 = 864000.0;
      }
      float v43 = v42 + *((float *)a1 + 348);
      *((float *)a1 + 348) = v43;
    }
    *(unsigned char **)((char *)a1 + 1396) = (unsigned char *)vcvt_f32_f64(*(float64x2_t *)(a2 + 44));
    *(_OWORD *)(a1 + 171) = *(_OWORD *)(a2 + 4);
    float v44 = *(double *)(a3 + 376) + *(float *)(a3 + 316);
    *((float *)a1 + 351) = v44;
    float v45 = *(double *)(a3 + 384);
    *((float *)a1 + 352) = v45;
    float v46 = *(double *)(a2 + 20);
    *((float *)a1 + 346) = v46;
    *((_DWORD *)a1 + 353) = *((_DWORD *)a1 + 329);
    *((_DWORD *)a1 + 354) = *((_DWORD *)a1 + 330);
    *((unsigned char *)a1 + 1432) = v160;
    *((unsigned char *)a1 + 1433) = HIBYTE(v161);
    *((unsigned char *)a1 + 1434) = v161;
    uint64_t v47 = sub_101917B2C(v41, (double *)&v157);
    *((_DWORD *)a1 + 356) = v47;
    *((_DWORD *)a1 + 357) = sub_101917D1C(v47, (double *)&v158);
    sub_101917F48((uint64_t)a1, (uint64_t)(a1 + 168), 0, 0);
    a1[168] = 0;
    a1[169] = 0;
    *(_OWORD *)(a1 + 171) = 0u;
    *(_OWORD *)(a1 + 173) = 0u;
    *(_OWORD *)((char *)a1 + 1396) = 0u;
    *(unsigned char **)((char *)a1 + 1420) = (unsigned char *)0xFFFFFFFF00000000;
    *((_DWORD *)a1 + 357) = -1;
    *((_WORD *)a1 + 716) = 0;
    *((unsigned char *)a1 + 1434) = 0;
  }
  if (!*a1)
  {
    BOOL v48 = 0;
    goto LABEL_86;
  }
  BOOL v48 = sub_100009F60(*a1, (uint64_t)(a1 + 197), (uint64_t)(a1 + 253), a1 + 419, (uint64_t)(a1 + 270), (double *)a1 + 59, (uint64_t *)a1 + 60, a2, a3, &v159, (double *)a1 + 61, (uint64_t *)a1 + 153, *((_DWORD *)a1 + 864));
  if (!*a1) {
    goto LABEL_86;
  }
  double v49 = *((double *)a1 + 418);
  double v50 = sub_1000A4CE8((uint64_t)*a1, &v162);
  double v51 = sub_1000A4F34(v49, v50, 315360000.0);
  uint64_t v52 = a1[430];
  double v53 = a1[424];
  if (v52 == v53)
  {
    uint64_t v54 = a1[426];
    unint64_t v55 = (unint64_t)a1[429];
    unint64_t v56 = v55 / 0x66;
    if (a1[427] == v54)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0;
    }
    else
    {
      uint64_t v57 = (double *)(*(void *)&v54[8 * (v55 / 0x66)] + 40 * (v55 % 0x66));
      unint64_t v58 = *(void *)&v54[8 * ((unint64_t)&v52[v55] / 0x66)] + 40 * ((unint64_t)&v52[v55] % 0x66);
    }
    long long v59 = a1[420];
    unint64_t v60 = (unint64_t)a1[423];
    uint64_t v61 = &v59[8 * (v60 / 0x66)];
    if (a1[421] == v59) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = (double *)(*v61 + 40 * (v60 % 0x66));
    }
    if (v57 == (double *)v58) {
      goto LABEL_86;
    }
    uint64_t v63 = &v54[8 * v56];
    while (vabdd_f64(*v57, *v62) < 2.22044605e-16)
    {
      v57 += 5;
      if ((double *)((char *)v57 - *v63) == (double *)4080)
      {
        uint64_t v64 = (double *)v63[1];
        ++v63;
        uint64_t v57 = v64;
      }
      v62 += 5;
      if ((double *)((char *)v62 - *v61) == (double *)4080)
      {
        double v65 = (double *)v61[1];
        ++v61;
        uint64_t v62 = v65;
      }
      if (v57 == (double *)v58) {
        goto LABEL_86;
      }
    }
  }
  if (v53 && v51 > *((double *)a1 + 431))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    os_log_type_t v66 = a1 + 425;
    uint64_t v156 = (uint64_t *)((char *)a1 + 3188);
    uint64_t v67 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      double v68 = v162;
      int v69 = a1[424];
      double v70 = sub_1000A4CE8((uint64_t)*a1, &v162);
      uint64_t v71 = *v156;
      long long v72 = *(unsigned char **)((char *)a1 + 3196);
      double v73 = *(double *)(a2 + 4);
      uint64_t v74 = *(void *)(a2 + 12);
      LODWORD(buf[0]) = 134350849;
      *(double *)((char *)buf + 4) = v68;
      uint64_t v3 = &qword_102419000;
      os_log_type_t v66 = a1 + 425;
      WORD2(buf[1]) = 1026;
      *(_DWORD *)((char *)&buf[1] + 6) = v69;
      WORD1(buf[2]) = 2050;
      *(double *)((char *)&buf[2] + 4) = v70;
      WORD2(buf[3]) = 2049;
      *(void *)((char *)&buf[3] + 6) = v71;
      HIWORD(buf[4]) = 2049;
      uint64_t v183 = v72;
      __int16 v184 = 2049;
      double v185 = v73;
      __int16 v186 = 2049;
      uint64_t v187 = v74;
      __int16 v188 = 2050;
      *(double *)uint64_t v189 = v51;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "BaroAlt,disk,save,time,%{public}lf,fBaroBiasHistory,size,%{public}d,locationCfAbsTime,%{public}lf,lastLocLat,%{private}.8lf,lastLocLon,%{private}.8lf,currLocLat,%{private}.8lf,currLocLon,%{private}.8lf,timeSinceLast,%{public}lf", (uint8_t *)buf, 0x4Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      double v144 = v162;
      uint64_t v145 = a1[424];
      double v146 = sub_1000A4CE8((uint64_t)*a1, &v162);
      uint64_t v147 = *v156;
      uint64_t v148 = *(unsigned char **)((char *)a1 + 3196);
      double v149 = *(double *)(a2 + 4);
      uint64_t v150 = *(void *)(a2 + 12);
      int v163 = 134350849;
      *(double *)uint64_t v164 = v144;
      *(_WORD *)&v164[8] = 1026;
      *(_DWORD *)uint64_t v165 = v145;
      *(_WORD *)&v165[4] = 2050;
      *(double *)&v165[6] = v146;
      *(_WORD *)&v165[14] = 2049;
      *(void *)&v165[16] = v147;
      __int16 v166 = 2049;
      uint64_t v167 = v148;
      __int16 v168 = 2049;
      double v169 = v149;
      __int16 v170 = 2049;
      uint64_t v171 = v150;
      __int16 v172 = 2050;
      *(double *)int v173 = v51;
      int v151 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v151);
      if (v151 != (char *)buf) {
        free(v151);
      }
      uint64_t v3 = &qword_102419000;
    }
    uint64_t v75 = sub_101918F20(a1, 0, v162);
    sub_1019191D8(v162, v75, a1 + 419);
    sub_101919A9C((uint64_t)a1);
    *((_OWORD *)a1 + 205) = *((_OWORD *)a1 + 155);
    *((_OWORD *)a1 + 206) = *((_OWORD *)a1 + 156);
    *((_OWORD *)a1 + 207) = *((_OWORD *)a1 + 157);
    *(_OWORD *)((char *)a1 + 3324) = *(_OWORD *)((char *)a1 + 2524);
    *((_OWORD *)a1 + 201) = *((_OWORD *)a1 + 151);
    *((_OWORD *)a1 + 202) = *((_OWORD *)a1 + 152);
    *((_OWORD *)a1 + 203) = *((_OWORD *)a1 + 153);
    *((_OWORD *)a1 + 204) = *((_OWORD *)a1 + 154);
    *((_OWORD *)a1 + 199) = *((_OWORD *)a1 + 149);
    *((_OWORD *)a1 + 200) = *((_OWORD *)a1 + 150);
    *((double *)a1 + 418) = sub_1000A4CE8((uint64_t)*a1, &v162);
    sub_101919C10(v66, a1 + 419);
  }
LABEL_86:
  if (v3[112] != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  long long v76 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v77 = *((unsigned __int8 *)a1 + 2156);
    long long v78 = a1[58];
    LODWORD(buf[0]) = 67240704;
    HIDWORD(buf[0]) = v160;
    LOWORD(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 2) = v77;
    HIWORD(buf[1]) = 2050;
    buf[2] = v78;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "BaroAlt,isApproToCal,%{public}d,fInEmergencyState,%{public}d,fLastBaroAltimeterSubscribeTime,%{public}.3f", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[112] != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v113 = *((unsigned __int8 *)a1 + 2156);
    uint64_t v114 = a1[58];
    int v163 = 67240704;
    *(_DWORD *)uint64_t v164 = v160;
    *(_WORD *)&v164[4] = 1026;
    *(_DWORD *)&v164[6] = v113;
    *(_WORD *)uint64_t v165 = 2050;
    *(void *)&v165[2] = v114;
    uint64_t v115 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v115);
    if (v115 != (char *)buf) {
      free(v115);
    }
  }
  if (v3[112] != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v79 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v80 = 236;
    if (!*((unsigned char *)a1 + 237)) {
      uint64_t v80 = 360;
    }
    int v81 = *((unsigned __int8 *)a1 + v80);
    uint64_t v82 = a1[187];
    int v83 = a1[55];
    uint64_t v84 = a1[56];
    uint64_t v85 = *(void *)(a3 + 384);
    BOOL v86 = (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1;
    uint64_t v87 = *(void *)(a2 + 28);
    uint64_t v88 = *(void *)(a2 + 36);
    uint64_t v89 = *(void *)(a2 + 52);
    uint64_t v90 = *(void *)(a2 + 44);
    uint64_t v91 = *(void *)(a3 + 592);
    uint64_t v92 = *(void *)(a3 + 24);
    uint64_t v93 = a1[54];
    LODWORD(buf[0]) = 134352897;
    *(double *)((char *)buf + 4) = v162;
    WORD2(buf[1]) = 2049;
    *(void *)((char *)&buf[1] + 6) = v82;
    HIWORD(buf[2]) = 2049;
    buf[3] = v93;
    LOWORD(buf[4]) = 1025;
    *(_DWORD *)((char *)&buf[4] + 2) = v81;
    HIWORD(buf[4]) = 2049;
    uint64_t v183 = v84;
    __int16 v184 = 2049;
    double v185 = v159;
    __int16 v186 = 2049;
    uint64_t v187 = v85;
    __int16 v188 = 1025;
    *(_DWORD *)uint64_t v189 = v86;
    *(_WORD *)&v189[4] = 2049;
    *(void *)&v189[6] = v87;
    *(_WORD *)&v189[14] = 2049;
    *(void *)&v189[16] = v88;
    *(_WORD *)&v189[24] = 1025;
    *(_DWORD *)&v189[26] = v160;
    *(_WORD *)uint64_t v190 = 2049;
    *(void *)&v190[2] = v89;
    *(_WORD *)uint64_t v191 = 2049;
    *(void *)&v191[2] = v90;
    __int16 v192 = 2050;
    uint64_t v193 = v91;
    __int16 v194 = 2049;
    uint64_t v195 = v92;
    __int16 v196 = 2049;
    uint64_t v197 = v83;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "BaroAlt,baroKFinput,time,%{public}lf,refPressure,%{private}.3lf,measPressure,%{private}.3lf,isRefPresAvail,%{private}d,fTimeOfLastDevicePressure_s,%{private}.3lf,calibrationSourceAlt,%{private}.3lf,calibrationSourceAltUnc,%{private}.3lf,isLocationTypeGPS,%{private}d,alt,%{private}.3lf,altUnc,%{private}.3lf,isApproToCalib,%{private}d,speedAccuracy,%{private}.3lf,speed,%{private}.3lf,pOutdoor,%{public}.3lf,cfAbsTime,%{private}.3lf,temperature,%{private}.2lf", (uint8_t *)buf, 0x96u);
  }
  if (!sub_10013D1A0(115, 2))
  {
    if (!v48) {
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  bzero(buf, 0x65CuLL);
  if (v3[112] != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v116 = 236;
  if (!*((unsigned char *)a1 + 237)) {
    uint64_t v116 = 360;
  }
  int v117 = *((unsigned __int8 *)a1 + v116);
  int v118 = a1[187];
  long long v119 = a1[55];
  long long v120 = a1[56];
  uint64_t v121 = *(void *)(a3 + 384);
  BOOL v122 = (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1;
  uint64_t v123 = *(void *)(a2 + 28);
  uint64_t v124 = *(void *)(a2 + 36);
  uint64_t v125 = *(void *)(a2 + 52);
  uint64_t v126 = *(void *)(a2 + 44);
  uint64_t v127 = *(void *)(a3 + 592);
  uint64_t v128 = *(void *)(a3 + 24);
  uint64_t v129 = a1[54];
  int v163 = 134352897;
  *(double *)uint64_t v164 = v162;
  *(_WORD *)&v164[8] = 2049;
  *(void *)uint64_t v165 = v118;
  *(_WORD *)&v165[8] = 2049;
  *(void *)&v165[10] = v129;
  *(_WORD *)&v165[18] = 1025;
  *(_DWORD *)&v165[20] = v117;
  __int16 v166 = 2049;
  uint64_t v167 = v120;
  __int16 v168 = 2049;
  double v169 = v159;
  __int16 v170 = 2049;
  uint64_t v171 = v121;
  __int16 v172 = 1025;
  *(_DWORD *)int v173 = v122;
  *(_WORD *)&v173[4] = 2049;
  *(void *)&v173[6] = v123;
  *(_WORD *)&v173[14] = 2049;
  *(void *)&v173[16] = v124;
  *(_WORD *)&v173[24] = 1025;
  *(_DWORD *)&v173[26] = v160;
  *(_WORD *)int v174 = 2049;
  *(void *)&v174[2] = v125;
  *(_WORD *)uint64_t v175 = 2049;
  *(void *)&v175[2] = v126;
  __int16 v176 = 2050;
  uint64_t v177 = v127;
  __int16 v178 = 2049;
  uint64_t v179 = v128;
  __int16 v180 = 2049;
  uint64_t v181 = v119;
  unsigned int v130 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v130);
  if (v130 != (char *)buf) {
    free(v130);
  }
  if (v48)
  {
LABEL_99:
    float64x2_t v94 = *(float64x2_t *)(a2 + 44);
    *__int16 v25 = *(_OWORD *)(a2 + 4);
    v95.f64[0] = v159;
    v95.f64[1] = *(float64_t *)(a3 + 384);
    *(float32x4_t *)((char *)a1 + 1300) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v94), v95);
    *(float *)v94.f64 = *(double *)(a2 + 20);
    *((_DWORD *)a1 + 322) = LODWORD(v94.f64[0]);
    a1[166] = 0;
    sub_101917F48((uint64_t)a1, (uint64_t)(a1 + 156), 1, 1);
    *((_OWORD *)a1 + 78) = 0u;
    *__int16 v25 = 0u;
    *(_OWORD *)(a1 + 161) = 0u;
    *(_OWORD *)((char *)a1 + 1300) = 0u;
    *(unsigned char **)((char *)a1 + 1324) = (unsigned char *)0xFFFFFFFF00000000;
    *((_DWORD *)a1 + 333) = -1;
    *((_WORD *)a1 + 668) = 0;
    *((unsigned char *)a1 + 1338) = 0;
  }
LABEL_100:
  uint64_t v96 = 236;
  if (!*((unsigned char *)a1 + 237)) {
    uint64_t v96 = 360;
  }
  if (*((unsigned char *)a1 + v96)
    && *((double *)a1 + 60) > 0.0
    && vabdd_f64(*((double *)a1 + 61), v162) <= 2.22044605e-16
    && *a1
    && fabs(sub_1000A4F34(v162, *((double *)a1 + 194), 315360000.0)) >= 120.0)
  {
    if (v3[112] != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v97 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "BaroAlt,query ref pressure for cal", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[112] != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v163) = 0;
      uint64_t v155 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v155);
      if (v155 != (char *)buf) {
        free(v155);
      }
    }
    sub_101919CC8((uint64_t)a1, a2);
  }
  if (*((double *)a1 + 60) > 0.0 && vabdd_f64(*((double *)a1 + 61), v162) <= 2.22044605e-16)
  {
    sub_10191A740((uint64_t)a1, a2, v162, v159);
    sub_10191A974((uint64_t)a1);
  }
  if (*a1)
  {
    uint64_t v98 = 268;
    if (!*((unsigned char *)a1 + 269)) {
      uint64_t v98 = 372;
    }
    if (sub_1001563CC((uint64_t)*a1, (uint64_t)(a1 + 197), (double *)a1 + 253, (uint64_t)(a1 + 1), (float32x2_t *)a1 + 156, (uint64_t)(a1 + 439), (uint64_t)(a1 + 443), (uint64_t)(a1 + 447), (double *)a1 + 59, (double *)a1 + 60, (double *)a1 + 61, (uint64_t)(a1 + 153), (uint64_t)(a1 + 298), *((unsigned char *)a1 + v98), 1u))
    {
      if (v48)
      {
        long long v99 = *(_OWORD *)(a1 + 255);
        *(_OWORD *)(a1 + 259) = *(_OWORD *)(a1 + 253);
        *(_OWORD *)(a1 + 261) = v99;
        *(_OWORD *)(a1 + 263) = *(_OWORD *)(a1 + 257);
      }
      return 1;
    }
  }
  if (v3[112] != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v100 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v101 = *((unsigned __int8 *)a1 + 520);
    uint64_t v102 = *(void *)(a3 + 376);
    uint64_t v103 = *(void *)(a3 + 384);
    uint64_t v104 = *(unsigned char **)(a2 + 28);
    double v105 = *(double *)(a2 + 36);
    uint64_t v106 = *(void *)(a2 + 20);
    uint64_t v107 = a1[59];
    int v108 = a1[60];
    uint64_t v109 = a1[61];
    int v110 = a1[155];
    uint64_t v111 = a1[153];
    LODWORD(buf[0]) = 134351873;
    *(double *)((char *)buf + 4) = v162;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = v101;
    WORD1(buf[2]) = 2049;
    *(void *)((char *)&buf[2] + 4) = v102;
    WORD2(buf[3]) = 2050;
    *(void *)((char *)&buf[3] + 6) = v103;
    HIWORD(buf[4]) = 2049;
    uint64_t v183 = v104;
    __int16 v184 = 2050;
    double v185 = v105;
    __int16 v186 = 2050;
    uint64_t v187 = v106;
    __int16 v188 = 2049;
    *(void *)uint64_t v189 = v107;
    *(_WORD *)&v189[8] = 2050;
    *(void *)&v189[10] = v108;
    *(_WORD *)&v189[18] = 2050;
    *(void *)&v189[20] = v109;
    *(_WORD *)&v189[28] = 2049;
    *(void *)uint64_t v190 = v110;
    *(_WORD *)&v190[8] = 2050;
    *(void *)uint64_t v191 = v111;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "BaroAlt,no action,time,%{public}lf,subscribedToOdom,%{public}d,demAlt,%{private}lf,unc,%{public}lf,alt,%{private}lf,altUnc,%{public}lf,horUnc,%{public}lf,baseAlt,%{private}lf,unc,%{public}lf,fTimeOfLastBaseAltitudeCalibration,%{public}lf,relAlt,%{private}lf,fTimeOfLastOdometerData,%{public}.4lf", (uint8_t *)buf, 0x76u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (v3[112] != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v131 = *((unsigned __int8 *)a1 + 520);
    uint64_t v132 = *(void *)(a3 + 376);
    uint64_t v133 = *(void *)(a3 + 384);
    __int16 v134 = *(unsigned char **)(a2 + 28);
    double v135 = *(double *)(a2 + 36);
    uint64_t v136 = *(void *)(a2 + 20);
    int v137 = a1[59];
    uint64_t v138 = a1[60];
    uint64_t v139 = a1[61];
    uint64_t v140 = a1[155];
    int v141 = a1[153];
    int v163 = 134351873;
    *(double *)uint64_t v164 = v162;
    *(_WORD *)&v164[8] = 1026;
    *(_DWORD *)uint64_t v165 = v131;
    *(_WORD *)&v165[4] = 2049;
    *(void *)&v165[6] = v132;
    *(_WORD *)&v165[14] = 2050;
    *(void *)&v165[16] = v133;
    __int16 v166 = 2049;
    uint64_t v167 = v134;
    __int16 v168 = 2050;
    double v169 = v135;
    __int16 v170 = 2050;
    uint64_t v171 = v136;
    __int16 v172 = 2049;
    *(void *)int v173 = v137;
    *(_WORD *)&v173[8] = 2050;
    *(void *)&v173[10] = v138;
    *(_WORD *)&v173[18] = 2050;
    *(void *)&v173[20] = v139;
    *(_WORD *)&v173[28] = 2049;
    *(void *)int v174 = v140;
    *(_WORD *)&v174[8] = 2050;
    *(void *)uint64_t v175 = v141;
    goto LABEL_148;
  }
  return result;
}

BOOL sub_100033874(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 936);
  if (v3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned int v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((char *)a2 + 23) >= 0 ? (uint64_t)a2 : *a2;
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 936));
      uint64_t v7 = v30 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v22 = 2082;
      __int16 v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'", buf, 0x16u);
      if (v30 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      if (*((char *)a2 + 23) >= 0) {
        long long v12 = a2;
      }
      else {
        long long v12 = (uint64_t *)*a2;
      }
      CLConnection::getName((uint64_t *)buf, *(CLConnection **)(a1 + 936));
      if (v24 >= 0) {
        long long v13 = buf;
      }
      else {
        long long v13 = *(unsigned char **)buf;
      }
      int v25 = 136446466;
      double v26 = v12;
      __int16 v27 = 2082;
      uint64_t v28 = v13;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::wakeupLaunchdManagedClient(const std::string &)", "%s\n", v14);
      if (v14 != __p) {
        free(v14);
      }
    }
    CFStringRef v19 = @"kCLConnectionMessageClientNameKey";
    if (*((char *)a2 + 23) >= 0) {
      double v8 = a2;
    }
    else {
      double v8 = (uint64_t *)*a2;
    }
    uint64_t v20 = +[NSString stringWithUTF8String:v8];
    *(void *)long long __p = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    sub_10017F050("kCLConnectionMessageWakeClient", &v17);
    CLConnection::sendMessage();
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    long long v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v10 = a2;
      }
      else {
        long long v10 = (uint64_t *)*a2;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Can't find /usr/libexec/UserEventAgent connection for waking Client: <%s>", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      if (*((char *)a2 + 23) >= 0) {
        long long v15 = a2;
      }
      else {
        long long v15 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::wakeupLaunchdManagedClient(const std::string &)", "%s\n", v16);
      if (v16 != __p) {
        free(v16);
      }
    }
  }
  return v3 != 0;
}

void sub_100033CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100033CE0(uint64_t a1, double a2)
{
  char v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 464) + 32))(*(void *)(a1 + 464));
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 464) + 48))(*(void *)(a1 + 464)) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, location services disabled - no tile downloads", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_214;
    }
    goto LABEL_264;
  }
  if (!*(unsigned char *)(a1 + 201))
  {
    uint64_t v2 = &qword_102419000;
    if (qword_102419380 != -1) {
LABEL_230:
    }
      dispatch_once(&qword_102419380, &stru_10230D000);
    long long v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[112] != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      int v12 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)uint64_t v104 = 67109120;
      *(_DWORD *)&v104[4] = v12;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v13);
      goto LABEL_257;
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 200) || !*(unsigned char *)(a1 + 440))
  {
    int v8 = *(_DWORD *)(a1 + 424);
    if (v8 <= 1)
    {
      BOOL v97 = *(unsigned char *)(a1 + 496) != 0;
      if (v8 == 1)
      {
        if ((v5 & 1) == 0)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          uint64_t v80 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, no download on none broadband cellular connections", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419380 == -1) {
            goto LABEL_214;
          }
          goto LABEL_264;
        }
        BOOL v9 = 1;
      }
      else
      {
        if (!v8)
        {
          BOOL v95 = *(unsigned char *)(a1 + 496) != 0;
          if (!*(unsigned char *)(a1 + 496))
          {
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            long long v14 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "TILE: checkDownloadSchedule, no data connectivity, avoiding downloads", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_10230CFE0);
              }
              goto LABEL_214;
            }
            return;
          }
          goto LABEL_42;
        }
        BOOL v9 = *(unsigned char *)(a1 + 496) != 0;
      }
    }
    else
    {
      BOOL v9 = 1;
      BOOL v97 = 1;
    }
    BOOL v95 = v9;
LABEL_42:
    unsigned int v96 = sub_1001B4FD0(a1);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    long long v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v96;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v95;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v97;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      *(_DWORD *)uint64_t v104 = 67109632;
      *(_DWORD *)&v104[4] = v96;
      *(_WORD *)&v104[8] = 1024;
      *(_DWORD *)&v104[10] = v95;
      *(_WORD *)&v104[14] = 1024;
      *(_DWORD *)&v104[16] = v97;
      uint64_t v87 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v87);
      if (v87 != buf) {
        free(v87);
      }
    }
    if (v96 >= 2)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v16 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v96;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        *(_DWORD *)uint64_t v104 = 67109120;
        *(_DWORD *)&v104[4] = v96;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v13);
        goto LABEL_257;
      }
      return;
    }
    if (*(unsigned char *)(a1 + 176) && *(unsigned char *)(a1 + 144))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, both download requests are already in use", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_214;
      }
      goto LABEL_264;
    }
    if (*(void *)(a1 + 160) || *(void *)(a1 + 192))
    {
      uint64_t v18 = (_OWORD *)(a1 + 248);
      double v19 = *(double *)(a1 + 268);
      int v20 = *(unsigned __int8 *)(a1 + 200);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v21 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v19 > 0.0;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        *(_DWORD *)uint64_t v104 = 67109376;
        *(_DWORD *)&v104[4] = v19 > 0.0;
        *(_WORD *)&v104[8] = 1024;
        *(_DWORD *)&v104[10] = v20;
        uint64_t v88 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v88);
        if (v88 != buf) {
          free(v88);
        }
        uint64_t v18 = (_OWORD *)(a1 + 248);
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      __int16 v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_1000AB340((uint64_t)v18);
        __int16 v23 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)uint64_t v104 = 136380675;
        *(void *)&v104[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, lastLocation, %{private}s", v104, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        sub_1000AB340(a1 + 248);
        if (v104[23] >= 0) {
          uint64_t v89 = v104;
        }
        else {
          uint64_t v89 = *(unsigned char **)v104;
        }
        *(_DWORD *)long long __p = 136380675;
        *(void *)&__p[4] = v89;
        uint64_t v90 = (char *)_os_log_send_and_compose_impl();
        if ((v104[23] & 0x80000000) != 0) {
          operator delete(*(void **)v104);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v90);
        if (v90 != buf) {
          free(v90);
        }
        uint64_t v18 = (_OWORD *)(a1 + 248);
      }
      char v24 = *(void **)(a1 + 112);
      if (v24 == (void *)(a1 + 120))
      {
LABEL_216:
        uint64_t v82 = *(void *)(a1 + 128);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        int v83 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v84 = *(unsigned __int8 *)(a1 + 144);
          int v85 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)uint64_t buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v96;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(void *)&buf[10] = v82;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v84;
          *(_WORD *)&uint8_t buf[24] = 1024;
          *(_DWORD *)&buf[26] = v85;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d", buf, 0x1Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          int v91 = *(unsigned __int8 *)(a1 + 144);
          int v92 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)uint64_t v104 = 67109888;
          *(_DWORD *)&v104[4] = v96;
          *(_WORD *)&v104[8] = 2048;
          *(void *)&v104[10] = v82;
          *(_WORD *)&v104[18] = 1024;
          *(_DWORD *)&v104[20] = v91;
          *(_WORD *)&v104[24] = 1024;
          *(_DWORD *)&v104[26] = v92;
          uint64_t v93 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v93);
          if (v93 != buf) {
            free(v93);
          }
        }
        if (!*(unsigned char *)(a1 + 144) && !*(unsigned char *)(a1 + 176))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          BOOL v86 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, NoActiveDownloads", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            *(_WORD *)uint64_t v104 = 0;
            long long v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v13);
            goto LABEL_257;
          }
        }
        return;
      }
      while (1)
      {
        if (*(unsigned char *)(a1 + 144) && *(unsigned char *)(a1 + 176)) {
          goto LABEL_216;
        }
        uint64_t v25 = v24[10];
        double v26 = (unsigned int *)(v25 + 48);
        uint64_t v27 = sub_10015EB2C(a1, *(_DWORD *)(v25 + 48));
        if ((*(_DWORD *)(v25 + 48) & 0xFFFFFFF7) - 1 >= 2)
        {
          sub_101A9E1B0(v27);
          __break(1u);
          goto LABEL_230;
        }
        uint64_t v28 = v27;
        if (!sub_100065380(v25, v97, *(float *)(v27 + 128), a2))
        {
          if (!sub_10014548C(v25)) {
            goto LABEL_164;
          }
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          double v37 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            BOOL v38 = sub_10014548C(v25);
            *(_DWORD *)uint64_t buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_164;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          BOOL v39 = sub_10014548C(v25);
          *(_DWORD *)uint64_t v104 = 67109120;
          *(_DWORD *)&v104[4] = v39;
          float v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v40);
LABEL_103:
          if (v40 != buf) {
            free(v40);
          }
          uint64_t v18 = (_OWORD *)(a1 + 248);
          goto LABEL_164;
        }
        unsigned __int8 v103 = 0;
        double v29 = *(double *)(v28 + 136);
        long long v30 = v18[7];
        v101[6] = v18[6];
        v101[7] = v30;
        *(_OWORD *)uint64_t v102 = v18[8];
        *(_OWORD *)&v102[12] = *(_OWORD *)((char *)v18 + 140);
        long long v31 = v18[3];
        v101[2] = v18[2];
        v101[3] = v31;
        long long v32 = v18[5];
        v101[4] = v18[4];
        v101[5] = v32;
        long long v33 = v18[1];
        v101[0] = *v18;
        v101[1] = v33;
        unsigned __int8 v103 = sub_10125BB04(v25, (uint64_t)v101, v29, a2);
        if (!sub_100065F70(v25)) {
          break;
        }
LABEL_164:
        uint64_t v64 = (void *)v24[1];
        if (v64)
        {
          do
          {
            double v65 = v64;
            uint64_t v64 = (void *)*v64;
          }
          while (v64);
        }
        else
        {
          do
          {
            double v65 = (void *)v24[2];
            BOOL v36 = *v65 == (void)v24;
            char v24 = v65;
          }
          while (!v36);
        }
        char v24 = v65;
        if (v65 == (void *)(a1 + 120)) {
          goto LABEL_216;
        }
      }
      if (v96 >= 2)
      {
        unsigned int v96 = 2;
        goto LABEL_216;
      }
      unsigned __int8 v100 = 0;
      if (v103)
      {
        char v34 = !v95;
        if (*(unsigned char *)(v25 + 112)) {
          char v35 = !v95;
        }
        else {
          char v35 = 1;
        }
        if ((v35 & 1) == 0) {
          goto LABEL_111;
        }
        BOOL v36 = *(unsigned char *)(v28 + 177) == 0;
      }
      else
      {
        BOOL v36 = *(unsigned char *)(v25 + 113) == 0;
        char v34 = !v95;
      }
      if (v36) {
        char v34 = 1;
      }
      int v94 = v97;
      if (v34)
      {
LABEL_112:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        uint64_t v41 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v42 = v103;
          uint64_t v2 = (uint64_t *)v100;
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v25 + 16))(v104, v25);
          int v43 = v104[23];
          float v44 = *(unsigned char **)v104;
          sub_1010496AC();
          float v45 = v104;
          if (v43 < 0) {
            float v45 = v44;
          }
          float v46 = __p;
          if (v107 < 0) {
            float v46 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 67110402;
          *(_DWORD *)&uint8_t buf[4] = 1;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v94;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v42;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&unsigned char buf[22] = v2;
          *(_WORD *)&buf[26] = 2080;
          *(void *)&unsigned char buf[28] = v45;
          *(_WORD *)&buf[36] = 2080;
          *(void *)uint64_t v109 = v46;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s", buf, 0x2Eu);
          if (v107 < 0) {
            operator delete(*(void **)__p);
          }
          uint64_t v18 = (_OWORD *)(a1 + 248);
          if ((v104[23] & 0x80000000) != 0) {
            operator delete(*(void **)v104);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          int v66 = v103;
          uint64_t v2 = (uint64_t *)v100;
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v25 + 16))(__p, v25);
          int v67 = v107;
          double v68 = *(unsigned char **)__p;
          sub_1010496AC();
          int v69 = __p;
          if (v67 < 0) {
            int v69 = v68;
          }
          double v70 = &v98;
          if (v99 < 0) {
            double v70 = v98;
          }
          *(_DWORD *)uint64_t v104 = 67110402;
          *(_DWORD *)&v104[4] = 1;
          *(_WORD *)&v104[8] = 1024;
          *(_DWORD *)&v104[10] = v94;
          *(_WORD *)&v104[14] = 1024;
          *(_DWORD *)&v104[16] = v66;
          *(_WORD *)&v104[20] = 1024;
          *(_DWORD *)&v104[22] = v2;
          *(_WORD *)&v104[26] = 2080;
          *(void *)&v104[28] = v69;
          *(_WORD *)&v104[36] = 2080;
          *(void *)double v105 = v70;
          uint64_t v71 = (char *)_os_log_send_and_compose_impl();
          if (v99 < 0) {
            operator delete(v98);
          }
          if (v107 < 0) {
            operator delete(*(void **)__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v71);
          if (v71 != buf) {
            free(v71);
          }
          uint64_t v18 = (_OWORD *)(a1 + 248);
        }
        if (!v94) {
          goto LABEL_164;
        }
        if (v100)
        {
          uint64_t v47 = a1 + 136;
          if (!*(unsigned char *)(a1 + 144)) {
            goto LABEL_129;
          }
        }
        else
        {
          uint64_t v47 = a1 + 168;
          if (!*(unsigned char *)(a1 + 176))
          {
LABEL_129:
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            BOOL v48 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v49 = *(void *)v47;
              *(_DWORD *)uint64_t buf = 136315138;
              *(void *)&uint8_t buf[4] = v49;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, chose, downloadState, %s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              uint64_t v72 = *(void *)v47;
              *(_DWORD *)uint64_t v104 = 136315138;
              *(void *)&v104[4] = v72;
              double v73 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v73);
              if (v73 != buf) {
                free(v73);
              }
              uint64_t v18 = (_OWORD *)(a1 + 248);
            }
            uint64_t v50 = *(void *)(v47 + 24);
            *(unsigned char *)(v50 + 80) = v100;
            *(unsigned char *)(v50 + 81) = 1;
            if (*(char *)(v28 + 79) >= 0) {
              uint64_t v51 = v28 + 56;
            }
            else {
              uint64_t v51 = *(void *)(v28 + 56);
            }
            uint64_t v52 = +[NSString stringWithUTF8String:v51];
            if (!*(unsigned char *)(v28 + 80))
            {
              id v53 = +[GEOCountryConfiguration sharedConfiguration];
              if (*(char *)(v28 + 111) >= 0) {
                uint64_t v54 = v28 + 88;
              }
              else {
                uint64_t v54 = *(void *)(v28 + 88);
              }
              uint64_t v52 = (NSString *)[v53 defaultForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v54) defaultValue:v52];
            }
            sub_100134750(buf, (char *)[(NSString *)v52 UTF8String]);
            int v55 = sub_101045C74(v25, (uint64_t)buf, *(void *)(v47 + 24));
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (!v55) {
              goto LABEL_164;
            }
            *(unsigned char *)(v47 + 8) = 1;
            *(double *)(v47 + 16) = a2;
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            ++v96;
            unint64_t v56 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v25 + 16))(buf, v25);
              uint64_t v57 = buf;
              if (buf[23] < 0) {
                uint64_t v57 = *(unsigned char **)buf;
              }
              *(_DWORD *)uint64_t v104 = 67109378;
              *(_DWORD *)&v104[4] = v96;
              *(_WORD *)&v104[8] = 2080;
              *(void *)&v104[10] = v57;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s", v104, 0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v25 + 16))(v104, v25);
              uint64_t v74 = v104;
              if (v104[23] < 0) {
                uint64_t v74 = *(unsigned char **)v104;
              }
              *(_DWORD *)long long __p = 67109378;
              *(_DWORD *)&__p[4] = v96;
              *(_WORD *)&__p[8] = 2080;
              *(void *)&__p[10] = v74;
              uint64_t v75 = (char *)_os_log_send_and_compose_impl();
              if ((v104[23] & 0x80000000) != 0) {
                operator delete(*(void **)v104);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v75);
              if (v75 != buf) {
                free(v75);
              }
              uint64_t v18 = (_OWORD *)(a1 + 248);
            }
            sub_1010600C8((_DWORD *)(v28 + 232), 1);
            sub_100134750(buf, "startDownloading");
            sub_100D3B360(v28 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 424));
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (sub_1000FC450())
            {
              sub_1000E9354(buf);
              unint64_t v58 = (char *)(v25 + 8);
              if (*(char *)(v25 + 31) < 0) {
                unint64_t v58 = *(char **)v58;
              }
              sub_1004D34AC((uint64_t)buf, "getTile", v58);
              sub_1000EA238((uint64_t)buf, "protection", (unsigned char *)(a1 + 200));
              sub_1000EA238((uint64_t)buf, "isCurrentTile", &v103);
              sub_1000EA238((uint64_t)buf, "isAllowCellular", &v100);
              sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
              sub_10013F3C4(buf);
            }
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            long long v59 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v60 = sub_100147F50(*v26);
              double v61 = sub_10013DAC0((uint64_t)v26);
              double v62 = sub_10013DA9C((uint64_t)v26);
              uint64_t v2 = (uint64_t *)*(unsigned int *)(a1 + 424);
              uint64_t v63 = [(NSString *)v52 UTF8String];
              *(_DWORD *)uint64_t buf = 136447235;
              *(void *)&uint8_t buf[4] = v60;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(double *)&buf[14] = v61;
              *(_WORD *)&unsigned char buf[22] = 2049;
              *(double *)&uint8_t buf[24] = v62;
              *(_WORD *)&unsigned char buf[32] = 1026;
              *(_DWORD *)&buf[34] = v2;
              *(_WORD *)uint64_t v109 = 2081;
              *(void *)&v109[2] = v63;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s", buf, 0x30u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_164;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            long long v76 = sub_100147F50(*v26);
            double v77 = sub_10013DAC0((uint64_t)v26);
            double v78 = sub_10013DA9C((uint64_t)v26);
            uint64_t v2 = (uint64_t *)*(unsigned int *)(a1 + 424);
            int v79 = [(NSString *)v52 UTF8String];
            *(_DWORD *)uint64_t v104 = 136447235;
            *(void *)&v104[4] = v76;
            *(_WORD *)&v104[12] = 2049;
            *(double *)&v104[14] = v77;
            *(_WORD *)&v104[22] = 2049;
            *(double *)&v104[24] = v78;
            *(_WORD *)&v104[32] = 1026;
            *(_DWORD *)&v104[34] = v2;
            *(_WORD *)double v105 = 2081;
            *(void *)&v105[2] = v79;
            float v40 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v40);
            goto LABEL_103;
          }
        }
        goto LABEL_164;
      }
LABEL_111:
      int v94 = 1;
      unsigned __int8 v100 = 1;
      goto LABEL_112;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v81 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "TILE: checkDownloadSchedule, both download requests null, shutdown?", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_214:
      *(_WORD *)uint64_t v104 = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v13);
LABEL_257:
      if (v13 != buf) {
        free(v13);
      }
      return;
    }
LABEL_264:
    dispatch_once(&qword_102419380, &stru_10230D000);
    goto LABEL_214;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, no tiles while locked", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_214;
    }
    goto LABEL_264;
  }
}

void sub_100035CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_1000360F8(uint64_t a1)
{
  v2[1] = @"outcome";
  v3[0] = @"na";
  v2[0] = @"trigger";
  v3[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

void sub_100036190(void *a1, void **a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (void **)"null";
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F9C68);
  }
  unint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CellFlow, clearcells, %{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    LODWORD(v11[0]) = 136446210;
    *(void ***)((char *)v11 + 4) = v3;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::clearCurrentCells(const char *)", "%s\n", v10);
    if (v10 != (char *)&buf) {
      free(v10);
    }
  }
  *((_DWORD *)a1 + 636) = 0;
  uint64_t v5 = a1[310];
  uint64_t v6 = a1[309];
  while (v5 != v6)
  {
    v5 -= 696;
    sub_1000FA860((uint64_t)(a1 + 311), v5);
  }
  a1[310] = v6;
  uint64_t v7 = a1 + 312;
  do
  {
    long long buf = 0uLL;
    v13[0] = 0;
    sub_1000F71D8(&buf, *v7, v7[1], 0x66FD0EB66FD0EB67 * ((v7[1] - *v7) >> 3));
    uint64_t v8 = *((void *)&buf + 1);
    uint64_t v9 = buf;
    while (v8 != v9)
    {
      v8 -= 696;
      sub_1000FA860((uint64_t)v13, v8);
    }
    *((void *)&buf + 1) = v9;
    v11[0] = (void **)&buf;
    sub_1000FA7C8(v11);
    v7 += 3;
  }
  while (v7 != a1 + 318);
}

void sub_100036408(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  v20[0] = 0;
  v20[1] = "regular";
  v20[2] = 1;
  v20[3] = "fine";
  unint64_t v4 = (uint64_t **)(a1 + 1040);
  v20[4] = 2;
  v20[5] = "coarse";
  __asm { FMOV            V0.2D, #-1.0 }
  do
  {
    uint64_t v10 = v20[v2 + 1];
    v15[0] = v20[v2];
    *(_DWORD *)long long buf = v15[0];
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      if ((v3 & 1) == 0)
      {
        int v14 = sub_1001266F8(a1, v15[0]);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C6438);
        }
        int v11 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Now registered for %s location notifications, operating mode %d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C6438);
          }
          v15[1] = 136315394;
          uint64_t v16 = v10;
          __int16 v17 = 1024;
          int v18 = v14;
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::onLocationTimer()", "%s\n", v12);
          if (v12 != buf) {
            free(v12);
          }
        }
        *(void *)long long buf = v15;
        if (*((unsigned char *)sub_1000EB1B8(v4, v15, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32)) {
          sub_10012F728();
        }
        sub_10012F770();
      }
      char v3 = 1;
    }
    else
    {
      [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:v15[0]];
      *(void *)long long buf = v15;
      *((unsigned char *)sub_1000EB1B8(v4, v15, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
    }
    v2 += 2;
  }
  while (v2 != 6);
  if ((v3 & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    long long v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"no more location clients - not re-registering\"}", buf, 0x12u);
    }
  }
}

void sub_1000367CC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = [a2 isAuthorizedForServiceTypeMask:16];
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C26A8);
  }
  unint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 1026;
    unsigned int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Received Motion Calibration & Distance\", \"permission\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  sub_100036A58(v2 + 6624, v3);
  int v5 = v3 && *(_DWORD *)(v2 + 8924) != 2 && *(unsigned char *)(v2 + 10192) == 0;
  sub_100036A50(v2 + 6624, v5);
}

void sub_100036910(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 32) != a2)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    unint64_t v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 32);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 1026;
      int v10 = v5;
      __int16 v11 = 1026;
      int v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Background escalation manager permission changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", (uint8_t *)v6, 0x1Eu);
    }
  }
  *(unsigned char *)(a1 + 32) = a2;
  sub_100103240();
  if (sub_100036A60() && sub_1000A68BC(*(void *)(a1 + 104)) > 0.0)
  {
    if (*(unsigned char *)(a1 + 32)) {
      sub_100180260(a1 + 184, 1);
    }
  }
}

void sub_100036A50(uint64_t a1, int a2)
{
}

uint64_t sub_100036A58(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1336) = a2;
  return result;
}

BOOL sub_100036A60()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL result = 1;
  if ((dword_10247D340 - 89) > 0x2C
    || ((1 << (dword_10247D340 - 89)) & 0x1FFFFFFC3FCFLL) == 0)
  {
    return dword_10247D340 == 260;
  }
  return result;
}

double sub_100036BC0(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) - *(double *)(a1 + 440);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unsigned int v3 = *(void **)(a1 + 432);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    __int16 v7 = (uint64_t **)(a1 + 408);
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        [v9 triggerTimestamp];
        double v11 = v10;
        unsigned int v14 = [v9 triggerType];
        double v19 = &v14;
        int v12 = sub_1000C5658(v7, (int *)&v14, (uint64_t)&unk_101D0B290, &v19);
        if (v2 >= v11 - *((double *)v12 + 5)) {
          double v2 = v11 - *((double *)v12 + 5);
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v5);
  }
  return v2;
}

void sub_100036D44(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVO2MaxRetrocomputeStatusQuery", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  __int16 v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)long long buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    unsigned int v14 = "";
    __int16 v15 = 2082;
    long long v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVO2MaxRetrocomputeStatusQuery\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000206B8(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100036EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

void sub_100036F24(uint64_t a1, CLConnection *a2)
{
  uint64_t v6 = *(void **)(a1 + 824);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v5 = a2;
  uint64_t v2 = a1;
  uint64_t v3 = (uint64_t **)(a1 + 816);
  id v4 = (uint64_t *)(a1 + 824);
  do
  {
    unint64_t v7 = v6[4];
    BOOL v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2) {
      __int16 v9 = v6;
    }
    else {
      __int16 v9 = v6 + 1;
    }
    if (v8) {
      id v4 = v6;
    }
    uint64_t v6 = (void *)*v9;
  }
  while (*v9);
  if (v4 == (uint64_t *)(a1 + 824) || v4[4] > (unint64_t)a2)
  {
LABEL_12:
    sub_101A6D8E0();
    __break(1u);
  }
  uint64_t v10 = v4[5];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)__int16 v19 = sub_100138248(v10, 0);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Client %{public}@ disconnected", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    sub_100138248(v10, 0);
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::handleDaemonClientDisconnection(CLConnection *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (sub_1000B2378(v10))
  {
    id v12 = sub_100138248(v10, 0);
    uint64_t UniqueRemotePid = CLConnection::getUniqueRemotePid(v5);
    sub_10004892C(v2, (uint64_t)v12, UniqueRemotePid, 0);
  }
  if (sub_1000B2378(v10))
  {
    id v14 = sub_100138248(v10, 0);
    if (([v14 isValidCKP] & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)__int16 v19 = 0;
        *(_WORD *)&v19[4] = 2082;
        *(void *)&v19[6] = "";
        __int16 v20 = 2050;
        uint64_t v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Disconnecting client has successful registration, but no valid CKP\", \"CLDC\":\"%{public}p\"}", buf, 0x1Cu);
      }
    }
    sub_100148BB0(v2, (uint64_t)v14, v10);
    sub_100148C40(v2, v10, 0);
  }
  uint64_t v16 = v4[5];
  sub_1000F0A30(v3, v4);
  operator delete(v4);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (!*(void *)(v2 + 832)) {
    [*(id *)(*(void *)(v2 + 160) + 16) unregister:*(void *)(*(void *)(v2 + 160) + 8) forNotification:19];
  }
}

double sub_1000372B8@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  sub_1000A84C8(a1);
  if (*(char *)(a1 + 151) < 0)
  {
    if (*(void *)(a1 + 136))
    {
LABEL_3:
      sub_1000A84C8(a1);
      sub_100111050((const void **)(a1 + 104), 40, (uint64_t)&v30);
      sub_1000A84C8(a1);
      int v4 = *(char *)(a1 + 151);
      if (v4 >= 0) {
        uint64_t v5 = (const std::string::value_type *)(a1 + 128);
      }
      else {
        uint64_t v5 = *(const std::string::value_type **)(a1 + 128);
      }
      if (v4 >= 0) {
        std::string::size_type v6 = *(unsigned __int8 *)(a1 + 151);
      }
      else {
        std::string::size_type v6 = *(void *)(a1 + 136);
      }
      unint64_t v7 = std::string::append(&v30, v5, v6);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v28, 41);
      v31[0] = v28.__r_.__value_.__l.__size_;
      std::string::size_type v9 = v28.__r_.__value_.__r.__words[0];
      *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 7);
      char v10 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      memset(&v28, 0, sizeof(v28));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v9;
        __p.__r_.__value_.__l.__size_ = v31[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v10;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = v9;
        __p.__r_.__value_.__l.__size_ = v31[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v10;
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        __int16 v20 = (void *)v30.__r_.__value_.__r.__words[0];
        goto LABEL_38;
      }
      goto LABEL_44;
    }
  }
  else if (*(unsigned char *)(a1 + 151))
  {
    goto LABEL_3;
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 95)) {
      goto LABEL_14;
    }
LABEL_40:
    sub_1000A84C8(a1);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(void *)(a1 + 112)) {
        goto LABEL_42;
      }
    }
    else if (*(unsigned char *)(a1 + 127))
    {
LABEL_42:
      sub_1000A84C8(a1);
      uint64_t v21 = (const std::string *)(a1 + 104);
      goto LABEL_43;
    }
    uint64_t v21 = (const std::string *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      if (*(void *)(a1 + 56)) {
        goto LABEL_43;
      }
    }
    else if (*(unsigned char *)(a1 + 71))
    {
      goto LABEL_43;
    }
    uint64_t v21 = (const std::string *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v26 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(a1 + 47);
    }
    if (!v26) {
      goto LABEL_44;
    }
LABEL_43:
    std::string::operator=(&__p, v21);
    goto LABEL_44;
  }
  if (!*(void *)(a1 + 80)) {
    goto LABEL_40;
  }
LABEL_14:
  if (*(char *)(a1 + 71) >= 0) {
    size_t v11 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v11 = *(void *)(a1 + 56);
  }
  id v12 = &v28;
  sub_1001110E4((uint64_t)&v28, v11 + 2);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    id v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (*(char *)(a1 + 71) >= 0) {
      __int16 v13 = (const void *)(a1 + 48);
    }
    else {
      __int16 v13 = *(const void **)(a1 + 48);
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "::");
  int v14 = *(char *)(a1 + 95);
  if (v14 >= 0) {
    __int16 v15 = (const std::string::value_type *)(a1 + 72);
  }
  else {
    __int16 v15 = *(const std::string::value_type **)(a1 + 72);
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a1 + 95);
  }
  else {
    std::string::size_type v16 = *(void *)(a1 + 80);
  }
  __int16 v17 = std::string::append(&v28, v15, v16);
  std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
  v30.__r_.__value_.__r.__words[0] = v17->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = v18;
  __p.__r_.__value_.__l.__size_ = v30.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v19;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    __int16 v20 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_38:
    operator delete(v20);
  }
LABEL_44:
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_46;
    }
LABEL_59:
    *(void *)&long long v25 = __p.__r_.__value_.__r.__words[0];
    *a2 = __p;
    return *(double *)&v25;
  }
  if (!*(unsigned char *)(a1 + 23)) {
    goto LABEL_59;
  }
LABEL_46:
  sub_10017BFD0(91, (const void **)a1, (uint64_t)&v30);
  std::string::push_back(&v30, 93);
  std::string v28 = v30;
  memset(&v30, 0, sizeof(v30));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v24 = std::string::append(&v28, (const std::string::value_type *)p_p, size);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return *(double *)&v25;
}

void sub_100037660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000376D4(long long *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  void v3[2] = sub_10017B2DC;
  v3[3] = &unk_1022D3F80;
  sub_100089AE0((char *)&v4, a1);
  id v1 = [v3 copy];
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  return v1;
}

void sub_1000377D8(_Unwind_Exception *a1)
{
  sub_1000064D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100037B78(uint64_t a1, long long *a2)
{
  long long v3 = a2[7];
  long long v39 = a2[6];
  long long v40 = v3;
  long long v4 = a2[9];
  long long v41 = a2[8];
  long long v42 = v4;
  long long v5 = a2[3];
  long long v35 = a2[2];
  long long v36 = v5;
  long long v6 = a2[5];
  long long v37 = a2[4];
  long long v38 = v6;
  long long v7 = a2[1];
  long long v33 = *a2;
  long long v34 = v7;
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  memset(&v28, 0, sizeof(v28));
  sub_100052E44((uint64_t)&v33, (uint64_t)&v28);
  if (CLMotionActivity::isTypeStatic())
  {
    int v9 = *(_DWORD *)(a1 + 656);
    *(_DWORD *)(a1 + 656) = v9 + 1;
    if (v9 <= 2) {
      v28.confidence = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 656) = 0;
  }
  if ((CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 112), &v28, v8) & 1) == 0)
  {
    sub_10142C114(a1, (uint64_t)&v33);
    sub_1005ADDC0((int *)(a1 + 112), (float *)&v28.type);
    sub_1005ADDCC(a1, (uint64_t)&v28);
    sub_1005AE3E8(a1, (uint64_t)&v28);
    sub_1005AE584(a1);
    char v10 = *(void **)(a1 + 40);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    long long v24 = v39;
    long long v25 = v40;
    long long v26 = v41;
    long long v27 = v42;
    long long v20 = v35;
    long long v21 = v36;
    long long v22 = v37;
    long long v23 = v38;
    long long v18 = v33;
    long long v19 = v34;
    v17[2] = sub_10142C1EC;
    v17[3] = &unk_102325750;
    v17[4] = a1;
    [v10 async:v17];
  }
  int v11 = *(unsigned __int8 *)(a1 + 531);
  double v12 = *(double *)(a1 + 536);
  double Current = CFAbsoluteTimeGetCurrent();
  char v14 = sub_1001BA49C(a1, v12, Current);
  sub_1001BA134(a1, v11, v14);
  v43.type = 10;
  uint64_t result = sub_1001072EC(a1, &v43.type, 1);
  if (result)
  {
    int v16 = 10;
    long long v45 = v30;
    long long v46 = v31;
    uint64_t v47 = v32;
    CLMotionActivity v43 = v28;
    long long v44 = v29;
    return (*(uint64_t (**)(uint64_t, int *, CLMotionActivity *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v16, &v43, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100038CE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022AF418;
  sub_100193850(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_100038D48(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 2);
  *(void *)&long long v9 = __PAIR64__(v4, v3);
  uint64_t v5 = *(void *)(a1 + 352);
  *((void *)&v9 + 1) = v5;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  long long v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109632;
    unsigned int v17 = v3;
    __int16 v18 = 1024;
    unsigned int v19 = v4;
    __int16 v20 = 2048;
    uint64_t v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Type,CLOscar,onBodyStatus,%d,confidence,%d,timestamp,%f", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v10 = 67109632;
    unsigned int v11 = v3;
    __int16 v12 = 1024;
    unsigned int v13 = v4;
    __int16 v14 = 2048;
    uint64_t v15 = v5;
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitOnBodyStatus(const CMMotionCoprocessorReply::OnBodyStatus *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t result = sub_1000E01AC(a1, 2, (uint64_t)&v9, 16);
  *(_OWORD *)(a1 + 840) = v9;
  return result;
}

uint64_t sub_100038F68(int a1)
{
  if (CLMotionActivity::isTypePedestrian()) {
    return 1;
  }
  LODWORD(result) = CLMotionActivity::isTypeIndoorPedestrian();
  if ((a1 - 61) < 2) {
    return 1;
  }
  else {
    return result;
  }
}

void sub_100038FAC(unsigned char *a1, uint64_t *a2)
{
  long long v22 = [[CLOSTransaction alloc] initWithDescription:"CLStepCountNotifier.recordAndNotifyFusedStepDistance"];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (a1[6232])
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E540);
        }
        long long v6 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = *(void *)(v4 + 8);
          int v8 = *(_DWORD *)(v4 + 24);
          uint64_t v10 = *(void *)(v4 + 32);
          uint64_t v9 = *(void *)(v4 + 40);
          uint64_t v11 = *(void *)(v4 + 80);
          uint64_t v12 = *(void *)(v4 + 48);
          int v13 = *(unsigned __int8 *)(v4 + 152);
          *(_DWORD *)long long buf = 134219520;
          *(void *)&uint8_t buf[4] = v7;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v8;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v9;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v10;
          *(_WORD *)&unsigned char buf[38] = 2048;
          *(void *)&unsigned char buf[40] = v11;
          LOWORD(v38) = 2048;
          *(void *)((char *)&v38 + 2) = v12;
          WORD5(v38) = 1024;
          HIDWORD(v38) = v13;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f, mobility_dist(m), %f, arm_cstr_state, %d", buf, 0x40u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_10232E540);
          }
          uint64_t v14 = *(void *)(v4 + 8);
          int v15 = *(_DWORD *)(v4 + 24);
          uint64_t v17 = *(void *)(v4 + 32);
          uint64_t v16 = *(void *)(v4 + 40);
          uint64_t v18 = *(void *)(v4 + 80);
          uint64_t v19 = *(void *)(v4 + 48);
          int v20 = *(unsigned __int8 *)(v4 + 152);
          int v23 = 134219520;
          uint64_t v24 = v14;
          __int16 v25 = 1024;
          int v26 = v15;
          __int16 v27 = 2048;
          uint64_t v28 = v16;
          __int16 v29 = 2048;
          uint64_t v30 = v17;
          __int16 v31 = 2048;
          uint64_t v32 = v18;
          __int16 v33 = 2048;
          uint64_t v34 = v19;
          __int16 v35 = 1024;
          int v36 = v20;
          uint64_t v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::recordAndNotifyFusedStepDistance(const std::vector<CLStepDistanceFusionResult> &)", "%s\n", v21);
          if (v21 != buf) {
            free(v21);
          }
        }
      }
      *(_DWORD *)long long buf = 3;
      if (sub_1001072EC((uint64_t)a1, (int *)buf, 1) && *(double *)(v4 + 176) > 0.0)
      {
        int v23 = 3;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        memset(&buf[16], 0, 32);
        *(_OWORD *)long long buf = *(_OWORD *)(v4 + 176);
        (*(void (**)(unsigned char *, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v23, buf, 1, 0xFFFFFFFFLL, 0);
      }
      sub_1001A79D4((uint64_t)(a1 + 144), v4);
      v4 += 192;
    }
    while (v4 != v5);
  }
}

void sub_100039318(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 2)
  {
    if (!*a3)
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      long long v6 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a4 + 8);
        int v8 = *(_DWORD *)(a4 + 12);
        int v9 = *(_DWORD *)(a4 + 20);
        int v10 = *(_DWORD *)(a4 + 24);
        int v11 = *(_DWORD *)(a4 + 60);
        uint64_t v12 = *(void *)(a4 + 64);
        uint64_t v13 = *(void *)(a4 + 88);
        double v14 = *(float *)(a4 + 152);
        int v15 = *(_DWORD *)(a4 + 176);
        int v16 = *(unsigned __int8 *)(a4 + 180);
        double v17 = *(float *)(a4 + 160);
        double v18 = *(float *)(a4 + 164);
        double v19 = *(float *)(a4 + 168);
        double v20 = *(float *)(a4 + 172);
        double v21 = *(float *)(a4 + 156);
        *(_DWORD *)long long buf = 67112704;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v8;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v9;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = v10;
        *(_WORD *)&buf[26] = 1024;
        *(_DWORD *)&unsigned char buf[28] = v11;
        *(_WORD *)unsigned __int8 v103 = 2048;
        *(void *)&v103[2] = v12;
        *(_WORD *)&v103[10] = 2048;
        *(void *)&v103[12] = v13;
        *(_WORD *)&v103[20] = 2048;
        *(double *)&v103[22] = v14;
        *(_WORD *)&v103[30] = 1024;
        *(_DWORD *)uint64_t v104 = v15;
        *(_WORD *)&v104[4] = 1024;
        *(_DWORD *)&v104[6] = v16;
        __int16 v105 = 2048;
        double v106 = v17;
        __int16 v107 = 2048;
        double v108 = v18;
        __int16 v109 = 2048;
        double v110 = v19;
        __int16 v111 = 2048;
        double v112 = v20;
        __int16 v113 = 2048;
        double v114 = v21;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}", buf, 0x7Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v49 = *(_DWORD *)(a4 + 8);
        int v50 = *(_DWORD *)(a4 + 12);
        int v51 = *(_DWORD *)(a4 + 20);
        int v52 = *(_DWORD *)(a4 + 24);
        int v53 = *(_DWORD *)(a4 + 60);
        uint64_t v54 = *(void *)(a4 + 64);
        uint64_t v55 = *(void *)(a4 + 88);
        double v56 = *(float *)(a4 + 152);
        int v57 = *(_DWORD *)(a4 + 176);
        int v58 = *(unsigned __int8 *)(a4 + 180);
        double v59 = *(float *)(a4 + 160);
        double v60 = *(float *)(a4 + 164);
        double v61 = *(float *)(a4 + 168);
        double v62 = *(float *)(a4 + 172);
        double v63 = *(float *)(a4 + 156);
        LODWORD(v77) = 67112704;
        DWORD1(v77) = v49;
        WORD4(v77) = 1024;
        *(_DWORD *)((char *)&v77 + 10) = v50;
        HIWORD(v77) = 1024;
        LODWORD(v78) = v51;
        WORD2(v78) = 1024;
        *(_DWORD *)((char *)&v78 + 6) = v52;
        WORD5(v78) = 1024;
        HIDWORD(v78) = v53;
        *(_WORD *)int v79 = 2048;
        *(void *)&v79[2] = v54;
        *(_WORD *)&v79[10] = 2048;
        *(void *)&v79[12] = v55;
        *(_WORD *)&v79[20] = 2048;
        *(double *)&v79[22] = v56;
        *(_WORD *)&v79[30] = 1024;
        *(_DWORD *)uint64_t v80 = v57;
        *(_WORD *)&v80[4] = 1024;
        *(_DWORD *)&v80[6] = v58;
        __int16 v81 = 2048;
        double v82 = v59;
        __int16 v83 = 2048;
        double v84 = v60;
        __int16 v85 = 2048;
        double v86 = v61;
        __int16 v87 = 2048;
        double v88 = v62;
        __int16 v89 = 2048;
        double v90 = v63;
        uint64_t v64 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v64);
        if (v64 != buf) {
          free(v64);
        }
      }
      if (*(unsigned char *)(a1 + 5088) && *(unsigned char *)(a1 + 424)) {
        sub_10046B90C(a1 + 1136, *(double *)(a1 + 1240), *(double *)(a1 + 1248));
      }
      *(double *)(*(void *)(a1 + 2752) + 1416) = sub_1001751A0((double *)(a1 + 5096), *(double *)a4);
      (***(void (****)(void, uint64_t))(a1 + 2768))(*(void *)(a1 + 2768), a4);
      long long v22 = *(_OWORD *)(a4 + 148);
      long long v23 = *(_OWORD *)(a4 + 164);
      *(_DWORD *)(a1 + 2744) = *(_DWORD *)(a4 + 180);
      *(_OWORD *)(a1 + 2728) = v23;
      *(_OWORD *)(a1 + 2712) = v22;
      if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2920) > 90.0 && *(unsigned char *)(a1 + 2928))
      {
        float v24 = sub_10061EF9C(*(float **)(a1 + 2752), *(double *)(a1 + 2864));
        if (v24 > 0.0)
        {
          uint64_t v100 = CMNatalimeterSetUserOnsetVo2max;
          int v101 = +[NSNumber numberWithDouble:v24];
          sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v101 forKeys:&v100 count:1], 1, 0);
        }
        *(unsigned char *)(a1 + 2928) = 0;
      }
      if (*(unsigned char *)(a4 + 208))
      {
        if (CLMotionActivity::isTypeCycling()) {
          sub_1012990A8((void *)a1);
        }
      }
    }
    return;
  }
  uint64_t v25 = *(void *)(a4 + 16);
  if (v25 == 1)
  {
    *(unsigned char *)(a1 + 5088) = 0;
    uint64_t v30 = sub_1000D2E34(0);
    (*(void (**)(void))(*(void *)(v30 + 56) + 24))();
    char v31 = 0;
    *(void *)(a1 + 2856) = 0;
    *(_OWORD *)(a1 + 2864) = xmmword_101DAFF30;
    *(unsigned char *)(a1 + 2880) = 0;
    *(void *)(a1 + 2888) = 0xFFF0000000000000;
    *(_OWORD *)(a1 + 2896) = xmmword_101DAFF40;
    *(_DWORD *)(a1 + 2912) = 0;
    *(unsigned char *)(a1 + 2928) = 0;
LABEL_26:
    *(unsigned char *)(a1 + 1115) = v31;
    goto LABEL_27;
  }
  if (!v25)
  {
    *(unsigned char *)(a1 + 5088) = 1;
    sub_10092C998(*(void *)(a4 + 112));
    uint64_t v26 = sub_1000D2E34(0);
    (*(void (**)(void))(*(void *)(v26 + 56) + 24))();
    *(void *)(a1 + 2856) = 0;
    *(_OWORD *)(a1 + 2864) = xmmword_101DAFF30;
    *(unsigned char *)(a1 + 2880) = 0;
    *(void *)(a1 + 2888) = 0xFFF0000000000000;
    *(_OWORD *)(a1 + 2896) = xmmword_101DAFF40;
    *(_DWORD *)(a1 + 2912) = 0;
    *(void *)(a1 + 2920) = *(void *)(a4 + 24);
    *(unsigned char *)(a1 + 2928) = 0;
    int v27 = *(_DWORD *)(a1 + 400);
    uint64_t v28 = sub_1001A58C0();
    if (v27)
    {
      sub_101431278(v28, 1);
      __int16 v29 = (dispatch_queue_t *)sub_10019F4CC();
      *(_DWORD *)long long buf = 1;
    }
    else
    {
      sub_101431278(v28, 2);
      __int16 v29 = (dispatch_queue_t *)sub_10019F4CC();
      *(_DWORD *)long long buf = 2;
    }
    sub_100F2B804(v29, (uint64_t)buf);
    char v31 = 1;
    goto LABEL_26;
  }
LABEL_27:
  if (sub_10101439C(a4) == 1)
  {
    double v32 = sub_100E88154(a1 + 2929, *(void *)(a1 + 2752) + 1352, (double *)buf);
    *(float *)&double v32 = v32;
    uint64_t v98 = CMNatalimeterSetUserHrmax;
    char v99 = +[NSNumber numberWithFloat:v32];
    sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v99 forKeys:&v98 count:1], 0, 0);
    sub_1010B8340(a1 + 3168, (float64x2_t *)buf);
  }
  sub_1010B83B0(a1 + 3168, a4, (uint64_t)&v93);
  if (*(_DWORD *)(a1 + 396) == 2 && *(double *)&v94 != -1.0 && BYTE11(v94))
  {
    uint64_t v33 = sub_1000A6958();
    sub_10013E418(v33, @"NumActiveCalibrations", (_DWORD *)(a1 + 2840));
    ++*(_DWORD *)(a1 + 2840);
    uint64_t v34 = sub_1000A6958();
    sub_1000EA2A4(v34, @"NumActiveCalibrations", (const void *)(a1 + 2840));
    uint64_t v35 = sub_1000D3E78();
    sub_10006B564(v35, buf);
    sub_10006EF84(*(uint64_t *)buf, "Vo2MaxCalLevel", (_DWORD *)(a1 + 396));
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    *(unsigned char *)(a1 + 392) = 1;
    uint64_t v91 = CMNatalimeterSetUserRunVo2max;
    int v92 = +[NSNumber numberWithDouble:*(double *)&v94 / 3.5];
    sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v92 forKeys:&v91 count:1], 1, 0);
    if (BYTE10(v94))
    {
      sub_101299548(a1, (uint64_t)&v93);
      uint64_t v36 = *(void *)(a4 + 24);
      long long v37 = *(NSObject **)(a1 + 5432);
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10129EF38;
      *(void *)&uint8_t buf[24] = &unk_1022B8660;
      *(void *)unsigned __int8 v103 = a1;
      *(void *)&v103[8] = v36;
      dispatch_async(v37, buf);
    }
    bzero(&v80[8], 0x548uLL);
    *(_OWORD *)int v79 = v95;
    *(_OWORD *)&v79[16] = v96;
    *(void *)uint64_t v80 = v97;
    long long v77 = v93;
    long long v78 = v94;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231C218);
    }
    long long v38 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134284033;
      *(void *)&uint8_t buf[4] = v94;
      *(_WORD *)&unsigned char buf[12] = 1025;
      *(_DWORD *)&buf[14] = BYTE9(v94);
      *(_WORD *)&unsigned char buf[18] = 1025;
      *(_DWORD *)&buf[20] = BYTE10(v94);
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "VO2Max, estimate, %{private}.2f, betaBlockerUser, %{private}d, eligibleForHealthKit, %{private}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231C218);
      }
      int v73 = 134284033;
      uint64_t v74 = v94;
      __int16 v75 = 1025;
      LODWORD(v76[0]) = BYTE9(v94);
      WORD2(v76[0]) = 1025;
      *(_DWORD *)((char *)v76 + 6) = BYTE10(v94);
      double v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
    *(_DWORD *)long long buf = 6;
    (*(void (**)(uint64_t, unsigned char *, long long *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v77, 1, 0xFFFFFFFFLL, 0);
  }
  else if (*(void *)(a4 + 16) == 1)
  {
    unint64_t v39 = sub_101014448(*(void *)(a4 + 112), *(void *)(a4 + 120));
    if (v39 <= 0x18 && ((1 << v39) & 0x1028000) != 0)
    {
      HIDWORD(v97) = *(_DWORD *)(a4 + 32);
      bzero(&v104[8], 0x548uLL);
      *(_OWORD *)unsigned __int8 v103 = v95;
      *(_OWORD *)&v103[16] = v96;
      *(void *)uint64_t v104 = v97;
      *(_OWORD *)&uint8_t buf[16] = v94;
      *(_OWORD *)long long buf = v93;
      LODWORD(v77) = 6;
      (*(void (**)(uint64_t, long long *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v77, buf, 1, 0xFFFFFFFFLL, 0);
      if (sub_101299764())
      {
        long long v40 = *(NSObject **)(a1 + 5432);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1012997E8;
        block[3] = &unk_1022A3020;
        block[4] = a1;
        dispatch_async(v40, block);
      }
    }
  }
  uint64_t v41 = v96;
  if (*(double *)&v96 != 0.0)
  {
    bzero(&buf[8], 0x588uLL);
    *(void *)long long buf = v41;
    LODWORD(v77) = 8;
    (*(void (**)(uint64_t, long long *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v77, buf, 0, 0xFFFFFFFFLL, 0);
  }
  if (BYTE12(v95))
  {
    id v42 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:(char *)&v94 + 12];
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10231C238);
    }
    long long v43 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      id v44 = [v42 UUIDString];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Sending sessionId %@ to CLVO2MaxCloudKitManager", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_10231C238);
      }
      id v65 = [v42 UUIDString];
      LODWORD(v77) = 138412290;
      *(void *)((char *)&v77 + 4) = v65;
      int v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v66);
      if (v66 != buf) {
        free(v66);
      }
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLVO2MaxCloudKitManager"), "saveInputsAndOutputsForSessionId:", objc_msgSend(v42, "UUIDString"));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 2776) + 24))(*(void *)(a1 + 2776), a4);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 2768) + 8))(*(void *)(a1 + 2768), a4);
  sub_1013E3A60(a1 + 5192, a4, (uint64_t)&v77);
  if (v79[8])
  {
    if ((_BYTE)v78)
    {
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_10231C258);
      }
      long long v45 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = v77;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = *((void *)&v77 + 1);
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Cycling Session Ended, ftp: %f confidence %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_10231C258);
        }
        int v73 = 134218240;
        uint64_t v74 = v77;
        __int16 v75 = 2048;
        v76[0] = *((void *)&v77 + 1);
        int v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v67);
        if (v67 != buf) {
          free(v67);
        }
      }
      if (BYTE1(v78))
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_10231C258);
        }
        long long v46 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v77;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = *((void *)&v77 + 1);
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "new FTP will be written into HK: %f confidence %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_10231C258);
          }
          int v73 = 134218240;
          uint64_t v74 = v77;
          __int16 v75 = 2048;
          v76[0] = *((void *)&v77 + 1);
          int v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v69);
          if (v69 != buf) {
            free(v69);
          }
        }
        long long v47 = objc_alloc_init(CLCyclingPowerHKWriter);
        v71[0] = v77;
        v71[1] = v78;
        v71[2] = *(_OWORD *)v79;
        [(CLCyclingPowerHKWriter *)v47 writeFTPToHK:v71];
      }
    }
    else
    {
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_10231C258);
      }
      long long v48 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Cycling session ended but was not eligible for FTP calculation.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_10231C258);
        }
        LOWORD(v73) = 0;
        double v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v70);
        if (v70 != buf) {
          free(v70);
        }
      }
    }
  }
  sub_10061F58C(*(void *)(a1 + 2752), a4);
}

void sub_10003A4C8(_Unwind_Exception *a1)
{
  if (STACK[0x6A8]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x6A8]);
  }
  _Unwind_Resume(a1);
}

void sub_10003A4E8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9, float a10, long long a11, int a12)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  long long v22 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10017A71C;
  block[3] = &unk_1023212B0;
  block[4] = a1;
  int v24 = a2;
  int v25 = a3;
  int v26 = a4;
  int v27 = a5;
  int v28 = a6;
  int v29 = a7;
  float v30 = a9;
  float v31 = a10;
  int v32 = a8;
  long long v33 = a11;
  int v34 = a12;
  dispatch_sync(v22, block);
}

void sub_10003A5E4(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v82 = 1024;
        LODWORD(v83) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)long long v77 = 67109376;
      *(_DWORD *)&v77[4] = v16;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = v18;
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v77);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v67);
    sub_100165AD4((uint64_t)v77, a2, a3, a4, (uint64_t *)v67);
    v80 |= 2u;
    uint64_t v28 = v79;
    if (!v79) {
      operator new();
    }
    *(_DWORD *)(v79 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x100000u;
    uint64_t v30 = *(void *)(v29 + 160);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + 8) = v31;
    unsigned int v32 = sub_100197110(a6);
    if (!sub_10016E644(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 10052, "::CLP::LogEntry::PrivateData::MotionStateMediatorNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 28) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    switch(*a6)
    {
      case 0:
        uint64_t v35 = sub_10003B040(v34);
        uint64_t v36 = *(void *)a7;
        *(_DWORD *)(v35 + 32) |= 1u;
        *(void *)(v35 + 8) = v36;
        uint64_t v37 = sub_10003B040(v34);
        char v38 = *(unsigned char *)(a7 + 209);
        *(_DWORD *)(v37 + 32) |= 4u;
        *(unsigned char *)(v37 + 24) = v38;
        uint64_t v39 = sub_10003B040(v34);
        uint64_t v40 = sub_100193688(v39);
        sub_100163CA8(a7 + 8, v40, *(unsigned char *)(a7 + 209));
        goto LABEL_67;
      case 1:
      case 3:
      case 4:
      case 5:
        goto LABEL_86;
      case 2:
        uint64_t v41 = sub_1005BBA70(v34);
        sub_101465F54(a7, v41);
        goto LABEL_67;
      default:
LABEL_67:
        int v42 = sub_100168A44(a1);
        if (*(unsigned char *)(a1 + 8))
        {
          int v43 = v42;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          id v44 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            sub_101522B64((int *)a2, v68);
            if (SBYTE3(v70) >= 0) {
              long long v45 = v68;
            }
            else {
              long long v45 = *(unsigned char **)v68;
            }
            LODWORD(v60[0]) = a3->i32[0];
            sub_101522E48((int *)v60, v65);
            int v58 = v43;
            if (v66 >= 0) {
              long long v46 = v65;
            }
            else {
              long long v46 = (void **)v65[0];
            }
            int v62 = *a4;
            long long v47 = __p;
            sub_101522E48(&v62, __p);
            if (v64 < 0) {
              long long v47 = (void **)__p[0];
            }
            int v48 = *a6;
            uint64_t v49 = sub_10016BA10();
            double v50 = sub_10018202C(v49);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v58;
            __int16 v82 = 2080;
            __int16 v83 = v45;
            __int16 v84 = 2080;
            __int16 v85 = v46;
            __int16 v86 = 2080;
            __int16 v87 = v47;
            __int16 v88 = 1024;
            int v89 = v48;
            __int16 v90 = 2050;
            double v91 = v50;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
            if (v64 < 0) {
              operator delete(__p[0]);
            }
            if (v66 < 0) {
              operator delete(v65[0]);
            }
            int v43 = v58;
            if (SBYTE3(v70) < 0) {
              operator delete(*(void **)v68);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022BD0F8);
            }
            sub_101522B64((int *)a2, v65);
            if (v66 >= 0) {
              int v51 = v65;
            }
            else {
              int v51 = (void **)v65[0];
            }
            int v62 = a3->i32[0];
            int v52 = __p;
            sub_101522E48(&v62, __p);
            if (v64 < 0) {
              int v52 = (void **)__p[0];
            }
            int v59 = *a4;
            sub_101522E48(&v59, v60);
            if (v61 >= 0) {
              int v53 = v60;
            }
            else {
              int v53 = (void **)v60[0];
            }
            int v54 = *a6;
            uint64_t v55 = sub_10016BA10();
            double v56 = sub_10018202C(v55);
            *(_DWORD *)double v68 = 67110402;
            *(_DWORD *)&v68[4] = v43;
            *(_WORD *)&v68[8] = 2080;
            *(void *)&v68[10] = v51;
            __int16 v69 = 2080;
            double v70 = v52;
            __int16 v71 = 2080;
            uint64_t v72 = v53;
            __int16 v73 = 1024;
            int v74 = v54;
            __int16 v75 = 2050;
            double v76 = v56;
            int v57 = (char *)_os_log_send_and_compose_impl();
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            if (v64 < 0) {
              operator delete(__p[0]);
            }
            if (v66 < 0) {
              operator delete(v65[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v57);
            if (v57 != (char *)&buf) {
              free(v57);
            }
          }
        }
LABEL_86:
        sub_1001687EC(v77);
        break;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    double v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      double v21 = SBYTE3(v85) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)long long v77 = 136315138;
      *(void *)&v77[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,unsupported message type,%s", v77, 0xCu);
      if (SBYTE3(v85) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v77);
      if (v78 >= 0) {
        long long v22 = v77;
      }
      else {
        long long v22 = *(uint8_t **)v77;
      }
      *(_DWORD *)double v68 = 136315138;
      *(void *)&v68[4] = v22;
      double v19 = (char *)_os_log_send_and_compose_impl();
      if (v78 < 0) {
        operator delete(*(void **)v77);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_10003AF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t sub_10003B040(uint64_t a1)
{
  *(_DWORD *)(a1 + 28) |= 1u;
  if (!*(void *)(a1 + 8)) {
    operator new();
  }
  return *(void *)(a1 + 8);
}

void sub_10003B09C()
{
}

uint64_t sub_10003B0C0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 48) + 48))(*(void *)(a2 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t *, double))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), &v9, a3);
    if (result)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(unsigned char *)(v7 + 8) = v10;
      *(unsigned char *)(v7 + 9) = CLMotionActivity::isTypeIndoorPedestrian();
      uint64_t v8 = *(void *)(a1 + 24);
      *(unsigned char *)(v8 + 8) = v10;
      uint64_t result = CLMotionActivity::isTypeIndoorPedestrian();
      *(unsigned char *)(v8 + 9) = result;
      if (v10)
      {
        sub_100B5C070(*(void *)(a2 + 24), *(double *)(*(void *)(a2 + 24) + 104), *(double *)(*(void *)(a2 + 24) + 112));
        sub_10046B90C(*(void *)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 104), *(double *)(*(void *)(a2 + 8) + 112));
        uint64_t result = CLMotionActivity::isTypeIndoorPedestrian();
        if (result) {
          return sub_100B4A608(*(void *)(a2 + 64), *(double *)(*(void *)(a2 + 64) + 104), *(double *)(*(void *)(a2 + 64) + 112));
        }
      }
    }
  }
  return result;
}

void sub_10003B1F4(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1001A4D94(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10003B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B3E0(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    _DWORD v8[2] = 0x3812000000;
    v8[3] = sub_10017B3B0;
    v8[4] = nullsub_62;
    v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100179C6C;
    v7[3] = &unk_1022BCA88;
    v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    uint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_10003B50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10003B524(void *result, uint64_t **a2)
{
  uint64_t v2 = **a2;
  if (v2 != (*a2)[1])
  {
    uint64_t v4 = result;
    uint64_t v5 = (int64x2_t *)(result + 97);
    uint64_t v6 = (uint64_t)(result + 45);
    do
    {
      memset(__src, 0, sizeof(__src));
      uint64_t v7 = (void *)v4[26];
      if (v7) {
        [v7 updateEntryDistanceAndPace:v2];
      }
      LODWORD(__dst[0]) = 1;
      if (sub_1001072EC((uint64_t)v4, (int *)__dst, 1))
      {
        int v10 = 1;
        memcpy(__dst, __src, sizeof(__dst));
        (*(void (**)(void *, int *, uint64_t *, uint64_t, uint64_t, void))(*v4 + 152))(v4, &v10, __dst, 1, 0xFFFFFFFFLL, 0);
        uint64_t v8 = (dispatch_queue_t *)sub_10019F4CC();
        sub_10003BF20(v8, (uint64_t)&__src[216], (uint64_t)&__src[224]);
      }
      sub_1001A4008(v5, (uint64_t)__src, (uint64_t)__dst);
      sub_100038FAC(v4, __dst);
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete((void *)__dst[0]);
      }
      uint64_t result = sub_100170B4C(v6, *(double *)(v2 + 8));
      v2 += 176;
    }
    while (v2 != (*a2)[1]);
  }
  return result;
}

void sub_10003B69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B6B8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318E18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserver::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318E18);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      __int16 v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserver::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 29))(a4, a2, a3);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10003B894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B8B4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1001A81E8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10003BA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003BC5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if ((a3 <= 0.525 || a3 > 0.7) && (a3 <= 0.3 || a3 > 0.45))
  {
    if ((a3 <= 0.7 || a3 > 0.9) && (a3 <= 0.1 || a3 > 0.3))
    {
      if (a3 <= 0.9 || a3 > 1.0)
      {
        BOOL v8 = a3 > 0.1 || a3 <= 0.0;
        uint64_t v6 = 3;
        if (v8 && fabsf(a3) > 0.001)
        {
          if (qword_1024192A0 != -1) {
            dispatch_once(&qword_1024192A0, &stru_1022F9488);
          }
          __int16 v9 = qword_1024192A8;
          if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 134349056;
            double v12 = a3;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "IndoorOutdoor, low confidence estimate,probability,%{public}f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192A0 != -1) {
              dispatch_once(&qword_1024192A0, &stru_1022F9488);
            }
            char v10 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLIndoorOutdoorProtocol::IndoorOutdoorResult CLIndoorOutdoorDetectorWatch::getResultFromProbability(float) const", "%s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
          }
          uint64_t v6 = 0;
          uint64_t result = 0;
        }
      }
      else
      {
        uint64_t v6 = 3;
      }
    }
    else
    {
      uint64_t v6 = 2;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = a3;
  return result;
}

void sub_10003BF20(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  dispatch_assert_queue_not_V2(*a1);
  uint64_t v6 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10017A110;
  block[3] = &unk_1022B8680;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v6, block);
}

void sub_10003BFB8(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  uint64_t v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10017A704;
  v5[3] = &unk_1022B8660;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

void sub_10003C088(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10003C09C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 144);
  unint64_t v5 = *(void *)(a1 + 160);
  if (v5 > 2)
  {
    uint64_t v19 = *v4;
    double v20 = *(double *)(a2 + 80);
    double v21 = v20 - *((double *)*v4 + 12);
    if (v21 > 0.0 && v21 < 9.0)
    {
      uint64_t v29 = *(void *)(a1 + 152);
      if ((uint64_t **)v29 != v4)
      {
        unsigned int v30 = 0;
        while (1)
        {
          if (*(_DWORD *)(v29 + 16) == *(_DWORD *)a2) {
            ++v30;
          }
          if (v30 >= 2) {
            break;
          }
          uint64_t v29 = *(void *)(v29 + 8);
          if ((uint64_t **)v29 == v4) {
            goto LABEL_16;
          }
        }
        *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
        long long v31 = *(_OWORD *)(a2 + 16);
        long long v32 = *(_OWORD *)(a2 + 32);
        long long v33 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 56) = v33;
        *(_OWORD *)(a1 + 40) = v32;
        *(_OWORD *)(a1 + 24) = v31;
        long long v34 = *(_OWORD *)(a2 + 80);
        long long v35 = *(_OWORD *)(a2 + 96);
        long long v36 = *(_OWORD *)(a2 + 112);
        *(void *)(a1 + 136) = *(void *)(a2 + 128);
        *(_OWORD *)(a1 + 120) = v36;
        *(_OWORD *)(a1 + 104) = v35;
        *(_OWORD *)(a1 + 88) = v34;
        double v20 = *(double *)(a2 + 80);
      }
LABEL_16:
      *(double *)(a1 + 88) = v20;
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v24 = *(_OWORD *)(a2 + 32);
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 56) = v25;
      *(_OWORD *)(a1 + 40) = v24;
      *(_OWORD *)(a1 + 24) = v23;
      long long v26 = *(_OWORD *)(a2 + 80);
      long long v27 = *(_OWORD *)(a2 + 96);
      long long v28 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 136) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 120) = v28;
      *(_OWORD *)(a1 + 104) = v27;
      *(_OWORD *)(a1 + 88) = v26;
    }
    uint64_t v37 = *v19;
    *(void *)(v37 + 8) = v19[1];
    *(void *)v19[1] = v37;
    *(void *)(a1 + 160) = v5 - 1;
    operator delete(v19);
    char v38 = operator new(0x98uLL);
    long long v39 = *(_OWORD *)(a2 + 112);
    v38[7] = *(_OWORD *)(a2 + 96);
    v38[8] = v39;
    *((void *)v38 + 18) = *(void *)(a2 + 128);
    long long v40 = *(_OWORD *)(a2 + 48);
    v38[3] = *(_OWORD *)(a2 + 32);
    v38[4] = v40;
    long long v41 = *(_OWORD *)(a2 + 80);
    v38[5] = *(_OWORD *)(a2 + 64);
    v38[6] = v41;
    __n128 result = *(__n128 *)(a2 + 16);
    v38[1] = *(_OWORD *)a2;
    v38[2] = result;
    int v42 = *(void **)(a1 + 152);
    uint64_t v43 = *(void *)(a1 + 160);
    *(void *)char v38 = v4;
    *((void *)v38 + 1) = v42;
    *int v42 = v38;
    *(void *)(a1 + 152) = v38;
    *(void *)(a1 + 160) = v43 + 1;
  }
  else
  {
    uint64_t v6 = operator new(0x98uLL);
    long long v7 = *(_OWORD *)(a2 + 112);
    v6[7] = *(_OWORD *)(a2 + 96);
    v6[8] = v7;
    *((void *)v6 + 18) = *(void *)(a2 + 128);
    long long v8 = *(_OWORD *)(a2 + 48);
    v6[3] = *(_OWORD *)(a2 + 32);
    v6[4] = v8;
    long long v9 = *(_OWORD *)(a2 + 80);
    v6[5] = *(_OWORD *)(a2 + 64);
    v6[6] = v9;
    long long v10 = *(_OWORD *)(a2 + 16);
    v6[1] = *(_OWORD *)a2;
    _DWORD v6[2] = v10;
    char v11 = *(void **)(a1 + 152);
    *(void *)uint64_t v6 = v4;
    *((void *)v6 + 1) = v11;
    void *v11 = v6;
    *(void *)(a1 + 152) = v6;
    *(void *)(a1 + 160) = v5 + 1;
    long long v12 = *(_OWORD *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 96);
    long long v14 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 136) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 120) = v14;
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 88) = v12;
    long long v15 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)(a2 + 32);
    long long v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 56) = v17;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 24) = v15;
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  }
  return result;
}

void sub_10003C298(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  std::mutex::lock((std::mutex *)a1);
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(double *)(a1 + 200) < 0.0)
    {
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + 216) = a4;
      *(double *)(a1 + 232) = a5;
      *(double *)(a1 + 248) = a6;
      *(double *)(a1 + 264) = a7;
      *(_DWORD *)(a1 + 280) = a2;
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      __int16 v18 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 200);
        *(_DWORD *)long long buf = 134217984;
        uint64_t v23 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics: Initializing core analytics time: %f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022FDC70);
        }
        double v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics(double, double, double, double, double, double, int, BOOL)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    *(double *)(a1 + 224) = a4;
    *(double *)(a1 + 240) = a5;
    *(double *)(a1 + 256) = a6;
    *(double *)(a1 + 272) = a7;
    *(_DWORD *)(a1 + 284) = a2;
    double v20 = *(double *)(a1 + 304) + a9;
    *(double *)(a1 + 296) = *(double *)(a1 + 296) + a8;
    *(double *)(a1 + 304) = v20;
    *(_DWORD *)(a1 + 288) += a3;
    *(_DWORD *)(a1 + 292) += a3 ^ 1;
    ++*(_DWORD *)(a1 + 212);
  }
  std::mutex::unlock((std::mutex *)a1);
}

void sub_10003C514(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10003C52C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C26C8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onStairsEscalationEnableDisable", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C26C8);
    }
    unint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2082;
      long long v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onStairsEscalationEnableDisable\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  uint64_t v6 = sub_1000D2E34(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 168))(v6, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_10003C704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003CA8C(uint64_t a1, int *a2, const void *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C26C8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C26C8);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1001A1E70(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10003CC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003CC68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  v28[2] = v4;
  (*(void (**)(void *))(*(void *)v4 + 16))(v4);
  __int16 v29 = 256;
  if (*(unsigned char *)(a1 + 56))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    unint64_t v5 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v6 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      long long v33 = "";
      __int16 v34 = 2082;
      long long v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempt to reduceFreePages on readonly database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v7 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      char v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v8 = (void *)*v8;
      }
      *(_DWORD *)long long buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      long long v33 = "";
      __int16 v34 = 2082;
      long long v35 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempt to reduceFreePages on readonly database", "{\"msg%{public}.0s\":\"Attempt to reduceFreePages on readonly database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    uint64_t v9 = 2;
    goto LABEL_65;
  }
  uint64_t v10 = sub_10019F510();
  if (sub_10018364C(v10))
  {
    sub_1000E1294((uint64_t *)v28, (uint64_t)"IncrementalVacuum", 0);
    v27[0] = mach_absolute_time();
    v27[1] = (uint64_t)&stru_1022BE3F0;
    sqlite3_int64 v26 = 0;
    if (sub_10003D2B8(*(sqlite3_stmt **)(a1 + 8), "pragma page_count;", &v26)) {
      uint64_t v11 = v26;
    }
    else {
      uint64_t v11 = -1;
    }
    if (sub_10003D2B8(*(sqlite3_stmt **)(a1 + 8), "pragma freelist_count;", &v26)) {
      uint64_t v12 = v26;
    }
    else {
      uint64_t v12 = -1;
    }
    uint64_t v13 = v11 - v12;
    if (v11) {
      double v14 = (double)v13 / (double)v11;
    }
    else {
      double v14 = 1.0;
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    long long v17 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v18 = (void *)*v18;
      }
      *(_DWORD *)long long buf = 68290306;
      int v31 = 0;
      __int16 v32 = 2082;
      long long v33 = "";
      __int16 v34 = 2082;
      long long v35 = v18;
      __int16 v36 = 2050;
      uint64_t v37 = v11;
      __int16 v38 = 2050;
      uint64_t v39 = v12;
      __int16 v40 = 2050;
      double v41 = v14;
      __int16 v42 = 2050;
      uint64_t v43 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reduceFreePages\", \"path\":%{public, location:escape_only}s, \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"loadFactor\":\"%{public}f\", \"incrementalVacuumPageLimit\":%{public}lld}", buf, 0x44u);
    }
    if (!v12) {
      goto LABEL_42;
    }
    if (v11 < 0 || v12 < 0)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      uint64_t v19 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        double v20 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v20 = (void *)*v20;
        }
        *(_DWORD *)long long buf = 68289282;
        int v31 = 0;
        __int16 v32 = 2082;
        long long v33 = "";
        __int16 v34 = 2082;
        long long v35 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Cannot reduceFreePages\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
      }
      double v21 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        long long v22 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          long long v22 = (void *)*v22;
        }
        *(_DWORD *)long long buf = 68289282;
        int v31 = 0;
        __int16 v32 = 2082;
        long long v33 = "";
        __int16 v34 = 2082;
        long long v35 = v22;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Cannot reduceFreePages", "{\"msg%{public}.0s\":\"Cannot reduceFreePages\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      uint64_t v9 = 4;
      goto LABEL_64;
    }
    if (v14 <= 0.85 || (unint64_t)v12 >= 0x200)
    {
      if (v14 >= 0.4) {
        uint64_t v23 = (uint64_t)((double)v12 * 0.8);
      }
      else {
        uint64_t v23 = v12 - v13;
      }
      if (v23 >= a2) {
        uint64_t v24 = a2;
      }
      else {
        uint64_t v24 = v23;
      }
      if (sub_100604590(a1, v24)) {
        uint64_t v9 = v23 > a2;
      }
      else {
        uint64_t v9 = 4;
      }
    }
    else
    {
LABEL_42:
      uint64_t v9 = 0;
    }
LABEL_64:
    sub_1000E0900(v27);
    sub_1000E1098(v28);
    goto LABEL_65;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  __int16 v15 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v16 = (void *)*v16;
    }
    *(_DWORD *)long long buf = 68289282;
    int v31 = 0;
    __int16 v32 = 2082;
    long long v33 = "";
    __int16 v34 = 2082;
    long long v35 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Attempt to reduceFreePages with incremental vacuum disabled\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v9 = 3;
LABEL_65:
  (*(void (**)(void *))(*(void *)v4 + 24))(v4);
  return v9;
}

void sub_10003D264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  id v6 = va_arg(va2, id);
  uint64_t v8 = va_arg(va2, void);
  sub_1000E0900((uint64_t *)va);
  sub_1000E1098((id *)va1);
  sub_1019DB560((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_10003D2B8(sqlite3_stmt *a1, char *a2, sqlite3_int64 *a3)
{
  uint64_t v5 = sub_10014D824(a1, a2);
  if (!v5) {
    return 0;
  }
  id v6 = v5;
  int v7 = sqlite3_step(v5);
  BOOL v8 = v7 == 100;
  if (v7 == 100) {
    *a3 = sqlite3_column_int64(v6, 0);
  }
  sub_10003D328(a1, v6);
  return v8;
}

void sub_10003D328(sqlite3 *a1, sqlite3_stmt *pStmt)
{
  int v5 = sqlite3_finalize(pStmt);
  if (v5)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v3 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      if (a1) {
        uint64_t v4 = sqlite3_errmsg(a1);
      }
      else {
        uint64_t v4 = "no database";
      }
      *(_DWORD *)long long buf = 68289795;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 1040;
      int v11 = 4;
      __int16 v12 = 2098;
      uint64_t v13 = &v5;
      __int16 v14 = 2081;
      __int16 v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Finalized statement previously failed\", \"rc\":%{public, location:SqliteResult}.*P, \"errmsg\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
  }
}

uint64_t sub_10003D458(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v154 = a1 + 968;
  sub_100188E9C(a1 + 968);
  double v159 = a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  if (*(double *)(a1 + 184) > 0.0)
  {
    uint64_t v5 = sub_10016BA10();
    *(_DWORD *)long long buf = 1;
    if (vabdd_f64(sub_10016BA54(v5, buf), *(double *)(a1 + 184)) > 40.0)
    {
      *(unsigned char *)(a1 + 159) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 168) = _Q0;
    }
  }
  if (*(unsigned char *)(a1 + 2096) && (*(_DWORD *)(*a2 + 128) - 6) >= 3)
  {
    double v11 = sub_1000F1648((double *)(a1 + 1800), *(double *)(*a2 + 24), *(double *)(*a2 + 32), *(double *)(a1 + 2112), *(double *)(a1 + 2120), *(double *)(a1 + 1704));
    double v12 = *(double *)(a1 + 2128);
    double v13 = 0.0;
    if (v12 > 0.0)
    {
      uint64_t v14 = sub_10016BA10();
      *(_DWORD *)long long buf = 1;
      double v15 = sub_10016BA54(v14, buf);
      double v12 = *(double *)(a1 + 2128);
      double v13 = v15 - v12;
    }
    if (v11 > 600.0 && (v12 < 0.0 || v13 > 60.0) && sub_100E9BD78(a1))
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      __int16 v16 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
      {
        double v17 = sub_1005B5034();
        uint64_t v18 = *(void *)(a1 + 2104);
        uint64_t v19 = *(void *)(a1 + 2128);
        uint64_t v20 = *(void *)(a1 + 2112);
        uint64_t v21 = *(void *)(a1 + 2120);
        *(_DWORD *)long long buf = 134350593;
        *(double *)&uint8_t buf[4] = v17;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v18;
        *(_WORD *)&unsigned char buf[22] = 2050;
        *(void *)&uint8_t buf[24] = v19;
        *(_WORD *)&unsigned char buf[32] = 2050;
        *(double *)&buf[34] = v13;
        *(_WORD *)&buf[42] = 2050;
        *(double *)&buf[44] = v11;
        *(_WORD *)&buf[52] = 2049;
        *(void *)&buf[54] = v20;
        *(_WORD *)&buf[62] = 2049;
        *(void *)&unsigned char buf[64] = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#fusion,Overrides WiFi Service AP Associated state,now_mct,%{public}.3f,time received associated state,%{public}.3f,time last APWiFiFix seen,%{public}.3f,elapsedTime,%{public}.3f,distance user moved away,%{public}.2f,AP WiFi approx location LL deg,%{private}.7f,%{private}.7f", buf, 0x48u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        double v122 = sub_1005B5034();
        uint64_t v123 = *(void *)(a1 + 2104);
        uint64_t v124 = *(void *)(a1 + 2128);
        uint64_t v125 = *(void *)(a1 + 2112);
        uint64_t v126 = *(void *)(a1 + 2120);
        *(_DWORD *)double v185 = 134350593;
        *(double *)&v185[4] = v122;
        *(_WORD *)&v185[12] = 2050;
        *(void *)&v185[14] = v123;
        *(_WORD *)&v185[22] = 2050;
        *(void *)&v185[24] = v124;
        *(_WORD *)&v185[32] = 2050;
        *(double *)&v185[34] = v13;
        *(_WORD *)&v185[42] = 2050;
        *(double *)&v185[44] = v11;
        *(_WORD *)&v185[52] = 2049;
        *(void *)&v185[54] = v125;
        *(_WORD *)&v185[62] = 2049;
        *(void *)&v185[64] = v126;
        uint64_t v127 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v127);
        if (v127 != buf) {
          free(v127);
        }
      }
      *(unsigned char *)(a1 + 2096) = 0;
    }
  }
  long long v22 = (double *)(*a2 + 16);
  *(double *)(a1 + 184) = *v22;
  sub_100191CE8(a1, v22);
  uint64_t v23 = *(unsigned char **)(a1 + 2088);
  if (!v23 || !v23[1] || !*v23) {
    goto LABEL_26;
  }
  uint64_t v24 = (std::__shared_weak_count *)a2[1];
  v184[0] = *a2;
  v184[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v25 = sub_100E9C6F0(a1, (uint64_t)v184);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (!v25)
  {
    *a3 = 1;
  }
  else
  {
LABEL_26:
    sub_100189754((uint64_t)&v180);
    __int16 v183 = 0;
    uint64_t v27 = *a2;
    sqlite3_int64 v26 = (std::__shared_weak_count *)a2[1];
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v28 = v182;
    uint64_t v181 = v27;
    uint64_t v182 = v26;
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v29 = *a2;
    long long v180 = *(_OWORD *)(*a2 + 8);
    if (*(unsigned char *)(a1 + 166))
    {
      *(void *)long long buf = v29 + 128;
      if (!*((_DWORD *)sub_100EA3BAC((uint64_t **)(a1 + 216), (int *)(v29 + 128), (uint64_t)&unk_101D0B290, (_DWORD **)buf)+ 173))
      {
        *(void *)long long buf = *a2 + 128;
        unsigned int v30 = sub_100EA3BAC((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_10132D940((uint64_t)(v30 + 5), *(_DWORD *)(*a2 + 128));
        *(void *)long long buf = *a2 + 128;
        *((_DWORD *)sub_100EA3BAC((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 108) = *(_DWORD *)(a1 + 1912);
      }
      *(void *)long long buf = *a2 + 128;
      int v31 = sub_100EA3BAC((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_100188860((int64x2_t *)(v31 + 5), (uint64_t)&v180);
    }
    sub_10006F8A0(a1, (uint64_t)&v180);
    sub_10018AFDC(a1, *a2);
    sub_10018CDEC(a1);
    __int16 v32 = *(uint64_t **)(a1 + 240);
    if (v32)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      long long v162 = _Q0;
      do
      {
        if (*((_DWORD *)v32 + 167)
          && (uint64_t v34 = v32[6]) != 0
          && *(unsigned char *)(*(void *)(v32[2] + 8 * ((v34 + v32[5] - 1) / 0x17uLL))
                      + 176 * ((v34 + v32[5] - 1) % 0x17uLL)
                      + 168))
        {
          *(void *)double v169 = off_10232A710;
          *(_OWORD *)&v169[8] = v162;
          long long v172 = xmmword_101D1C320;
          long long v173 = xmmword_101D1C320;
          long long v174 = v162;
          long long v175 = v162;
          unint64_t v176 = 0xBFF0000000000000;
          int v177 = 0;
          unsigned __int8 v178 = 0;
          unsigned int v179 = 0;
          if (!sub_100070DA0((uint64_t)(v32 + 7), (uint64_t)v169)) {
            goto LABEL_55;
          }
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          long long v35 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
          {
            int v36 = *((_DWORD *)v32 + 165);
            uint64_t v37 = *(void *)&v169[8];
            uint64_t v38 = *(void *)&v169[16];
            uint64_t v39 = sub_10003E9A4(v179);
            unsigned int v40 = sub_100022744((uint64_t)(v32 + 1), (double *)&v169[16]);
            double v41 = sub_10003E9A4(v40);
            uint64_t v42 = v32[80];
            int v43 = *((_DWORD *)v32 + 167);
            *(_DWORD *)long long buf = 67244803;
            *(_DWORD *)&uint8_t buf[4] = v36;
            *(_WORD *)&uint8_t buf[8] = 2050;
            *(void *)&buf[10] = v37;
            *(_WORD *)&unsigned char buf[18] = 2050;
            *(void *)&buf[20] = v38;
            *(_WORD *)&unsigned char buf[28] = 2082;
            *(void *)&buf[30] = v39;
            *(_WORD *)&unsigned char buf[38] = 2082;
            *(void *)&unsigned char buf[40] = v41;
            *(_WORD *)&unsigned char buf[48] = 2049;
            *(void *)&buf[50] = v170;
            *(_WORD *)&buf[58] = 2049;
            *(void *)&buf[60] = v171;
            *(_WORD *)&buf[68] = 2049;
            *(void *)&buf[70] = *((void *)&v172 + 1);
            *(_WORD *)&buf[78] = 2049;
            *(void *)&buf[80] = v174;
            *(_WORD *)&buf[88] = 2049;
            *(void *)&buf[90] = v175;
            *(_WORD *)&buf[98] = 2050;
            *(void *)&buf[100] = v172;
            *(_WORD *)&buf[108] = 2050;
            *(void *)&buf[110] = v173;
            *(_WORD *)&buf[118] = 2050;
            *(void *)&buf[120] = *((void *)&v174 + 1);
            *(_WORD *)&buf[128] = 2050;
            *(void *)&buf[130] = *((void *)&v175 + 1);
            *(_WORD *)&buf[138] = 1026;
            *(_DWORD *)&buf[140] = v177;
            *(_WORD *)uint64_t v208 = 2050;
            *(void *)&v208[2] = v176;
            __int16 v209 = 1026;
            int v210 = v178;
            __int16 v211 = 2050;
            *(void *)int v212 = v42;
            *(_WORD *)&v212[8] = 1026;
            *(_DWORD *)int v213 = v43;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#fusion hypothesis,%{public}d,%{public}.3f,%{public}.3f,%{public}s,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}.3f,%{public}d", buf, 0xB0u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_55;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          int v44 = *((_DWORD *)v32 + 165);
          uint64_t v45 = *(void *)&v169[8];
          uint64_t v46 = *(void *)&v169[16];
          long long v47 = sub_10003E9A4(v179);
          unsigned int v48 = sub_100022744((uint64_t)(v32 + 1), (double *)&v169[16]);
          uint64_t v49 = sub_10003E9A4(v48);
          uint64_t v50 = v32[80];
          int v51 = *((_DWORD *)v32 + 167);
          *(_DWORD *)double v185 = 67244803;
          *(_DWORD *)&v185[4] = v44;
          *(_WORD *)&v185[8] = 2050;
          *(void *)&v185[10] = v45;
          *(_WORD *)&v185[18] = 2050;
          *(void *)&v185[20] = v46;
          *(_WORD *)&v185[28] = 2082;
          *(void *)&v185[30] = v47;
          *(_WORD *)&v185[38] = 2082;
          *(void *)&v185[40] = v49;
          *(_WORD *)&v185[48] = 2049;
          *(void *)&v185[50] = v170;
          *(_WORD *)&v185[58] = 2049;
          *(void *)&v185[60] = v171;
          *(_WORD *)&v185[68] = 2049;
          *(void *)&v185[70] = *((void *)&v172 + 1);
          *(_WORD *)&v185[78] = 2049;
          *(void *)&v185[80] = v174;
          *(_WORD *)&v185[88] = 2049;
          *(void *)&v185[90] = v175;
          *(_WORD *)&v185[98] = 2050;
          *(void *)&v185[100] = v172;
          *(_WORD *)&v185[108] = 2050;
          *(void *)&v185[110] = v173;
          *(_WORD *)&v185[118] = 2050;
          *(void *)&v185[120] = *((void *)&v174 + 1);
          *(_WORD *)&v185[128] = 2050;
          *(void *)&v185[130] = *((void *)&v175 + 1);
          *(_WORD *)&v185[138] = 1026;
          *(_DWORD *)&v185[140] = v177;
          __int16 v186 = 2050;
          unint64_t v187 = v176;
          __int16 v188 = 1026;
          int v189 = v178;
          __int16 v190 = 2050;
          *(void *)uint64_t v191 = v50;
          *(_WORD *)&v191[8] = 1026;
          *(_DWORD *)__int16 v192 = v51;
          int v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v52);
        }
        else
        {
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          int v53 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v54 = v32[6];
            BOOL v55 = v54 == 0;
            if (v54) {
              LODWORD(v54) = *(unsigned __int8 *)(*(void *)(v32[2] + 8 * ((v54 + v32[5] - 1) / 0x17uLL))
            }
                                                + 176 * ((v54 + v32[5] - 1) % 0x17uLL)
                                                + 168);
            int v56 = *((_DWORD *)v32 + 165);
            *(_DWORD *)long long buf = 67240704;
            *(_DWORD *)&uint8_t buf[4] = v56;
            *(_WORD *)&uint8_t buf[8] = 1026;
            *(_DWORD *)&buf[10] = v55;
            *(_WORD *)&buf[14] = 1026;
            *(_DWORD *)&uint8_t buf[16] = v54;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#fusion,Invalid hypothesis,hID,%{public}d,bufferEmpty,%{public}d,fused,%{public}d", buf, 0x14u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_55;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          int v57 = *((_DWORD *)v32 + 165);
          uint64_t v58 = v32[6];
          BOOL v59 = v58 == 0;
          if (v58) {
            LODWORD(v58) = *(unsigned __int8 *)(*(void *)(v32[2] + 8 * ((v58 + v32[5] - 1) / 0x17uLL))
          }
                                              + 176 * ((v58 + v32[5] - 1) % 0x17uLL)
                                              + 168);
          *(_DWORD *)double v185 = 67240704;
          *(_DWORD *)&v185[4] = v57;
          *(_WORD *)&v185[8] = 1026;
          *(_DWORD *)&v185[10] = v59;
          *(_WORD *)&v185[14] = 1026;
          *(_DWORD *)&v185[16] = v58;
          int v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v52);
        }
        if (v52 != buf) {
          free(v52);
        }
LABEL_55:
        __int16 v32 = (uint64_t *)*v32;
      }
      while (v32);
    }
    sub_100018BE0(a1, *a2);
    sub_100178D78(a1);
    sub_10018EBDC(a1);
    unsigned char *v159 = 1;
    if (*(unsigned char *)(a1 + 157))
    {
      if (*(unsigned char *)(a1 + 156))
      {
        *(void *)long long buf = *a2 + 128;
        uint64_t v60 = sub_10017CBA0((uint64_t **)(a1 + 192), *(int **)buf, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5][1];
        long long v61 = *(_OWORD *)(v60 + 88);
        long long v62 = *(_OWORD *)(v60 + 104);
        long long v63 = *(_OWORD *)(v60 + 116);
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v60 + 72);
        *(_OWORD *)(a1 + 1084) = v63;
        *(_OWORD *)(a1 + 1072) = v62;
        *(_OWORD *)(a1 + 1056) = v61;
        long long v64 = *(_OWORD *)(v60 + 8);
        long long v65 = *(_OWORD *)(v60 + 24);
        long long v66 = *(_OWORD *)(v60 + 56);
        *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v60 + 40);
        *(_OWORD *)(a1 + 1024) = v66;
        *(_OWORD *)(a1 + 976) = v64;
        *(_OWORD *)(a1 + 992) = v65;
        unsigned char *v159 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 1104) = 1;
      }
    }
    else
    {
      if (sub_10018D010(a1, *a2))
      {
        unsigned char *v159 = 0;
        double v168 = 0.0;
        uint64_t v67 = sub_10016BA10();
        *(_DWORD *)long long buf = 0;
        double v168 = sub_10016BA54(v67, buf) - *(double *)(a1 + 976);
        double v68 = *(void **)(a1 + 240);
        if (v68)
        {
          int v69 = 0;
          do
          {
            ++v69;
            double v68 = (void *)*v68;
          }
          while (v68);
        }
        else
        {
          int v69 = 0;
        }
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        double v70 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v71 = *(void *)(a1 + 992);
          uint64_t v72 = *(void *)(a1 + 1000);
          uint64_t v165 = *(void *)(a1 + 1008);
          unsigned int v73 = *(_DWORD *)(a1 + 1096);
          int v74 = sub_10003E9A4(v73);
          uint64_t v75 = *(void *)(a1 + 1048);
          uint64_t v76 = *(void *)(a1 + 1064);
          int v128 = *(_DWORD *)(a1 + 1088);
          uint64_t v130 = *(void *)(a1 + 1080);
          uint64_t v132 = *(void *)(a1 + 976);
          uint64_t v134 = *(void *)(a1 + 1016);
          uint64_t v136 = *(void *)(a1 + 1024);
          uint64_t v138 = *(void *)(a1 + 1056);
          uint64_t v140 = *(void *)(a1 + 1072);
          uint64_t v142 = *(void *)(a1 + 984);
          int v144 = *(unsigned __int8 *)(a1 + 1092);
          int v146 = *(unsigned __int8 *)(a1 + 2096);
          int v148 = *(unsigned __int8 *)(a1 + 2075);
          int v150 = *(unsigned __int8 *)(a1 + 159);
          int v152 = *(_DWORD *)(a1 + 1456);
          uint64_t v77 = *(void *)(a1 + 1696);
          uint64_t v160 = *(void *)(v77 + 384);
          uint64_t v155 = *(void *)(v77 + 392);
          int v157 = *(_DWORD *)(a1 + 96);
          int v163 = *(_DWORD *)(a1 + 2160);
          uint64_t v78 = sub_10016BA10();
          double v79 = sub_10018202C(v78);
          *(_DWORD *)long long buf = 134290179;
          *(void *)&uint8_t buf[4] = v71;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&buf[14] = v72;
          *(_WORD *)&unsigned char buf[22] = 2050;
          *(void *)&uint8_t buf[24] = v165;
          *(_WORD *)&unsigned char buf[32] = 1026;
          *(_DWORD *)&buf[34] = v73;
          *(_WORD *)&unsigned char buf[38] = 2082;
          *(void *)&unsigned char buf[40] = v74;
          *(_WORD *)&unsigned char buf[48] = 2049;
          *(void *)&buf[50] = v75;
          *(_WORD *)&buf[58] = 2049;
          *(void *)&buf[60] = v76;
          *(_WORD *)&buf[68] = 1026;
          *(_DWORD *)&buf[70] = v128;
          *(_WORD *)&buf[74] = 2050;
          *(void *)&buf[76] = v130;
          *(_WORD *)&buf[84] = 2050;
          *(void *)&buf[86] = v132;
          *(_WORD *)&buf[94] = 2050;
          *(double *)&buf[96] = v168;
          *(_WORD *)&buf[104] = 2049;
          *(void *)&buf[106] = v134;
          *(_WORD *)&buf[114] = 2050;
          *(void *)&buf[116] = v136;
          *(_WORD *)&buf[124] = 2050;
          *(void *)&buf[126] = v138;
          *(_WORD *)&buf[134] = 2050;
          *(void *)&buf[136] = v140;
          *(_WORD *)uint64_t v208 = 2050;
          *(void *)&v208[2] = v142;
          __int16 v209 = 1026;
          int v210 = v144;
          __int16 v211 = 1026;
          *(_DWORD *)int v212 = v146;
          *(_WORD *)&v212[4] = 1026;
          *(_DWORD *)&v212[6] = v148;
          *(_WORD *)int v213 = 1026;
          *(_DWORD *)&v213[2] = v150;
          __int16 v214 = 1026;
          int v215 = v152;
          __int16 v216 = 1026;
          int v217 = v155;
          __int16 v218 = 2050;
          uint64_t v219 = v160;
          __int16 v220 = 1026;
          int v221 = v157;
          __int16 v222 = 1026;
          int v223 = v69;
          __int16 v224 = 1026;
          int v225 = v163;
          __int16 v226 = 2050;
          double v227 = v79;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "CL-fusion,Pos,0,%{private}.7f,%{private}.7f,Accuracy,%{public}.3f,Type,%{public}d,%{public}s,Speed,%{private}.2f,Course,%{private}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.1f,AltitudeAccuracy,%{public}.1f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampMCT,%{public}.3f,fixIsWiFiAP,%{public}d,linkIsAssociated,%{public}d,inVisit,%{public}d,isPassthrough,%{public}d,dynamicsMode,%{public}d,IO_Context,%{public}d,IO_mct,%{public}.3f,origProviderType,%{public}d,numHypothesis,%{public}d,FusionExeState,%{public}d,propagation_us,%{public}.3f", buf, 0xE4u);
        }
        uint64_t v80 = sub_10013D1A0(115, 2);
        if (v80)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          uint64_t v111 = *(void *)(a1 + 992);
          uint64_t v112 = *(void *)(a1 + 1000);
          uint64_t v131 = *(void *)(a1 + 1008);
          unsigned int v113 = *(_DWORD *)(a1 + 1096);
          double v114 = sub_10003E9A4(v113);
          uint64_t v115 = *(void *)(a1 + 1048);
          uint64_t v116 = *(void *)(a1 + 1064);
          int v117 = *(_DWORD *)(a1 + 1088);
          uint64_t v129 = *(void *)(a1 + 1080);
          uint64_t v133 = *(void *)(a1 + 976);
          uint64_t v135 = *(void *)(a1 + 1016);
          uint64_t v137 = *(void *)(a1 + 1024);
          uint64_t v139 = *(void *)(a1 + 1056);
          uint64_t v141 = *(void *)(a1 + 1072);
          unint64_t v143 = *(void *)(a1 + 984);
          int v145 = *(unsigned __int8 *)(a1 + 1092);
          int v147 = *(unsigned __int8 *)(a1 + 2096);
          int v149 = *(unsigned __int8 *)(a1 + 2075);
          int v151 = *(unsigned __int8 *)(a1 + 159);
          int v153 = *(_DWORD *)(a1 + 1456);
          uint64_t v118 = *(void *)(a1 + 1696);
          uint64_t v161 = *(void *)(v118 + 384);
          uint64_t v156 = *(void *)(v118 + 392);
          int v158 = *(_DWORD *)(a1 + 96);
          int v164 = *(_DWORD *)(a1 + 2160);
          uint64_t v119 = sub_10016BA10();
          double v120 = sub_10018202C(v119);
          *(_DWORD *)double v185 = 134290179;
          *(void *)&v185[4] = v111;
          *(_WORD *)&v185[12] = 2049;
          *(void *)&v185[14] = v112;
          *(_WORD *)&v185[22] = 2050;
          *(void *)&v185[24] = v131;
          *(_WORD *)&v185[32] = 1026;
          *(_DWORD *)&v185[34] = v113;
          *(_WORD *)&v185[38] = 2082;
          *(void *)&v185[40] = v114;
          *(_WORD *)&v185[48] = 2049;
          *(void *)&v185[50] = v115;
          *(_WORD *)&v185[58] = 2049;
          *(void *)&v185[60] = v116;
          *(_WORD *)&v185[68] = 1026;
          *(_DWORD *)&v185[70] = v117;
          *(_WORD *)&v185[74] = 2050;
          *(void *)&v185[76] = v129;
          *(_WORD *)&v185[84] = 2050;
          *(void *)&v185[86] = v133;
          *(_WORD *)&v185[94] = 2050;
          *(double *)&v185[96] = v168;
          *(_WORD *)&v185[104] = 2049;
          *(void *)&v185[106] = v135;
          *(_WORD *)&v185[114] = 2050;
          *(void *)&v185[116] = v137;
          *(_WORD *)&v185[124] = 2050;
          *(void *)&v185[126] = v139;
          *(_WORD *)&v185[134] = 2050;
          *(void *)&v185[136] = v141;
          __int16 v186 = 2050;
          unint64_t v187 = v143;
          __int16 v188 = 1026;
          int v189 = v145;
          __int16 v190 = 1026;
          *(_DWORD *)uint64_t v191 = v147;
          *(_WORD *)&v191[4] = 1026;
          *(_DWORD *)&v191[6] = v149;
          *(_WORD *)__int16 v192 = 1026;
          *(_DWORD *)&v192[2] = v151;
          __int16 v193 = 1026;
          int v194 = v153;
          __int16 v195 = 1026;
          int v196 = v156;
          __int16 v197 = 2050;
          uint64_t v198 = v161;
          __int16 v199 = 1026;
          int v200 = v158;
          __int16 v201 = 1026;
          int v202 = v69;
          __int16 v203 = 1026;
          int v204 = v164;
          __int16 v205 = 2050;
          double v206 = v120;
          uint64_t v121 = (char *)_os_log_send_and_compose_impl();
          uint64_t v80 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)", "%s\n", v121);
          if (v121 != buf) {
            free(v121);
          }
        }
        *(void *)&unsigned char buf[12] = 0;
        *(void *)&uint8_t buf[4] = 0;
        *(_OWORD *)&buf[20] = xmmword_101D1C320;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)&buf[36] = _Q0;
        *(_OWORD *)&buf[52] = _Q0;
        *(_OWORD *)&buf[68] = _Q0;
        *(_DWORD *)long long buf = 0xFFFF;
        *(_DWORD *)&buf[84] = 0;
        memset(&buf[96], 0, 20);
        *(void *)&buf[88] = 0xBFF0000000000000;
        *(void *)&buf[116] = 0xBFF0000000000000;
        *(_DWORD *)&buf[124] = 0x7FFFFFFF;
        *(void *)&buf[136] = 0;
        *(void *)uint64_t v208 = 0;
        *(void *)&buf[128] = 0;
        v208[8] = 0;
        if (*(unsigned char *)(a1 + 2264))
        {
          BOOL v82 = sub_1001807D0(v80, v154, (uint64_t)buf);
          if (v82)
          {
            *(void *)double v185 = 0xBFF0000000000000;
            CLMotionActivity::getInit((uint64_t *)&v185[8], (CLMotionActivity *)v82);
            sub_100180754((void *)(a1 + 1840), v185);
            uint64_t v83 = sub_10016AB88();
            char v84 = *(unsigned char *)(a1 + 1092);
            char v85 = *(unsigned char *)(a1 + 2096);
            char v86 = *(unsigned char *)(a1 + 2075);
            char v87 = *(unsigned char *)(a1 + 159);
            int v167 = *(_DWORD *)(a1 + 1456);
            *(_OWORD *)double v169 = *(_OWORD *)(*(void *)(a1 + 1696) + 384);
            sub_1005C02FC(v83, (uint64_t)buf, (uint64_t *)&v168, v84, v85, v86, v87, &v167, (unsigned int *)v169, (unsigned int *)(a1 + 96), v69, (int *)(a1 + 2160), (uint64_t)v185);
          }
        }
      }
      else
      {
        if (!*(_DWORD *)(a1 + 1104)) {
          *(_DWORD *)(a1 + 1104) = 9;
        }
        unsigned char *v159 = 1;
      }
      if (!*(unsigned char *)(a1 + 158))
      {
        uint64_t v102 = *(unsigned char **)(a1 + 2088);
        if (!v102 || !v102[1] || !*v102)
        {
          if (sub_100190220(a1, *a2))
          {
            if (*(unsigned char *)(a1 + 156))
            {
              unsigned int v103 = *(_DWORD *)(a1 + 96);
              if (v103 > 8 || ((1 << v103) & 0x1D0) == 0)
              {
                *(void *)long long buf = *a2 + 128;
                uint64_t v104 = sub_10017CBA0((uint64_t **)(a1 + 192), *(int **)buf, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5][1];
                long long v105 = *(_OWORD *)(v104 + 88);
                long long v106 = *(_OWORD *)(v104 + 104);
                long long v107 = *(_OWORD *)(v104 + 116);
                *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v104 + 72);
                *(_OWORD *)(a1 + 1084) = v107;
                *(_OWORD *)(a1 + 1072) = v106;
                *(_OWORD *)(a1 + 1056) = v105;
                long long v108 = *(_OWORD *)(v104 + 8);
                long long v109 = *(_OWORD *)(v104 + 24);
                long long v110 = *(_OWORD *)(v104 + 56);
                *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v104 + 40);
                *(_OWORD *)(a1 + 1024) = v110;
                *(_OWORD *)(a1 + 976) = v108;
                *(_OWORD *)(a1 + 992) = v109;
                unsigned char *v159 = 0;
              }
            }
            else
            {
              unsigned char *v159 = 1;
              *(_DWORD *)(a1 + 1104) = 1;
            }
            *(unsigned char *)(a1 + 159) = 1;
          }
        }
      }
    }
    *(unsigned char *)(a1 + 156) = 0;
    if (!*v159) {
      *(void *)(a1 + 2136) = 0;
    }
    __int16 v88 = *(void **)(a1 + 192);
    if (v88 != (void *)(a1 + 200))
    {
      do
      {
        int v89 = v88 + 5;
        __int16 v90 = (void *)v88[5];
        if (v90)
        {
          do
          {
            double v91 = *(double *)(a1 + 184);
            double v92 = *(double *)(v90[1] + 16);
            if (v91 > v92 && v91 - v92 > 300.0)
            {
              long long v93 = (std::__shared_weak_count *)v90[2];
              v90[1] = 0;
              v90[2] = 0;
              if (v93) {
                sub_1000DB0A0(v93);
              }
            }
            __int16 v90 = (void *)*v90;
          }
          while (v90);
          long long v94 = *(void **)v89;
          for (*(void *)buf = 0; v94; long long v94 = (void *)*v94)
          {
            uint64_t v95 = v94[2];
            if (!v95 || *(void *)(v95 + 8) == -1)
            {
              while (1)
              {
                long long v94 = (void *)*v94;
                if (!v94) {
                  break;
                }
                uint64_t v96 = v94[2];
                if (v96)
                {
                  if (*(void *)(v96 + 8) != -1) {
                    break;
                  }
                }
              }
              if (buf != v89 && v89 != (unsigned char *)v94)
              {
                uint64_t v97 = v89;
                do
                {
                  uint64_t v98 = v97;
                  uint64_t v97 = (void *)*v97;
                }
                while (v97 != v94);
                if (v98 != (void *)v89)
                {
                  *uint64_t v98 = *(void *)buf;
                  *(void *)long long buf = *(void *)v89;
                  *(void *)int v89 = v94;
                }
              }
              if (!v94) {
                break;
              }
            }
            int v89 = v94;
          }
        }
        else
        {
          *(void *)long long buf = 0;
        }
        sub_10003E950((void **)buf);
        char v99 = (void *)v88[1];
        if (v99)
        {
          do
          {
            uint64_t v100 = v99;
            char v99 = (void *)*v99;
          }
          while (v99);
        }
        else
        {
          do
          {
            uint64_t v100 = (void *)v88[2];
            _ZF = *v100 == (void)v88;
            __int16 v88 = v100;
          }
          while (!_ZF);
        }
        __int16 v88 = v100;
      }
      while (v100 != (void *)(a1 + 200));
    }
    if (v182) {
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  return 1;
}

void sub_10003E940(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10003E950(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[2];
      if (v4) {
        sub_1000DB0A0(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *a1 = 0;
}

const char *sub_10003E9A4(unsigned int a1)
{
  if (a1 <= 0xD) {
    return (&off_1022E93A8)[a1];
  }
  else {
    return "<error>";
  }
}

void sub_10003E9C8(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  id v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v10 = *((void *)a3 + 3);
    uint64_t v11 = *((void *)a3 + 4);
    *(_DWORD *)long long buf = 134350080;
    uint64_t v33 = v7;
    __int16 v34 = 2050;
    uint64_t v35 = v8;
    __int16 v36 = 1026;
    *(_DWORD *)uint64_t v37 = v9;
    *(_WORD *)&v37[4] = 1026;
    *(_DWORD *)&v37[6] = v10;
    LOWORD(v38[0]) = 2050;
    *(void *)((char *)v38 + 2) = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,received outdoor update,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,type,%{public}d,confidence,%{public}d,prob,%{public}.2f", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v18 = *a2;
    uint64_t v19 = *(void *)a3;
    uint64_t v20 = *((void *)a3 + 2);
    uint64_t v21 = *((void *)a3 + 3);
    uint64_t v22 = *((void *)a3 + 4);
    *(_DWORD *)BOOL v25 = 134350080;
    *(void *)&v25[4] = v18;
    v26[0] = 2050;
    *(void *)&v26[1] = v19;
    v26[5] = 1026;
    int v27 = v20;
    __int16 v28 = 1026;
    int v29 = v21;
    __int16 v30 = 2050;
    uint64_t v31 = v22;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::indoorOutdoorUpdate(const CFTimeInterval &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (*((void *)a3 + 2))
  {
    double v12 = (CLMotionActivity *)sub_1001896C0((void *)(a1 + 2016), a2, a3);
    *(void *)BOOL v25 = 0xBFF0000000000000;
    CLMotionActivity::getInit((uint64_t *)&v25[8], v12);
    if (!*(unsigned char *)(a1 + 2208)
      && sub_100180754((void *)(a1 + 1840), v25)
      && *(double *)v25 > 0.0
      && (*(double *)v25 < 0.0 || *(double *)a2 >= *(double *)v25 && *(double *)a2 - *(double *)v25 > 2.56))
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v13 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *a2;
        uint64_t v15 = *(void *)v25;
        uint64_t v16 = CLMotionActivity::activityTypeToString();
        uint64_t v17 = CLMotionActivity::activityConfidenceToString();
        *(_DWORD *)long long buf = 134349826;
        uint64_t v33 = v14;
        __int16 v34 = 2050;
        uint64_t v35 = v15;
        __int16 v36 = 2080;
        *(void *)uint64_t v37 = v16;
        *(_WORD *)&v37[8] = 2080;
        v38[0] = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#fusion,re-using last known motion state,mct_now,%{public}.3f,lastMotionState_mct,%{public}.3f,type,%s,confidence,%s", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        CLMotionActivity::activityTypeToString();
        CLMotionActivity::activityConfidenceToString();
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::indoorOutdoorUpdate(const CFTimeInterval &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      *(void *)BOOL v25 = *a2;
      sub_10018925C((void *)(a1 + 1840), (double *)v25);
      sub_100070FB0(a1, (double *)a2);
    }
  }
}

void sub_10003EE6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10003EE78(uint64_t a1)
{
  *(_DWORD *)long long buf = 0;
  if (sub_1001072EC(a1, (int *)buf, 1)
    || (*(_DWORD *)long long buf = 2, sub_1001072EC(a1, (int *)buf, 1))
    || (*(_DWORD *)long long buf = 1, sub_1001072EC(a1, (int *)buf, 1)))
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v61 = a1;
    uint64_t v4 = (void *)(a1 + 64);
    double v5 = -1.0;
    do
    {
      uint64_t v6 = *v4;
      if (*v4)
      {
        int v7 = dword_101D2B428[v2];
        uint64_t v8 = v4;
        do
        {
          int v9 = *(_DWORD *)(v6 + 32);
          BOOL v10 = v9 < v7;
          if (v9 >= v7) {
            uint64_t v11 = (uint64_t *)v6;
          }
          else {
            uint64_t v11 = (uint64_t *)(v6 + 8);
          }
          if (!v10) {
            uint64_t v8 = (void *)v6;
          }
          uint64_t v6 = *v11;
        }
        while (*v11);
        if (v8 != v4 && v7 >= *((_DWORD *)v8 + 8))
        {
          double v12 = (double *)v8[5];
          if (v12 != (double *)(v8 + 6))
          {
            do
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C6438);
              }
              uint64_t v17 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v18 = off_1022C6378[v2];
                uint64_t v19 = v8[7];
                uint64_t v20 = *((void *)v12 + 6);
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = v18;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v19;
                __int16 v82 = 2048;
                uint64_t v83 = v20;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf", buf, 0x20u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C6438);
                }
                double v13 = off_1022C6378[v2];
                uint64_t v14 = v8[7];
                uint64_t v15 = *((void *)v12 + 6);
                int v64 = 136315650;
                unint64_t v65 = (unint64_t)v13;
                *(_WORD *)long long v66 = 2048;
                *(void *)&__n128 v66[2] = v14;
                *(_WORD *)&v66[10] = 2048;
                *(void *)&v66[12] = v15;
                uint64_t v16 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v16);
                if (v16 != buf) {
                  free(v16);
                }
              }
              int v21 = v3 ^ 1 | (v12[6] < v5);
              if ((v3 ^ 1) & 1 | (v12[6] < v5)) {
                double v5 = v12[6];
              }
              uint64_t v22 = (double *)*((void *)v12 + 1);
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  uint64_t v22 = *(double **)v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  uint64_t v23 = (double *)*((void *)v12 + 2);
                  _ZF = *(void *)v23 == (void)v12;
                  double v12 = v23;
                }
                while (!_ZF);
              }
              v3 |= v21;
              double v12 = v23;
            }
            while (v23 != (double *)(v8 + 6));
          }
        }
      }
      ++v2;
    }
    while (v2 != 3);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    uint64_t v25 = v61;
    sqlite3_int64 v26 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = *(void *)(v61 + 1024);
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C6438);
      }
      uint64_t v53 = *(void *)(v61 + 1024);
      int v64 = 134218240;
      unint64_t v65 = *(void *)&v5;
      *(_WORD *)long long v66 = 2048;
      *(void *)&__n128 v66[2] = v53;
      uint64_t v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
    if (v5 > 0.0 && v5 == *(double *)(v61 + 1024))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C6438);
      }
      __int16 v28 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void *)(v61 + 1024);
        [*(id *)(v61 + 1016) nextFireTime];
        uint64_t v31 = v30;
        [*(id *)(v61 + 1016) nextFireDelay];
        *(_DWORD *)long long buf = 134218496;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v31;
        __int16 v82 = 2048;
        uint64_t v83 = v32;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C6438);
        }
        unint64_t v33 = *(void *)(v61 + 1024);
        [*(id *)(v61 + 1016) nextFireTime];
        uint64_t v35 = v34;
        [*(id *)(v61 + 1016) nextFireDelay];
        int v64 = 134218496;
        unint64_t v65 = v33;
        *(_WORD *)long long v66 = 2048;
        *(void *)&__n128 v66[2] = v35;
        *(_WORD *)&v66[10] = 2048;
        *(void *)&v66[12] = v36;
        uint64_t v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v37);
        if (v37 != buf) {
          free(v37);
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C6438);
      }
      uint64_t v38 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v39 = *(void *)(v61 + 1024);
        *(_DWORD *)long long buf = 134218240;
        *(double *)&uint8_t buf[4] = v5;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "minimum distance changed to %.3f from %.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C6438);
        }
        uint64_t v55 = *(void *)(v61 + 1024);
        int v64 = 134218240;
        unint64_t v65 = *(void *)&v5;
        *(_WORD *)long long v66 = 2048;
        *(void *)&__n128 v66[2] = v55;
        int v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v56);
        if (v56 != buf) {
          free(v56);
        }
      }
      *(double *)(v61 + 1024) = v5;
      *(double *)(v61 + 1032) = v5 / 250.0;
      int v64 = 0xFFFF;
      *(void *)long long v66 = 0;
      unint64_t v65 = 0;
      *(_OWORD *)&v66[8] = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v67 = _Q0;
      long long v68 = _Q0;
      long long v69 = _Q0;
      int v70 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      unint64_t v71 = 0xBFF0000000000000;
      int v74 = 0;
      unint64_t v75 = 0xBFF0000000000000;
      int v76 = 0x7FFFFFFF;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      char v80 = 0;
      if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v61 + 232))(v61, &v64))
      {
        double v44 = sub_100018B28(v61, (uint64_t)&v64);
        if (v44 <= CFAbsoluteTimeGetCurrent() + 15.0)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C6438);
          }
          unsigned int v48 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v44 - Current;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "scheduling location requests for %.3fs later", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C6438);
            }
            int v62 = 134217984;
            double v63 = v44 - CFAbsoluteTimeGetCurrent();
            uint64_t v60 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v60);
            if (v60 != buf) {
              free(v60);
            }
            uint64_t v25 = v61;
          }
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C6438);
          }
          uint64_t v45 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTime v46 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v44 - v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "turning off location requests and re-scheduling for %.3fs later", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C6438);
            }
            int v62 = 134217984;
            double v63 = v44 - CFAbsoluteTimeGetCurrent();
            BOOL v59 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v59);
            if (v59 != buf) {
              free(v59);
            }
            uint64_t v25 = v61;
          }
          [*(id *)(*(void *)(v25 + 168) + 16) unregister:*(void *)(*(void *)(v25 + 168) + 8) forNotification:0];
          [*(id *)(*(void *)(v25 + 168) + 16) unregister:*(void *)(*(void *)(v25 + 168) + 8) forNotification:1];
          [*(id *)(*(void *)(v25 + 168) + 16) unregister:*(void *)(*(void *)(v25 + 168) + 8) forNotification:2];
          int v62 = 0;
          *(void *)long long buf = &v62;
          *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 1040), &v62, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
          int v62 = 1;
          *(void *)long long buf = &v62;
          *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 1040), &v62, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
          int v62 = 2;
          *(void *)long long buf = &v62;
          *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 1040), &v62, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
        }
        [*(id *)(v25 + 1016) setNextFireTime:v44];
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C6438);
        }
        long long v47 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(void *)long long buf = 68289026;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"no location currently available, starting it immediately\"}", buf, 0x12u);
        }
        [*(id *)(v61 + 1016) setNextFireDelay:0.0];
      }
    }
    if (*(double *)(v25 + 1088) != -1.0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C6438);
      }
      uint64_t v50 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v51 = *(void *)(v25 + 1088);
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = 0xBFF0000000000000;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "wake interval changed to %.3f from %.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C6438);
        }
        uint64_t v57 = *(void *)(v25 + 1088);
        int v64 = 134218240;
        unint64_t v65 = 0xBFF0000000000000;
        *(_WORD *)long long v66 = 2048;
        *(void *)&__n128 v66[2] = v57;
        uint64_t v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v58);
        if (v58 != buf) {
          free(v58);
        }
      }
      *(void *)(v25 + 1088) = 0xBFF0000000000000;
      sub_100731CFC(v25);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1024) = _Q0;
  }
}

void sub_10003FE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1000DAF68(&a9);
  _Unwind_Resume(a1);
}

void sub_10003FF00(uint64_t a1)
{
  double v2 = sub_100036BC0(a1);
  id v3 = objc_alloc_init((Class)NSMutableArray);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = *(void **)(a1 + 400);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        [v9 timestamp];
        if (v10 < v2) {
          [v3 addObject:v9];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v25 count:16];
    }
    while (v6);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022ADD90);
  }
  uint64_t v11 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    id v12 = [v3 count];
    *(_DWORD *)long long buf = 68289539;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2050;
    uint64_t v22 = 9;
    __int16 v23 = 2049;
    id v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Pruning locations\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"prunedLocationCount\":%{private}lu}", buf, 0x26u);
  }
  [*(id *)(a1 + 400) removeObjectsInArray:v3];
}

void sub_1000400E4(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_1024194E0 != -1) {
    dispatch_once(&qword_1024194E0, &stru_1022C8628);
  }
  id v6 = qword_1024194E8;
  if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 68289539;
    int v75 = 0;
    __int16 v76 = 2082;
    uint64_t v77 = "";
    __int16 v78 = 2113;
    *(void *)uint64_t v79 = a2;
    *(_WORD *)&v79[8] = 2114;
    *(void *)&v79[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"response from fetchPossibleTerritoriesForLocation\", \"results\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (a3)
  {
    if (qword_1024194E0 != -1) {
      dispatch_once(&qword_1024194E0, &stru_1022C8628);
    }
    uint64_t v7 = qword_1024194E8;
    if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68289282;
      int v75 = 0;
      __int16 v76 = 2082;
      uint64_t v77 = "";
      __int16 v78 = 2114;
      *(void *)uint64_t v79 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error getting country info\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1024194E0 != -1) {
        dispatch_once(&qword_1024194E0, &stru_1022C8628);
      }
    }
    uint64_t v8 = qword_1024194E8;
    if (os_signpost_enabled((os_log_t)qword_1024194E8))
    {
      *(_DWORD *)long long buf = 68289282;
      int v75 = 0;
      __int16 v76 = 2082;
      uint64_t v77 = "";
      __int16 v78 = 2114;
      *(void *)uint64_t v79 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error getting country info", "{\"msg%{public}.0s\":\"error getting country info\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_85;
  }
  uint64_t v58 = a1;
  if (!a2)
  {
    if (qword_1024194E0 != -1) {
      dispatch_once(&qword_1024194E0, &stru_1022C8628);
    }
    uint64_t v34 = qword_1024194E8;
    if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289282;
      int v75 = 0;
      __int16 v76 = 2082;
      uint64_t v77 = "";
      __int16 v78 = 2114;
      *(void *)uint64_t v79 = @"XZ";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"no country info found, defaulting to international waters\", \"code\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    int v9 = +[NSMutableArray arrayWithObject:@"XZ", a1];
    goto LABEL_68;
  }
  int v9 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [a2 count]);
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v10 = [a2 countByEnumeratingWithState:&v68 objects:v82 count:16];
  if (!v10)
  {
LABEL_68:
    char v12 = 0;
    goto LABEL_69;
  }
  id v11 = v10;
  char v12 = 0;
  uint64_t v13 = *(void *)v69;
  uint64_t v62 = *(void *)v69;
  uint64_t v60 = a2;
  do
  {
    id v14 = 0;
    id v61 = v11;
    do
    {
      if (*(void *)v69 != v13) {
        objc_enumerationMutation(a2);
      }
      double v63 = (char *)v14;
      long long v15 = *(void **)(*((void *)&v68 + 1) + 8 * (void)v14);
      if (v15)
      {
        if ([v15 isDisputed])
        {
          if (qword_1024194E0 != -1) {
            dispatch_once(&qword_1024194E0, &stru_1022C8628);
          }
          long long v16 = qword_1024194E8;
          if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_INFO))
          {
            id v17 = [[[v15 disputedTerritoryName] UTF8String];
            *(_DWORD *)long long buf = 68289283;
            int v75 = 0;
            __int16 v76 = 2082;
            uint64_t v77 = "";
            __int16 v78 = 2081;
            *(void *)uint64_t v79 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"result is a disputed territory, adding all interested parties\", \"name\":%{private, location:escape_only}s}", buf, 0x1Cu);
          }
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          id v18 = [v15 interestedPartyIso3166CountryCodes2:v58];
          id v19 = [v18 countByEnumeratingWithState:&v64 objects:v81 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v65;
            do
            {
              for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v65 != v21) {
                  objc_enumerationMutation(v18);
                }
                id v23 = [*(id *)(*((void *)&v64 + 1) + 8 * i) copy];
                [(NSMutableArray *)v9 addObject:v23];
                if (qword_1024194E0 != -1) {
                  dispatch_once(&qword_1024194E0, &stru_1022C8628);
                }
                id v24 = qword_1024194E8;
                if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_INFO))
                {
                  id v25 = [v23 UTF8String];
                  *(_DWORD *)long long buf = 68289283;
                  int v75 = 0;
                  __int16 v76 = 2082;
                  uint64_t v77 = "";
                  __int16 v78 = 2081;
                  *(void *)uint64_t v79 = v25;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"adding interested party\", \"countryCode\":%{private, location:escape_only}s}", buf, 0x1Cu);
                }
              }
              id v20 = [v18 countByEnumeratingWithState:&v64 objects:v81 count:16];
            }
            while (v20);
            char v12 = 1;
            a2 = v60;
            id v11 = v61;
            uint64_t v13 = v62;
          }
          else
          {
            char v12 = 1;
          }
LABEL_59:
          sqlite3_int64 v26 = v63;
          goto LABEL_60;
        }
        if (([v15 isDisputed] & 1) != 0 || !objc_msgSend(v15, "iso3166CountryCode2"))
        {
          if (qword_1024194E0 != -1) {
            dispatch_once(&qword_1024194E0, &stru_1022C8628);
          }
          uint64_t v32 = qword_1024194E8;
          if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 68289282;
            int v75 = 0;
            __int16 v76 = 2082;
            uint64_t v77 = "";
            __int16 v78 = 2114;
            *(void *)uint64_t v79 = v15;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"got a result that lacked a 2-letter ISO country code\", \"terr\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1024194E0 != -1) {
              dispatch_once(&qword_1024194E0, &stru_1022C8628);
            }
          }
          unint64_t v33 = qword_1024194E8;
          if (os_signpost_enabled((os_log_t)qword_1024194E8))
          {
            *(_DWORD *)long long buf = 68289282;
            int v75 = 0;
            __int16 v76 = 2082;
            uint64_t v77 = "";
            __int16 v78 = 2114;
            *(void *)uint64_t v79 = v15;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "got a result that lacked a 2-letter ISO country code", "{\"msg%{public}.0s\":\"got a result that lacked a 2-letter ISO country code\", \"terr\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
          goto LABEL_59;
        }
        id v29 = [[v15 iso3166CountryCode2] copy];
        [(NSMutableArray *)v9 addObject:v29];
        if (qword_1024194E0 != -1) {
          dispatch_once(&qword_1024194E0, &stru_1022C8628);
        }
        sqlite3_int64 v26 = v63;
        uint64_t v30 = qword_1024194E8;
        if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_INFO))
        {
          id v31 = [v29 UTF8String];
          *(_DWORD *)long long buf = 68289283;
          int v75 = 0;
          __int16 v76 = 2082;
          uint64_t v77 = "";
          __int16 v78 = 2081;
          *(void *)uint64_t v79 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"adding resultant country code\", \"countryCode\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        uint64_t v13 = v62;
      }
      else
      {
        if (qword_1024194E0 != -1) {
          dispatch_once(&qword_1024194E0, &stru_1022C8628);
        }
        sqlite3_int64 v26 = v63;
        uint64_t v27 = qword_1024194E8;
        if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 68289026;
          int v75 = 0;
          __int16 v76 = 2082;
          uint64_t v77 = "";
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"empty territory element?\"}", buf, 0x12u);
          if (qword_1024194E0 != -1) {
            dispatch_once(&qword_1024194E0, &stru_1022C8628);
          }
        }
        __int16 v28 = qword_1024194E8;
        if (os_signpost_enabled((os_log_t)qword_1024194E8))
        {
          *(_DWORD *)long long buf = 68289026;
          int v75 = 0;
          __int16 v76 = 2082;
          uint64_t v77 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "empty territory element?", "{\"msg%{public}.0s\":\"empty territory element?\"}", buf, 0x12u);
        }
      }
LABEL_60:
      id v14 = v26 + 1;
    }
    while (v14 != v11);
    id v11 = [a2 countByEnumeratingWithState:&v68 objects:v82 count:16];
  }
  while (v11);
LABEL_69:
  uint64_t v35 = [+[NSSet setWithArray:](NSSet, "setWithArray:", v9, v58) allObjects];
  if (![*(id *)(v59 + 32) countriesAreUnchanged:v35])
  {
    if (qword_1024194E0 != -1) {
      dispatch_once(&qword_1024194E0, &stru_1022C8628);
    }
    uint64_t v45 = qword_1024194E8;
    if (!os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_INFO)) {
      goto LABEL_84;
    }
    id v46 = [*(id *)(v59 + 32) previousCountries];
    *(_DWORD *)long long buf = 68289795;
    int v75 = 0;
    __int16 v76 = 2082;
    uint64_t v77 = "";
    __int16 v78 = 2113;
    *(void *)uint64_t v79 = v46;
    *(_WORD *)&v79[8] = 2113;
    *(void *)&v79[10] = v35;
    *(_WORD *)&v79[18] = 1025;
    int v80 = v12 & 1;
    long long v47 = "{\"msg%{public}.0s\":\"location country codes have changed, sending\", \"prev\":%{private, location:escape_onl"
          "y}@, \"curr\":%{private, location:escape_only}@, \"disputed\":%{private}hhd}";
    unsigned int v48 = v45;
    os_log_type_t v49 = OS_LOG_TYPE_INFO;
    uint32_t v50 = 44;
    goto LABEL_83;
  }
  [+[NSDate now] timeIntervalSince1970];
  double v37 = v36;
  [*(id *)(v59 + 32) previousCountryCodeTimeStamp];
  if ((int)[*(id *)(v59 + 32) countryCodeDebounceInterval] <= (int)(v37 - v38))
  {
    if (qword_1024194E0 != -1) {
      dispatch_once(&qword_1024194E0, &stru_1022C8628);
    }
    uint64_t v51 = qword_1024194E8;
    if (!os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_84;
    }
    [+[NSDate now] timeIntervalSince1970];
    int v53 = (int)v52;
    [*(id *)(v59 + 32) previousCountryCodeTimeStamp];
    uint64_t v55 = v54;
    unsigned int v56 = [*(id *)(v59 + 32) countryCodeDebounceInterval];
    *(_DWORD *)long long buf = 68289794;
    int v75 = 0;
    __int16 v76 = 2082;
    uint64_t v77 = "";
    __int16 v78 = 1026;
    *(_DWORD *)uint64_t v79 = v53;
    *(_WORD *)&v79[4] = 2050;
    *(void *)&v79[6] = v55;
    *(_WORD *)&v79[14] = 1026;
    *(_DWORD *)&v79[16] = v56;
    long long v47 = "{\"msg%{public}.0s\":\"already sent this country code, but it's been long enough so sending it again\", \"now\""
          ":%{public}d, \"prevTime\":\"%{public}f\", \"delta\":%{public}d}";
    unsigned int v48 = v51;
    os_log_type_t v49 = OS_LOG_TYPE_DEFAULT;
    uint32_t v50 = 40;
LABEL_83:
    _os_log_impl((void *)&_mh_execute_header, v48, v49, v47, buf, v50);
LABEL_84:
    a1 = v59;

    *(void *)(*(void *)(v59 + 32) + 200) = [(NSArray *)v35 copy];
    [+[NSDate now] timeIntervalSince1970];
    *(void *)(*(void *)(v59 + 32) + 208) = v57;
    *(unsigned char *)(*(void *)(v59 + 32) + 99) = v12 & 1;
    v72[0] = kRDUpdateKeyCountryCodes;
    v72[1] = kRDUpdateKeyInDisputedArea;
    v73[0] = v35;
    v73[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:");
    [*(id *)(v59 + 32) sendUpdateToRDIfAllowed:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v73, v72, 2)];
    goto LABEL_85;
  }
  if (qword_1024194E0 != -1) {
    dispatch_once(&qword_1024194E0, &stru_1022C8628);
  }
  a1 = v59;
  uint64_t v39 = qword_1024194E8;
  if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_DEFAULT))
  {
    [+[NSDate now] timeIntervalSince1970];
    int v41 = (int)v40;
    [*(id *)(v59 + 32) previousCountryCodeTimeStamp];
    uint64_t v43 = v42;
    unsigned int v44 = [*(id *)(v59 + 32) countryCodeDebounceInterval];
    *(_DWORD *)long long buf = 68289794;
    int v75 = 0;
    __int16 v76 = 2082;
    uint64_t v77 = "";
    __int16 v78 = 1026;
    *(_DWORD *)uint64_t v79 = v41;
    *(_WORD *)&v79[4] = 2050;
    *(void *)&v79[6] = v43;
    *(_WORD *)&v79[14] = 1026;
    *(_DWORD *)&v79[16] = v44;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"already sent this country code, skipping\", \"now\":%{public}d, \"prevTime\":\"%{public}f\", \"delta\":%{public}d}", buf, 0x28u);
  }
LABEL_85:

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = 0;
}

uint64_t sub_100040D3C(uint64_t a1, const void **a2)
{
  double v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!sub_100130070(v4, a2, v2 + 4))
      {
        if (!sub_100130070(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      double v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

id sub_100040DBC(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1019E944C(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100024D70(a1);
    }
    else
    {
      return 0;
    }
  }
}

void sub_100040E58()
{
}

void sub_1000411A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000411E8(uint64_t a1)
{
  *(void *)long long buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A815C4();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    double v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"19CLFenceSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_1000413E4()
{
}

void sub_100041410(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 + 328;
  *(void *)long long buf = v31;
  uint64_t v5 = sub_100041B40(a1 + 328, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  __int16 v6 = (const void *)v5[3];
  uint64_t v7 = (std::__shared_weak_count *)v5[4];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    if (!v8)
    {
      sub_101A8146C((uint64_t)a2, v9, v10, v11, v12, v13, v14, v15, v27, v28, v29, v30, v31[0], v31[1], *(uint64_t *)buf, *(uint64_t *)v33, *(uint64_t *)&v33[8], *(uint64_t *)&v33[16], *(uint64_t *)&v33[24],
        v34,
        v35,
        v36,
        v37,
        v38);
      abort_report_np();
      goto LABEL_26;
    }
    *a2 = v8;
    a2[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8[248]) {
      goto LABEL_21;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    long long v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v33 = 2082;
      *(void *)&v33[2] = "";
      *(_WORD *)&v33[10] = 2114;
      *(void *)&v33[12] = v17;
      *(_WORD *)&v33[20] = 2082;
      *(void *)&v33[22] = (unint64_t)"17CLSLCSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    id v18 = (std::__shared_weak_count *)a2[1];
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
  sub_1000176FC(*(uint64_t **)(a1 + 16), *(void *)(a1 + 48), a2);
  uint64_t v19 = *a2;
  *(unsigned char *)(v19 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  uint64_t v20 = *a2;
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  id v22 = v21;

  *(void *)(v20 + 152) = v21;
  if (!*a2 || !*(unsigned char *)(*a2 + 248))
  {
    sub_101A81310(a2);
    abort_report_np();
LABEL_26:
    __break(1u);
    return;
  }
  *(void *)long long buf = v31;
  id v23 = sub_100041B40(v4, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  sqlite3_int64 v26 = (std::__shared_weak_count *)v23[4];
  v23[3] = v25;
  v23[4] = v24;
  if (v26) {
    sub_1000DB0A0(v26);
  }
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a1 + 8);
LABEL_21:
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_10004176C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000417A8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)(a1 + 41);
  *(void *)long long buf = v31;
  uint64_t v5 = sub_100041B40((uint64_t)(a1 + 41), v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  __int16 v6 = (const void *)v5[3];
  uint64_t v7 = (std::__shared_weak_count *)v5[4];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    if (!v8)
    {
      sub_101A8146C((uint64_t)a2, v9, v10, v11, v12, v13, v14, v15, v27, v28, v29, v30, v31[0], v31[1], *(uint64_t *)buf, *(uint64_t *)v33, *(uint64_t *)&v33[8], *(uint64_t *)&v33[16], *(uint64_t *)&v33[24],
        v34,
        v35,
        v36,
        v37,
        v38);
      abort_report_np();
      goto LABEL_26;
    }
    *a2 = v8;
    a2[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8[248]) {
      goto LABEL_21;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    long long v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = a1[6];
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v33 = 2082;
      *(void *)&v33[2] = "";
      *(_WORD *)&v33[10] = 2114;
      *(void *)&v33[12] = v17;
      *(_WORD *)&v33[20] = 2082;
      *(void *)&v33[22] = (unint64_t)"29CLVisitMonitoringSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    id v18 = (std::__shared_weak_count *)a2[1];
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
  sub_100050830(a1[2], a1[6], a2);
  uint64_t v19 = *a2;
  *(unsigned char *)(v19 + 144) = (*(uint64_t (**)(uint64_t *))(*a1 + 80))(a1);
  uint64_t v20 = *a2;
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1);
  id v22 = v21;

  *(void *)(v20 + 152) = v21;
  if (!*a2 || !*(unsigned char *)(*a2 + 248))
  {
    sub_101A81310(a2);
    abort_report_np();
LABEL_26:
    __break(1u);
    return;
  }
  *(void *)long long buf = v31;
  id v23 = sub_100041B40(v4, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  sqlite3_int64 v26 = (std::__shared_weak_count *)v23[4];
  v23[3] = v25;
  v23[4] = v24;
  if (v26) {
    sub_1000DB0A0(v26);
  }
  (*(void (**)(void, uint64_t *))(*(void *)*a2 + 16))(*a2, a1 + 1);
LABEL_21:
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100041B04(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100041B40(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = *(void *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v8)
        {
          if (sub_1000E9B14(i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  id v18 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v19 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100100330(a1, v25);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint8_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    void *i = *v27;
LABEL_41:
    void *v27 = i;
    goto LABEL_42;
  }
  void *i = *v18;
  *id v18 = i;
  *(void *)(v26 + 8 * v4) = v18;
  if (*i)
  {
    unint64_t v28 = *(void *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12) {
        v28 %= v12;
      }
    }
    else
    {
      v28 &= v12 - 1;
    }
    uint8_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100041DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10097F4F8(v11, v10);
  _Unwind_Resume(a1);
}

CFStringRef sub_100041DC4(uint64_t a1, __CFBundle *a2, const __CFString *a3, int a4)
{
  uint64_t v21 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v22 = 256;
  if (!a2) {
    goto LABEL_31;
  }
  CFStringRef v8 = sub_10005FB58(a1, a2);
  CFStringRef v9 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization();
  if (v8) {
    CFRelease(v8);
  }
  if (v9)
  {
    if (CFStringCompare(v9, a3, 1uLL))
    {
      CFStringRef v10 = v9;
      goto LABEL_9;
    }
    CFRelease(v9);
    if (!a4)
    {
      CFStringRef ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(a2, a3);
      CFStringRef v11 = ValueForInfoDictionaryKey;
      if (!ValueForInfoDictionaryKey) {
        goto LABEL_32;
      }
      CFTypeID v13 = CFGetTypeID(ValueForInfoDictionaryKey);
      if (v13 == CFStringGetTypeID())
      {
        CFRetain(v11);
        goto LABEL_32;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA7D0);
      }
      unint64_t v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        sub_1000FECE0(a3, (uint64_t)__p);
        if (v20 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 68289282;
        int v24 = 0;
        __int16 v25 = 2082;
        uint64_t v26 = "";
        __int16 v27 = 2082;
        unint64_t v28 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key in bundle does not contain a string value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CA7D0);
        }
      }
      long long v16 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        sub_1000FECE0(a3, (uint64_t)__p);
        if (v20 >= 0) {
          unint64_t v17 = __p;
        }
        else {
          unint64_t v17 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 68289282;
        int v24 = 0;
        __int16 v25 = 2082;
        uint64_t v26 = "";
        __int16 v27 = 2082;
        unint64_t v28 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "key in bundle does not contain a string value", "{\"msg%{public}.0s\":\"key in bundle does not contain a string value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_31:
      CFStringRef v11 = 0;
      goto LABEL_32;
    }
  }
  CFStringRef v10 = 0;
LABEL_9:
  if (a4 == 1) {
    CFStringRef v11 = v10;
  }
  else {
    CFStringRef v11 = v9;
  }
LABEL_32:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v11;
}

void sub_1000420D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000420FC(uint64_t a1, double *a2, uint64_t a3)
{
  if (CLMotionActivity::isTypeDriving())
  {
    int isVehicularHighConfidence = CLMotionActivity::isVehicularHighConfidence();
    if (*(int *)(a3 + 4) > 0) {
      int v7 = 1;
    }
    else {
      int v7 = isVehicularHighConfidence;
    }
    CFStringRef v8 = (uint64_t **)(a1 + 48);
    if (v7 == 1)
    {
      *(_DWORD *)(a1 + 72) = 7;
      double v9 = *a2;
      unsigned int v17 = 7;
    }
    else
    {
      *(_DWORD *)(a1 + 72) = 6;
      double v9 = *a2;
      unsigned int v17 = 6;
    }
    goto LABEL_7;
  }
  int isTypeStatic = CLMotionActivity::isTypeStatic();
  if (*(int *)(a3 + 4) > 0) {
    int v12 = isTypeStatic;
  }
  else {
    int v12 = 0;
  }
  if (v12 == 1)
  {
LABEL_37:
    *(_DWORD *)(a1 + 72) = 1;
    double v9 = *a2;
    unsigned int v17 = 1;
    id v18 = &v17;
    uint64_t result = (uint64_t)sub_100042490((uint64_t **)(a1 + 48), &v17, (uint64_t)&unk_101D0B290, &v18);
    goto LABEL_38;
  }
  if (CLMotionActivity::isTypeCycling())
  {
LABEL_15:
    *(_DWORD *)(a1 + 72) = 6;
    double v9 = *a2;
    unsigned int v17 = 6;
    id v18 = &v17;
    uint64_t result = (uint64_t)sub_100042490((uint64_t **)(a1 + 48), &v17, (uint64_t)&unk_101D0B290, &v18);
    goto LABEL_38;
  }
  if ((CLMotionActivity::isTypePedestrian() & 1) == 0 && !CLMotionActivity::isTypeIndoorPedestrian())
  {
    if ((CLMotionActivity::isTypeUnclassifiedMoving() & 1) != 0
      || ((int v13 = CLMotionActivity::isTypeStatic(), !*(_DWORD *)(a3 + 4)) ? (v14 = v13) : (v14 = 0), v14 == 1))
    {
      if (CLMotionActivity::isTypeInVehicle())
      {
        uint64_t v15 = (unsigned char *)sub_10067B400();
        if (!v15 || !v15[1] || !*v15) {
          goto LABEL_37;
        }
        goto LABEL_15;
      }
      uint64_t result = sub_10068E4D4(a1, a2, 600.0);
      if (result) {
        return result;
      }
    }
LABEL_20:
    *(_DWORD *)(a1 + 72) = 4;
    double v9 = *a2;
    unsigned int v17 = 4;
    id v18 = &v17;
    uint64_t result = (uint64_t)sub_100042490((uint64_t **)(a1 + 48), &v17, (uint64_t)&unk_101D0B290, &v18);
    goto LABEL_38;
  }
  if (*(int *)(a3 + 4) < 1)
  {
    *(_DWORD *)(a1 + 72) = 3;
    double v9 = *a2;
    unsigned int v17 = 3;
    id v18 = &v17;
    uint64_t result = (uint64_t)sub_100042490((uint64_t **)(a1 + 48), &v17, (uint64_t)&unk_101D0B290, &v18);
    goto LABEL_38;
  }
  if (CLMotionActivity::isTypeWalking()) {
    goto LABEL_20;
  }
  int isTypeRunning = CLMotionActivity::isTypeRunning();
  CFStringRef v8 = (uint64_t **)(a1 + 48);
  if (isTypeRunning)
  {
    *(_DWORD *)(a1 + 72) = 5;
    double v9 = *a2;
    unsigned int v17 = 5;
  }
  else
  {
    *(_DWORD *)(a1 + 72) = 3;
    double v9 = *a2;
    unsigned int v17 = 3;
  }
LABEL_7:
  id v18 = &v17;
  uint64_t result = (uint64_t)sub_100042490(v8, &v17, (uint64_t)&unk_101D0B290, &v18);
LABEL_38:
  *(double *)(result + 40) = v9;
  return result;
}

uint64_t **sub_100042490(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  __int16 v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        double v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        __int16 v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      __int16 v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    double v9 = a1 + 1;
LABEL_10:
    CFStringRef v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100042554(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v15[0] = 0;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey"];
  if (v5 && (sub_10013E6B4(v5, v15) & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 184) != v15[0])
    {
      *(_DWORD *)(a1 + 184) = v15[0];
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      __int16 v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 24);
        int v8 = *(_DWORD *)(a1 + 184);
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v18 = 2114;
        uint64_t v19 = v7;
        __int16 v20 = 1026;
        int v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client is setting AutoPause\", \"Client\":%{public, location:escape_only}@, \"autopause\":%{public}d}", buf, 0x22u);
      }
      sub_10012D358(a1);
      sub_100134750(buf, "kCLConnectionMessageLocation");
      int v9 = sub_10012E364(a1);
      int v10 = v9;
      if (SBYTE3(v19) < 0)
      {
        operator delete(*(void **)buf);
        if (!v10) {
          goto LABEL_16;
        }
      }
      else if (!v9)
      {
        goto LABEL_16;
      }
      int v13 = *(_DWORD *)(a1 + 184);
      int v12 = *(_DWORD *)(a1 + 188);
      if (v13 < 5)
      {
        if (v12 != 2 && (v13 != 2 || v12 != 3)) {
          goto LABEL_26;
        }
      }
      else if (v12 == 1)
      {
        goto LABEL_26;
      }
      if (!sub_1001A04F4(a1))
      {
LABEL_26:
        sub_10012B52C(a1);
        goto LABEL_16;
      }
      sub_10122B5B4(a1);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    CFStringRef v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      v15[1] = 136446210;
      long long v16 = "kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey";
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessagePausesLocationUpdatesAutomatically(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }
LABEL_16:
}

void sub_1000428A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1000428F0(uint64_t a1, uint64_t a2)
{
  if (sub_1000E6DB4(a2))
  {
    sub_100197FD4(a1, a2);
    sub_1000429A8(a1 + 232, *(double *)(a2 + 20) <= 100.0);
    sub_1000429A8(a1 + 288, *(double *)(a2 + 20) <= 100.0);
    if (*(unsigned char *)(a1 + 216))
    {
      if (*(double *)(a2 + 20) <= 50.0)
      {
        sub_1011FFC18(a1, (_OWORD *)a2);
      }
    }
  }
}

void sub_1000429A8(uint64_t a1, int a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  id v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 67240704;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = a2;
    __int16 v13 = 2050;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,fPosUncThr,%{public}d,posUncThr,%{public}d,posUncTime,%{public}0.1f", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::feedPositionUncBetterThanThreshold(const BOOL)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  double v7 = sub_10016C458();
  if (a2 && *(unsigned char *)(a1 + 16) && v7 > *(double *)(a1 + 24)) {
    sub_100042BD4(a1, v7);
  }
  *(unsigned char *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = v7;
}

void sub_100042BD4(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    double v4 = *(double *)(a1 + 24);
    if (*(unsigned char *)a1) {
      BOOL v5 = *(double *)(a1 + 8) < v4;
    }
    else {
      BOOL v5 = 0;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v7 = a2 - v4;
    int v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 67240961;
      *(_DWORD *)unsigned int v17 = v7 > 10.0;
      *(_WORD *)&v17[4] = 1026;
      *(_DWORD *)&v17[6] = v5;
      *(_WORD *)__int16 v18 = 2049;
      *(void *)&v18[2] = v9;
      __int16 v19 = 2049;
      uint64_t v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,update,fixAfterOutage,%{public}d,staticBeforePreviousFix,%{public}d,staticTime,%{private}0.1f,posUncTime,%{private}0.1f", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::updateMetrics(const CFTimeInterval)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    int v11 = v7 <= 10.0 || v5;
    if (v11 != 1) {
      return;
    }
    *(double *)(a1 + 40) = *(double *)(a1 + 40) + a2 - *(double *)(a1 + 24);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    int v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 134349312;
      *(void *)unsigned int v17 = v13;
      *(_WORD *)&_OWORD v17[8] = 2050;
      *(double *)__int16 v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,update,metric,accDurPosUncThr,%{public}0.1f,time,%{public}0.1f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_32:
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::updateMetrics(const CFTimeInterval)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return;
    }
LABEL_34:
    dispatch_once(&qword_102419380, &stru_102318208);
    goto LABEL_32;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,posunc,metric collection is not active", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }
}

uint64_t sub_100043084(uint64_t a1, double a2, uint64_t a3, uint64_t a4, int *a5, int a6, uint64_t a7)
{
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  if (v10)
  {
    int v14 = *a5;
    switch((int)v10)
    {
      case 1:
      case 2:
      case 3:
      case 9:
        int v15 = 0;
        int v16 = 0;
        int v154 = 46;
        int v155 = 71;
        goto LABEL_28;
      case 4:
      case 11:
      case 13:
        int v15 = 0;
        int v16 = 0;
        int v155 = 46;
        int v153 = 87;
        int v154 = 46;
        goto LABEL_29;
      case 5:
      case 14:
        uint64_t result = sub_101A80BB8(*(unsigned int *)(a1 + 96));
LABEL_324:
        __break(1u);
        return result;
      case 6:
        int v16 = 0;
        int v15 = 1;
        goto LABEL_27;
      case 7:
        int v15 = 0;
        int v16 = 1;
        goto LABEL_27;
      case 8:
      case 12:
        goto LABEL_31;
      case 10:
        int v15 = 0;
        int v16 = 0;
        int v154 = 80;
        int v155 = 46;
        goto LABEL_28;
      default:
        int v15 = 0;
        int v16 = 0;
LABEL_27:
        int v154 = 46;
        int v155 = 46;
LABEL_28:
        int v153 = 46;
LABEL_29:
        sub_100044870(a1);
        if (v21 < 0.0) {
          goto LABEL_30;
        }
        int v151 = v15;
        int v152 = v16;
        if (*(void *)(a4 + 232) != *(void *)(a4 + 224))
        {
          if ((*(unsigned char *)(a4 + 160) & 0x10) != 0)
          {
            int v24 = sub_100BA9C80((int8x16_t *)(a1 + 4), (uint64_t **)(a4 + 224), *(double *)(a1 + 20));
          }
          else
          {
            *(_OWORD *)&v188.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 4);
            double v23 = *(double *)(a1 + 20);
            if (v23 >= *((double *)sub_100044B44() + 43)
              || (int v24 = sub_100BA9BF4((int8x16_t *)&v188, (uint64_t **)(a4 + 224))) != 0)
            {
              double v25 = *(double *)(a1 + 20);
              if (v25 >= *((double *)sub_100044B44() + 43)
                || (double v26 = sub_100BA9CFC((int8x16_t *)&v188, a4 + 224, 0),
                    v26 >= *((double *)sub_100044B44() + 44) * *(double *)(a1 + 20)))
              {
                double v34 = *((double *)sub_100044B44() + 45);
                double v35 = *(double *)(a1 + 20);
                uint64_t v36 = sub_100044B44();
                if (sub_100BA9C80((int8x16_t *)(a1 + 4), (uint64_t **)(a4 + 224), *((double *)v36 + 46) + v34 * v35) == 1)int v24 = 1; {
                else
                }
                  int v24 = -1;
              }
              else
              {
                int v24 = 0;
              }
            }
          }
          if (v24 == -1) {
            int v37 = *a5;
          }
          else {
            int v37 = v24;
          }
          if (!v14) {
            goto LABEL_211;
          }
LABEL_183:
          if (!v37)
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022E9B10);
            }
            char v99 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a4 + 23) >= 0) {
                size_t v100 = *(unsigned __int8 *)(a4 + 23);
              }
              else {
                size_t v100 = *(void *)(a4 + 8);
              }
              int v101 = &v188;
              sub_1001110E4((uint64_t)&v188, v100 + 1);
              if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v101 = (std::string *)v188.__r_.__value_.__r.__words[0];
              }
              if (v100)
              {
                if (*(char *)(a4 + 23) >= 0) {
                  uint64_t v102 = (const void *)a4;
                }
                else {
                  uint64_t v102 = *(const void **)a4;
                }
                memmove(v101, v102, v100);
              }
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v100) = 47;
              int v103 = *(char *)(a4 + 47);
              if (v103 >= 0) {
                uint64_t v104 = (const std::string::value_type *)(a4 + 24);
              }
              else {
                uint64_t v104 = *(const std::string::value_type **)(a4 + 24);
              }
              if (v103 >= 0) {
                std::string::size_type v105 = *(unsigned __int8 *)(a4 + 47);
              }
              else {
                std::string::size_type v105 = *(void *)(a4 + 32);
              }
              long long v106 = std::string::append(&v188, v104, v105);
              long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
              buf.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v107;
              v106->__r_.__value_.__l.__size_ = 0;
              v106->__r_.__value_.__r.__words[2] = 0;
              v106->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v188.__r_.__value_.__l.__data_);
              }
              p_std::string buf = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v188.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v188.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v188.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
              _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "Fence status changed to Inside, distToCenter, %{private}.1lf, %{private}s", (uint8_t *)&v188, 0x16u);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&v188, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022E9B10);
              }
              sub_100918454((const void **)a4, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v133 = &buf;
              }
              else {
                uint64_t v133 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v187.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v187.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v187.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v133;
              uint64_t v134 = (std::string *)_os_log_send_and_compose_impl();
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v134);
              if (v134 != &v188) {
                free(v134);
              }
            }
            int v14 = 0;
            goto LABEL_31;
          }
LABEL_211:
          if (v14 == 1 || v37 != 1)
          {
            int v14 = v37;
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022E9B10);
            }
            uint64_t v119 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a4 + 23) >= 0) {
                size_t v120 = *(unsigned __int8 *)(a4 + 23);
              }
              else {
                size_t v120 = *(void *)(a4 + 8);
              }
              uint64_t v121 = &v188;
              sub_1001110E4((uint64_t)&v188, v120 + 1);
              if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v121 = (std::string *)v188.__r_.__value_.__r.__words[0];
              }
              if (v120)
              {
                if (*(char *)(a4 + 23) >= 0) {
                  double v122 = (const void *)a4;
                }
                else {
                  double v122 = *(const void **)a4;
                }
                memmove(v121, v122, v120);
              }
              *(_WORD *)((char *)&v121->__r_.__value_.__l.__data_ + v120) = 47;
              int v123 = *(char *)(a4 + 47);
              if (v123 >= 0) {
                uint64_t v124 = (const std::string::value_type *)(a4 + 24);
              }
              else {
                uint64_t v124 = *(const std::string::value_type **)(a4 + 24);
              }
              if (v123 >= 0) {
                std::string::size_type v125 = *(unsigned __int8 *)(a4 + 47);
              }
              else {
                std::string::size_type v125 = *(void *)(a4 + 32);
              }
              uint64_t v126 = std::string::append(&v188, v124, v125);
              long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
              buf.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v127;
              v126->__r_.__value_.__l.__size_ = 0;
              v126->__r_.__value_.__r.__words[2] = 0;
              v126->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v188.__r_.__value_.__l.__data_);
              }
              int v128 = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v128 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v188.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v188.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v188.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v128;
              _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "Fence status remained unchanged, distToCenter, %{private}.1lf, %{private}s", (uint8_t *)&v188, 0x16u);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&v188, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022E9B10);
              }
              sub_100918454((const void **)a4, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v129 = &buf;
              }
              else {
                uint64_t v129 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v187.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v187.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v187.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v129;
              uint64_t v130 = (std::string *)_os_log_send_and_compose_impl();
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v130);
              if (v130 != &v188) {
                free(v130);
              }
            }
          }
          else
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022E9B10);
            }
            long long v109 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a4 + 23) >= 0) {
                size_t v110 = *(unsigned __int8 *)(a4 + 23);
              }
              else {
                size_t v110 = *(void *)(a4 + 8);
              }
              uint64_t v111 = &v188;
              sub_1001110E4((uint64_t)&v188, v110 + 1);
              if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v111 = (std::string *)v188.__r_.__value_.__r.__words[0];
              }
              if (v110)
              {
                if (*(char *)(a4 + 23) >= 0) {
                  uint64_t v112 = (const void *)a4;
                }
                else {
                  uint64_t v112 = *(const void **)a4;
                }
                memmove(v111, v112, v110);
              }
              *(_WORD *)((char *)&v111->__r_.__value_.__l.__data_ + v110) = 47;
              int v113 = *(char *)(a4 + 47);
              if (v113 >= 0) {
                double v114 = (const std::string::value_type *)(a4 + 24);
              }
              else {
                double v114 = *(const std::string::value_type **)(a4 + 24);
              }
              if (v113 >= 0) {
                std::string::size_type v115 = *(unsigned __int8 *)(a4 + 47);
              }
              else {
                std::string::size_type v115 = *(void *)(a4 + 32);
              }
              uint64_t v116 = std::string::append(&v188, v114, v115);
              long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              buf.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v188.__r_.__value_.__l.__data_);
              }
              uint64_t v118 = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v118 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v188.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v188.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v188.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v118;
              _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "Fence status changed to Outside, distToCenter, %{private}.1lf, %{private}s", (uint8_t *)&v188, 0x16u);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&v188, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022E9B10);
              }
              sub_100918454((const void **)a4, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v135 = &buf;
              }
              else {
                uint64_t v135 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v187.__r_.__value_.__l.__data_) = 134283779;
              *(double *)((char *)v187.__r_.__value_.__r.__words + 4) = a2;
              WORD2(v187.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v135;
              uint64_t v136 = (std::string *)_os_log_send_and_compose_impl();
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v136);
              if (v136 != &v188) {
                free(v136);
              }
            }
            int v14 = 1;
          }
          goto LABEL_31;
        }
        double v27 = v21;
        double v28 = sub_100044A78(a4);
        double v29 = sub_100044A78(a4);
        if ((*(unsigned char *)(a4 + 160) & 0x10) != 0)
        {
          double v28 = v28 + *((double *)sub_100044B44() + 41) - v27;
          double v29 = v27 + v29 + *((double *)sub_100044B44() + 41);
          goto LABEL_67;
        }
        unsigned int v30 = *a5;
        if (*(double *)(a4 + 96) >= 7000.0)
        {
          if (v30 == 1)
          {
            double v28 = v28 - (v27 + *((double *)sub_100044B44() + 8));
            double v29 = v29 - (v27 + *((double *)sub_100044B44() + 7));
          }
          else
          {
            if (!v30)
            {
              double v28 = v28 + v27 + *((double *)sub_100044B44() + 8);
              double v38 = *((double *)sub_100044B44() + 7);
LABEL_59:
              double v33 = v27 + v38;
LABEL_60:
              double v29 = v29 + v33;
              goto LABEL_67;
            }
            double v28 = v28 - v27;
            double v29 = v29 - v27;
          }
        }
        else
        {
          if (v30 < 2)
          {
            switch((int)v10)
            {
              case 1:
              case 2:
              case 3:
              case 10:
              case 11:
                int v31 = *sub_100044B44();
                uint64_t v32 = (double *)sub_100044B44();
                if (v31)
                {
                  if (a6) {
                    double v33 = v32[19];
                  }
                  else {
                    double v33 = v32[20];
                  }
                }
                else if (a6)
                {
                  double v33 = v32[17];
                }
                else
                {
                  double v33 = v32[18];
                }
                goto LABEL_60;
              case 4:
              case 13:
                double v33 = *((double *)sub_100044B44() + 16);
                goto LABEL_60;
              case 5:
              case 12:
              case 14:
                uint64_t result = sub_101A80A30(v10);
                goto LABEL_324;
              case 6:
                uint64_t v132 = sub_100044B44();
                if (a6)
                {
                  double v38 = *((double *)v132 + 10);
                  goto LABEL_59;
                }
                double v33 = *((double *)v132 + 11);
                break;
              case 7:
                uint64_t v131 = sub_100044B44();
                if (a6) {
                  double v38 = *((double *)v131 + 12);
                }
                else {
                  double v38 = *((double *)v131 + 13);
                }
                goto LABEL_59;
              case 9:
                double v28 = v28 * *((double *)sub_100044B44() + 15);
                double v33 = *((double *)sub_100044B44() + 14);
                goto LABEL_60;
              default:
                goto LABEL_67;
            }
            goto LABEL_60;
          }
          if (a6 && v10 <= 9 && ((1 << v10) & 0x2C0) != 0)
          {
            double v29 = v29 + v27 + *((double *)sub_100044B44() + 9);
LABEL_68:
            double v28 = 0.0;
LABEL_69:
            if (v29 <= 0.0) {
              double v29 = 0.0;
            }
            BOOL v39 = *(double *)(a4 + 96) < 7000.0 && (*(void *)(a4 + 160) & 0x10) == 0;
            double v40 = a2;
            if (v39)
            {
              double v41 = 1.0;
              BOOL v42 = 0;
              switch((int)v10)
              {
                case 0:
                case 5:
                case 12:
                case 14:
                  uint64_t result = sub_101A808A8(v10);
                  goto LABEL_324;
                case 1:
                case 2:
                case 3:
                case 4:
                case 10:
                case 11:
                case 13:
                  BOOL v42 = *((double *)sub_100044B44() + 30) >= v27;
                  goto LABEL_78;
                case 6:
                case 7:
                  double v40 = a2;
                  if (a6) {
                    break;
                  }
                  goto LABEL_85;
                case 9:
LABEL_78:
                  if (*a5 == 1)
                  {
                    uint64_t v43 = sub_100044B44();
                    BOOL v44 = !v42;
                    uint64_t v45 = 192;
                    uint64_t v46 = 176;
                  }
                  else
                  {
                    if (*a5) {
                      goto LABEL_85;
                    }
                    uint64_t v43 = sub_100044B44();
                    BOOL v44 = !v42;
                    uint64_t v45 = 184;
                    uint64_t v46 = 168;
                  }
                  if (!v44) {
                    uint64_t v45 = v46;
                  }
                  double v41 = *(double *)&v43[v45];
LABEL_85:
                  if (v27 * v41 <= a2) {
                    double v40 = a2 - v41 * v27;
                  }
                  else {
                    double v40 = 0.0;
                  }
                  break;
                default:
                  goto LABEL_85;
              }
            }
            if (v14 && v40 < v28)
            {
              int v47 = 0;
            }
            else
            {
              if (v14 == 1 || v40 <= v29)
              {
                int v150 = *a5;
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022E9B10);
                }
                __int16 v78 = qword_1024193C8;
                if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                {
                  if (*(char *)(a4 + 23) >= 0) {
                    size_t v79 = *(unsigned __int8 *)(a4 + 23);
                  }
                  else {
                    size_t v79 = *(void *)(a4 + 8);
                  }
                  int v80 = &buf;
                  sub_1001110E4((uint64_t)&buf, v79 + 1);
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    int v80 = (std::string *)buf.__r_.__value_.__r.__words[0];
                  }
                  if (v79)
                  {
                    if (*(char *)(a4 + 23) >= 0) {
                      __int16 v81 = (const void *)a4;
                    }
                    else {
                      __int16 v81 = *(const void **)a4;
                    }
                    memmove(v80, v81, v79);
                  }
                  *(_WORD *)((char *)&v80->__r_.__value_.__l.__data_ + v79) = 47;
                  int v82 = *(char *)(a4 + 47);
                  if (v82 >= 0) {
                    uint64_t v83 = (const std::string::value_type *)(a4 + 24);
                  }
                  else {
                    uint64_t v83 = *(const std::string::value_type **)(a4 + 24);
                  }
                  if (v82 >= 0) {
                    std::string::size_type v84 = *(unsigned __int8 *)(a4 + 47);
                  }
                  else {
                    std::string::size_type v84 = *(void *)(a4 + 32);
                  }
                  char v85 = std::string::append(&buf, v83, v84);
                  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                  v187.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v86;
                  v85->__r_.__value_.__l.__size_ = 0;
                  v85->__r_.__value_.__r.__words[2] = 0;
                  v85->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  int v87 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
                  std::string::size_type v88 = v187.__r_.__value_.__r.__words[0];
                  double v89 = sub_100044A78(a4);
                  uint64_t v90 = *(void *)(a1 + 20);
                  double v91 = &v187;
                  if (v87 < 0) {
                    double v91 = (std::string *)v88;
                  }
                  uint64_t v92 = *(void *)(a4 + 72);
                  uint64_t v93 = *(void *)(a4 + 80);
                  if (v152) {
                    int v94 = 76;
                  }
                  else {
                    int v94 = 46;
                  }
                  uint64_t v95 = *(void *)(a1 + 4);
                  uint64_t v96 = *(void *)(a1 + 12);
                  if (v151) {
                    int v97 = 67;
                  }
                  else {
                    int v97 = 46;
                  }
                  LODWORD(v188.__r_.__value_.__l.__data_) = 136385027;
                  *(std::string::size_type *)((char *)v188.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
                  WORD2(v188.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&v188.__r_.__value_.__r.__words[1] + 6) = v155;
                  WORD1(v188.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v188.__r_.__value_.__r.__words[2]) = v154;
                  __int16 v189 = 1024;
                  int v190 = v153;
                  __int16 v191 = 1024;
                  int v192 = v97;
                  __int16 v193 = 1024;
                  int v194 = v94;
                  __int16 v195 = 1026;
                  int v196 = a6;
                  __int16 v197 = 2050;
                  double v198 = v89;
                  __int16 v199 = 2050;
                  double v200 = a2;
                  __int16 v201 = 2049;
                  double v202 = v28;
                  __int16 v203 = 2049;
                  double v204 = v29;
                  __int16 v205 = 2049;
                  double v206 = v40;
                  __int16 v207 = 2049;
                  double v208 = v27;
                  __int16 v209 = 2050;
                  uint64_t v210 = v90;
                  __int16 v211 = 2049;
                  uint64_t v212 = v92;
                  __int16 v213 = 2049;
                  uint64_t v214 = v93;
                  __int16 v215 = 2049;
                  uint64_t v216 = v95;
                  __int16 v217 = 2049;
                  uint64_t v218 = v96;
                  _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,", (uint8_t *)&v188, 0x9Eu);
                  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v187.__r_.__value_.__l.__data_);
                  }
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(&v188, 0x65CuLL);
                  if (qword_1024193C0 != -1) {
                    dispatch_once(&qword_1024193C0, &stru_1022E9B10);
                  }
                  sub_100918454((const void **)a4, &v187);
                  int v137 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
                  std::string::size_type v138 = v187.__r_.__value_.__r.__words[0];
                  double v139 = sub_100044A78(a4);
                  uint64_t v140 = *(void *)(a1 + 20);
                  uint64_t v141 = &v187;
                  if (v137 < 0) {
                    uint64_t v141 = (std::string *)v138;
                  }
                  uint64_t v142 = *(void *)(a4 + 72);
                  uint64_t v143 = *(void *)(a4 + 80);
                  if (v152) {
                    int v144 = 76;
                  }
                  else {
                    int v144 = 46;
                  }
                  uint64_t v145 = *(void *)(a1 + 4);
                  uint64_t v146 = *(void *)(a1 + 12);
                  if (v151) {
                    int v147 = 67;
                  }
                  else {
                    int v147 = 46;
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136385027;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v141;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v155;
                  WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf.__r_.__value_.__r.__words[2]) = v154;
                  __int16 v157 = 1024;
                  int v158 = v153;
                  __int16 v159 = 1024;
                  int v160 = v147;
                  __int16 v161 = 1024;
                  int v162 = v144;
                  __int16 v163 = 1026;
                  int v164 = a6;
                  __int16 v165 = 2050;
                  double v166 = v139;
                  __int16 v167 = 2050;
                  double v168 = a2;
                  __int16 v169 = 2049;
                  double v170 = v28;
                  __int16 v171 = 2049;
                  double v172 = v29;
                  __int16 v173 = 2049;
                  double v174 = v40;
                  __int16 v175 = 2049;
                  double v176 = v27;
                  __int16 v177 = 2050;
                  uint64_t v178 = v140;
                  __int16 v179 = 2049;
                  uint64_t v180 = v142;
                  __int16 v181 = 2049;
                  uint64_t v182 = v143;
                  __int16 v183 = 2049;
                  uint64_t v184 = v145;
                  __int16 v185 = 2049;
                  uint64_t v186 = v146;
                  uint64_t v77 = (std::string *)_os_log_send_and_compose_impl();
                  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v187.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_319;
                }
LABEL_171:
                int v37 = v150;
                if (v152 && (*(double *)(a4 + 96) >= 7000.0 || v14)) {
                  goto LABEL_180;
                }
                int v98 = v151;
                if (v150) {
                  int v98 = 0;
                }
                if (v98 == 1)
                {
                  if (*(double *)(a4 + 96) < 7000.0 && (v27 > v29 * 0.0 || sub_100489D88(a4)))
                  {
LABEL_180:
                    int v37 = *a5;
                    goto LABEL_182;
                  }
                  int v37 = 0;
                }
LABEL_182:
                *(double *)(a7 + 624) = v40;
                *(double *)(a7 + 632) = v27;
                *(double *)(a7 + 640) = v28;
                *(double *)(a7 + 648) = v29;
                *(_DWORD *)(a7 + 608) = *a5;
                *(_DWORD *)(a7 + 604) = v37;
                if (!v14) {
                  goto LABEL_211;
                }
                goto LABEL_183;
              }
              int v47 = 1;
            }
            int v150 = v47;
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022E9B10);
            }
            int log = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a4 + 23) >= 0) {
                size_t v48 = *(unsigned __int8 *)(a4 + 23);
              }
              else {
                size_t v48 = *(void *)(a4 + 8);
              }
              os_log_type_t v49 = &buf;
              sub_1001110E4((uint64_t)&buf, v48 + 1);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                os_log_type_t v49 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              if (v48)
              {
                if (*(char *)(a4 + 23) >= 0) {
                  uint32_t v50 = (const void *)a4;
                }
                else {
                  uint32_t v50 = *(const void **)a4;
                }
                memmove(v49, v50, v48);
              }
              *(_WORD *)((char *)&v49->__r_.__value_.__l.__data_ + v48) = 47;
              int v51 = *(char *)(a4 + 47);
              if (v51 >= 0) {
                double v52 = (const std::string::value_type *)(a4 + 24);
              }
              else {
                double v52 = *(const std::string::value_type **)(a4 + 24);
              }
              if (v51 >= 0) {
                std::string::size_type v53 = *(unsigned __int8 *)(a4 + 47);
              }
              else {
                std::string::size_type v53 = *(void *)(a4 + 32);
              }
              uint64_t v54 = std::string::append(&buf, v52, v53);
              long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v187.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              int v56 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
              std::string::size_type v57 = v187.__r_.__value_.__r.__words[0];
              double v58 = sub_100044A78(a4);
              uint64_t v59 = *(void *)(a1 + 20);
              uint64_t v60 = &v187;
              if (v56 < 0) {
                uint64_t v60 = (std::string *)v57;
              }
              uint64_t v61 = *(void *)(a4 + 72);
              uint64_t v62 = *(void *)(a4 + 80);
              if (v152) {
                int v63 = 76;
              }
              else {
                int v63 = 46;
              }
              uint64_t v64 = *(void *)(a1 + 4);
              uint64_t v65 = *(void *)(a1 + 12);
              if (v151) {
                int v66 = 67;
              }
              else {
                int v66 = 46;
              }
              LODWORD(v188.__r_.__value_.__l.__data_) = 136385027;
              *(std::string::size_type *)((char *)v188.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
              WORD2(v188.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v188.__r_.__value_.__r.__words[1] + 6) = v155;
              WORD1(v188.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v188.__r_.__value_.__r.__words[2]) = v154;
              __int16 v189 = 1024;
              int v190 = v153;
              __int16 v191 = 1024;
              int v192 = v66;
              __int16 v193 = 1024;
              int v194 = v63;
              __int16 v195 = 1026;
              int v196 = a6;
              __int16 v197 = 2050;
              double v198 = v58;
              __int16 v199 = 2050;
              double v200 = a2;
              __int16 v201 = 2049;
              double v202 = v28;
              __int16 v203 = 2049;
              double v204 = v29;
              __int16 v205 = 2049;
              double v206 = v40;
              __int16 v207 = 2049;
              double v208 = v27;
              __int16 v209 = 2050;
              uint64_t v210 = v59;
              __int16 v211 = 2049;
              uint64_t v212 = v61;
              __int16 v213 = 2049;
              uint64_t v214 = v62;
              __int16 v215 = 2049;
              uint64_t v216 = v64;
              __int16 v217 = 2049;
              uint64_t v218 = v65;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,", (uint8_t *)&v188, 0x9Eu);
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&v188, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022E9B10);
              }
              sub_100918454((const void **)a4, &v187);
              int v67 = SHIBYTE(v187.__r_.__value_.__r.__words[2]);
              std::string::size_type v148 = v187.__r_.__value_.__r.__words[0];
              double v68 = sub_100044A78(a4);
              uint64_t v69 = *(void *)(a1 + 20);
              long long v70 = &v187;
              if (v67 < 0) {
                long long v70 = (std::string *)v148;
              }
              uint64_t v71 = *(void *)(a4 + 72);
              uint64_t v72 = *(void *)(a4 + 80);
              if (v152) {
                int v73 = 76;
              }
              else {
                int v73 = 46;
              }
              uint64_t v74 = *(void *)(a1 + 4);
              uint64_t v75 = *(void *)(a1 + 12);
              if (v151) {
                int v76 = 67;
              }
              else {
                int v76 = 46;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136385027;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v155;
              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf.__r_.__value_.__r.__words[2]) = v154;
              __int16 v157 = 1024;
              int v158 = v153;
              __int16 v159 = 1024;
              int v160 = v76;
              __int16 v161 = 1024;
              int v162 = v73;
              __int16 v163 = 1026;
              int v164 = a6;
              __int16 v165 = 2050;
              double v166 = v68;
              __int16 v167 = 2050;
              double v168 = a2;
              __int16 v169 = 2049;
              double v170 = v28;
              __int16 v171 = 2049;
              double v172 = v29;
              __int16 v173 = 2049;
              double v174 = v40;
              __int16 v175 = 2049;
              double v176 = v27;
              __int16 v177 = 2050;
              uint64_t v178 = v69;
              __int16 v179 = 2049;
              uint64_t v180 = v71;
              __int16 v181 = 2049;
              uint64_t v182 = v72;
              __int16 v183 = 2049;
              uint64_t v184 = v74;
              __int16 v185 = 2049;
              uint64_t v186 = v75;
              uint64_t v77 = (std::string *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
LABEL_319:
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v77);
              if (v77 != &v188) {
                free(v77);
              }
              goto LABEL_171;
            }
            goto LABEL_171;
          }
        }
LABEL_67:
        if (v28 > 0.0) {
          goto LABEL_69;
        }
        goto LABEL_68;
    }
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022E9B10);
  }
  unsigned int v17 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
  {
    sub_1000AB340(a1);
    __int16 v18 = (v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v188
        : (std::string *)v188.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Fence: location, why are you unknown?, %{private}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&v188, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    sub_1000AB340(a1);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v19 = &buf;
    }
    else {
      __int16 v19 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v187.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)", "%s\n", (const char *)v20);
    if (v20 != &v188) {
      free(v20);
    }
  }
LABEL_30:
  int v14 = *a5;
LABEL_31:
  uint64_t result = v10 != 0;
  *(_DWORD *)a7 = v14;
  return result;
}

void sub_1000447E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(exception_object);
}

#error "100044A74: call analysis failed (funcsize=129)"

double sub_100044A78(uint64_t a1)
{
  double v2 = fmax(sub_100044AD4(a1), *(double *)(a1 + 88));
  if (*(_DWORD *)(a1 + 168) <= 1u && v2 < *((double *)sub_100044B44() + 2)) {
    return *((double *)sub_100044B44() + 2);
  }
  return v2;
}

double sub_100044AD4(uint64_t a1)
{
  if (*sub_100044B44() || sub_100044B44()[1] && *(unsigned char *)(a1 + 176))
  {
    sub_100103240();
    char v2 = sub_1001073D0();
    id v3 = sub_100044B44();
    double v4 = (uint64_t *)(v3 + 24);
    if ((v2 & 8) != 0) {
      double v4 = (uint64_t *)(v3 + 8);
    }
  }
  else
  {
    double v4 = &qword_102473550;
  }
  return *(double *)v4;
}

char *sub_100044B44()
{
  return &byte_1024760C0;
}

void sub_100044B50(uint64_t a1, unsigned int a2, int *a3, uint64_t a4)
{
  uint64_t v7 = a4 + 8;
  if (*(char *)(a4 + 31) >= 0) {
    uint64_t v8 = a4 + 8;
  }
  else {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  uint64_t v132 = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", +[NSString stringWithUTF8String:v8], 105);
  uint64_t v9 = (CLClientKeyPath *)[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:];
  uint64_t v133 = (unsigned int *)a3;
  if ((*a3 - 10) >= 2)
  {
    if (*a3 == 12)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v18 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a4 + 31) >= 0) {
          uint64_t v19 = v7;
        }
        else {
          uint64_t v19 = *(void *)(a4 + 8);
        }
        unsigned int v20 = [(CLClientKeyPath *)v9 isValidCKP];
        int v21 = *(unsigned __int8 *)(a4 + 105);
        *(_DWORD *)std::string buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v19;
        *(_WORD *)&unsigned char buf[28] = 2114;
        *(void *)&buf[30] = v9;
        *(_WORD *)&unsigned char buf[38] = 1026;
        *(_DWORD *)&unsigned char buf[40] = v20;
        *(_WORD *)&buf[44] = 1026;
        *(_DWORD *)&buf[46] = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"AppProtection notification\", \"NotificationData.bundleId\":%{public, location:escape_only}s, \"ckp\":%{public, location:escape_only}@, \"isValidCkp\":%{public}hhd, \"isAppHidden\":%{public}hhd}", buf, 0x32u);
      }
      if ([(CLClientKeyPath *)v9 isValidCKP])
      {
        __int16 v22 = *(void **)(a1 + 136);
        if (*(unsigned char *)(a4 + 105))
        {
          [v22 setBool:1 forKey:@"Hidden" atKeyPath:v9];
          unsigned __int8 v23 = [*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v9 defaultValue:0];
          if ((v23 & 2) != 0) {
            unsigned int v24 = [*(id *)(a1 + 136) BOOLForKey:@"ProvisionalMonitoring" atKeyPath:v9 defaultValue:0];
          }
          else {
            unsigned int v24 = 0;
          }
          if ((v23 & 4) != 0 || v24)
          {
            sub_1007DC2D0(a1, (uint64_t)v9, 1, 0);
            [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationUpgradeAvailable" atKeyPath:v9];
            sub_1007C1F6C(a1, (uint64_t)v9, 2uLL, (uint64_t)[*(id *)(a1 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:v9 defaultValue:0], 0, 1, 1);
          }
        }
        else
        {
          [v22 removeValueForKey:@"Hidden" atKeyPath:v9];
          [*(id *)(a1 + 136) persist];
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      double v25 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        double v26 = sub_1000A7F94(a3);
        int v27 = *(_DWORD *)a4;
        if (*(char *)(a4 + 31) >= 0) {
          uint64_t v28 = v7;
        }
        else {
          uint64_t v28 = *(void *)(a4 + 8);
        }
        *(_DWORD *)std::string buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v26;
        *(_WORD *)&unsigned char buf[28] = 1026;
        *(_DWORD *)&buf[30] = v27;
        *(_WORD *)&buf[34] = 2082;
        *(void *)&buf[36] = v28;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"AppMonitor notification\", \"notification\":%{public, location:escape_only}s, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s}", buf, 0x2Cu);
      }
      int v29 = *a3;
      if (*a3 == 2)
      {
        v135[0] = 0;
        v135[1] = 0;
        v136[0] = 0;
        unsigned int v30 = *(void **)(a1 + 816);
        int v31 = (void *)(a1 + 824);
        if (v30 != (void *)(a1 + 824))
        {
          do
          {
            double v33 = (CLConnection *)v30[4];
            uint64_t v32 = v30[5];
            if (CLConnection::getRemotePid(v33) == *(_DWORD *)a4)
            {
              id v34 = [sub_100138248(v32, 0) clientKey];
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              double v35 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 138543362;
                *(void *)&uint8_t buf[4] = v34;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "'%{public}@' task suspended: removing client", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
                *(_DWORD *)int v144 = 138543362;
                *(void *)&v144[4] = v34;
                size_t v48 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v48);
                if (v48 != (char *)buf) {
                  free(v48);
                }
              }
              uint64_t v36 = (char *)v135[1];
              if (v135[1] >= v136[0])
              {
                int64_t v38 = ((char *)v135[1] - (char *)v135[0]) >> 3;
                if ((unint64_t)(v38 + 1) >> 61) {
                  sub_1001D7FD4();
                }
                unint64_t v39 = ((char *)v136[0] - (char *)v135[0]) >> 2;
                if (v39 <= v38 + 1) {
                  unint64_t v39 = v38 + 1;
                }
                if ((void *)((char *)v136[0] - (char *)v135[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
                  unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v39;
                }
                if (v40) {
                  double v41 = (char *)sub_1000DA54C((uint64_t)v136, v40);
                }
                else {
                  double v41 = 0;
                }
                BOOL v42 = (CLConnection **)&v41[8 * v38];
                *BOOL v42 = v33;
                int v37 = v42 + 1;
                BOOL v44 = (char *)v135[0];
                uint64_t v43 = (char *)v135[1];
                if (v135[1] != v135[0])
                {
                  do
                  {
                    uint64_t v45 = (CLConnection *)*((void *)v43 - 1);
                    v43 -= 8;
                    *--BOOL v42 = v45;
                  }
                  while (v43 != v44);
                  uint64_t v43 = (char *)v135[0];
                }
                v135[0] = v42;
                v135[1] = v37;
                v136[0] = &v41[8 * v40];
                if (v43) {
                  operator delete(v43);
                }
              }
              else
              {
                *(void *)v135[1] = v33;
                int v37 = v36 + 8;
              }
              v135[1] = v37;
            }
            uint64_t v46 = (void *)v30[1];
            if (v46)
            {
              do
              {
                int v47 = v46;
                uint64_t v46 = (void *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                int v47 = (void *)v30[2];
                BOOL v122 = *v47 == (void)v30;
                unsigned int v30 = v47;
              }
              while (!v122);
            }
            unsigned int v30 = v47;
          }
          while (v47 != v31);
        }
        os_log_type_t v49 = *(void **)(a1 + 840);
        if (v49 != (void *)(a1 + 848))
        {
          do
          {
            int v51 = (CLConnection *)v49[4];
            uint64_t v50 = v49[5];
            if (CLConnection::getRemotePid(v51) == *(_DWORD *)a4)
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              double v52 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
              {
                (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v50 + 24))(buf, v50);
                std::string::size_type v53 = buf;
                if ((buf[23] & 0x80u) != 0) {
                  std::string::size_type v53 = *(uint8_t **)buf;
                }
                *(_DWORD *)int v144 = 136446210;
                *(void *)&v144[4] = v53;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "'%{public}s' task suspended: removing client", v144, 0xCu);
                if ((char)buf[23] < 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
                (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v50 + 24))(v144, v50);
                int v66 = v144;
                if (v145 < 0) {
                  int v66 = *(unsigned char **)v144;
                }
                int v146 = 136446210;
                int v147 = v66;
                int v67 = (char *)_os_log_send_and_compose_impl();
                if (v145 < 0) {
                  operator delete(*(void **)v144);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v67);
                if (v67 != (char *)buf) {
                  free(v67);
                }
              }
              uint64_t v54 = (char *)v135[1];
              if (v135[1] >= v136[0])
              {
                int64_t v56 = ((char *)v135[1] - (char *)v135[0]) >> 3;
                if ((unint64_t)(v56 + 1) >> 61) {
                  sub_1001D7FD4();
                }
                unint64_t v57 = ((char *)v136[0] - (char *)v135[0]) >> 2;
                if (v57 <= v56 + 1) {
                  unint64_t v57 = v56 + 1;
                }
                if ((void *)((char *)v136[0] - (char *)v135[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
                  unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v57;
                }
                if (v58) {
                  uint64_t v59 = (char *)sub_1000DA54C((uint64_t)v136, v58);
                }
                else {
                  uint64_t v59 = 0;
                }
                uint64_t v60 = (CLConnection **)&v59[8 * v56];
                *uint64_t v60 = v51;
                long long v55 = v60 + 1;
                uint64_t v62 = (char *)v135[0];
                uint64_t v61 = (char *)v135[1];
                if (v135[1] != v135[0])
                {
                  do
                  {
                    int v63 = (CLConnection *)*((void *)v61 - 1);
                    v61 -= 8;
                    *--uint64_t v60 = v63;
                  }
                  while (v61 != v62);
                  uint64_t v61 = (char *)v135[0];
                }
                v135[0] = v60;
                v135[1] = v55;
                v136[0] = &v59[8 * v58];
                if (v61) {
                  operator delete(v61);
                }
              }
              else
              {
                *(void *)v135[1] = v51;
                long long v55 = v54 + 8;
              }
              v135[1] = v55;
            }
            uint64_t v64 = (void *)v49[1];
            if (v64)
            {
              do
              {
                uint64_t v65 = v64;
                uint64_t v64 = (void *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                uint64_t v65 = (void *)v49[2];
                BOOL v122 = *v65 == (void)v49;
                os_log_type_t v49 = v65;
              }
              while (!v122);
            }
            os_log_type_t v49 = v65;
          }
          while (v65 != (void *)(a1 + 848));
        }
        double v68 = *(void **)(a1 + 912);
        if (v68 != (void *)(a1 + 920))
        {
          do
          {
            uint64_t v69 = v68[4];
            if ([(id)sub_10014D19C(v69) isEqual:v9])
            {
              id v70 = [(id)sub_10014D19C(v69) clientKey];
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              uint64_t v71 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&unsigned char buf[18] = 2114;
                *(void *)&buf[20] = v70;
                *(_WORD *)&unsigned char buf[28] = 2050;
                *(void *)&buf[30] = v69;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic task suspended: cancelling retirement\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
              }
              sub_1011C2B48(v69);
            }
            uint64_t v72 = (void *)v68[1];
            if (v72)
            {
              do
              {
                int v73 = v72;
                uint64_t v72 = (void *)*v72;
              }
              while (v72);
            }
            else
            {
              do
              {
                int v73 = (void *)v68[2];
                BOOL v122 = *v73 == (void)v68;
                double v68 = v73;
              }
              while (!v122);
            }
            double v68 = v73;
          }
          while (v73 != (void *)(a1 + 920));
        }
        uint64_t v74 = *(void **)(a1 + 888);
        if (v74 != (void *)(a1 + 896))
        {
          do
          {
            int v76 = (CLConnection *)v74[4];
            uint64_t v75 = v74[5];
            if (CLConnection::getRemotePid(v76) == *(_DWORD *)a4)
            {
              id v77 = [(id)sub_10014D19C(v75) clientKey];
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              __int16 v78 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 138543362;
                *(void *)&uint8_t buf[4] = v77;
                _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "'%{public}@' task suspended: removing daemonIdentifiableClient #dic", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
                *(_DWORD *)int v144 = 138543362;
                *(void *)&v144[4] = v77;
                double v91 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v91);
                if (v91 != (char *)buf) {
                  free(v91);
                }
              }
              size_t v79 = (char *)v135[1];
              if (v135[1] >= v136[0])
              {
                int64_t v81 = ((char *)v135[1] - (char *)v135[0]) >> 3;
                if ((unint64_t)(v81 + 1) >> 61) {
                  sub_1001D7FD4();
                }
                unint64_t v82 = ((char *)v136[0] - (char *)v135[0]) >> 2;
                if (v82 <= v81 + 1) {
                  unint64_t v82 = v81 + 1;
                }
                if ((void *)((char *)v136[0] - (char *)v135[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
                  unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v82;
                }
                if (v83) {
                  std::string::size_type v84 = (char *)sub_1000DA54C((uint64_t)v136, v83);
                }
                else {
                  std::string::size_type v84 = 0;
                }
                char v85 = (CLConnection **)&v84[8 * v81];
                *char v85 = v76;
                int v80 = v85 + 1;
                int v87 = (char *)v135[0];
                long long v86 = (char *)v135[1];
                if (v135[1] != v135[0])
                {
                  do
                  {
                    std::string::size_type v88 = (CLConnection *)*((void *)v86 - 1);
                    v86 -= 8;
                    *--char v85 = v88;
                  }
                  while (v86 != v87);
                  long long v86 = (char *)v135[0];
                }
                v135[0] = v85;
                v135[1] = v80;
                v136[0] = &v84[8 * v83];
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                *(void *)v135[1] = v76;
                int v80 = v79 + 8;
              }
              v135[1] = v80;
            }
            double v89 = (void *)v74[1];
            if (v89)
            {
              do
              {
                uint64_t v90 = v89;
                double v89 = (void *)*v89;
              }
              while (v89);
            }
            else
            {
              do
              {
                uint64_t v90 = (void *)v74[2];
                BOOL v122 = *v90 == (void)v74;
                uint64_t v74 = v90;
              }
              while (!v122);
            }
            uint64_t v74 = v90;
          }
          while (v90 != (void *)(a1 + 896));
        }
        uint64_t v92 = (CLConnection **)v135[0];
        if (v135[0] != v135[1])
        {
          do
            sub_1001B469C(a1, *v92++);
          while (v92 != v135[1]);
          uint64_t v92 = (CLConnection **)v135[0];
        }
        if (v92)
        {
          v135[1] = v92;
          operator delete(v92);
        }
        int v29 = *a3;
      }
      if (v29 == 1 && [(CLClientKeyPath *)v9 isValidCKP])
      {
        uint64_t v93 = *(void **)(a1 + 912);
        int v94 = (void *)(a1 + 920);
        if (v93 != (void *)(a1 + 920))
        {
          do
          {
            uint64_t v95 = v93[4];
            if ([(id)sub_10014D19C(v95) isEqual:v9])
            {
              id v96 = [(id)sub_10014D19C(v95) clientKey];
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              int v97 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&unsigned char buf[18] = 2114;
                *(void *)&buf[20] = v96;
                *(_WORD *)&unsigned char buf[28] = 2050;
                *(void *)&buf[30] = v95;
                _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic cancelRetirement due to termination before actual dic death\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
              }
              sub_1011C2B48(v95);
            }
            int v98 = (void *)v93[1];
            if (v98)
            {
              do
              {
                char v99 = v98;
                int v98 = (void *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                char v99 = (void *)v93[2];
                BOOL v122 = *v99 == (void)v93;
                uint64_t v93 = v99;
              }
              while (!v122);
            }
            uint64_t v93 = v99;
          }
          while (v99 != v94);
        }
        if (*(unsigned char *)(a4 + 104))
        {
          size_t v100 = *(void **)(a1 + 888);
          if (v100 != (void *)(a1 + 896))
          {
            do
            {
              uint64_t v101 = v100[5];
              if ((*(unsigned int (**)(uint64_t))(*(void *)v101 + 24))(v101) == 3
                && [(id)sub_10014D19C(v101) isEqual:v9])
              {
                id v102 = [(id)sub_10014D19C(v101) clientKey];
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
                int v103 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)std::string buf = 68289538;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&unsigned char buf[18] = 2114;
                  *(void *)&buf[20] = v102;
                  *(_WORD *)&unsigned char buf[28] = 2050;
                  *(void *)&buf[30] = v101;
                  _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic #bas marking eligible for destructionUponDisconnection due to UserTermination\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
                }
                sub_1011C24A0(v101);
              }
              uint64_t v104 = (void *)v100[1];
              if (v104)
              {
                do
                {
                  std::string::size_type v105 = v104;
                  uint64_t v104 = (void *)*v104;
                }
                while (v104);
              }
              else
              {
                do
                {
                  std::string::size_type v105 = (void *)v100[2];
                  BOOL v122 = *v105 == (void)v100;
                  size_t v100 = v105;
                }
                while (!v122);
              }
              size_t v100 = v105;
            }
            while (v105 != (void *)(a1 + 896));
          }
          memset(buf, 0, 24);
          long long v106 = *(void **)(a1 + 912);
          if (v106 != v94)
          {
            do
            {
              uint64_t v107 = v106[4];
              if ((*(unsigned int (**)(uint64_t))(*(void *)v107 + 24))(v107) == 3
                && [(id)sub_10014D19C(v107) isEqual:v9])
              {
                uint64_t v108 = *(void *)&buf[8];
                if (*(void *)&buf[8] >= *(void *)&buf[16])
                {
                  uint64_t v110 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
                  if ((unint64_t)(v110 + 1) >> 61) {
                    sub_1001D7FD4();
                  }
                  unint64_t v111 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
                  if (v111 <= v110 + 1) {
                    unint64_t v111 = v110 + 1;
                  }
                  if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
                    unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v112 = v111;
                  }
                  if (v112) {
                    int v113 = (char *)sub_1000DA54C((uint64_t)&buf[16], v112);
                  }
                  else {
                    int v113 = 0;
                  }
                  double v114 = (uint64_t *)&v113[8 * v110];
                  uint64_t *v114 = v107;
                  long long v109 = v114 + 1;
                  uint64_t v116 = *(char **)buf;
                  std::string::size_type v115 = *(char **)&buf[8];
                  if (*(void *)&buf[8] != *(void *)buf)
                  {
                    do
                    {
                      uint64_t v117 = *((void *)v115 - 1);
                      v115 -= 8;
                      *--double v114 = v117;
                    }
                    while (v115 != v116);
                    std::string::size_type v115 = *(char **)buf;
                  }
                  *(void *)std::string buf = v114;
                  *(void *)&uint8_t buf[8] = v109;
                  *(void *)&uint8_t buf[16] = &v113[8 * v112];
                  if (v115) {
                    operator delete(v115);
                  }
                }
                else
                {
                  **(void **)&uint8_t buf[8] = v107;
                  long long v109 = (void *)(v108 + 8);
                }
                *(void *)&uint8_t buf[8] = v109;
              }
              uint64_t v118 = (void *)v106[1];
              if (v118)
              {
                do
                {
                  uint64_t v119 = v118;
                  uint64_t v118 = (void *)*v118;
                }
                while (v118);
              }
              else
              {
                do
                {
                  uint64_t v119 = (void *)v106[2];
                  BOOL v122 = *v119 == (void)v106;
                  long long v106 = v119;
                }
                while (!v122);
              }
              long long v106 = v119;
            }
            while (v119 != v94);
            size_t v120 = *(unint64_t **)buf;
            uint64_t v121 = *(unint64_t **)&buf[8];
            if (*(void *)buf != *(void *)&buf[8])
            {
              do
                sub_1007B3BD8(a1, *v120++);
              while (v120 != v121);
              uint64_t v121 = *(unint64_t **)buf;
            }
            if (v121)
            {
              *(void *)&uint8_t buf[8] = v121;
              operator delete(v121);
            }
          }
        }
      }
      BOOL v122 = *v133 > 6 || ((1 << *v133) & 0x58) == 0;
      if (!v122)
      {
        int v123 = *(void **)(a1 + 912);
        if (v123 != (void *)(a1 + 920))
        {
          do
          {
            uint64_t v124 = v123[4];
            if ([(id)sub_10014D19C(v124) isEqual:v9])
            {
              id v125 = [(id)sub_10014D19C(v124) clientKey];
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              uint64_t v126 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&unsigned char buf[18] = 2114;
                *(void *)&buf[20] = v125;
                *(_WORD *)&unsigned char buf[28] = 2050;
                *(void *)&buf[30] = v124;
                _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic triggerRetirement\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
              }
              sub_1011C2514(v124);
            }
            long long v127 = (void *)v123[1];
            if (v127)
            {
              do
              {
                int v128 = v127;
                long long v127 = (void *)*v127;
              }
              while (v127);
            }
            else
            {
              do
              {
                int v128 = (void *)v123[2];
                BOOL v122 = *v128 == (void)v123;
                int v123 = v128;
              }
              while (!v122);
            }
            int v123 = v128;
          }
          while (v128 != (void *)(a1 + 920));
        }
      }
      if (![(CLClientKeyPath *)v9 isValidCKP])
      {
        memset(buf, 0, 41);
        [*(id *)(a1 + 136) expensivelyGetIdentifyingInformation:buf forClient:v132];
        uint64_t v9 = +[CLClientKeyPath clientKeyPathWithClientAnchor:*(void *)buf anchorType:105];
      }
      sub_1000679DC(*(void **)(a1 + 376), a2, v133, (int *)a4, v9);
      if (*v133 == 4 && *(unsigned char *)(a1 + 1059))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v129 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_INFO, "Trial period #reprompt disarmed by foregrounded app", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          LOWORD(v135[0]) = 0;
          uint64_t v130 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v130);
          if (v130 != (char *)buf) {
            free(v130);
          }
        }
        *(unsigned char *)(a1 + 1059) = 0;
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = sub_1000A7F94(a3);
      uint64_t v14 = *(void *)(a4 + 80);
      uint64_t v13 = a4 + 80;
      uint64_t v12 = v14;
      if (*(char *)(v13 - 49) >= 0) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = *(void *)(v13 - 72);
      }
      if (*(char *)(v13 - 1) >= 0) {
        uint64_t v16 = v13 - 24;
      }
      else {
        uint64_t v16 = *(void *)(v13 - 24);
      }
      if (*(char *)(v13 + 23) >= 0) {
        uint64_t v12 = v13;
      }
      *(_DWORD *)std::string buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v11;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v15;
      *(_WORD *)&unsigned char buf[38] = 2082;
      *(void *)&unsigned char buf[40] = v16;
      *(_WORD *)&unsigned char buf[48] = 2082;
      *(void *)&buf[50] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"AppMonitor - application (un)installation notification\", \"notification\":%{public, location:escape_only}s, \"BundleId\":%{public, location:escape_only}s, \"BundlePath\":%{public, location:escape_only}s, \"ExecutablePath\":%{public, location:escape_only}s}", buf, 0x3Au);
    }
    if (*a3 == 10)
    {
      if ([(CLClientKeyPath *)v9 isValidCKP])
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        unsigned int v17 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2114;
          *(void *)&buf[20] = v9;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reregistering client key path due to app update\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        [*(id *)(a1 + 136) registerClient:v9 fromAuthSync:0];
      }
    }
    else
    {
      sub_100134750(__p, "ClientRemoved");
      sub_1007A9D70(a1, v9, 1, (uint64_t *)__p);
      if (v143 < 0) {
        operator delete(__p[0]);
      }
      memset(buf, 0, 99);
      long long v149 = 0u;
      memset(v150, 0, 59);
      if (v132)
      {
        [(CLClientKeyPath *)v132 clientName];
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        uint64_t v141 = 0;
        memset(v140, 0, sizeof(v140));
        *(_OWORD *)double v139 = 0uLL;
        *(_OWORD *)int v137 = 0uLL;
        memset(v138, 0, sizeof(v138));
        memset(v136, 0, sizeof(v136));
        *(_OWORD *)uint64_t v135 = 0uLL;
      }
      *(_OWORD *)std::string buf = *(_OWORD *)v135;
      *(void **)&uint8_t buf[16] = v136[0];
      HIBYTE(v136[0]) = 0;
      LOBYTE(v135[0]) = 0;
      if ((char)buf[47] < 0) {
        operator delete(*(void **)&buf[24]);
      }
      *(_OWORD *)&uint8_t buf[24] = *(_OWORD *)&v136[1];
      *(void **)&unsigned char buf[40] = v136[3];
      HIBYTE(v136[3]) = 0;
      LOBYTE(v136[1]) = 0;
      if ((char)buf[71] < 0) {
        operator delete(*(void **)&buf[48]);
      }
      *(_OWORD *)&unsigned char buf[48] = *(_OWORD *)v137;
      *(void **)&unsigned char buf[64] = v138[0];
      HIBYTE(v138[0]) = 0;
      LOBYTE(v137[0]) = 0;
      if ((char)buf[95] < 0) {
        operator delete(*(void **)&buf[72]);
      }
      *(_OWORD *)&buf[72] = *(_OWORD *)&v138[1];
      *(void **)&buf[88] = v138[3];
      HIBYTE(v138[3]) = 0;
      LOBYTE(v138[1]) = 0;
      *(_WORD *)&buf[96] = v138[4];
      buf[98] = BYTE2(v138[4]);
      if (SBYTE7(v150[0]) < 0) {
        operator delete((void *)v149);
      }
      long long v149 = *(_OWORD *)&v138[5];
      *(void **)&v150[0] = v138[7];
      HIBYTE(v138[7]) = 0;
      LOBYTE(v138[5]) = 0;
      if (SHIBYTE(v150[1]) < 0) {
        operator delete(*((void **)&v150[0] + 1));
      }
      *(_OWORD *)((char *)v150 + 8) = *(_OWORD *)v139;
      *((void *)&v150[1] + 1) = *(void *)&v140[0];
      BYTE7(v140[0]) = 0;
      LOBYTE(v139[0]) = 0;
      if (SBYTE7(v150[3]) < 0) {
        operator delete(*(void **)&v150[2]);
      }
      v150[2] = *(_OWORD *)((char *)v140 + 8);
      *(void *)&v150[3] = *((void *)&v140[1] + 1);
      HIBYTE(v140[1]) = 0;
      BYTE8(v140[0]) = 0;
      WORD4(v150[3]) = v141;
      BYTE10(v150[3]) = BYTE2(v141);
      if (SHIBYTE(v138[7]) < 0) {
        operator delete(v138[5]);
      }
      if (SHIBYTE(v138[3]) < 0) {
        operator delete(v138[1]);
      }
      if (SHIBYTE(v138[0]) < 0) {
        operator delete(v137[0]);
      }
      if (SHIBYTE(v136[3]) < 0) {
        operator delete(v136[1]);
      }
      if (SHIBYTE(v136[0]) < 0) {
        operator delete(v135[0]);
      }
      LODWORD(v135[0]) = 1;
      (*(void (**)(uint64_t, void **, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v135, buf, 0, 0xFFFFFFFFLL, 0);
      if (SBYTE7(v150[3]) < 0) {
        operator delete(*(void **)&v150[2]);
      }
      if (SHIBYTE(v150[1]) < 0) {
        operator delete(*((void **)&v150[0] + 1));
      }
      if (SBYTE7(v150[0]) < 0) {
        operator delete((void *)v149);
      }
      if ((char)buf[95] < 0) {
        operator delete(*(void **)&buf[72]);
      }
      if ((char)buf[71] < 0) {
        operator delete(*(void **)&buf[48]);
      }
      if ((char)buf[47] < 0) {
        operator delete(*(void **)&buf[24]);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_1000464D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004659C(uint64_t a1)
{
  *(void *)a1 = off_1023190C8;
  sub_10012B784(a1, 0xFFFFFFFFLL);

  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 176) = 0;
  *(double *)&long long v2 = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 312))
  {
    double v3 = *(double *)&v2;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    double v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 24);
      *(void *)double v26 = 68289282;
      *(_WORD *)&v26[8] = 2082;
      *(void *)&v26[10] = "";
      *(_WORD *)&v26[18] = 2114;
      *(void *)&v26[20] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ending metric session (LocationUpdateSession)\", \"Client\":%{public, location:escape_only}@}", v26, 0x1Cu);
    }
    *(double *)(a1 + 376) = v3;
    *(unsigned char *)(a1 + 432) = *(unsigned char *)(a1 + 236);
    if (*(unsigned char *)(a1 + 58)) {
      *(double *)(a1 + 504) = *(double *)(a1 + 504) + v3 - *(double *)(a1 + 64);
    }
    uint64_t v6 = sub_10071B604();
    sub_10071C074(v6, (unsigned __int8 *)(a1 + 312));
    memset(v26, 0, sizeof(v26));
    long long v7 = 0uLL;
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0xBFF0000000000000;
    uint64_t v8 = (void **)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
    {
      operator delete(*v8);
      long long v7 = 0uLL;
    }
    *(_OWORD *)uint64_t v8 = v7;
    *(_OWORD *)(a1 + 344) = v7;
    *(_DWORD *)(a1 + 360) = 1000;
    *(_DWORD *)(a1 + 372) = 0;
    *(void *)(a1 + 364) = 0;
    *(void *)(a1 + 376) = 0xBFF0000000000000;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 384) = xmmword_101D1C570;
    *(_OWORD *)(a1 + 400) = _Q1;
    *(_OWORD *)(a1 + 416) = _Q1;
    *(unsigned char *)(a1 + 432) = 0;
    *(void *)(a1 + 496) = *(void *)&v26[63];
    *(void *)(a1 + 504) = 0xBFF0000000000000;
    long long v14 = *(_OWORD *)&v26[48];
    *(_OWORD *)(a1 + 465) = *(_OWORD *)&v26[32];
    *(_OWORD *)(a1 + 481) = v14;
    long long v2 = *(_OWORD *)&v26[16];
    *(_OWORD *)(a1 + 433) = *(_OWORD *)v26;
    *(_OWORD *)(a1 + 449) = v2;
  }
  [*(id *)(a1 + 576) invalidate:v2, v26, v26[16]];

  *(void *)(a1 + 576) = 0;
  if (*(unsigned char *)(a1 + 88)) {
    [*(id *)(a1 + 72) releaseAccuracyEnablementAssertionForClient:*(void *)(a1 + 48)];
  }

  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t v15 = (void *)sub_1001A02B0(a1, 0);
  [v15 invalidate:1];

  uint64_t v16 = *(void **)(a1 + 112);
  if (v16)
  {
    [v16 invalidate];

    *(void *)(a1 + 112) = 0;
  }
  [*(id *)(a1 + 280) invalidate];

  *(void *)(a1 + 280) = 0;
  uint64_t v17 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  [*(id *)(a1 + 48) setValid:0];

  *(void *)(a1 + 48) = 0;
  sub_10012E38C((void *)(a1 + 552));
  sub_10012E38C((void *)(a1 + 520));
  sub_10012D234((id **)(a1 + 512), 0);
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 296);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  uint64_t v20 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_10017FD18((uint64_t *)(a1 + 104), 0);
  sub_100029A7C(a1);
  return a1;
}

void sub_1000469E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

NSDictionary *sub_1000469F4(uint64_t a1)
{
  v3[0] = @"logSequenceID";
  v4[0] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0)];
  v3[1] = @"timestamp";
  v4[1] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 32) + 1)];
  void v3[2] = @"temperature";
  v4[2] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 9)];
  v3[3] = @"biasX";
  v4[3] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 13)];
  void v3[4] = @"biasY";
  v4[4] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 17)];
  v3[5] = @"biasZ";
  v4[5] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 21)];
  v3[6] = @"biasUncertaintyX";
  v4[6] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 25)];
  v3[7] = @"biasUncertaintyY";
  v4[7] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 29)];
  v3[8] = @"biasUncertaintyZ";
  v4[8] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 33)];
  v3[9] = @"dynamicBiasX";
  v4[9] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 37)];
  v3[10] = @"dynamicBiasY";
  v4[10] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 41)];
  v3[11] = @"dynamicBiasZ";
  v4[11] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 45)];
  v3[12] = @"temperatureFitUncertaintyX";
  v4[12] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 49)];
  v3[13] = @"temperatureFitUncertaintyY";
  v4[13] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 53)];
  v3[14] = @"temperatureFitUncertaintyZ";
  v4[14] = +[NSNumber numberWithDouble:*(float *)(*(void *)(a1 + 32) + 57)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:15];
}

uint64_t sub_100046C90(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(v14, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long v14 = *(_OWORD *)a5;
    uint64_t v15 = *(void *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a5 + 24);
    uint64_t v17 = *(void *)(a5 + 40);
  }
  uint64_t v18 = *(void *)(a5 + 48);
  sub_10001FAF4(a1, a2, a3, a4, (long long *)v14);
  *(void *)a1 = off_10232B5C8;
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  *(void *)a1 = off_10232B480;
  *(void *)(a1 + 256) = [[CLVisitMonitoringSubscriptionAdapter alloc] initWithSubscription:a1];
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 276) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  id v10 = [[objc_msgSend(*(id *)(a1 + 128), "vendor") proxyForService:@"CLRoutineMonitor"];
  *(void *)(a1 + 264) = v10;
  [v10 registerDelegate:*(void *)(a1 + 256) inSilo:[*(id *)(a1 + 128) silo]];
  id v11 = [objc_msgSend(*(id *)(a1 + 128), "vendor") proxyForService:@"CLLocationCorrectiveCompensator"];
  *(void *)(a1 + 280) = v11;
  [v11 registerDelegate:*(void *)(a1 + 256) inSilo:[*(id *)(a1 + 128) silo]];
  id v12 = [[[*(id *)(a1 + 128) vendor] proxyForService:@"CLClientManager"];
  *(void *)(a1 + 288) = v12;
  [v12 registerDelegate:*(void *)(a1 + 256) inSilo:[*(id *)(a1 + 128) silo]];
  return a1;
}

void sub_100046E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046FD4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      id v10 = (uint64_t *)v4;
    }
    else {
      id v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  id v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  *(void *)(a3 + 16) = *((void *)v11 + 2);
  *(_OWORD *)a3 = v12;
  return 1;
}

void sub_10004703C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) - *(double *)(a4 + 76) <= *(double *)(a1 + 440))
  {
    double v6 = *(double *)(a4 + 20);
    if (v6 >= 0.0)
    {
      if (v6 <= 1000.0)
      {
        id v9 = objc_alloc((Class)CLPLocation);
        long long v10 = *(_OWORD *)(a4 + 112);
        void v47[6] = *(_OWORD *)(a4 + 96);
        v47[7] = v10;
        v48[0] = *(_OWORD *)(a4 + 128);
        *(_OWORD *)((char *)v48 + 12) = *(_OWORD *)(a4 + 140);
        long long v11 = *(_OWORD *)(a4 + 48);
        v47[2] = *(_OWORD *)(a4 + 32);
        v47[3] = v11;
        long long v12 = *(_OWORD *)(a4 + 80);
        v47[4] = *(_OWORD *)(a4 + 64);
        v47[5] = v12;
        long long v13 = *(_OWORD *)(a4 + 16);
        v47[0] = *(_OWORD *)a4;
        v47[1] = v13;
        id v14 = [v9 initWithDaemonLocation:v47];
        id v15 = objc_alloc((Class)CLPMotionActivity);
        uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
        v45[0] = *(_OWORD *)v16;
        long long v17 = *(_OWORD *)(v16 + 64);
        long long v19 = *(_OWORD *)(v16 + 16);
        long long v18 = *(_OWORD *)(v16 + 32);
        v45[3] = *(_OWORD *)(v16 + 48);
        v45[4] = v17;
        v45[1] = v19;
        v45[2] = v18;
        long long v21 = *(_OWORD *)(v16 + 96);
        long long v20 = *(_OWORD *)(v16 + 112);
        long long v22 = *(_OWORD *)(v16 + 80);
        uint64_t v46 = *(void *)(v16 + 128);
        void v45[6] = v21;
        v45[7] = v20;
        v45[5] = v22;
        [v14 setRawMotionActivity:[v15 initWithCLMotionActivity:v45]];
        id v23 = objc_alloc((Class)CLPMotionActivity);
        uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
        v43[0] = *(_OWORD *)v24;
        long long v25 = *(_OWORD *)(v24 + 64);
        long long v27 = *(_OWORD *)(v24 + 16);
        long long v26 = *(_OWORD *)(v24 + 32);
        v43[3] = *(_OWORD *)(v24 + 48);
        v43[4] = v25;
        v43[1] = v27;
        v43[2] = v26;
        long long v29 = *(_OWORD *)(v24 + 96);
        long long v28 = *(_OWORD *)(v24 + 112);
        long long v30 = *(_OWORD *)(v24 + 80);
        uint64_t v44 = *(void *)(v24 + 128);
        v43[6] = v29;
        v43[7] = v28;
        v43[5] = v30;
        [v14 setMotionActivity:[v23 initWithCLMotionActivity:v43]];
        id v31 = objc_alloc((Class)CLPMotionActivity);
        uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
        v41[0] = *(_OWORD *)v32;
        long long v33 = *(_OWORD *)(v32 + 64);
        long long v35 = *(_OWORD *)(v32 + 16);
        long long v34 = *(_OWORD *)(v32 + 32);
        v41[3] = *(_OWORD *)(v32 + 48);
        void v41[4] = v33;
        v41[1] = v35;
        v41[2] = v34;
        long long v37 = *(_OWORD *)(v32 + 96);
        long long v36 = *(_OWORD *)(v32 + 112);
        long long v38 = *(_OWORD *)(v32 + 80);
        uint64_t v42 = *(void *)(v32 + 128);
        v41[6] = v37;
        v41[7] = v36;
        v41[5] = v38;
        [v14 setDominantMotionActivity:[v31 initWithCLMotionActivity:v41]];
        [*(id *)(a1 + 400) addObject:v14];
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022ADD90);
        }
        unint64_t v39 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          id v40 = [*(id *)(a1 + 400) count];
          uint64_t buf = 68289539;
          __int16 v50 = 2082;
          int v51 = "";
          __int16 v52 = 2050;
          uint64_t v53 = 9;
          __int16 v54 = 2049;
          id v55 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"adding location to buffer\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"bufferedLocationCount\":%{private}lu}", (uint8_t *)&buf, 0x26u);
        }

        sub_100024744(a1);
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022ADD90);
        }
        uint64_t v7 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          uint64_t buf = 68289282;
          __int16 v50 = 2082;
          int v51 = "";
          __int16 v52 = 2050;
          uint64_t v53 = 9;
          int v8 = "{\"msg%{public}.0s\":\"ignoring inaccurate location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
          goto LABEL_12;
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022ADD90);
      }
      uint64_t v7 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289282;
        __int16 v50 = 2082;
        int v51 = "";
        __int16 v52 = 2050;
        uint64_t v53 = 9;
        int v8 = "{\"msg%{public}.0s\":\"ignoring invalid location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&buf, 0x1Cu);
      }
    }
  }
}

void sub_1000478E0(int *a1, int8x16_t *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x800u;
  uint64_t v8 = *(void *)(v7 + 352);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 184) |= 0x10000u;
  uint64_t v9 = *(void *)(v8 + 128);
  if (!v9) {
    operator new();
  }
  unsigned int v10 = sub_100169B90(a1);
  if (!sub_100169B58(v10)) {
    sub_101A7ED70();
  }
  *(_DWORD *)(v9 + 36) |= 2u;
  *(_DWORD *)(v9 + 12) = v10;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v11 = *(void *)(a3 + 40);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 488) |= 8u;
  uint64_t v12 = *(void *)(v11 + 32);
  if (!v12) {
    operator new();
  }
  *(_DWORD *)(v12 + 100) |= 4u;
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    operator new();
  }
  sub_10016D01C((uint64_t)a2, v13);
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v14 = *(void *)(a3 + 40);
  if (!v14) {
    operator new();
  }
  *(_DWORD *)(v14 + 488) |= 8u;
  uint64_t v15 = *(void *)(v14 + 32);
  if (!v15) {
    operator new();
  }
  *(_DWORD *)(v15 + 100) |= 8u;
  uint64_t v16 = *(void *)(v15 + 24);
  if (!v16) {
    operator new();
  }
  sub_10016DE1C((uint64_t)a2[10].i64, v16);
  long long v17 = (int *)a2[50].i64[0];
  if (v17)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    uint64_t v18 = *(void *)(a3 + 40);
    if (!v18) {
      operator new();
    }
    *(_DWORD *)(v18 + 492) |= 0x800u;
    uint64_t v19 = *(void *)(v18 + 352);
    if (!v19) {
      operator new();
    }
    *(_DWORD *)(v19 + 184) |= 0x10000u;
    uint64_t v20 = *(void *)(v19 + 128);
    if (!v20) {
      operator new();
    }
    *(_DWORD *)(v20 + 36) |= 4u;
    uint64_t v21 = *(void *)(v20 + 16);
    if (!v21) {
      operator new();
    }
    *(_DWORD *)(v21 + 112) |= 4u;
    long long v22 = *(int **)(v21 + 24);
    if (!v22) {
      operator new();
    }
    sub_101468E9C(v17, v22);
  }
  uint64_t v23 = a2[51].i64[0];
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v24 = *(void *)(a3 + 40);
  if (!v24) {
    operator new();
  }
  *(_DWORD *)(v24 + 488) |= 8u;
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    operator new();
  }
  *(_DWORD *)(v25 + 100) |= 0x10u;
  uint64_t v26 = *(void *)(v25 + 40);
  if (!v26) {
    operator new();
  }
  sub_100020650(v23, v26);
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v27 = *(void *)(a3 + 40);
  if (!v27) {
    operator new();
  }
  *(_DWORD *)(v27 + 488) |= 8u;
  uint64_t v28 = *(void *)(v27 + 32);
  if (!v28) {
    operator new();
  }
  __int8 v29 = a2[51].i8[8];
  *(_DWORD *)(v28 + 100) |= 0x20u;
  *(unsigned char *)(v28 + 36) = v29;
  *(_DWORD *)(a3 + 52) |= 2u;
  *(_DWORD *)(v27 + 488) |= 8u;
  uint64_t v30 = *(void *)(v27 + 32);
  if (!v30) {
    operator new();
  }
  uint64_t v31 = a2[52].i64[0];
  *(_DWORD *)(v30 + 100) |= 0x40u;
  *(void *)(v30 + 48) = v31;
  *(_DWORD *)(a3 + 52) |= 2u;
  *(_DWORD *)(v27 + 488) |= 8u;
  uint64_t v32 = *(void *)(v27 + 32);
  if (!v32) {
    operator new();
  }
  unsigned int v33 = sub_1001C148C(&a2[52].u32[2]);
  if (!sub_10016E644(v33)) {
    sub_101A5ECB4();
  }
  *(_DWORD *)(v32 + 100) |= 0x80u;
  *(_DWORD *)(v32 + 72) = v33;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v34 = *(void *)(a3 + 40);
  if (!v34) {
    operator new();
  }
  *(_DWORD *)(v34 + 488) |= 8u;
  uint64_t v35 = *(void *)(v34 + 32);
  if (!v35) {
    operator new();
  }
  *(_DWORD *)(v35 + 100) |= 0x100u;
  uint64_t v36 = *(void *)(v35 + 56);
  if (!v36) {
    operator new();
  }
  sub_1001C1F0C((uint64_t)a2[53].i64, v36);
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v37 = *(void *)(a3 + 40);
  if (!v37) {
    operator new();
  }
  *(_DWORD *)(v37 + 488) |= 8u;
  uint64_t v38 = *(void *)(v37 + 32);
  if (!v38) {
    operator new();
  }
  *(_DWORD *)(v38 + 100) |= 0x200u;
  uint64_t v39 = *(void *)(v38 + 64);
  if (!v39) {
    operator new();
  }
  sub_1001C1E90(a2 + 55, v39);
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v40 = *(void *)(a3 + 40);
  if (!v40) {
    operator new();
  }
  *(_DWORD *)(v40 + 488) |= 8u;
  uint64_t v41 = *(void *)(v40 + 32);
  if (!v41) {
    operator new();
  }
  unsigned int v42 = sub_10016CE50((unsigned int *)&a2[58]);
  if (!sub_10016E644(v42)) {
    sub_101A5EC88();
  }
  *(_DWORD *)(v41 + 100) |= 0x800u;
  *(_DWORD *)(v41 + 76) = v42;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v43 = *(void *)(a3 + 40);
  if (!v43) {
    operator new();
  }
  *(_DWORD *)(v43 + 488) |= 8u;
  uint64_t v44 = *(void *)(v43 + 32);
  if (!v44) {
    operator new();
  }
  *(_DWORD *)(v44 + 100) |= 0x1000u;
  uint64_t v45 = *(void *)(v44 + 88);
  if (!v45) {
    operator new();
  }
  uint64_t v46 = a2[59].i64[0];
  *(_DWORD *)(v45 + 36) |= 1u;
  *(void *)(v45 + 8) = v46;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v47 = *(void *)(a3 + 40);
  if (!v47) {
    operator new();
  }
  *(_DWORD *)(v47 + 488) |= 8u;
  uint64_t v48 = *(void *)(v47 + 32);
  if (!v48) {
    operator new();
  }
  *(_DWORD *)(v48 + 100) |= 0x1000u;
  uint64_t v49 = *(void *)(v48 + 88);
  if (!v49) {
    operator new();
  }
  uint64_t v50 = a2[58].i64[1];
  *(_DWORD *)(v49 + 36) |= 2u;
  *(void *)(v49 + 16) = v50;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v51 = *(void *)(a3 + 40);
  if (!v51) {
    operator new();
  }
  *(_DWORD *)(v51 + 488) |= 8u;
  uint64_t v52 = *(void *)(v51 + 32);
  if (!v52) {
    operator new();
  }
  *(_DWORD *)(v52 + 100) |= 0x1000u;
  uint64_t v53 = *(void *)(v52 + 88);
  if (!v53) {
    operator new();
  }
  uint64_t v54 = a2[59].i64[1];
  *(_DWORD *)(v53 + 36) |= 4u;
  *(void *)(v53 + 24) = v54;
  uint64_t v55 = a2[72].i64[1];
  if (v55)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    uint64_t v56 = *(void *)(a3 + 40);
    if (!v56) {
      operator new();
    }
    *(_DWORD *)(v56 + 488) |= 0x1000u;
    uint64_t v57 = *(void *)(v56 + 104);
    if (!v57) {
      operator new();
    }
    sub_10145B70C(v55, v57);
  }
}

void sub_100048404()
{
}

uint64_t sub_1000485B8(uint64_t a1)
{
  sub_100048604(*(void *)(a1 + 40), *(_DWORD *)(a1 + 48));
  long long v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

id sub_100048604(uint64_t a1, int a2)
{
  if (a2 && (a2 != 1 || (sub_1000FFBA8() & 1) == 0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v16) = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,getSignalStrengthMeasurements, invalid SimInstance : %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v11 = 67109120;
    LODWORD(v12) = a2;
    goto LABEL_26;
  }
  if (a2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 1;
  }
  id v5 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:v4];
  uint64_t v10 = 0;
  id result = [*(id *)(a1 + 16) getSignalStrengthMeasurements:+[CTServiceDescriptor descriptorWithSubscriptionContext:](CTServiceDescriptor, "descriptorWithSubscriptionContext:", v5) error:&v10];
  if (v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412546;
      id v16 = v5;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,getSignalStrengthMeasurements:context:%@,err:%@", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v11 = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
LABEL_26:
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CTSignalStrengthMeasurements *CLCoreTelephonyClient::getSignalStrengthMeasurementForSim(CLTelephonyService_Type::SimInstance)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    return 0;
  }
  return result;
}

void sub_10004892C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = sub_100103E24(a1, a2);
  id v8 = [*(id *)(a1 + 360) objectForKey:v7];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 68290306;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2114;
    id v17 = v7;
    __int16 v18 = 2050;
    uint64_t v19 = a3;
    __int16 v20 = 1026;
    int v21 = (unsigned __int16)a3;
    __int16 v22 = 1026;
    int v23 = a4;
    __int16 v24 = 2114;
    id v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#identityValidation cache updating\", \"Client\":%{public, location:escape_only}@, \"upid\":%{public}lld, \"pid\":%{public}d, \"coming\":%{public}hhd, \"AllowedUniquePids\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x3Cu);
  }
  if (a4)
  {
    if (!v8)
    {
      id v8 = (id)objc_opt_new();
      [*(id *)(a1 + 360) setObject:v8 forKeyedSubscript:v7];
    }
    [v8 addObject:[NSNumber numberWithLongLong:a3]];
  }
  else
  {
    id v10 = [v8 indexOfObject:[+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a3)]];
    if (v10 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      [v8 removeObjectAtIndex:v10];
      if (![v8 count])
      {
        [*(id *)(a1 + 360) removeObjectForKey:v7];
        id v8 = 0;
      }
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 68290306;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2114;
    id v17 = v7;
    __int16 v18 = 2050;
    uint64_t v19 = a3;
    __int16 v20 = 1026;
    int v21 = (unsigned __int16)a3;
    __int16 v22 = 1026;
    int v23 = a4;
    __int16 v24 = 2114;
    id v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#identityValidation cache updated\", \"Client\":%{public, location:escape_only}@, \"upid\":%{public}lld, \"pid\":%{public}d, \"coming\":%{public}hhd, \"AllowedUniquePids\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x3Cu);
  }
}

BOOL sub_100048BC8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 648);
  if ((v2 & 0x80000000) != 0 || (unint64_t v3 = *(void *)(a1 + 40), v3 <= v2))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    double v139 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v140 = *(_DWORD *)(a1 + 652);
      int v141 = *(_DWORD *)(a1 + 648);
      uint64_t v142 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 67240704;
      int v211 = v140;
      __int16 v212 = 1026;
      int v213 = v141;
      __int16 v214 = 2050;
      *(void *)__int16 v215 = v142;
      _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion called with invalid start fusion,index,%{public}d,bufferSize,%{public}zu", buf, 0x18u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    int v144 = *(_DWORD *)(a1 + 652);
    int v145 = *(_DWORD *)(a1 + 648);
    uint64_t v146 = *(void *)(a1 + 40);
    LODWORD(v200) = 67240704;
    HIDWORD(v200) = v144;
    LOWORD(v201) = 1026;
    *(_DWORD *)((char *)&v201 + 2) = v145;
    WORD3(v201) = 2050;
    *((void *)&v201 + 1) = v146;
    int v147 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v147);
    goto LABEL_157;
  }
  if (v3 - 1 <= v2)
  {
    *(_DWORD *)(a1 + 648) = v3 - 1;
    return 1;
  }
  char v170 = 0;
  uint64_t v173 = a1 + 48;
  int v4 = v2 + 1;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v171 = _Q0;
  unsigned int v10 = *(_DWORD *)(a1 + 648);
  do
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = ((unint64_t)(v11 + v2) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    unint64_t v14 = (v13 + ((unint64_t)(v11 + v2 - v13) >> 1)) >> 4;
    if (!*(unsigned char *)(*(void *)(v12 + 8 * v14) + 176 * (v11 + v2 - 23 * v14) + 168))
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      std::string::size_type v148 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
      {
        int v149 = *(_DWORD *)(a1 + 652);
        uint64_t v150 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t buf = 67240704;
        int v211 = v149;
        __int16 v212 = 1026;
        int v213 = v2;
        __int16 v214 = 2050;
        *(void *)__int16 v215 = v150;
        _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion called on fusion index which is not previously fused,index,%{public}d,bufferSize,%{public}zu", buf, 0x18u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      int v162 = *(_DWORD *)(a1 + 652);
      uint64_t v163 = *(void *)(a1 + 40);
      LODWORD(v200) = 67240704;
      HIDWORD(v200) = v162;
      LOWORD(v201) = 1026;
      *(_DWORD *)((char *)&v201 + 2) = v2;
      WORD3(v201) = 2050;
      *((void *)&v201 + 1) = v163;
      int v147 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v147);
LABEL_157:
      if (v147 != (char *)buf) {
        free(v147);
      }
      return 0;
    }
    unint64_t v15 = v2 + 1;
    unint64_t v16 = *(void *)(v12 + 8 * ((v11 + v2 + 1) / 0x17uLL)) + 176 * ((v11 + v2 + 1) % 0x17uLL);
    id v17 = *(std::__shared_weak_count **)(v16 + 24);
    if (v17)
    {
      __int16 v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        uint64_t v19 = *(void *)(v16 + 16);
        if (v19)
        {
          if (*(double *)(v19 + 40) > 0.0)
          {
            uint64_t v172 = v19;
            double v21 = *(double *)(v19 + 16);
            __int16 v20 = (double *)(v19 + 16);
            double v22 = v21;
            unint64_t v23 = *(void *)(a1 + 32) + v2;
            uint64_t v24 = *(void *)(*(void *)(a1 + 8) + 8 * (v23 / 0x17));
            unint64_t v25 = v23 % 0x17;
            double v26 = *(double *)(v24 + 176 * (v23 % 0x17) + 8);
            uint64_t v27 = (char *)operator new(0xA0uLL);
            *((void *)v27 + 1) = 0;
            *((void *)v27 + 2) = 0;
            *(void *)uint64_t v27 = off_1022FFBB0;
            *((void *)v27 + 3) = off_10232A710;
            uint64_t v28 = v24 + 176 * v25;
            long long v29 = *(_OWORD *)(v28 + 40);
            long long v30 = *(_OWORD *)(v28 + 56);
            long long v31 = *(_OWORD *)(v28 + 88);
            *((_OWORD *)v27 + 4) = *(_OWORD *)(v28 + 72);
            *((_OWORD *)v27 + 5) = v31;
            *((_OWORD *)v27 + 2) = v29;
            *((_OWORD *)v27 + 3) = v30;
            long long v32 = *(_OWORD *)(v28 + 104);
            long long v33 = *(_OWORD *)(v28 + 120);
            long long v34 = *(_OWORD *)(v28 + 136);
            *(_OWORD *)(v27 + 140) = *(_OWORD *)(v28 + 148);
            *((_OWORD *)v27 + 7) = v33;
            *((_OWORD *)v27 + 8) = v34;
            *((_OWORD *)v27 + 6) = v32;
            double v200 = off_10232A710;
            long long v201 = v171;
            long long v202 = xmmword_101D1C320;
            long long v203 = xmmword_101D1C320;
            long long v204 = v171;
            long long v205 = v171;
            unint64_t v206 = 0xBFF0000000000000;
            int v207 = 0;
            char v208 = 0;
            int v209 = 0;
            if (!sub_100074400(v173, v20) || (sub_100070DA0(v173, (uint64_t)&v200) & 1) == 0)
            {
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1023207F0);
              }
              uint64_t v47 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
              {
                int v48 = *(_DWORD *)(a1 + 652);
                int v49 = *(_DWORD *)(v172 + 128);
                uint64_t v50 = *(void *)(v172 + 16);
                uint64_t v51 = *((void *)v27 + 5);
                *(_DWORD *)uint64_t buf = 67240960;
                int v211 = v48;
                __int16 v212 = 1026;
                int v213 = v49;
                __int16 v214 = 2050;
                *(void *)__int16 v215 = v50;
                *(_WORD *)&v215[8] = 2050;
                *(void *)&v215[10] = v51;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning fused location,type,%{public}d,new location mct,%{public}.3f,fused location mct,%{public}.3f", buf, 0x22u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1023207F0);
                }
                int v98 = *(_DWORD *)(a1 + 652);
                int v99 = *(_DWORD *)(v172 + 128);
                uint64_t v100 = *(void *)(v172 + 16);
                uint64_t v101 = *((void *)v27 + 5);
                LODWORD(v190) = 67240960;
                HIDWORD(v190) = v98;
                *(_WORD *)__int16 v191 = 1026;
                *(_DWORD *)&v191[2] = v99;
                *(_WORD *)&v191[6] = 2050;
                *(void *)&v191[8] = v100;
                *(_WORD *)&v191[16] = 2050;
                *(void *)&v191[18] = v101;
                id v102 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v102);
                if (v102 != (char *)buf) {
                  free(v102);
                }
              }
              int v42 = 1;
              goto LABEL_38;
            }
            double v35 = v22 - v26;
            if (*(double *)&v202 > *(double *)(v172 + 40) * 6.0 || *(double *)(a1 + 416) > 60.0)
            {
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1023207F0);
              }
              uint64_t v36 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v37 = *(_DWORD *)(a1 + 652);
                int v38 = *(_DWORD *)(v172 + 128);
                uint64_t v39 = *(void *)(v172 + 40);
                uint64_t v40 = *(void *)(a1 + 416);
                uint64_t v41 = *(void *)(a1 + 40);
                *(_DWORD *)uint64_t buf = 67241728;
                int v211 = v37;
                __int16 v212 = 1026;
                int v213 = v38;
                __int16 v214 = 2050;
                *(void *)__int16 v215 = v39;
                *(_WORD *)&v215[8] = 2050;
                *(void *)&v215[10] = v202;
                __int16 v216 = 2050;
                *(void *)__int16 v217 = v40;
                *(_WORD *)&v217[8] = 1026;
                *(_DWORD *)&v217[10] = v2;
                __int16 v218 = 2050;
                uint64_t v219 = v41;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,predicted fused location with large uncertainty switching to CC Fusion,type,%{public}d,new loc hunc,%{public}.1f,fused loc hunc,%{public}.1f,fused loc DR time_s,%{public}.1f,index,%{public}d,bufferSize,%{public}zu", buf, 0x3Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1023207F0);
                }
                int v108 = *(_DWORD *)(a1 + 652);
                int v109 = *(_DWORD *)(v172 + 128);
                uint64_t v110 = *(void *)(v172 + 40);
                uint64_t v111 = *(void *)(a1 + 416);
                uint64_t v112 = *(void *)(a1 + 40);
                LODWORD(v190) = 67241728;
                HIDWORD(v190) = v108;
                *(_WORD *)__int16 v191 = 1026;
                *(_DWORD *)&v191[2] = v109;
                *(_WORD *)&v191[6] = 2050;
                *(void *)&v191[8] = v110;
                *(_WORD *)&v191[16] = 2050;
                *(void *)&v191[18] = v202;
                __int16 v192 = 2050;
                *(void *)__int16 v193 = v111;
                *(_WORD *)&v193[8] = 1026;
                *(_DWORD *)&v193[10] = v2;
                *(_WORD *)&v193[14] = 2050;
                *(void *)&v193[16] = v112;
                int v113 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v113);
                if (v113 != (char *)buf) {
                  free(v113);
                }
              }
              sub_10003155C(a1, v2 + 1, v172, (uint64_t)&v200, v35);
              char v170 = 1;
              int v42 = 10;
              goto LABEL_38;
            }
            if (*(void *)(a1 + 40) < 3uLL) {
              goto LABEL_40;
            }
            if (*((_DWORD *)v27 + 38) == *(_DWORD *)(v172 + 128))
            {
              unint64_t v59 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + v2) / 0x17uLL))
                  + 176 * ((*(void *)(a1 + 32) + v2) % 0x17uLL);
              uint64_t v52 = *(std::__shared_weak_count **)(v59 + 24);
              if (!v52 || (uint64_t v52 = std::__shared_weak_count::lock(v52)) == 0 || (v60 = *(void *)(v59 + 16)) == 0)
              {
LABEL_41:
                uint64_t v53 = v52;
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1023207F0);
                }
                uint64_t v54 = qword_102419518;
                if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                {
                  int v55 = *(_DWORD *)(a1 + 652);
                  int v56 = *(_DWORD *)(v172 + 128);
                  uint64_t v57 = *(void *)(a1 + 40);
                  *(_DWORD *)uint64_t buf = 67240960;
                  int v211 = v55;
                  __int16 v212 = 1026;
                  int v213 = v56;
                  __int16 v214 = 1026;
                  *(_DWORD *)__int16 v215 = v2;
                  *(_WORD *)&v215[4] = 2050;
                  *(void *)&v215[6] = v57;
                  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion with no valid previous raw location,type,%{public}d,index,%{public}d,bufferSize,%{public}zu", buf, 0x1Eu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1023207F0);
                  }
                  int v114 = *(_DWORD *)(a1 + 652);
                  int v115 = *(_DWORD *)(v172 + 128);
                  uint64_t v116 = *(void *)(a1 + 40);
                  LODWORD(v190) = 67240960;
                  HIDWORD(v190) = v114;
                  *(_WORD *)__int16 v191 = 1026;
                  *(_DWORD *)&v191[2] = v115;
                  *(_WORD *)&v191[6] = 1026;
                  *(_DWORD *)&v191[8] = v2;
                  *(_WORD *)&v191[12] = 2050;
                  *(void *)&v191[14] = v116;
                  uint64_t v117 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v117);
                  if (v117 != (char *)buf) {
                    free(v117);
                  }
                }
                sub_10003155C(a1, v2 + 1, v172, (uint64_t)&v200, v35);
                int v42 = 0;
                char v170 = 1;
                unint64_t v58 = v53;
                if (!v53) {
                  goto LABEL_38;
                }
                goto LABEL_47;
              }
LABEL_52:
              if (*(double *)(v60 + 40) <= 0.0)
              {
                char v85 = v52;
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1023207F0);
                }
                long long v86 = qword_102419518;
                if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
                {
                  int v87 = *(_DWORD *)(a1 + 652);
                  int v88 = *(_DWORD *)(v60 + 128);
                  uint64_t v89 = *(void *)(v60 + 16);
                  uint64_t v90 = *(void *)(a1 + 40);
                  *(_DWORD *)uint64_t buf = 67240960;
                  int v211 = v87;
                  __int16 v212 = 1026;
                  int v213 = v88;
                  __int16 v214 = 2050;
                  *(void *)__int16 v215 = v89;
                  *(_WORD *)&v215[8] = 2050;
                  *(void *)&v215[10] = v90;
                  _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion detected invalid previous raw location,type,%{public}d,location mct,%{public}.3f,bufferSize,%{public}zu", buf, 0x22u);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1023207F0);
                  }
                  int v118 = *(_DWORD *)(a1 + 652);
                  int v119 = *(_DWORD *)(v60 + 128);
                  uint64_t v120 = *(void *)(v60 + 16);
                  uint64_t v121 = *(void *)(a1 + 40);
                  LODWORD(v190) = 67240960;
                  HIDWORD(v190) = v118;
                  *(_WORD *)__int16 v191 = 1026;
                  *(_DWORD *)&v191[2] = v119;
                  *(_WORD *)&v191[6] = 2050;
                  *(void *)&v191[8] = v120;
                  *(_WORD *)&v191[16] = 2050;
                  *(void *)&v191[18] = v121;
                  BOOL v122 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v122);
                  if (v122 != (char *)buf) {
                    free(v122);
                  }
                }
                int v42 = 1;
                unint64_t v58 = v85;
              }
              else
              {
                double v61 = *(double *)(v60 + 112);
                if (v61 >= 6.0 || v61 <= 0.0) {
                  double v61 = 6.0;
                }
                if (vabdd_f64(*v20, *(double *)(v60 + 16)) > v61)
                {
                  int v63 = v52;
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1023207F0);
                  }
                  uint64_t v64 = qword_102419518;
                  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                  {
                    int v65 = *(_DWORD *)(a1 + 652);
                    int v66 = *(_DWORD *)(v172 + 128);
                    double v67 = *(double *)(v60 + 16);
                    *(void *)__int16 v215 = *(void *)(v172 + 16);
                    uint64_t v68 = *(void *)(v60 + 112);
                    uint64_t v69 = *(void *)(a1 + 40);
                    *(_DWORD *)uint64_t buf = 67241728;
                    int v211 = v65;
                    __int16 v212 = 1026;
                    int v213 = v66;
                    __int16 v214 = 2050;
                    *(_WORD *)&v215[8] = 2050;
                    *(double *)&v215[10] = *(double *)v215 - v67;
                    __int16 v216 = 2050;
                    *(void *)__int16 v217 = v68;
                    *(_WORD *)&v217[8] = 1026;
                    *(_DWORD *)&v217[10] = v2;
                    __int16 v218 = 2050;
                    uint64_t v219 = v69;
                    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion ignoring old previous raw location in fusion,type,%{public}d,new location mct,%{public}.3f,age_s,%{public}.2f,lifespan_s,%{public}.2f,index,%{public}d,bufferSize,%{public}zu", buf, 0x3Cu);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1023207F0);
                    }
                    int v123 = *(_DWORD *)(a1 + 652);
                    int v124 = *(_DWORD *)(v172 + 128);
                    double v125 = *(double *)(v60 + 16);
                    *(void *)&v191[8] = *(void *)(v172 + 16);
                    uint64_t v126 = *(void *)(v60 + 112);
                    uint64_t v127 = *(void *)(a1 + 40);
                    LODWORD(v190) = 67241728;
                    HIDWORD(v190) = v123;
                    *(_WORD *)__int16 v191 = 1026;
                    *(_DWORD *)&v191[2] = v124;
                    *(_WORD *)&v191[6] = 2050;
                    *(_WORD *)&v191[16] = 2050;
                    *(double *)&v191[18] = *(double *)&v191[8] - v125;
                    __int16 v192 = 2050;
                    *(void *)__int16 v193 = v126;
                    *(_WORD *)&v193[8] = 1026;
                    *(_DWORD *)&v193[10] = v2;
                    *(_WORD *)&v193[14] = 2050;
                    *(void *)&v193[16] = v127;
                    int v128 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v128);
                    if (v128 != (char *)buf) {
                      free(v128);
                    }
                  }
                  sub_1000DB0A0(v63);
                  goto LABEL_40;
                }
                int v190 = off_10232A710;
                *(_OWORD *)__int16 v191 = v171;
                *(_OWORD *)&v193[4] = xmmword_101D1C320;
                *(_OWORD *)&v193[20] = xmmword_101D1C320;
                long long v194 = v171;
                long long v195 = v171;
                unint64_t v196 = 0xBFF0000000000000;
                int v197 = 0;
                char v198 = 0;
                int v199 = 0;
                uint64_t v176 = v60;
                __int16 v177 = v52;
                __int16 v167 = v52;
                atomic_fetch_add_explicit(&v52->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                char v91 = sub_100709EFC(v173, v20, &v176, (uint64_t)&v190);
                if (v177) {
                  std::__shared_weak_count::__release_weak(v177);
                }
                if (v91)
                {
                  double v92 = *(double *)(v172 + 40);
                  if (*(double *)&v193[4] < v92 || *(double *)&v193[4] > v92 * 6.0)
                  {
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1023207F0);
                    }
                    int v103 = qword_102419518;
                    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                    {
                      int v104 = *(_DWORD *)(a1 + 652);
                      int v105 = *(_DWORD *)(v172 + 128);
                      uint64_t v106 = *(void *)(v172 + 40);
                      uint64_t v107 = *(void *)(a1 + 40);
                      *(_DWORD *)uint64_t buf = 67241472;
                      int v211 = v104;
                      __int16 v212 = 1026;
                      int v213 = v105;
                      __int16 v214 = 2050;
                      *(void *)__int16 v215 = v106;
                      *(_WORD *)&v215[8] = 2050;
                      *(void *)&v215[10] = *(void *)&v193[4];
                      __int16 v216 = 1026;
                      *(_DWORD *)__int16 v217 = v2;
                      *(_WORD *)&v217[4] = 2050;
                      *(void *)&v217[6] = v107;
                      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,predicted previous location with large uncertainty switching to CC Fusion,type,%{public}d,current hunc,%{public}.1f,previous hunc,%{public}.1f,index,%{public}d,bufferSize,%{public}zu", buf, 0x32u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1023207F0);
                      }
                      int v134 = *(_DWORD *)(a1 + 652);
                      int v135 = *(_DWORD *)(v172 + 128);
                      uint64_t v136 = *(void *)(v172 + 40);
                      uint64_t v137 = *(void *)(a1 + 40);
                      int v178 = 67241472;
                      int v179 = v134;
                      __int16 v180 = 1026;
                      int v181 = v135;
                      __int16 v182 = 2050;
                      uint64_t v183 = v136;
                      __int16 v184 = 2050;
                      uint64_t v185 = *(void *)&v193[4];
                      __int16 v186 = 1026;
                      int v187 = v2;
                      __int16 v188 = 2050;
                      uint64_t v189 = v137;
                      std::string::size_type v138 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v138);
                      if (v138 != (char *)buf) {
                        free(v138);
                      }
                    }
                    sub_10003155C(a1, v2 + 1, v172, (uint64_t)&v200, v35);
                  }
                  else
                  {
                    sub_10132E304(a1, v2 + 1, v172, (double *)&v190, (uint64_t)&v200, v35);
                  }
                  int v42 = 0;
                  char v170 = 1;
                }
                else
                {
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1023207F0);
                  }
                  uint64_t v93 = qword_102419518;
                  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
                  {
                    int v94 = *(_DWORD *)(a1 + 652);
                    int v95 = *(_DWORD *)(v172 + 128);
                    uint64_t v96 = *(void *)(v172 + 16);
                    uint64_t v97 = *(void *)(v60 + 16);
                    *(_DWORD *)uint64_t buf = 67240960;
                    int v211 = v94;
                    __int16 v212 = 1026;
                    int v213 = v95;
                    __int16 v214 = 2050;
                    *(void *)__int16 v215 = v96;
                    *(_WORD *)&v215[8] = 2050;
                    *(void *)&v215[10] = v97;
                    _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning previous raw location,type,%{public}d,new location mct,%{public}.3f,previous location mct,%{public}.3f", buf, 0x22u);
                  }
                  if (sub_10013D1A0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1023207F0);
                    }
                    int v129 = *(_DWORD *)(a1 + 652);
                    int v130 = *(_DWORD *)(v172 + 128);
                    uint64_t v131 = *(void *)(v172 + 16);
                    uint64_t v132 = *(void *)(v60 + 16);
                    int v178 = 67240960;
                    int v179 = v129;
                    __int16 v180 = 1026;
                    int v181 = v130;
                    __int16 v182 = 2050;
                    uint64_t v183 = v131;
                    __int16 v184 = 2050;
                    uint64_t v185 = v132;
                    uint64_t v133 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v133);
                    if (v133 != (char *)buf) {
                      free(v133);
                    }
                  }
                  int v42 = 1;
                }
                unint64_t v58 = v167;
              }
LABEL_47:
              sub_1000DB0A0(v58);
LABEL_38:
              sub_1000DB0A0((std::__shared_weak_count *)v27);
LABEL_27:
              sub_1000DB0A0(v18);
              goto LABEL_28;
            }
            if (v2 < 2)
            {
LABEL_40:
              uint64_t v52 = 0;
              goto LABEL_41;
            }
            uint64_t v70 = v10 - 1;
            int v71 = v4;
            while (1)
            {
              uint64_t v169 = v70;
              unint64_t v72 = *(void *)(*(void *)(a1 + 8)
                              + 8 * ((*(void *)(a1 + 32) + (unint64_t)v70) / 0x17))
                  + 176 * ((*(void *)(a1 + 32) + (unint64_t)v70) % 0x17);
              int v73 = *(std::__shared_weak_count **)(v72 + 24);
              if (!v73) {
                goto LABEL_76;
              }
              int v73 = std::__shared_weak_count::lock(v73);
              if (!v73) {
                goto LABEL_76;
              }
              int v74 = v71;
              uint64_t v60 = *(void *)(v72 + 16);
              if (!v60 || *(double *)(v60 + 40) <= 0.0) {
                break;
              }
              if (*(_DWORD *)(v60 + 128) == *(_DWORD *)(v172 + 128))
              {
                atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
                double v168 = v73;
                sub_1000DB0A0(v73);
                uint64_t v52 = v168;
                goto LABEL_52;
              }
              int v75 = v74;
LABEL_82:
              sub_1000DB0A0(v73);
LABEL_83:
              int v71 = v75 - 1;
              uint64_t v70 = v169 - 1;
              if (v71 <= 2) {
                goto LABEL_40;
              }
            }
            int v71 = v74;
LABEL_76:
            double v166 = v73;
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1023207F0);
            }
            int v164 = v71 - 2;
            int v165 = v71;
            int v76 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              int v77 = *(_DWORD *)(a1 + 652);
              uint64_t v78 = *(void *)(a1 + 40);
              *(_DWORD *)uint64_t buf = 67240704;
              int v211 = v77;
              __int16 v212 = 1026;
              int v213 = v164;
              __int16 v214 = 2050;
              *(void *)__int16 v215 = v78;
              _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion detected invalid raw location in the buffer,index,%{public}d,bufferSize,%{public}zu", buf, 0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1023207F0);
              }
              int v79 = *(_DWORD *)(a1 + 652);
              uint64_t v80 = *(void *)(a1 + 40);
              LODWORD(v190) = 67240704;
              HIDWORD(v190) = v79;
              *(_WORD *)__int16 v191 = 1026;
              *(_DWORD *)&v191[2] = v164;
              *(_WORD *)&v191[6] = 2050;
              *(void *)&v191[8] = v80;
              int64_t v81 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v81);
              if (v81 != (char *)buf) {
                free(v81);
              }
            }
            int v73 = v166;
            int v75 = v165;
            if (!v166) {
              goto LABEL_83;
            }
            goto LABEL_82;
          }
        }
      }
    }
    else
    {
      __int16 v18 = 0;
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1023207F0);
    }
    uint64_t v43 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      int v44 = *(_DWORD *)(a1 + 652);
      uint64_t v45 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 67240704;
      int v211 = v44;
      __int16 v212 = 1026;
      int v213 = v2 + 1;
      __int16 v214 = 2050;
      *(void *)__int16 v215 = v45;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion called on invalid new raw location,index,%{public}d,bufferSize,%{public}zu", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1023207F0);
      }
      int v82 = *(_DWORD *)(a1 + 652);
      uint64_t v83 = *(void *)(a1 + 40);
      LODWORD(v200) = 67240704;
      HIDWORD(v200) = v82;
      LOWORD(v201) = 1026;
      *(_DWORD *)((char *)&v201 + 2) = v2 + 1;
      WORD3(v201) = 2050;
      *((void *)&v201 + 1) = v83;
      std::string::size_type v84 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v84);
      if (v84 != (char *)buf) {
        free(v84);
      }
    }
    int v42 = 1;
    if (v18) {
      goto LABEL_27;
    }
LABEL_28:
    if (v42 != 10 && v42) {
      return 0;
    }
    uint64_t v46 = *(void *)(a1 + 40);
    ++v4;
    ++v10;
    uint64_t v2 = v15;
  }
  while (v46 - 1 > v15);
  *(_DWORD *)(a1 + 648) = v46 - 1;
  if ((v170 & (v46 != 0)) != 0)
  {
    unint64_t v151 = v46 - 1 + *(void *)(a1 + 32);
    uint64_t v152 = *(void *)(*(void *)(a1 + 8) + 8 * (v151 / 0x17));
    unint64_t v153 = v151 % 0x17;
    if (*(unsigned char *)(v152 + 176 * (v151 % 0x17) + 168))
    {
      int v154 = (char *)operator new(0xA0uLL);
      *((void *)v154 + 2) = 0;
      *(void *)int v154 = off_1022FFBB0;
      *((void *)v154 + 1) = 0;
      *((void *)v154 + 3) = off_10232A710;
      uint64_t v155 = v152 + 176 * v153;
      long long v156 = *(_OWORD *)(v155 + 40);
      long long v157 = *(_OWORD *)(v155 + 56);
      long long v158 = *(_OWORD *)(v155 + 88);
      *((_OWORD *)v154 + 4) = *(_OWORD *)(v155 + 72);
      *((_OWORD *)v154 + 5) = v158;
      *((_OWORD *)v154 + 2) = v156;
      *((_OWORD *)v154 + 3) = v157;
      long long v159 = *(_OWORD *)(v155 + 104);
      long long v160 = *(_OWORD *)(v155 + 120);
      long long v161 = *(_OWORD *)(v155 + 136);
      *(_OWORD *)(v154 + 140) = *(_OWORD *)(v155 + 148);
      *((_OWORD *)v154 + 7) = v160;
      *((_OWORD *)v154 + 8) = v161;
      *((_OWORD *)v154 + 6) = v159;
      double v174 = v154 + 24;
      __int16 v175 = (std::__shared_weak_count *)v154;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v154 + 2, 1uLL, memory_order_relaxed);
      sub_100025538(v173, (double *)(v155 + 8), (uint64_t *)&v174);
      if (v175) {
        std::__shared_weak_count::__release_weak(v175);
      }
      sub_1000DB0A0((std::__shared_weak_count *)v154);
    }
  }
  return 1;
}

void sub_10004A6C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004A6E0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 100);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_102489D38 + 8);
    }
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 32), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489D38 + 16);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_102489D38 + 24);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489D38 + 40);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 36), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(double *)(v5 + 48), a3);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 72), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_102489D38 + 56);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v12 = *(void *)(v5 + 64);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_102489D38 + 64);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
LABEL_40:
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 76), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 100) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v13 = *(void *)(v5 + 80);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_102489D38 + 80);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x800) != 0) {
    goto LABEL_40;
  }
LABEL_13:
  if ((v6 & 0x1000) == 0) {
    return result;
  }
LABEL_41:
  uint64_t v14 = *(void *)(v5 + 88);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_102489D38 + 88);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v14, a2, a4);
}

uint64_t sub_10004A904(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void *sub_10004A968(void *a1)
{
  id v2 = a1;
  return a1;
}

void sub_10004A990(uint64_t a1, uint64_t a2, char a3)
{
  BOOL v5 = (a3 & 1) != 0
    || *(_DWORD *)(a1 + 816)
    || *(double *)(a1 + 172) <= 0.0
    || vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 228)) >= *(double *)(a1 + 936);
  double v6 = *(double *)(a2 + 20);
  if (v6 < 0.0)
  {
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    uint64_t v7 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Received invalid location for time zone", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 == -1)
      {
LABEL_13:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
        goto LABEL_166;
      }
LABEL_214:
      dispatch_once(&qword_102419590, &stru_1022D38B0);
      goto LABEL_13;
    }
    return;
  }
  if (v6 > *(double *)(a1 + 888))
  {
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    uint64_t v9 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(double *)(a2 + 20);
      uint64_t v11 = *(void *)(a1 + 888);
      *(_DWORD *)uint64_t buf = 134218240;
      double v127 = v10;
      __int16 v128 = 2048;
      uint64_t v129 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Disregarding location with accuracy: %.1f (> %.1f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      std::string::size_type v12 = *(void *)(a2 + 20);
      std::string::size_type v13 = *(void *)(a1 + 888);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v12;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v13;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
      goto LABEL_166;
    }
    return;
  }
  if (!sub_1000EF68C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    uint64_t v19 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_FAULT))
    {
      double v20 = *(double *)(a2 + 4);
      uint64_t v21 = *(void *)(a2 + 12);
      *(_DWORD *)uint64_t buf = 134283777;
      double v127 = v20;
      __int16 v128 = 2049;
      uint64_t v129 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Received invalid location <%{private}+.8f,%{private}+.8f> for time zone", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      std::string::size_type v88 = *(void *)(a2 + 4);
      std::string::size_type v89 = *(void *)(a2 + 12);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v88;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v89;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
      goto LABEL_166;
    }
    return;
  }
  if (*(double *)(a2 + 44) > *(double *)(a1 + 880))
  {
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    uint64_t v14 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = *(double *)(a2 + 44);
      uint64_t v16 = *(void *)(a1 + 888);
      *(_DWORD *)uint64_t buf = 134218240;
      double v127 = v15;
      __int16 v128 = 2048;
      uint64_t v129 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Disregarding location for timezone with speed: %.1f (> %.1f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      std::string::size_type v17 = *(void *)(a2 + 44);
      std::string::size_type v18 = *(void *)(a1 + 888);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v17;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v18;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
      goto LABEL_166;
    }
    return;
  }
  if (qword_102419590 != -1) {
    dispatch_once(&qword_102419590, &stru_1022D38B0);
  }
  double v22 = qword_102419598;
  if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
  {
    double v23 = *(double *)(a2 + 4);
    uint64_t v24 = *(void *)(a2 + 12);
    uint64_t v25 = *(void *)(a2 + 20);
    uint64_t v26 = *(void *)(a2 + 76);
    uint64_t v27 = *(void *)(a2 + 88);
    int v28 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)uint64_t buf = 134284801;
    double v127 = v23;
    __int16 v128 = 2049;
    uint64_t v129 = v24;
    __int16 v130 = 2048;
    uint64_t v131 = v25;
    __int16 v132 = 2048;
    uint64_t v133 = v26;
    __int16 v134 = 2048;
    uint64_t v135 = v27;
    __int16 v136 = 1024;
    int v137 = v28;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Notice Handling new location <%{private}+.8lf,%{private}+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d", buf, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    std::string::size_type v90 = *(void *)(a2 + 4);
    std::string::size_type v91 = *(void *)(a2 + 12);
    uint64_t v92 = *(void *)(a2 + 20);
    uint64_t v93 = *(void *)(a2 + 76);
    uint64_t v94 = *(void *)(a2 + 88);
    int v95 = *(_DWORD *)(a2 + 84);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134284801;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v90;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v91;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v119 = v92;
    __int16 v120 = 2048;
    uint64_t v121 = v93;
    __int16 v122 = 2048;
    uint64_t v123 = v94;
    __int16 v124 = 1024;
    int v125 = v95;
    uint64_t v96 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v96);
    if (v96 != (char *)buf) {
      free(v96);
    }
  }
  double v29 = *(double *)(a1 + 80);
  double v30 = -1.0;
  if (v29 >= 0.0)
  {
    double v30 = sub_1000A3D9C(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 156), *(double *)(a1 + 164));
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    long long v31 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = *(void *)(a1 + 80);
      *(_DWORD *)uint64_t buf = 134218240;
      double v127 = v30;
      __int16 v128 = 2048;
      uint64_t v129 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Distance travelled from last point is %.3lf; previous point's distance from border was %.3lf",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      std::string::size_type v97 = *(void *)(a1 + 80);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v30;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v97;
      int v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v98);
      if (v98 != (char *)buf) {
        free(v98);
      }
    }
    double v29 = *(double *)(a1 + 80);
  }
  if (v29 > -1.0 && v30 + *(double *)(a2 + 20) > v29 && *(int *)(a2 + 84) <= 66)
  {
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    long long v33 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
    {
      double v34 = *(double *)(a2 + 4);
      uint64_t v35 = *(void *)(a2 + 12);
      uint64_t v36 = *(void *)(a2 + 20);
      uint64_t v37 = *(void *)(a2 + 76);
      uint64_t v38 = *(void *)(a2 + 88);
      int v39 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)uint64_t buf = 134284801;
      double v127 = v34;
      __int16 v128 = 2049;
      uint64_t v129 = v35;
      __int16 v130 = 2048;
      uint64_t v131 = v36;
      __int16 v132 = 2048;
      uint64_t v133 = v37;
      __int16 v134 = 2048;
      uint64_t v135 = v38;
      __int16 v136 = 1024;
      int v137 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring unsure location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      std::string::size_type v40 = *(void *)(a2 + 4);
      std::string::size_type v41 = *(void *)(a2 + 12);
      uint64_t v42 = *(void *)(a2 + 20);
      uint64_t v43 = *(void *)(a2 + 76);
      uint64_t v44 = *(void *)(a2 + 88);
      int v45 = *(_DWORD *)(a2 + 84);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134284801;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v40;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v41;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
      uint64_t v119 = v42;
      __int16 v120 = 2048;
      uint64_t v121 = v43;
      __int16 v122 = 2048;
      uint64_t v123 = v44;
      __int16 v124 = 1024;
      int v125 = v45;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
      goto LABEL_166;
    }
    return;
  }
  if (v29 >= 0.0 && v30 <= v29)
  {
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    uint64_t v46 = qword_102419598;
    if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "We're still inside our last \"fence\".", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v99 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v99);
      if (v99 != (char *)buf) {
        free(v99);
      }
    }
    if (*(char *)(a1 + 143) < 0) {
      uint64_t v47 = *(void *)(a1 + 128);
    }
    else {
      uint64_t v47 = *(unsigned __int8 *)(a1 + 143);
    }
    if (!v47)
    {
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      uint64_t v70 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "we've previously confirmed our timezone", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v101 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v101);
        if (v101 != (char *)buf) {
          free(v101);
        }
      }
      if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 144) >= *(double *)(a1 + 968)) {
        sub_10090CCE0(a1, (const char *)(a1 + 96));
      }
      return;
    }
    if (*(double *)(a1 + 88) <= 0.0)
    {
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      int v71 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_FAULT, "Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        id v102 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v102);
        if (v102 != (char *)buf) {
          free(v102);
        }
      }
      if (v5) {
        goto LABEL_124;
      }
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      int v75 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
      {
        double v76 = *(double *)(a2 + 4);
        uint64_t v77 = *(void *)(a2 + 12);
        uint64_t v78 = *(void *)(a2 + 76);
        *(_DWORD *)uint64_t buf = 134284033;
        double v127 = v76;
        __int16 v128 = 2049;
        uint64_t v129 = v77;
        __int16 v130 = 2048;
        uint64_t v131 = v78;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419590 == -1) {
        goto LABEL_162;
      }
    }
    else
    {
      double v63 = sub_1000A3D9C(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 312), *(double *)(a1 + 320));
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      uint64_t v64 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
      {
        uint64_t v65 = *(void *)(a1 + 88);
        uint64_t v66 = *(void *)(a2 + 20);
        *(_DWORD *)uint64_t buf = 134218496;
        double v127 = v63;
        __int16 v128 = 2048;
        uint64_t v129 = v65;
        __int16 v130 = 2048;
        uint64_t v131 = v66;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "Distance travelled from last unconfirmed point is %.3lf; previous point's distance from border was %.3lf; acc is %.3lf",
          buf,
          0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        std::string::size_type v103 = *(void *)(a1 + 88);
        uint64_t v104 = *(void *)(a2 + 20);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134218496;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v63;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v103;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v119 = v104;
        int v105 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v105);
        if (v105 != (char *)buf) {
          free(v105);
        }
      }
      double v67 = *(double *)(a1 + 88);
      double v68 = *(double *)(a2 + 20);
      if (v67 - v63 > v68)
      {
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        uint64_t v69 = qword_102419598;
        if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "time zone confirmed (horizontalAccuracy has improved faster than we've moved)", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419590 != -1) {
            dispatch_once(&qword_102419590, &stru_1022D38B0);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          uint64_t v111 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v111);
          if (v111 != (char *)buf) {
            free(v111);
          }
        }
        sub_10090CCE0(a1, (const char *)(a1 + 120));
        if (*(char *)(a1 + 143) < 0)
        {
          **(unsigned char **)(a1 + 120) = 0;
          *(void *)(a1 + 128) = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 120) = 0;
          *(unsigned char *)(a1 + 143) = 0;
        }
        *(void *)(a1 + 88) = 0xBFF0000000000000;
        return;
      }
      if (v63 + v67 < v68)
      {
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        int v79 = qword_102419598;
        if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#Warning we can't possibly confirm our timezone, uncertainty too large", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419590 == -1) {
            goto LABEL_13;
          }
          goto LABEL_214;
        }
        return;
      }
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      uint64_t v80 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "we can't optimize, find out if this position confirms our location", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v112 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v112);
        if (v112 != (char *)buf) {
          free(v112);
        }
      }
      if (v5)
      {
LABEL_124:
        sub_10090CF38(a1, (std::string *)(a1 + 120), a2);
        return;
      }
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      int64_t v81 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
      {
        double v82 = *(double *)(a2 + 4);
        uint64_t v83 = *(void *)(a2 + 12);
        uint64_t v84 = *(void *)(a2 + 76);
        *(_DWORD *)uint64_t buf = 134284033;
        double v127 = v82;
        __int16 v128 = 2049;
        uint64_t v129 = v83;
        __int16 v130 = 2048;
        uint64_t v131 = v84;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419590 == -1)
      {
LABEL_162:
        std::string::size_type v85 = *(void *)(a2 + 4);
        std::string::size_type v86 = *(void *)(a2 + 12);
        uint64_t v87 = *(void *)(a2 + 76);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284033;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v85;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v86;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v119 = v87;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
LABEL_166:
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
    }
LABEL_218:
    dispatch_once(&qword_102419590, &stru_1022D38B0);
    goto LABEL_162;
  }
  if (qword_102419590 != -1) {
    dispatch_once(&qword_102419590, &stru_1022D38B0);
  }
  int v48 = qword_102419598;
  if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "We've travelled outside our \"fence\".", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419590 != -1) {
      dispatch_once(&qword_102419590, &stru_1022D38B0);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v100 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v100);
    if (v100 != (char *)buf) {
      free(v100);
    }
  }
  if (v5)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v113 = 0;
    uint64_t v49 = *(void *)a1;
    if (!*(void *)a1)
    {
      uint64_t v49 = sub_10065AD6C();
      *(void *)a1 = v49;
    }
    if (sub_10065B348(v49, a2, (uint64_t)&__p, (double *)&v113))
    {
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      uint64_t v50 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_INFO))
      {
        *(double *)&data = COERCE_DOUBLE(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          data = (std::string *)__p.__r_.__value_.__l.__data_;
        }
        *(_DWORD *)uint64_t buf = 136315138;
        double v127 = *(double *)&data;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "Time zone from database was %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v114 = 136315138;
        int v115 = p_p;
        uint64_t v107 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v107);
        if (v107 != (char *)buf) {
          free(v107);
        }
      }
      sub_10090CF38(a1, &__p, a2);
      *(void *)(a1 + 80) = v113;
      long long v52 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 168) = v52;
      long long v53 = *(_OWORD *)(a2 + 64);
      long long v54 = *(_OWORD *)(a2 + 80);
      long long v55 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 232) = v54;
      *(_OWORD *)(a1 + 216) = v53;
      *(_OWORD *)(a1 + 200) = v55;
      long long v57 = *(_OWORD *)(a2 + 112);
      long long v56 = *(_OWORD *)(a2 + 128);
      long long v58 = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 292) = v58;
      *(_OWORD *)(a1 + 264) = v57;
      *(_OWORD *)(a1 + 280) = v56;
    }
    else
    {
      if (qword_102419590 != -1) {
        dispatch_once(&qword_102419590, &stru_1022D38B0);
      }
      unint64_t v72 = qword_102419598;
      if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
      {
        double v73 = *(double *)(a2 + 4);
        uint64_t v74 = *(void *)(a2 + 12);
        *(_DWORD *)uint64_t buf = 134283777;
        double v127 = v73;
        __int16 v128 = 2049;
        uint64_t v129 = v74;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't get time zone for location <%{private}+.8lf,%{private}+.8lf>", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419590 != -1) {
          dispatch_once(&qword_102419590, &stru_1022D38B0);
        }
        int v108 = *(std::string **)(a2 + 4);
        uint64_t v109 = *(void *)(a2 + 12);
        int v114 = 134283777;
        int v115 = v108;
        __int16 v116 = 2049;
        uint64_t v117 = v109;
        uint64_t v110 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v110);
        if (v110 != (char *)buf) {
          free(v110);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (qword_102419590 != -1) {
    dispatch_once(&qword_102419590, &stru_1022D38B0);
  }
  unint64_t v59 = qword_102419598;
  if (os_log_type_enabled((os_log_t)qword_102419598, OS_LOG_TYPE_DEFAULT))
  {
    double v60 = *(double *)(a2 + 4);
    uint64_t v61 = *(void *)(a2 + 12);
    uint64_t v62 = *(void *)(a2 + 76);
    *(_DWORD *)uint64_t buf = 134284033;
    double v127 = v60;
    __int16 v128 = 2049;
    uint64_t v129 = v61;
    __int16 v130 = 2048;
    uint64_t v131 = v62;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419590 == -1) {
      goto LABEL_162;
    }
    goto LABEL_218;
  }
}

void sub_10004C774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C7A0(uint64_t a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10230E780);
  }
  int v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 12);
    uint64_t v7 = *(__n128 (**)(uint64_t, uint64_t))(a2 + 20);
    uint64_t v8 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 134284291;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2049;
    std::string::size_type v40 = v7;
    LOWORD(v41) = 2114;
    *(void *)((char *)&v41 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending #SLC <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}@", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    uint64_t v22 = *(void *)(a2 + 4);
    uint64_t v23 = *(void *)(a2 + 12);
    uint64_t v24 = *(void *)(a2 + 20);
    uint64_t v25 = *(void *)(a1 + 64);
    int v31 = 134284291;
    uint64_t v32 = v22;
    __int16 v33 = 2049;
    uint64_t v34 = v23;
    __int16 v35 = 2049;
    uint64_t v36 = v24;
    __int16 v37 = 2114;
    uint64_t v38 = v25;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSLCSubscription::sendSignificantLocationChange(const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
    if (v26 != buf) {
      free(v26);
    }
  }
  sub_1000E9354(&v31);
  if ((int)sub_1000E9B98((UInt8 *)a2, (uint64_t)&v31, a1 + 304) >= 1)
  {
    *(void *)uint64_t buf = sub_1000E9358((uint64_t)&v31);
    sub_100027B48(a1, -1.0);
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", @"CLApplicationLifecycleManager"), "launchApplication:requiringAuthForServiceMask:", objc_msgSend(*(id *)(a1 + 64), "legacyClientKey"), 8];
  }
  if (*(unsigned char *)(a1 + 249))
  {
    *(void *)uint64_t buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0xA012000000;
    std::string::size_type v40 = sub_100177E6C;
    *(void *)&long long v41 = sub_100177648;
    *((void *)&v41 + 1) = "";
    uint64_t v43 = 0;
    v44[0] = 0;
    std::string __p = 0;
    *(void *)((char *)v44 + 5) = 0;
    int v45 = 1000;
    char v46 = 0;
    uint64_t v47 = 0;
    int v48 = -1;
    __asm { FMOV            V1.2D, #-1.0 }
    long long v49 = _Q1;
    unint64_t v50 = 0xBFF0000000000000;
    unint64_t v51 = 0xFFFFFFFF00000000;
    uint64_t v52 = 0;
    unint64_t v53 = 0xBFF0000000000000;
    uint64_t v54 = 0;
    uint64_t v14 = (const std::string::value_type *)[(*(id *)(a1 + 64)) legacyClientKey UTF8String];
    std::string::assign((std::string *)(*(void *)&buf[8] + 48), v14);
    *(_DWORD *)(*(void *)&buf[8] + 96) = 2;
    double v15 = dispatch_group_create();
    dispatch_group_enter(v15);
    uint64_t v16 = *(void **)(*(void *)sub_1001B02F8(a1) + 16);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10017ACAC;
    v30[3] = &unk_10230E620;
    v30[4] = v15;
    v30[5] = buf;
    [v16 fetchLastSignificantLocationDistanceAndLatencyWithReply:v30];
    dispatch_group_enter(v15);
    std::string::size_type v17 = *(void **)(a1 + 128);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_10017AC8C;
    v29[3] = &unk_10230E648;
    v29[4] = v15;
    v29[5] = buf;
    sub_100163648(v17, (uint64_t)v29);
    uint64_t v19 = *(void *)(a1 + 280);
    std::string::size_type v18 = *(std::__shared_weak_count **)(a1 + 288);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v18);
    }
    double v20 = [[objc_msgSend(*(id *)(a1 + 128), "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_10017ABF0;
    block[3] = &unk_10230E670;
    void block[6] = v19;
    int v28 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    block[4] = v15;
    void block[5] = buf;
    dispatch_group_notify(v15, v20, block);
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    _Block_object_dispose(buf, 8);
    if (SHIBYTE(v44[0]) < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(&v31);
}

void sub_10004CC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
}

uint64_t sub_10004CCEC(double *a1, _DWORD *a2)
{
  double v3 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v3 >= 0.0 ? (BOOL v4 = v3 <= 1.0) : (BOOL v4 = 0), !v4))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      double v6 = *a1;
      *(_DWORD *)uint64_t buf = 134217984;
      double v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Indoor,likelihoodObservationGivenIndoor,%f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1)
    {
LABEL_26:
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimator_Type::OutdoorEstimatorEmissionLikelihood(const void *, cnmatrix::CNMatrix<max_nx, 1, T> &) [max_nx = 2U, T = double]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0xFFFFFFFFLL;
    }
LABEL_28:
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
    goto LABEL_26;
  }
  double v8 = a1[1];
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v8 >= 0.0 ? (BOOL v9 = v8 <= 1.0) : (BOOL v9 = 0), !v9))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    double v10 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      double v11 = a1[1];
      *(_DWORD *)uint64_t buf = 134217984;
      double v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Outdoor,likelihoodObservationGivenOutdoor,%f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  sub_10018869C(a2, 2u, 1);
  double v13 = *a1;
  *(double *)sub_10004DF44((uint64_t)a2, 0, 0) = v13;
  uint64_t v14 = *((void *)a1 + 1);
  double v15 = (void *)sub_10004DF44((uint64_t)a2, 1, 0);
  uint64_t result = 0;
  void *v15 = v14;
  return result;
}

void sub_10004D038(uint64_t a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  BOOL v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,processEvidence(),Process ActivityState", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v43) = 0;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 3);
  *(void *)(a1 + 176) = *a2;
  if (!*(unsigned char *)(a1 + 240))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    double v13 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v43) = 0;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v14);
      goto LABEL_71;
    }
    return;
  }
  uint64_t v40 = 0x100000001;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v39 = v5;
  uint64_t v38 = off_10232BFB0;
  long long v41 = &v42;
  *(void *)sub_10004DF44((uint64_t)&v38, 0, 0) = sub_10004CCEC;
  uint64_t v35 = 0x100000001;
  __int16 v33 = off_10232BFF8;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  long long v34 = v6;
  uint64_t v36 = &v37;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v31 = _Q0;
  uint64_t v32 = *a2;
  double v30 = -1.0;
  if (!sub_100182078(a1 + 136, *((_DWORD *)a2 + 3), *(_DWORD *)(a1 + 160), &v30))
  {
    if (v30 < 0.0 || v30 > 1.0 || (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v16 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1)
      {
LABEL_70:
        LOWORD(v43) = 0;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v14);
LABEL_71:
        if (v14 != (char *)buf) {
          free(v14);
        }
        return;
      }
    }
    else
    {
      *((double *)&v31 + 1) = v30;
      double v30 = -1.0;
      if (sub_100182274(a1 + 136, *((_DWORD *)a2 + 3), *(_DWORD *)(a1 + 160), &v30))
      {
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        double v15 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 == -1) {
          goto LABEL_70;
        }
      }
      else
      {
        if (v30 >= 0.0 && v30 <= 1.0 && (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          *(double *)&long long v31 = v30;
          *(void *)sub_10004DF44((uint64_t)&v33, 0, 0) = &v31;
          sub_1000630D0(a1, (uint64_t)buf);
          sub_1001884A4((uint64_t)&v43, (uint64_t)&v38);
          sub_10018834C((uint64_t)v29, (uint64_t)&v33);
          int v17 = sub_100061B84(a1, 2, (uint64_t)buf, 1, (uint64_t)&v43, (uint64_t)v29);
          if (v17)
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            double v18 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 67109120;
              LODWORD(v54) = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,HMM update failed,%d", buf, 8u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              int v43 = 67109120;
              LODWORD(v44) = v17;
              uint64_t v14 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v14);
              goto LABEL_71;
            }
          }
          else
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            double v20 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v21 = *a2;
              int v22 = *((_DWORD *)a2 + 3);
              uint64_t v23 = *(void *)(a1 + 248);
              *(_DWORD *)uint64_t buf = 134219009;
              uint64_t v54 = v21;
              __int16 v55 = 1025;
              int v56 = v22;
              __int16 v57 = 2048;
              uint64_t v58 = v23;
              __int16 v59 = 2049;
              uint64_t v60 = *((void *)&v31 + 1);
              __int16 v61 = 2049;
              uint64_t v62 = v31;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_ActivityState,evidenceCfatSec,%f,motionActivityType,%{private}d,EstimatorTimeCfaSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f", buf, 0x30u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              uint64_t v25 = *a2;
              int v26 = *((_DWORD *)a2 + 3);
              uint64_t v27 = *(void *)(a1 + 248);
              int v43 = 134219009;
              uint64_t v44 = v25;
              __int16 v45 = 1025;
              int v46 = v26;
              __int16 v47 = 2048;
              uint64_t v48 = v27;
              __int16 v49 = 2049;
              uint64_t v50 = *((void *)&v31 + 1);
              __int16 v51 = 2049;
              uint64_t v52 = v31;
              int v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v28);
              if (v28 != (char *)buf) {
                free(v28);
              }
            }
            sub_100062B8C(a1);
          }
          return;
        }
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        uint64_t v19 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 == -1) {
          goto LABEL_70;
        }
      }
    }
LABEL_77:
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
    goto LABEL_70;
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  std::string::size_type v12 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_70;
    }
    goto LABEL_77;
  }
}

uint64_t sub_10004DC14(double *a1, _DWORD *a2)
{
  double v2 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v2 >= 0.0 ? (BOOL v3 = v2 <= 1.0) : (BOOL v3 = 0), !v3))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    BOOL v4 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "OutdoorEstimatorTransitionProbability,Invalid Indoor Given Indoor Probability", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1)
    {
LABEL_26:
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimator_Type::OutdoorEstimatorTransitionProbability(const void *, cnmatrix::CNMatrix<max_nx, max_nx, T> &) [max_nx = 2U, T = double]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      return 0xFFFFFFFFLL;
    }
LABEL_28:
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
    goto LABEL_26;
  }
  double v6 = a1[1];
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v6 >= 0.0 ? (BOOL v7 = v6 <= 1.0) : (BOOL v7 = 0), !v7))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    double v8 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "OutdoorEstimatorTransitionProbability,Invalid Outdoor Given Outdoor Probability", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  sub_10018865C(a2, 2u, 2u);
  *(double *)sub_10004DF44((uint64_t)a2, 0, 0) = v2;
  *(double *)sub_10004DF44((uint64_t)a2, 0, 1) = 1.0 - v6;
  *(double *)sub_10004DF44((uint64_t)a2, 1, 0) = 1.0 - v2;
  double v10 = (double *)sub_10004DF44((uint64_t)a2, 1, 1);
  uint64_t result = 0;
  double *v10 = v6;
  return result;
}

uint64_t sub_10004DF44(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_101A7D9A0();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_101A7D9CC();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_101A7D9F8();
  }
  return v3 + 8 * v4;
}

void sub_10004DF88(uint64_t a1, int32x4_t *a2, int *a3, uint64_t a4)
{
  if (*(void *)(a1 + 16))
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      double v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a2->i32[0]) {
          BOOL v7 = a2->i32[1] == 0;
        }
        else {
          BOOL v7 = 1;
        }
        int v8 = !v7;
        if (*a3) {
          BOOL v9 = a3[1] == 0;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        *(_DWORD *)uint64_t buf = 67109376;
        int v64 = v8;
        __int16 v65 = 1024;
        LODWORD(v66) = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLOutdoor_Type,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        if (a2->i32[0]) {
          BOOL v11 = a2->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a3) {
          BOOL v13 = a3[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        v58[0] = 67109376;
        v58[1] = v12;
        __int16 v59 = 1024;
        int v60 = v14;
        double v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    else
    {
      sub_100168850(v58);
      double v18 = (__n128 *)sub_10016BA10();
      sub_100168854(v18, v48);
      int v47 = 4;
      sub_100165AD4((uint64_t)v58, (unsigned int *)&v47, a2, a3, (uint64_t *)v48);
      v62 |= 2u;
      uint64_t v19 = v61;
      if (!v61) {
        operator new();
      }
      *(_DWORD *)(v61 + 492) |= 0x800u;
      uint64_t v20 = *(void *)(v19 + 352);
      if (!v20) {
        operator new();
      }
      *(_DWORD *)(v20 + 184) |= 0x20000u;
      uint64_t v21 = *(void *)(v20 + 136);
      if (!v21) {
        operator new();
      }
      *(_DWORD *)(v21 + 28) |= 1u;
      *(_DWORD *)(v21 + 8) = -1;
      if (!sub_1001A4C4C(1u)) {
        __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9616, "::CLP::LogEntry::PrivateData::OutdoorServiceNotification_NotificationType_IsValid(value)");
      }
      int v22 = *(_DWORD *)(v21 + 28);
      *(_DWORD *)(v21 + 12) = 1;
      *(_DWORD *)(v21 + 28) = v22 | 6;
      uint64_t v23 = *(void *)(v21 + 16);
      if (!v23) {
        operator new();
      }
      *(_DWORD *)(v23 + 20) |= 1u;
      uint64_t v24 = *(void *)(v23 + 8);
      if (!v24) {
        operator new();
      }
      sub_100031160(a4, v24);
      int v25 = sub_100168A44(a1);
      if (*(unsigned char *)(a1 + 8))
      {
        int v26 = v25;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        uint64_t v27 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v28 = &v49;
          sub_101522B64(&v47, &v49);
          if (SBYTE3(v53) < 0) {
            int v28 = v49;
          }
          LODWORD(v40[0]) = a2->i32[0];
          double v29 = v45;
          sub_101522E48((int *)v40, v45);
          if (v46 < 0) {
            double v29 = (void **)v45[0];
          }
          int v42 = *a3;
          double v30 = __p;
          sub_101522E48(&v42, __p);
          if (v44 < 0) {
            double v30 = (void **)__p[0];
          }
          uint64_t v31 = sub_10016BA10();
          double v32 = sub_10018202C(v31);
          *(_DWORD *)uint64_t buf = 67110146;
          int v64 = v26;
          __int16 v65 = 2080;
          uint64_t v66 = v28;
          __int16 v67 = 2080;
          double v68 = v29;
          __int16 v69 = 2080;
          uint64_t v70 = v30;
          __int16 v71 = 2050;
          double v72 = v32;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLOutdoor_Type,success,%d,message_type,%s,from,%s,to,%s,propagation_us,%{public}.3f", buf, 0x30u);
          if (v44 < 0) {
            operator delete(__p[0]);
          }
          if (v46 < 0) {
            operator delete(v45[0]);
          }
          if (SBYTE3(v53) < 0) {
            operator delete(v49);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          __int16 v33 = v45;
          sub_101522B64(&v47, v45);
          if (v46 < 0) {
            __int16 v33 = (void **)v45[0];
          }
          int v42 = a2->i32[0];
          long long v34 = __p;
          sub_101522E48(&v42, __p);
          if (v44 < 0) {
            long long v34 = (void **)__p[0];
          }
          int v39 = *a3;
          uint64_t v35 = v40;
          sub_101522E48(&v39, v40);
          if (v41 < 0) {
            uint64_t v35 = (void **)v40[0];
          }
          uint64_t v36 = sub_10016BA10();
          double v37 = sub_10018202C(v36);
          LODWORD(v49) = 67110146;
          HIDWORD(v49) = v26;
          __int16 v50 = 2080;
          __int16 v51 = v33;
          __int16 v52 = 2080;
          unint64_t v53 = v34;
          __int16 v54 = 2080;
          __int16 v55 = v35;
          __int16 v56 = 2050;
          double v57 = v37;
          uint64_t v38 = (char *)_os_log_send_and_compose_impl();
          if (v41 < 0) {
            operator delete(v40[0]);
          }
          if (v44 < 0) {
            operator delete(__p[0]);
          }
          if (v46 < 0) {
            operator delete(v45[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
      }
      sub_1001687EC(v58);
    }
  }
}

void sub_10004E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10004E7C4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 35)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      double v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v7 + 23) >= 0) {
          int v8 = (const char *)v7;
        }
        else {
          int v8 = *(const char **)v7;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v16 = 0;
        __int16 v17 = 2082;
        double v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning unrecognized message\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    unsigned int v4 = (void *)*v4;
  }
  else if (v5 != 35)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "InUseAssertion/kCLConnectionMessage", 0x23uLL)) {
    goto LABEL_7;
  }
  BOOL v9 = _os_activity_create((void *)&_mh_execute_header, "CL: InUseAssertion/kCLConnectionMessage", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301180);
  }
  int v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v16 = 0;
    __int16 v17 = 2082;
    double v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "activity";
    __int16 v21 = 2050;
    uint64_t v22 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"InUseAssertion/kCLConnectionMessage\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  BOOL v11 = *(CLConnectionMessage **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v13[0] = v11;
  v13[1] = (CLConnectionMessage *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100063720(a1, v13);
  if (v12) {
    sub_1000DB0A0((std::__shared_weak_count *)v12);
  }
  os_activity_scope_leave(&state);
}

void sub_10004EA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11) {
    sub_1000DB0A0(v11);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10004EBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

BOOL sub_10004F014(uint64_t a1, double a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  unsigned int v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,predict()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v43) = 0;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (*(unsigned char *)(a1 + 240))
  {
    if (vabdd_f64(a2, *(double *)(a1 + 248)) < 2.22044605e-16)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      int v5 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,predict(),Estimator time equal to current time", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v43) = 0;
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n");
LABEL_47:
      if (v8 != buf) {
        free(v8);
      }
      return 0;
    }
    double v42 = a2;
    long long v41 = *(_OWORD *)(a1 + 144);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    BOOL v9 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 144);
      uint64_t v11 = *(void *)(a1 + 152);
      uint64_t v12 = *(void *)(a1 + 248);
      *(_DWORD *)uint64_t buf = 134284033;
      uint64_t v60 = v10;
      __int16 v61 = 2049;
      uint64_t v62 = v11;
      __int16 v63 = 2048;
      uint64_t v64 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_TransitionProbability,transitionProbabilityIndoorGivenIndoor,%{private}f,transitionProbabilityOutdoorGivenOutdoor,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v27 = *(void *)(a1 + 144);
      uint64_t v28 = *(void *)(a1 + 152);
      uint64_t v29 = *(void *)(a1 + 248);
      int v43 = 134284033;
      uint64_t v44 = v27;
      __int16 v45 = 2049;
      uint64_t v46 = v28;
      __int16 v47 = 2048;
      uint64_t v48 = v29;
      double v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v13 = sub_1001BE990((_DWORD *)a1, (unsigned int (*)(uint64_t, uint64_t (***)()))sub_10004DC14, (uint64_t)&v41);
    BOOL v6 = v13 == 0;
    if (v13)
    {
      int v14 = v13;
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      double v15 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        LODWORD(v60) = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,predict(),Failed,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        int v43 = 67109120;
        LODWORD(v44) = v14;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
    }
    else
    {
      *(double *)(a1 + 248) = a2;
      *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
      sub_100062B8C(a1);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      int v16 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 184);
        uint64_t v18 = *(void *)(a1 + 192);
        uint64_t v19 = *(void *)(a1 + 200);
        uint64_t v20 = *(void *)(a1 + 208);
        int v21 = *(unsigned __int8 *)(a1 + 232);
        uint64_t v22 = *(void *)(a1 + 216);
        uint64_t v23 = *(void *)(a1 + 224);
        uint64_t v24 = *(void *)(a1 + 248);
        *(_DWORD *)uint64_t buf = 134219777;
        uint64_t v60 = v17;
        __int16 v61 = 2048;
        uint64_t v62 = v18;
        __int16 v63 = 2049;
        uint64_t v64 = v19;
        __int16 v65 = 2049;
        uint64_t v66 = v20;
        __int16 v67 = 2049;
        uint64_t v68 = v22;
        __int16 v69 = 1025;
        int v70 = v21;
        __int16 v71 = 2049;
        uint64_t v72 = v23;
        __int16 v73 = 2048;
        uint64_t v74 = v24;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_predict,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f", buf, 0x4Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        uint64_t v32 = *(void *)(a1 + 184);
        uint64_t v33 = *(void *)(a1 + 192);
        uint64_t v34 = *(void *)(a1 + 200);
        uint64_t v35 = *(void *)(a1 + 208);
        int v36 = *(unsigned __int8 *)(a1 + 232);
        uint64_t v37 = *(void *)(a1 + 216);
        uint64_t v38 = *(void *)(a1 + 224);
        uint64_t v39 = *(void *)(a1 + 248);
        int v43 = 134219777;
        uint64_t v44 = v32;
        __int16 v45 = 2048;
        uint64_t v46 = v33;
        __int16 v47 = 2049;
        uint64_t v48 = v34;
        __int16 v49 = 2049;
        uint64_t v50 = v35;
        __int16 v51 = 2049;
        uint64_t v52 = v37;
        __int16 v53 = 1025;
        int v54 = v36;
        __int16 v55 = 2049;
        uint64_t v56 = v38;
        __int16 v57 = 2048;
        uint64_t v58 = v39;
        uint64_t v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v7 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,predict(),HMM Not initialized", buf, 2u);
    }
    BOOL v6 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v43) = 0;
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n");
      goto LABEL_47;
    }
  }
  return v6;
}

void sub_10004F998(uint64_t a1, uint64_t a2)
{
  v5[0] = a2;
  v5[1] = &v7;
  v5[2] = &v6;
  sub_100134750(__p, "InAWeek");
  sub_10004FB2C(v5, *(double *)(a1 + 3624), @"CLBaroAltCalibrationCountMMForAWeek", @"CLBaroAltCalibrationCountOutdoorContextForAWeek", @"CLBaroAltAppropriateToCalibrateCountForAWeek", @"CLBaroAltCalibrationCountOnlyUsedDEMForAWeek", @"CLBaroAltCalibrationCountUsedDEMandRefPressureForAWeek", @"CLBaroAltCalibrationStartMonitoringCFAbsTimeForAWeek", (void ***)__p, a1 + 3512, (uint64_t *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "InAMonth");
  sub_10004FB2C(v5, *(double *)(a1 + 3632), @"CLBaroAltCalibrationCountMMForAMonth", @"CLBaroAltCalibrationCountOutdoorContextForAMonth", @"CLBaroAltAppropriateToCalibrateCountForAMonth", @"CLBaroAltCalibrationCountOnlyUsedDEMForAMonth", @"CLBaroAltCalibrationCountUsedDEMandRefPressureForAMonth", @"CLBaroAltCalibrationStartMonitoringCFAbsTimeForAMonth", (void ***)__p, a1 + 3544, (uint64_t *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "In3Months");
  sub_10004FB2C(v5, *(double *)(a1 + 3640), @"CLBaroAltCalibrationCountMMFor3Months", @"CLBaroAltCalibrationCountOutdoorContextFor3Months", @"CLBaroAltAppropriateToCalibrateCountFor3Months", @"CLBaroAltCalibrationCountOnlyUsedDEMFor3Months", @"CLBaroAltCalibrationCountUsedDEMandRefPressureFor3Months", @"CLBaroAltCalibrationStartMonitoringCFAbsTimeFor3Months", (void ***)__p, a1 + 3576, (uint64_t *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10004FB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004FB2C(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFString *a8, void ***a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v15 = *a11;
  if (*a11)
  {
    *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
    double v16 = sub_1000A4CE8(v15, (double *)buf);
    double v17 = sub_1000A4F34(v16, *(double *)(a10 + 24), 315360000.0);
  }
  else
  {
    double v17 = 0.0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v18 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a9 + 23) >= 0) {
      uint64_t v19 = a9;
    }
    else {
      uint64_t v19 = *a9;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&buf[14] = v17;
    *(_WORD *)&unsigned char buf[22] = 2050;
    double v77 = a2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,uploadToAnalyticsCheck,durationSinceStartMonitoringTimeSec,%{public}.3lf,baroAltCalibrationUploadThreshold,%{public}.3lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    if (*((char *)a9 + 23) >= 0) {
      uint64_t v52 = a9;
    }
    else {
      uint64_t v52 = *a9;
    }
    int v59 = 136315650;
    v60[0] = v52;
    LOWORD(v60[1]) = 2050;
    *(double *)((char *)&v60[1] + 2) = v17;
    WORD1(v60[2]) = 2050;
    *(double *)((char *)&v60[2] + 4) = a2;
    __int16 v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::submitCalibrationAnalyticsData(const CLDaemonLocation &)::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, const double, BarometricAltitudeCalibrationAnalyticsData &, const std::unique_ptr<CLBarometricAltimeterCore> &) const", "%s\n", v53);
    if (v53 != buf) {
      free(v53);
    }
  }
  if (fabs(v17) > a2)
  {
    *(void *)((char *)v60 + 4) = 0xBFF0000000000000;
    memset((char *)&v60[1] + 4, 0, 60);
    LOBYTE(v59) = 1;
    uint64_t v20 = *a11;
    if (*a11)
    {
      *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
      double v21 = sub_1000A4CE8(v20, (double *)buf);
    }
    else
    {
      double v21 = 0.0;
    }
    *(double *)((char *)v60 + 4) = v21;
    std::string::assign((std::string *)((char *)&v60[1] + 4), "com.apple.locationd");
    HIDWORD(v60[4]) = vcvtad_u64_f64(v17);
    *(_OWORD *)&v60[5] = *(_OWORD *)a10;
    LODWORD(v60[7]) = *(_DWORD *)(a10 + 16);
    uint64_t v22 = (float64x2_t *)(*a1 + 4);
    uint64_t v23 = (double *)(*a1 + 12);
    *(float32x2_t *)((char *)&v60[7] + 4) = vcvt_f32_f64(*v22);
    sub_1001A0BB0(v22->f64, v23, (_DWORD *)&v60[8] + 1);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v24 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a9 + 23) >= 0) {
        int v25 = a9;
      }
      else {
        int v25 = *a9;
      }
      *(_DWORD *)uint64_t buf = 136317443;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = HIDWORD(v60[4]);
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v60[5];
      LOWORD(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 2) = HIDWORD(v60[5]);
      HIWORD(v77) = 1024;
      *(_DWORD *)uint64_t v78 = v60[6];
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = HIDWORD(v60[6]);
      __int16 v79 = 1024;
      int v80 = v60[7];
      __int16 v81 = 2049;
      double v82 = *((float *)&v60[7] + 1);
      __int16 v83 = 2049;
      double v84 = *(float *)&v60[8];
      __int16 v85 = 1025;
      int v86 = HIDWORD(v60[8]);
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#gnssca Submit BaroAltitudeCalibrationInfo session metric to CA,%s,durationSinceStartMonitoringTimeSec,%d,calibrationCountMM,%d,calibrationCountOutdoorContext,%d,appropriateToCalibrateCount,%d,calibrationCountOnlyUsedDEM,%d,calibrationCountUsedDEMandRefPressure,%d,deresFinalLatitude,%{private}.7f,deresFinalLongitude,%{private}.7f,deweightedAreaID,%{private}d", buf, 0x4Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      if (*((char *)a9 + 23) >= 0) {
        std::string::size_type v54 = (std::string::size_type)a9;
      }
      else {
        std::string::size_type v54 = (std::string::size_type)*a9;
      }
      LODWORD(v61.__r_.__value_.__l.__data_) = 136317443;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) = v54;
      WORD2(v61.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v61.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v60[4]);
      WORD1(v61.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v61.__r_.__value_.__r.__words[2]) = v60[5];
      __int16 v62 = 1024;
      int v63 = HIDWORD(v60[5]);
      __int16 v64 = 1024;
      int v65 = v60[6];
      __int16 v66 = 1024;
      int v67 = HIDWORD(v60[6]);
      __int16 v68 = 1024;
      int v69 = v60[7];
      __int16 v70 = 2049;
      double v71 = *((float *)&v60[7] + 1);
      __int16 v72 = 2049;
      double v73 = *(float *)&v60[8];
      __int16 v74 = 1025;
      int v75 = HIDWORD(v60[8]);
      __int16 v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::submitCalibrationAnalyticsData(const CLDaemonLocation &)::(anonymous class)::operator()(const CLDaemonStats_Type::BarometricAltitudeCalibrationData &, const std::string &) const", "%s\n", v55);
      if (v55 != buf) {
        free(v55);
      }
    }
    memset(&v61, 0, sizeof(v61));
    int v26 = *((unsigned __int8 *)a9 + 23);
    if ((v26 & 0x80) != 0)
    {
      uint64_t v28 = a9[1];
      if (v28 != (void **)7)
      {
        if (v28 != (void **)8)
        {
          if (v28 != (void **)9) {
            goto LABEL_62;
          }
          uint64_t v27 = (uint64_t *)*a9;
          goto LABEL_33;
        }
        uint64_t v33 = **a9;
LABEL_47:
        if (v33 != (void *)0x68746E6F4D416E49) {
          goto LABEL_62;
        }
        uint64_t v32 = "com.apple.locationd.position.BaroAltitudeCalibrationInAMonth";
        goto LABEL_55;
      }
      if (*(_DWORD *)*a9 != 1463905865 || *(_DWORD *)((char *)*a9 + 3) != 1801807191) {
        goto LABEL_62;
      }
    }
    else
    {
      if (v26 != 7)
      {
        if (v26 != 8)
        {
          uint64_t v27 = (uint64_t *)a9;
          if (v26 != 9) {
            goto LABEL_62;
          }
LABEL_33:
          uint64_t v29 = *v27;
          int v30 = *((unsigned __int8 *)v27 + 8);
          if (v29 != 0x68746E6F4D336E49 || v30 != 115) {
            goto LABEL_62;
          }
          uint64_t v32 = "com.apple.locationd.position.BaroAltitudeCalibrationIn3Months";
          goto LABEL_55;
        }
        uint64_t v33 = *a9;
        goto LABEL_47;
      }
      if (*(_DWORD *)a9 != 1463905865 || *(_DWORD *)((char *)a9 + 3) != 1801807191) {
        goto LABEL_62;
      }
    }
    uint64_t v32 = "com.apple.locationd.position.BaroAltitudeCalibrationInfo";
LABEL_55:
    std::string::assign(&v61, v32);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      int v36 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if (!v61.__r_.__value_.__l.__size_)
      {
LABEL_61:
        operator delete(v36);
        goto LABEL_62;
      }
    }
    else
    {
      if (!*((unsigned char *)&v61.__r_.__value_.__s + 23)) {
        goto LABEL_62;
      }
      int v36 = &v61;
    }
    +[NSString stringWithUTF8String:v36];
    *(void *)uint64_t buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10192531C;
    double v77 = COERCE_DOUBLE(&unk_1022A6368);
    *(void *)uint64_t v78 = &v59;
    AnalyticsSendEventLazy();
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      int v36 = (std::string *)v61.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
LABEL_62:
    uint64_t v37 = sub_1000A6958();
    sub_1004CF870(v37);
    uint64_t v38 = sub_1000A6958();
    sub_1004CF870(v38);
    uint64_t v39 = sub_1000A6958();
    sub_1004CF870(v39);
    uint64_t v40 = sub_1000A6958();
    sub_1004CF870(v40);
    uint64_t v41 = sub_1000A6958();
    sub_1004CF870(v41);
    uint64_t v42 = sub_1000A6958();
    sub_1004CF870(v42);
    uint64_t v43 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v43 + 944))(v43);
    *(void *)(a10 + 24) = 0;
    uint64_t v44 = (double *)(a10 + 24);
    *(void *)a10 = 0;
    *(void *)(a10 + 8) = 0;
    *(_DWORD *)(a10 + 16) = 0;
    uint64_t v45 = *a11;
    if (*a11)
    {
      *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
      double v46 = sub_1000A4CE8(v45, (double *)buf);
    }
    else
    {
      double v46 = 0.0;
    }
    *uint64_t v44 = v46;
    uint64_t v47 = sub_1000A6958();
    sub_100163398(v47, a8, (const void *)(a10 + 24));
    uint64_t v48 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v48 + 944))(v48);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v49 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a9 + 23) >= 0) {
        uint64_t v50 = a9;
      }
      else {
        uint64_t v50 = *a9;
      }
      double v51 = *v44;
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v50;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v51;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,RestoreStartMonitoringCalibrationTimeForAnalytics,%{public}lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      if (*((char *)a9 + 23) >= 0) {
        uint64_t v56 = a9;
      }
      else {
        uint64_t v56 = *a9;
      }
      double v57 = *v44;
      LODWORD(v61.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
      WORD2(v61.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&v61.__r_.__value_.__r.__words[1] + 6) = v57;
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::submitCalibrationAnalyticsData(const CLDaemonLocation &)::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, const double, BarometricAltitudeCalibrationAnalyticsData &, const std::unique_ptr<CLBarometricAltimeterCore> &) const", "%s\n", v58);
      if (v58 != buf) {
        free(v58);
      }
    }
    if (SBYTE3(v60[4]) < 0) {
      operator delete(*(void **)((char *)&v60[1] + 4));
    }
  }
}

void sub_1000504E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientRegisterLQMCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    char v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientRegisterLQMCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10017B2B8;
  v9[3] = &unk_1022B8680;
  v9[4] = a3;
  void v9[5] = a1;
  v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100050810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050830(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = sub_100103E24(a1, a2);
  int v30 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    [v5 cppClientKey];
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)uint64_t v32 = 0;
    *(void *)&v32[8] = 0;
  }
  v23[0] = (uint64_t *)buf;
  char v6 = sub_100024ABC(a1 + 976, buf, (uint64_t)&unk_101D0B290, (long long **)v23) + 40;
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)uint64_t buf = &v29;
  char v7 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  id v8 = (std::__shared_weak_count *)v7[4];
  if (v8)
  {
    BOOL v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = (const void *)v7[3];
      if (v10)
      {
        if (!v11)
        {
          *a3 = 0;
          a3[1] = 0;
          if (qword_102419530 != -1) {
            goto LABEL_48;
          }
          while (1)
          {
            __int16 v18 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)uint64_t v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            uint64_t v19 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)uint64_t v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            uint64_t v20 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)uint64_t v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            abort_report_np();
            __break(1u);
LABEL_48:
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        *a3 = v11;
        a3[1] = v9;
        goto LABEL_36;
      }
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  uint64_t v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    *(void *)uint64_t buf = 68289538;
    *(_WORD *)uint64_t v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = (unint64_t)"29CLVisitMonitoringSubscription" & 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)&v32[20] = 2114;
    *(void *)&v32[22] = v30;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  uint64_t v28 = sub_100122128(a1, (uint64_t)v30, &xmmword_101D82EB8);
  if (v30)
  {
    [v30 cppClientKey];
  }
  else
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
  }
  sub_100195734(__p);
  sub_1001A5B94((char *)buf, &v26, (long long *)__p, (uint64_t)v29);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  sub_10017EF58((void **)(a1 + 32), (void **)&v28, &v30, (uint64_t)buf, v23);
  __int16 v14 = v23[0];
  int v13 = v23[1];
  *a3 = v23[0];
  a3[1] = v13;
  v23[0] = (uint64_t *)&v29;
  uint64_t v15 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, v23);
  if (v13) {
    atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
  }
  __int16 v16 = (std::__shared_weak_count *)v15[4];
  v15[3] = v14;
  v15[4] = v13;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  double v17 = *(std::__shared_weak_count **)(a1 + 1024);
  uint64_t v21 = *(void *)(a1 + 1016);
  uint64_t v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1001962A8(v14, &v21);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v33 < 0) {
    operator delete(*(void **)&v32[16]);
  }
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v9) {
LABEL_36:
  }
    sub_1000DB0A0(v9);
}

void sub_100050DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000DB0A0(v29);
  if (*(void *)(v28 + 8)) {
    sub_1000DB0A0(*(std::__shared_weak_count **)(v28 + 8));
  }
  _Unwind_Resume(a1);
}

void *sub_100050E80(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = *(void *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    BOOL v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v8)
        {
          if (sub_1000E9B14(i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  __int16 v18 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v19 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100100330(a1, v25);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    void *i = *v27;
LABEL_41:
    void *v27 = i;
    goto LABEL_42;
  }
  void *i = *v18;
  *__int16 v18 = i;
  *(void *)(v26 + 8 * v4) = v18;
  if (*i)
  {
    unint64_t v28 = *(void *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12) {
        v28 %= v12;
      }
    }
    else
    {
      v28 &= v12 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1000510E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1007E2750(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100051104(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AEF0 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

id *sub_1000511A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000E1294((uint64_t *)v14, (uint64_t)"CLCellTilesManager::traverseAllTilesSets", 0);
  int v6 = (void *)(a1 + 416);
  for (unsigned int i = -3; i != 10; ++i)
  {
    if (i <= 2)
    {
      uint64_t v8 = sub_10015EF24(i + 3, v6);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      BOOL v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = v8 + 8;
        if (*(char *)(v8 + 31) < 0) {
          uint64_t v10 = *(void *)(v8 + 8);
        }
        *(_DWORD *)uint64_t buf = 136315394;
        uint64_t v20 = a2;
        __int16 v21 = 2080;
        uint64_t v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: performing, sAction, %s, tilesSet, %s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        uint64_t v11 = v8 + 8;
        if (*(char *)(v8 + 31) < 0) {
          uint64_t v11 = *(void *)(v8 + 8);
        }
        int v15 = 136315394;
        uint64_t v16 = a2;
        __int16 v17 = 2080;
        uint64_t v18 = v11;
        unint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v8);
    }
  }
  return sub_1000E1098(v14);
}

void sub_10005140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_10005142C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 160))
  {
    (*(void (**)(void))(**(void **)(v3 + 368) + 16))(*(void *)(v3 + 368));
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(double *)(v6 + 20) < 0.0 || vabdd_f64(v5, *(double *)(v6 + 76)) > 3600.0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: location not relevant", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        LOWORD(v33) = 0;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v8);
LABEL_24:
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
      return;
    }
    unint64_t v14 = (int *)(a2 + 4);
    sub_10014F674((uint64_t)&v33, (_DWORD *)(a2 + 4));
    sub_100146674((uint64_t)&v33, -1, *(double *)(*(void *)(a1 + 40) + 4), *(double *)(*(void *)(a1 + 40) + 12), *(double *)(a2 + 152), *(double *)(a2 + 160));
    if (sub_1001447B8(&v33))
    {
      uint64_t v15 = sub_100144000(a2 + 184, &v33);
      uint64_t v16 = v15;
      if (!v15 || !sub_1001453B8(v15, *(unsigned char *)(v3 + 128))) {
        goto LABEL_52;
      }
      double v17 = (*(double (**)(void))(**(void **)(v3 + 368) + 16))(*(void *)(v3 + 368));
      int v18 = sub_100144E3C(v16, v17);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      uint64_t v19 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *v14;
        sub_100C094CC((uint64_t)&v33);
        __int16 v21 = SHIBYTE(v32) >= 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 67109634;
        *(_DWORD *)uint64_t v38 = v18;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = (__int16)v20;
        __int16 v39 = 2080;
        uint64_t v40 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: updating mtime, %d, type, %d, tileid, %s", buf, 0x18u);
        if (SHIBYTE(v32) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_52;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      int v22 = *v14;
      sub_100C094CC((uint64_t)&v33);
      if (v27 >= 0) {
        unint64_t v23 = &v26;
      }
      else {
        unint64_t v23 = v26;
      }
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v18;
      __int16 v29 = 1024;
      int v30 = (__int16)v22;
      __int16 v31 = 2080;
      uint64_t v32 = v23;
      unint64_t v24 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v24);
      if (v24 == (char *)buf) {
        goto LABEL_52;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      size_t v25 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CellTile, Invalid tile id!, #CloneMe", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_52;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      LOWORD(__p) = 0;
      unint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v24);
      if (v24 == (char *)buf) {
        goto LABEL_52;
      }
    }
    free(v24);
LABEL_52:
    if (v36 < 0) {
      operator delete(v35);
    }
    return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  BOOL v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)uint64_t v38 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: tiles, %s, not active", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v12 = a2 + 8;
    uint64_t v11 = v13;
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v11 = v12;
    }
    unsigned int v33 = 136315138;
    uint64_t v34 = v11;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v8);
    goto LABEL_24;
  }
}

void sub_100051B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100051B80(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2 + 48;
  if (*(_DWORD *)(a2 + 48))
  {
    sub_101AAB164();
    __break(1u);
LABEL_25:
    dispatch_once(&qword_102419630, &stru_10231AE10);
    goto LABEL_16;
  }
  uint64_t v2 = a2;
  double v12 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
  double v13 = *(double *)(a1 + 308);
  double v14 = *(double *)(a1 + 252);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  double v15 = (*(double (**)(uint64_t))(*(void *)v2 + 56))(v2) / 20.0;
  double v16 = fmin(fmax(v15, (*(double (**)(uint64_t))(*(void *)v2 + 64))(v2) / 20.0), 0.01);
  double v17 = *(double *)(a1 + 236);
  double v8 = v17 - sub_10013DAC0(v10);
  double v18 = *(double *)(a1 + 244);
  double v9 = v18 - sub_10013DA9C(v10);
  BOOL v5 = v8 >= -v16 && v8 <= v16 + (*(double (**)(uint64_t))(*(void *)v2 + 56))(v2);
  double v19 = v12 - v13;
  BOOL v6 = v9 >= -v16 && v9 <= v16 + (*(double (**)(uint64_t))(*(void *)v2 + 64))(v2);
  BOOL v7 = v19 < *(double *)(v4 + 136) && v14 > 0.0;
  if (v7 && *(double *)(a1 + 252) <= 3000.0) {
    uint64_t v3 = v5 & v6;
  }
  else {
    uint64_t v3 = 0;
  }
  if (qword_102419630 != -1) {
    goto LABEL_25;
  }
LABEL_16:
  int v20 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *(unsigned __int8 *)(v4 + 177);
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v2 + 16))(__p, v2);
    int v22 = v32 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)uint64_t buf = 134219778;
    double v45 = v8;
    __int16 v46 = 2048;
    double v47 = v9;
    __int16 v48 = 1024;
    BOOL v49 = v5;
    __int16 v50 = 1024;
    BOOL v51 = v6;
    __int16 v52 = 1024;
    int v53 = v3;
    __int16 v54 = 1024;
    int v55 = v21;
    __int16 v56 = 1024;
    BOOL v57 = v7;
    __int16 v58 = 2080;
    int v59 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WIFITILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s", buf, 0x3Eu);
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    int v24 = *(unsigned __int8 *)(v4 + 177);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v2 + 16))(v27, v2);
    if (v28 >= 0) {
      size_t v25 = v27;
    }
    else {
      size_t v25 = (void **)v27[0];
    }
    *(_DWORD *)std::string __p = 134219778;
    *(double *)&__p[4] = v8;
    __int16 v30 = 2048;
    double v31 = v9;
    __int16 v32 = 1024;
    BOOL v33 = v5;
    __int16 v34 = 1024;
    BOOL v35 = v6;
    __int16 v36 = 1024;
    int v37 = v3;
    __int16 v38 = 1024;
    int v39 = v24;
    __int16 v40 = 1024;
    BOOL v41 = v7;
    __int16 v42 = 2080;
    uint64_t v43 = v25;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTilesManager::isCurrentTile(CLTileFile *)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return v3;
}

double sub_100052074()
{
  return 0.05;
}

uint64_t sub_100052080(uint64_t a1)
{
  uint64_t result = sub_10015F2DC((void *)(a1 + 512), 0);
  if (!result)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v2 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67174657;
      int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WifiTile, invalid tileType, %{private}d, #CloneMe", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLTilesSet &CLWifiTilesManager::getTilesSet()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      double v12 = "assert";
      __int16 v13 = 2081;
      double v14 = "false";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      double v12 = "assert";
      __int16 v13 = 2081;
      double v14 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
    }
    BOOL v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      double v12 = "assert";
      __int16 v13 = 2081;
      double v14 = "false";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  return result;
}

void sub_100052434(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  [*(id *)a1 silo];
  id v6 = [objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLClientAuthorizationCache"];
  if ((a2[23] & 0x80u) == 0) {
    BOOL v7 = (uint64_t *)a2;
  }
  else {
    BOOL v7 = *(uint64_t **)a2;
  }
  id v8 = [v6 syncgetAuthorizationContextIfClientIsNonZonal:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7)];
  if (!a3
    || (id v9 = v8, ([v8 isNonProvisionallyAuthorizedForServiceTypeMask:a3] & 1) != 0))
  {
    memset(&v58, 0, sizeof(v58));
    uint64_t v10 = sub_100122860(&xmmword_102480FE0, a2);
    if (!v10) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    std::string::operator=(&v58, (const std::string *)(v10 + 40));
    sub_10000FF54(&v58, (uint64_t)v44);
    unint64_t v11 = v49;
    if ((v49 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)v48[1];
    }
    if (v11)
    {
      id v12 = [[[*(id *)a1 vendor] proxyForService:@"CLClientManager"];
      if ((v49 & 0x80u) == 0) {
        __int16 v13 = v48;
      }
      else {
        __int16 v13 = (void **)v48[0];
      }
      [v12 wakeUpLaunchdManagedClient:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)]];
    }
    unint64_t v14 = v47;
    if ((v47 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)v46[1];
    }
    if (v14)
    {
      id v15 = [[objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLClientManager"];
      if ((v47 & 0x80u) == 0) {
        double v16 = v46;
      }
      else {
        double v16 = (void **)v46[0];
      }
      [v15 wakeUpLaunchdManagedClient:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)]];
    }
    sub_100052DDC((uint64_t)v44, (uint64_t)__p);
    if ((v69[3] & 0x80000000) != 0)
    {
      uint64_t v31 = *(void *)&__p[8];
      operator delete(*(void **)__p);
      if (v31) {
        goto LABEL_23;
      }
    }
    else if (v69[3])
    {
LABEL_23:
      sub_100052DDC((uint64_t)v44, (uint64_t)__p);
      id v17 = [[[*(id *)a1 vendor] proxyForService:@"CLClientManager"];
      if (v69[3] >= 0) {
        double v18 = __p;
      }
      else {
        double v18 = *(unsigned char **)__p;
      }
      [v17 wakeUpLaunchdManagedClient:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18)]];
      if ((v69[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (*(unsigned char *)(a1 + 48))
      {
        sub_100052DDC((uint64_t)v44, (uint64_t)v65);
        id v19 = objc_alloc((Class)NSString);
        if (v66 >= 0) {
          int v20 = v65;
        }
        else {
          int v20 = (void **)v65[0];
        }
        id v21 = [v19 initWithUTF8String:v20];
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F21C0);
        }
        int v22 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v23 = v65;
          if (v66 < 0) {
            unint64_t v23 = (void **)v65[0];
          }
          *(_DWORD *)std::string __p = 136380675;
          *(void *)&__p[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "ALM: %{private}s launching...", __p, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F21C0);
          }
          __int16 v38 = v65;
          if (v66 < 0) {
            __int16 v38 = (void **)v65[0];
          }
          int v63 = 136380675;
          __int16 v64 = v38;
          int v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)", "%s\n", v39);
          if (v39 != __p) {
            free(v39);
          }
        }
        int v24 = +[NSString stringWithUTF8String:"CLLaunchOptionsLocation"];
        v61[0] = FBSOpenApplicationOptionKeyPayloadOptions;
        int v59 = v24;
        uint64_t v60 = &__kCFBooleanTrue;
        size_t v25 = +[NSDictionary dictionaryWithObjects:&v60 forKeys:&v59 count:1];
        v61[1] = FBSOpenApplicationOptionKeyActivateSuspended;
        v62[0] = v25;
        v62[1] = &__kCFBooleanTrue;
        uint64_t v26 = +[FBSOpenApplicationOptions optionsWithDictionary:](FBSOpenApplicationOptions, "optionsWithDictionary:", +[NSDictionary dictionaryWithObjects:v62 forKeys:v61 count:2]);
        uint64_t v28 = *(void *)(a1 + 64);
        char v27 = *(std::__shared_weak_count **)(a1 + 72);
        if (v27)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_1000DB0A0(v27);
        }
        __int16 v29 = *(void **)(a1 + 80);
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3321888768;
        v40[2] = sub_100179B30;
        v40[3] = &unk_1022F2190;
        v40[4] = a1;
        v40[5] = v28;
        BOOL v41 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v66) < 0)
        {
          sub_1000DC48C(&v42, v65[0], (unint64_t)v65[1]);
        }
        else
        {
          long long v42 = *(_OWORD *)v65;
          uint64_t v43 = v66;
        }
        [v29 openApplication:v21 withOptions:v26 completion:v40];

        if (SHIBYTE(v43) < 0) {
          operator delete((void *)v42);
        }
        if (v41) {
          std::__shared_weak_count::__release_weak(v41);
        }
        if (v27) {
          std::__shared_weak_count::__release_weak(v27);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete(v65[0]);
        }
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F21C0);
        }
        __int16 v36 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          if ((a2[23] & 0x80u) == 0) {
            int v37 = (uint64_t *)a2;
          }
          else {
            int v37 = *(uint64_t **)a2;
          }
          *(void *)std::string __p = 68289283;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          __int16 v68 = 2081;
          *(void *)int v69 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ALM: failed attempt to launch before device unlocked since boot\", \"clientKey\":%{private, location:escape_only}s}", __p, 0x1Cu);
        }
      }
LABEL_81:
      if (v57 < 0) {
        operator delete(v56);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      if (v53 < 0) {
        operator delete(v52);
      }
      if (v51 < 0) {
        operator delete(v50);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2200);
    }
    __int16 v32 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      if ((a2[23] & 0x80u) == 0) {
        BOOL v33 = (uint64_t *)a2;
      }
      else {
        BOOL v33 = *(uint64_t **)a2;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%s doesn't have a bundle ID; not going to bug SpringBoard.",
        __p,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2200);
      }
      if ((a2[23] & 0x80u) == 0) {
        __int16 v34 = (uint64_t *)a2;
      }
      else {
        __int16 v34 = *(uint64_t **)a2;
      }
      LODWORD(v65[0]) = 136315138;
      *(void **)((char *)v65 + 4) = v34;
      BOOL v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)", "%s\n", v35);
      if (v35 != __p) {
        free(v35);
      }
    }
    goto LABEL_81;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F21C0);
  }
  __int16 v30 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)std::string __p = 68289538;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "";
    __int16 v68 = 1026;
    *(_DWORD *)int v69 = a3;
    *(_WORD *)&v69[4] = 2114;
    *(void *)&v69[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning ALM: dropping launchApplication request for unauthorized purpose\", \"RequiredServiceMask\":%{public}d, \"AuthContext\":%{public, location:escape_only}@}", __p, 0x22u);
  }
}

void sub_100052CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100052DDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000A84C8(a1);
  if (*(char *)(a1 + 127) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 104);
    unint64_t v5 = *(void *)(a1 + 112);
    sub_1000DC48C((unsigned char *)a2, v4, v5);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
    *(void *)(a2 + 16) = *(void *)(a1 + 120);
  }
}

double sub_100052E44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_100052EB4(a1 + 24, a2);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 148);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a2 + 40) = *(void *)a1;
  *(void *)(a2 + 80) = v4;
  double result = *(double *)(a1 + 16);
  *(double *)(a2 + 112) = result;
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 144);
  return result;
}

uint64_t sub_100052EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CLMotionActivity::init((CLMotionActivity *)a2);
  *(_DWORD *)a2 = sub_100052FC0((int *)a1);
  int v4 = sub_100052FC0((int *)(a1 + 24));
  int v5 = *(unsigned __int8 *)(a1 + 29);
  *(_DWORD *)(a2 + 88) = v4;
  *(_DWORD *)(a2 + 92) = v5;
  *(double *)(a2 + 80) = (double)*(unint64_t *)(a1 + 16) * 0.000001;
  int v6 = *(unsigned __int8 *)(a1 + 4);
  BOOL v7 = v6 == 3;
  if (v6 == 3) {
    int v6 = 2;
  }
  *(unsigned char *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 4) = v6;
  int v8 = *(unsigned __int8 *)(a1 + 6);
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 5);
  *(_DWORD *)(a2 + 16) = v8;
  float v9 = *(float *)(a1 + 84);
  *(_DWORD *)(a2 + 20) = v9 >= 0.75;
  *(double *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 52) = *(unsigned __int8 *)(a1 + 11);
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(a2 + 96) & 0xE0 | *(unsigned char *)(a1 + 36) & 0x1F;
  if (*(unsigned __int8 *)(a1 + 38) - 1 < 3) {
    int v10 = (*(unsigned char *)(a1 + 38) - 1) + 1;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a2 + 64) = v10;
  *(_WORD *)(a2 + 74) = *(_WORD *)(a1 + 46);
  uint64_t result = sub_100052FC0((int *)(a1 + 56));
  *(void *)(a2 + 120) = *(void *)(a1 + 72);
  *(_DWORD *)(a2 + 100) = *(unsigned __int8 *)(a1 + 37);
  *(_DWORD *)(a2 + 104) = result;
  if (*(unsigned __int8 *)(a1 + 80) - 1 < 3) {
    int v12 = (*(unsigned char *)(a1 + 80) - 1) + 1;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)(a2 + 128) = v12;
  return result;
}

uint64_t sub_100052FC0(int *a1)
{
  int v1 = *a1;
  if (*a1 <= 255)
  {
    if (v1 == 128) {
      int v5 = 6;
    }
    else {
      int v5 = 0;
    }
    if (v1 == 64) {
      unsigned int v6 = 8;
    }
    else {
      unsigned int v6 = v5;
    }
    if (v1 == 32) {
      int v7 = 41;
    }
    else {
      int v7 = 0;
    }
    if (v1 == 16) {
      int v8 = 4;
    }
    else {
      int v8 = v7;
    }
    if (v1 <= 63) {
      unsigned int v6 = v8;
    }
    if (v1 == 12) {
      int v9 = 7;
    }
    else {
      int v9 = 0;
    }
    if (v1 == 4) {
      unsigned int v10 = 3;
    }
    else {
      unsigned int v10 = v9;
    }
    if (v1 == 2) {
      int v11 = 2;
    }
    else {
      int v11 = 0;
    }
    if (v1 == 1) {
      int v11 = 1;
    }
    if (v1 <= 3) {
      unsigned int v10 = v11;
    }
    BOOL v14 = __OFSUB__(v1, 15);
    BOOL v12 = v1 == 15;
    BOOL v13 = v1 - 15 < 0;
    goto LABEL_54;
  }
  if (v1 < 12288)
  {
    if (v1 == 0x2000) {
      int v15 = 52;
    }
    else {
      int v15 = 0;
    }
    if (v1 == 4096) {
      unsigned int v6 = 5;
    }
    else {
      unsigned int v6 = v15;
    }
    if (v1 == 512) {
      int v16 = 11;
    }
    else {
      int v16 = 0;
    }
    if (v1 == 256) {
      unsigned int v10 = 10;
    }
    else {
      unsigned int v10 = v16;
    }
    BOOL v14 = __OFSUB__(v1, 4095);
    BOOL v12 = v1 == 4095;
    BOOL v13 = v1 - 4095 < 0;
LABEL_54:
    if (v13 ^ v14 | v12) {
      return v10;
    }
    else {
      return v6;
    }
  }
  if (v1 < 196608)
  {
    if (v1 == 12288 || v1 == 0x4000) {
      return 56;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (v1 == 0x200000) {
      int v2 = 62;
    }
    else {
      int v2 = 0;
    }
    if (v1 == 0x100000) {
      unsigned int v3 = 61;
    }
    else {
      unsigned int v3 = v2;
    }
    if (v1 == 196608) {
      return 41;
    }
    else {
      return v3;
    }
  }
}

uint64_t sub_1000530D0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  double v4 = *(double *)(v0 + 352);
  if (*(unsigned char *)(v0 + 653) && !*(unsigned char *)(v0 + 652))
  {
    sub_1010CE1FC(v0);
    *(unsigned char *)(v3 + 653) = 0;
  }
  double v5 = v4 + *(double *)(v3 + 664);
  unint64_t v7 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  double v8 = 0.0;
  double v9 = 0.0;
  _CF = v7 >= v6;
  unint64_t v11 = v7 - v6;
  if (_CF && v11 <= 0x7FFFFFFE) {
    double v9 = (double)v11 / 1000000.0;
  }
  long long v192 = 0u;
  long long v193 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  *(double *)v184.uint64_t i64 = *(double *)(v3 + 352) - v9;
  *(double *)&v184.i64[1] = v5 - v9;
  uint64_t v12 = *(void *)(v2 + 68);
  if (v12) {
    double v8 = v5 - (double)((v6 - v12) / 0xF4240);
  }
  *(double *)&long long v185 = v8;
  DWORD2(v185) = *(_DWORD *)(v2 + 4);
  BYTE12(v185) = *(unsigned char *)(v2 + 1);
  *(_WORD *)((char *)&v185 + 13) = *(_WORD *)(v2 + 2);
  HIBYTE(v185) = *(unsigned char *)(v2 + 8);
  LOBYTE(v186) = *(unsigned char *)(v2 + 9) != 0;
  BYTE1(v186) = *(unsigned char *)(v2 + 10) != 0;
  BYTE3(v186) = *(unsigned char *)(v2 + 11);
  *((void *)&v186 + 1) = v6;
  LODWORD(v187) = *(_DWORD *)(v2 + 32);
  BYTE5(v187) = *(unsigned char *)(v2 + 36);
  unsigned int v13 = *(unsigned __int8 *)(v2 + 37);
  BYTE12(v187) = *(unsigned char *)(v2 + 37);
  BYTE13(v187) = *(unsigned char *)(v2 + 88);
  BYTE14(v187) = *(unsigned char *)(v2 + 97);
  LODWORD(v188) = 0;
  WORD2(v188) = 0;
  WORD3(v188) = *(_WORD *)(v2 + 103);
  WORD5(v188) = 0;
  LODWORD(v189) = *(_DWORD *)(v2 + 84);
  uint64_t v14 = *(void *)(v2 + 76);
  *((void *)&v189 + 1) = v12;
  *(void *)&long long v190 = v14;
  *((void *)&v190 + 1) = *(void *)(v2 + 89);
  long long v191 = *(_OWORD *)(v2 + 40);
  *(void *)&long long v192 = *(void *)(v2 + 56);
  DWORD2(v192) = *(_DWORD *)(v2 + 64);
  HIDWORD(v192) = *(unsigned __int8 *)(v2 + 38);
  LOBYTE(v193) = *(unsigned char *)(v2 + 39) != 0;
  WORD2(v193) = *(_WORD *)(v2 + 98);
  BYTE6(v193) = *(unsigned char *)(v2 + 100);
  WORD4(v193) = *(_WORD *)(v2 + 101);
  uint64_t v181 = v3;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  int v15 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    int v16 = *(_DWORD *)(v2 + 4);
    int v17 = *(unsigned __int8 *)(v2 + 1);
    int v18 = *(unsigned __int8 *)(v2 + 2);
    int v19 = *(unsigned __int8 *)(v2 + 3);
    int v170 = *(unsigned __int8 *)(v2 + 11);
    int v172 = *(unsigned __int8 *)(v2 + 8);
    int v174 = *(unsigned __int8 *)(v2 + 9);
    int v176 = *(unsigned __int8 *)(v2 + 10);
    int v178 = *(_DWORD *)(v2 + 12);
    sub_100054204(v16, &v281);
    unsigned int v179 = v13;
    int v20 = SHIBYTE(v281.__r_.__value_.__r.__words[2]);
    std::string::size_type v21 = v281.__r_.__value_.__r.__words[0];
    uint64_t v22 = v184.i64[1];
    uint64_t v158 = v184.i64[0];
    uint64_t v160 = *(void *)(v2 + 24);
    uint64_t v162 = *(void *)(v2 + 16);
    int v164 = *(unsigned __int8 *)(v2 + 38);
    int v166 = *(unsigned __int8 *)(v2 + 39);
    float v23 = *(float *)(v2 + 56);
    float v24 = *(float *)(v2 + 60);
    float v25 = *(float *)(v2 + 64);
    float v27 = *(float *)(v2 + 40);
    float v26 = *(float *)(v2 + 44);
    float v29 = *(float *)(v2 + 48);
    float v28 = *(float *)(v2 + 52);
    int v30 = *(_DWORD *)(v2 + 32);
    int v168 = *(unsigned __int8 *)(v2 + 36);
    sub_100054204(v30, &__p);
    *(void *)&uint8_t buf[4] = "MotionCoprocessor";
    uint64_t v31 = &v281;
    if (v20 < 0) {
      uint64_t v31 = (std::string *)v21;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    *(_DWORD *)&v195[2] = v16;
    int v197 = v17;
    int v199 = v18;
    int v201 = v19;
    int v203 = v170;
    int v205 = v172;
    int v207 = v174;
    int v209 = v176;
    int v211 = v178;
    int v213 = v31;
    uint64_t v215 = v22;
    uint64_t v217 = v158;
    uint64_t v219 = v160;
    uint64_t v221 = v162;
    int v223 = v164;
    int v227 = v166;
    int v241 = v30;
    int v243 = v168;
    __int16 v212 = 2080;
    __int16 v244 = 2080;
    long long v245 = p_p;
    unsigned int v13 = v179;
    int v249 = v179 & 1;
    int v251 = (v179 >> 1) & 1;
    int v253 = (v179 >> 2) & 1;
    int v255 = (v179 >> 3) & 1;
    __int16 v202 = 1024;
    __int16 v204 = 1024;
    __int16 v206 = 1024;
    __int16 v208 = 1024;
    __int16 v210 = 1024;
    __int16 v222 = 1024;
    __int16 v226 = 1024;
    __int16 v248 = 1024;
    __int16 v250 = 1024;
    __int16 v252 = 1024;
    __int16 v254 = 1024;
    __int16 v256 = 1024;
    int v257 = (v179 >> 4) & 1;
    int v259 = *(_DWORD *)(v2 + 84);
    __int16 v214 = 2050;
    __int16 v260 = 2050;
    uint64_t v261 = v185;
    int v263 = *(unsigned __int8 *)(v2 + 88);
    uint64_t v265 = *(void *)(v2 + 68);
    uint64_t v267 = *(void *)(v2 + 76);
    int v269 = *(unsigned __int8 *)(v2 + 89);
    int v271 = *(unsigned __int8 *)(v2 + 90);
    int v273 = *(__int16 *)(v2 + 91);
    *(_WORD *)long long v195 = 1026;
    __int16 v196 = 1026;
    __int16 v198 = 1026;
    __int16 v200 = 1026;
    __int16 v240 = 1026;
    __int16 v242 = 1026;
    __int16 v246 = 1026;
    __int16 v258 = 1026;
    __int16 v262 = 1026;
    __int16 v268 = 1026;
    __int16 v270 = 1026;
    __int16 v272 = 1026;
    __int16 v274 = 1026;
    int v275 = *(unsigned __int8 *)(v2 + 97);
    __int16 v216 = 2048;
    __int16 v218 = 2048;
    __int16 v220 = 2048;
    __int16 v224 = 2048;
    __int16 v228 = 2048;
    __int16 v230 = 2048;
    __int16 v232 = 2048;
    __int16 v234 = 2048;
    __int16 v236 = 2048;
    __int16 v238 = 2048;
    __int16 v264 = 2048;
    __int16 v266 = 2048;
    __int16 v276 = 2048;
    _H1 = *(_WORD *)(v2 + 103);
    __asm { FCVT            D1, H1 }
    uint64_t v277 = _D1;
    *(_DWORD *)uint64_t buf = 136325890;
    double v225 = v26;
    double v229 = v28;
    double v231 = v23;
    double v233 = v24;
    double v235 = v25;
    double v237 = v27;
    double v239 = v29;
    unsigned int v247 = v179;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Type,%s,motionStateUpdate:Motion,%{public}d,conf,%{public}d,Mounted,%{public}d,MountedConf,%{public}d,exitState,%d,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,motionTypeString,%s,startTime,%{public}f,timestamp,%f,startTimeUL,%lld,nowUL,%lld -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,%f,meanAngleX,%f,pushVectorMagnitude,%f,rawMotionType,%{public}d,rawConf,%{public}d,rawMotionTypeString,%s,vehicularFlags:%{public}d,motionHint,%d,gpsHint,%d,basebandHint,%d,wifiHint,%d,btHint,%d,workoutDetectionType,%{public}d,workoutDetectionTime,%{public}f,vehicularConfidence,%{public}d,workoutDetectionTimeUL,%lld,workoutEscalationTime,%lld,MotionYouth,%{public}d,YouthClassificationReason,%{public}d,averageALSLux,%{public}d,vehicleType,%{public}d,vehicleShortTermMean,%f", buf, 0x14Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v281.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v38 = v181;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v138 = *(_DWORD *)(v2 + 4);
    int v139 = *(unsigned __int8 *)(v2 + 1);
    int v140 = *(unsigned __int8 *)(v2 + 2);
    int v141 = *(unsigned __int8 *)(v2 + 3);
    int v169 = *(unsigned __int8 *)(v2 + 11);
    int v171 = *(unsigned __int8 *)(v2 + 8);
    int v173 = *(unsigned __int8 *)(v2 + 9);
    int v175 = *(unsigned __int8 *)(v2 + 10);
    int v177 = *(_DWORD *)(v2 + 12);
    sub_100054204(v138, &__p);
    unsigned int v180 = v13;
    int v142 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v143 = __p.__r_.__value_.__r.__words[0];
    int8x16_t v144 = v184;
    uint64_t v159 = *(void *)(v2 + 24);
    uint64_t v161 = *(void *)(v2 + 16);
    int v163 = *(unsigned __int8 *)(v2 + 38);
    float v145 = *(float *)(v2 + 56);
    float v146 = *(float *)(v2 + 60);
    float v147 = *(float *)(v2 + 64);
    float v149 = *(float *)(v2 + 40);
    float v148 = *(float *)(v2 + 44);
    float v151 = *(float *)(v2 + 48);
    float v150 = *(float *)(v2 + 52);
    int v152 = *(_DWORD *)(v2 + 32);
    int v165 = *(unsigned __int8 *)(v2 + 39);
    int v167 = *(unsigned __int8 *)(v2 + 36);
    sub_100054204(v152, &v182);
    *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MotionCoprocessor";
    unint64_t v153 = &__p;
    if (v142 < 0) {
      unint64_t v153 = (std::string *)v143;
    }
    int v154 = (std::string *)v182.__r_.__value_.__r.__words[0];
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v154 = &v182;
    }
    *(_DWORD *)((char *)&v281.__r_.__value_.__r.__words[1] + 6) = v138;
    HIDWORD(v281.__r_.__value_.__r.__words[2]) = v139;
    *(_DWORD *)((char *)&v282 + 2) = v140;
    int v283 = v141;
    *(_DWORD *)__int16 v285 = v169;
    *(_DWORD *)&v285[6] = v171;
    *(_DWORD *)&v285[12] = v173;
    *(_DWORD *)int v286 = v175;
    *(_DWORD *)&v286[6] = v177;
    *(void *)&v286[12] = v153;
    *(void *)&v287[2] = v144.i64[1];
    *(void *)&v287[12] = v144.i64[0];
    *(void *)&v287[22] = v159;
    uint64_t v289 = v161;
    int v291 = v163;
    int v295 = v165;
    int v309 = v152;
    int v311 = v167;
    *(_WORD *)&v286[10] = 2080;
    __int16 v312 = 2080;
    uint64_t v313 = v154;
    LOBYTE(v13) = v180;
    int v317 = v180 & 1;
    int v319 = (v180 >> 1) & 1;
    int v321 = (v180 >> 2) & 1;
    int v323 = (v180 >> 3) & 1;
    __int16 v284 = 1024;
    *(_WORD *)&v285[4] = 1024;
    *(_WORD *)&unsigned char v285[10] = 1024;
    *(_WORD *)&v285[16] = 1024;
    *(_WORD *)&v286[4] = 1024;
    __int16 v290 = 1024;
    __int16 v294 = 1024;
    __int16 v316 = 1024;
    __int16 v318 = 1024;
    __int16 v320 = 1024;
    __int16 v322 = 1024;
    __int16 v324 = 1024;
    int v325 = (v180 >> 4) & 1;
    int v327 = *(_DWORD *)(v2 + 84);
    *(_WORD *)__int16 v287 = 2050;
    __int16 v328 = 2050;
    uint64_t v329 = v185;
    int v331 = *(unsigned __int8 *)(v2 + 88);
    uint64_t v333 = *(void *)(v2 + 68);
    uint64_t v335 = *(void *)(v2 + 76);
    int v337 = *(unsigned __int8 *)(v2 + 89);
    int v339 = *(unsigned __int8 *)(v2 + 90);
    int v341 = *(__int16 *)(v2 + 91);
    WORD2(v281.__r_.__value_.__r.__words[1]) = 1026;
    WORD1(v281.__r_.__value_.__r.__words[2]) = 1026;
    LOWORD(v282) = 1026;
    HIWORD(v282) = 1026;
    __int16 v308 = 1026;
    __int16 v310 = 1026;
    __int16 v314 = 1026;
    __int16 v326 = 1026;
    __int16 v330 = 1026;
    __int16 v336 = 1026;
    __int16 v338 = 1026;
    __int16 v340 = 1026;
    __int16 v342 = 1026;
    int v343 = *(unsigned __int8 *)(v2 + 97);
    *(_WORD *)&v287[10] = 2048;
    *(_WORD *)&v287[20] = 2048;
    __int16 v288 = 2048;
    __int16 v292 = 2048;
    __int16 v296 = 2048;
    __int16 v298 = 2048;
    __int16 v300 = 2048;
    __int16 v302 = 2048;
    __int16 v304 = 2048;
    __int16 v306 = 2048;
    __int16 v332 = 2048;
    __int16 v334 = 2048;
    __int16 v344 = 2048;
    _H1 = *(_WORD *)(v2 + 103);
    __asm { FCVT            D1, H1 }
    uint64_t v345 = _D1;
    LODWORD(v281.__r_.__value_.__l.__data_) = 136325890;
    double v293 = v148;
    double v297 = v150;
    double v299 = v145;
    double v301 = v146;
    double v303 = v147;
    double v305 = v149;
    double v307 = v151;
    unsigned int v315 = v180;
    long long v157 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v182.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitMotionStateUpdate(const CMMotionCoprocessorReply::MotionStateUpdate *)", "%s\n", v157);
    if (v157 != buf) {
      free(v157);
    }
    uint64_t v38 = v181;
  }
  if (*(unsigned char *)(v38 + 868))
  {
    v281.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1022E6B90;
    *(double *)&std::string::size_type v39 = CFAbsoluteTimeGetCurrent();
    v281.__r_.__value_.__l.__size_ = v39;
    HIDWORD(v281.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v2 + 4);
    LOBYTE(v282) = *(unsigned char *)(v2 + 1);
    *(_WORD *)((char *)&v282 + 1) = *(_WORD *)(v2 + 2);
    LODWORD(v39) = *(_DWORD *)(v2 + 8);
    int16x8_t v40 = (int16x8_t)vmovl_u8((uint8x8_t)v39);
    *(int8x8_t *)v40.i8 = vext_s8(*(int8x8_t *)v40.i8, *(int8x8_t *)v40.i8, 6uLL);
    *(_DWORD *)((char *)&v282 + 3) = vmovn_s16(v40).u32[0];
    int v283 = *(_DWORD *)(v2 + 12);
    *(int8x16_t *)&v285[2] = vextq_s8(v184, v184, 8uLL);
    *(int8x16_t *)int v286 = vextq_s8(*(int8x16_t *)(v2 + 16), *(int8x16_t *)(v2 + 16), 8uLL);
    v286[16] = *(unsigned char *)(v2 + 38);
    *(_DWORD *)__int16 v287 = *(_DWORD *)(v2 + 44);
    v287[4] = *(unsigned char *)(v2 + 39);
    *(_OWORD *)&v287[8] = *(_OWORD *)(v2 + 52);
    uint64_t v41 = sub_101282D9C();
    sub_10128431C(v41, (uint64_t)&v281);
    sub_10170140C(buf);
    sub_1017271B8((uint64_t)buf);
    v280 |= 1u;
    std::string::size_type size = v281.__r_.__value_.__l.__size_;
    uint64_t v42 = v279;
    int v43 = *(_DWORD *)(v2 + 4);
    *(void *)(v279 + 192) |= 0x8000uLL;
    *(_DWORD *)(v42 + 100) = v43;
    uint64_t v44 = v279;
    int v45 = *(unsigned __int8 *)(v2 + 1);
    *(void *)(v279 + 192) |= 0x100uLL;
    *(_DWORD *)(v44 + 72) = v45;
    uint64_t v46 = v279;
    int v47 = *(unsigned __int8 *)(v2 + 2);
    *(void *)(v279 + 192) |= 0x10000uLL;
    *(_DWORD *)(v46 + 104) = v47;
    uint64_t v48 = v279;
    int v49 = *(unsigned __int8 *)(v2 + 3);
    *(void *)(v279 + 192) |= 0x20000uLL;
    *(_DWORD *)(v48 + 108) = v49;
    uint64_t v50 = v279;
    int v51 = *(unsigned __int8 *)(v2 + 11);
    *(void *)(v279 + 192) |= 0x800uLL;
    *(_DWORD *)(v50 + 84) = v51;
    uint64_t v52 = v279;
    int v53 = *(unsigned __int8 *)(v2 + 8);
    *(void *)(v279 + 192) |= 0x8000000uLL;
    *(_DWORD *)(v52 + 148) = v53;
    uint64_t v54 = v279;
    int v55 = *(unsigned __int8 *)(v2 + 9);
    *(void *)(v279 + 192) |= 0x2000uLL;
    *(_DWORD *)(v54 + 92) = v55;
    uint64_t v56 = v279;
    int v57 = *(unsigned __int8 *)(v2 + 10);
    *(void *)(v279 + 192) |= 0x1000uLL;
    *(_DWORD *)(v56 + 88) = v57;
    uint64_t v58 = v279;
    int v59 = *(_DWORD *)(v2 + 12);
    *(void *)(v279 + 192) |= 0x1000000uLL;
    *(_DWORD *)(v58 + 136) = v59;
    uint64_t v60 = v279;
    uint64_t v61 = v184.i64[0];
    *(void *)(v279 + 40) = v184.i64[1];
    *(void *)(v60 + 192) |= 8uLL;
    uint64_t v62 = v279;
    *(void *)(v279 + 192) |= 1uLL;
    *(void *)(v62 + 8) = v61;
    uint64_t v63 = v279;
    uint64_t v64 = *(void *)(v2 + 24);
    *(void *)(v279 + 192) |= 4uLL;
    *(void *)(v63 + 24) = v64;
    uint64_t v65 = v279;
    uint64_t v66 = *(void *)(v2 + 16);
    *(void *)(v279 + 192) |= 2uLL;
    *(void *)(v65 + 16) = v66;
    uint64_t v67 = v279;
    LODWORD(v66) = *(unsigned __int8 *)(v2 + 38);
    *(void *)(v279 + 192) |= 0x80uLL;
    *(_DWORD *)(v67 + 68) = v66;
    uint64_t v68 = v279;
    int v69 = *(_DWORD *)(v2 + 44);
    *(void *)(v279 + 192) |= 0x20000000uLL;
    *(_DWORD *)(v68 + 156) = v69;
    uint64_t v70 = v279;
    LODWORD(v66) = *(unsigned __int8 *)(v2 + 39);
    *(void *)(v279 + 192) |= 0x4000000uLL;
    *(_DWORD *)(v70 + 144) = v66;
    uint64_t v71 = v279;
    int v72 = *(_DWORD *)(v2 + 52);
    *(void *)(v279 + 192) |= 0x4000uLL;
    *(_DWORD *)(v71 + 96) = v72;
    uint64_t v73 = v279;
    int v74 = *(_DWORD *)(v2 + 56);
    *(void *)(v279 + 192) |= 0x400000uLL;
    *(_DWORD *)(v73 + 128) = v74;
    uint64_t v75 = v279;
    int v76 = *(_DWORD *)(v2 + 60);
    *(void *)(v279 + 192) |= 0x200000uLL;
    *(_DWORD *)(v75 + 124) = v76;
    uint64_t v77 = v279;
    int v78 = *(_DWORD *)(v2 + 64);
    *(void *)(v279 + 192) |= 0x800000uLL;
    *(_DWORD *)(v77 + 132) = v78;
    uint64_t v79 = v279;
    LODWORD(v66) = *(unsigned __int8 *)(v2 + 88);
    *(void *)(v279 + 192) |= 0x800000000uLL;
    *(_DWORD *)(v79 + 180) = v66;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023104F0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  long long v80 = v191;
  *(_OWORD *)(v38 + 776) = v190;
  *(_OWORD *)(v38 + 792) = v80;
  long long v81 = v193;
  *(_OWORD *)(v38 + 808) = v192;
  *(_OWORD *)(v38 + 824) = v81;
  long long v82 = v187;
  *(_OWORD *)(v38 + 712) = v186;
  *(_OWORD *)(v38 + 728) = v82;
  long long v83 = v189;
  *(_OWORD *)(v38 + 744) = v188;
  *(_OWORD *)(v38 + 760) = v83;
  long long v84 = v185;
  *(int8x16_t *)(v38 + 680) = v184;
  *(_OWORD *)(v38 + 696) = v84;
  *(unsigned char *)(v38 + 576) = v13;
  unint64_t v85 = *(void *)(v38 + 408);
  unint64_t v86 = *(void *)(v38 + 416);
  if (v85 >= v86)
  {
    int v95 = (void **)(v38 + 400);
    uint64_t v96 = *(void *)(v38 + 400);
    unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v85 - v96) >> 5);
    unint64_t v98 = v97 + 1;
    if (v97 + 1 > 0x199999999999999) {
      sub_1001D7FD4();
    }
    unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v86 - v96) >> 5);
    if (2 * v99 > v98) {
      unint64_t v98 = 2 * v99;
    }
    if (v99 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v100 = 0x199999999999999;
    }
    else {
      unint64_t v100 = v98;
    }
    if (v100)
    {
      uint64_t v101 = (char *)sub_1004F46B0(v38 + 416, v100);
      uint64_t v38 = v181;
    }
    else
    {
      uint64_t v101 = 0;
    }
    id v102 = &v101[160 * v97];
    std::string::size_type v103 = &v101[160 * v100];
    long long v104 = v185;
    *(int8x16_t *)id v102 = v184;
    *((_OWORD *)v102 + 1) = v104;
    long long v105 = v186;
    long long v106 = v187;
    long long v107 = v189;
    *((_OWORD *)v102 + 4) = v188;
    *((_OWORD *)v102 + 5) = v107;
    *((_OWORD *)v102 + 2) = v105;
    *((_OWORD *)v102 + 3) = v106;
    long long v108 = v190;
    long long v109 = v191;
    long long v110 = v193;
    *((_OWORD *)v102 + 8) = v192;
    *((_OWORD *)v102 + 9) = v110;
    *((_OWORD *)v102 + 6) = v108;
    *((_OWORD *)v102 + 7) = v109;
    uint64_t v94 = v102 + 160;
    uint64_t v112 = *(char **)(v38 + 400);
    uint64_t v111 = *(char **)(v38 + 408);
    if (v111 != v112)
    {
      do
      {
        long long v113 = *((_OWORD *)v111 - 9);
        *((_OWORD *)v102 - 10) = *((_OWORD *)v111 - 10);
        *((_OWORD *)v102 - 9) = v113;
        long long v114 = *((_OWORD *)v111 - 8);
        long long v115 = *((_OWORD *)v111 - 7);
        long long v116 = *((_OWORD *)v111 - 5);
        *((_OWORD *)v102 - 6) = *((_OWORD *)v111 - 6);
        *((_OWORD *)v102 - 5) = v116;
        *((_OWORD *)v102 - 8) = v114;
        *((_OWORD *)v102 - 7) = v115;
        long long v117 = *((_OWORD *)v111 - 4);
        long long v118 = *((_OWORD *)v111 - 3);
        long long v119 = *((_OWORD *)v111 - 1);
        *((_OWORD *)v102 - 2) = *((_OWORD *)v111 - 2);
        *((_OWORD *)v102 - 1) = v119;
        *((_OWORD *)v102 - 4) = v117;
        *((_OWORD *)v102 - 3) = v118;
        v102 -= 160;
        v111 -= 160;
      }
      while (v111 != v112);
      uint64_t v111 = (char *)*v95;
    }
    *(void *)(v38 + 400) = v102;
    *(void *)(v38 + 408) = v94;
    *(void *)(v38 + 416) = v103;
    if (v111) {
      operator delete(v111);
    }
  }
  else
  {
    long long v87 = v185;
    *(int8x16_t *)unint64_t v85 = v184;
    *(_OWORD *)(v85 + 16) = v87;
    long long v88 = v186;
    long long v89 = v187;
    long long v90 = v189;
    *(_OWORD *)(v85 + 64) = v188;
    *(_OWORD *)(v85 + 80) = v90;
    *(_OWORD *)(v85 + 32) = v88;
    *(_OWORD *)(v85 + 48) = v89;
    long long v91 = v190;
    long long v92 = v191;
    long long v93 = v193;
    *(_OWORD *)(v85 + 128) = v192;
    *(_OWORD *)(v85 + 144) = v93;
    *(_OWORD *)(v85 + 96) = v91;
    *(_OWORD *)(v85 + 112) = v92;
    uint64_t v94 = (char *)(v85 + 160);
  }
  *(void *)(v38 + 408) = v94;
  unint64_t v120 = *(void *)(v38 + 536);
  if (v120 >= 0x64)
  {
    uint64_t v121 = *(void *)(v181 + 528);
    *(void *)(v181 + 536) = v120 - 1;
    *(void *)(v181 + 528) = v121 + 1;
    sub_10017D570(v38 + 496, 1);
  }
  sub_100175F20((void *)(v38 + 496), (uint64_t)&v184);
  uint64_t result = v181;
  int v123 = (BYTE9(v185) & 0x73) != 0;
  if (*(unsigned __int8 *)(v181 + 1418) != v123)
  {
    *(unsigned char *)(v181 + 1418) = v123;
    uint64_t v124 = *(void *)(v181 + 504);
    if (*(void *)(v181 + 512) != v124)
    {
      unint64_t v125 = *(void *)(v181 + 528);
      unint64_t v126 = *(void *)(v124 + 8 * (v125 / 0x19)) + 160 * (v125 % 0x19);
      unint64_t v127 = *(void *)(v124 + 8 * ((*(void *)(v181 + 536) + v125) / 0x19))
           + 160 * ((*(void *)(v181 + 536) + v125) % 0x19);
      if (v126 != v127)
      {
        __int16 v128 = (void *)(v124 + 8 * (v125 / 0x19));
        do
        {
          std::string::size_type v129 = *(void *)(v126 + 8);
          int v130 = *(unsigned __int8 *)(v126 + 29);
          int v131 = *(unsigned __int8 *)(v126 + 30);
          int v132 = *(_DWORD *)(v126 + 48);
          int v133 = *(unsigned __int8 *)(v126 + 53);
          if (qword_102419010 != -1) {
            dispatch_once(&qword_102419010, &stru_102310450);
          }
          __int16 v134 = qword_102419018;
          if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134350080;
            *(void *)&uint8_t buf[4] = v129;
            *(_WORD *)long long v195 = 1026;
            *(_DWORD *)&v195[2] = v132;
            __int16 v196 = 1026;
            int v197 = v133;
            __int16 v198 = 1026;
            int v199 = v130;
            __int16 v200 = 1026;
            int v201 = v131;
            _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "After vehicular transition, startTime, %{public}f, rawMotionType, %{public}d, rawConfidence, %{public}d, mounted, %{public}d, mountedConfidence, %{public}d", buf, 0x24u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419010 != -1) {
              dispatch_once(&qword_102419010, &stru_102310450);
            }
            LODWORD(v281.__r_.__value_.__l.__data_) = 134350080;
            *(std::string::size_type *)((char *)v281.__r_.__value_.__r.__words + 4) = v129;
            WORD2(v281.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v281.__r_.__value_.__r.__words[1] + 6) = v132;
            WORD1(v281.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(v281.__r_.__value_.__r.__words[2]) = v133;
            LOWORD(v282) = 1026;
            *(_DWORD *)((char *)&v282 + 2) = v130;
            HIWORD(v282) = 1026;
            int v283 = v131;
            __int16 v136 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitMotionStateUpdate(const CMMotionCoprocessorReply::MotionStateUpdate *)", "%s\n", v136);
            if (v136 != buf) {
              free(v136);
            }
          }
          v126 += 160;
          if (v126 - *v128 == 4000)
          {
            unint64_t v135 = v128[1];
            ++v128;
            unint64_t v126 = v135;
          }
          uint64_t result = v181;
        }
        while (v126 != v127);
      }
    }
  }
  int v137 = *(unsigned __int16 *)(v2 + 91);
  if (v137 != 0xFFFF)
  {
    *(_DWORD *)long long v195 = 0;
    *(double *)uint64_t buf = v5;
    *(float *)&uint8_t buf[8] = (float)(__int16)v137;
    sub_1000E01AC(result, 31, (uint64_t)buf, 16);
    return sub_1000E01AC(v181, 32, (uint64_t)buf, 16);
  }
  return result;
}

void sub_1000541B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *sub_100054204@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (a1 > 65663)
  {
    if (a1 > 589887)
    {
      if (a1 > 851979)
      {
        if (a1 >= 0x100000)
        {
          if (a1 == 0x100000)
          {
            uint64_t v2 = "kTypeMachineWorkout";
            return std::string::assign(a2, v2);
          }
          if (a1 == 0x200000)
          {
            uint64_t v2 = "kTypeWorkout";
            return std::string::assign(a2, v2);
          }
        }
        else
        {
          if (a1 == 851980)
          {
            uint64_t v2 = "kTypeSemiStationaryPocket";
            return std::string::assign(a2, v2);
          }
          if (a1 == 917516)
          {
            uint64_t v2 = "kTypeSemiStationaryArm";
            return std::string::assign(a2, v2);
          }
        }
      }
      else if (a1 > 720911)
      {
        if (a1 == 720912)
        {
          uint64_t v2 = "kTypeWalkingLeg";
          return std::string::assign(a2, v2);
        }
        if (a1 == 786448)
        {
          uint64_t v2 = "kTypeWalkingArm";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 589888)
        {
          uint64_t v2 = "kTypeRunningLeg";
          return std::string::assign(a2, v2);
        }
        if (a1 == 655424)
        {
          uint64_t v2 = "kTypeRunningArm";
          return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 > 327807)
    {
      if (a1 >= 462848)
      {
        if (a1 == 462848)
        {
          uint64_t v2 = "kTypeDrivingArm";
          return std::string::assign(a2, v2);
        }
        if (a1 == 528384)
        {
          uint64_t v2 = "kTypeDrivingStowed";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 327808)
        {
          uint64_t v2 = "kTypeCyclingTorso";
          return std::string::assign(a2, v2);
        }
        if (a1 == 397312)
        {
          uint64_t v2 = "kTypeDrivingSeat";
          return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 >= 196608)
    {
      if (a1 == 196608)
      {
        uint64_t v2 = "kTypeCyclingLeg";
        return std::string::assign(a2, v2);
      }
      if (a1 == 262272)
      {
        uint64_t v2 = "kTypeCyclingArm";
        return std::string::assign(a2, v2);
      }
    }
    else
    {
      if (a1 == 65664)
      {
        uint64_t v2 = "kTypeCyclingSeat";
        return std::string::assign(a2, v2);
      }
      if (a1 == 131200)
      {
        uint64_t v2 = "kTypeCyclingChassis";
        return std::string::assign(a2, v2);
      }
    }
LABEL_63:
    uint64_t v2 = "ERROR";
    return std::string::assign(a2, v2);
  }
  if (a1 > 255)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x4000)
      {
        if (a1 == 0x4000)
        {
          uint64_t v2 = "kTypeDrivingMounted";
          return std::string::assign(a2, v2);
        }
        if (a1 == 0x8000)
        {
          uint64_t v2 = "kTypeMotorcycle";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 0x2000)
        {
          uint64_t v2 = "kTypeVehicularInHand";
          return std::string::assign(a2, v2);
        }
        if (a1 == 12288)
        {
          uint64_t v2 = "kTypeDrivingOther";
          return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 > 4095)
    {
      if (a1 == 4096)
      {
        uint64_t v2 = "kTypeDriving";
        return std::string::assign(a2, v2);
      }
      if (a1 == 4128)
      {
        uint64_t v2 = "kTypeDrivingOrWalkingSlow";
        return std::string::assign(a2, v2);
      }
    }
    else
    {
      if (a1 == 256)
      {
        uint64_t v2 = "kTypeInVehicleFrozen";
        return std::string::assign(a2, v2);
      }
      if (a1 == 512)
      {
        uint64_t v2 = "kTypeInVehicleStatic";
        return std::string::assign(a2, v2);
      }
    }
    goto LABEL_63;
  }
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        uint64_t v2 = "kTypeRunning";
        return std::string::assign(a2, v2);
      }
      if (a1 == 128)
      {
        uint64_t v2 = "kTypeCycling";
        return std::string::assign(a2, v2);
      }
    }
    else
    {
      if (a1 == 16)
      {
        uint64_t v2 = "kTypeWalking";
        return std::string::assign(a2, v2);
      }
      if (a1 == 32)
      {
        uint64_t v2 = "kTypeWalkingSlow";
        return std::string::assign(a2, v2);
      }
    }
    goto LABEL_63;
  }
  uint64_t v2 = "kTypeFrozen";
  switch(a1)
  {
    case 0:
      uint64_t v2 = "kTypeUnknown";
      break;
    case 1:
      return std::string::assign(a2, v2);
    case 2:
      uint64_t v2 = "kTypeStatic";
      break;
    case 3:
      goto LABEL_63;
    case 4:
      uint64_t v2 = "kTypeMoving";
      break;
    default:
      if (a1 != 12) {
        goto LABEL_63;
      }
      uint64_t v2 = "kTypeSemiStationary";
      break;
  }
  return std::string::assign(a2, v2);
}

void sub_1000545B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000545D0(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void **)(a1 + 752);
  if (v3 != (void *)(a1 + 760))
  {
    do
    {
      double v4 = v3 + 4;
      if (*((char *)v3 + 55) < 0) {
        double v4 = (void *)*v4;
      }
      [v2 addObject:[-[CLClientKeyPath legacyClientKey](+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "legacyClientKey"]];
      double v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = v5;
          double v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != (void *)(a1 + 760));
  }

  return v2;
}

uint64_t sub_1000546AC(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)uint64_t buf = 5;
  if (sub_1001072EC(a1, (int *)buf, 1))
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 6656) + 40))(*(void *)(a1 + 6656));
    sub_1006AC0E8(v6);
  }
  sub_1001ACC94(a1 + 6624, a2);
  uint64_t v7 = *(void *)(a1 + 8712);
  if (v7) {
    sub_100745D9C(v7);
  }
  uint64_t v8 = *(void *)(a1 + 10208);
  if (v8) {
    sub_10115FF18(v8);
  }
  if (*(double *)(a1 + 9888) > *(double *)(a2 + 8)) {
    (*(void (**)(void))(**(void **)(a1 + 8256) + 24))(*(void *)(a1 + 8256));
  }
  if (!*(void *)(a1 + 8248))
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022C2FE0);
    }
    double v9 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "IndoorOutdoor detector running without turn detector.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1022C2FE0);
      }
      LOWORD(v27[0]) = 0;
      float v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateMediator::notifyClients(const CLMotionCoprocessorInterface::NotificationData *, BOOL)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  (*(void (**)(void, double))(**(void **)(a1 + 8256) + 16))(*(void *)(a1 + 8256), *(double *)(a2 + 8));
  *(void *)(a1 + 9888) = *(void *)(a2 + 8);
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = 7;
  double Current = CFAbsoluteTimeGetCurrent();
  if (sub_100175B34(a1 + 3744, &v31, Current))
  {
    uint64_t v11 = sub_1000D2E34(0);
    buf[0] = sub_101004894((_DWORD *)&v31 + 2);
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v31);
    double v12 = CFAbsoluteTimeGetCurrent();
    v33[0] = sub_10111E8A8((void *)(a1 + 6656), v12, 23.0);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)(v11 + 96) + 40))(v11 + 96, buf);
  }
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v27, 0, sizeof(v27));
  sub_100052E44(a2, (uint64_t)v27);
  if (*(unsigned char *)(a1 + 592)) {
    v27[0] = 18200;
  }
  int v13 = *(_DWORD *)(a1 + 376);
  sub_100103240();
  if (sub_10010145C() && v13) {
    v27[0] = CLMotionActivity::remapActivityTypeForWheelchairUsers();
  }
  sub_10003C09C(a1 + 136, (uint64_t)v27);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  uint64_t v44 = 0;
  long long v40 = 0u;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  long long v37 = 0u;
  memset(v36, 0, sizeof(v36));
  long long v35 = 0u;
  long long v34 = 0u;
  memset(v33, 0, sizeof(v33));
  sub_100054BCC(a1 + 136, (uint64_t)v25);
  *(void *)uint64_t buf = v26;
  sub_100054BCC(a1 + 136, (uint64_t)v33);
  int v14 = sub_1000E68D8(a1 + 136);
  long long v15 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v36[3] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v36[7] = v15;
  int v16 = *(_DWORD *)(a2 + 144);
  v36[2] = v14;
  v36[11] = v16;
  BOOL v17 = sub_100054BBC((_DWORD *)(a1 + 136));
  uint64_t v18 = 0;
  if (v17)
  {
    if (*(unsigned char *)(a1 + 9624)) {
      uint64_t v18 = *(void *)(a1 + 9696);
    }
    else {
      uint64_t v18 = 0;
    }
  }
  *(void *)&long long v37 = v18;
  if (sub_100054BBC((_DWORD *)(a1 + 136))) {
    uint64_t v19 = *(void *)(a1 + 9600);
  }
  else {
    uint64_t v19 = 0;
  }
  *((void *)&v37 + 1) = v19;
  if (sub_100054BBC((_DWORD *)(a1 + 136))) {
    uint64_t v20 = *(void *)(a1 + 9592);
  }
  else {
    uint64_t v20 = 0;
  }
  v38[0] = v20;
  LOBYTE(v38[1]) = sub_100054BBC((_DWORD *)(a1 + 136));
  BYTE1(v38[1]) = a3;
  *(void *)((char *)&v38[2] + 2) = 0;
  *(void *)((char *)&v38[1] + 2) = 0;
  sub_1001839D0(a1 + 136, (unsigned __int8 *)&v38[1] + 2);
  DWORD1(v34) = DWORD1(v28);
  v36[0] = v30;
  v21.n128_f64[0] = CFAbsoluteTimeGetCurrent();
  uint64_t v22 = *(void *)(a1 + 8368);
  if (v22) {
    sub_100D0855C(v22, (uint64_t)buf);
  }
  v25[0] = 0;
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, void, __n128))(*(void *)a1 + 152))(a1, v25, buf, 1, 0xFFFFFFFFLL, 0, v21);
}

BOOL sub_100054BBC(_DWORD *a1)
{
  return *a1 != 0;
}

uint64_t sub_100054BCC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 88);
  long long v3 = *(_OWORD *)(result + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(result + 104);
  *(_OWORD *)(a2 + 112) = v3;
  *(void *)(a2 + 128) = *(void *)(result + 136);
  long long v4 = *(_OWORD *)(result + 24);
  long long v5 = *(_OWORD *)(result + 56);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 40);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 72);
  *(_OWORD *)(a2 + 80) = v2;
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v4;
  if (*(_DWORD *)result) {
    *(_DWORD *)a2 = *(_DWORD *)result;
  }
  return result;
}

uint64_t sub_100054C14(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)a1 = off_10230E2E8;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void sub_100054C88(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100066A04(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100054E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100054E64(uint64_t a1, int *a2, unsigned int *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F21E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLApplicationLifecycleManager::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F21E0);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLApplicationLifecycleManager::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000129D4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100055020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100055040(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onAppNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onAppNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1001A563C(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10005520C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005522C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE870);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCachedLocationController::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCachedLocationController::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10019BE00(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000553E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100055408(unsigned int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100044B50(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000555D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000555F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304CE0;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10005565C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C5880);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAppNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C5880);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAppNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10000D994(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100055818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100055838(uint64_t a1, uint64_t a2)
{
  if (sub_100082064(a1 + 72))
  {
    sub_1001A2D68(a1, a2, (uint64_t)v27);
    int v5 = v4;
    if (v4 == 2)
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1023132A0);
      }
      uint64_t v6 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Error setting elevation offsets.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1023132A0);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLElevationRecorderDb::insertRecordUL(const CLSignificantElevation &, BOOL)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
    else
    {
      double v9 = *(double *)(a2 + 24);
      double v8 = *(double *)(a2 + 32);
      int v10 = *(_DWORD *)(a1 + 552);
      int v12 = *(_DWORD *)(a2 + 40);
      int v11 = *(_DWORD *)(a2 + 44);
      int v13 = *(_DWORD *)(a1 + 556);
      double v14 = *(double *)(a2 + 48);
      double v15 = v28;
      sub_100082068((void *)(a1 + 432), buf);
      __int16 v16 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
      if (v9 < v15 && v5 == 0) {
        double v18 = v15;
      }
      else {
        double v18 = v9;
      }
      if (sub_100055D58(v16, 1, v18))
      {
        uint64_t v19 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
        if (sub_100055D58(v19, 2, v8))
        {
          uint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
          if (sub_100055B20(v20, 3, v10 + v12))
          {
            __n128 v21 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
            if (sub_100055B20(v21, 4, v13 + v11))
            {
              uint64_t v22 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
              if (sub_100055D58(v22, 5, v14))
              {
                uint64_t v23 = *(void *)(a1 + 80);
                float v24 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                sub_10001FEB0(v23, v24);
              }
            }
          }
        }
      }
      uint64_t v25 = *(void *)buf;
      *(void *)uint64_t buf = 0;
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
  }
}

void sub_100055AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100055B20(sqlite3_stmt *a1, int a2, int a3)
{
  int v6 = sqlite3_bind_int(a1, a2, a3);
  int v11 = v6;
  if (v6)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68290307;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 1025;
      int v17 = a3;
      __int16 v18 = 1026;
      int v19 = a2;
      __int16 v20 = 1040;
      int v21 = 4;
      __int16 v22 = 2098;
      uint64_t v23 = &v11;
      __int16 v24 = 2081;
      uint64_t v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}u, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x38u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v8 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      double v9 = sqlite3_sql(a1);
      *(_DWORD *)uint64_t buf = 68290307;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 1025;
      int v17 = a3;
      __int16 v18 = 1026;
      int v19 = a2;
      __int16 v20 = 1040;
      int v21 = 4;
      __int16 v22 = 2098;
      uint64_t v23 = &v11;
      __int16 v24 = 2081;
      uint64_t v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}u, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x38u);
    }
  }
  return v6 == 0;
}

BOOL sub_100055D58(sqlite3_stmt *a1, int a2, double a3)
{
  int v6 = sqlite3_bind_double(a1, a2, a3);
  int v11 = v6;
  if (v6)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68290307;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2049;
      double v17 = a3;
      __int16 v18 = 1026;
      int v19 = a2;
      __int16 v20 = 1040;
      int v21 = 4;
      __int16 v22 = 2098;
      uint64_t v23 = &v11;
      __int16 v24 = 2081;
      uint64_t v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":\"%{private}f\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v8 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      double v9 = sqlite3_sql(a1);
      *(_DWORD *)uint64_t buf = 68290307;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2049;
      double v17 = a3;
      __int16 v18 = 1026;
      int v19 = a2;
      __int16 v20 = 1040;
      int v21 = 4;
      __int16 v22 = 2098;
      uint64_t v23 = &v11;
      __int16 v24 = 2081;
      uint64_t v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":\"%{private}f\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v6 == 0;
}

BOOL sub_100055F90(uint64_t a1, uint64_t a2)
{
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
  }
  int v4 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v5 = 0;
    uint64_t v6 = *(void *)(a1 + 176);
    BOOL v8 = v6 == 3 || (v6 & 0xFFFFFFFFFFFFFFFELL) == 4;
    double v9 = *(double *)(a2 + 16);
    double v10 = *(double *)(a1 + 160);
    if ((unint64_t)(v6 - 6) >= 0xFFFFFFFFFFFFFFFDLL && v10 <= v9) {
      BOOL v5 = v9 - v10 < (double)*(int *)(a1 + 216);
    }
    if (v10 <= v9)
    {
      int v12 = *(_DWORD *)(a1 + 216);
      BOOL v11 = v9 - v10 < (double)v12;
    }
    else
    {
      BOOL v11 = 0;
      int v12 = *(_DWORD *)(a1 + 216);
    }
    uint64_t v13 = *(void *)(a1 + 160);
    uint64_t v14 = *(void *)(a2 + 1040);
    int v15 = *(unsigned __int8 *)(a1 + 44);
    int v16 = *(unsigned __int8 *)(a1 + 184);
    double v17 = vabdd_f64(*(double *)(a2 + 1048), *(double *)a2);
    *(_DWORD *)uint64_t buf = 67111680;
    *(_DWORD *)long long v35 = v5;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v8;
    *(_WORD *)&v35[10] = 1024;
    *(_DWORD *)&v35[12] = v11;
    *(_WORD *)&v35[16] = 2048;
    *(double *)&v35[18] = v9;
    __int16 v36 = 2048;
    uint64_t v37 = v13;
    __int16 v38 = 1024;
    int v39 = v12;
    __int16 v40 = 2048;
    uint64_t v41 = v14;
    __int16 v42 = 1024;
    int v43 = v15;
    __int16 v44 = 1024;
    int v45 = v16;
    __int16 v46 = 2048;
    double v47 = v17;
    __int16 v48 = 2048;
    uint64_t v49 = 0x4014000000000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "shouldCommitInputData, %d, isCyclingWorkout, %d, inTimeRange, %d, now, %f, sessionStartTime, %f, maxPossibleDifference, %d, power, %f, fApproximatePowerFromMets, %d, inPauseMode, %d, powerSampleTimediff, %f, powerSampleTimediffTolerance, %f", buf, 0x58u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    BOOL v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPDataStore::shouldCommitInputData(const CLNatalieModelInput::Data &)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (!*(unsigned char *)(a1 + 44) && (*(double *)(a2 + 1040) < 0.0 || *(double *)(a2 + 928) <= 0.0))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    long long v29 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(unsigned __int8 *)(a1 + 44);
      uint64_t v31 = *(void *)(a2 + 1040);
      uint64_t v32 = *(void *)(a2 + 928);
      *(_DWORD *)uint64_t buf = 67109632;
      *(_DWORD *)long long v35 = v30;
      *(_WORD *)&v35[4] = 2048;
      *(void *)&v35[6] = v31;
      *(_WORD *)&v35[14] = 2048;
      *(void *)&v35[16] = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Cannot commit the data since there is no power or start time is 0. fApproximatePowerFromMets %d, power, %f, start time, %f ", buf, 0x1Cu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  if ((unint64_t)(*(void *)(a1 + 176) - 3) >= 3)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    float v27 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Cannot commit the data since it is not a cycling workout.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      goto LABEL_65;
    }
LABEL_61:
    uint64_t v26 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPDataStore::shouldCommitInputData(const CLNatalieModelInput::Data &)", "%s\n");
LABEL_62:
    if (v26 != buf) {
      free(v26);
    }
    return 0;
  }
  double v18 = *(double *)(a2 + 16);
  double v19 = *(double *)(a1 + 160);
  if (v19 > v18 || v18 - v19 >= (double)*(int *)(a1 + 216))
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    double v28 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Cannot commit the data since it is not in time range.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 == -1) {
      goto LABEL_61;
    }
LABEL_65:
    dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    goto LABEL_61;
  }
  BOOL result = *(unsigned char *)(a1 + 184) == 0;
  if (!(*(unsigned __int8 *)(a1 + 184) | *(unsigned __int8 *)(a1 + 44)))
  {
    double v21 = *(double *)(a2 + 1048);
    if (vabdd_f64(v21, *(double *)a2) <= 5.0) {
      return 1;
    }
    if (v21 <= 0.0) {
      return 0;
    }
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    __int16 v22 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a2 + 1048);
      double v24 = *(double *)a2;
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)long long v35 = v23;
      *(_WORD *)&v35[8] = 2048;
      *(double *)&v35[10] = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Power timestamp is too old, entryTime, %f, powerTime, %f", buf, 0x16u);
    }
    BOOL v25 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v25)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      uint64_t v26 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCyclingFTPDataStore::shouldCommitInputData(const CLNatalieModelInput::Data &)", "%s\n");
      goto LABEL_62;
    }
  }
  return result;
}

void sub_100056824(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  double v8 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
  float v9 = 0.0;
  if (v8 > 0.0) {
    float v9 = *(double *)(a1 + 408) * 2.23693991 / v8;
  }
  float v7 = *(double *)(a1 + 840);
  float v46 = v7 * 2.2369;
  float v10 = *(double *)(a1 + 448);
  uint64_t v45 = *(void *)(a1 + 408);
  float v44 = v10;
  if (*(unsigned char *)(a1 + 352))
  {
    if (v10 <= 0.14 || v10 > 2.2369)
    {
      uint64_t v11 = a1 + 808;
      float v9 = 0.0;
LABEL_12:
      float v13 = 0.0;
      if (*(unsigned char *)(a1 + 352)) {
        float v12 = 2.1;
      }
      else {
        float v12 = 0.0;
      }
      goto LABEL_15;
    }
    float v9 = 2.2369 / v10;
  }
  uint64_t v11 = a1 + 808;
  if (v9 < 1.0) {
    goto LABEL_12;
  }
  float v12 = 8.0;
  if ((float)((float)((float)((float)(v9 * -0.793) + (float)((float)(v9 * 0.3564) * v9)) + 3.142) * a4) <= 8.0) {
    float v12 = (float)((float)((float)(v9 * -0.793) + (float)((float)(v9 * 0.3564) * v9)) + 3.142) * a4;
  }
  float v13 = v12;
LABEL_15:
  if (*(unsigned char *)(a1 + 528) == 1) {
    float v14 = 1.1;
  }
  else {
    float v14 = 1.0;
  }
  float v15 = v12;
  float v16 = v12 * v14;
  if (v16 <= 20.0) {
    float v17 = v16;
  }
  else {
    float v17 = 20.0;
  }
  if (a2) {
    int v18 = 2;
  }
  else {
    int v18 = *(_DWORD *)(v11 + 24);
  }
  sub_100056F84(v18, v46, v9, 2.5);
  float v20 = v19 * v17;
  if (v20 <= 20.0) {
    float v21 = v20;
  }
  else {
    float v21 = 20.0;
  }
  *(float *)(a3 + 20) = v21;
  if (a2) {
    int v22 = 2;
  }
  else {
    int v22 = *(_DWORD *)(v11 + 24);
  }
  if (*(unsigned char *)(a1 + 528) == 1) {
    float v23 = 1.1;
  }
  else {
    float v23 = 1.0;
  }
  float v24 = v13 * v23;
  if (v24 <= 20.0) {
    float v25 = v24;
  }
  else {
    float v25 = 20.0;
  }
  float v26 = v21;
  sub_100056F84(v22, v46, v9, 2.5);
  float v28 = v27 * v25;
  if (v28 <= 20.0) {
    float v29 = v28;
  }
  else {
    float v29 = 20.0;
  }
  *(float *)(a3 + 28) = v29;
  float v30 = 0.0;
  if (v13 <= 2.1)
  {
    int v31 = 0;
  }
  else
  {
    float v30 = v29;
    int v31 = 12;
  }
  *(float *)(a3 + 12) = v30;
  *(_DWORD *)(a3 + 36) = v31;
  uint64_t v32 = sub_1001A58C0();
  sub_10003BFB8(v32, (uint64_t)(float)(v26 - v17));
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B1CC0);
  }
  BOOL v33 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v34 = *(double *)(a1 + 128);
    double v35 = v34 - *(double *)(a1 + 120);
    BOOL v36 = *(unsigned __int8 *)(a1 + 528) == 1;
    *(_DWORD *)uint64_t buf = 134220544;
    *(double *)__int16 v48 = v9;
    *(_WORD *)&v48[8] = 2048;
    *(void *)&v48[10] = v45;
    *(_WORD *)&v48[18] = 2048;
    *(double *)&v48[20] = v35;
    *(_WORD *)&v48[28] = 2048;
    *(double *)&v48[30] = v15;
    *(_WORD *)&v48[38] = 2048;
    *(double *)&v48[40] = a4;
    *(_WORD *)&v48[48] = 2048;
    *(double *)&v48[50] = v34;
    *(_WORD *)&v48[58] = 2048;
    *(double *)&v48[60] = v44;
    *(_WORD *)&v48[68] = 1024;
    *(_DWORD *)&v48[70] = v36;
    __int16 v49 = 2048;
    double v50 = v17;
    __int16 v51 = 2048;
    double v52 = v13;
    __int16 v53 = 2048;
    double v54 = v25;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Walk, WorkRate, %f, distance(m), %f, duration(s), %f, userMets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, userMetsStrollerCorrected, %f, truthMets, %f, truthMetsStrollerCorrected, %f", buf, 0x6Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B1CC0);
    }
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieWalkModel::calculateWorkRateMETS(const CLNatalieModelInput &, const float, const BOOL)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B1CC0);
  }
  uint64_t v37 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v38 = *(_DWORD *)(v11 + 24);
    double v39 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)uint64_t buf = 67111168;
    *(_DWORD *)__int16 v48 = v38;
    *(_WORD *)&v48[4] = 2048;
    *(double *)&void v48[6] = v46;
    *(_WORD *)&v48[14] = 2048;
    *(double *)&v48[16] = v39;
    *(_WORD *)&v48[24] = 2048;
    *(double *)&v48[26] = v9;
    float v40 = 0.0;
    *(_WORD *)&v48[34] = 2048;
    *(double *)&v48[36] = v15;
    *(_WORD *)&v48[44] = 2048;
    *(double *)&v48[46] = v26;
    if (v9 >= 0.5) {
      float v40 = (float)(v46 / v9) * 100.0;
    }
    *(_WORD *)&v48[54] = 2048;
    *(double *)&v48[56] = v40;
    *(_WORD *)&v48[64] = 2048;
    *(double *)&v48[66] = v13;
    __int16 v49 = 2048;
    double v50 = v29;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Walk, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, userMets %f, userMets + grade, %f, percent grade, %f, truthMets, %f, truthMets + grade, %f", buf, 0x58u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B1CC0);
    }
    __int16 v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieWalkModel::calculateWorkRateMETS(const CLNatalieModelInput &, const float, const BOOL)", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
}

void sub_100056F84(int a1, float a2, float a3, float a4)
{
  if (a1 == 1 && a4 > 0.0)
  {
    if (a3 >= 0.5) {
      float v4 = a2 / a3;
    }
    else {
      float v4 = 0.0;
    }
    pow(v4, 3.0);
    pow(v4, 4.0);
    pow(v4, 5.0);
  }
}

void sub_100057738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

unint64_t sub_100057798(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 170 * (a4 - a2)
  }
       - 0x5555555555555555 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  float v9 = (char **)(v8 + 8 * (v7 / 0xAA));
  if (a1[2] == v8) {
    float v10 = 0;
  }
  else {
    float v10 = &(*v9)[24 * (v7 % 0xAA)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 170 * ((char **)a2 - v9)
  }
        - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x5555555555555555 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0xAA);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1000D9CF8(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1000D9CF8(v24, v6);
      sub_101122668(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_10041FD7C((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1000D9CF8(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      float v16 = (unsigned char **)(v15 + 8 * (v14 / 0xAA));
      if (a1[2] == v15) {
        float v17 = 0;
      }
      else {
        float v17 = &(*v16)[24 * (v14 % 0xAA)];
      }
      v24[0] = v12;
      sub_10112281C(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10047399C(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  float v21 = (void *)(v20 + 8 * (v19 / 0xAA));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 24 * (v19 % 0xAA);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1000D9CF8(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_100057FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

BOOL sub_100057FFC(uint64_t a1, uint64_t a2, int *a3, double *a4, int a5)
{
  uint64_t v11 = *(void *)(a1 + 104);
  uint64_t v130 = a1 + 104;
  (*(void (**)(void))(v11 + 16))();
  __int16 v132 = 256;
  __n128 v12 = (long double *)(a2 + 12);
  __n128 v13 = (double *)(a2 + 4);
  if (!sub_1000EF68C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    double v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      double v35 = *(double *)(a2 + 76);
      double v36 = *(double *)(a2 + 4);
      uint64_t v37 = *(void *)(a2 + 12);
      *(_DWORD *)uint64_t buf = 134349569;
      double v154 = v35;
      __int16 v155 = 2049;
      long double v156 = v36;
      __int16 v157 = 2049;
      *(void *)uint64_t v158 = v37;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Error,DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    double v104 = *(double *)(a2 + 76);
    double v105 = *(double *)(a2 + 4);
    uint64_t v106 = *(void *)(a2 + 12);
    int v133 = 134349569;
    double v134 = v104;
    __int16 v135 = 2049;
    long double v136 = v105;
    __int16 v137 = 2049;
    *(void *)int v138 = v106;
    unint64_t v86 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v86);
LABEL_126:
    if (v86 != (char *)buf) {
      free(v86);
    }
    goto LABEL_32;
  }
  if (sub_100183654(a1))
  {
LABEL_32:
    BOOL v33 = 0;
    goto LABEL_33;
  }
  double v128 = -1.0;
  double v129 = 0.0;
  if (*(unsigned char *)(a1 + 944))
  {
    long double v14 = *(double *)(a1 + 1032);
    unsigned int v15 = *(unsigned __int16 *)(a1 + 1022);
    double v16 = *(double *)(a1 + 1048);
    double v17 = *(double *)(a1 + 1040);
    LOWORD(v5) = *(_WORD *)(a1 + 1020);
    sub_10005B720(v14);
    double v19 = v18;
    sub_10005B720(v14 + (double)v15 * v16);
    double v21 = v20;
    sub_10005B720(*v12);
    long double v23 = v22;
    double v24 = v17 + (double)v5 * v16;
    *__n128 v12 = v22;
    double v25 = *v13;
    if (*v13 >= v17 && v25 < v24 && v23 >= v19 && v23 < v21)
    {
      *(_DWORD *)(a1 + 544) = 0;
      goto LABEL_39;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    float v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v30 = *v13;
      long double v31 = *v12;
      *(_DWORD *)uint64_t buf = 134284801;
      double v154 = v30;
      __int16 v155 = 2049;
      long double v156 = v31;
      __int16 v157 = 2049;
      *(double *)uint64_t v158 = v17;
      *(_WORD *)&v158[8] = 2049;
      *(double *)uint64_t v159 = v24;
      *(_WORD *)&v159[8] = 2049;
      double v160 = v19;
      __int16 v161 = 2049;
      double v162 = v21;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v108 = *v13;
      long double v109 = *v12;
      int v133 = 134284801;
      double v134 = v108;
      __int16 v135 = 2049;
      long double v136 = v109;
      __int16 v137 = 2049;
      *(double *)int v138 = v17;
      *(_WORD *)&v138[8] = 2049;
      *(double *)int v139 = v24;
      *(_WORD *)&v139[8] = 2049;
      double v140 = v19;
      __int16 v141 = 2049;
      double v142 = v21;
      long long v110 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v110);
      if (v110 != (char *)buf) {
        free(v110);
      }
    }
  }
  if (!sub_10013DAE4(a1 + 8, (double *)(a2 + 4), (double *)(a2 + 12)) || *(unsigned char *)(a1 + 605))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    uint64_t v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "DEM,tile not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v133) = 0;
      long long v107 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v107);
      if (v107 != (char *)buf) {
        free(v107);
      }
    }
    BOOL v33 = 0;
    *(unsigned char *)(a1 + 464) = 0;
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 480) = 0;
    goto LABEL_33;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  float v44 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "DEM,Need to load tile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v133) = 0;
    uint64_t v111 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v111);
    if (v111 != (char *)buf) {
      free(v111);
    }
  }
  LOBYTE(v127) = 0;
  unsigned __int8 v45 = sub_1011595A0(a1, &v127, *v13, *v12);
  if (LOBYTE(v127))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    float v46 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "DEM,tile download needed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v133) = 0;
      long long v115 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v115);
      if (v115 != (char *)buf) {
        free(v115);
      }
    }
    *(unsigned char *)(a1 + 464) = 1;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)v13;
    goto LABEL_32;
  }
  if ((v45 & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    unint64_t v85 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "DEM,Tile not loaded yet", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v133) = 0;
    unint64_t v86 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v86);
    goto LABEL_126;
  }
  double v25 = *v13;
  long double v23 = *v12;
LABEL_39:
  *(unsigned char *)(a1 + 464) = 0;
  if (!sub_100059F6C(a1 + 912, &v129, &v128, v25, v23)) {
    goto LABEL_32;
  }
  BOOL v33 = 0;
  double v39 = v129;
  if (v129 <= 8850.0 && v129 != -9999.0 && v129 >= -450.0)
  {
    double v40 = v128;
    if (v128 < 9999.0)
    {
      *a4 = *(float *)(a1 + 1072);
      if (*(double *)(a2 + 44) > 22.0)
      {
        double v40 = v40 * 2.5;
        double v128 = v40;
      }
      double v126 = v40 * v40;
      double v127 = v39;
      double v41 = v39;
      double v42 = v39;
      if (a5)
      {
        if (*(unsigned char *)(a1 + 576) && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
        {
          int v43 = sub_101157F68(a1 + 656, &v127, &v126, v39, v40 * v40, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a2 + 76));
          double v41 = v127;
          if (v43)
          {
            double v129 = v127;
            double v42 = v127;
          }
          else
          {
            double v42 = v39;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 704) = xmmword_101DA9F80;
          *(void *)(a1 + 728) = 0;
          *(void *)(a1 + 720) = 0;
          *(void *)(a1 + 864) = 0xC0C3878000000000;
          *(_OWORD *)(a1 + 736) = 0u;
          *(_OWORD *)(a1 + 752) = 0u;
          *(_OWORD *)(a1 + 768) = 0u;
          *(_OWORD *)(a1 + 784) = 0u;
          *(_OWORD *)(a1 + 800) = 0u;
          *(_OWORD *)(a1 + 816) = 0u;
          *(_OWORD *)(a1 + 832) = 0u;
          *(int64x2_t *)(a1 + 848) = vdupq_n_s64(0xC0C3878000000000);
          *(void *)(a1 + 880) = 0;
          *(void *)(a1 + 872) = 0;
          *(_WORD *)(a1 + 888) = 0;
          *(void *)(a1 + 904) = 0;
          double v41 = v39;
          double v42 = v39;
          *(void *)(a1 + 896) = 0;
        }
      }
      double v47 = v42 + 1.3;
      double v129 = v47;
      double v48 = v41 + 1.3;
      double v127 = v41 + 1.3;
      if (*(unsigned char *)(a1 + 577)) {
        int v49 = 4;
      }
      else {
        int v49 = 3;
      }
      *a3 = v49;
      if (*(unsigned char *)(a1 + 888) || *(unsigned char *)(a1 + 889))
      {
        if (v40 < 40.0)
        {
          double v128 = 40.0;
          double v40 = 40.0;
        }
        *a3 = 2;
      }
      *(double *)(a2 + 536) = v47;
      *(double *)(a2 + 544) = v40;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v50 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v51 = *(float *)(a2 + 476);
        int v52 = *(_DWORD *)(a2 + 472);
        *(_DWORD *)uint64_t buf = 134283777;
        double v154 = v51;
        __int16 v155 = 1026;
        LODWORD(v156) = v52;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "DEM,input location undulation,und,%{private}.3lf,model,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v112 = *(float *)(a2 + 476);
        int v113 = *(_DWORD *)(a2 + 472);
        int v133 = 134283777;
        double v134 = v112;
        __int16 v135 = 1026;
        LODWORD(v136) = v113;
        long long v114 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v114);
        if (v114 != (char *)buf) {
          free(v114);
        }
      }
      if ((*(void *)(a2 + 36) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && *(double *)(a2 + 36) > 0.0
        && *(_DWORD *)(a2 + 472) == 1)
      {
        double v53 = *(double *)(a2 + 28) + *(float *)(a2 + 476);
        double v54 = *a4;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v55 = v53 - v54;
        uint64_t v56 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          double v57 = *(float *)(a2 + 476);
          double v58 = *a4;
          uint64_t v59 = *(void *)(a2 + 28);
          *(_DWORD *)uint64_t buf = 134284289;
          double v154 = v57;
          __int16 v155 = 2049;
          long double v156 = v58;
          __int16 v157 = 2049;
          *(void *)uint64_t v158 = v59;
          *(_WORD *)&v158[8] = 2049;
          *(double *)uint64_t v159 = v55;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "DEM,update undulation,undOld,%{private}.3lf,undNew,%{private}.3lf,altOld,%{private}.3lf,altNew,%{private}.3lf,", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          double v122 = *(float *)(a2 + 476);
          double v123 = *a4;
          uint64_t v124 = *(void *)(a2 + 28);
          int v133 = 134284289;
          double v134 = v122;
          __int16 v135 = 2049;
          long double v136 = v123;
          __int16 v137 = 2049;
          *(void *)int v138 = v124;
          *(_WORD *)&v138[8] = 2049;
          *(double *)int v139 = v55;
          unint64_t v125 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v125);
          if (v125 != (char *)buf) {
            free(v125);
          }
        }
        float v60 = *a4;
        *(float *)(a2 + 476) = v60;
        *(_DWORD *)(a2 + 472) = 2;
        *(double *)(a2 + 28) = v55;
      }
      if (*(unsigned char *)(a1 + 648))
      {
        sub_101159BC8(a1 + 912, a2, *(double *)(a2 + 4), *(long double *)(a2 + 12));
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        uint64_t v61 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          double v62 = *(double *)(a2 + 4);
          double v63 = *(double *)(a2 + 12);
          int v64 = *(_DWORD *)(a2 + 96);
          int v65 = *(_DWORD *)(a2 + 784);
          double v66 = *(float *)(a2 + 788);
          *(_DWORD *)uint64_t buf = 134284545;
          double v154 = v62;
          __int16 v155 = 2049;
          long double v156 = v63;
          __int16 v157 = 1024;
          *(_DWORD *)uint64_t v158 = v64;
          *(_WORD *)&v158[4] = 1025;
          *(_DWORD *)&v158[6] = v65;
          *(_WORD *)uint64_t v159 = 2049;
          *(double *)&v159[2] = v66;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "DEM,lat,%{private}.8lf,lon,%{private}.8lf,type,%d,numFlatPoints,%{private}d,%{private}.3f", buf, 0x2Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          double v116 = *(double *)(a2 + 4);
          double v117 = *(double *)(a2 + 12);
          int v118 = *(_DWORD *)(a2 + 96);
          int v119 = *(_DWORD *)(a2 + 784);
          double v120 = *(float *)(a2 + 788);
          int v133 = 134284545;
          double v134 = v116;
          __int16 v135 = 2049;
          long double v136 = v117;
          __int16 v137 = 1024;
          *(_DWORD *)int v138 = v118;
          *(_WORD *)&v138[4] = 1025;
          *(_DWORD *)&v138[6] = v119;
          *(_WORD *)int v139 = 2049;
          *(double *)&v139[2] = v120;
          uint64_t v121 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v121);
          if (v121 != (char *)buf) {
            free(v121);
          }
        }
      }
      BOOL v33 = sub_1000595F0(a1, (double *)a2);
      if (v33)
      {
        if (a5)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          uint64_t v67 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            double v68 = *(double *)(a2 + 536);
            double v69 = *(double *)(a2 + 544);
            double v70 = *a4;
            uint64_t v71 = *(void *)(a2 + 520);
            uint64_t v72 = *(void *)(a2 + 528);
            uint64_t v73 = *(void *)(a2 + 4);
            uint64_t v74 = *(void *)(a2 + 12);
            int v75 = *(_DWORD *)(a2 + 96);
            *(_DWORD *)uint64_t buf = 134286081;
            double v154 = v68;
            __int16 v155 = 2050;
            long double v156 = v69;
            __int16 v157 = 2049;
            *(double *)uint64_t v158 = v48;
            *(_WORD *)&v158[8] = 2050;
            *(double *)uint64_t v159 = v126;
            *(_WORD *)&v159[8] = 2049;
            double v160 = v39;
            __int16 v161 = 2050;
            double v162 = v70;
            __int16 v163 = 2049;
            uint64_t v164 = v71;
            __int16 v165 = 2050;
            uint64_t v166 = v72;
            __int16 v167 = 2049;
            uint64_t v168 = v73;
            __int16 v169 = 2049;
            uint64_t v170 = v74;
            __int16 v171 = 1024;
            int v172 = v75;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{private}.2lf,filterAltVariance(m^2),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d", buf, 0x6Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            double v76 = *(double *)(a2 + 536);
            double v77 = *(double *)(a2 + 544);
            double v78 = *a4;
            uint64_t v79 = *(void *)(a2 + 520);
            uint64_t v80 = *(void *)(a2 + 528);
            uint64_t v81 = *(void *)(a2 + 4);
            uint64_t v82 = *(void *)(a2 + 12);
            int v83 = *(_DWORD *)(a2 + 96);
            int v133 = 134286081;
            double v134 = v76;
            __int16 v135 = 2050;
            long double v136 = v77;
            __int16 v137 = 2049;
            *(double *)int v138 = v48;
            *(_WORD *)&v138[8] = 2050;
            *(double *)int v139 = v126;
            *(_WORD *)&v139[8] = 2049;
            double v140 = v39;
            __int16 v141 = 2050;
            double v142 = v78;
            __int16 v143 = 2049;
            uint64_t v144 = v79;
            __int16 v145 = 2050;
            uint64_t v146 = v80;
            __int16 v147 = 2049;
            uint64_t v148 = v81;
            __int16 v149 = 2049;
            uint64_t v150 = v82;
            __int16 v151 = 1024;
            int v152 = v83;
            long long v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v84);
LABEL_120:
            if (v84 != (char *)buf) {
              free(v84);
            }
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          long long v87 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            double v88 = *(double *)(a2 + 536);
            double v89 = *(double *)(a2 + 544);
            double v90 = *a4;
            double v91 = *(double *)(a2 + 520);
            double v92 = *(double *)(a2 + 528);
            uint64_t v93 = *(void *)(a2 + 4);
            uint64_t v94 = *(void *)(a2 + 12);
            int v95 = *(_DWORD *)(a2 + 96);
            *(_DWORD *)uint64_t buf = 134285569;
            double v154 = v88;
            __int16 v155 = 2050;
            long double v156 = v89;
            __int16 v157 = 2049;
            *(double *)uint64_t v158 = v39;
            *(_WORD *)&v158[8] = 2050;
            *(double *)uint64_t v159 = v90;
            *(_WORD *)&v159[8] = 2049;
            double v160 = v91;
            __int16 v161 = 2050;
            double v162 = v92;
            __int16 v163 = 2049;
            uint64_t v164 = v93;
            __int16 v165 = 2049;
            uint64_t v166 = v94;
            __int16 v167 = 1024;
            LODWORD(v168) = v95;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d", buf, 0x58u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            double v96 = *(double *)(a2 + 536);
            double v97 = *(double *)(a2 + 544);
            double v98 = *a4;
            double v99 = *(double *)(a2 + 520);
            double v100 = *(double *)(a2 + 528);
            uint64_t v101 = *(void *)(a2 + 4);
            uint64_t v102 = *(void *)(a2 + 12);
            int v103 = *(_DWORD *)(a2 + 96);
            int v133 = 134285569;
            double v134 = v96;
            __int16 v135 = 2050;
            long double v136 = v97;
            __int16 v137 = 2049;
            *(double *)int v138 = v39;
            *(_WORD *)&v138[8] = 2050;
            *(double *)int v139 = v98;
            *(_WORD *)&v139[8] = 2049;
            double v140 = v99;
            __int16 v141 = 2050;
            double v142 = v100;
            __int16 v143 = 2049;
            uint64_t v144 = v101;
            __int16 v145 = 2049;
            uint64_t v146 = v102;
            __int16 v147 = 1024;
            LODWORD(v148) = v103;
            long long v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v84);
            goto LABEL_120;
          }
        }
      }
    }
  }
LABEL_33:
  if (HIBYTE(v132))
  {
    if ((_BYTE)v132) {
      pthread_mutex_unlock(v131);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v130 + 24))(v130);
    }
  }
  return v33;
}

void sub_100059588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000595F0(uint64_t a1, double *a2)
{
  double v4 = *(double *)((char *)a2 + 20);
  if (v4 < 5.0) {
    double v4 = 5.0;
  }
  if (v4 <= 166.0) {
    double v5 = v4;
  }
  else {
    double v5 = 166.0;
  }
  if (*(double *)((char *)a2 + 60) >= 0.0) {
    double v6 = *(double *)((char *)a2 + 60);
  }
  else {
    double v6 = 0.0;
  }
  double v49 = 9999.0;
  double v7 = *(double *)((char *)a2 + 4);
  long double v8 = *(double *)((char *)a2 + 12);
  long double v47 = v8;
  double v48 = v7;
  double v46 = -9999.0;
  uint64_t v9 = a1 + 912;
  BOOL v10 = sub_100059F6C(a1 + 912, &v46, &v49, v7, v8);
  if (!v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    long double v31 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = *(void *)((char *)a2 + 4);
      uint64_t v33 = *(void *)((char *)a2 + 12);
      *(_DWORD *)uint64_t buf = 134284289;
      *(void *)&uint8_t buf[4] = v32;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&buf[14] = v33;
      *(_WORD *)&unsigned char buf[22] = 2049;
      double v61 = v7;
      __int16 v62 = 2049;
      long double v63 = v8;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonDegs,%{private}.8lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v34 = *(double *)((char *)a2 + 4);
      double v35 = *(double *)((char *)a2 + 12);
      int v50 = 134284289;
      double v51 = v34;
      __int16 v52 = 2049;
      long double v53 = v35;
      __int16 v54 = 2049;
      double v55 = v7;
      __int16 v56 = 2049;
      long double v57 = v8;
      double v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)", "%s\n", v36);
      if (v36 != buf) {
        free(v36);
      }
    }
    return v10;
  }
  double v11 = v46;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  __n128 v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *(double *)((char *)a2 + 20);
    uint64_t v14 = *((void *)a2 + 67);
    *(_DWORD *)uint64_t buf = 134284545;
    *(double *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(long double *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2048;
    double v61 = v13;
    __int16 v62 = 2048;
    long double v63 = v11;
    __int16 v64 = 2048;
    uint64_t v65 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "DEM,populateSlope,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%.1lf,centerAltitude,%.1lf,daemonLocation.priv.groundAltitude,%.1lf", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    double v43 = *(double *)((char *)a2 + 20);
    uint64_t v44 = *((void *)a2 + 67);
    int v50 = 134284545;
    double v51 = v7;
    __int16 v52 = 2049;
    long double v53 = v8;
    __int16 v54 = 2048;
    double v55 = v43;
    __int16 v56 = 2048;
    long double v57 = v11;
    __int16 v58 = 2048;
    uint64_t v59 = v44;
    unsigned __int8 v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)", "%s\n", v45);
    if (v45 != buf) {
      free(v45);
    }
  }
  unint64_t v15 = 0;
  double v16 = (double *)(a1 + 608);
  double v17 = 1.5;
  double v18 = 0.0;
  double v19 = -450.0;
  double v20 = 8850.0;
  while (1)
  {
    sub_10005B780(v16, &v48, &v47, *(double *)((char *)a2 + 4), *(double *)((char *)a2 + 12), a2[67], v6 + (double)v15 * 90.0, v5);
    if (sub_100059D38(v9, v48, v47, v21, v22))
    {
      if (!sub_100059F6C(v9, &v46, &v49, v48, v47))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v25 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = *(void *)((char *)a2 + 4);
          uint64_t v27 = *(void *)((char *)a2 + 12);
          *(_DWORD *)uint64_t buf = 134284289;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&buf[14] = v27;
          *(_WORD *)&unsigned char buf[22] = 2049;
          double v61 = v48;
          __int16 v62 = 2049;
          long double v63 = v47;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "DEM,populateSlope,fail,lat,%{private}.6lf,lon,%{private}.6lf,testLatDegs,%{private}.6lf,testLonDegs,%{private}.6lf", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          double v28 = *(double *)((char *)a2 + 4);
          double v29 = *(double *)((char *)a2 + 12);
          int v50 = 134284289;
          double v51 = v28;
          __int16 v52 = 2049;
          long double v53 = v29;
          __int16 v54 = 2049;
          double v55 = v48;
          __int16 v56 = 2049;
          long double v57 = v47;
          double v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)", "%s\n", v30);
          if (v30 != buf) {
            free(v30);
          }
        }
        goto LABEL_39;
      }
      double v23 = (v46 - v11) / v5;
      double v24 = fabs(v23);
      if (v24 >= v18) {
        double v18 = v24;
      }
      if (v46 >= v19) {
        double v19 = v46;
      }
      if (v20 >= v46) {
        double v20 = v46;
      }
      if (v17 < v49) {
        double v17 = v49;
      }
      if (v15 == 1)
      {
        a2[65] = -v23;
        goto LABEL_39;
      }
      if (v15 == 3) {
        break;
      }
    }
LABEL_39:
    if (++v15 == 4) {
      goto LABEL_50;
    }
  }
  a2[65] = v23;
LABEL_50:
  a2[66] = v18;
  double v37 = 1.5;
  if (fabs(a2[65]) > 0.5) {
    double v37 = 180.0;
  }
  double v38 = a2[68];
  *(double *)uint64_t buf = v38;
  *(double *)&uint8_t buf[8] = (v19 - v20) * 0.5;
  *(double *)&uint8_t buf[16] = v17;
  double v61 = v37;
  uint64_t v39 = 8;
  double v40 = (double *)buf;
  do
  {
    if (v38 < *(double *)&buf[v39])
    {
      double v38 = *(double *)&buf[v39];
      double v40 = (double *)&buf[v39];
    }
    v39 += 8;
  }
  while (v39 != 32);
  double v41 = *v40;
  if (*v40 < 1.5) {
    double v41 = 1.5;
  }
  if (v41 > 9999.0) {
    double v41 = 9999.0;
  }
  a2[68] = v41;
  return v10;
}

BOOL sub_100059D38(uint64_t a1, double a2, long double a3, double a4, double a5)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  if (a2 < -90.0 || a2 > 90.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    __n128 v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134283521;
      double v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.7lf,out of range", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::isLatLonOnCurrentTile(const CLDEMTile &, const double, const double)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
  }
  else
  {
    double v7 = *(double *)(a1 + 128);
    if (v7 > a2) {
      return 0;
    }
    LOWORD(a5) = *(_WORD *)(a1 + 108);
    if (v7 + *(double *)(a1 + 136) * (double)*(unint64_t *)&a5 < a2) {
      return 0;
    }
    sub_10005B720(a3);
    double v10 = *(double *)(a1 + 120);
    if (v8 < v10) {
      return 0;
    }
    LOWORD(v9) = *(_WORD *)(a1 + 110);
    return v8 <= v10 + *(double *)(a1 + 136) * (double)v9;
  }
  return result;
}

BOOL sub_100059F6C(uint64_t a1, double *a2, double *a3, double a4, long double a5)
{
  int v5 = *(unsigned __int8 *)(a1 + 80);
  *a2 = -9999.0;
  *a3 = 9999.0;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    double v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning,DEM,current tile is not valid", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_112;
    }
    goto LABEL_210;
  }
  if (*(double *)(a1 + 136) != 0.0)
  {
    if (a4 < -90.0 || a4 > 90.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134283521;
        double v84 = a4;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,out of range", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_112:
        __int16 v62 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getAltitude(CLDEMTile &, double, double, double &, double &)", "%s\n", v62);
        if (v62 != (char *)buf) {
          free(v62);
        }
        return 0;
      }
    }
    else
    {
      sub_10005B720(a5);
      double v15 = *(double *)(a1 + 128);
      if (v15 > a4)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v16 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v17 = *(double *)(a1 + 128);
          *(_DWORD *)uint64_t buf = 134283777;
          double v84 = a4;
          __int16 v85 = 2049;
          double v86 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_112;
        }
        goto LABEL_210;
      }
      double v19 = v13;
      double v20 = *(double *)(a1 + 136);
      unsigned int v21 = *(unsigned __int16 *)(a1 + 108);
      double v22 = v15 + v20 * (double)v21;
      if (v22 < a4)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v23 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134283777;
          double v84 = a4;
          __int16 v85 = 2049;
          double v86 = v22;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_112;
        }
        goto LABEL_210;
      }
      double v24 = *(double *)(a1 + 120);
      if (v13 < v24)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v25 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v26 = *(double *)(a1 + 120);
          *(_DWORD *)uint64_t buf = 134283777;
          double v84 = v19;
          __int16 v85 = 2049;
          double v86 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_112;
        }
        goto LABEL_210;
      }
      unsigned int v27 = *(unsigned __int16 *)(a1 + 110);
      double v28 = v24 + v20 * (double)v27;
      if (v13 > v28)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v29 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134283777;
          double v84 = v19;
          __int16 v85 = 2049;
          double v86 = v28;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_112;
        }
        goto LABEL_210;
      }
      float v30 = *(float *)(a1 + 156);
      float v31 = *(float *)(a1 + 104);
      if (v30 > v31) {
        float v31 = *(float *)(a1 + 156);
      }
      double v32 = v31;
      float v33 = *(float *)(a1 + 148);
      if (v33 == *(float *)(a1 + 144))
      {
        double v34 = v33;
LABEL_61:
        *a2 = v34;
        *a3 = v32;
        return 1;
      }
      double v35 = (v19 - v24) / v20;
      int v36 = (int)(floor(v35) + 0.5);
      if (v36 < 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v51 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v52 = *(double *)(a1 + 120);
          *(_DWORD *)uint64_t buf = 134283777;
          double v84 = v19;
          __int16 v85 = 2049;
          double v86 = v52;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_112;
        }
      }
      else
      {
        double v37 = (a4 - v15) / v20;
        int v38 = (int)(floor(v37) + 0.5);
        if (v38 < 0)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          long double v53 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            double v54 = *(double *)(a1 + 128);
            *(_DWORD *)uint64_t buf = 134283777;
            double v84 = a4;
            __int16 v85 = 2049;
            double v86 = v54;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf", buf, 0x16u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (!result) {
            return result;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_112;
          }
        }
        else if (v36 >= v27)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          double v55 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v56) = *(_WORD *)(a1 + 110);
            double v57 = *(double *)(a1 + 120) + (double)v56 * *(double *)(a1 + 136);
            *(_DWORD *)uint64_t buf = 134283777;
            double v84 = v19;
            __int16 v85 = 2049;
            double v86 = v57;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf", buf, 0x16u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (!result) {
            return result;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_112;
          }
        }
        else if (v38 >= v21)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          __int16 v58 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v59) = *(_WORD *)(a1 + 108);
            double v60 = *(double *)(a1 + 128) + (double)v59 * *(double *)(a1 + 136);
            *(_DWORD *)uint64_t buf = 134283777;
            double v84 = a4;
            __int16 v85 = 2049;
            double v86 = v60;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf", buf, 0x16u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (!result) {
            return result;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v39 = (int)(v27 * v38);
          *(void *)&double v40 = v39 + v36;
          uint64_t v41 = *(void *)(a1 + 24);
          if (v41 && (unint64_t v42 = *(unsigned int *)(a1 + 112), v42 > *(void *)&v40))
          {
            uint64_t v43 = v36 + 1;
            unsigned int v44 = *(unsigned __int8 *)(v41 + *(void *)&v40);
            int v45 = v38 + 1;
            BOOL v46 = v43 == v27 && v45 == v21;
            int v47 = *(unsigned __int8 *)(v41 + *(void *)&v40);
            int v48 = v47;
            int v49 = v47;
            if (v46) {
              goto LABEL_129;
            }
            if (v43 == v27)
            {
              unint64_t v50 = v36 + (uint64_t)(int)(v45 * v27);
              if (v42 > v50)
              {
                int v47 = *(unsigned __int8 *)(v41 + v50);
                int v48 = v44;
                int v49 = v47;
LABEL_129:
                uint64_t v68 = v44 != v5;
                if (v48 != v5) {
                  v68 |= 2uLL;
                }
                if (v49 != v5) {
                  v68 |= 4uLL;
                }
                if (v47 == v5) {
                  uint64_t v69 = v68;
                }
                else {
                  uint64_t v69 = v68 | 8;
                }
                char v70 = 1;
                double v71 = 0.0;
                double v72 = 0.0;
                double v73 = 0.0;
                double v74 = 0.0;
                switch(v69)
                {
                  case 0:
                    goto LABEL_171;
                  case 1:
                    goto LABEL_159;
                  case 2:
                    unsigned int v44 = v48;
                    goto LABEL_159;
                  case 3:
                    char v70 = 0;
                    double v73 = (double)v44;
                    goto LABEL_156;
                  case 4:
                    unsigned int v44 = v49;
                    goto LABEL_159;
                  case 5:
                    char v70 = 0;
                    double v71 = (double)v49;
                    goto LABEL_161;
                  case 6:
                    char v70 = 0;
                    double v73 = (double)v49;
LABEL_156:
                    double v71 = (double)v48;
                    goto LABEL_166;
                  case 7:
                    char v70 = 0;
                    double v71 = (double)v49;
                    double v74 = (double)v44;
                    double v72 = (double)v48;
                    double v73 = (double)v49;
                    goto LABEL_171;
                  case 8:
                    unsigned int v44 = v47;
LABEL_159:
                    double v34 = (float)(v33 + (float)((float)(int)v44 * v30));
                    goto LABEL_61;
                  case 9:
                    char v70 = 0;
                    double v71 = (double)v47;
LABEL_161:
                    double v72 = (double)v44;
                    goto LABEL_163;
                  case 10:
                    char v70 = 0;
                    double v71 = (double)v47;
                    double v72 = (double)v48;
LABEL_163:
                    double v73 = v71;
                    goto LABEL_170;
                  case 11:
                    char v70 = 0;
                    double v73 = (double)v44;
                    double v71 = (double)v47;
                    double v72 = (double)v48;
                    goto LABEL_167;
                  case 12:
                    char v70 = 0;
                    double v73 = (double)v49;
                    double v71 = (double)v47;
LABEL_166:
                    double v72 = v71;
LABEL_167:
                    double v74 = v73;
                    goto LABEL_171;
                  case 13:
                    char v70 = 0;
                    double v73 = (double)v49;
                    double v71 = (double)v47;
                    double v72 = (double)v44;
                    goto LABEL_170;
                  case 14:
                    char v70 = 0;
                    double v73 = (double)v49;
                    double v71 = (double)v47;
                    double v72 = (double)v48;
LABEL_170:
                    double v74 = v72;
                    goto LABEL_171;
                  case 15:
                    char v70 = 0;
                    double v73 = (double)v49;
                    double v71 = (double)v47;
                    double v74 = (double)v44;
                    double v72 = (double)v48;
LABEL_171:
                    LOBYTE(v14) = *(unsigned char *)(a1 + 80);
                    double v77 = (double)v14;
                    if (vabdd_f64(v74, v77) < 1.0e-12
                      || vabdd_f64(v73, v77) < 1.0e-12
                      || vabdd_f64(v72, v77) < 1.0e-12
                      || vabdd_f64(v71, v77) < 1.0e-12)
                    {
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023144B0);
                      }
                      double v78 = qword_1024193D8;
                      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                      {
                        *(_WORD *)uint64_t buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "#Warning,DEM,unexpected noData", buf, 2u);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1024193D0 != -1) {
LABEL_219:
                        }
                          dispatch_once(&qword_1024193D0, &stru_1023144B0);
LABEL_208:
                        uint64_t v82 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getAltitude(CLDEMTile &, double, double, double &, double &)", "%s\n", v82);
                        if (v82 != (char *)buf) {
                          free(v82);
                        }
                      }
LABEL_180:
                      BOOL result = 0;
                      *a2 = -9999.0;
                      *a3 = 9999.0;
                      return result;
                    }
                    *a2 = -9999.0;
                    *a3 = 9999.0;
                    if (v70) {
                      return 1;
                    }
                    double v34 = v33
                        + (((double)v45 - v37) * ((v35 - (double)v36) * v72)
                         + ((double)(int)v43 - v35) * v74 * ((double)v45 - v37)
                         + ((double)(int)v43 - v35) * v73 * (v37 - (double)v38)
                         + (v35 - (double)v36) * v71 * (v37 - (double)v38))
                        / (((double)v45 - (double)v38)
                         * ((double)(int)v43 - (double)v36))
                        * v30;
                    break;
                  default:
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1023144B0);
                    }
                    uint64_t v79 = qword_1024193D8;
                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)uint64_t buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "#Warning,DEM,Reached unexpected case", buf, 2u);
                    }
                    if (!sub_10013D1A0(115, 2)) {
                      goto LABEL_180;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193D0 == -1) {
                      goto LABEL_208;
                    }
                    goto LABEL_219;
                }
                goto LABEL_61;
              }
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023144B0);
              }
              __int16 v64 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint64_t buf = 134349056;
                double v84 = *(double *)&v50;
                _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
              }
              BOOL result = sub_10013D1A0(115, 2);
              if (!result) {
                return result;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1) {
                goto LABEL_112;
              }
            }
            else if (v45 == v21)
            {
              *(void *)&double v63 = v39 + v43;
              if (v42 > v39 + v43)
              {
                int v47 = *(unsigned __int8 *)(v41 + *(void *)&v63);
                int v48 = v47;
                int v49 = v44;
                goto LABEL_129;
              }
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023144B0);
              }
              int v75 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint64_t buf = 134349056;
                double v84 = v63;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
              }
              BOOL result = sub_10013D1A0(115, 2);
              if (!result) {
                return result;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1) {
                goto LABEL_112;
              }
            }
            else
            {
              unint64_t v65 = v36 + (uint64_t)(int)(v45 * v27);
              if (v42 <= v65)
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023144B0);
                }
                double v76 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t buf = 134349056;
                  double v84 = *(double *)&v65;
                  _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
                }
                BOOL result = sub_10013D1A0(115, 2);
                if (!result) {
                  return result;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 == -1) {
                  goto LABEL_112;
                }
              }
              else
              {
                *(void *)&double v66 = v39 + (int)v43;
                if (v42 <= *(void *)&v66)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023144B0);
                  }
                  uint64_t v80 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)uint64_t buf = 134349056;
                    double v84 = v66;
                    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
                  }
                  BOOL result = sub_10013D1A0(115, 2);
                  if (!result) {
                    return result;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 == -1) {
                    goto LABEL_112;
                  }
                }
                else
                {
                  unint64_t v67 = (int)(v45 * v27) + (uint64_t)(int)v43;
                  if (v42 > v67)
                  {
                    int v49 = *(unsigned __int8 *)(v41 + v65);
                    int v48 = *(unsigned __int8 *)(v41 + *(void *)&v66);
                    int v47 = *(unsigned __int8 *)(v41 + v67);
                    goto LABEL_129;
                  }
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023144B0);
                  }
                  uint64_t v81 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)uint64_t buf = 134349056;
                    double v84 = *(double *)&v67;
                    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
                  }
                  BOOL result = sub_10013D1A0(115, 2);
                  if (!result) {
                    return result;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 == -1) {
                    goto LABEL_112;
                  }
                }
              }
            }
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            double v61 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t buf = 134349056;
              double v84 = v40;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
            }
            BOOL result = sub_10013D1A0(115, 2);
            if (!result) {
              return result;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_112;
            }
          }
        }
      }
    }
LABEL_210:
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
    goto LABEL_112;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  double v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#Warning,DEM,cellsize == 0", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_112;
    }
    goto LABEL_210;
  }
  return result;
}

void sub_10005B720(long double a1)
{
}

BOOL sub_10005B780(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  BOOL result = 0;
  if (a7 >= 0.0 && a8 <= 50000.0)
  {
    double v15 = fabs(a8);
    __double2 v16 = __sincos_stret((dbl_101DAAC90[a8 < 0.0] + a7) * 0.0174532925);
    return sub_10005B848(a1, a2, a3, &v17, a4, a5, a6, v15 * v16.__cosval, v15 * v16.__sinval, 0.0);
  }
  return result;
}

BOOL sub_10005B848(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v11 = sqrt(a9 * a9 + a8 * a8);
  if (v11 <= 70000.0)
  {
    if (vabdd_f64(a5, a1[3]) <= 0.005)
    {
      double v25 = *a1;
      double cosval = a1[4];
    }
    else
    {
      a1[2] = a5 * 0.0174532925;
      a1[3] = a5;
      __double2 v22 = __sincos_stret(a5 * 0.0174532925);
      double cosval = v22.__cosval;
      double v23 = v22.__sinval * -0.00669437999 * v22.__sinval + 1.0;
      double v24 = sqrt(v23);
      double v25 = 6335439.33 / (v23 * v24);
      *a1 = v25;
      a1[1] = 6378137.0 / v24;
      a1[4] = v22.__cosval;
    }
    double v26 = v25 + a7;
    double v27 = 0.0;
    double v28 = a8 / v26;
    if (fabs(cosval) >= 0.0001) {
      double v27 = a9 / (cosval * (a1[1] + a7));
    }
    *a2 = a5 + v28 * 57.2957795;
    *a3 = a6 + v27 * 57.2957795;
    *a4 = a7 + a10;
    double v29 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v29;
      *a3 = *a3 + 180.0;
      double v29 = *a2;
    }
    if (v29 >= -90.0)
    {
      double v30 = *a3;
    }
    else
    {
      *a2 = -180.0 - v29;
      double v30 = *a3 + 180.0;
      *a3 = v30;
    }
    if (v30 > -180.0)
    {
      if (v30 <= 180.0) {
        return v11 <= 70000.0;
      }
    }
    else
    {
      double v30 = v30 + 360.0;
    }
    if (v30 > 180.0) {
      double v30 = v30 + -360.0;
    }
    *a3 = v30;
  }
  return v11 <= 70000.0;
}

uint64_t sub_10005BA4C()
{
  sub_10010F274((uint64_t)v16);
  uint64_t v0 = sub_100132EFC(v17, (uint64_t)"lat, ", 5);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 16) = 8;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  long long v2 = sub_100132EFC(v17, (uint64_t)", lon, ", 7);
  uint64_t v3 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 - 24) + 16) = 8;
  *(_DWORD *)((char *)v2 + *(void *)(v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(v3 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v4 = sub_100132EFC(v17, (uint64_t)", alt, ", 7);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 1;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v6 = sub_100132EFC(v17, (uint64_t)", acc, ", 7);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 16) = 1;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v8 = sub_100132EFC(v17, (uint64_t)", vacc, ", 8);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 1;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v10 = sub_100132EFC(v17, (uint64_t)", timestamp, ", 13);
  uint64_t v11 = *v10;
  *(uint64_t *)((char *)v10 + *(void *)(*v10 - 24) + 16) = 1;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __n128 v12 = sub_100132EFC(v17, (uint64_t)", age, ", 7);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 16) = 1;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  CFAbsoluteTimeGetCurrent();
  std::ostream::operator<<();
  sub_100132EFC(v17, (uint64_t)", type, ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v16
  v17[0] = v14;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10005BF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10005BFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BB268);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTelephonyService::ctServerConnectionCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      double v17 = "";
      __int16 v18 = 2082;
      double v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService::ctServerConnectionCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v13 = 0;
  }
  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _OWORD v11[2] = sub_10017721C;
  v11[3] = &unk_1022BB368;
  v11[4] = a4;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  [v10 sync:v11];
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_10005C1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005C244(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if (v6)
  {
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 44), a2, a4);
    if ((*(_DWORD *)(v5 + 56) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_17:
  float v7 = *(float *)(v5 + 48);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, a2, v7, a3);
}

uint64_t sub_10005C35C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10005C410(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

id sub_10005C4C4(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1019EB2E0(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1019EB65C(a1);
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sub_10005C560(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        char v13 = (uint64_t *)v7;
      }
      else {
        char v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)unint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100701D34();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241D5A9;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        float v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        double v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C5130);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C5130);
    }
    double v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v37 = (void *)*v37;
    }
    *(_DWORD *)unint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10005CA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241D5A8);
}

BOOL sub_10005CA30(uint64_t a1, int a2, unsigned int *a3, char *a4)
{
  int v42 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        char v13 = (uint64_t *)v7;
      }
      else {
        char v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v41 = v10;
      int v16 = sub_1000F1244(a3);
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          BOOL v23 = (uint64_t *)v17;
        }
        else {
          BOOL v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      int v24 = sub_1000F1244(a3);
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v24;
        if (v27 >= v24) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v24 >= *(_DWORD *)(v26 + 32))
      {
        *(void *)__int16 v43 = v26;
        uint64_t v36 = *(void *)(v26 + 56);
        char v37 = *a4;
        *(void *)uint64_t buf = &v42;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v37;
        *(void *)uint64_t buf = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, unsigned int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100563268();
        }
        sub_1000DC024((const void **)buf);
        if (v36) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)__int16 v43 = a1 + 64;
        char v30 = byte_10241C649;
        int v40 = sub_1000F1244(a3);
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v40 = sub_1000F1244(a3);
        *(void *)uint64_t buf = &v40;
        float v31 = sub_10044715C((uint64_t **)(a1 + 56), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v40 = sub_1000F1244(a3);
        *(void *)uint64_t buf = &v40;
        double v34 = sub_10044715C((uint64_t **)(a1 + 56), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v42;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        uint64_t v35 = v41;
        *(_DWORD *)uint64_t buf = sub_1000F1244(a3);
        sub_1000EDED4((uint64_t **)(v35 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BB268);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    int v38 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v38 = (void *)*v38;
    }
    *(_DWORD *)__int16 v43 = 136446466;
    *(void *)&v43[4] = v38;
    __int16 v44 = 1026;
    int v45 = a2;
    int v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
    return 0;
  }
  return result;
}

void sub_10005CEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000DC024((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005CF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241C648);
}

float sub_10005CF48(uint64_t a1, double a2)
{
  sub_10005DB28((void *)a1, a2);
  uint64_t v3 = *(double **)(a1 + 48);
  double v4 = *(double **)(a1 + 56);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v3 != v4) {
    double v6 = vabdd_f64(*(v4 - 1), *v3);
  }
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  if (v7 != v8) {
    double v5 = *(double *)(v8 - 8) - *(double *)(v7 + 8);
  }
  BOOL v10 = v6 <= 120.0
     || v5 < 100.0
     || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4) < 2;
  sub_10005D830((uint64_t *)a1);
  float v11 = sub_10005D338(a1);
  double v12 = sub_10005D290(a1);
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_102324FE0);
  }
  char v13 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v14 = *(void *)a1;
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4);
    *(_DWORD *)uint64_t buf = 136316674;
    uint64_t v19 = v14;
    __int16 v20 = 2050;
    double v21 = v6;
    __int16 v22 = 2050;
    double v23 = v5;
    __int16 v24 = 2050;
    unint64_t v25 = v15;
    __int16 v26 = 1026;
    BOOL v27 = v10;
    __int16 v28 = 2050;
    double v29 = v11;
    __int16 v30 = 2050;
    double v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "IndoorOutdoor,WifiModel,context,%s,scanRange,%{public}f,distanceTraveled,%{public}f,numAps,%{public}zu,invalidResult,%{public}d,stationaryProbability,%{public}f,wifiRssiModelIndoorProbability,%{public}f", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_102324FE0);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLIndoorOutdoorWifiModel::computeProbability(CFAbsoluteTime)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (v10)
  {
    float v11 = -1.0;
    if (v5 < 100.0) {
      return v12;
    }
  }
  return v11;
}

double sub_10005D290(uint64_t a1)
{
  double v1 = *(double *)(a1 + 96);
  if (v1 == -999.0) {
    return -1.0;
  }
  long long v3 = xmmword_101DB7050;
  double v5 = (v1 + 96.0) / 65.5;
  sub_1010FFF74((uint64_t)&v5, v4, (uint64_t *)&v3, 2, 1);
  return v4[0];
}

float sub_10005D338(uint64_t a1)
{
  double v61 = 0;
  __int16 v62 = 0;
  unint64_t v63 = 0;
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 == v2)
  {
    __int16 v22 = 0;
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    do
    {
      double v4 = *(int **)(v1 + 32);
      double v5 = *(int **)(v1 + 40);
      double v6 = v4 + 1;
      if (v4 != v5 && v6 != v5)
      {
        int v8 = *v4;
        int v9 = *v4;
        BOOL v10 = v4 + 1;
        float v11 = *(int **)(v1 + 32);
        double v12 = v4 + 1;
        do
        {
          int v14 = *v12++;
          int v13 = v14;
          BOOL v15 = v9 < v14;
          if (v9 <= v14) {
            int v9 = v13;
          }
          if (v15) {
            float v11 = v10;
          }
          BOOL v10 = v12;
        }
        while (v12 != v5);
        int v16 = *v11;
        uint64_t v17 = v4 + 1;
        do
        {
          int v19 = *v17++;
          int v18 = v19;
          if (v19 < v8)
          {
            int v8 = v18;
            double v4 = v6;
          }
          double v6 = v17;
        }
        while (v17 != v5);
        int v20 = *v4;
        if (*(double *)(v1 + 64) > 0.0 && v16 != v20)
        {
          if (v3 >= v63)
          {
            unint64_t v3 = sub_10140DA90((uint64_t *)&v61, v1);
          }
          else
          {
            sub_10140DBA0((uint64_t)&v63, v3, v1);
            v3 += 80;
          }
          __int16 v62 = (long long *)v3;
        }
      }
      v1 += 80;
    }
    while (v1 != v2);
    __int16 v22 = v61;
  }
  unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - (void)v22) >> 4);
  float v24 = -1.0;
  if (v23 >= 2)
  {
    unint64_t v25 = 126 - 2 * __clz(v23);
    if ((long long *)v3 == v22) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v25;
    }
    sub_10140DC30(v22, v3, v26, 1);
    uint64_t v27 = (uint64_t)v61;
    unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (v62 - v61);
    if (v28 >= 0x1A)
    {
      uint64_t v33 = 0;
      int v29 = 0;
      do
      {
        v29 += (*((void *)&v61[v33] + 1) - *(void *)&v61[v33]) >> 3;
        v33 += 5;
      }
      while (v33 != 120);
    }
    else if (v61 == v62)
    {
      int v29 = 0;
    }
    else
    {
      int v29 = 0;
      __int16 v30 = v61;
      do
      {
        uint64_t v32 = *(void *)v30;
        uint64_t v31 = *((void *)v30 + 1);
        v30 += 5;
        v29 += (unint64_t)(v31 - v32) >> 3;
      }
      while (v30 != v62);
    }
    if ((int)v28 < 1)
    {
      double v34 = 0;
    }
    else
    {
      double v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      double v38 = (double)v29;
      do
      {
        uint64_t v39 = v27 + 80 * v37;
        double v40 = (double)(int)((*(void *)(v39 + 8) - *(void *)v39) >> 3) / v38;
        double v41 = *(double *)(v39 + 64);
        double v42 = 1.0 - v41;
        if (v36 >= v35)
        {
          unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (v36 - v34) + 1;
          if (v43 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * (v35 - v34) > v43) {
            unint64_t v43 = 0x5555555555555556 * (v35 - v34);
          }
          if (0xAAAAAAAAAAAAAAABLL * (v35 - v34) >= 0x555555555555555) {
            unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FA0();
            }
            int v45 = (char *)operator new(24 * v44);
          }
          else
          {
            int v45 = 0;
          }
          BOOL v46 = (double *)&v45[8 * (v36 - v34)];
          *BOOL v46 = v40;
          v46[1] = v41;
          v46[2] = v42;
          if (v36 == v34)
          {
            int v49 = v36;
            double v34 = (double *)&v45[8 * (v36 - v34)];
          }
          else
          {
            __int16 v47 = (double *)&v45[8 * (v36 - v34)];
            do
            {
              long long v48 = *(_OWORD *)(v36 - 3);
              *(v47 - 1) = *(v36 - 1);
              *(_OWORD *)(v47 - 3) = v48;
              v47 -= 3;
              v36 -= 3;
            }
            while (v36 != v34);
            int v49 = v34;
            double v34 = v47;
          }
          uint64_t v35 = (double *)&v45[24 * v44];
          uint64_t v36 = v46 + 3;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *uint64_t v36 = v40;
          v36[1] = v41;
          v36[2] = v42;
          v36 += 3;
        }
        ++v37;
        uint64_t v27 = (uint64_t)v61;
        int v50 = -858993459 * ((unint64_t)((char *)v62 - (char *)v61) >> 4);
        if (v50 >= 25) {
          int v50 = 25;
        }
      }
      while (v37 < v50);
      if (v34 != v36)
      {
        double v51 = 1.0;
        double v52 = v34;
        do
        {
          long double v54 = *v52;
          long double v53 = v52[1];
          v52 += 3;
          double v51 = v51 * pow(v53, v54);
        }
        while (v52 != v36);
        double v55 = 1.0;
        unint64_t v56 = v34;
        do
        {
          long double v57 = v56[2];
          long double v58 = *v56;
          v56 += 3;
          double v55 = v55 * pow(v57, v58);
        }
        while (v56 != v36);
LABEL_73:
        long double v59 = exp(v51 * (1.0 / (v51 + v55)) * 11.1434693 + -4.35656828);
        float v24 = v59 / (v59 + 1.0);
        if (v34) {
          operator delete(v34);
        }
        goto LABEL_75;
      }
    }
    double v51 = 1.0;
    double v55 = 1.0;
    goto LABEL_73;
  }
LABEL_75:
  __int16 v64 = &v61;
  sub_10005D798((void ***)&v64);
  return v24;
}

void sub_10005D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10005D798(&a12);
  _Unwind_Resume(a1);
}

void sub_10005D798(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_10054EB30((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10005D830(uint64_t *a1)
{
  a1[12] = 0xC08F380000000000;
  uint64_t v1 = a1[3];
  for (uint64_t i = a1[4]; v1 != i; v1 += 80)
  {
    uint64_t v4 = (*(void *)(v1 + 8) - *(void *)v1) >> 3;
    if ((int)v4 >= 2)
    {
      float v5 = sub_10140D02C(a1, (uint64_t *)(v1 + 32), 25.0);
      uint64_t v7 = (double *)a1[6];
      uint64_t v6 = a1[7];
      double v8 = (*(double *)(*(void *)(v1 + 8) - 8) - **(double **)v1) / (*(double *)(v6 - 8) - *v7);
      double v9 = v5;
      long double v10 = exp((v8 + -0.00137940772) / 0.998620592 * 5.78228066+ ((double)(int)v4 / (double)(unint64_t)((v6 - (uint64_t)v7) >> 3) + -0.0689655172)/ 0.931034483* 1.87654821+ (v5 + 99.25) / 71.25 * 1.10882815+ -5.98543736);
      *(double *)(v1 + 56) = v8;
      *(long double *)(v1 + 64) = v10 / (v10 + 1.0);
      float v11 = *(int **)(v1 + 32);
      double v12 = *(int **)(v1 + 40);
      if (v11 != v12)
      {
        int v13 = v11 + 1;
        if (v11 + 1 != v12)
        {
          int v14 = *v11;
          BOOL v15 = v11 + 1;
          do
          {
            int v17 = *v15++;
            int v16 = v17;
            BOOL v18 = v14 < v17;
            if (v14 <= v17) {
              int v14 = v16;
            }
            if (v18) {
              float v11 = v13;
            }
            int v13 = v15;
          }
          while (v15 != v12);
        }
      }
      *(_DWORD *)(v1 + 72) = *v11;
      if ((int)v4 >= 7 && *((double *)a1 + 12) < v9) {
        *((double *)a1 + 12) = v9;
      }
    }
  }
}

void sub_10005DA08(void *a1, double a2, double a3, double a4)
{
  sub_10005DB28(a1, a4);
  uint64_t v7 = (double *)a1[9];
  double v8 = (double *)a1[10];
  if (v7 == v8) {
    double v9 = 0.0;
  }
  else {
    double v9 = *(v8 - 1);
  }
  double v10 = v9 + a3;
  unint64_t v11 = a1[11];
  if ((unint64_t)v8 >= v11)
  {
    uint64_t v13 = ((char *)v8 - (char *)v7) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v11 - (void)v7;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      int v17 = (char *)sub_1000C571C((uint64_t)(a1 + 11), v16);
      uint64_t v7 = (double *)a1[9];
      double v8 = (double *)a1[10];
    }
    else
    {
      int v17 = 0;
    }
    BOOL v18 = (double *)&v17[16 * v13];
    int v19 = &v17[16 * v16];
    *BOOL v18 = a2;
    v18[1] = v10;
    double v12 = v18 + 2;
    if (v8 != v7)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
        v18 -= 2;
        v8 -= 2;
      }
      while (v8 != v7);
      uint64_t v7 = (double *)a1[9];
    }
    a1[9] = v18;
    a1[10] = v12;
    a1[11] = v19;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    double *v8 = a2;
    v8[1] = v10;
    double v12 = v8 + 2;
  }
  a1[10] = v12;
}

uint64_t sub_10005DB28(void *a1, double a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v4 = (uint64_t)(a1 + 3);
  if (v5 == v6)
  {
LABEL_26:
    uint64_t v13 = v5;
  }
  else
  {
LABEL_2:
    double v8 = *(double **)v5;
    uint64_t v7 = *(double **)(v5 + 8);
    while (v8 != v7)
    {
      if (vabdd_f64(a2, *v8) <= 150.0)
      {
        v5 += 80;
        if (v5 != v6) {
          goto LABEL_2;
        }
        uint64_t v13 = v6;
        goto LABEL_27;
      }
      int64_t v9 = (char *)v7 - (char *)(v8 + 1);
      if (v7 != v8 + 1) {
        memmove(v8, v8 + 1, (char *)v7 - (char *)(v8 + 1));
      }
      uint64_t v7 = (double *)((char *)v8 + v9);
      *(void *)(v5 + 8) = (char *)v8 + v9;
      uint64_t v11 = *(void *)(v5 + 32);
      uint64_t v10 = *(void *)(v5 + 40);
      uint64_t v12 = v10 - (v11 + 4);
      if (v10 != v11 + 4)
      {
        memmove(*(void **)(v5 + 32), (const void *)(v11 + 4), v10 - (v11 + 4));
        uint64_t v7 = *(double **)(v5 + 8);
      }
      *(void *)(v5 + 40) = v11 + v12;
      double v8 = *(double **)v5;
    }
    if (v5 == v6) {
      goto LABEL_26;
    }
    uint64_t v14 = v5 + 80;
    if (v5 + 80 == v6) {
      goto LABEL_26;
    }
    uint64_t v13 = v5;
    do
    {
      uint64_t v15 = v5;
      uint64_t v5 = v14;
      int v17 = *(double **)(v15 + 80);
      unint64_t v16 = *(double **)(v15 + 88);
      if (v17 != v16)
      {
        while (vabdd_f64(a2, *v17) > 150.0)
        {
          int64_t v18 = (char *)v16 - (char *)(v17 + 1);
          if (v16 != v17 + 1) {
            memmove(v17, v17 + 1, (char *)v16 - (char *)(v17 + 1));
          }
          unint64_t v16 = (double *)((char *)v17 + v18);
          *(void *)(v15 + 88) = (char *)v17 + v18;
          uint64_t v20 = *(void *)(v15 + 112);
          uint64_t v19 = *(void *)(v15 + 120);
          uint64_t v21 = v19 - (v20 + 4);
          if (v19 != v20 + 4)
          {
            memmove(*(void **)(v15 + 112), (const void *)(v20 + 4), v19 - (v20 + 4));
            unint64_t v16 = *(double **)(v15 + 88);
          }
          *(void *)(v15 + 120) = v20 + v21;
          int v17 = *(double **)v5;
          if (*(double **)v5 == v16) {
            goto LABEL_24;
          }
        }
        sub_1000F4EBC(v13, (__n128 *)v5);
        *(_DWORD *)(v13 + 24) = *(_DWORD *)(v15 + 104);
        sub_1000F4EBC(v13 + 32, (__n128 *)(v15 + 112));
        long long v22 = *(_OWORD *)(v15 + 136);
        *(_DWORD *)(v13 + 72) = *(_DWORD *)(v15 + 152);
        *(_OWORD *)(v13 + 56) = v22;
        v13 += 80;
      }
LABEL_24:
      uint64_t v14 = v5 + 80;
    }
    while (v5 + 80 != v6);
  }
LABEL_27:
  uint64_t result = sub_10005DE20(v4, v13, a1[4]);
  unint64_t v25 = (double *)a1[6];
  float v24 = (double *)a1[7];
  if (v25 != v24)
  {
    while (vabdd_f64(a2, *v25) <= 150.0)
    {
      if (++v25 == v24) {
        goto LABEL_39;
      }
    }
    if (v25 != v24)
    {
      for (uint64_t i = v25 + 1; i != v24; ++i)
      {
        if (vabdd_f64(a2, *i) <= 150.0) {
          *v25++ = *i;
        }
      }
    }
    if (v25 != v24) {
      a1[7] = v25;
    }
  }
LABEL_39:
  unint64_t v28 = (double *)a1[9];
  uint64_t v27 = (double *)a1[10];
  if (v28 != v27)
  {
    while (vabdd_f64(a2, *v28) <= 150.0)
    {
      v28 += 2;
      if (v28 == v27) {
        return result;
      }
    }
    if (v28 != v27)
    {
      int v29 = v28 + 2;
      if (v28 + 2 != v27)
      {
        do
        {
          if (vabdd_f64(a2, *v29) <= 150.0)
          {
            *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
            v28 += 2;
          }
          v29 += 2;
        }
        while (v29 != v27);
        uint64_t v27 = (double *)a1[10];
      }
    }
    if (v28 != v27) {
      a1[10] = v28;
    }
  }
  return result;
}

uint64_t sub_10005DE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10140D6E8((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 80;
        sub_10054EB30(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

id sub_10005DEB0(id result, int a2, double a3)
{
  uint64_t v5 = result;
  if (a2) {
    uint64_t result = [*((id *)result + 81) setNextFireDelay:1.0];
  }
  if (v5[632] != a2)
  {
    v5[632] = a2;
    if (v5[528])
    {
      char v9 = off_1022E6AE0;
      char v12 = a2;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      double v11 = a3;
      uint64_t v6 = sub_101282D9C();
      sub_10128431C(v6, (uint64_t)&v9);
      sub_10170140C(v13);
      sub_101727098((uint64_t)v13);
      v15 |= 1u;
      *(CFAbsoluteTime *)&v13[77] = Current;
      uint64_t v7 = v14;
      *(unsigned char *)(v14 + 20) |= 1u;
      *(double *)(v7 + 8) = a3;
      uint64_t v8 = v14;
      *(unsigned char *)(v14 + 20) |= 2u;
      *(unsigned char *)(v8 + 16) = a2;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1023257E8);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v13);
      }
      sub_101706914((PB::Base *)v13);
    }
    HIDWORD(v13[0]) = 0;
    *(_DWORD *)((char *)v13 + 1) = 0;
    LOBYTE(v13[0]) = a2;
    *(double *)&v13[1] = a3;
    LODWORD(v9) = 6;
    return (id)(*(uint64_t (**)(unsigned char *, uint64_t (***)(), void *, uint64_t, uint64_t, void))(*(void *)v5 + 152))(v5, &v9, v13, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10005E06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005E0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  sub_1000F5BB0(a2, *(void **)(a2 + 8));
  *(void *)a2 = v4;
  *(void *)(a2 + 16) = 0;
  void *v4 = 0;
  uint64_t v5 = *(void **)(a1 + 240);
  if (v5 == (void *)(a1 + 248)) {
    goto LABEL_35;
  }
  char v6 = 0;
  do
  {
    if (!*((unsigned char *)v5 + 903)) {
      goto LABEL_16;
    }
    int v7 = *((_DWORD *)v5 + 224);
    if (v7 == 10)
    {
      if (*(unsigned char *)(a1 + 705)) {
        goto LABEL_15;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      char v12 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Indoor provider active, but pipelined not activated", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_29;
        }
        goto LABEL_31;
      }
    }
    else
    {
      if (v7 != 11 || *(unsigned char *)(a1 + 706))
      {
LABEL_15:
        *(_DWORD *)uint64_t buf = *((_DWORD *)v5 + 224);
        sub_1000EDED4((uint64_t **)a2, (int *)buf, buf);
        v6 |= *((_DWORD *)v5 + 224) == 1;
        goto LABEL_16;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v8 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Wifi2 provider active, but pipelined not activated", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1)
        {
LABEL_29:
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
          goto LABEL_16;
        }
LABEL_31:
        dispatch_once(&qword_102419380, &stru_1022C17A0);
        goto LABEL_29;
      }
    }
LABEL_16:
    char v9 = (void *)v5[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        char v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v5[2];
        BOOL v11 = *v10 == (void)v5;
        uint64_t v5 = v10;
      }
      while (!v11);
    }
    uint64_t v5 = v10;
  }
  while (v10 != (void *)(a1 + 248));
  if (v6)
  {
    int v14 = 1;
    goto LABEL_42;
  }
LABEL_35:
  if (*(unsigned char *)(a1 + 704))
  {
    *(_DWORD *)uint64_t buf = 1;
    sub_1000EDED4((uint64_t **)a2, (int *)buf, buf);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    char v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "GPSController indicates hardware active while client is not active", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  int v14 = 0;
LABEL_42:
  *(_DWORD *)uint64_t buf = 13;
  sub_1000EDED4((uint64_t **)a2, (int *)buf, buf);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  unint64_t v16 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a2 + 16);
    int v18 = *(unsigned __int8 *)(a1 + 704);
    *(_DWORD *)uint64_t buf = 134349568;
    uint64_t v23 = v17;
    __int16 v24 = 1026;
    int v25 = v14;
    __int16 v26 = 1026;
    int v27 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#techstatus,enquired,sz,%{public}zu,gpsClientActive,%{public}d,gpsHwActive,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  return 1;
}

BOOL sub_10005E7C0(uint64_t a1)
{
  unsigned int v1 = sub_10005E978(a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Registration status: %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getIsRegisteredOnCell()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1 > 3;
}

uint64_t sub_10005E978(uint64_t a1)
{
  unsigned int v6 = 0;
  if (!(*(unsigned int (**)(uint64_t, const void **))(*(void *)a1 + 208))(a1, &v6))
  {
    LODWORD(v3) = 0;
LABEL_9:
    if (sub_1005514B0(a1)) {
      return 7;
    }
    else {
      return v3;
    }
  }
  uint64_t v2 = sub_10005ED78(v6);
  uint64_t v3 = v2;
  if (v2 <= 3 && v2 != 2) {
    goto LABEL_9;
  }
  return v3;
}

BOOL sub_10005EA08(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)uint64_t buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 1026;
      int v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    if (!_CTServerConnectionGetRegistrationStatus()) {
      return 1;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "_CTServerConnectionGetRegistrationStatus failed", buf, 2u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getRegistrationStatus(CFStringRef &)", "%s\n");
LABEL_24:
      if (v7 != buf) {
        free(v7);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getRegistrationStatus(CFStringRef &)", "%s\n");
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_10005ED78(const void *a1)
{
  if (a1)
  {
    if (CFEqual(a1, kCTRegistrationStatusNotRegistered))
    {
      return 1;
    }
    else if (CFEqual(a1, kCTRegistrationStatusSearching))
    {
      return 2;
    }
    else if (CFEqual(a1, kCTRegistrationStatusDenied))
    {
      return 3;
    }
    else if (CFEqual(a1, kCTRegistrationStatusRegisteredHome))
    {
      return 4;
    }
    else if (CFEqual(a1, kCTRegistrationStatusRegisteredRoaming))
    {
      return 5;
    }
    else if (CFEqual(a1, kCTRegistrationStatusEmergencyOnly))
    {
      return 6;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: fromRegistrationStatus(statusStr): statusStr == NULL", buf, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::RegistrationStatus fromRegistrationStatus(CFStringRef)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
      return 0;
    }
  }
  return result;
}

id sub_10005EFC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) floatValue:CFAbsoluteTimeGetCurrent()];
  LODWORD(v6) = v2;
  id result = [*(id *)v1 silo];
  uint64_t v4 = *(uint64_t (**)(uint64_t *, void))(v1 + 16);
  if (v4) {
    return (id)v4(&v5, *(void *)(v1 + 8));
  }
  return result;
}

void sub_10005F028(void *a1, _OWORD *a2)
{
  unint64_t v6 = a1[5];
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = v6;
  int v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    char v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v13 = v5 - v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      char v15 = (char *)sub_1000C571C(v4, v14);
    }
    else {
      char v15 = 0;
    }
    unint64_t v16 = &v15[16 * v11];
    uint64_t v17 = &v15[16 * v14];
    *(_OWORD *)unint64_t v16 = *a2;
    uint64_t v8 = (double *)(v16 + 16);
    uint64_t v19 = (char *)a1[3];
    int v18 = (char *)a1[4];
    if (v18 != v19)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      int v18 = (char *)*v9;
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int v7 = *a2;
    uint64_t v8 = (double *)(v7 + 1);
  }
  a1[4] = v8;
  uint64_t v20 = a1[3];
  if ((double *)v20 != v8 && *(v8 - 2) - *(double *)v20 >= 60.0)
  {
    unint64_t v21 = 0;
    double v22 = 0.0;
    float v23 = -3.4028e38;
    do
    {
      if (v23 < *(float *)(v20 + 8)) {
        float v23 = *(float *)(v20 + 8);
      }
      double v24 = *(double *)v20;
      v20 += 16;
      double v22 = v22 + v24;
      ++v21;
    }
    while ((double *)v20 != v8);
    unint64_t v25 = a1[8];
    double v26 = *(double *)a2;
    double v27 = v22 / (double)v21;
    unint64_t v28 = (float *)a1[7];
    if ((unint64_t)v28 >= v25)
    {
      __int16 v30 = (float *)a1[6];
      uint64_t v31 = ((char *)v28 - (char *)v30) >> 4;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60) {
        sub_1001D7FD4();
      }
      uint64_t v33 = v25 - (void)v30;
      if (v33 >> 3 > v32) {
        unint64_t v32 = v33 >> 3;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = (char *)sub_1000C571C((uint64_t)(a1 + 8), v34);
        __int16 v30 = (float *)a1[6];
        unint64_t v28 = (float *)a1[7];
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v36 = &v35[16 * v31];
      uint64_t v37 = &v35[16 * v34];
      *(double *)uint64_t v36 = v27;
      *((float *)v36 + 2) = v23;
      int v29 = (double *)(v36 + 16);
      if (v28 != v30)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v28 - 1);
          v36 -= 16;
          v28 -= 4;
        }
        while (v28 != v30);
        __int16 v30 = (float *)a1[6];
      }
      a1[6] = v36;
      a1[7] = v29;
      a1[8] = v37;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *(double *)unint64_t v28 = v27;
      v28[2] = v23;
      int v29 = (double *)(v28 + 4);
    }
    a1[7] = v29;
    double v38 = (double *)a1[6];
    if (v38 != v29)
    {
      while (vabdd_f64(v26, *v38) <= 86400.0)
      {
        v38 += 2;
        if (v38 == v29) {
          goto LABEL_51;
        }
      }
      if (v38 != v29)
      {
        uint64_t v39 = v38 + 2;
        if (v38 + 2 != v29)
        {
          do
          {
            if (vabdd_f64(v26, *v39) <= 86400.0)
            {
              *(_OWORD *)double v38 = *(_OWORD *)v39;
              v38 += 2;
            }
            v39 += 2;
          }
          while (v39 != v29);
          int v29 = (double *)a1[7];
        }
      }
      if (v38 != v29) {
        a1[7] = v38;
      }
    }
LABEL_51:
    a1[4] = a1[3];
  }
}

void sub_10005F308(uint64_t a1, __n128 *a2)
{
  sub_10005F35C((__n128 *)(a1 + 312), a2);
  uint64_t v4 = *(void **)(a1 + 6352);
  if (v4)
  {
    sub_10005F028(v4, a2);
  }
}

void sub_10005F35C(__n128 *a1, __n128 *a2)
{
  __n128 v14 = *a2;
  unint64_t v3 = a1[8].n128_u64[1];
  if (v3) {
    (*(void (**)(unint64_t, __n128 *))(*(void *)v3 + 48))(v3, &v14);
  }
  unint64_t v4 = a1[3].n128_u64[1];
  if (v4)
  {
    unint64_t v5 = v4 + a1[3].n128_u64[0] - 1;
    unint64_t v6 = (void **)a1[1].n128_u64[1];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v14.n128_f64[0])
    {
      unint64_t v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          unint64_t v10 = a1[2].n128_u64[0];
          unint64_t v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          unint64_t v9 = v10 - (void)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102301FE0);
          }
          unint64_t v12 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 134218240;
            unint64_t v20 = v14.n128_u64[0];
            __int16 v21 = 2048;
            double v22 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102301FE0);
            }
            int v15 = 134218240;
            unint64_t v16 = v14.n128_u64[0];
            __int16 v17 = 2048;
            double v18 = v7;
            uint64_t v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLAmbientLightSensor_Type::CLALSLuxResult>::add(const T &) [T = CLAmbientLightSensor_Type::CLALSLuxResult]", "%s\n", v13);
            if (v13 != (char *)buf) {
              free(v13);
            }
          }
          goto LABEL_17;
        }
        uint64_t v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_10005F614((__n128 *)a1[1].n128_u64, &v14);
  a1[6] = v14;
}

__n128 sub_10005F614(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100EE0F68(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t sub_10005F6A0(void *a1)
{
  uint64_t v1 = a1[2];
  int v2 = (uint64_t (*)(void *))a1[1];
  unint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_10005F6C8(uint64_t *a1, float *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      uint64_t v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = *(void *)a2;
    double v7 = a2[2];
    *(_DWORD *)uint64_t buf = 136315650;
    unint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    double v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "AmbientLight,context,%s,startTime,%f,lux,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logAmbientLight(const CLOutdoorAmbientLight &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

id sub_10005F8D4(uint64_t a1, void *a2)
{
  return _[a2 onAmbientLightSensorData:a1];
}

double sub_10005F940(double a1, float a2, float a3, double a4)
{
  double v4 = a1;
  if (a4 > 100.0) {
    a4 = 100.0;
  }
  double v5 = a4 * 0.819 / 100.0 + (100.0 - a4) * 0.7 / 100.0;
  float v6 = 1.0 - a2;
  if (a2 == -1.0)
  {
    float v6 = a2;
    double v7 = 0.5;
  }
  else
  {
    double v7 = v6;
  }
  if (v6 >= 0.3) {
    double v5 = a4 * 0.977 / 100.0 + (100.0 - a4) * 0.0 / 100.0;
  }
  if (a2 == -1.0) {
    double v8 = 0.1;
  }
  else {
    double v8 = v5;
  }
  double v9 = a3;
  BOOL v10 = a3 == -1.0;
  if (a3 == -1.0) {
    double v11 = 0.1;
  }
  else {
    double v11 = dbl_101D904D0[a3 >= 0.5];
  }
  if (v10) {
    double v12 = 0.5;
  }
  else {
    double v12 = v9;
  }
  float v13 = a1;
  if (a1 == -1.0) {
    double v14 = 0.1;
  }
  else {
    double v14 = dbl_101D904E0[v13 >= 0.5] * a4 / 100.0 + (100.0 - a4) * 0.1 / 100.0;
  }
  if (a1 == -1.0) {
    double v15 = 0.5;
  }
  else {
    double v15 = v13;
  }
  float v16 = v14 + v11 + v8;
  double v17 = v16;
  long double v18 = v11 / v16;
  double v29 = pow(v12, v18);
  long double v19 = v8 / v17;
  double v28 = pow(v7, v19);
  long double v20 = v14 / v17;
  double v27 = pow(v15, v20);
  double v21 = pow(1.0 - v12, v18);
  double v22 = pow(1.0 - v7, v19);
  double v23 = pow(1.0 - v15, v20);
  if (v4 == -1.0 || v4 >= 0.100000001 && v4 <= 0.899999976)
  {
    float v24 = v27 * (v29 * v28);
    float v25 = v23 * (v21 * v22);
    return (float)(v24 / (float)(v24 + v25));
  }
  return v4;
}

CFStringRef sub_10005FB58(uint64_t a1, __CFBundle *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!a2)
  {
    CFStringRef ValueAtIndex = 0;
    goto LABEL_28;
  }
  CFArrayRef v4 = (const __CFArray *)CFPreferencesCopyValue(@"AppleLanguages", @".GlobalPreferences", @"mobile", kCFPreferencesAnyHost);
  CFArrayRef v5 = v4;
  if (v4 && CFArrayGetCount(v4))
  {
    CFArrayRef v6 = CFBundleCopyBundleLocalizations(a2);
    CFArrayRef v7 = v6;
    if (v6 && CFArrayGetCount(v6))
    {
      CFArrayRef v8 = CFBundleCopyLocalizationsForPreferences(v7, v5);
      CFArrayRef v9 = v8;
      if (v8 && CFArrayGetCount(v8))
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, 0);
        CFRetain(ValueAtIndex);
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CA7B0);
        }
        double v14 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning could not get localizations for preferred languages, assuming english", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022CA7B0);
          }
          double v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLocalizationLanguage(CFBundleRef)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        CFStringRef ValueAtIndex = @"en";
        CFRetain(@"en");
      }
      goto LABEL_24;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA7B0);
    }
    double v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning could not get localizations array from bundle, assuming english", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA7B0);
      }
      float v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLocalizationLanguage(CFBundleRef)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    CFStringRef ValueAtIndex = @"en";
    CFRetain(@"en");
LABEL_23:
    CFArrayRef v9 = 0;
LABEL_24:
    CFRelease(v5);
    if (v7) {
      CFRelease(v7);
    }
    if (v9) {
      CFRelease(v9);
    }
    goto LABEL_28;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA7B0);
  }
  double v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning could not get apple languages array, assuming english", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA7B0);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLocalizationLanguage(CFBundleRef)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  CFRetain(@"en");
  CFStringRef ValueAtIndex = @"en";
  if (v5)
  {
    CFArrayRef v7 = 0;
    goto LABEL_23;
  }
LABEL_28:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return ValueAtIndex;
}

void sub_1000600BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000600EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  CFArrayRef v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100060170((uint64_t **)a1, v4, v6, v6);
      v6 += 48;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_100060158(_Unwind_Exception *a1)
{
  sub_10014F400(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100060170(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1000601F4(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_10014F578((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1000601F4(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_1001442C4(a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_1001442C4((uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      double v14 = (void *)a2[1];
      do
      {
        double v15 = v14;
        double v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      long double v18 = a2;
      do
      {
        double v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        long double v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1001442C4(a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    double v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  double v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      double v12 = v11;
      double v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      double v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (sub_1001442C4((uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_10014F4E4((uint64_t)a1, a3, a5);
}

void sub_100060CF0(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  [*(id *)(v6 + 104) silo];
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFArrayRef v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MCC failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_26:
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
LABEL_24:

      return;
    }
LABEL_32:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
    goto LABEL_26;
  }
  if (!a2 || ![(__CFString *)a2 length])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MCC returned nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
  if ((unint64_t)[(__CFString *)a2 length] >= 4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFArrayRef v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,queryServingMccAndMnc,MCC is too many digits,replacing with -1", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    a2 = @"-1";
  }
  uint64_t v9 = a2;
  [*(id *)(v6 + 16) copyMobileNetworkCode:];
}

void sub_10006116C(uint64_t a1@<X8>)
{
  uint64_t v2 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  do
  {
    unint64_t v3 = (const std::string::value_type **)&qword_10247DC58[v2];
    if (LODWORD(qword_10247DC58[v2 + 1]) != 4)
    {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
      if ((v4 & 0x80u) != 0) {
        uint64_t v4 = *(void *)(a1 + 8);
      }
      if (v4)
      {
        *((unsigned char *)&v9.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v9, ", ");
        CFArrayRef v5 = std::string::append(&v9, *v3);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        int64_t v11 = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (v11 >= 0) {
          CFArrayRef v7 = __p;
        }
        else {
          CFArrayRef v7 = (void **)__p[0];
        }
        if (v11 >= 0) {
          std::string::size_type v8 = HIBYTE(v11);
        }
        else {
          std::string::size_type v8 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)a1, (const std::string::value_type *)v7, v8);
        if (SHIBYTE(v11) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append((std::string *)a1, *v3);
      }
    }
    v2 += 6;
  }
  while (v2 != 102);
}

void sub_100061278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000612C4(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v5 = a1 + 824;
  uint64_t v35 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v36 = 256;
  long long v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientRegisterLQMCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  CFArrayRef v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)double v42 = 0;
    *(_WORD *)&v42[4] = 2082;
    *(void *)&v42[6] = "";
    *(_WORD *)&v42[14] = 2082;
    *(void *)&v42[16] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientRegisterLQMCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1001BD958(a1);
  if (a3)
  {
    Value = (void *)CFDictionaryGetValue(a3, @"RSSI");
    std::string v9 = (void *)CFDictionaryGetValue(a3, @"LQMTIMESTAMP");
    if (*(unsigned char *)(a1 + 632) && *(int *)(a1 + 584) >= 1 && Value)
    {
      uint64_t v10 = v9;
      *(_DWORD *)(a1 + 576) = [Value intValue];
      double Current = CFAbsoluteTimeGetCurrent();
      if (v10)
      {
        [v10 timeIntervalSinceReferenceDate];
        double v13 = v12;
      }
      else
      {
        double v13 = Current;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        long double v18 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "WifiMgr, LQM notification handling error: timestamp missing, use current system time", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          LOWORD(v37.__r_.__value_.__l.__data_) = 0;
          double v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
      }
      *(double *)(a1 + 600) = v13;
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      long double v19 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        __dst[0] = *(void **)(a1 + 544);
        long double v20 = &v37;
        sub_100B39278(&v37);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long double v20 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(a1 + 575) < 0) {
          sub_1000DC48C(&__p, *(void **)(a1 + 552), *(void *)(a1 + 560));
        }
        else {
          std::string __p = *(std::string *)(a1 + 552);
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v22 = *(_DWORD *)(a1 + 576);
        uint64_t v23 = *(void *)(a1 + 600);
        *(_DWORD *)uint64_t buf = 136381443;
        *(void *)double v42 = v20;
        *(_WORD *)&v42[8] = 2081;
        *(void *)&v42[10] = p_p;
        *(_WORD *)&v42[18] = 1026;
        *(_DWORD *)&v42[20] = v22;
        __int16 v43 = 2050;
        uint64_t v44 = v23;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WifiMgr, update associated rssi via LQM, mac, %{private}s, ssid, %{private}s, rssi, %{public}d, ts, %{public}.1lf", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v32 = *(void *)(a1 + 544);
        float v25 = &__p;
        sub_100B39278(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          float v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(a1 + 575) < 0)
        {
          sub_1000DC48C(__dst, *(void **)(a1 + 552), *(void *)(a1 + 560));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 552);
          uint64_t v31 = *(void *)(a1 + 568);
        }
        double v27 = __dst;
        if (v31 < 0) {
          double v27 = (void **)__dst[0];
        }
        int v28 = *(_DWORD *)(a1 + 576);
        uint64_t v29 = *(void *)(a1 + 600);
        LODWORD(v37.__r_.__value_.__l.__data_) = 136381443;
        *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        WORD2(v37.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
        HIWORD(v37.__r_.__value_.__r.__words[2]) = 1026;
        int v38 = v28;
        __int16 v39 = 2050;
        uint64_t v40 = v29;
        BOOL v17 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v31) < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v17);
        if (v17 != (char *)buf) {
LABEL_63:
        }
          free(v17);
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      double v14 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        int v15 = *(unsigned __int8 *)(a1 + 632);
        if (*(unsigned char *)(a1 + 632)) {
          int v15 = *(_DWORD *)(a1 + 584) > 0;
        }
        *(_DWORD *)uint64_t buf = 67240449;
        *(_DWORD *)double v42 = Value == 0;
        *(_WORD *)&v42[4] = 1025;
        *(_DWORD *)&v42[6] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "WifiMgr, LQM notification handling error: rssi value is null - %{public}d; isAssociated - %{private}d",
          buf,
          0xEu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        int v16 = *(unsigned __int8 *)(a1 + 632);
        if (*(unsigned char *)(a1 + 632)) {
          int v16 = *(_DWORD *)(a1 + 584) > 0;
        }
        LODWORD(v37.__r_.__value_.__l.__data_) = 67240449;
        HIDWORD(v37.__r_.__value_.__r.__words[0]) = Value == 0;
        LOWORD(v37.__r_.__value_.__r.__words[1]) = 1025;
        *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[1] + 2) = v16;
        BOOL v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v17);
        if (v17 != (char *)buf) {
          goto LABEL_63;
        }
      }
    }
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_100061A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,os_activity_scope_state_s state,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_1019DB560((uint64_t)&a22);
  _Unwind_Resume(a1);
}

float64x2_t sub_100061AC4(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    sub_101A7DDEC();
  }
  sub_100062B3C((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 > 3)
  {
    uint64_t v10 = *(float64x2_t **)(a1 + 32);
    int64_t v11 = *(float64x2_t **)(a2 + 32);
    double v12 = (float64x2_t *)((char *)v10 + 8 * (v6 - 2));
    double v13 = (float64x2_t *)((char *)v11 + 8 * (v6 - 2));
    uint64_t v14 = (v6 - 1) >> 1;
    do
    {
      float64x2_t v15 = *v10++;
      *v11++ = vmulq_n_f64(v15, a3);
      --v14;
    }
    while (v14);
    float64x2_t result = vmulq_n_f64(*v12, a3);
    *double v13 = result;
  }
  else if ((int)v6 >= 1)
  {
    CFArrayRef v7 = *(double **)(a1 + 32);
    std::string::size_type v8 = *(double **)(a2 + 32);
    do
    {
      double v9 = *v7++;
      result.f64[0] = v9 * a3;
      *v8++ = v9 * a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_100061B84(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a2 <= 0) {
    sub_101AB9F44();
  }
  double v12 = *(double *)(a1 + 128);
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  unsigned int v14 = *(_DWORD *)(a3 + 12);
  if (v13) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    if (v13 <= v14) {
      unsigned int v13 = *(_DWORD *)(a3 + 12);
    }
    if (v13 != a2) {
      sub_101ABA074();
    }
    for (unsigned int i = 0; i != a2; ++i)
    {
      double v17 = sub_1000629A4(a3, i);
      if (v17 < 0.0 || v17 > 1.0) {
        sub_101ABA048();
      }
    }
  }
  if (a4 <= 0) {
    sub_101AB9F70();
  }
  unsigned int v19 = *(_DWORD *)(a5 + 8);
  unsigned int v20 = *(_DWORD *)(a5 + 12);
  if (v19 <= v20) {
    int v21 = *(_DWORD *)(a5 + 12);
  }
  else {
    int v21 = *(_DWORD *)(a5 + 8);
  }
  if (v20) {
    BOOL v22 = v19 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22) {
    int v23 = 0;
  }
  else {
    int v23 = v21;
  }
  if (v23 != a4) {
    sub_101ABA01C();
  }
  unsigned int v24 = *(_DWORD *)(a6 + 8);
  unsigned int v25 = *(_DWORD *)(a6 + 12);
  if (v24 <= v25) {
    int v26 = *(_DWORD *)(a6 + 12);
  }
  else {
    int v26 = *(_DWORD *)(a6 + 8);
  }
  if (v25) {
    BOOL v27 = v24 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (v27) {
    int v28 = 0;
  }
  else {
    int v28 = v26;
  }
  if (v28 != a4) {
    sub_101AB9FF0();
  }
  if (*(_DWORD *)(a3 + 8) && *(_DWORD *)(a3 + 12))
  {
    uint64_t v57 = 0x100000002;
    long long v56 = xmmword_101E0F9B0;
    double v55 = off_10232BE58;
    long double v58 = (double *)v59;
    uint64_t v29 = (cnprint::CNPrinter *)sub_1000629E0(a3, 1, (uint64_t)&v55);
    if (DWORD2(v56) != 1) {
      sub_101AB9EEC();
    }
    double v30 = *v58;
    if (*v58 <= 0.0) {
      sub_101AB9FC4();
    }
    if (fabs(v30 + -1.0) <= v12)
    {
      sub_1000622DC((uint64_t)&v55, a3);
      sub_1001885FC(&v55, a2, 1);
      sub_100063168(a1 + 8, (uint64_t)&v55);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
      {
        LOWORD(v55) = 2;
        LOBYTE(v50) = 1;
        cnprint::CNPrinter::Print();
      }
      sub_1000622DC((uint64_t)&v50, a3);
      sub_1001885FC(&v50, a2, 1);
      uint64_t v57 = 0x100000002;
      long long v56 = xmmword_101E0F9B0;
      double v55 = off_10232BE58;
      long double v58 = (double *)v59;
      sub_100061AC4((uint64_t)&v50, (uint64_t)&v55, 1.0 / v30);
      sub_100063168(a1 + 8, (uint64_t)&v55);
    }
  }
  else
  {
    sub_101515898((uint64_t)&v50, a2, 1u);
    if (v52 < a2) {
      sub_101AB9F9C(2708, "nr <= O.MaxNumRows()");
    }
    if (!HIDWORD(v52)) {
      sub_101AB9F9C(2709, "nc <= O.MaxNumCols()");
    }
    sub_100062B3C(&v50, a2, 1);
    sub_100CF1B94((uint64_t)&v50, 1.0);
    uint64_t v57 = 0x100000002;
    long long v56 = xmmword_101E0F9B0;
    double v55 = off_10232BE58;
    long double v58 = (double *)v59;
    sub_100061AC4((uint64_t)&v50, (uint64_t)&v55, 1.0 / (double)a2);
    sub_100063168(a1 + 8, (uint64_t)&v55);
  }
  sub_1000622DC((uint64_t)&v55, a1 + 8);
  unsigned int v31 = 0;
  while (1)
  {
    uint64_t v32 = (unsigned int (*)(uint64_t, uint64_t (***)()))sub_1000622A0(a5, v31);
    uint64_t v52 = 0x100000002;
    int v50 = off_10232BE58;
    long long v51 = xmmword_101E0F9B0;
    long double v53 = &v54;
    uint64_t v33 = sub_1000622A0(a6, v31);
    if (v32(v33, &v50)) {
      break;
    }
    unsigned int v34 = 0;
    double v35 = 0.0;
    do
    {
      double v36 = *(double *)sub_100062264((uint64_t)&v50, v34);
      if (v36 < 0.0 || v36 > 1.0) {
        goto LABEL_55;
      }
      double v35 = v35 + v36;
      ++v34;
    }
    while (a2 != v34);
    if (fabs(v35) <= v12)
    {
LABEL_55:
      LOWORD(v44) = 2;
      char v49 = 4;
      cnprint::CNPrinter::Print();
      return 30;
    }
    unsigned int v38 = 0;
    do
    {
      double v39 = *(double *)sub_100062264((uint64_t)&v50, v38);
      uint64_t v40 = (double *)sub_100062264((uint64_t)&v55, v38);
      double *v40 = v39 * *v40;
      ++v38;
    }
    while (a2 != v38);
    uint64_t v46 = 0x100000002;
    uint64_t v44 = off_10232BE58;
    long long v45 = xmmword_101E0F9B0;
    __int16 v47 = (double *)v48;
    double v41 = (cnprint::CNPrinter *)sub_1000629E0((uint64_t)&v55, 1, (uint64_t)&v44);
    if (DWORD2(v45) != 1) {
      __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
    }
    double v42 = *v47;
    if (fabs(*v47) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v41) <= 1)
      {
        LOWORD(v44) = 2;
        char v49 = 1;
        cnprint::CNPrinter::Print();
      }
      sub_100063168((uint64_t)&v55, a1 + 8);
      uint64_t v46 = 0x100000002;
      uint64_t v44 = off_10232BE58;
      long long v45 = xmmword_101E0F9B0;
      __int16 v47 = (double *)v48;
      sub_1000629E0((uint64_t)&v55, 1, (uint64_t)&v44);
      if (DWORD2(v45) != 1) {
        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
      }
      double v42 = *v47;
    }
    uint64_t v46 = 0x100000002;
    uint64_t v44 = off_10232BE58;
    long long v45 = xmmword_101E0F9B0;
    __int16 v47 = (double *)v48;
    sub_100061AC4((uint64_t)&v55, (uint64_t)&v44, 1.0 / v42);
    sub_100063168((uint64_t)&v55, (uint64_t)&v44);
    if (++v31 == a4)
    {
      sub_100063168(a1 + 64, (uint64_t)&v55);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 120) = 1;
      return result;
    }
  }
  LOWORD(v44) = 2;
  char v49 = 4;
  cnprint::CNPrinter::Print();
  return 29;
}

uint64_t sub_100062264(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_101A7DC34();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_101A7DC60();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_101A7DC8C();
  }
  return v2 + 8 * a2;
}

uint64_t sub_1000622A0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_101ABA0A0();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_101ABA0CC();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_101ABA0F8();
  }
  return *(void *)(v2 + 8 * a2);
}

__n128 sub_1000622DC(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000002;
  *(void *)(a1 + 24) = 0x100000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10232BE58;
  if (a1 == a2)
  {
    int v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    long double v18 = "cnmatrix.h";
    unsigned int v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    int v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    long double v18 = "cnmatrixbase.h";
    unsigned int v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    int v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    int v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    int v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    int64_t v11 = *(long long **)(a2 + 32);
    double v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    unsigned int v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    *double v12 = result;
  }
  else if (v5)
  {
    std::string::size_type v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10006244C(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_10006246C(uint64_t a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, uint64_t (***)()), uint64_t a5)
{
  if (a2 <= 0) {
    sub_101ABA38C();
  }
  double v10 = *(double *)(a1 + 128);
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  unsigned int v12 = *(_DWORD *)(a3 + 12);
  if (v11) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (v11 <= v12) {
      unsigned int v11 = *(_DWORD *)(a3 + 12);
    }
    if (v11 != a2) {
      sub_101ABA410();
    }
    for (unsigned int i = 0; i != a2; ++i)
    {
      double v15 = sub_1000629A4(a3, i);
      if (v15 < 0.0 || v15 > 1.0) {
        sub_101ABA3E4();
      }
    }
    unsigned int v11 = *(_DWORD *)(a3 + 8);
    unsigned int v12 = *(_DWORD *)(a3 + 12);
  }
  if (v11) {
    BOOL v17 = v12 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    sub_101515898((uint64_t)&v33, a2, 1u);
    if (v35 < a2) {
      sub_101AB9F9C(2708, "nr <= O.MaxNumRows()");
    }
    if (!HIDWORD(v35)) {
      sub_101AB9F9C(2709, "nc <= O.MaxNumCols()");
    }
    sub_100062B3C(&v33, a2, 1);
    sub_100CF1B94((uint64_t)&v33, 1.0);
    uint64_t v30 = 0x100000002;
    int v28 = off_10232BE58;
    long long v29 = xmmword_101E0F9B0;
    unsigned int v31 = (double *)v32;
    sub_100061AC4((uint64_t)&v33, (uint64_t)&v28, 1.0 / (double)a2);
    sub_100063168(a1 + 64, (uint64_t)&v28);
  }
  else
  {
    uint64_t v30 = 0x100000002;
    int v28 = off_10232BE58;
    long long v29 = xmmword_101E0F9B0;
    unsigned int v31 = (double *)v32;
    long double v18 = (cnprint::CNPrinter *)sub_1000629E0(a3, 1, (uint64_t)&v28);
    if (DWORD2(v29) != 1) {
      sub_101AB9EEC();
    }
    double v19 = *v31;
    if (*v31 <= 0.0) {
      sub_101ABA3B8();
    }
    if (fabs(v19 + -1.0) <= v10)
    {
      sub_1000622DC((uint64_t)&v28, a3);
      sub_1001885FC(&v28, a2, 1);
      sub_100063168(a1 + 64, (uint64_t)&v28);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v18) <= 1)
      {
        LOWORD(v28) = 2;
        LOBYTE(v33) = 1;
        cnprint::CNPrinter::Print();
      }
      sub_1000622DC((uint64_t)&v33, a3);
      sub_1001885FC(&v33, a2, 1);
      uint64_t v30 = 0x100000002;
      int v28 = off_10232BE58;
      long long v29 = xmmword_101E0F9B0;
      unsigned int v31 = (double *)v32;
      sub_100061AC4((uint64_t)&v33, (uint64_t)&v28, 1.0 / v19);
      sub_100063168(a1 + 64, (uint64_t)&v28);
    }
  }
  *(_DWORD *)(a1 + 120) = 1;
  uint64_t v30 = 0x200000002;
  int v28 = off_10232C040;
  long long v29 = xmmword_101E0F9C0;
  unsigned int v31 = (double *)v32;
  if (a4(a5, &v28))
  {
    LOWORD(v33) = 2;
    LOBYTE(v23) = 4;
    cnprint::CNPrinter::Print();
    return 27;
  }
  else
  {
    BOOL v21 = sub_100173324(a1, a2, (uint64_t)&v28);
    if (v21)
    {
      uint64_t v35 = 0x100000002;
      long long v34 = xmmword_101E0F9B0;
      uint64_t v33 = off_10232BE58;
      double v36 = v37;
      sub_1001881E8((uint64_t)&v28, a1 + 64, (uint64_t)&v33);
      sub_100063168(a1 + 8, (uint64_t)&v33);
      uint64_t v25 = 0x100000002;
      int v23 = off_10232BE58;
      long long v24 = xmmword_101E0F9B0;
      int v26 = (double *)&v27;
      sub_1000629E0(a1 + 8, 1, (uint64_t)&v23);
      if (DWORD2(v24) != 1) {
        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
      }
      double v22 = 1.0 / *v26;
      uint64_t v35 = 0x100000002;
      long long v34 = xmmword_101E0F9B0;
      uint64_t v33 = off_10232BE58;
      double v36 = v37;
      sub_100061AC4(a1 + 8, (uint64_t)&v33, v22);
      sub_100063168(a1 + 8, (uint64_t)&v33);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v21) <= 1)
      {
        LOWORD(v33) = 2;
        LOBYTE(v23) = 1;
        cnprint::CNPrinter::Print();
      }
      return 28;
    }
  }
  return result;
}

double sub_1000629A4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_101ABA0A0();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_101ABA0CC();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_101ABA0F8();
  }
  return *(double *)(v2 + 8 * a2);
}

_DWORD *sub_1000629E0(uint64_t a1, int a2, uint64_t a3)
{
  if ((a2 - 3) <= 0xFFFFFFFD) {
    sub_101ABA124();
  }
  if (a2 == 1)
  {
    unsigned int v5 = *(_DWORD *)(a3 + 28);
    unsigned int v6 = *(_DWORD *)(a1 + 12);
    if (v5 < v6) {
      sub_101ABA150();
    }
    uint64_t result = sub_100062B3C((_DWORD *)a3, 1, v6);
    uint64_t v8 = *(unsigned int *)(a1 + 12);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a3 + 32);
      int v13 = 1;
      do
      {
        double v14 = *(double *)(v11 + 8 * (v10 * v9));
        uint64_t v15 = v10 - 1;
        unsigned int v16 = v13;
        if (v10 >= 2)
        {
          do
          {
            double v14 = v14 + *(double *)(v11 + 8 * v16++);
            --v15;
          }
          while (v15);
        }
        *(double *)(v12 + 8 * v9++) = v14;
        v13 += v10;
      }
      while (v9 != v8);
    }
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a3 + 24) < v17) {
      sub_101ABA17C();
    }
    uint64_t result = sub_100062B3C((_DWORD *)a3, v17, 1);
    uint64_t v18 = *(unsigned int *)(a1 + 8);
    if (v18)
    {
      double v19 = *(uint64_t **)(a1 + 32);
      unsigned int v20 = *(void **)(a3 + 32);
      uint64_t v21 = *(unsigned int *)(a1 + 8);
      do
      {
        uint64_t v22 = *v19++;
        *v20++ = v22;
        --v21;
      }
      while (v21);
    }
    unsigned int v23 = *(_DWORD *)(a1 + 12);
    if (v23 >= 2)
    {
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = *(double **)(a3 + 32);
      int v26 = 1;
      unsigned int v27 = v18;
      do
      {
        uint64_t v28 = v18;
        unsigned int v29 = v27;
        uint64_t v30 = v25;
        if (v18)
        {
          do
          {
            double *v30 = *(double *)(v24 + 8 * v29) + *v30;
            ++v30;
            ++v29;
            --v28;
          }
          while (v28);
        }
        ++v26;
        v27 += v18;
      }
      while (v26 != v23);
    }
  }
  return result;
}

_DWORD *sub_100062B3C(_DWORD *result, int a2, int a3)
{
  if (a2 < 0) {
    sub_101A7DA24();
  }
  if (result[6] < a2) {
    sub_101A7DA50();
  }
  if (a3 < 0) {
    sub_101A7DA7C();
  }
  if (result[7] < a3) {
    sub_101A7DAA8();
  }
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

void sub_100062B8C(uint64_t a1)
{
  *(void *)(a1 + 184) = *(void *)(a1 + 248);
  *(double *)(a1 + 192) = sub_10016C458();
  *(_DWORD *)uint64_t buf = 1;
  double v2 = sub_100062F0C(a1, (unsigned int *)buf);
  *(void *)(a1 + 200) = 0;
  *(double *)(a1 + 216) = v2;
  *(void *)(a1 + 208) = 0;
  if (v2 > 0.525 && v2 <= 0.7)
  {
    int64x2_t v3 = (int64x2_t)xmmword_101D8A880;
LABEL_16:
    *(int64x2_t *)(a1 + 200) = v3;
    goto LABEL_17;
  }
  if (v2 > 0.7 && v2 <= 0.9)
  {
    unint64_t v4 = 2;
LABEL_7:
    int64x2_t v3 = vdupq_n_s64(v4);
    goto LABEL_16;
  }
  if (v2 > 0.9 && v2 <= 1.0)
  {
    int64x2_t v3 = (int64x2_t)xmmword_101D94800;
    goto LABEL_16;
  }
  if (v2 > 0.3 && v2 <= 0.45)
  {
    unint64_t v4 = 1;
    goto LABEL_7;
  }
  if (v2 > 0.1 && v2 <= 0.3)
  {
    int64x2_t v3 = (int64x2_t)xmmword_101DAB7E0;
    goto LABEL_16;
  }
  BOOL v15 = v2 > 0.1 || v2 <= 0.0;
  double v16 = fabs(v2);
  if (!v15 || v16 < 2.22044605e-16)
  {
    int64x2_t v3 = (int64x2_t)xmmword_101DAB7D0;
    goto LABEL_16;
  }
LABEL_17:
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  unsigned int v6 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 184);
    uint64_t v8 = *(void *)(a1 + 192);
    uint64_t v9 = *(void *)(a1 + 200);
    uint64_t v10 = *(void *)(a1 + 208);
    int v11 = *(unsigned __int8 *)(a1 + 232);
    uint64_t v12 = *(void *)(a1 + 216);
    uint64_t v13 = *(void *)(a1 + 224);
    uint64_t v14 = *(void *)(a1 + 248);
    *(_DWORD *)uint64_t buf = 134219777;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 2049;
    uint64_t v24 = v9;
    __int16 v25 = 2049;
    uint64_t v26 = v10;
    __int16 v27 = 2049;
    uint64_t v28 = v12;
    __int16 v29 = 1025;
    int v30 = v11;
    __int16 v31 = 2049;
    uint64_t v32 = v13;
    __int16 v33 = 2048;
    uint64_t v34 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_updateOutdoorEstimate,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::updateOutdoorEstimate()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
}

double sub_100062F0C(uint64_t a1, unsigned int *a2)
{
  if (*(unsigned char *)(a1 + 240))
  {
    sub_1000630D0(a1, (uint64_t)buf);
    return *(double *)sub_100062264((uint64_t)buf, *a2);
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    unint64_t v4 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,getStateProbability(),HMM Not initialized", buf, 2u);
    }
    double v3 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "double CLOutdoorEstimator::getStateProbability(const CLOutdoorEstimator_Type::OutdoorEstimatorHiddenStates &) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3;
}

double sub_1000630D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000002;
  *(void *)a2 = off_10232BE58;
  *(_OWORD *)(a2 + 8) = xmmword_101E0F9B0;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 120)) {
    uint64_t v2 = a1 + 64;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_100063168(a2, v2).n128_u64[0];
  return result;
}

void sub_100063148(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

__n128 sub_100063168(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 24) < v2) {
      sub_101A7DAD4();
    }
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a1 + 28) < v3) {
      sub_101A7DB00();
    }
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    uint64_t v4 = v3 * v2;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v10 = *(_OWORD **)(a1 + 32);
      int v11 = *(long long **)(a2 + 32);
      uint64_t v12 = (__n128 *)((char *)v10 + 8 * (v5 - 2));
      uint64_t v13 = (__n128 *)((char *)v11 + 8 * (v5 - 2));
      uint64_t v14 = (v5 - 1) >> 1;
      do
      {
        long long v15 = *v11++;
        *v10++ = v15;
        --v14;
      }
      while (v14);
      __n128 result = *v13;
      *uint64_t v12 = *v13;
    }
    else if ((int)v4 >= 1)
    {
      unsigned int v6 = *(unint64_t **)(a2 + 32);
      uint64_t v7 = *(unint64_t **)(a1 + 32);
      do
      {
        unint64_t v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_10006328C(uint64_t a1)
{
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clientKeyToClientInfoMap"), "objectForKeyedSubscript:", *(void *)(a1 + 40)))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10232B450);
    }
    unsigned int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      id v3 = [*(id *)(a1 + 40) UTF8String];
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Zonal client trying to access auth-context via Non-Zonal CLCAC api\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232B450);
      }
    }
    uint64_t v4 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v5 = [*(id *)(a1 + 40) UTF8String];
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      id v12 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Zonal client trying to access auth-context via Non-Zonal CLCAC api", "{\"msg%{public}.0s\":\"Zonal client trying to access auth-context via Non-Zonal CLCAC api\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), [objc_msgSend(*(id *)(a1 + 32), "clientKeyToAuthContextMap") objectForKeyedSubscript:*(void *)(a1 + 40)]);
}

void sub_100063720(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonInUseAssertion::handleMessageInUseAssertion", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301180);
  }
  id v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = *a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    *(_WORD *)&unsigned char buf[28] = 2050;
    *(void *)&buf[30] = a1;
    *(_WORD *)&unsigned char buf[38] = 2050;
    long long v56 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonInUseAssertion::handleMessageInUseAssertion\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"message\":\"%{public}p\"}", buf, 0x30u);
  }
  if (*(void *)(a1 + 32))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301180);
    }
    int v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
      int v8 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)char v49 = 136446210;
      *(void *)&v49[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#warning InUseAssertion already taken by %{public}s", v49, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(v49, a1);
      if (v50[0] >= 0) {
        __int16 v9 = v49;
      }
      else {
        __int16 v9 = *(uint8_t **)v49;
      }
      LODWORD(v48.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v50[0]) < 0) {
        operator delete(*(void **)v49);
      }
LABEL_22:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
LABEL_68:
      if (v10 != buf) {
        free(v10);
      }
      goto LABEL_159;
    }
    goto LABEL_159;
  }
  sub_100134750(buf, "com.apple.locationd.usage_oracle");
  char v11 = sub_10001B20C(a1, (uint64_t *)buf);
  char v12 = v11;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v12) {
      goto LABEL_25;
    }
  }
  else if (v11)
  {
LABEL_25:
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    id v14 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
    id v15 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
    id v16 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
    id v17 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageAssertionLevelKey"];
    if (!v14 || !v15 || !v16 || (uint64_t v18 = v17) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      __int16 v23 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
        uint64_t v24 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)char v49 = 136446210;
        *(void *)&v49[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument", v49, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102301180);
        }
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(v49, a1);
        if (v50[0] >= 0) {
          __int16 v25 = v49;
        }
        else {
          __int16 v25 = *(uint8_t **)v49;
        }
        LODWORD(v48.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v50[0]) < 0) {
          operator delete(*(void **)v49);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
        goto LABEL_68;
      }
      goto LABEL_159;
    }
    memset(v52, 0, 35);
    long long v51 = 0u;
    *(_OWORD *)char v49 = 0u;
    memset(v50, 0, sizeof(v50));
    long long v53 = 0u;
    memset(v54, 0, 59);
    if ([v14 length])
    {
      sub_100134750(&v48, (char *)[v14 UTF8String]);
      sub_1000B7144(&v48, (uint64_t)buf);
      if (SHIBYTE(v50[0]) < 0) {
        operator delete(*(void **)v49);
      }
      long long v19 = *(_OWORD *)buf;
    }
    else
    {
      sub_100134750(&v48, (char *)[v15 UTF8String]);
      sub_1000B6F5C(&v48, (uint64_t)buf);
      if (SHIBYTE(v50[0]) < 0) {
        operator delete(*(void **)v49);
      }
      long long v19 = *(_OWORD *)buf;
    }
    *(_OWORD *)char v49 = v19;
    v50[0] = *(void *)&buf[16];
    buf[23] = 0;
    buf[0] = 0;
    if (SHIBYTE(v50[3]) < 0) {
      operator delete((void *)v50[1]);
    }
    *(_OWORD *)&v50[1] = *(_OWORD *)&buf[24];
    v50[3] = v56;
    HIBYTE(v56) = 0;
    unsigned char buf[24] = 0;
    if (SHIBYTE(v52[0]) < 0) {
      operator delete((void *)v51);
    }
    long long v51 = v57;
    v52[0] = v58;
    HIBYTE(v58) = 0;
    LOBYTE(v57) = 0;
    if (SHIBYTE(v52[3]) < 0) {
      operator delete((void *)v52[1]);
    }
    *(_OWORD *)&v52[1] = v59;
    v52[3] = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    LOWORD(v52[4]) = v61;
    BYTE2(v52[4]) = v62;
    if (SBYTE7(v54[0]) < 0) {
      operator delete((void *)v53);
    }
    long long v53 = v63;
    *(void *)&v54[0] = v64;
    HIBYTE(v64) = 0;
    LOBYTE(v63) = 0;
    if (SHIBYTE(v54[1]) < 0) {
      operator delete(*((void **)&v54[0] + 1));
    }
    char v26 = 0;
    *(_OWORD *)((char *)v54 + 8) = v65;
    *((void *)&v54[1] + 1) = v66;
    HIBYTE(v66) = 0;
    LOBYTE(v65) = 0;
    if (SBYTE7(v54[3]) < 0)
    {
      operator delete(*(void **)&v54[2]);
      char v26 = HIBYTE(v66);
    }
    v54[2] = v67;
    *(void *)&v54[3] = v68;
    HIBYTE(v68) = 0;
    LOBYTE(v67) = 0;
    WORD4(v54[3]) = v69;
    BYTE10(v54[3]) = v70;
    if (v26 < 0) {
      operator delete((void *)v65);
    }
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v60) < 0) {
      operator delete((void *)v59);
    }
    if (SHIBYTE(v58) < 0) {
      operator delete((void *)v57);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    sub_1000A84C8((uint64_t)v49);
    uint64_t v27 = BYTE7(v54[0]);
    if (SBYTE7(v54[0]) < 0) {
      uint64_t v27 = *((void *)&v53 + 1);
    }
    if (v27) {
      goto LABEL_171;
    }
    uint64_t v28 = HIBYTE(v52[0]);
    if (v52[0] < 0) {
      uint64_t v28 = *((void *)&v51 + 1);
    }
    if (v28)
    {
LABEL_171:
      if ([v16 length])
      {
        unsigned int v29 = [v18 intValue];
        if (v29 >= 3)
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_102301180);
          }
          std::string v37 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
          {
            unsigned int v38 = [v18 intValue];
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&unsigned char buf[18] = 1026;
            *(_DWORD *)&buf[20] = v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Received invalid assertion level\", \"assertionLevel\":%{public}d}", buf, 0x18u);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_102301180);
            }
          }
          double v39 = qword_102419528;
          if (os_signpost_enabled((os_log_t)qword_102419528))
          {
            unsigned int v40 = [v18 intValue];
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&unsigned char buf[18] = 1026;
            *(_DWORD *)&buf[20] = v40;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Received invalid assertion level", "{\"msg%{public}.0s\":\"#CLIUA Received invalid assertion level\", \"assertionLevel\":%{public}d}", buf, 0x18u);
          }
        }
        else
        {
          uint64_t v30 = dword_101D95688[v29];
          id v31 = [[objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLClientManager"];
          [v31 registerDelegate:*(void *)(a1 + 24) inSilo:[*(id *)(a1 + 16) silo]];
          sub_1000A7FBC((uint64_t)v49, (uint64_t)buf);
          if (buf[23] >= 0) {
            uint64_t v32 = buf;
          }
          else {
            uint64_t v32 = *(unsigned char **)buf;
          }
          v44[0] = _NSConcreteStackBlock;
          v44[1] = 3221225472;
          void v44[2] = sub_10017A430;
          v44[3] = &unk_102301148;
          v44[4] = a1;
          [v31 takeInUseAssertionForClientKey:[NSString stringWithUTF8String:v32] reason:[NSString stringWithUTF8String:objc_msgSend(v16, "UTF8String")] assertionLevel:v30 withReply:v44];
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
LABEL_145:
        if (SBYTE7(v54[3]) < 0) {
          operator delete(*(void **)&v54[2]);
        }
        if (SHIBYTE(v54[1]) < 0) {
          operator delete(*((void **)&v54[0] + 1));
        }
        if (SBYTE7(v54[0]) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v52[3]) < 0) {
          operator delete((void *)v52[1]);
        }
        if (SHIBYTE(v52[0]) < 0) {
          operator delete((void *)v51);
        }
        if (SHIBYTE(v50[3]) < 0) {
          operator delete((void *)v50[1]);
        }
        if (SHIBYTE(v50[0]) < 0) {
          operator delete(*(void **)v49);
        }
        goto LABEL_159;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      __int16 v33 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
        uint64_t v34 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        LODWORD(v48.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s", (uint8_t *)&v48, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_145;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v48, a1);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v48;
      }
      else {
        uint64_t v35 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      int v46 = 136446210;
      __int16 v47 = v35;
      double v36 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      double v41 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
        double v42 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        LODWORD(v48.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s", (uint8_t *)&v48, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_145;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v48, a1);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v43 = &v48;
      }
      else {
        __int16 v43 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      int v46 = 136446210;
      __int16 v47 = v43;
      double v36 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
    goto LABEL_145;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301180);
  }
  uint64_t v20 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
    __int16 v21 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)char v49 = 136446210;
    *(void *)&v49[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s", v49, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301180);
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(v49, a1);
    if (v50[0] >= 0) {
      uint64_t v22 = v49;
    }
    else {
      uint64_t v22 = *(uint8_t **)v49;
    }
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v50[0]) < 0) {
      operator delete(*(void **)v49);
    }
    goto LABEL_22;
  }
LABEL_159:
  os_activity_scope_leave(&state);
}

void sub_1000647E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
}

uint64_t sub_1000649C0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1000650B8(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100064A74(uint64_t a1, int a2, int *a3, uint64_t **a4)
{
  int v39 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)unsigned int v40 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          unsigned int v29 = (uint64_t *)v25;
        }
        else {
          unsigned int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v38 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        *(void *)&buf[0] = &v39;
        sub_1000FEE0C((uint64_t **)(v26 + 40), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = *a4;
        memset(buf, 0, 192);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100064FE4();
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v38 = a1 + 64;
        char v30 = byte_10241CCF8;
        int v37 = v17;
        *(void *)&buf[0] = &v37;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v37 = *a3;
        *(void *)&buf[0] = &v37;
        id v31 = sub_10044715C((uint64_t **)(a1 + 56), &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        int v37 = *a3;
        *(void *)&buf[0] = &v37;
        __int16 v33 = sub_10044715C((uint64_t **)(a1 + 56), &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v39;
        sub_1000FEE0C(v33 + 5, &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = *a4;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v40 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BDF28);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    id v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      id v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    uint64_t v35 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v35 = (void *)*v35;
    }
    *(_DWORD *)unsigned int v40 = 136446466;
    *(void *)&v40[4] = v35;
    __int16 v41 = 1026;
    int v42 = a2;
    double v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100064F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241CCF0);
}

uint64_t sub_100064F5C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      uint64_t v10 = (uint64_t *)v4;
    }
    else {
      uint64_t v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[1];
  long long v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  long long v15 = v11[4];
  long long v16 = v11[5];
  long long v17 = v11[7];
  a3[6] = v11[6];
  a3[7] = v17;
  a3[4] = v15;
  a3[5] = v16;
  long long v18 = v11[8];
  long long v19 = v11[9];
  long long v20 = v11[11];
  a3[10] = v11[10];
  a3[11] = v20;
  a3[8] = v18;
  a3[9] = v19;
  return 1;
}

void sub_100064FE4()
{
}

id sub_1000650B8(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1005E50F8(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1005E5484(a1);
    }
    else
    {
      return 0;
    }
  }
}

void *sub_100065154(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(void *)a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  BOOL v9 = (char *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)v9 + 16 * v7;
  }
  double v36 = (char **)v9;
  int v37 = (char *)v10;
  if (v10 == a3) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - v9) - ((v10 - *(void *)v9) >> 4);
  }
  long long v12 = (char **)sub_1000D9B0C((uint64_t)&v36, v11);
  v35.n128_u64[0] = (unint64_t)v12;
  v35.n128_u64[1] = (unint64_t)v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      long long v20 = v12;
      uint64_t v21 = v13;
      int v22 = v36;
      BOOL v23 = v37;
      uint64_t v24 = sub_1000D9B0C((uint64_t)&v35, v6);
      sub_100474218(v22, v23, v20, v21, v24, v25, &v38);
      uint64_t v26 = v37;
      if (v37 != v39)
      {
        int v27 = v36;
        do
        {
          v26 += 16;
          int v37 = v26;
          if (v26 - *v27 == 4096)
          {
            BOOL v28 = v27[1];
            ++v27;
            uint64_t v26 = v28;
            double v36 = v27;
            int v37 = v28;
          }
        }
        while (v26 != v39);
      }
      uint64_t v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
      while ((sub_100096314((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      long long v14 = (char **)sub_1000D9B0C((uint64_t)&v35, v6);
      unint64_t v16 = a1[4] + a1[5];
      uint64_t v17 = a1[1];
      long long v18 = (char **)(v17 + 8 * (v16 >> 8));
      if (a1[2] == v17) {
        long long v19 = 0;
      }
      else {
        long long v19 = &(*v18)[16 * v16];
      }
      __n128 v38 = v35;
      sub_1000D9B68(v14, v15, v18, v19, (uint64_t)&v38);
      a1[5] -= v6;
      while ((sub_100446B90(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v30 = a1[4];
  uint64_t v31 = a1[1];
  uint64_t v32 = (void *)(v31 + 8 * (v30 >> 8));
  if (a1[2] == v31) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *v32 + 16 * v30;
  }
  v38.n128_u64[0] = (unint64_t)v32;
  v38.n128_u64[1] = v33;
  return sub_1000D9B0C((uint64_t)&v38, v11);
}

BOOL sub_100065380(uint64_t a1, int a2, float a3, double a4)
{
  memset(&v51, 0, sizeof(v51));
  double v8 = *(double *)(a1 + 160);
  double v9 = *(double *)&qword_102475AE8;
  BOOL v10 = sub_100065EE8(*(void *)(a1 + 96), a4, *(double *)&qword_102475AE8);
  double v11 = *(double *)&qword_102475AF0;
  double v12 = vabdd_f64(a4, v8);
  if (sub_100065F70(a1))
  {
    long long v13 = "InProgress";
LABEL_48:
    std::string::assign(&v51, v13);
    LODWORD(v16) = 0;
    BOOL v21 = 0;
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 168))
  {
LABEL_4:
    BOOL v14 = sub_10014548C(a1);
    if (v12 >= v11 && v14)
    {
      BOOL v16 = sub_101045914(a1, a2, a4, a3);
      if (v16)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        uint64_t v17 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
          long long v18 = v55 >= 0 ? __p : *(unsigned char **)__p;
          double v19 = vabdd_f64(a4, *(double *)(a1 + 176));
          int v20 = *(_DWORD *)(a1 + 200);
          *(_DWORD *)uint64_t buf = 136381187;
          *(void *)&uint8_t buf[4] = v18;
          __int16 v78 = 2050;
          double v79 = v19;
          __int16 v80 = 1024;
          LODWORD(v81) = v20;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, expirationAge, %d", buf, 0x1Cu);
          if (SHIBYTE(v55) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CB28);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v73, a1);
          if (v76 >= 0) {
            long long v45 = v73;
          }
          else {
            long long v45 = *(unsigned char **)v73;
          }
          double v46 = vabdd_f64(a4, *(double *)(a1 + 176));
          int v47 = *(_DWORD *)(a1 + 200);
          *(_DWORD *)std::string __p = 136381187;
          *(void *)&__p[4] = v45;
          __int16 v53 = 2050;
          double v54 = v46;
          __int16 v55 = 1024;
          LODWORD(v56) = v47;
          std::string v48 = (char *)_os_log_send_and_compose_impl();
          if (v76 < 0) {
            operator delete(*(void **)v73);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v48);
          if (v48 != buf) {
            free(v48);
          }
        }
      }
      std::string::assign(&v51, "Aged");
      BOOL v21 = v16;
      goto LABEL_49;
    }
    if (*(unsigned char *)(a1 + 168) && !sub_10014548C(a1))
    {
      BOOL v21 = v12 >= 1209600.0;
      if (v12 >= 1209600.0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        uint64_t v26 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
          int v27 = v55 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)uint64_t buf = 136381187;
          *(void *)&uint8_t buf[4] = v27;
          __int16 v78 = 2050;
          double v79 = v12;
          __int16 v80 = 1026;
          LODWORD(v81) = 1209600;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, sinceLastDownload, %{public}.1lf, %{public}d, needs to be refreshed, TileDoesNotExistOnTheServer", buf, 0x1Cu);
          if (SHIBYTE(v55) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CB28);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v73, a1);
          if (v76 >= 0) {
            char v49 = v73;
          }
          else {
            char v49 = *(unsigned char **)v73;
          }
          *(_DWORD *)std::string __p = 136381187;
          *(void *)&__p[4] = v49;
          __int16 v53 = 2050;
          double v54 = v12;
          __int16 v55 = 1026;
          LODWORD(v56) = 1209600;
          int v50 = (char *)_os_log_send_and_compose_impl();
          if (v76 < 0) {
            operator delete(*(void **)v73);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v50);
          if (v50 != buf) {
            free(v50);
          }
        }
      }
      std::string::assign(&v51, "DoesntExist");
      LODWORD(v16) = 0;
LABEL_49:
      if (*(unsigned char *)(a1 + 240) == 65 && !v21) {
        goto LABEL_58;
      }
      goto LABEL_51;
    }
LABEL_47:
    long long v13 = "Empty";
    goto LABEL_48;
  }
  BOOL v22 = sub_10014548C(a1);
  BOOL v23 = v12 >= v9 && v22;
  if (!v23 || !v10)
  {
    if (!*(unsigned char *)(a1 + 168)) {
      goto LABEL_47;
    }
    goto LABEL_4;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v24 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(buf, a1);
    uint64_t v25 = v80 >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)std::string __p = 136380931;
    *(void *)&__p[4] = v25;
    __int16 v53 = 2050;
    double v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry", __p, 0x16u);
    if (SHIBYTE(v80) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if (v55 >= 0) {
      __int16 v43 = __p;
    }
    else {
      __int16 v43 = *(unsigned char **)__p;
    }
    *(_DWORD *)double v73 = 136380931;
    *(void *)&v73[4] = v43;
    __int16 v74 = 2050;
    double v75 = v12;
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v55) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v44);
    if (v44 != buf) {
      free(v44);
    }
  }
  std::string::assign(&v51, "1st/Re-Try");
  LODWORD(v16) = 0;
  BOOL v21 = 1;
LABEL_51:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  BOOL v28 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v29 = sub_100147F50(*(_DWORD *)(a1 + 48));
    double v30 = sub_10013DAC0(a1 + 48);
    double v31 = sub_10013DA9C(a1 + 48);
    int v32 = *(unsigned __int8 *)(a1 + 168);
    BOOL v33 = sub_10014548C(a1);
    uint64_t v34 = &v51;
    *(_DWORD *)uint64_t buf = 136448771;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v34 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    *(void *)&uint8_t buf[4] = v29;
    __int16 v78 = 2049;
    double v79 = v30;
    __int16 v80 = 2049;
    double v81 = v31;
    __int16 v82 = 1026;
    int v83 = v32;
    __int16 v84 = 1026;
    BOOL v85 = v33;
    __int16 v86 = 2050;
    double v87 = v12;
    __int16 v88 = 1026;
    BOOL v89 = v12 >= v9;
    __int16 v90 = 1026;
    BOOL v91 = v10;
    __int16 v92 = 1026;
    BOOL v93 = v12 >= v11;
    __int16 v94 = 1026;
    BOOL v95 = v16;
    __int16 v96 = 2081;
    double v97 = v34;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expired, %{public}d, path, %{private}s", buf, 0x58u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    double v36 = sub_100147F50(*(_DWORD *)(a1 + 48));
    double v37 = sub_10013DAC0(a1 + 48);
    double v38 = sub_10013DA9C(a1 + 48);
    int v39 = *(unsigned __int8 *)(a1 + 168);
    BOOL v40 = sub_10014548C(a1);
    __int16 v41 = &v51;
    *(_DWORD *)std::string __p = 136448771;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v41 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    *(void *)&__p[4] = v36;
    __int16 v53 = 2049;
    double v54 = v37;
    __int16 v55 = 2049;
    double v56 = v38;
    __int16 v57 = 1026;
    int v58 = v39;
    __int16 v59 = 1026;
    BOOL v60 = v40;
    __int16 v61 = 2050;
    double v62 = v12;
    __int16 v63 = 1026;
    BOOL v64 = v12 >= v9;
    __int16 v65 = 1026;
    BOOL v66 = v10;
    __int16 v67 = 1026;
    BOOL v68 = v12 >= v11;
    __int16 v69 = 1026;
    BOOL v70 = v16;
    __int16 v71 = 2081;
    double v72 = v41;
    int v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v42);
    if (v42 != buf) {
      free(v42);
    }
  }
LABEL_58:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  return v21;
}

void sub_100065E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100065EE8(uint64_t a1, double a2, double a3)
{
  [*(id *)a1 assertInside];
  double v6 = *(double *)(a1 + 8);
  BOOL result = 1;
  if (v6 != -1.0 && a2 - v6 < 900.0) {
    return v6
  }
         + a3
         + (double)(unint64_t)(*(void *)(a1 + 16) - 1)
         * (double)(unint64_t)(*(void *)(a1 + 16) - 1)
         * 30.0 <= a2;
  return result;
}

BOOL sub_100065F70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(void *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3 != 0;
}

void sub_100065FF4(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v75 = 1024;
        LODWORD(v76) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLAppMonitor_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)BOOL v70 = 67109376;
      *(_DWORD *)&v70[4] = v16;
      *(_WORD *)&v70[8] = 1024;
      *(_DWORD *)&v70[10] = v18;
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v70);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v60);
    sub_100165AD4((uint64_t)v70, a2, a3, a4, (uint64_t *)v60);
    v73 |= 2u;
    uint64_t v28 = v72;
    if (!v72) {
      operator new();
    }
    *(_DWORD *)(v72 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x8000u;
    uint64_t v30 = *(void *)(v29 + 120);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + 8) = v31;
    unsigned int v32 = sub_1001972E4(a6);
    if (!sub_1001A4C58(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8605, "::CLP::LogEntry::PrivateData::AppMonitorNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 28) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    *(_DWORD *)(v34 + 20) |= 1u;
    __n128 v35 = *(std::string **)(v34 + 8);
    if (v35 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v35, (const std::string *)(a7 + 8));
    int v36 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v37 = v36;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      double v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v61);
        if (SBYTE3(v63) >= 0) {
          int v39 = v61;
        }
        else {
          int v39 = *(unsigned char **)v61;
        }
        LODWORD(v53[0]) = a3->i32[0];
        sub_101522E48((int *)v53, v58);
        if (v59 >= 0) {
          BOOL v40 = v58;
        }
        else {
          BOOL v40 = (void **)v58[0];
        }
        int v55 = *a4;
        __int16 v41 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          __int16 v41 = (void **)__p[0];
        }
        int v42 = *a6;
        uint64_t v43 = sub_10016BA10();
        double v44 = sub_10018202C(v43);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v37;
        __int16 v75 = 2080;
        char v76 = v39;
        __int16 v77 = 2080;
        __int16 v78 = v40;
        __int16 v79 = 2080;
        __int16 v80 = v41;
        __int16 v81 = 1024;
        int v82 = v42;
        __int16 v83 = 2050;
        double v84 = v44;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLAppMonitor_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (SBYTE3(v63) < 0) {
          operator delete(*(void **)v61);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v58);
        if (v59 >= 0) {
          long long v45 = v58;
        }
        else {
          long long v45 = (void **)v58[0];
        }
        int v55 = a3->i32[0];
        double v46 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          double v46 = (void **)__p[0];
        }
        int v52 = *a4;
        sub_101522E48(&v52, v53);
        if (v54 >= 0) {
          int v47 = v53;
        }
        else {
          int v47 = (void **)v53[0];
        }
        int v48 = *a6;
        uint64_t v49 = sub_10016BA10();
        double v50 = sub_10018202C(v49);
        *(_DWORD *)__int16 v61 = 67110402;
        *(_DWORD *)&v61[4] = v37;
        *(_WORD *)&v61[8] = 2080;
        *(void *)&v61[10] = v45;
        __int16 v62 = 2080;
        __int16 v63 = v46;
        __int16 v64 = 2080;
        __int16 v65 = v47;
        __int16 v66 = 1024;
        int v67 = v48;
        __int16 v68 = 2050;
        double v69 = v50;
        std::string v51 = (char *)_os_log_send_and_compose_impl();
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v51);
        if (v51 != (char *)&buf) {
          free(v51);
        }
      }
    }
    sub_1001687EC(v70);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    int v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      BOOL v21 = SBYTE3(v78) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)BOOL v70 = 136315138;
      *(void *)&v70[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLAppMonitor_Type,unsupported message type,%s", v70, 0xCu);
      if (SBYTE3(v78) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v70);
      if (v71 >= 0) {
        BOOL v22 = v70;
      }
      else {
        BOOL v22 = *(uint8_t **)v70;
      }
      *(_DWORD *)__int16 v61 = 136315138;
      *(void *)&v61[4] = v22;
      double v19 = (char *)_os_log_send_and_compose_impl();
      if (v71 < 0) {
        operator delete(*(void **)v70);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1000668E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_100066A04(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 - 1) >= 3)
  {
    if (*a3 == 4)
    {
      *(_DWORD *)(a1 + 184) = *(_DWORD *)a4;
      std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a4 + 8));
      std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a4 + 32));
      std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a4 + 56));
      std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a4 + 80));
      *(_WORD *)(a1 + 288) = *(_WORD *)(a4 + 104);
    }
    return;
  }
  uint64_t v6 = *(unsigned __int8 *)(a4 + 31);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a4 + 31);
  }
  else {
    uint64_t v7 = *(void *)(a4 + 16);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 215);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 200);
  }
  if (v7 != v8) {
    return;
  }
  BOOL v10 = (const void **)(a4 + 8);
  int v12 = (void *)(a1 + 192);
  BOOL v11 = *(void **)(a1 + 192);
  if (v9 >= 0) {
    BOOL v13 = (unsigned __int8 *)(a1 + 192);
  }
  else {
    BOOL v13 = *(unsigned __int8 **)(a1 + 192);
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v13, *(void *)(a4 + 16))) {
      return;
    }
    goto LABEL_19;
  }
  if (!*(unsigned char *)(a4 + 31))
  {
LABEL_19:
    *(_DWORD *)(a1 + 184) = -1;
    if (v9 < 0) {
      operator delete(v11);
    }
    int v14 = (void **)(a1 + 216);
    *int v12 = 0;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    if (*(char *)(a1 + 239) < 0) {
      operator delete(*v14);
    }
    BOOL v15 = (void **)(a1 + 240);
    NSObject *v14 = 0;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    if (*(char *)(a1 + 263) < 0) {
      operator delete(*v15);
    }
    BOOL v16 = (void **)(a1 + 264);
    char *v15 = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    if (*(char *)(a1 + 287) < 0) {
      operator delete(*v16);
    }
    *BOOL v16 = 0;
    *(void *)(a1 + 272) = 0;
    *(_WORD *)(a1 + 288) = 0;
    *(void *)(a1 + 280) = 0;
    return;
  }
  while (*(unsigned __int8 *)v10 == *v13)
  {
    BOOL v10 = (const void **)((char *)v10 + 1);
    ++v13;
    if (!--v6) {
      goto LABEL_19;
    }
  }
}

void sub_100066B7C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 != 7)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    BOOL v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v39) = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "BaroAlt,received other odometer notification,type,%{public}d,", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_48:
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
      return;
    }
LABEL_83:
    dispatch_once(&qword_102419380, &stru_102345560);
    goto LABEL_48;
  }
  double v6 = sub_10016C458();
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(double *)(a4 + 8);
    int v9 = *(_DWORD *)(a4 + 16);
    int v10 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)uint64_t buf = 134349824;
    double v39 = v8;
    __int16 v40 = 1026;
    *(_DWORD *)__int16 v41 = v9;
    *(_WORD *)&void v41[4] = 1026;
    *(_DWORD *)&v41[6] = v10;
    *(_WORD *)int v42 = 2050;
    *(double *)&v42[2] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,received odometer update entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u,now,%{public}.lf", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (!*(unsigned char *)(a1 + 520))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v25 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,do not expect to receive kNotificationOdometerUpdateElevationSpectator", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    sub_1019134F8(a1);
    return;
  }
  if ((*(void *)(a4 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a4 + 8) < 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v26 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      double v27 = *(double *)(a4 + 8);
      int v28 = *(_DWORD *)(a4 + 16);
      int v29 = *(_DWORD *)(a4 + 20);
      *(_DWORD *)uint64_t buf = 134349568;
      double v39 = v27;
      __int16 v40 = 1026;
      *(_DWORD *)__int16 v41 = v28;
      *(_WORD *)&void v41[4] = 1026;
      *(_DWORD *)&v41[6] = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,received invalid elevation entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_48;
    }
    goto LABEL_83;
  }
  double v11 = v6 - *(double *)(a1 + 1224);
  *(double *)(a1 + 1224) = v6;
  int v12 = (unsigned __int16 *)(a1 + 528);
  if (v11 < 0.0 || v11 > 43200.0)
  {
    sub_1008AFE94((uint64_t)v12);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v31 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      double v39 = v11;
      __int16 v40 = 2050;
      *(double *)__int16 v41 = v6;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "BaroAlt,reset fSignificantElevationEstimator for invalid %.lf s gap in odometer feed,now,%{public}.lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    *(void *)(a1 + 472) = 0;
    *(_OWORD *)(a1 + 480) = xmmword_101D1C320;
    return;
  }
  sub_1001952B8(v12, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), 0, *(double *)(a4 + 8));
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  BOOL v13 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    double v14 = *(double *)(a4 + 8);
    int v15 = *(_DWORD *)(a4 + 16);
    int v16 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)uint64_t buf = 134349568;
    double v39 = v14;
    __int16 v40 = 1026;
    *(_DWORD *)__int16 v41 = v15;
    *(_WORD *)&void v41[4] = 1026;
    *(_DWORD *)&v41[6] = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,fed to significant elevation estimator,startTime,%{public}.3f,ascended,%{public}d,descended,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __n128 v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  double v17 = *(double *)(a1 + 1056);
  double v18 = *(double *)(a1 + 1064);
  unsigned int v19 = *(_DWORD *)(a1 + 1072);
  unsigned int v20 = *(_DWORD *)(a1 + 1076);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  BOOL v21 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349824;
    double v39 = v17;
    __int16 v40 = 2050;
    *(double *)__int16 v41 = v18;
    *(_WORD *)&_OWORD v41[8] = 1026;
    *(_DWORD *)int v42 = v19;
    *(_WORD *)&v42[4] = 1026;
    *(_DWORD *)&v42[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BaroAlt,newSigElvRelAlt,startTime,%{public}.3f,endTime,%{public}.3f,ascended,%{public}d,descended,%{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  if (fabs(v17) >= 2.22044605e-16
    && (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && fabs(v18) >= 2.22044605e-16
    && (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    if (v18 > 0.0 && v18 - *(double *)(a1 + 1232) > 2.22044605e-16) {
      *(double *)(a1 + 1240) = ((double)v19 - (double)v20) / 100.0;
    }
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  unsigned int v32 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "BaroAlt,lastRelAlt,uninitialized significant elevation data received", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_48;
    }
    goto LABEL_83;
  }
}

id sub_100067788(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  double v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = [a3 pid];
    id v10 = [[[a3 bundle] identifier];
    [objc_msgSend(a4, "state") taskState];
    v12[0] = 68289794;
    v12[1] = 0;
    __int16 v13 = 2082;
    double v14 = "";
    __int16 v15 = 1026;
    unsigned int v16 = v9;
    __int16 v17 = 2114;
    id v18 = v10;
    __int16 v19 = 2050;
    uint64_t v20 = [[[a4 state] taskState];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"RBS #AppMonitor process monitor update handler invoked\", \"pid\":%{public}d, \"bundleID\":%{public, location:escape_only}@, \"state\":%{public, location:RBSTaskState}lld}", (uint8_t *)v12, 0x2Cu);
  }
  return [*(id *)(a1 + 32) onApplicationStateMonitor:a2 didUpdate:a4 forProcess:a3];
}

id sub_1000678F8(const void *a1, int a2, void *a3, uint64_t a4)
{
  CFRetain(a1);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100077B5C;
  v9[3] = &unk_1022EDA30;
  void v9[5] = a4;
  v9[6] = a1;
  int v10 = a2;
  v9[4] = a3;
  return [objc_msgSend(objc_msgSend(a3, "silo"), "async:", v9);
}

void sub_1000679DC(void *a1, uint64_t a2, unsigned int *a3, int *a4, void *a5)
{
  if (a5)
  {
    [a5 cppClientKey];
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v31 = 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
  double v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = (int *)*a3;
    int v10 = *a4;
    if (*((char *)a4 + 31) >= 0) {
      double v11 = a4 + 2;
    }
    else {
      double v11 = (int *)*((void *)a4 + 1);
    }
    int v12 = __p;
    if (v31 < 0) {
      int v12 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v33 = 2082;
    uint64_t v34 = "";
    __int16 v35 = 2050;
    int v36 = v9;
    __int16 v37 = 1026;
    *(_DWORD *)double v38 = v10;
    *(_WORD *)&void v38[4] = 2082;
    *(void *)&v38[6] = v11;
    __int16 v39 = 2082;
    __int16 v40 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA AppMonitor notification\", \"notification\":%{public, location:CLAppMonitor_Type::Notification}lld, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s}", buf, 0x36u);
  }
  switch(*a3)
  {
    case 1u:
      sub_100C648DC(a1 + 10, (unsigned __int8 *)a4 + 8);
      goto LABEL_26;
    case 2u:
    case 3u:
    case 6u:
      __int16 v13 = sub_100103284(a1 + 10, (unsigned __int8 *)a4 + 8);
      if (v13)
      {
        sub_100134750(buf, "Decaying in-use status from process state");
        sub_100C63D40((uint64_t)a1, __p, (uint64_t)buf);
        if (SBYTE3(v36) < 0) {
          operator delete(*(void **)buf);
        }
        sub_10017FA3C(a1 + 10, v13, (uint64_t)buf);
        sub_10017FCC0((uint64_t)buf, 0);
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EFDD0);
        }
        uint64_t v14 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a4 + 31) >= 0) {
            __int16 v15 = a4 + 2;
          }
          else {
            __int16 v15 = (int *)*((void *)a4 + 1);
          }
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v33 = 2082;
          uint64_t v34 = "";
          __int16 v35 = 2082;
          int v36 = v15;
          unsigned int v16 = "{\"msg%{public}.0s\":\"skip erasing #CLIUA for RunningBoard Process State. Does not exists\", \"bundleId"
                "\":%{public, location:escape_only}s}";
          __int16 v17 = v14;
          uint32_t v18 = 28;
          goto LABEL_35;
        }
      }
      break;
    case 4u:
      __int16 v19 = a1 + 10;
      if (sub_100103284(a1 + 10, (unsigned __int8 *)a4 + 8))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EFDD0);
        }
        uint64_t v20 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          sub_100103284(v19, (unsigned __int8 *)a4 + 8);
          BOOL v21 = (int *)*((unsigned int *)sub_100103284(v19, (unsigned __int8 *)a4 + 8) + 22);
          if (*((char *)a4 + 31) >= 0) {
            BOOL v22 = a4 + 2;
          }
          else {
            BOOL v22 = (int *)*((void *)a4 + 1);
          }
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v33 = 2082;
          uint64_t v34 = "";
          __int16 v35 = 2050;
          int v36 = v21;
          __int16 v37 = 2082;
          *(void *)double v38 = v22;
          unsigned int v16 = "{\"msg%{public}.0s\":\"skip taking #CLIUA for RunningBoard Process State. Already exists\", \"AssertionL"
                "evel\":%{public, location:CLClientInUseLevel}lld, \"bundleId\":%{public, location:escape_only}s}";
          __int16 v17 = v20;
          uint32_t v18 = 38;
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
        }
      }
      else
      {
        if (SHIBYTE(v31) < 0)
        {
          sub_1000DC48C(__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)__p;
          uint64_t v29 = v31;
        }
        sub_100134750(&v27, "Process state from RunningBoard");
        sub_100098B10(&v27, a1, (uint64_t)__dst, 5, (uint64_t *)buf);
        sub_10017F694((uint64_t)(a1 + 10), (unsigned __int8 *)a4 + 8, (long long *)(a4 + 2), (long long *)buf);
        sub_1001AB240((uint64_t)buf);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(__dst[0]);
        }
LABEL_26:
        sub_1001AB2D0((uint64_t)a1, (uint64_t *)__p);
      }
      break;
    default:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
      BOOL v23 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        int v24 = *a3;
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        uint64_t v34 = "";
        __int16 v35 = 1026;
        LODWORD(v36) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Unexpected app monitor notification\", \"notification\":%{public}d}", buf, 0x18u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EFDD0);
        }
      }
      uint64_t v25 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        int v26 = *a3;
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        uint64_t v34 = "";
        __int16 v35 = 1026;
        LODWORD(v36) = v26;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Unexpected app monitor notification", "{\"msg%{public}.0s\":\"#CLIUA Unexpected app monitor notification\", \"notification\":%{public}d}", buf, 0x18u);
      }
      break;
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100067F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006810C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void (**a5)(void, void))
{
  id v9 = sub_100103E24(a1, a3);
  if ([v9 isAuthSharingSubIdentity]) {
    id v9 = [v9 anchorKeyPath];
  }
  long long v10 = a4[7];
  long long v60 = a4[6];
  long long v61 = v10;
  v62[0] = a4[8];
  *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)((char *)a4 + 140);
  long long v11 = a4[3];
  *(_OWORD *)&unsigned char buf[32] = a4[2];
  long long v57 = v11;
  long long v12 = a4[5];
  long long v58 = a4[4];
  long long v59 = v12;
  long long v13 = a4[1];
  *(_OWORD *)uint64_t buf = *a4;
  *(_OWORD *)&uint8_t buf[16] = v13;
  uint64_t v14 = sub_100068950(a1, (uint64_t)v9, buf);
  if (![(CLClientManagerAuthorizationContext *)v14 isAuthorizedForServiceType:a2])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = v9;
      *(_WORD *)&unsigned char buf[28] = 2114;
      *(void *)&buf[30] = v14;
      *(_WORD *)&unsigned char buf[38] = 2050;
      *(void *)&unsigned char buf[40] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional intermediation Client not authorized for serviceType\", \"Client\":%{public, location:escape_only}@, \"AuthContext\":%{public, location:escape_only}@, \"serviceType\":%{public}lu}", buf, 0x30u);
    }
LABEL_10:
    a5[2](a5, 0);
    return;
  }
  if ([(CLClientManagerAuthorizationContext *)v14 isNonProvisionallyAuthorizedForServiceType:a2])
  {
    a5[2](a5, 1);
    return;
  }
  if ([(CLClientManagerAuthorizationContext *)v14 transientAwareRegistrationResult] != 8) {
    goto LABEL_10;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  unsigned int v16 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&buf[20] = v9;
    *(_WORD *)&unsigned char buf[28] = 2050;
    *(void *)&buf[30] = a2;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Handle #provisional intermediation for service\", \"Client\":%{public, location:escape_only}@, \"serviceType\":%{public}lu}", buf, 0x26u);
  }
  __int16 v17 = *(unsigned __int8 **)(a1 + 264);
  if (v17)
  {
    if (v9)
    {
      [v9 cppClientKey];
      unsigned int v18 = buf[23];
      uint64_t v19 = *(void *)&buf[8];
    }
    else
    {
      uint64_t v19 = 0;
      unsigned int v18 = 0;
      memset(buf, 0, 24);
    }
    uint64_t v21 = v17[23];
    if ((v21 & 0x80u) == 0) {
      uint64_t v22 = v17[23];
    }
    else {
      uint64_t v22 = *((void *)v17 + 1);
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v19 = v18;
    }
    if (v22 == v19)
    {
      if ((v18 & 0x80u) == 0) {
        BOOL v23 = buf;
      }
      else {
        BOOL v23 = *(unsigned __int8 **)buf;
      }
      if ((v21 & 0x80) != 0)
      {
        BOOL v20 = memcmp(*(const void **)v17, v23, *((void *)v17 + 1)) != 0;
      }
      else if (v17[23])
      {
        uint64_t v24 = v21 - 1;
        do
        {
          int v26 = *v17++;
          int v25 = v26;
          int v27 = *v23++;
          BOOL v20 = v25 != v27;
        }
        while (v25 == v27 && v24-- != 0);
      }
      else
      {
        BOOL v20 = 0;
      }
    }
    else
    {
      BOOL v20 = 1;
    }
    if ((v18 & 0x80) != 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  double v29 = -1.0;
  if (*(double *)(a1 + 304) > 0.0)
  {
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    double v29 = v30 - *(double *)(a1 + 304);
  }
  v55[0] = [v9 userlessClientKeyPath:@"ClientKey"];
  v54[1] = @"Challenger";
  v55[1] = +[NSNumber numberWithBool:v20];
  v54[2] = @"OnDeckDuration";
  v55[2] = +[NSNumber numberWithDouble:v29];
  +[NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:3];
  AnalyticsSendEvent();
  [*(id *)(a1 + 296) nextFireDelay];
  uint64_t v31 = (unsigned __int8 **)(a1 + 264);
  if (v32 >= 1.79769313e308) {
    goto LABEL_113;
  }
  __int16 v33 = *v31;
  if (!*v31) {
    goto LABEL_113;
  }
  if (v9)
  {
    [v9 cppClientKey];
    unsigned int v34 = buf[23];
    uint64_t v35 = *(void *)&buf[8];
  }
  else
  {
    uint64_t v35 = 0;
    unsigned int v34 = 0;
    memset(buf, 0, 24);
  }
  uint64_t v36 = v33[23];
  if ((v36 & 0x80u) == 0) {
    uint64_t v37 = v33[23];
  }
  else {
    uint64_t v37 = *((void *)v33 + 1);
  }
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = v34;
  }
  if (v37 == v35)
  {
    if ((v34 & 0x80u) == 0) {
      double v38 = buf;
    }
    else {
      double v38 = *(unsigned __int8 **)buf;
    }
    if ((v36 & 0x80) != 0)
    {
      BOOL v43 = memcmp(*(const void **)v33, v38, *((void *)v33 + 1)) != 0;
    }
    else if (v33[23])
    {
      uint64_t v39 = v36 - 1;
      do
      {
        int v41 = *v33++;
        int v40 = v41;
        int v42 = *v38++;
        BOOL v43 = v40 != v42;
      }
      while (v40 == v42 && v39-- != 0);
    }
    else
    {
      BOOL v43 = 0;
    }
  }
  else
  {
    BOOL v43 = 1;
  }
  if ((v34 & 0x80) != 0) {
    operator delete(*(void **)buf);
  }
  if (v43)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    long long v45 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      double v46 = *v31;
      if ((char)(*v31)[23] < 0) {
        double v46 = *(unsigned __int8 **)v46;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = v9;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping #provisional intermediation reigning king is not yet stale\", \"Client\":%{public, location:escape_only}@, \"kingOfTheDeck\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    a5[2](a5, 0);
  }
  else
  {
LABEL_113:
    if (*(void *)(a1 + 272))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v47 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Skipping #provisional intermediation throne change because of outstanding prompt\", \"wouldBeKing\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    else
    {
      int v48 = *v31;
      if (!*v31) {
        goto LABEL_96;
      }
      if (v9) {
        [v9 cppClientKey];
      }
      else {
        memset(buf, 0, 24);
      }
      BOOL v49 = sub_1006FE6DC(v48, buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v49)
      {
LABEL_96:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        double v50 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          std::string v51 = (const char *)*v31;
          if (*v31)
          {
            if (v51[23] < 0) {
              std::string v51 = *(const char **)v51;
            }
          }
          else
          {
            std::string v51 = "nobody";
          }
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2114;
          *(void *)&buf[20] = v9;
          *(_WORD *)&unsigned char buf[28] = 2082;
          *(void *)&buf[30] = v51;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Taking #provisional intermediation kingOfTheDeck\", \"newKing\":%{public, location:escape_only}@, \"oldKing\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        if (v9) {
          [v9 cppClientKey];
        }
        else {
          memset(buf, 0, 24);
        }
        operator new();
      }
      uint64_t v52 = *(void *)(a1 + 288);
      if (v52)
      {
        (*(void (**)(uint64_t, void))(v52 + 16))(v52, 0);

        *(void *)(a1 + 288) = 0;
      }
      *(void *)(a1 + 288) = [a5 copy];
      [*(id *)(a1 + 296) setNextFireDelay:300.0];
      [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
      *(void *)(a1 + 304) = v53;
      *(unsigned char *)(a1 + 280) = 1;
    }
  }
}

void sub_10006892C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CLClientManagerAuthorizationContext *sub_100068950(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v5 = sub_100103E24(a1, a2);
  if (sub_100122554(a1, (uint64_t)v5))
  {
    return sub_100122128(a1, (uint64_t)v5, a3);
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 1080);
    id v8 = [v5 legacyClientKey];
    return (CLClientManagerAuthorizationContext *)[v7 objectForKeyedSubscript:v8];
  }
}

void sub_1000689E4(uint64_t a1, void *a2, int a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  uint64_t v8 = sub_1001BEA14();
  if (Current != (CFRunLoopRef)v8)
  {
    sub_101A7A4D0();
LABEL_33:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_19:
    __int16 v15 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(a1 + 16);
      int v16 = *(_DWORD *)(a1 + 20);
      unsigned int v18 = *(void **)(a1 + 152);
      *(_DWORD *)uint64_t buf = 67240963;
      *(_DWORD *)&uint8_t buf[4] = v16;
      __int16 v42 = 1026;
      int v43 = v17;
      __int16 v44 = 2049;
      long long v45 = a2;
      __int16 v46 = 2113;
      int v47 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service ref with usage pair {%{public}d, %{public}d} is %{private}p with matching properties %{private}@", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (p_cache[506] != (void *)-1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      int v22 = *(_DWORD *)(a1 + 16);
      int v21 = *(_DWORD *)(a1 + 20);
      BOOL v23 = *(void **)(a1 + 152);
      int v31 = 67240963;
      int v32 = v21;
      __int16 v33 = 1026;
      int v34 = v22;
      __int16 v35 = 2049;
      uint64_t v36 = a2;
      __int16 v37 = 2113;
      double v38 = v23;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    *(void *)(a1 + 24) = CFRetain(a2);
    if (!a3) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  id v9 = *(void **)(a1 + 24);
  if (v9 == a2) {
    return;
  }
  if (!v9)
  {
    p_cache = CLAvengerScannerClientController.cache;
    if (qword_102418FD0 == -1) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }
  if (!a3) {
    return;
  }
  if (*(unsigned char *)(a1 + 40)
    && !sub_100A28618(v8, *(__IOHIDServiceClient **)(a1 + 24), @"ReportInterval", &off_102392EA0))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    long long v10 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] Failed to stop streaming from the old service before switching to the new one", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      LOWORD(v31) = 0;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  long long v11 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 16);
    int v12 = *(_DWORD *)(a1 + 20);
    uint64_t v14 = *(void *)(a1 + 152);
    *(_DWORD *)uint64_t buf = 67241219;
    *(_DWORD *)&uint8_t buf[4] = v12;
    __int16 v42 = 1026;
    int v43 = v13;
    __int16 v44 = 2049;
    long long v45 = v9;
    __int16 v46 = 2049;
    int v47 = a2;
    __int16 v48 = 2113;
    uint64_t v49 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Device,usagePage,%{public}d,usage,%{public}d,hidserviceref,old,%{private}p,new,%{private}p,matchingProperties,%{private}@", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    int v26 = *(_DWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 20);
    uint64_t v27 = *(void *)(a1 + 152);
    int v31 = 67241219;
    int v32 = v25;
    __int16 v33 = 1026;
    int v34 = v26;
    __int16 v35 = 2049;
    uint64_t v36 = v9;
    __int16 v37 = 2049;
    double v38 = a2;
    __int16 v39 = 2113;
    uint64_t v40 = v27;
    int v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  sub_1001B1938(a1);
  *(void *)(a1 + 24) = CFRetain(a2);
LABEL_23:
  sub_100106488(*(void *)(a1 + 32));
LABEL_24:
  if (*(void *)(a1 + 112))
  {
    *(void *)uint64_t buf = 0;
    CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID((IOHIDServiceClientRef)a2);
    CFNumberGetValue(RegistryID, kCFNumberSInt64Type, buf);
    if (*(void *)buf != *(void *)(a1 + 8)) {
      (*(void (**)(void))(a1 + 112))(*(void *)(a1 + 120));
    }
  }
  if (*(void *)(a1 + 64) && ((a3 & 1) != 0 || *(unsigned char *)(a1 + 40)))
  {
    uint64_t v20 = sub_1000D3E78();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100A2A504;
    v30[3] = &unk_1022A3020;
    v30[4] = a1;
    sub_1009E8F7C(v20, (uint64_t)v30);
  }
}

uint64_t sub_10006A7CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 316))
  {
    if (qword_1024887B8 != -1) {
      dispatch_once(&qword_1024887B8, &stru_10232C7B8);
    }
    if (qword_1024887C0)
    {
      *(unsigned char *)(a1 + 316) = off_1024793F0();
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      uint64_t v2 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEBUG))
      {
        int v3 = *(unsigned __int8 *)(a1 + 316);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "uncached activated state %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        int v26 = *(unsigned __int8 *)(a1 + 316);
        int v28 = 67109120;
        int v29 = v26;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableIgneous()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
    }
  }
  *(_DWORD *)uint64_t buf = 0;
  uint64_t v4 = sub_1000A6958();
  sub_10006EF84(v4, "CLIgneousArmMinutes", buf);
  BOOL v5 = 0;
  int v6 = *(_DWORD *)buf;
  if (!*(unsigned char *)(a1 + 313)) {
    BOOL v5 = *(unsigned char *)(a1 + 316) != 0;
  }
  sub_1001B26D4(a1);
  if (*(unsigned char *)(a1 + 317)) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = 0;
  }
  sub_1001B1E60(a1);
  BOOL v8 = sub_1001B2658(a1);
  LOBYTE(v28) = 0;
  sub_10006ACBC(buf, "IgneousForceInRandomArmSession", (unsigned __int8 *)&v28, 0);
  if (buf[1]) {
    int v9 = 1;
  }
  else {
    int v9 = v8;
  }
  BOOL v10 = v6 > 0 && v7;
  if (v9)
  {
    int v11 = 1;
  }
  else
  {
    int v11 = *(unsigned __int8 *)(a1 + 314);
    if (*(unsigned char *)(a1 + 314)) {
      int v11 = *(_DWORD *)(a1 + 420) < *(_DWORD *)(a1 + 428) - 1;
    }
  }
  LODWORD(v12) = v10 & v11;
  LOBYTE(v28) = 0;
  sub_10006ACBC(buf, "IgneousForceOn", (unsigned __int8 *)&v28, 0);
  if (buf[1]) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v12;
  }
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  int v13 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_INFO))
  {
    int v14 = *(unsigned __int8 *)(a1 + 313);
    int v15 = *(unsigned __int8 *)(a1 + 316);
    int v16 = *(unsigned __int8 *)(a1 + 314);
    int v17 = *(unsigned __int8 *)(a1 + 317);
    int v18 = *(_DWORD *)(a1 + 420);
    *(_DWORD *)uint64_t buf = 67242240;
    int v47 = v12;
    __int16 v48 = 1026;
    int v49 = 1;
    __int16 v50 = 1026;
    int v51 = v14;
    __int16 v52 = 1026;
    int v53 = v15;
    __int16 v54 = 1026;
    int v55 = v16;
    __int16 v56 = 1026;
    int v57 = v9;
    __int16 v58 = 1026;
    int v59 = v6;
    __int16 v60 = 1026;
    int v61 = v17;
    __int16 v62 = 1026;
    int v63 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "shouldEnableIgneous, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u, %{public}u", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    int v20 = *(unsigned __int8 *)(a1 + 313);
    int v21 = *(unsigned __int8 *)(a1 + 316);
    int v22 = *(unsigned __int8 *)(a1 + 314);
    int v23 = *(unsigned __int8 *)(a1 + 317);
    int v24 = *(_DWORD *)(a1 + 420);
    int v28 = 67242240;
    int v29 = v12;
    __int16 v30 = 1026;
    int v31 = 1;
    __int16 v32 = 1026;
    int v33 = v20;
    __int16 v34 = 1026;
    int v35 = v21;
    __int16 v36 = 1026;
    int v37 = v22;
    __int16 v38 = 1026;
    int v39 = v9;
    __int16 v40 = 1026;
    int v41 = v6;
    __int16 v42 = 1026;
    int v43 = v23;
    __int16 v44 = 1026;
    int v45 = v24;
    int v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldEnableIgneous()", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  return v12;
}

unsigned __int8 *sub_10006ACBC(unsigned __int8 *a1, const char *a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  *a1 = 0;
  a1[1] = *a3;
  int v6 = (BOOL *)(a1 + 1);
  a1[2] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_1000D2988(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[2])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      BOOL v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        uint64_t v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        __int16 v36 = 2080;
        int v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        int v14 = v26;
      }
      else {
        int v14 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      __int16 v34 = v14;
      int v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        int v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        __int16 v36 = 2080;
        int v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        int v25 = v26;
      }
      else {
        int v25 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      __int16 v34 = v25;
      int v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D350);
    }
    BOOL v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_10234D350);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D350);
    }
    int v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_10006B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006B564@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006B580(uint64_t a1)
{
  v8[0] = *(void *)(a1 + 128);
  memset(&v8[1], 0, 16);
  float32x2_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= *(void *)(a1 + 208))
  {
    if (v1 >= *(void *)(a1 + 168))
    {
      for (uint64_t i = 0; i != 3; ++i)
        *((unsigned char *)&v8[2] + i + 4) = *(void *)(a1 + 184 + 8 * i) <= v1;
      float v5 = 0.0;
      float v6 = 0.0;
      if (BYTE4(v8[2])) {
        float v6 = *(float *)(a1 + 144) - *(float *)(a1 + 32);
      }
      *(float *)&v8[1] = v6;
      if (BYTE5(v8[2])) {
        float v5 = *(float *)(a1 + 148) - *(float *)(a1 + 36);
      }
      *((float *)&v8[1] + 1) = v5;
      if (BYTE6(v8[2])) {
        float v7 = *(float *)(a1 + 152) - *(float *)(a1 + 40);
      }
      else {
        float v7 = 0.0;
      }
      *(float *)&_DWORD v8[2] = v7;
    }
    if (v1 >= *(void *)(a1 + 176))
    {
      float32x2_t v9 = vsub_f32(*(float32x2_t *)(a1 + 156), *(float32x2_t *)(a1 + 44));
      *(float *)&uint64_t v10 = *(float *)(a1 + 164) - *(float *)(a1 + 52);
      WORD2(v10) = 257;
      BYTE6(v10) = 1;
    }
    HIBYTE(v10) = *(unsigned char *)(a1 + 236);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 16))(a1, v8);
  }
  else
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_10230B1E8);
    }
    uint64_t v2 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "DeviceMotion has reinitialized, reference frame has changed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_10230B1E8);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLInertialOdometryNotifierClient::sendOdometryToClient()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_10006B828(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 40))();
}

uint64_t sub_10006B850(uint64_t a1, uint64_t a2)
{
  return sub_10006B858(a1 - 352, a2);
}

uint64_t sub_10006B858(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E65E0(a1);
  if ((result & 1) == 0 && (!*(unsigned char *)(a1 + 1416) || *(_DWORD *)(a1 + 1408) != 1 || *(void *)(a1 + 1384)))
  {
    return sub_10006B8C4(a1 + 608, a2);
  }
  return result;
}

uint64_t sub_10006B8C4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)CLPIndoorEvent);
  [v4 setType:11];
  [v4 setInertialOdometry:objc_alloc_init((Class)CLPInertialOdometry)];
  [objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setTimestamp:", (*(double (**)(void, double))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16), *(double *)a2)- *(double *)(a1 + 64)];
  if (*(unsigned char *)(a2 + 20)) {
    [objc_msgSend(v4, "inertialOdometry") setDeltaPositionX:*(float *)(a2 + 8)];
  }
  if (*(unsigned char *)(a2 + 21)) {
    [objc_msgSend(v4, "inertialOdometry") setDeltaPositionY:*(float *)(a2 + 12)];
  }
  if (*(unsigned char *)(a2 + 22)) {
    [objc_msgSend(v4, "inertialOdometry") setDeltaPositionZ:*(float *)(a2 + 16)];
  }
  if (*(unsigned char *)(a2 + 36)) {
    [objc_msgSend(v4, "inertialOdometry") setDeltaVelocityX:*(float *)(a2 + 24)];
  }
  if (*(unsigned char *)(a2 + 37)) {
    [objc_msgSend(v4, "inertialOdometry") setDeltaVelocityY:*(float *)(a2 + 28)];
  }
  if (*(unsigned char *)(a2 + 38)) {
    [objc_msgSend(v4, "inertialOdometry") setDeltaVelocityZ:*(float *)(a2 + 32)];
  }
  [*(id *)(a1 + 48) addObject:v4];

  return sub_1000E6840(a1);
}

double sub_10006BA54(double a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  return Current - sub_1000D3E50() + a1;
}

uint64_t sub_10006BA88(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)CLPIndoorEvent);
  [v4 setType:12];
  [v4 setOutdoorUpdate:objc_alloc_init((Class)CLPOutdoorUpdate)];
  [objc_msgSend(v4, "outdoorUpdate") setTimestamp:*(double *)a2 - *(double *)(a1 + 64)];
  [objc_msgSend(v4, "outdoorUpdate") setMctTimestamp:*(double *)(a2 + 8)];
  [objc_msgSend(v4, "outdoorUpdate") setConfidence:*(unsigned int *)(a2 + 24)];
  [objc_msgSend(v4, "outdoorUpdate") setType:*(unsigned int *)(a2 + 16)];
  [objc_msgSend(v4, "outdoorUpdate") setEstimatedStateProbabilityOutdoor:*(double *)(a2 + 32)];
  [*(id *)(a1 + 48) addObject:v4];

  return sub_1000E6840(a1);
}

void sub_10006BB80(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 256), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CEE58);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterTraceExternal::onPressure", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CEE58);
    }
    float v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterTraceExternal::onPressure\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 304) + 24))(*(void *)(a2 + 304), a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_10006BD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006BD74(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  double v4 = *(double *)(result + 280);
  double v5 = *(double *)(a2 + 8);
  if (v4 == 1.79769313e308 || v5 - v4 >= 0.899999976)
  {
    *(double *)(result + 280) = v5;
    id v6 = objc_alloc_init((Class)CLPIndoorEvent);
    [v6 setType:5];
    [v6 setPressure:objc_alloc_init((Class)CLPIndoorPressure)];
    [objc_msgSend(v6, "pressure") setTimestamp:*(double *)(a2 + 8) - *(double *)(v3 + 64)];
    float v7 = *(float *)a2 / 1000.0;
    id v8 = [v6 pressure];
    *(float *)&double v9 = v7;
    [v8 setPressure:v9];
    int v10 = *(_DWORD *)(a2 + 40);
    id v11 = [v6 pressure];
    LODWORD(v12) = v10;
    [v11 setTemperature:v12];
    [*(id *)(v3 + 48) addObject:v6];
    return sub_1000E6840(v3);
  }
  return result;
}

uint64_t sub_10006C26C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 92);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 92);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 28), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(float *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 29), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 48), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, (int)a2, *(double *)(v5 + 56), a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 52), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 72), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v7 = *(void *)(v5 + 64);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_102489D58 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      return result;
    }
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v8 = *(void *)(v5 + 80);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489D58 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 92) & 0x8000) != 0)
  {
LABEL_37:
    int v9 = *(_DWORD *)(v5 + 76);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v9, (int)a2, a4);
  }
  return result;
}

float sub_10006CC8C(float a1)
{
  float v1 = a1 / 101320.0;
  float v2 = powf(a1 / 101320.0, -0.66338) * -0.077464;
  return v2 + (float)(powf(v1, -0.80974) * 0.083241);
}

void sub_10006CCF0(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C7FA0);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022C7FA0);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

BOOL sub_10006CF80(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          id v11 = (uint64_t *)v6;
        }
        else {
          id v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        __int16 v14 = (char *)*((void *)v8 + 6);
        double v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          __int16 v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              uint64_t v19 = (char **)v13;
            }
            else {
              uint64_t v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              __int16 v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            uint64_t v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                uint64_t v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10006D9B8((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C7FA0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                char v27 = a1 + 8;
                if (a1[31] < 0) {
                  char v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                int v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C7FA0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  __int16 v30 = buf;
                }
                else {
                  __int16 v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                __int16 v38 = v29;
                __int16 v39 = 2082;
                __int16 v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_10006D354(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D3B98);
      }
      BOOL v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022D3B98);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

BOOL sub_10006D5E4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          id v11 = (uint64_t *)v6;
        }
        else {
          id v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        __int16 v14 = (char *)*((void *)v8 + 6);
        double v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          __int16 v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              uint64_t v19 = (char **)v13;
            }
            else {
              uint64_t v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              __int16 v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            uint64_t v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                uint64_t v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10006D9B8((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D3B98);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                char v27 = a1 + 8;
                if (a1[31] < 0) {
                  char v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                int v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022D3B98);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  __int16 v30 = buf;
                }
                else {
                  __int16 v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                __int16 v38 = v29;
                __int16 v39 = 2082;
                __int16 v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10006D9B8(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_10006DA20((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_10006DA20(uint64_t **a1, uint64_t a2)
{
  int v3 = sub_1000F0A30(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_10006DA64(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_10006DACC((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_10006DACC(uint64_t **a1, uint64_t a2)
{
  int v3 = sub_1000F0A30(a1, (uint64_t *)a2);
  sub_1000F5BB0(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_10006DB54(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v11 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v12 = 256;
  if (*(void *)(a1 + 304) && *(void *)(a1 + 312))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(void *)(a1 + 224) && *(unsigned char *)(a1 + 632) && (*(_DWORD *)(a1 + 584) - 1) <= 0xA4)
    {
      uint64_t v13 = *(void *)(a1 + 544);
      sub_10006DE8C(buf);
      int v3 = *(_DWORD *)(a1 + 584);
      std::string __p = buf[0];
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v4 = 0;
      int v3 = -1;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240707;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v4;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WifiMgr, associated, %{public}d, mac, %{private}s, channel, %{public}d", (uint8_t *)buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      BOOL v8 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v13) = 67240707;
      HIDWORD(v13) = v4;
      __int16 v14 = 2081;
      int v15 = v8;
      __int16 v16 = 1026;
      int v17 = v3;
      int v9 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::isAssociated()", "%s\n", (const char *)v9);
      if (v9 != buf) {
        free(v9);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v4;
}

void sub_10006DE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10006DE8C(std::string *a1@<X8>)
{
  sub_10006DF94();
  uint64_t v2 = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    unsigned __int8 v3 = v9;
    if ((char)v9 < 0) {
      break;
    }
    if ((unint64_t)v2 >= v9) {
      return;
    }
LABEL_6:
    if (v2)
    {
      std::string::push_back(a1, 58);
      unsigned __int8 v3 = v9;
    }
    uint64_t v4 = (void **)__p[0];
    if ((v3 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    int v6 = v2[(void)v5];
    if (v6 != 48)
    {
      std::string::push_back(a1, v6);
      unsigned __int8 v3 = v9;
      uint64_t v4 = (void **)__p[0];
    }
    if ((v3 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = v4;
    }
    std::string::push_back(a1, v2[(void)v7 + 1]);
    v2 += 2;
  }
  if (v2 < __p[1]) {
    goto LABEL_6;
  }
  operator delete(__p[0]);
}

void sub_10006DF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006DF94()
{
  sub_10010F274((uint64_t)v5);
  char v4 = 48;
  uint64_t v0 = sub_10006E19C(v6, &v4);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 24) = 12;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v2;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10006E180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10006E19C(void *a1, char *a2)
{
  unsigned __int8 v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10006E250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10006E348(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  if (!*(void *)(a1 + 296))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unsigned __int8 v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "WifiService, getPower, fDpcSource is NULL", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  if (!*(void *)(a1 + 312) || !*(void *)(a1 + 304))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 304);
      uint64_t v7 = *(void *)(a1 + 312);
      *(_DWORD *)uint64_t buf = 134349312;
      uint64_t v13 = v7;
      __int16 v14 = 2050;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "WifiService, getPower, device/manager is NULL, %{public}p, %{public}p", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_20:
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLWifiService::getPower(BOOL &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
LABEL_17:
      uint64_t v5 = 0;
      goto LABEL_18;
    }
LABEL_22:
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    goto LABEL_20;
  }
  *a2 = *(unsigned char *)(a1 + 536);
  uint64_t v5 = 1;
LABEL_18:
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v5;
}

void sub_10006E6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E6F8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int a7)
{
  uint64_t v10 = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t v10 = off_1023190C8;
  *(_DWORD *)(v10 + 44) = a7;
  uint64_t v11 = objc_alloc_init(CLLocationSubscriptionAdapter);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 48) = v11;
  *(_WORD *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 58) = 0;
  *(void *)(a1 + 64) = 0xBFF0000000000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x7FF0000000000000;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 89) = a6;
  *(_WORD *)(a1 + 90) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(unsigned char *)(a1 + 192) = 0;
  __int16 v12 = (unsigned char *)(a1 + 192);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(unsigned char *)(a1 + 193) = 1;
  *(void *)(a1 + 196) = -1;
  *(void *)(a1 + 208) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 236) = 0;
  *(_WORD *)(a1 + 240) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 248) = _Q1;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(void *)(a1 + 272) = 0xBFF0000000000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0x7FF0000000000000;
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 349) = 0;
  *(void *)(a1 + 320) = 0xBFF0000000000000;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 360) = 1000;
  *(unsigned char *)(a1 + 364) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 384) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 400) = _Q1;
  *(_OWORD *)(a1 + 416) = _Q1;
  *(unsigned char *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 500) = 0;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(void *)(a1 + 504) = 0xBFF0000000000000;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = off_1022B6DB8;
  BOOL v18 = operator new(0x20uLL);
  v18[1] = 0;
  v18[2] = 0;
  *BOOL v18 = off_1022B6DF0;
  *((_DWORD *)v18 + 6) = 31337;
  *(void *)(a1 + 528) = v18 + 3;
  *(void *)(a1 + 536) = v18;
  *(void *)(a1 + 552) = off_1022B6DB8;
  uint64_t v19 = operator new(0x20uLL);
  v19[1] = 0;
  v19[2] = 0;
  *uint64_t v19 = off_1022B6DF0;
  *((_DWORD *)v19 + 6) = 31337;
  *(void *)(a1 + 560) = v19 + 3;
  *(void *)(a1 + 568) = v19;
  *(void *)(a1 + 576) = 0;
  sub_1000C7F88(buf);
  char v20 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)off_102477098, (void *)(a1 + 544));
  if (*(void *)v37) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v37);
  }
  if ((v20 & 1) == 0) {
    *(void *)(a1 + 544) = 0x408C200000000000;
  }
  sub_1000C7F88(buf);
  char v21 = sub_1000D2988(*(uint64_t *)buf, "ForceMapMatching", (BOOL *)(a1 + 194));
  if (*(void *)v37) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v37);
  }
  if ((v21 & 1) == 0) {
    *(unsigned char *)(a1 + 194) = 0;
  }
  unsigned int v35 = 0;
  sub_1000C7F88(buf);
  int v22 = sub_10006EF84(*(uint64_t *)buf, "AutoPauseOverride", &v35);
  if (*(void *)v37) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v37);
  }
  if (v22 && (unsigned int v23 = v35, v35 <= 3)) {
    *(_DWORD *)(a1 + 188) = v35;
  }
  else {
    unsigned int v23 = *(_DWORD *)(a1 + 188);
  }
  switch(v23)
  {
    case 0u:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      BOOL v24 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v37 = 2082;
        *(void *)&v37[2] = "";
        int v25 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to None\"}";
        goto LABEL_32;
      }
      break;
    case 1u:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      BOOL v24 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v37 = 2082;
        *(void *)&v37[2] = "";
        int v25 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to Off for all clients\"}";
        goto LABEL_32;
      }
      break;
    case 2u:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      BOOL v24 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v37 = 2082;
        *(void *)&v37[2] = "";
        int v25 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to On for all clients\"}";
        goto LABEL_32;
      }
      break;
    case 3u:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      BOOL v24 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v37 = 2082;
        *(void *)&v37[2] = "";
        int v25 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0\"}";
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, v25, buf, 0x12u);
      }
      break;
    default:
      break;
  }
  sub_1000C7F88(buf);
  char v26 = sub_1000D2988(*(uint64_t *)buf, "AutoPauseLogUI", (BOOL *)(a1 + 192));
  if (*(void *)v37) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v37);
  }
  if (v26)
  {
    if (*v12)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      char v27 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v37 = 2082;
        *(void *)&v37[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: AutoPause log UI Enabled\"}", buf, 0x12u);
      }
    }
  }
  else
  {
    *__int16 v12 = 0;
  }
  signed int v34 = 0;
  sub_1000C7F88(buf);
  int v28 = sub_10006EF84(*(uint64_t *)buf, "AutoPauseActivityType", &v34);
  unsigned int v29 = v34;
  if (v34 >= 0) {
    int v30 = v28;
  }
  else {
    int v30 = 0;
  }
  if (v30 == 1)
  {
    if (*(void *)v37) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v37);
    }
    if (v29 <= 3) {
      sub_10122B170(a1, v34);
    }
  }
  else if (*(void *)v37)
  {
    sub_1000DB0A0(*(std::__shared_weak_count **)v37);
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  __int16 v31 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    int v32 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v37 = 2082;
    *(void *)&v37[2] = "";
    __int16 v38 = 1026;
    int v39 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: activity type defaulted\", \"activity\":%{public}d}", buf, 0x18u);
  }
  return a1;
}

void sub_10006EDE8(_Unwind_Exception *a1)
{
  sub_10012E38C(v4);
  sub_10012E38C(v3);
  sub_10012D234((id **)(v2 + 408), 0);
  if (*(char *)(v1 + 351) < 0) {
    operator delete(*(void **)(v2 + 224));
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 296);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = *(void *)(v1 + 160);
  *(void *)(v1 + 160) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(v1 + 152);
  *(void *)(v1 + 152) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *v5;
  *uint64_t v5 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_10017FD18((uint64_t *)v2, 0);
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_10006EF6C()
{
}

void sub_10006EF74()
{
}

void sub_10006EF7C()
{
}

uint64_t sub_10006EF84(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_10013E418(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

void sub_10006EFF8(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v7 = a2 - 1;
  if (v7 < 8) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = 0;
  switch(a3)
  {
    case 0:
      goto LABEL_15;
    case 1:
      int v9 = 1;
      goto LABEL_15;
    case 2:
      int v9 = 2;
      goto LABEL_15;
    case 3:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102300D38);
      }
      uint64_t v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        uint64_t v15 = "";
        __int16 v16 = 2050;
        uint64_t v17 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Got max arrow state!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v12, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102300D38);
        }
      }
      uint64_t v11 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        uint64_t v15 = "";
        __int16 v16 = 2050;
        uint64_t v17 = a2;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got max arrow state!", "{\"msg%{public}.0s\":\"Got max arrow state!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v12, 0x1Cu);
      }
      int v9 = 0;
LABEL_15:
      *(_DWORD *)(a1 + 4 * v8 + 156) = v9;
      break;
    default:
      break;
  }
  if ((a4 & 1) != 0 || sub_10006F6A8(a1, a2)) {
    sub_10006F21C(a1, a4);
  }
}

void sub_10006F21C(uint64_t a1, int a2)
{
  uint64_t v3 = 0;
  int v4 = 0;
  do
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102300D38);
    }
    CFStringRef v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(unsigned int *)(a1 + 4 * v3 + 156);
      *(_DWORD *)uint64_t buf = 68289538;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 2050;
      uint64_t v35 = v3;
      __int16 v36 = 2050;
      uint64_t v37 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: entity class state mask\", \"class\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"mask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", buf, 0x26u);
    }
    if (sub_10006F6A8(a1, v3)) {
      v4 |= *(_DWORD *)(a1 + 4 * v3 + 156);
    }
    ++v3;
  }
  while (v3 != 9);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 224;
  *(void *)&long long v7 = 68289794;
  long long v26 = v7;
  do
  {
    int v10 = v8 == 1;
    uint64_t v11 = *(void **)(a1 + 200 + 8 * v8);
    if (v8 == 2) {
      int v10 = 2;
    }
    int v12 = *(_DWORD *)(a1 + 192);
    int v13 = v12 & v10;
    int v14 = v10 & v4;
    if ((v12 & v10) != 0 && v14 == 0)
    {
      if (*(unsigned char *)(v9 + v8)) {
        BOOL v17 = a2 == 0;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17)
      {
        double v18 = sub_1001C2630(1);
        if (v8 == 2) {
          int v19 = 1;
        }
        else {
          int v19 = a2;
        }
        if (v19) {
          double v20 = 0.0;
        }
        else {
          double v20 = v18;
        }
        if (!objc_msgSend(v11, "handler", v18, v26))
        {
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          v28[2] = sub_100EC2838;
          v28[3] = &unk_1022B2410;
          id v28[4] = a1;
          int v29 = v8;
          [v11 setHandler:v28];
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102300D38);
        }
        char v21 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          int v31 = 0;
          __int16 v32 = 2082;
          __int16 v33 = "";
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 1026;
          LODWORD(v37) = (int)v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: scheduling arrow demotion timer\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"delay\":%{public}d}", buf, 0x22u);
        }
        [v11 setNextFireDelay:v20];
        *(unsigned char *)(v9 + v8) = 1;
      }
    }
    else
    {
      if (v13)
      {
        if (*(unsigned char *)(v9 + v8)) {
          BOOL v16 = v14 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16) {
          goto LABEL_51;
        }
      }
      else if (!v14)
      {
        goto LABEL_51;
      }
      *(_DWORD *)(a1 + 192) = v12 | v10;
      [v11 setNextFireDelay:1.79769313e308, v26];
      *(unsigned char *)(v9 + v8) = 0;
      if (v13)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102300D38);
        }
        int v22 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(unsigned int *)(a1 + 192);
          *(_DWORD *)uint64_t buf = v26;
          int v31 = 0;
          __int16 v32 = 2082;
          __int16 v33 = "";
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 2050;
          uint64_t v37 = v23;
          __int16 v38 = 2050;
          uint64_t v39 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: only cancelling a demotion timer due to another demotion timer in-flight\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"mask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newMask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", buf, 0x30u);
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102300D38);
        }
        BOOL v24 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v25 = *(unsigned int *)(a1 + 192);
          *(_DWORD *)uint64_t buf = 68289538;
          int v31 = 0;
          __int16 v32 = 2082;
          __int16 v33 = "";
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 2050;
          uint64_t v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: promoting arrow\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"mask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", buf, 0x26u);
        }
        sub_10006F75C(a1);
      }
    }
LABEL_51:
    ++v8;
  }
  while (v8 != 3);
}

BOOL sub_10006F6A8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  BOOL v5 = a2 < 8 && ((0x87u >> a2) & 1) != 0 || *(unsigned char *)(a1 + a2 + 145) != 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v5;
}

uint64_t sub_10006F75C(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sbim: Posting status bar icon visibility change notification\"}", (uint8_t *)v7, 0x12u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLShouldDisplayStatusBarIconChangedNotification, 0, 0, 0);
  int v4 = *(_DWORD *)(a1 + 192);
  uint64_t result = _os_feature_enabled_impl();
  if ((result & 1) == 0)
  {
    if ((v4 & 2) != 0) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = v4 & 1;
    }
    return (uint64_t)[[(id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((id)[((
  }
  return result;
}

uint64_t sub_10006F8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v3);
    if (v3)
    {
      uint64_t v5 = *(void *)(a2 + 16);
      if (v5)
      {
        if (*(double *)(v5 + 40) > 0.0)
        {
          __int16 v149 = v3;
          double v153 = 0.0;
          double v154 = 0.0;
          uint64_t v6 = sub_1001BD27C((double *)(a1 + 1800), &v154, &v153, *(double *)(v5 + 24), *(double *)(a1 + 1704));
          uint64_t v7 = v6;
          if (v6)
          {
            __int16 v8 = *(uint64_t **)(a1 + 240);
            if (v8)
            {
              unsigned int v146 = v6;
              char v150 = 0;
              int v152 = 0;
              uint64_t v9 = (double *)(v5 + 16);
              double v147 = v154 * 0.0174532925;
              double v10 = 1.79769313e308;
              double v11 = v153 * 0.0174532925;
              __asm { FMOV            V3.2D, #-1.0 }
              v16.f64[0] = NAN;
              v16.f64[1] = NAN;
              int8x16_t v148 = (int8x16_t)vnegq_f64(v16);
              long long v151 = _Q3;
              do
              {
                unint64_t v17 = v8[5];
                unint64_t v18 = v17 / 0x17;
                uint64_t v19 = v8[2];
                uint64_t v20 = v8[3];
                if (v20 == v19)
                {
                  unint64_t v22 = 0;
                  unint64_t v25 = 0;
                  BOOL v24 = (void *)(v19 + 8 * ((v8[6] + v17) / 0x17));
                  unint64_t v21 = v17 % 0x17;
                }
                else
                {
                  unint64_t v21 = v17 % 0x17;
                  unint64_t v22 = *(void *)(v19 + 8 * v18) + 176 * (v17 % 0x17);
                  unint64_t v23 = v8[6] + v17;
                  BOOL v24 = (void *)(v19 + 8 * (v23 / 0x17));
                  unint64_t v25 = *v24 + 176 * (v23 % 0x17);
                }
                for (double i = 1.79769313e308; ; double i = v29)
                {
                  uint64_t v27 = v25;
                  uint64_t v28 = v20 == v19 ? 0 : *(void *)(v19 + 8 * v18) + 176 * v21;
                  if (v27 == v28) {
                    break;
                  }
                  if (v27 == *v24)
                  {
                    uint64_t v31 = *(v24 - 1);
                    if (!*(unsigned char *)(v31 + 4040))
                    {
LABEL_26:
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1022FFA18);
                      }
                      __int16 v33 = qword_102419518;
                      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v34 = v27;
                        if (v27 == *v24) {
                          uint64_t v34 = *(v24 - 1) + 4048;
                        }
                        int v35 = *((_DWORD *)v8 + 165);
                        uint64_t v36 = *(void *)(v34 - 168);
                        *(_DWORD *)uint64_t buf = 67240448;
                        *(_DWORD *)&uint8_t buf[4] = v35;
                        *(_WORD *)&uint8_t buf[8] = 2050;
                        *(void *)&buf[10] = v36;
                        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#Error,fusion data association, found no fused location, hID,%{public}d,mct,%{public}.3f", buf, 0x12u);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419510 != -1) {
                          dispatch_once(&qword_102419510, &stru_1022FFA18);
                        }
                        int v37 = *((_DWORD *)v8 + 165);
                        if (v27 == *v24) {
                          uint64_t v27 = *(v24 - 1) + 4048;
                        }
                        uint64_t v38 = *(void *)(v27 - 168);
                        *(_DWORD *)uint64_t v158 = 67240448;
                        *(_DWORD *)&v158[4] = v37;
                        *(_WORD *)&v158[8] = 2050;
                        *(void *)&unsigned char v158[10] = v38;
                        uint64_t v39 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "auto cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)::(anonymous class)::operator()(LCFusionLocationHypothesis &) const", "%s\n", v39);
                        if (v39 != buf) {
                          free(v39);
                        }
                      }
                      goto LABEL_55;
                    }
                    double v29 = vabdd_f64(*(double *)(v31 + 3880), *v9);
                    if (v29 > i) {
                      break;
                    }
                    uint64_t v30 = v31 + 4048;
                    --v24;
                  }
                  else
                  {
                    if (!*(unsigned char *)(v27 - 8)) {
                      goto LABEL_26;
                    }
                    double v29 = vabdd_f64(*(double *)(v27 - 168), *v9);
                    uint64_t v30 = v27;
                    if (v29 > i) {
                      break;
                    }
                  }
                  unint64_t v25 = v30 - 176;
                  unint64_t v22 = v27;
                }
                if (v20 == v19) {
                  uint64_t v32 = 0;
                }
                else {
                  uint64_t v32 = *(void *)(v19 + 8 * v18) + 176 * v21;
                }
                if (v22 == v32)
                {
                  double v53 = 1.79769313e308;
                  goto LABEL_56;
                }
                *(_OWORD *)&uint8_t buf[8] = _Q3;
                *(_OWORD *)&unsigned char buf[40] = xmmword_101D1C320;
                *(_OWORD *)&buf[56] = xmmword_101D1C320;
                *(_OWORD *)&buf[80] = _Q3;
                *(_OWORD *)&buf[96] = _Q3;
                *(void *)uint64_t buf = off_10232A710;
                *(void *)&buf[112] = 0xBFF0000000000000;
                *(_DWORD *)&buf[120] = 0;
                buf[124] = 0;
                *(_DWORD *)&buf[128] = 0;
                if (!sub_100070DA0((uint64_t)(v8 + 7), (uint64_t)buf)) {
                  goto LABEL_55;
                }
                double v40 = *(double *)(v5 + 40);
                double v41 = *(double *)&buf[40];
                *(_OWORD *)&v158[8] = v151;
                long long v159 = xmmword_101D1C320;
                long long v160 = xmmword_101D1C320;
                long long v161 = v151;
                long long v162 = v151;
                unint64_t v163 = 0xBFF0000000000000;
                int v164 = 0;
                char v165 = 0;
                int v166 = 0;
                double v42 = *((double *)v8 + 51);
                double v43 = *(double *)(v5 + 16);
                *(void *)uint64_t v158 = off_10232A710;
                if (v42 <= v43)
                {
                  if (!sub_100074400((uint64_t)(v8 + 7), (double *)(v5 + 16))
                    || !sub_100070DA0((uint64_t)(v8 + 7), (uint64_t)v158))
                  {
                    goto LABEL_55;
                  }
                  double v55 = *(double *)&v158[24];
                  *(double *)v54.uint64_t i64 = *(double *)&v158[32] * 0.0174532925;
                  double v57 = *(double *)(v5 + 24);
                  double v56 = *(double *)(v5 + 32);
                  v58.i64[1] = 0;
                  if (fabs(*(double *)&v158[32] * 0.0174532925) <= 3.14159265)
                  {
                    int8x16_t v60 = (int8x16_t)0x400921FB54442D18uLL;
                  }
                  else
                  {
                    int8x16_t v141 = vbslq_s8(v148, (int8x16_t)0x400921FB54442D18uLL, v54);
                    long double v59 = fmod(*(double *)v54.i64 + *(double *)v141.i64, 6.28318531);
                    int8x16_t v60 = (int8x16_t)0x400921FB54442D18uLL;
                    v58.i64[1] = v141.i64[1];
                    *(double *)v54.uint64_t i64 = v59 - *(double *)v141.i64;
                  }
                  *(double *)v58.uint64_t i64 = v56 * 0.0174532925;
                  v72.i64[1] = v60.i64[1];
                  if (fabs(v56 * 0.0174532925) > *(double *)v60.i64)
                  {
                    uint64_t v144 = v54.i64[0];
                    double v139 = *(double *)vbslq_s8(v148, v60, v58).i64;
                    *(double *)v72.uint64_t i64 = fmod(*(double *)v58.i64 + v139, 6.28318531);
                    int8x16_t v60 = (int8x16_t)0x400921FB54442D18uLL;
                    v54.i64[0] = v144;
                    *(double *)v58.uint64_t i64 = *(double *)v72.i64 - v139;
                  }
                  double v73 = 0.5;
                  *(double *)v72.uint64_t i64 = *(double *)v54.i64 - *(double *)v58.i64;
                  if (vabdd_f64(*(double *)v54.i64, *(double *)v58.i64) > *(double *)v60.i64)
                  {
                    double v145 = *(double *)vbslq_s8(v148, v60, v72).i64;
                    *(double *)v72.uint64_t i64 = fmod(*(double *)v72.i64 + v145, 6.28318531) - v145;
                  }
                  double v76 = v40 * v40;
                  double v75 = v55 - v57;
                  double v74 = *(double *)&v159 * *(double *)&v159;
                }
                else
                {
                  double v157 = v42;
                  __int16 v44 = *(std::__shared_weak_count **)(a2 + 24);
                  double v155 = *(double *)(a2 + 16);
                  long double v156 = v44;
                  if (v44) {
                    atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  }
                  int v45 = sub_100709EFC(a1 + 1112, &v157, (uint64_t *)&v155, (uint64_t)v158);
                  if (v156) {
                    std::__shared_weak_count::__release_weak(v156);
                  }
                  if (!v45)
                  {
LABEL_55:
                    double v53 = 1.79769313e308;
                    goto LABEL_56;
                  }
                  double v47 = *(double *)&buf[24];
                  *(double *)v46.uint64_t i64 = *(double *)&buf[32] * 0.0174532925;
                  double v49 = *(double *)&v158[24];
                  double v48 = *(double *)&v158[32];
                  v50.i64[1] = 0;
                  if (fabs(*(double *)&buf[32] * 0.0174532925) <= 3.14159265)
                  {
                    int8x16_t v52 = (int8x16_t)0x400921FB54442D18uLL;
                  }
                  else
                  {
                    int8x16_t v140 = vbslq_s8(v148, (int8x16_t)0x400921FB54442D18uLL, v46);
                    long double v51 = fmod(*(double *)v46.i64 + *(double *)v140.i64, 6.28318531);
                    int8x16_t v52 = (int8x16_t)0x400921FB54442D18uLL;
                    v50.i64[1] = v140.i64[1];
                    *(double *)v46.uint64_t i64 = v51 - *(double *)v140.i64;
                  }
                  *(double *)v50.uint64_t i64 = v48 * 0.0174532925;
                  v72.i64[1] = v52.i64[1];
                  if (fabs(v48 * 0.0174532925) > *(double *)v52.i64)
                  {
                    uint64_t v142 = v46.i64[0];
                    double v138 = *(double *)vbslq_s8(v148, v52, v50).i64;
                    *(double *)v72.uint64_t i64 = fmod(*(double *)v50.i64 + v138, 6.28318531);
                    int8x16_t v52 = (int8x16_t)0x400921FB54442D18uLL;
                    v46.i64[0] = v142;
                    *(double *)v50.uint64_t i64 = *(double *)v72.i64 - v138;
                  }
                  double v73 = 0.5;
                  *(double *)v72.uint64_t i64 = *(double *)v46.i64 - *(double *)v50.i64;
                  if (vabdd_f64(*(double *)v46.i64, *(double *)v50.i64) > *(double *)v52.i64)
                  {
                    double v143 = *(double *)vbslq_s8(v148, v52, v72).i64;
                    *(double *)v72.uint64_t i64 = fmod(*(double *)v72.i64 + v143, 6.28318531) - v143;
                  }
                  double v74 = v41 * v41;
                  double v75 = v47 - v49;
                  double v76 = *(double *)&v159 * *(double *)&v159;
                }
                double v77 = v74 * v73;
                unsigned int v78 = *((_DWORD *)v8 + 100);
                if ((v78 - 1 >= 5 && v78 != 10 || v78 < 3 || *(double *)&buf[80] < 1.0)
                  && (*(_DWORD *)(v5 + 128) | 2) == 3)
                {
                  double v79 = *(double *)(v5 + 88);
                  if (v79 > 0.0 && v79 < 5.0)
                  {
                    double v80 = *(double *)(v5 + 80);
                    _NF = v80 < 2.0;
                    double v81 = v77 + v80 * v80;
                    if (!_NF) {
                      double v77 = v81;
                    }
                  }
                }
                double v53 = v147 * v75 * (v147 * v75) * (1.0 / (v76 * v73 + v77))
                    + v11
                    * (*(double *)v72.i64
                     * 57.2957795)
                    * (v11
                     * (*(double *)v72.i64
                      * 57.2957795))
                    * (1.0
                     / (v76 * v73 + v77));
LABEL_56:
                int v61 = v152;
                if (v53 < v10) {
                  int v61 = v8;
                }
                int v152 = v61;
                if (v53 < v10) {
                  double v10 = v53;
                }
                unsigned int v62 = *((_DWORD *)v8 + 100) - 1;
                if (v62 < 0xA && ((0x21Fu >> v62) & 1) != 0 || *(unsigned char *)(a1 + 2096))
                {
                  double v63 = 6.18007;
                }
                else
                {
                  int v64 = *(_DWORD *)(v5 + 128);
                  if ((v64 & 0xFFFFFFFE) == 6 || v64 == 8) {
                    double v63 = 6.18007;
                  }
                  else {
                    double v63 = 11.8292;
                  }
                }
                if (v53 <= v63)
                {
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1022FFA18);
                  }
                  __int16 v66 = qword_102419518;
                  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                  {
                    int v67 = *((_DWORD *)v8 + 165);
                    int v68 = *((_DWORD *)v8 + 167);
                    *(_DWORD *)uint64_t buf = 134349824;
                    *(double *)&uint8_t buf[4] = v53;
                    *(_WORD *)&unsigned char buf[12] = 2050;
                    *(double *)&buf[14] = v63;
                    *(_WORD *)&unsigned char buf[22] = 1026;
                    *(_DWORD *)&unsigned char buf[24] = v67;
                    *(_WORD *)&unsigned char buf[28] = 1026;
                    *(_DWORD *)&buf[30] = v68;
                    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#fusion,data association success,mahalanobis distance (squared),%{public}.2f,GatingThreshold,%{public}.2f,hID,%{public}d,hypothesisState,%{public}d", buf, 0x22u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1022FFA18);
                    }
                    int v82 = *((_DWORD *)v8 + 165);
                    int v83 = *((_DWORD *)v8 + 167);
                    *(_DWORD *)uint64_t v158 = 134349824;
                    *(double *)&v158[4] = v53;
                    *(_WORD *)&v158[12] = 2050;
                    *(double *)&v158[14] = v63;
                    *(_WORD *)&v158[22] = 1026;
                    *(_DWORD *)&v158[24] = v82;
                    *(_WORD *)&v158[28] = 1026;
                    *(_DWORD *)&v158[30] = v83;
                    double v84 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v84);
                    if (v84 != buf) {
                      free(v84);
                    }
                  }
                  unint64_t v69 = v8[6] + v8[5] - 1;
                  uint64_t v70 = *(void *)(v8[2] + 8 * (v69 / 0x17));
                  unint64_t v71 = v69 % 0x17;
                  if (*(unsigned char *)(v70 + 176 * v71 + 168)) {
                    sub_1000318C0(v70 + 176 * v71 + 32, (uint64_t)"data association success", *((_DWORD *)v8 + 165));
                  }
                  sub_100188860((int64x2_t *)(v8 + 1), a2);
                  char v150 = 1;
                }
                else
                {
                  if (*((_DWORD *)v8 + 167) == 2) {
                    *((_DWORD *)v8 + 167) = 3;
                  }
                  ++*((_DWORD *)v8 + 166);
                }
                _Q3 = v151;
                __int16 v8 = (uint64_t *)*v8;
              }
              while (v8);
              uint64_t v7 = v146;
              if (v150) {
                goto LABEL_165;
              }
              BOOL v91 = *(uint64_t **)(a1 + 240);
              if (v91)
              {
                do
                {
                  double v92 = sub_10132D590(*(void *)(v91[2] + 8 * (v91[5] / 0x17uLL)) + 176 * (v91[5] % 0x17uLL));
                  if (v92 < 15.0)
                  {
                    double v93 = v92;
                    __int16 v94 = *(unsigned char **)(a1 + 2088);
                    if (!v94 || !v94[1] || !*v94)
                    {
                      double v155 = v92 / 15.0 * 0.2 + 0.00000001;
                      BOOL v95 = (long double *)(v91 + 80);
                      double v96 = *((double *)v91 + 80);
                      if (v155 < v96) {
                        BOOL v95 = &v155;
                      }
                      if (v96 < 0.00000001) {
                        BOOL v95 = (long double *)&unk_101D944E8;
                      }
                      sub_10132E90C((uint64_t)(v91 + 1), *v95);
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1022FFA18);
                      }
                      double v97 = qword_102419518;
                      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                      {
                        int v98 = *((_DWORD *)v91 + 165);
                        uint64_t v99 = v91[80];
                        *(_DWORD *)uint64_t buf = 67240704;
                        *(_DWORD *)&uint8_t buf[4] = v98;
                        *(_WORD *)&uint8_t buf[8] = 2050;
                        *(double *)&buf[10] = v93;
                        *(_WORD *)&unsigned char buf[18] = 2050;
                        *(void *)&buf[20] = v99;
                        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "Provisional hypothesis likelihood restricted hID,%{public}d,age,%{public}.3f,likelihood,%{public}.3f", buf, 0x1Cu);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419510 != -1) {
                          dispatch_once(&qword_102419510, &stru_1022FFA18);
                        }
                        int v100 = *((_DWORD *)v91 + 165);
                        uint64_t v101 = v91[80];
                        *(_DWORD *)uint64_t v158 = 67240704;
                        *(_DWORD *)&v158[4] = v100;
                        *(_WORD *)&v158[8] = 2050;
                        *(double *)&unsigned char v158[10] = v93;
                        *(_WORD *)&v158[18] = 2050;
                        *(void *)&v158[20] = v101;
                        uint64_t v102 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v102);
                        if (v102 != buf) {
                          free(v102);
                        }
                      }
                    }
                  }
                  BOOL v91 = (uint64_t *)*v91;
                }
                while (v91);
                uint64_t v7 = v146;
              }
            }
            else
            {
              int v152 = 0;
              double v10 = 1.79769313e308;
            }
            bzero(buf, 0x2D0uLL);
            sub_1008A93D4((uint64_t)buf);
            uint64_t v103 = *(void *)(a1 + 240);
            double v104 = (char *)operator new(0x2D8uLL);
            *(void *)double v104 = v103;
            *(_OWORD *)(v104 + 8) = *(_OWORD *)buf;
            uint64_t v105 = *(void *)&buf[24];
            *((void *)v104 + 3) = *(void *)&buf[16];
            *((void *)v104 + 4) = v105;
            memset(buf, 0, 32);
            *(_OWORD *)(v104 + 40) = *(_OWORD *)&buf[32];
            *(_OWORD *)&unsigned char buf[32] = 0u;
            memcpy(v104 + 56, &buf[48], 0x218uLL);
            long long v106 = v168;
            long long v168 = 0u;
            long long v107 = v169;
            long long v108 = v170;
            *((_OWORD *)v104 + 37) = v106;
            *((_OWORD *)v104 + 38) = v107;
            long long v109 = v173;
            long long v110 = v175;
            *((_OWORD *)v104 + 43) = v174;
            *((_OWORD *)v104 + 44) = v110;
            long long v111 = v171;
            long long v112 = v172;
            *((_OWORD *)v104 + 39) = v108;
            *((_OWORD *)v104 + 40) = v111;
            *((_DWORD *)v104 + 180) = v176;
            *((_OWORD *)v104 + 41) = v112;
            *((_OWORD *)v104 + 42) = v109;
            *(void *)(a1 + 240) = v104;
            sub_1008A9614(buf);
            sub_10095C268(a1 + 2272);
            uint64_t v113 = *(void *)(a1 + 240);
            *(_DWORD *)(v113 + 400) = *(_DWORD *)(a1 + 1912);
            sub_100188860((int64x2_t *)(v113 + 8), a2);
            *(_OWORD *)(*(void *)(a1 + 240) + 640) = xmmword_101D943F0;
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            long long v114 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v115 = *(void *)(a1 + 240);
              int v116 = *(_DWORD *)(v115 + 660);
              uint64_t v117 = *(void *)(v115 + 640);
              uint64_t v118 = *(void *)(v115 + 648);
              *(_DWORD *)uint64_t buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v116;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = v117;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = v118;
              _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "New hypothesis created,hID,%d,Likelihood,%.5f,logLikelihood,%.5f", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              uint64_t v130 = *(void *)(a1 + 240);
              int v131 = *(_DWORD *)(v130 + 660);
              uint64_t v132 = *(void *)(v130 + 640);
              uint64_t v133 = *(void *)(v130 + 648);
              *(_DWORD *)uint64_t v158 = 67109632;
              *(_DWORD *)&v158[4] = v131;
              *(_WORD *)&v158[8] = 2048;
              *(void *)&unsigned char v158[10] = v132;
              *(_WORD *)&v158[18] = 2048;
              *(void *)&v158[20] = v133;
              double v134 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v134);
              if (v134 != buf) {
                free(v134);
              }
            }
            if (v152)
            {
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              int v119 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v120 = *((_DWORD *)v152 + 165);
                int v121 = *(_DWORD *)(*(void *)(a1 + 240) + 660);
                *(_DWORD *)uint64_t buf = 134349568;
                *(double *)&uint8_t buf[4] = v10;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)&buf[14] = v120;
                *(_WORD *)&unsigned char buf[18] = 1026;
                *(_DWORD *)&buf[20] = v121;
                _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "fusion data association failed,smallest mahalanobis distance (squared),%{public}.2f,hID,%{public}d,newhypothesisID,%{public}d", buf, 0x18u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1022FFA18);
                }
                int v135 = *((_DWORD *)v152 + 165);
                int v136 = *(_DWORD *)(*(void *)(a1 + 240) + 660);
                *(_DWORD *)uint64_t v158 = 134349568;
                *(double *)&v158[4] = v10;
                *(_WORD *)&v158[12] = 1026;
                *(_DWORD *)&v158[14] = v135;
                *(_WORD *)&v158[18] = 1026;
                *(_DWORD *)&v158[20] = v136;
                __int16 v137 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v137);
                if (v137 != buf) {
                  free(v137);
                }
              }
              unint64_t v122 = v152[6] + v152[5] - 1;
              uint64_t v123 = *(void *)(v152[2] + 8 * (v122 / 0x17));
              unint64_t v124 = v122 % 0x17;
              if (*(unsigned char *)(v123 + 176 * v124 + 168)) {
                sub_1000318C0(v123 + 176 * v124 + 32, (uint64_t)"nearest hypothesis to input location where association failed", *((_DWORD *)v152 + 165));
              }
            }
            uint64_t v125 = *(void *)(a1 + 240);
            unint64_t v126 = *(void *)(v125 + 48) + *(void *)(v125 + 40) - 1;
            uint64_t v127 = *(void *)(*(void *)(v125 + 16) + 8 * (v126 / 0x17));
            unint64_t v128 = v126 % 0x17;
            if (*(unsigned char *)(v127 + 176 * v128 + 168)) {
              sub_1000318C0(v127 + 176 * v128 + 32, (uint64_t)"newly created fused hypothesis", *(_DWORD *)(v125 + 660));
            }
          }
          else
          {
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            BOOL v89 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "#Error,fusion data association, calc_dNdE failed", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              *(_WORD *)uint64_t v158 = 0;
              __int16 v90 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v90);
              if (v90 != buf) {
                free(v90);
              }
            }
          }
LABEL_165:
          double v87 = v149;
LABEL_117:
          sub_1000DB0A0(v87);
          return v7;
        }
      }
    }
  }
  BOOL v85 = v3;
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  __int16 v86 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "#Error,fusion data association: init failed, null or hunc <= 0", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    *(_WORD *)uint64_t v158 = 0;
    double v129 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)", "%s\n", v129);
    if (v129 != buf) {
      free(v129);
    }
  }
  uint64_t v7 = 0;
  double v87 = v85;
  if (v85) {
    goto LABEL_117;
  }
  return v7;
}

void sub_100070D88(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100070DA0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    return sub_1000741C4(a1, a2);
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v4 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)uint64_t buf = 67240192;
      int v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::getFilterLatestEstimate(LCFusionProviderLocation &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return 0;
  }
}

void sub_100070FA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100070FB0(uint64_t a1, double *a2)
{
  int v4 = (int *)(a1 + 1912);
  BOOL v5 = sub_100071574(a1 + 1112, a2, (_DWORD *)(a1 + 1912));
  if (!v5)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v6 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v7 = *a2;
      int v8 = *v4;
      *(_DWORD *)uint64_t buf = 134349312;
      double v28 = v7;
      __int16 v29 = 1026;
      int v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,Failed to update fusion predictor filter dynamics mode,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  char v9 = !v5;
  double v10 = *(void **)(a1 + 216);
  if (v10 != (void *)(a1 + 224))
  {
    do
    {
      if (!sub_100071574((uint64_t)(v10 + 11), a2, (_DWORD *)(a1 + 1912)))
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        double v11 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          double v12 = *a2;
          int v13 = *v4;
          int v14 = *((_DWORD *)v10 + 173);
          *(_DWORD *)uint64_t buf = 134349568;
          double v28 = v12;
          __int16 v29 = 1026;
          int v30 = v13;
          __int16 v31 = 1026;
          int v32 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,Failed to update provider hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d", buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          unint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        char v9 = 1;
      }
      uint64_t v15 = (void *)v10[1];
      if (v15)
      {
        do
        {
          float64x2_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          float64x2_t v16 = (void *)v10[2];
          BOOL v17 = *v16 == (void)v10;
          double v10 = v16;
        }
        while (!v17);
      }
      double v10 = v16;
    }
    while (v16 != (void *)(a1 + 224));
  }
  for (double i = *(uint64_t **)(a1 + 240); i; double i = (uint64_t *)*i)
  {
    if (!sub_100071574((uint64_t)(i + 7), a2, v4))
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      uint64_t v20 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        double v21 = *a2;
        int v22 = *v4;
        int v23 = *((_DWORD *)i + 165);
        *(_DWORD *)uint64_t buf = 134349568;
        double v28 = v21;
        __int16 v29 = 1026;
        int v30 = v22;
        __int16 v31 = 1026;
        int v32 = v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,Failed to update fused hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        BOOL v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      char v9 = 1;
    }
  }
  return v9 & 1;
}

void sub_10007155C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100071574(uint64_t a1, double *a2, _DWORD *a3)
{
  sub_100071848(a1, a2);
  if (!*(unsigned char *)a1)
  {
    *(_DWORD *)(a1 + 344) = *a3;
    return 1;
  }
  if ((*a3 - 2) >= 9 && *a3 != 0)
  {
    sub_100071A64(a1, a2, -1.0);
    int v17 = *a3;
LABEL_24:
    *(_DWORD *)(a1 + 344) = v17;
    sub_100073DE4(a1, (uint64_t)"DynamicsMode-based propagation and update");
    return 1;
  }
  if (sub_100074400(a1, a2))
  {
    int v17 = *a3;
    int v7 = *a3 - 1;
    double v8 = 20.0;
    if (v7 <= 9) {
      double v8 = dbl_101D2AC10[v7];
    }
    double v9 = v8 * v8 * 0.5;
    if (*(double *)(a1 + 248) > v9 || *(double *)(a1 + 288) > v9)
    {
      uint64_t v10 = *(void *)(a1 + 176);
      uint64_t v11 = *(void *)(a1 + 208);
      *(_OWORD *)(a1 + 200) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_OWORD *)(a1 + 184) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(void *)(a1 + 280) = 0;
      *(_OWORD *)(a1 + 264) = 0u;
      *(double *)(a1 + 248) = v9;
      *(double *)(a1 + 288) = v9;
      *(void *)(a1 + 200) = v10;
      *(void *)(a1 + 208) = v11;
    }
    goto LABEL_24;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  double v12 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(_DWORD *)(a1 + 564);
    double v14 = *a2;
    *(_DWORD *)uint64_t buf = 67240448;
    int v19 = v13;
    __int16 v20 = 2050;
    double v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,DynamicsMode-based prediction failed", buf, 0x12u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    float64x2_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictOnDynamicsModeUpdate(const CFTimeInterval &, const LCFusionDynamicsMode &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return 0;
  }
  return result;
}

void sub_10007183C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100071848(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 568))
  {
    double v4 = *a2;
    double v5 = *(double *)(a1 + 576);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v6 = v4 - v5;
    int v7 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 564);
      double v9 = *a2;
      *(_DWORD *)uint64_t buf = 67240704;
      int v12 = v8;
      __int16 v13 = 2050;
      double v14 = v9;
      __int16 v15 = 2050;
      double v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,called while state is in sleep mode,%{public}.2f,waking up", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::checkAndUpdateSleepState(const CFTimeInterval &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(a1 + 568) = 0;
    *(void *)(a1 + 576) = 0xBFF0000000000000;
  }
}

void sub_100071A58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100071A64(uint64_t a1, double *a2, double a3)
{
  double v5 = *a2;
  double v6 = *(double *)(a1 + 352);
  if (a3 < 0.0 || v5 >= v6)
  {
LABEL_14:
    *(double *)uint64_t buf = v5;
    *(_OWORD *)double v21 = xmmword_101D2ABE0;
    *(_OWORD *)&v21[16] = xmmword_101D2ABE0;
    BOOL v11 = sub_100072914(a1, (uint64_t)buf);
    if (*(unsigned char *)(a1 + 336))
    {
      double v16 = v5;
      *(_OWORD *)int v17 = xmmword_101D2ABF0;
      return v11 & sub_100071CFC(a1, &v16);
    }
    return v11;
  }
  if (v6 - v5 <= a3)
  {
    double v5 = v6 + 0.001;
    goto LABEL_14;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  int v8 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(_DWORD *)(a1 + 564);
    double v10 = *(double *)(a1 + 352);
    *(_DWORD *)uint64_t buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)double v21 = 2050;
    *(double *)&v21[2] = v10;
    *(_WORD *)&v21[10] = 2050;
    *(double *)&v21[12] = v10 - v5;
    *(_WORD *)&v21[20] = 2050;
    *(double *)&v21[22] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,time-lagged zupt is ignored,filter mct,%{public}.3f,zupt timelag,%{public}.3f,tolerance,%{public}.3f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v13 = *(_DWORD *)(a1 + 564);
    double v14 = *(double *)(a1 + 352);
    LODWORD(v16) = 67240960;
    HIDWORD(v16) = v13;
    *(_WORD *)int v17 = 2050;
    *(double *)&v17[2] = v14;
    *(_WORD *)&unsigned char v17[10] = 2050;
    *(double *)&v17[12] = v14 - v5;
    __int16 v18 = 2050;
    double v19 = a3;
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::zupt(const CFTimeInterval &, const double)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return 0;
}

void sub_100071CF0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100071CFC(uint64_t a1, double *a2)
{
  if (!*(unsigned char *)a1)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v9 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(a1 + 564);
      double v11 = *a2;
      *(_DWORD *)uint64_t buf = 67240448;
      int v25 = v10;
      __int16 v26 = 2050;
      double v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized VVel Meas ignored,mct,%{public}.3f", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_37;
    }
    goto LABEL_39;
  }
  if (!*(unsigned char *)(a1 + 336))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v17 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a1 + 564);
      double v19 = *a2;
      *(_DWORD *)uint64_t buf = 67240448;
      int v25 = v18;
      __int16 v26 = 2050;
      double v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter has no altitude data, VVel Meas ignored,mct,%{public}.3f", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_37;
    }
    goto LABEL_39;
  }
  if (*a2 <= 0.0 || (double v4 = a2 + 2, a2[2] <= 0.0))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v12 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(_DWORD *)(a1 + 564);
      double v14 = *a2;
      double v15 = a2[1];
      uint64_t v16 = *((void *)a2 + 2);
      *(_DWORD *)uint64_t buf = 67240961;
      int v25 = v13;
      __int16 v26 = 2050;
      double v27 = v14;
      __int16 v28 = 2049;
      double v29 = v15;
      __int16 v30 = 2050;
      uint64_t v31 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,invalid VVel Meas ignored,timetagMCT,%{public}.3f,VVel_mps,%{private}.2f,VVelVar,%{public}.2f", buf, 0x26u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_37;
    }
    goto LABEL_39;
  }
  if (*a2 - *(double *)(a1 + 352) < 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v5 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 564);
      double v7 = *(double *)(a1 + 352);
      double v8 = *a2;
      *(_DWORD *)uint64_t buf = 67240704;
      int v25 = v6;
      __int16 v26 = 2050;
      double v27 = v7;
      __int16 v28 = 2050;
      double v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,old VVel Meas ignored,filterMCT,%{public}.3f,VVelMCT,%{public}.3f", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1)
    {
LABEL_37:
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithVerticalVelocity(const VerticalVelocityMeasurement &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
      return 0;
    }
LABEL_39:
    dispatch_once(&qword_102419510, &stru_1022C5660);
    goto LABEL_37;
  }
  uint64_t v21 = a1 + 296;
  int v22 = a2 + 1;

  return sub_1000723D4(v21, v22, v4, (_DWORD *)(a1 + 344));
}

void sub_1000723C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1000723D4(uint64_t a1, double *a2, double *a3, _DWORD *a4)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (*(double *)(a1 + 8) <= 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v14 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      int v15 = *(unsigned __int8 *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)int v23 = v15;
      *(_WORD *)&v23[4] = 2050;
      *(void *)&v23[6] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "KFCV:,#Error,updateAltitudeRate() failed,initialized,%{public}d,altVar,%{public}.2f", buf, 0x12u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::updateAltitudeRate(const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v13);
      goto LABEL_22;
    }
  }
  else
  {
    if (*a3 <= 0.0) {
      goto LABEL_7;
    }
    int v7 = *a4 - 1;
    double v8 = 4.0;
    if (v7 <= 9) {
      double v8 = dbl_101D2AEA8[v7];
    }
    if (*a3 <= v8)
    {
      double v17 = *a2;
      if (v7 > 9) {
        double v18 = 1600.0;
      }
      else {
        double v18 = dbl_101D2AEF8[v7];
      }
      if (v17 * v17 <= v18)
      {
        *(double *)(a1 + 16) = v17;
        *(double *)(a1 + 24) = *a3 * *a3;
        *(double *)(a1 + 32) = *a2;
        return 1;
      }
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      double v19 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        double v20 = *a2;
        double v21 = *a3;
        *(_DWORD *)uint64_t buf = 134349312;
        *(double *)int v23 = v20;
        *(_WORD *)&v23[8] = 2050;
        *(double *)&v23[10] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "KFCV:,invalid altRate,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x16u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1) {
          goto LABEL_13;
        }
        goto LABEL_38;
      }
    }
    else
    {
LABEL_7:
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v9 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        double v10 = *a2;
        double v11 = *a3;
        *(_DWORD *)uint64_t buf = 134349312;
        *(double *)int v23 = v10;
        *(_WORD *)&v23[8] = 2050;
        *(double *)&v23[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "KFCV:,invalid altRateUnc,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x16u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1)
        {
LABEL_13:
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::updateAltitudeRate(const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v13);
LABEL_22:
          if (v13 != (char *)buf) {
            free(v13);
          }
          return 0;
        }
LABEL_38:
        dispatch_once(&qword_102419510, &stru_1022C5660);
        goto LABEL_13;
      }
    }
  }
  return result;
}

void sub_100072908(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100072914(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v18 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *(_DWORD *)(a1 + 564);
      double v20 = *(double *)a2;
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v19;
      __int16 v93 = 2050;
      double v94 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized GSpeed Meas ignored,mct,%{public}.3f", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v73 = *(_DWORD *)(a1 + 564);
    double v74 = *(double *)a2;
    *(_DWORD *)double v87 = 67240448;
    *(_DWORD *)&v87[4] = v73;
    *(_WORD *)&v87[8] = 2050;
    *(double *)&v87[10] = v74;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v17);
    goto LABEL_81;
  }
  if (*(double *)a2 <= 0.0
    || *(double *)(a2 + 16) <= 0.0
    || *(double *)(a2 + 8) < 0.0
    || *(double *)(a2 + 24) < 0.0
    || (double v23 = *(double *)(a2 + 32), v23 <= 0.0)
    || v23 > 0.616850275)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v4 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 564);
      double v6 = *(double *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      uint64_t v10 = *(void *)(a2 + 32);
      *(_DWORD *)uint64_t buf = 67241473;
      *(_DWORD *)&uint8_t buf[4] = v5;
      __int16 v93 = 2050;
      double v94 = v6;
      __int16 v95 = 2049;
      uint64_t v96 = v7;
      __int16 v97 = 2050;
      uint64_t v98 = v8;
      __int16 v99 = 2049;
      uint64_t v100 = v9;
      __int16 v101 = 2050;
      uint64_t v102 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,invalid GSpeed Meas ignored,timetagMCT,%{public}.3f,GSpeedmps,%{private}.2f,speedVar,%{public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f", buf, 0x3Au);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v11 = *(_DWORD *)(a1 + 564);
    double v12 = *(double *)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v15 = *(void *)(a2 + 24);
    uint64_t v16 = *(void *)(a2 + 32);
    *(_DWORD *)double v87 = 67241473;
    *(_DWORD *)&v87[4] = v11;
    *(_WORD *)&v87[8] = 2050;
    *(double *)&v87[10] = v12;
    *(_WORD *)&v87[18] = 2049;
    *(void *)&v87[20] = v13;
    *(_WORD *)&v87[28] = 2050;
    *(void *)&v87[30] = v14;
    *(_WORD *)&v87[38] = 2049;
    *(void *)&v87[40] = v15;
    LOWORD(v88) = 2050;
    *(void *)((char *)&v88 + 2) = v16;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v17);
    goto LABEL_81;
  }
  if (*(double *)a2 - *(double *)(a1 + 352) < 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    BOOL v24 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a1 + 564);
      double v26 = *(double *)(a1 + 352);
      double v27 = *(double *)a2;
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v25;
      __int16 v93 = 2050;
      double v94 = v26;
      __int16 v95 = 2050;
      uint64_t v96 = *(void *)&v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,old GSpeed Meas ignored,filterMCT,%{public}.3f,GSpeedMeasMCT,%{public}.3f", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_30;
    }
LABEL_87:
    dispatch_once(&qword_102419510, &stru_1022C5660);
LABEL_30:
    int v28 = *(_DWORD *)(a1 + 564);
    uint64_t v29 = *(void *)(a1 + 352);
    double v30 = *(double *)a2;
    *(_DWORD *)double v87 = 67240704;
    *(_DWORD *)&v87[4] = v28;
    *(_WORD *)&v87[8] = 2050;
    *(void *)&v87[10] = v29;
    *(_WORD *)&v87[18] = 2050;
    *(double *)&v87[20] = v30;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v17);
LABEL_81:
    if (v17 != (char *)buf) {
      free(v17);
    }
    return 0;
  }
  if (!sub_100074400(a1, (double *)a2))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v53 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v54 = *(_DWORD *)(a1 + 564);
      double v55 = *(double *)(a1 + 352);
      double v56 = *(double *)a2;
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v54;
      __int16 v93 = 2050;
      double v94 = v55;
      __int16 v95 = 2050;
      uint64_t v96 = *(void *)&v56;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter time-update failed GSpeed Meas ignored,filterMCT,%{public}.3f,GSpeedMeasMCT,%{public}.3f", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_30;
    }
    goto LABEL_87;
  }
  double v31 = *(double *)(a2 + 8);
  long double v32 = *(double *)(a2 + 24);
  double v33 = sin(v32);
  long double v34 = cos(sqrt(*(double *)(a2 + 32)));
  double v35 = sqrt(*(double *)(a2 + 16));
  double v36 = v35 * (1.0 / v34) * (v35 * (1.0 / v34)) * 0.5;
  uint64_t v37 = *(void *)(a1 + 168);
  long long v38 = *(_OWORD *)(a1 + 192);
  long long v90 = *(_OWORD *)(a1 + 176);
  long long v91 = v38;
  long long v39 = *(_OWORD *)(a1 + 264);
  long long v40 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)&v87[32] = *(_OWORD *)(a1 + 248);
  long long v88 = v39;
  uint64_t v41 = *(void *)(a1 + 208);
  long long v89 = v40;
  long long v42 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)double v87 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v87[16] = v42;
  double v43 = *(double *)(a1 + 248);
  double v44 = v36 + v43;
  if (v36 + v43 <= 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v57 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      int v58 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,GSpeed velN innovation_var <= 0", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v59 = *(_DWORD *)(a1 + 564);
    LODWORD(v84.f64[0]) = 67240192;
    HIDWORD(v84.f64[0]) = v59;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v17);
    goto LABEL_81;
  }
  *(double *)v45.uint64_t i64 = cos(v32);
  *(double *)v46.uint64_t i64 = *(double *)(a1 + 216) / v44;
  v84.f64[0] = *(double *)(a1 + 184) / v44;
  *(void *)&v84.f64[1] = v46.i64[0];
  *(double *)v46.uint64_t i64 = *(double *)(a1 + 280) / v44;
  double v85 = v43 / v44;
  double v86 = *(double *)v46.i64;
  double v77 = v31 * *(double *)v45.i64 - *(double *)(a1 + 24);
  if (v77 * v77 / v44 <= 100.0)
  {
    *(double *)v45.uint64_t i64 = v77 * v77;
    sub_1000737BC(a1, &v77, v84.f64, v45, 100.0, v46);
    *(void *)uint64_t buf = 0x3FF0000000000000;
    sub_100073B0C(a1, &v84, 2, (double *)buf);
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v47 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v48 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v48;
      __int16 v93 = 2050;
      double v94 = v77 * v77 / v44;
      __int16 v95 = 2050;
      uint64_t v96 = 0x4059000000000000;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,GSpeed velN innovation test failed,nis,%{public}.3f,threshold,%{public}.3f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v51 = *(_DWORD *)(a1 + 564);
      int v78 = 67240704;
      int v79 = v51;
      __int16 v80 = 2050;
      double v81 = v77 * v77 / v44;
      __int16 v82 = 2050;
      uint64_t v83 = 0x4059000000000000;
      int8x16_t v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
  }
  double v60 = *(double *)(a1 + 288);
  *(double *)v49.uint64_t i64 = v36 + v60;
  BOOL v21 = v36 + v60 > 0.0;
  if (v36 + v60 <= 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v67 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      int v68 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v68;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,GSpeed velE innovation_var <= 0", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v75 = *(_DWORD *)(a1 + 564);
      int v78 = 67240192;
      int v79 = v75;
      double v76 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v76);
      if (v76 != (char *)buf) {
        free(v76);
      }
    }
    *(void *)(a1 + 168) = v37;
    long long v69 = v91;
    long long v70 = v89;
    *(_OWORD *)(a1 + 176) = v90;
    *(_OWORD *)(a1 + 192) = v69;
    *(void *)(a1 + 208) = v41;
    long long v71 = v88;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)&v87[32];
    *(_OWORD *)(a1 + 264) = v71;
    *(_OWORD *)(a1 + 280) = v70;
    long long v72 = *(_OWORD *)&v87[16];
    *(_OWORD *)(a1 + 216) = *(_OWORD *)v87;
    *(_OWORD *)(a1 + 232) = v72;
  }
  else
  {
    double v61 = *(double *)(a1 + 224) / *(double *)v49.i64;
    v84.f64[0] = *(double *)(a1 + 192) / *(double *)v49.i64;
    v84.f64[1] = v61;
    double v85 = *(double *)(a1 + 256) / *(double *)v49.i64;
    double v86 = v60 / *(double *)v49.i64;
    double v77 = v31 * v33 - *(double *)(a1 + 32);
    v50.i64[0] = 0x4059000000000000;
    double v62 = v77 * v77 / *(double *)v49.i64;
    if (v62 <= 100.0)
    {
      sub_1000737BC(a1, &v77, v84.f64, v49, v77 * v77, v50);
      *(void *)uint64_t buf = 0x3FF0000000000000;
      sub_100073B0C(a1, &v84, 3, (double *)buf);
    }
    else
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      double v63 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        int v64 = *(_DWORD *)(a1 + 564);
        *(_DWORD *)uint64_t buf = 67240704;
        *(_DWORD *)&uint8_t buf[4] = v64;
        __int16 v93 = 2050;
        double v94 = v62;
        __int16 v95 = 2050;
        uint64_t v96 = 0x4059000000000000;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,GSpeed velE innovation test failed,nis,%{public}.3f,threshold,%{public}.3f", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022C5660);
        }
        int v65 = *(_DWORD *)(a1 + 564);
        int v78 = 67240704;
        int v79 = v65;
        __int16 v80 = 2050;
        double v81 = v62;
        __int16 v82 = 2050;
        uint64_t v83 = 0x4059000000000000;
        __int16 v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v66);
        if (v66 != (char *)buf) {
          free(v66);
        }
      }
    }
    *(void *)(a1 + 168) = v37;
    *(void *)(a1 + 208) = v41;
    *(void *)(a1 + 368) = 0;
    *(unsigned char *)(a1 + 560) = 0;
    sub_100073DE4(a1, (uint64_t)"update with GSpeed success");
  }
  return v21;
}

void sub_1000737B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1000737BC(uint64_t a1, double *a2, double *a3, int8x16_t a4, double a5, int8x16_t a6)
{
  if (*(unsigned char *)(a1 + 424) && *(unsigned char *)(a1 + 440)) {
    goto LABEL_5;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (sub_1001BD27C((double *)(a1 + 480), (double *)&v26, (double *)&v25, *(double *)(a1 + 8) * 57.2957795, *(double *)(a1 + 384)))
  {
    *(void *)(a1 + 416) = v25;
    *(unsigned char *)(a1 + 424) = 1;
    *(void *)(a1 + 432) = v26;
    *(unsigned char *)(a1 + 440) = 1;
LABEL_5:
    *(double *)a4.uint64_t i64 = *(double *)(a1 + 8) + *a2 * *a3 / *(double *)(a1 + 432);
    a6.i64[0] = 0x400921FB54442D18;
    int8x16_t v23 = a6;
    if (fabs(*(double *)a4.i64) > 3.14159265)
    {
      v9.f64[0] = NAN;
      v9.f64[1] = NAN;
      double v22 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v9), a6, a4).i64;
      *(double *)a4.uint64_t i64 = fmod(*(double *)a4.i64 + v22, 6.28318531) - v22;
    }
    if (*(double *)a4.i64 >= 1.57079633)
    {
      int8x16_t v10 = v23;
      *(double *)a4.uint64_t i64 = *(double *)v23.i64 - *(double *)a4.i64;
    }
    else
    {
      int8x16_t v10 = v23;
      if (*(double *)a4.i64 < -1.57079633) {
        *(double *)a4.uint64_t i64 = -3.14159265 - *(double *)a4.i64;
      }
    }
    *(void *)(a1 + 8) = a4.i64[0];
    double v11 = *(double *)(a1 + 416);
    double v12 = *(double *)(a1 + 16);
    double v13 = a3[1];
    double v14 = *a2;
    if (v11 <= 0.0) {
      *(double *)a4.uint64_t i64 = v12 + v13 * v14;
    }
    else {
      *(double *)a4.uint64_t i64 = v12 + v13 * v14 / v11;
    }
    if (fabs(*(double *)a4.i64) > *(double *)v10.i64)
    {
      v15.f64[0] = NAN;
      v15.f64[1] = NAN;
      double v24 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v15), v10, a4).i64;
      *(double *)a4.uint64_t i64 = fmod(*(double *)a4.i64 + v24, 6.28318531) - v24;
    }
    *(void *)(a1 + 16) = a4.i64[0];
    double v16 = *(double *)(a1 + 32);
    *(double *)(a1 + 24) = *(double *)(a1 + 24) + a3[2] * *a2;
    *(double *)(a1 + 32) = v16 + a3[3] * *a2;
    return 1;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  double v18 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    int v19 = *(_DWORD *)(a1 + 564);
    *(_DWORD *)uint64_t buf = 67240192;
    int v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,updateStateVector calc_dNdE failed", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v20 = *(_DWORD *)(a1 + 564);
    int v27 = 67240192;
    int v28 = v20;
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateStateVector(const double &, const std::array<double, 4> &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  return 0;
}

void sub_100073B00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

double sub_100073B0C(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4)
{
  uint64_t v5 = 0;
  double v6 = (double *)(a1 + 168);
  long long v7 = *(_OWORD *)(a1 + 248);
  long long v41 = *(_OWORD *)(a1 + 232);
  long long v42 = v7;
  long long v8 = *(_OWORD *)(a1 + 280);
  long long v43 = *(_OWORD *)(a1 + 264);
  long long v44 = v8;
  long long v9 = *(_OWORD *)(a1 + 184);
  long long v37 = *(_OWORD *)(a1 + 168);
  long long v38 = v9;
  long long v10 = *(_OWORD *)(a1 + 216);
  long long v39 = *(_OWORD *)(a1 + 200);
  long long v40 = v10;
  memset(v32, 0, sizeof(v32));
  double v11 = (const double *)(a1 + 168 + 32 * a3);
  double v12 = v11 + 3;
  double v13 = *a4;
  double v14 = v11 + 2;
  float64x2_t v15 = vld1q_dup_f64(v11++);
  float64x2_t v16 = vld1q_dup_f64(v11);
  float64x2_t v17 = vld1q_dup_f64(v14);
  float64x2_t v18 = vld1q_dup_f64(v12);
  do
  {
    float64x2_t v19 = *a2++;
    float64x2_t v20 = vmulq_n_f64(v19, v13);
    v45.val[0] = vmulq_f64(v20, v15);
    v45.val[1] = vmulq_f64(v20, v16);
    v45.val[2] = vmulq_f64(v20, v17);
    v45.val[3] = vmulq_f64(v20, v18);
    BOOL v21 = (double *)&v32[v5];
    vst4q_f64(v21, v45);
    v5 += 4;
  }
  while (v5 != 8);
  for (unint64_t i = 0; i != 128; i += 16)
    *(float64x2_t *)&v6[i / 8] = vsubq_f64(*(float64x2_t *)&v6[i / 8], (float64x2_t)v32[i / 0x10]);
  if (*v6 <= 0.0
    || *(double *)(a1 + 208) <= 0.0
    || *(double *)(a1 + 248) <= 0.0
    || (double result = *(double *)(a1 + 288), result <= 0.0))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v24 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      int v25 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)uint64_t buf = 67240192;
      int v36 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,error covariance matrix diagonal element < 0", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v30 = *(_DWORD *)(a1 + 564);
      int v33 = 67240192;
      int v34 = v30;
      double v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateErrorCovMat(const std::array<double, 4> &, std::size_t, const double &)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    long long v26 = v42;
    *((_OWORD *)v6 + 4) = v41;
    *((_OWORD *)v6 + 5) = v26;
    long long v27 = v44;
    *((_OWORD *)v6 + 6) = v43;
    *((_OWORD *)v6 + 7) = v27;
    long long v28 = v38;
    *(_OWORD *)double v6 = v37;
    *((_OWORD *)v6 + 1) = v28;
    double result = *(double *)&v39;
    long long v29 = v40;
    *((_OWORD *)v6 + 2) = v39;
    *((_OWORD *)v6 + 3) = v29;
  }
  return result;
}

void sub_100073DD8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100073DE4(uint64_t a1, uint64_t a2)
{
  int v25 = off_10232A710;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v26 = _Q0;
  long long v29 = xmmword_101D1C320;
  long long v30 = xmmword_101D1C320;
  long long v31 = _Q0;
  long long v32 = _Q0;
  unint64_t v33 = 0xBFF0000000000000;
  int v34 = 0;
  char v35 = 0;
  int v36 = 0;
  uint64_t v9 = sub_1000741C4(a1, (uint64_t)&v25);
  if (v9)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    long long v10 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 564);
      int v12 = *(_DWORD *)(a1 + 528);
      uint64_t v13 = *(void *)(a1 + 368);
      int v14 = *(_DWORD *)(a1 + 344);
      int v15 = *(_DWORD *)(a1 + 348);
      int v16 = *(unsigned __int8 *)(a1 + 560);
      *(_DWORD *)uint64_t buf = 67244803;
      int v76 = v11;
      __int16 v77 = 2050;
      uint64_t v78 = v26;
      __int16 v79 = 2050;
      uint64_t v80 = *((void *)&v26 + 1);
      __int16 v81 = 1026;
      int v82 = v36;
      __int16 v83 = 1026;
      int v84 = v12;
      __int16 v85 = 2049;
      uint64_t v86 = v27;
      __int16 v87 = 2049;
      uint64_t v88 = v28;
      __int16 v89 = 2049;
      uint64_t v90 = *((void *)&v29 + 1);
      __int16 v91 = 2050;
      uint64_t v92 = v31;
      __int16 v93 = 2050;
      uint64_t v94 = v32;
      __int16 v95 = 2050;
      uint64_t v96 = v29;
      __int16 v97 = 2050;
      uint64_t v98 = v30;
      __int16 v99 = 2050;
      uint64_t v100 = *((void *)&v31 + 1);
      __int16 v101 = 2050;
      uint64_t v102 = *((void *)&v32 + 1);
      __int16 v103 = 2050;
      uint64_t v104 = v13;
      __int16 v105 = 1026;
      int v106 = v14;
      __int16 v107 = 1026;
      int v108 = v15;
      __int16 v109 = 1026;
      int v110 = v16;
      __int16 v111 = 2082;
      uint64_t v112 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "KFCV:FilterStateLog,%{public}d,%{public}.3f,%{public}.3f,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.2f,%{public}d,%{public}d,%{public}d,%{public}s", buf, 0xA8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v18 = *(_DWORD *)(a1 + 564);
      int v19 = *(_DWORD *)(a1 + 528);
      uint64_t v20 = *(void *)(a1 + 368);
      int v21 = *(_DWORD *)(a1 + 344);
      int v22 = *(_DWORD *)(a1 + 348);
      int v23 = *(unsigned __int8 *)(a1 + 560);
      int v37 = 67244803;
      int v38 = v18;
      __int16 v39 = 2050;
      uint64_t v40 = v26;
      __int16 v41 = 2050;
      uint64_t v42 = *((void *)&v26 + 1);
      __int16 v43 = 1026;
      int v44 = v36;
      __int16 v45 = 1026;
      int v46 = v19;
      __int16 v47 = 2049;
      uint64_t v48 = v27;
      __int16 v49 = 2049;
      uint64_t v50 = v28;
      __int16 v51 = 2049;
      uint64_t v52 = *((void *)&v29 + 1);
      __int16 v53 = 2050;
      uint64_t v54 = v31;
      __int16 v55 = 2050;
      uint64_t v56 = v32;
      __int16 v57 = 2050;
      uint64_t v58 = v29;
      __int16 v59 = 2050;
      uint64_t v60 = v30;
      __int16 v61 = 2050;
      uint64_t v62 = *((void *)&v31 + 1);
      __int16 v63 = 2050;
      uint64_t v64 = *((void *)&v32 + 1);
      __int16 v65 = 2050;
      uint64_t v66 = v20;
      __int16 v67 = 1026;
      int v68 = v21;
      __int16 v69 = 1026;
      int v70 = v22;
      __int16 v71 = 1026;
      int v72 = v23;
      __int16 v73 = 2082;
      uint64_t v74 = a2;
      double v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::debugPrintFilterState(const char *)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  return v9;
}

void sub_1000741B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1000741C4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  double v3 = *(double *)(a1 + 352);
  if (v3 <= 0.0) {
    return 0;
  }
  float64x2_t v21 = vmulq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  double v5 = sqrt(*(double *)(a1 + 168) + *(double *)(a1 + 208));
  long double v6 = *(double *)(a1 + 24);
  long double v7 = *(double *)(a1 + 32);
  long double v8 = hypot(v6, v7);
  double v9 = *(double *)(a1 + 248);
  double v10 = *(double *)(a1 + 288);
  double v11 = fmax(sqrt(v9 + v10), 0.001);
  double v12 = -1.0;
  if (v11 <= 30.0)
  {
    if (fabs(v6) > 0.005 || fabs(v7) > 0.005)
    {
      double v15 = atan2(v7, v6);
      if (v15 < 0.0 || v15 >= 6.28318531)
      {
        double v15 = fmod(v15, 6.28318531);
        if (v15 < 0.0) {
          double v15 = v15 + 6.28318531;
        }
      }
      double v13 = v15 * 57.2957795;
      *(double *)(a1 + 400) = v13;
      double v16 = v6 * v6;
      double v17 = v7 * v7;
      if (v6 * v6 < 0.000001) {
        double v16 = 0.000001;
      }
      BOOL v18 = v17 >= 0.000001 || v6 * v6 < 0.000001;
      if (v6 * v6 < 0.000001 && v17 < 0.000001) {
        double v17 = 0.000001;
      }
      if (!v18) {
        double v17 = 0.000001;
      }
      double v12 = sqrt((v9 * v17 + v10 * v16) * (1.0 / (v16 + v17) * (1.0 / (v16 + v17)))) * 57.2957795;
      if (v12 > 180.0) {
        double v12 = 180.0;
      }
    }
    else
    {
      double v13 = *(double *)(a1 + 400);
    }
  }
  else
  {
    long double v8 = -1.0;
    double v13 = -1.0;
  }
  *(float64x2_t *)(a2 + 24) = v21;
  *(double *)(a2 + 40) = v5;
  *(long double *)(a2 + 80) = v8;
  *(double *)(a2 + 88) = v11;
  *(double *)(a2 + 96) = v13;
  *(double *)(a2 + 104) = v12;
  uint64_t v19 = *(void *)(a1 + 536);
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(v19 + 128);
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(v19 + 120);
  *(void *)(a2 + 8) = *(void *)(a1 + 360);
  *(double *)(a2 + 16) = v3;
  if (*(unsigned char *)(a1 + 336) && *(double *)(a1 + 304) > 0.0)
  {
    *(void *)(a2 + 48) = *(void *)(a1 + 296);
    double v20 = sqrt(*(double *)(a1 + 304));
  }
  else
  {
    *(_OWORD *)(a2 + 48) = xmmword_101D1C570;
    double v20 = *(double *)(v19 + 56);
    *(void *)(a2 + 48) = *(void *)(v19 + 48);
  }
  *(double *)(a2 + 56) = v20;
  return 1;
}

BOOL sub_100074400(uint64_t a1, double *a2)
{
  if (!*(unsigned char *)a1)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    double v15 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a1 + 564);
      double v17 = *a2;
      *(_DWORD *)uint64_t buf = 67240448;
      int v96 = v16;
      __int16 v97 = 2050;
      double v98 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,filter is not initialized", buf, 0x12u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      int v18 = *(_DWORD *)(a1 + 564);
      double v19 = *a2;
      int v83 = 67240448;
      int v84 = v18;
      __int16 v85 = 2050;
      double v86 = v19;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v14);
      goto LABEL_19;
    }
    return result;
  }
  sub_100071848(a1, a2);
  if (!*(unsigned char *)(a1 + 560))
  {
    double v20 = *a2 - *(double *)(a1 + 352);
    double v82 = v20;
    if (v20 < 0.0)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      float64x2_t v21 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        int v22 = *(_DWORD *)(a1 + 564);
        double v23 = *a2;
        *(_DWORD *)uint64_t buf = 67240704;
        int v96 = v22;
        __int16 v97 = 2050;
        double v98 = v23;
        __int16 v99 = 2050;
        double v100 = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,predict state skipped,dT < 0,dt,%{public}.6f", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1) {
        goto LABEL_110;
      }
LABEL_122:
      dispatch_once(&qword_102419510, &stru_1022C5660);
LABEL_110:
      int v69 = *(_DWORD *)(a1 + 564);
      double v70 = *a2;
      int v83 = 67240704;
      int v84 = v69;
      __int16 v85 = 2050;
      double v86 = v70;
      __int16 v87 = 2050;
      double v88 = v20;
      __int16 v71 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v71);
      if (v71 != (char *)buf) {
        free(v71);
      }
      return 1;
    }
    if (v20 < 0.001)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      double v24 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        int v25 = *(_DWORD *)(a1 + 564);
        double v26 = *a2;
        *(_DWORD *)uint64_t buf = 67240704;
        int v96 = v25;
        __int16 v97 = 2050;
        double v98 = v26;
        __int16 v99 = 2050;
        double v100 = v20;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,predict state skipped,small dt,%{public}.6f", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1) {
        goto LABEL_110;
      }
      goto LABEL_122;
    }
    if (sub_1000758FC(a1, &v82))
    {
      if (*(unsigned char *)(a1 + 456) && *(unsigned char *)(a1 + 472))
      {
        if (sub_1001892D4(a1, &v82))
        {
          if (*(unsigned char *)(a1 + 424) && *(unsigned char *)(a1 + 440))
          {
LABEL_45:
            if (*(double *)(a1 + 368) > 5.0)
            {
              if (hypot(*(long double *)(a1 + 24), *(long double *)(a1 + 32)) > 0.0) {
                sub_100709908(a1);
              }
              if (!*(unsigned char *)(a1 + 336) || fabs(*(double *)(a1 + 312)) >= 0.001) {
                sub_100709C3C(a1 + 296, (double *)(a1 + 368), (int *)(a1 + 344));
              }
            }
            if (!*(unsigned char *)(a1 + 456) || !*(unsigned char *)(a1 + 472) || !*(unsigned char *)(a1 + 440)) {
              goto LABEL_121;
            }
            double v29 = *(double *)(a1 + 448);
            double v30 = *(double *)(a1 + 24);
            *(double *)v27.uint64_t i64 = *(double *)(a1 + 8) + v29 * v30 / *(double *)(a1 + 432);
            v28.i64[0] = 0x400921FB54442D18;
            int8x16_t v78 = v28;
            if (fabs(*(double *)v27.i64) > 3.14159265)
            {
              v31.f64[0] = NAN;
              v31.f64[1] = NAN;
              double v77 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v31), v28, v27).i64;
              *(double *)v27.uint64_t i64 = fmod(*(double *)v27.i64 + v77, 6.28318531) - v77;
            }
            if (*(double *)v27.i64 >= 1.57079633)
            {
              int8x16_t v32 = v78;
              *(double *)v27.uint64_t i64 = *(double *)v78.i64 - *(double *)v27.i64;
            }
            else
            {
              int8x16_t v32 = v78;
              if (*(double *)v27.i64 < -1.57079633) {
                *(double *)v27.uint64_t i64 = -3.14159265 - *(double *)v27.i64;
              }
            }
            *(void *)(a1 + 8) = v27.i64[0];
            if (!*(unsigned char *)(a1 + 424)) {
LABEL_121:
            }
              sub_10020D700();
            double v44 = *(double *)(a1 + 416);
            double v45 = *(double *)(a1 + 16);
            double v46 = *(double *)(a1 + 32);
            if (v44 <= 0.0) {
              *(double *)v27.uint64_t i64 = v45 + v29 * v46;
            }
            else {
              *(double *)v27.uint64_t i64 = v45 + v29 * v46 / v44;
            }
            if (fabs(*(double *)v27.i64) > *(double *)v32.i64)
            {
              v47.f64[0] = NAN;
              v47.f64[1] = NAN;
              double v79 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v47), v32, v27).i64;
              *(double *)v27.uint64_t i64 = fmod(*(double *)v27.i64 + v79, 6.28318531) - v79;
            }
            double v48 = *(double *)(a1 + 464);
            *(void *)(a1 + 16) = v27.i64[0];
            *(double *)(a1 + 24) = v48 * v30;
            *(double *)(a1 + 32) = v48 * v46;
            double v49 = *(double *)(a1 + 40);
            double v81 = v49 * sub_100075678((_DWORD *)(a1 + 344));
            double v50 = *(double *)(a1 + 120);
            double v80 = v50 * sub_100075678((_DWORD *)(a1 + 344));
            sub_1000756A4(a1 + 296, (double *)(a1 + 448), (double *)(a1 + 464), &v81, &v80);
            double v51 = *(double *)(a1 + 368);
            double v52 = v20 + *(double *)(a1 + 360);
            *(double *)(a1 + 352) = *a2;
            *(double *)(a1 + 360) = v52;
            *(double *)(a1 + 368) = v20 + v51;
            if (v20 + v51 <= 600.0)
            {
              double v61 = *(double *)(a1 + 168) + *(double *)(a1 + 208);
              *(double *)(a1 + 552) = v61;
              if (v61 <= 2.25e10) {
                goto LABEL_102;
              }
              *(unsigned char *)(a1 + 560) = 1;
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              uint64_t v62 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v63 = *(_DWORD *)(a1 + 564);
                double v64 = *a2;
                double v65 = *(double *)(a1 + 552);
                *(_DWORD *)uint64_t buf = 67240960;
                int v96 = v63;
                __int16 v97 = 2050;
                double v98 = v64;
                __int16 v99 = 2050;
                double v100 = v65;
                __int16 v101 = 2050;
                uint64_t v102 = 0x4214F46B04000000;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum position uncertainty growth reached,%{public}.1f,max,%{public}.1f", buf, 0x26u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_102;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              int v74 = *(_DWORD *)(a1 + 564);
              double v75 = *a2;
              double v76 = *(double *)(a1 + 552);
              int v83 = 67240960;
              int v84 = v74;
              __int16 v85 = 2050;
              double v86 = v75;
              __int16 v87 = 2050;
              double v88 = v76;
              __int16 v89 = 2050;
              uint64_t v90 = 0x4214F46B04000000;
              uint64_t v60 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v60);
            }
            else
            {
              *(unsigned char *)(a1 + 560) = 1;
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              __int16 v53 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v54 = *(_DWORD *)(a1 + 564);
                double v55 = *a2;
                double v56 = *(double *)(a1 + 368);
                *(_DWORD *)uint64_t buf = 67240704;
                int v96 = v54;
                __int16 v97 = 2050;
                double v98 = v55;
                __int16 v99 = 2050;
                double v100 = v56;
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum forward predictive dead-reckoning time reached,%{public}.2f", buf, 0x1Cu);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_102;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022C5660);
              }
              int v57 = *(_DWORD *)(a1 + 564);
              double v58 = *a2;
              double v59 = *(double *)(a1 + 368);
              int v83 = 67240704;
              int v84 = v57;
              __int16 v85 = 2050;
              double v86 = v58;
              __int16 v87 = 2050;
              double v88 = v59;
              uint64_t v60 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v60);
            }
            if (v60 != (char *)buf) {
              free(v60);
            }
LABEL_102:
            sub_100073DE4(a1, (uint64_t)"predict state success");
            return 1;
          }
          double v80 = 0.0;
          double v81 = 0.0;
          if (sub_1001BD27C((double *)(a1 + 480), &v81, &v80, *(double *)(a1 + 8) * 57.2957795, *(double *)(a1 + 384)))
          {
            *(double *)(a1 + 416) = v80;
            *(unsigned char *)(a1 + 424) = 1;
            *(double *)(a1 + 432) = v81;
            *(unsigned char *)(a1 + 440) = 1;
            goto LABEL_45;
          }
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022C5660);
          }
          uint64_t v66 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
          {
            int v67 = *(_DWORD *)(a1 + 564);
            double v68 = *a2;
            *(_DWORD *)uint64_t buf = 67240448;
            int v96 = v67;
            __int16 v97 = 2050;
            double v98 = v68;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state calc_dNdE failed", buf, 0x12u);
          }
          if (!sub_10013D1A0(115, 0)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022C5660);
          }
          int v72 = *(_DWORD *)(a1 + 564);
          double v73 = *a2;
          int v83 = 67240448;
          int v84 = v72;
          __int16 v85 = 2050;
          double v86 = v73;
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v14);
LABEL_19:
          if (v14 != (char *)buf) {
            free(v14);
          }
          return 0;
        }
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022C5660);
        }
        __int16 v39 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
        {
          int v40 = *(_DWORD *)(a1 + 564);
          double v41 = *a2;
          *(_DWORD *)uint64_t buf = 67240448;
          int v96 = v40;
          __int16 v97 = 2050;
          double v98 = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed on error cov propagation", buf, 0x12u);
        }
        BOOL result = sub_10013D1A0(115, 0);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1)
        {
LABEL_79:
          int v42 = *(_DWORD *)(a1 + 564);
          double v43 = *a2;
          int v83 = 67240448;
          int v84 = v42;
          __int16 v85 = 2050;
          double v86 = v43;
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v14);
          goto LABEL_19;
        }
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022C5660);
        }
        int v36 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
        {
          int v37 = *(_DWORD *)(a1 + 564);
          double v38 = *a2;
          *(_DWORD *)uint64_t buf = 67240448;
          int v96 = v37;
          __int16 v97 = 2050;
          double v98 = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed to set element of Phi", buf, 0x12u);
        }
        BOOL result = sub_10013D1A0(115, 0);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1) {
          goto LABEL_79;
        }
      }
    }
    else
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C5660);
      }
      unint64_t v33 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
      {
        int v34 = *(_DWORD *)(a1 + 564);
        double v35 = *a2;
        *(_DWORD *)uint64_t buf = 67240448;
        int v96 = v34;
        __int16 v97 = 2050;
        double v98 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed to set Q", buf, 0x12u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1) {
        goto LABEL_79;
      }
    }
    dispatch_once(&qword_102419510, &stru_1022C5660);
    goto LABEL_79;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  double v4 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 564);
    double v6 = *a2;
    double v7 = *(double *)(a1 + 368);
    uint64_t v8 = *(void *)(a1 + 552);
    *(_DWORD *)uint64_t buf = 67241472;
    int v96 = v5;
    __int16 v97 = 2050;
    double v98 = v6;
    __int16 v99 = 2050;
    double v100 = v7;
    __int16 v101 = 2050;
    uint64_t v102 = 0x4082C00000000000;
    __int16 v103 = 2050;
    uint64_t v104 = v8;
    __int16 v105 = 2050;
    uint64_t v106 = 0x4214F46B04000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum dead reckoning threshold reached,DRtime,%{public}.2f,max,%{public}.2f,PosVar,%{public}.1f,max,%{public}.1f", buf, 0x3Au);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v10 = *(_DWORD *)(a1 + 564);
    double v11 = *a2;
    double v12 = *(double *)(a1 + 368);
    uint64_t v13 = *(void *)(a1 + 552);
    int v83 = 67241472;
    int v84 = v10;
    __int16 v85 = 2050;
    double v86 = v11;
    __int16 v87 = 2050;
    double v88 = v12;
    __int16 v89 = 2050;
    uint64_t v90 = 0x4082C00000000000;
    __int16 v91 = 2050;
    uint64_t v92 = v13;
    __int16 v93 = 2050;
    uint64_t v94 = 0x4214F46B04000000;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v14);
    goto LABEL_19;
  }
  return result;
}

void sub_10007566C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

double sub_100075678(_DWORD *a1)
{
  int v1 = *a1 - 1;
  if (v1 > 9) {
    return 0.00694444444;
  }
  else {
    return dbl_101D2AE00[v1];
  }
}

BOOL sub_1000756A4(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  double v6 = *(double *)(a1 + 8);
  if (v6 > 0.0)
  {
    double v7 = *(double *)(a1 + 24);
    if (v7 > 0.0)
    {
      double v8 = *(double *)(a1 + 16);
      *(double *)a1 = *(double *)a1 + *a2 * v8;
      *(double *)(a1 + 16) = v8 * *a3;
      *(double *)(a1 + 8) = v6 + *a4;
      *(double *)(a1 + 24) = v7 + *a5;
      return 1;
    }
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  int v10 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    int v11 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 67240704;
    int v16 = v11;
    __int16 v17 = 2050;
    uint64_t v18 = v12;
    __int16 v19 = 2050;
    uint64_t v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "KFCV:,#Error,propagateAltitude() failed,initialized,%{public}d,altVar,%{public}.2f,altRateVar,%{public}.2f", buf, 0x1Cu);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::propagateAltitude(const double &, const double &, const double &, const double &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  return result;
}

void sub_1000758F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1000758FC(uint64_t a1, double *a2)
{
  double v3 = *a2;
  if (*a2 >= 0.0)
  {
    int v4 = *(_DWORD *)(a1 + 348);
    if (v4 == 2)
    {
      int v15 = *(_DWORD *)(a1 + 344) - 1;
      if (v15 > 9)
      {
        double v17 = 12.5;
        double v16 = 0.01;
      }
      else
      {
        double v16 = dbl_101D2ACB0[v15];
        double v17 = dbl_101D2AD00[v15];
      }
      double v20 = exp(-(v16 * v3));
      long double v22 = exp(v3 * (v16 * -2.0));
      double v23 = 1.0 - v20;
      double v24 = 1.0 - v22;
      if (1.0 - v20 < 0.0
        || ((unint64_t v25 = COERCE__INT64(fabs(1.0 - v20)) - 1,
             (unint64_t)(COERCE__INT64(fabs(1.0 - v20)) - 0x10000000000000) >> 53 >= 0x3FF)
          ? (BOOL v26 = v25 >= 0xFFFFFFFFFFFFFLL)
          : (BOOL v26 = 0),
            v26 ? (BOOL v27 = *(void *)&v23 == 0) : (BOOL v27 = 1),
            !v27))
      {
        double v23 = 0.0;
      }
      double v28 = v16 * v16;
      double v29 = v16 + v16;
      if (v24 < 0.0
        || (((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
          ? (BOOL v30 = (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL)
          : (BOOL v30 = 0),
            v30 ? (BOOL v31 = *(void *)&v24 == 0) : (BOOL v31 = 1),
            !v31))
      {
        double v24 = 0.0;
      }
      double v32 = v17 / v28;
      double v7 = v17 / v28 * (v3 + -2.0 / v16 * v23 + 1.0 / v29 * v24);
      double v8 = v32 * (v23 + v24 * -0.5);
      double v9 = v17 / v29 * v24;
      double v21 = 1.0 / v16 * v23;
    }
    else
    {
      double v5 = v3 * v3;
      double v6 = v3 * (v3 * v3);
      if (v4 == 1)
      {
        uint64_t v18 = *(int *)(a1 + 344);
        double v19 = 0.0;
        if (v18 <= 0xA) {
          double v19 = dbl_101D2AD50[v18];
        }
        double v7 = v5 * v5 * v19 * 0.25;
        double v8 = v6 * v19 * 0.5;
        double v9 = v5 * v19;
      }
      else
      {
        double v7 = 0.0;
        double v8 = 0.0;
        double v9 = 0.0;
        if (v4)
        {
LABEL_45:
          *(_OWORD *)(a1 + 80) = 0u;
          *(_OWORD *)(a1 + 96) = 0u;
          *(_OWORD *)(a1 + 128) = 0u;
          *(_OWORD *)(a1 + 144) = 0u;
          *(_OWORD *)(a1 + 112) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)(a1 + 64) = 0u;
          *(double *)(a1 + 40) = v7;
          *(double *)(a1 + 80) = v7;
          *(double *)(a1 + 120) = v9;
          *(double *)(a1 + 160) = v9;
          *(double *)(a1 + 56) = v8;
          *(double *)(a1 + 96) = v8;
          *(double *)(a1 + 104) = v8;
          *(double *)(a1 + 144) = v8;
          return v3 >= 0.0;
        }
        int v10 = *(_DWORD *)(a1 + 344) - 1;
        if (v10 > 9) {
          double v11 = 68.0;
        }
        else {
          double v11 = dbl_101D2AC60[v10];
        }
        double v7 = v6 * v11 * 0.333333333;
        double v8 = v5 * v11 * 0.5;
        double v9 = v3 * v11;
      }
      double v20 = 1.0;
      double v21 = *a2;
    }
    *(double *)(a1 + 448) = v21;
    *(unsigned char *)(a1 + 456) = 1;
    *(double *)(a1 + 464) = v20;
    *(unsigned char *)(a1 + 472) = 1;
    goto LABEL_45;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022C5660);
  }
  uint64_t v12 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    int v13 = *(_DWORD *)(a1 + 564);
    *(_DWORD *)uint64_t buf = 67240192;
    int v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,set Q failed,dT < 0", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C5660);
    }
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::setProcessNoise(const double &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return v3 >= 0.0;
}

void sub_100075CEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100075CF8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (std::__shared_weak_count *)a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100075D80(v2, (uint64_t)v4);
  if (v3)
  {
    sub_1000DB0A0(v3);
  }
}

void sub_100075D68(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100075D80(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)qword_102480838;
  double v5 = (unsigned __int8 *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  unint64_t v6 = sub_100103388((uint64_t)(v4 + 3), (uint64_t)v5);
  int8x8_t v7 = (int8x8_t)v4[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*v4 + 8 * v11);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = (uint64_t)(v4 + 4);
        do
        {
          unint64_t v15 = *((void *)v13 + 1);
          if (v15 == v8)
          {
            if (sub_100103744(v14, v13 + 16, v5))
            {
              double v20 = *(std::__shared_weak_count **)(a2 + 8);
              double v21 = v20;
              if (v20) {
                atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_100076048((uint64_t)(v13 + 40), a1);
              if (v21) {
                sub_1000DB0A0(v21);
              }
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v15 >= *(void *)&v7) {
                v15 %= *(void *)&v7;
              }
            }
            else
            {
              v15 &= *(void *)&v7 - 1;
            }
            if (v15 != v11) {
              break;
            }
          }
          int v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
    }
  }
  double v16 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v16, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  double v17 = qword_102419528;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v25 = 0;
    __int16 v26 = 2082;
    BOOL v27 = "";
    __int16 v28 = 2082;
    double v29 = "activity";
    __int16 v30 = 2050;
    uint64_t v31 = a1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  uint64_t v19 = *(void *)(a2 + 8);
  v22[0] = *(CLConnectionMessage **)a2;
  v22[1] = (CLConnectionMessage *)v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BCF754(v18, v22);
  if (v19) {
    sub_1000DB0A0((std::__shared_weak_count *)v19);
  }
  os_activity_scope_leave(&state);
}

void sub_10007600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100076048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_10007609C(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1000760FC(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_1000760E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000760FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int8x8_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    double v20 = "";
    __int16 v21 = 2082;
    long double v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = sub_100076318(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    unint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1000762E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100076310(uint64_t a1, uint64_t *a2, long long *a3)
{
}

void *sub_100076318(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  int v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A81E5C(0);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      int8x8_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"22CLLocationSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_1001BD854();
  }
  return result;
}

void *sub_1000764E0(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = *(void *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    unint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
    unint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v8)
        {
          if (sub_1000E9B14(i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  int v18 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = **a4;
  i[3] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_100100330(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    void *i = *v26;
LABEL_41:
    void *v26 = i;
    goto LABEL_42;
  }
  void *i = *v18;
  *int v18 = i;
  *(void *)(v25 + 8 * v4) = v18;
  if (*i)
  {
    unint64_t v27 = *(void *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12) {
        v27 %= v12;
      }
    }
    else
    {
      v27 &= v12 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100076744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_100BED380(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100076CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  sub_1000F5BB0((uint64_t)&a13, a14);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_100077234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_1000064D0((uint64_t)&a48);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_100077348(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {

    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 1168);
    if (v2) {
      sub_1000DB0A0(v2);
    }
    if (*(char *)(v1 + 927) < 0) {
      operator delete(*(void **)(v1 + 904));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 808);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    unint64_t v4 = *(std::__shared_weak_count **)(v1 + 688);
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete();
  }
  return result;
}

void sub_1000773DC(uint64_t a1, int a2, void *a3)
{
  sub_100077700(a3);
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0, &v6, v5, *(void *)(a1 + 32));
  }
}

void sub_10007742C(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EA2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int8x8_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EA2E8);
    }
    unint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 2082;
      double v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 5) {
    *(unsigned char *)(a4 + 371) = *a3;
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000775EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100077608(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int8x8_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32);
    sub_100077700(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80;
    int v12 = (uint64_t **)(*(void *)a3 + 40);
    __int16 v15 = (int *)(*(void *)a2 + 32);
    __int16 v13 = sub_1000FEE0C(v12, v15, (uint64_t)&unk_101D0B290, &v15);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v14];
    }
  }
  return result;
}

void sub_100077700(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_1005E4CB4(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_10007779C(a1);
    }
  }
}

id sub_10007779C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BE0D8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D246AELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BE0D8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D246AELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BE0D8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100077B5C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isValid]) {
    sub_100077BB0([*(id *)(a1 + 32) provider], *(void *)(a1 + 48), *(_DWORD *)(a1 + 56), *(void **)(a1 + 40));
  }
  id v2 = *(const void **)(a1 + 48);

  CFRelease(v2);
}

void sub_100077BB0(void *a1, uint64_t a2, int a3, void *a4)
{
  if (a3 <= 24)
  {
    if (a3)
    {
      if (a3 == 3)
      {
        LODWORD(__src[0]) = 9;
        (*(void (**)(void *, void *, void, uint64_t))(*a1 + 144))(a1, __src, 0, 0xFFFFFFFFLL);
      }
      return;
    }
    if (a1[17] == a2)
    {
      [objc_msgSend(a4, "objectForKey:", @"LocationCount") integerValue];
      [objc_msgSend(a4, "objectForKey:", @"Locations") bytes];
      sub_1000DB3D4((uint64_t)__src);
      operator new();
    }
    if (a1[18] == a2)
    {
      sub_1000DB3D4((uint64_t)&v62);
      if (CLClientGetLocation())
      {
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        sub_1000789B0(a4, &v22);
        sub_1000789AC((uint64_t)__src, (uint64_t)&v22);
        memcpy(v64, __src, sizeof(v64));
        long long v12 = v55;
        long long v55 = 0u;
        __int16 v13 = (std::__shared_weak_count *)*((void *)&v65 + 1);
        long long v65 = v12;
        if (v13)
        {
          sub_1000DB0A0(v13);
          long long v70 = v60;
          v71[0] = v61[0];
          *(void *)((char *)v71 + 13) = *(void *)((char *)v61 + 13);
          long long v66 = v56;
          long long v67 = v57;
          long long v68 = v58;
          long long v69 = v59;
          if (*((void *)&v55 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v55 + 1));
          }
        }
        else
        {
          long long v70 = v60;
          v71[0] = v61[0];
          *(void *)((char *)v71 + 13) = *(void *)((char *)v61 + 13);
          long long v66 = v56;
          long long v67 = v57;
          long long v68 = v58;
          long long v69 = v59;
        }
        LODWORD(__src[0]) = 39;
        (*(void (**)(void *, void *, int *, void, uint64_t, void))(*a1 + 152))(a1, __src, &v62, 0, 0xFFFFFFFFLL, 0);
        goto LABEL_56;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v18 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        float v19 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
        LODWORD(__src[0]) = 136315138;
        *(void *)((char *)__src + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Could not get location from location event (%s)", (uint8_t *)__src, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_56;
      }
      bzero(__src, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      float v20 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
      LODWORD(v22) = 136315138;
      *(void *)((char *)&v22 + 4) = v20;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)", "%s\n", v17);
      if (v17 == (char *)__src) {
        goto LABEL_56;
      }
    }
    else
    {
      sub_1000DB3D4((uint64_t)&v62);
      if (CLClientGetLocation())
      {
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        sub_1000789B0(a4, &v22);
        sub_1000789AC((uint64_t)__src, (uint64_t)&v22);
        memcpy(v64, __src, sizeof(v64));
        long long v6 = v55;
        long long v55 = 0u;
        int8x8_t v7 = (std::__shared_weak_count *)*((void *)&v65 + 1);
        long long v65 = v6;
        if (v7)
        {
          sub_1000DB0A0(v7);
          long long v70 = v60;
          v71[0] = v61[0];
          *(void *)((char *)v71 + 13) = *(void *)((char *)v61 + 13);
          long long v66 = v56;
          long long v67 = v57;
          long long v68 = v58;
          long long v69 = v59;
          if (*((void *)&v55 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v55 + 1));
          }
        }
        else
        {
          long long v70 = v60;
          v71[0] = v61[0];
          *(void *)((char *)v71 + 13) = *(void *)((char *)v61 + 13);
          long long v66 = v56;
          long long v67 = v57;
          long long v68 = v58;
          long long v69 = v59;
        }
        LODWORD(__src[0]) = 0;
        (*(void (**)(void *, void *, int *, void, uint64_t, void))(*a1 + 152))(a1, __src, &v62, 0, 0xFFFFFFFFLL, 0);
        goto LABEL_56;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v14 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v15 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
        LODWORD(__src[0]) = 136315138;
        *(void *)((char *)__src + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Could not get location from location event (%s)", (uint8_t *)__src, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_56;
      }
      bzero(__src, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      double v16 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
      LODWORD(v22) = 136315138;
      *(void *)((char *)&v22 + 4) = v16;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)", "%s\n", v17);
      if (v17 == (char *)__src) {
        goto LABEL_56;
      }
    }
    free(v17);
LABEL_56:

    if (v75) {
      sub_1000DB0A0(v75);
    }
    if (v74 < 0) {
      operator delete(v73);
    }
    if (v72) {
      sub_1000DB0A0(v72);
    }
    if (*((void *)&v65 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v65 + 1));
    }
    return;
  }
  if (a3 == 25)
  {
    if (CLClientGetError() && v21 <= 1)
    {
      LODWORD(__src[0]) = 9;
      (*(void (**)(void *, void *, uint64_t, uint64_t))(*a1 + 144))(a1, __src, 1, 0xFFFFFFFFLL);
    }
  }
  else if (a3 == 27)
  {
    if (CLClientGetAuthorizationStatus())
    {
      *((_DWORD *)a1 + 45) = 0;
      (*(void (**)(void *))(*a1 + 304))(a1);
      LODWORD(__src[0]) = 9;
      (*(void (**)(void *, void *, uint64_t, uint64_t))(*a1 + 144))(a1, __src, 1, 0xFFFFFFFFLL);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      id v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v9 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
        LODWORD(__src[0]) = 136315138;
        *(void *)((char *)__src + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning BLP: Could not get authorization status (%s)", (uint8_t *)__src, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__src, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        uint64_t v10 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
        int v62 = 136315138;
        int v63 = v10;
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)", "%s\n", v11);
        if (v11 != (char *)__src) {
          free(v11);
        }
      }
    }
    LODWORD(__src[0]) = 14;
    (*(void (**)(void *, void *, void, uint64_t))(*a1 + 144))(a1, __src, 0, 0xFFFFFFFFLL);
  }
}

void sub_100078754(_Unwind_Exception *a1)
{
}

double sub_1000787F4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 120);
  long long v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  long long v7 = *(_OWORD *)(a2 + 248);
  long long v8 = *(_OWORD *)(a2 + 264);
  long long v9 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v8;
  *(_OWORD *)(a1 + 280) = v9;
  *(_OWORD *)(a1 + 248) = v7;
  long long v10 = *(_OWORD *)(a2 + 168);
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(unsigned char *)(a1 + 356) = 0;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  *(unsigned char *)(a1 + 425) = *(unsigned char *)(a2 + 425);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(unsigned char *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 544) = xmmword_101D1C570;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = -1;
  *(unsigned char *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 592) = _Q0;
  *(_WORD *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 610) = 0;
  *(_DWORD *)(a1 + 612) = 0;
  double result = *(double *)(a2 + 536);
  *(double *)(a1 + 616) = result;
  *(void *)(a1 + 624) = *(void *)(a2 + 544);
  *(_DWORD *)(a1 + 632) = 0;
  *(unsigned char *)(a1 + 636) = *(unsigned char *)(a2 + 552);
  return result;
}

uint64_t sub_1000789B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  memcpy(a2, &unk_101D216A0, 0x230uLL);
  uint64_t result = (uint64_t)[a1 objectForKey:@"LocationsPrivate"];
  if (result)
  {
    long long v5 = (void *)result;
    uint64_t result = (uint64_t)[a1 objectForKey:@"LocationCount"].integerValue;
    if (result >= 1)
    {
      uint64_t v6 = result;
      uint64_t result = (uint64_t)[v5 bytes];
      if (result)
      {
        return (uint64_t)memcpy(a2, (const void *)(result + 560 * v6 - 560), 0x230uLL);
      }
    }
  }
  return result;
}

void sub_100078A80(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318628);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    long long v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    long long v24 = v10;
    __int16 v25 = 2050;
    long long v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      __int16 v17 = (uint64_t *)v12;
    }
    else {
      __int16 v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    long long v27 = v28;
    memset(v28, 0, sizeof(v28));
    long long v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    float v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_10120C05C(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  float v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    float v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1001C1F68();
  }
  os_activity_scope_leave(&state);
}

void sub_100079050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10007909C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    long long v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_1000EB32C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            float v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                long long v22 = (uint64_t *)v17;
              }
              else {
                long long v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                float v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_1000EAFAC(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              long long v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  long long v32 = (uint64_t *)v27;
                }
                else {
                  long long v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  long long v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                long long v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    long long v39 = (uint64_t *)v36;
                  }
                  else {
                    long long v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    long long v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      long long v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      long long v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  long long v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      long long v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      long long v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102318628);
              }
              long long v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102318628);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

void sub_10007BCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007C1C8()
{
  void (***v4)(unsigned char *__return_ptr, void, _OWORD *, uint64_t, void, double);
  uint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  unsigned int v9;
  float v10;
  NSObject *v11;
  int v12;
  int v14;
  float v15;
  float v16;
  __int32 v17;
  NSDate *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  __int32 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  BOOL v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  NSObject *v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  double v60;
  uint64_t v61;
  unsigned char *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  float64x2_t v76;
  float v77;
  float v78;
  int8x16_t v79;
  int v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  char v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  dispatch_queue_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  float v108;
  float v109;
  double v110;
  uint64_t v111;
  void **v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  dispatch_queue_t *v124;
  long long v125;
  int v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  float32x2_t v130;
  uint64_t v131;
  double v132;
  float v133;
  float v134;
  float v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  void *v142[2];
  char v143;
  float v144;
  float v145;
  uint64_t v146;
  float v147;
  float v148;
  double v149[2];
  char v150;
  float32x2_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  unsigned int v156;
  float v157;
  unsigned int v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unsigned char v161[8];
  _OWORD v162[14];
  uint64_t v163;
  unsigned char __p[32];
  long long v165;
  unsigned char v166[128];
  double v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  int v183;
  __int16 v184;
  uint64_t v185;
  unsigned char buf[32];
  long long v187;
  unsigned char v188[32];
  unsigned char v189[64];
  unsigned char v190[32];
  double v191;
  _OWORD v192[110];
  uint64_t v193;
  char v194;
  _OWORD v195[9];
  long long v196;
  long long v197;
  long long v198;
  long long v199;
  long long v200;
  uint64_t v201;

  uint64_t v0 = __chkstk_darwin();
  double v2 = v1;
  uint64_t v3 = v0;
  if ((*(unsigned int (**)(void, _OWORD *))(**(void **)(*(void *)(v0 + 40) + 48) + 24))(*(void *)(*(void *)(v0 + 40) + 48), v195))
  {
    uint64_t v4 = *(void (****)(unsigned char *__return_ptr, void, _OWORD *, uint64_t, void, double))(v3 + 32);
    long long v5 = (*(uint64_t (**)(void, double))(**(void **)(*(void *)(v3 + 40) + 8) + 48))(*(void *)(*(void *)(v3 + 40) + 8), v2);
    (**v4)(buf, v4, v195, v5, *(void *)(v3 + 40), v2);
    (*(void (**)(void, void, double))(**(void **)buf + 24))(*(void *)buf, *(void *)(v3 + 40), v2);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (!*(unsigned char *)(v3 + 216))
  {
    __int16 v137 = 0;
    double v138 = 0;
    uint64_t v6 = 0;
    int v136 = 0;
    double v129 = 0;
    double v139 = 0;
    int8x16_t v141 = v3 + 72;
    int v131 = 0;
    uint64_t v130 = 0;
    while (1)
    {
      if (!*(void *)(v3 + 112))
      {
LABEL_133:
        uint64_t v123 = sub_1001A58C0();
        *((void *)&v125 + 1) = __PAIR64__(v131, v129);
        *(void *)&uint64_t v125 = __PAIR64__(HIDWORD(v129), v136);
        sub_10003A4E8(v123, SHIDWORD(v138), v137, v139, SHIDWORD(v137), v6, v138, SHIDWORD(v139), v130.f32[0], v130.f32[1], v125, SHIDWORD(v131));
        *(_DWORD *)uint64_t buf = HIDWORD(v138);
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(void *)&uint8_t buf[8] = v139;
        *(void *)&uint8_t buf[16] = v131;
        unint64_t v124 = (dispatch_queue_t *)sub_10019F4CC();
        sub_10007F0DC(v124, (uint64_t)buf);
        return;
      }
      long long v7 = *(double *)(*(void *)(*(void *)(v3 + 80) + ((*(void *)(v3 + 104) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(v3 + 104) & 0x1FFLL));
      if ((*(unsigned int (**)(void, double))(**(void **)(*(void *)(v3 + 40) + 48) + 48))(*(void *)(*(void *)(v3 + 40) + 48), v7)&& (*(unsigned int (**)(void, _OWORD *, double))(**(void **)(*(void *)(v3 + 40) + 48) + 24))(*(void *)(*(void *)(v3 + 40) + 48), v195, v7))
      {
        (*(void (**)(void, unsigned char *, double))(**(void **)(*(void *)(v3 + 40) + 8) + 24))(*(void *)(*(void *)(v3 + 40) + 8), v161, v7);
        (***(void (****)(uint64_t *__return_ptr, double))(v3 + 32))(&v159, v7);
        if ((sub_10007DADC(v159, *(void *)(v3 + 40), v7) & 1) != 0
          || (int v8 = *(void *)(v3 + 112) + *(void *)(v3 + 104) - 1,
              vabdd_f64(*(double *)(*(void *)(*(void *)(v3 + 80) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)), v7) > *(double *)(v3 + 16)))
        {
          sub_1001A98B4(*(void *)(v3 + 40), v7);
          (*(void (**)(float32x2_t *__return_ptr))(*(void *)v159 + 16))(&v151);
          long long v9 = v158;
          if (v158)
          {
            int v10 = v153;
          }
          else
          {
            (*(void (**)(unsigned char *__return_ptr))(**(void **)(v3 + 32) + 16))(__p);
            (*(void (**)(unsigned char *__return_ptr))(**(void **)__p + 16))(buf);
            if (*(void *)&__p[8]) {
              sub_1000DB0A0(*(std::__shared_weak_count **)&__p[8]);
            }
            int v10 = *(float *)&buf[12];
            long long v9 = DWORD1(v187);
          }
          if (*((float *)&v196 + 2) <= 1.0 && (DWORD2(v195[0]) & 0xFFFFFFFB) == 3) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = DWORD2(v195[0]);
          }
          int v15 = sub_1001AA8E8((float *)(*(void *)(v3 + 40) + 1352), v14);
          BOOL v16 = sub_10007D7D4(v10, v15);
          if (v9 <= 1) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = v9;
          }
          sub_100103240();
          if (sub_10010145C()) {
            sub_100FEA70C(*(int64x2_t **)(v3 + 64), v17, *(double *)(*(void *)(v3 + 40) + 128), v16);
          }
          sub_1001B0E00(v3 + 520, *(void *)(v3 + 40), (uint64_t)v149);
          if (v150)
          {
            int v18 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v149[1]];
            [*(id *)(v3 + 56) writeToHealthRunningPower:v18 startDate:v18 endDate:v149[0]];
          }
          if (*(unsigned char *)(v3 + 218) && *(unsigned char *)(*(void *)(v3 + 40) + 352))
          {
            *(void *)std::string __p = off_1022E7060;
            *(void *)&__p[8] = CFAbsoluteTimeGetCurrent();
            *(float *)&__p[20] = v155;
            *(float32x2_t *)&__p[24] = v151;
            *(void *)&char v165 = __PAIR64__(LODWORD(v154), v156);
            float v19 = sub_101282D9C();
            sub_10128431C(v19, (uint64_t)__p);
            sub_10170140C(buf);
            sub_101727AB8((uint64_t)buf);
            v194 |= 1u;
            *(void *)&v192[27] = *(void *)&__p[8];
            int v20 = v193;
            BOOL v21 = v155;
            *(unsigned char *)(v193 + 28) |= 1u;
            *(float *)(v20 + 8) = v21;
            long long v22 = v193;
            int v23 = v151.i32[1];
            *(_DWORD *)(v193 + 16) = v151.i32[0];
            *(unsigned char *)(v22 + 28) |= 4u;
            long long v24 = v193;
            *(unsigned char *)(v193 + 28) |= 8u;
            *(_DWORD *)(v24 + 20) = v23;
            __int16 v25 = v193;
            int v26 = v156;
            *(unsigned char *)(v193 + 28) |= 0x10u;
            *(_DWORD *)(v25 + 24) = v26;
            uint64_t v27 = v193;
            int v28 = v154;
            *(unsigned char *)(v193 + 28) |= 2u;
            *(float *)(v27 + 12) = v28;
            if (qword_10248AF88 != -1) {
              dispatch_once(&qword_10248AF88, &stru_1022BBDE0);
            }
            if (qword_10248AF90) {
              sub_1019E5150(qword_10248AF90, (uint64_t)buf);
            }
            sub_101706914((PB::Base *)buf);
          }
          long long v29 = v155;
          int v135 = v152;
          if (v157 <= 0.0) {
            int v30 = v155;
          }
          else {
            int v30 = v157;
          }
          BOOL v31 = v151.f32[1];
          double v134 = v151.f32[0];
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(v3 + 32) + 8))(buf);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 16))(&v146);
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
          uint64_t v133 = v16;
          if (v147 > 0.0)
          {
            if (v29 >= 1.3) {
              long long v32 = v29;
            }
            else {
              long long v32 = 1.3;
            }
            long long v29 = v32 + v147;
            if (v30 >= 1.3) {
              uint64_t v33 = v30;
            }
            else {
              uint64_t v33 = 1.3;
            }
            if ((float)(v33 + v148) <= 0.0) {
              int v30 = v147;
            }
            else {
              int v30 = v148;
            }
          }
          uint64_t v34 = sub_10007ED60(v3 + 248, *(double *)(*(void *)(v3 + 40) + 120), v29);
          uint64_t v132 = v31;
          long long v35 = sub_10007ED60(v3 + 344, *(double *)(*(void *)(v3 + 40) + 120), v31);
          uint64_t v36 = *(float *)(v3 + 224);
          int v37 = v36;
          if (v36 <= -1.0)
          {
            BOOL v38 = v34;
            int v37 = sub_10007D7D4(v38, v15);
            uint64_t v36 = *(float *)(v3 + 224);
          }
          double v145 = v37;
          if (v36 <= -1.0) {
            uint64_t v36 = sub_10007D7D4(v29, v15);
          }
          long long v39 = *(float *)(v3 + 236);
          if (v39 <= -1.0) {
            long long v39 = sub_10007D7D4(v30, v15);
          }
          int v40 = v35;
          BOOL v41 = sub_10007D7D4(v40, v15);
          long long v42 = sub_10019BBC4(v3 + 448, *(void *)(v3 + 40), v36);
          int8x16_t v140 = sub_10007E414(*(double *)(*(void *)(v3 + 40) + 128) - *(double *)(*(void *)(v3 + 40) + 120), v42, v200, (void *)(v3 + 120), &v145);
          BOOL v44 = v145;
          long long v45 = v145 > (float)(v15 + 0.00000011921) && v140 > 0.0;
          int v46 = *(void *)(v3 + 40);
          long long v47 = *(float *)(v46 + 1364);
          uint64_t v144 = v39;
          sub_10007E414(*(double *)(v46 + 128) - *(double *)(v46 + 120), v43, v200, (void *)(v3 + 168), &v144);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
          }
          long long v48 = v140 * (float)(v15 * v47) / 3600.0;
          long long v49 = v140 * (float)(v47 * v44) / 3600.0;
          int v50 = qword_102418FF8;
          if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
          {
            long long v51 = v140 * (float)(v15 * v47) / 3600.0;
            __int16 v52 = v41;
            int v53 = v6;
            int v54 = *(void *)(v3 + 40);
            long long v55 = *(void *)(v3 + 112) + *(void *)(v3 + 104) - 1;
            __int16 v56 = *(void *)(v54 + 128);
            int v57 = *(void *)(*(void *)(*(void *)(v3 + 80) + ((v55 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v55 & 0x1FF));
            long long v58 = *(_DWORD *)(v54 + 152);
            long long v59 = v144;
            sub_1001A97E0(v54, __p);
            long long v60 = v59;
            BOOL v41 = v52;
            double v61 = *(void *)(v3 + 40);
            if (__p[23] >= 0) {
              int v62 = __p;
            }
            else {
              int v62 = *(unsigned char **)__p;
            }
            int v63 = *(_DWORD *)(v61 + 520);
            double v64 = *(_DWORD *)(v61 + 288);
            long long v65 = *(unsigned __int8 *)(v61 + 324);
            long long v66 = *(unsigned __int8 *)(v61 + 352);
            long long v67 = *(void *)(v61 + 328);
            long long v68 = *(void *)(v61 + 408);
            long long v69 = *(void *)(v61 + 416);
            long long v70 = *(unsigned __int8 *)(v61 + 542);
            __int16 v71 = *(void *)(v61 + 448);
            *(_DWORD *)uint64_t buf = 134224898;
            *(void *)&uint8_t buf[4] = v56;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(double *)&buf[14] = v7;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = v57;
            LOWORD(v187) = 1024;
            *(_DWORD *)((char *)&v187 + 2) = v58;
            WORD3(v187) = 2048;
            *((double *)&v187 + 1) = v44;
            *(_WORD *)long long v188 = 2048;
            *(double *)&v188[2] = v52;
            *(_WORD *)&v188[10] = 2048;
            *(double *)&v188[12] = v132;
            *(_WORD *)&v188[20] = 2048;
            *(double *)&v188[22] = v133;
            *(_WORD *)&v188[30] = 2048;
            *(double *)long long v189 = v39;
            *(_WORD *)&v189[8] = 2048;
            *(double *)&v189[10] = v60;
            *(_WORD *)&v189[18] = 2048;
            *(double *)&v189[20] = v15;
            *(_WORD *)&v189[28] = 2048;
            *(double *)&unsigned char v189[30] = v140;
            *(_WORD *)&v189[38] = 1024;
            *(_DWORD *)&v189[40] = v45;
            *(_WORD *)&v189[44] = 2080;
            *(void *)&v189[46] = v62;
            *(_WORD *)&v189[54] = 2048;
            *(double *)&v189[56] = v134;
            *(_WORD *)long long v190 = 2048;
            *(double *)&v190[2] = v135;
            *(_WORD *)&unsigned char v190[10] = 2048;
            *(void *)&v190[12] = (uint64_t)(float)(v49 * 1000.0);
            *(_WORD *)&v190[20] = 2048;
            *(void *)&v190[22] = (uint64_t)(float)(v51 * 1000.0);
            *(_WORD *)&v190[30] = 2048;
            long long v191 = *((float *)&v196 + 2);
            LOWORD(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 2) = v63;
            WORD3(v192[0]) = 1024;
            DWORD2(v192[0]) = v64;
            WORD6(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 14) = v65;
            WORD1(v192[1]) = 1024;
            DWORD1(v192[1]) = v66;
            WORD4(v192[1]) = 1024;
            *(_DWORD *)((char *)&v192[1] + 10) = v67;
            HIWORD(v192[1]) = 2048;
            *(void *)&v192[2] = v68;
            WORD4(v192[2]) = 2048;
            *(void *)((char *)&v192[2] + 10) = v69;
            WORD1(v192[3]) = 1024;
            DWORD1(v192[3]) = v70;
            WORD4(v192[3]) = 2048;
            *(void *)((char *)&v192[3] + 10) = v71;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d,userMets,%f,wrMets,%f,rawWRMets,%f,physicalEffortMets, %f, rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%lf,stored,%d,%s,rawHRMets,%f,rawFMMets,%f,totalCalories,%lld,basalCalories,%lld,VectorMag,%f,pushCount,%d,activityWithoutOverride,%d,isStanding,%d,isMotionOverrideSet,%d, mediaType, %d,pedDistance,%f,pedRawDistance,%f,distanceSource,%hu,currentPace,%f", buf, 0xFAu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v6 = v53;
            long long v48 = v51;
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            unint64_t v128 = v41;
            if (qword_102418FF0 != -1) {
              dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
            }
            __int16 v105 = *(void *)(v3 + 40);
            uint64_t v127 = *(void *)(v105 + 128);
            uint64_t v106 = *(void *)(v3 + 112) + *(void *)(v3 + 104) - 1;
            __int16 v107 = *(void *)(*(void *)(*(void *)(v3 + 80) + ((v106 >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * (v106 & 0x1FF));
            unint64_t v126 = *(_DWORD *)(v105 + 152);
            int v108 = v145;
            __int16 v109 = v144;
            sub_1001A97E0(v105, v142);
            int v72 = (uint64_t)(float)(v49 * 1000.0);
            double v73 = (uint64_t)(float)(v48 * 1000.0);
            int v110 = v109;
            char v74 = v39;
            BOOL v41 = v128;
            __int16 v111 = *(void *)(v3 + 40);
            if (v143 >= 0) {
              uint64_t v112 = v142;
            }
            else {
              uint64_t v112 = (void **)v142[0];
            }
            uint64_t v113 = *(_DWORD *)(v111 + 520);
            long long v114 = *(_DWORD *)(v111 + 288);
            uint64_t v115 = *(unsigned __int8 *)(v111 + 324);
            int v116 = *(unsigned __int8 *)(v111 + 352);
            uint64_t v117 = *(void *)(v111 + 328);
            int v119 = *(void *)(v111 + 408);
            uint64_t v118 = *(void *)(v111 + 416);
            int v120 = *(unsigned __int8 *)(v111 + 542);
            int v121 = *(void *)(v111 + 448);
            *(_DWORD *)std::string __p = 134224898;
            *(void *)&__p[4] = v127;
            *(_WORD *)&unsigned char __p[12] = 2048;
            *(double *)&__p[14] = v7;
            *(_WORD *)&__p[22] = 2048;
            *(void *)&__p[24] = v107;
            LOWORD(v165) = 1024;
            *(_DWORD *)((char *)&v165 + 2) = v126;
            WORD3(v165) = 2048;
            *((double *)&v165 + 1) = v108;
            *(_WORD *)int v166 = 2048;
            *(double *)&v166[2] = v128;
            *(_WORD *)&v166[10] = 2048;
            *(double *)&v166[12] = v132;
            *(_WORD *)&v166[20] = 2048;
            *(double *)&v166[22] = v133;
            *(_WORD *)&v166[30] = 2048;
            *(double *)&v166[32] = v39;
            *(_WORD *)&v166[40] = 2048;
            *(double *)&v166[42] = v110;
            *(_WORD *)&v166[50] = 2048;
            *(double *)&v166[52] = v15;
            *(_WORD *)&v166[60] = 2048;
            *(double *)&v166[62] = v140;
            *(_WORD *)&v166[70] = 1024;
            *(_DWORD *)&v166[72] = v45;
            *(_WORD *)&v166[76] = 2080;
            *(void *)&v166[78] = v112;
            *(_WORD *)&v166[86] = 2048;
            *(double *)&v166[88] = v134;
            *(_WORD *)&v166[96] = 2048;
            *(double *)&v166[98] = v135;
            *(_WORD *)&v166[106] = 2048;
            *(void *)&v166[108] = (uint64_t)(float)(v49 * 1000.0);
            *(_WORD *)&v166[116] = 2048;
            *(void *)&v166[118] = v73;
            *(_WORD *)&v166[126] = 2048;
            __int16 v167 = *((float *)&v196 + 2);
            long long v168 = 1024;
            long long v169 = v113;
            long long v170 = 1024;
            long long v171 = v114;
            long long v172 = 1024;
            long long v173 = v115;
            long long v174 = 1024;
            long long v175 = v116;
            int v176 = 1024;
            int v177 = v117;
            int v178 = 2048;
            unsigned int v179 = v119;
            unsigned int v180 = 2048;
            uint64_t v181 = v118;
            std::string v182 = 1024;
            uint64_t v183 = v120;
            int8x16_t v184 = 2048;
            long long v185 = v121;
            unint64_t v122 = (char *)_os_log_send_and_compose_impl();
            if (v143 < 0) {
              operator delete(v142[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLCalorieController::updateCalorimetry(CFAbsoluteTime)", "%s\n", v122);
            if (v122 != buf) {
              free(v122);
            }
          }
          else
          {
            int v72 = (uint64_t)(float)(v49 * 1000.0);
            double v73 = (uint64_t)(float)(v48 * 1000.0);
            char v74 = v39;
          }
          __int16 v167 = 0.0;
          double v75 = *(void *)(v3 + 40);
          id v76 = vcvtq_f64_f32(*(float32x2_t *)(v75 + 1372));
          memset(&v166[64], 0, 64);
          memset(&v166[32], 0, 32);
          memset(v166, 0, 40);
          *(_OWORD *)&__p[16] = 0u;
          char v165 = 0u;
          *(_OWORD *)std::string __p = 0u;
          *(void *)&__p[16] = *(void *)(v75 + 128);
          *(_DWORD *)&__p[24] = *(_DWORD *)(v75 + 152);
          __p[28] = *(unsigned char *)(v75 + 352);
          __p[29] = *(unsigned char *)(v75 + 184);
          double v77 = v145;
          *(double *)&char v165 = v145;
          *((double *)&v165 + 1) = v144;
          *(void *)int v166 = v72;
          *(void *)&v166[8] = v73;
          *(_OWORD *)&v166[16] = *(unint64_t *)&v140;
          *(_DWORD *)&v166[40] = v156;
          int8x16_t v78 = *(double *)(v75 + 840);
          *(_DWORD *)&v166[56] = *(_DWORD *)(v75 + 832);
          *(float64x2_t *)&v166[64] = v76;
          v166[80] = *(double *)(v75 + 616) > 0.0;
          double v79 = *(int8x16_t *)(v75 + 448);
          *(double *)&v166[48] = v78 * *(double *)v79.i64;
          *(int8x16_t *)&v166[88] = vextq_s8(v79, v79, 8uLL);
          v166[104] = *(unsigned char *)(v75 + 528) == 1;
          *(float *)&v166[108] = v41;
          double v80 = *(_DWORD *)(v75 + 520);
          *(_DWORD *)&v166[112] = *(_DWORD *)(v75 + 400);
          *(_DWORD *)&v166[116] = v80;
          *(double *)&v166[120] = v74;
          LOBYTE(v167) = v45;
          uuid_copy(&v166[24], (const unsigned __int8 *)(v75 + 354));
          WORD4(v192[23]) = 0;
          LODWORD(v192[27]) = 0;
          DWORD2(v192[42]) = 0;
          *((void *)&v192[68] + 1) = 0;
          LODWORD(v192[69]) = 0;
          BYTE4(v192[69]) = 0;
          memset(v192, 0, 24);
          memset(&v192[2], 0, 226);
          *((void *)&v192[16] + 1) = 0;
          memset(&v192[17], 0, 20);
          *(_OWORD *)((char *)&v192[18] + 8) = 0u;
          *(_OWORD *)((char *)&v192[19] + 8) = 0u;
          *(_OWORD *)((char *)&v192[20] + 8) = 0u;
          *(_OWORD *)((char *)&v192[21] + 8) = 0u;
          DWORD2(v192[22]) = 0;
          memset(&v192[24], 0, 33);
          *(void *)((char *)&v192[26] + 4) = 0;
          *(_DWORD *)((char *)&v192[26] + 11) = 0;
          memset(&v192[28], 0, 17);
          *((void *)&v192[27] + 1) = 0;
          *((void *)&v192[29] + 1) = 0;
          memset(&v192[30], 0, 20);
          *(_OWORD *)((char *)&v192[36] + 4) = 0u;
          *(_OWORD *)((char *)&v192[34] + 8) = 0u;
          *(_OWORD *)((char *)&v192[35] + 8) = 0u;
          *(_OWORD *)((char *)&v192[32] + 8) = 0u;
          *(_OWORD *)((char *)&v192[33] + 8) = 0u;
          *(_OWORD *)((char *)&v192[31] + 8) = 0u;
          *(_OWORD *)((char *)&v192[41] + 1) = 0u;
          *(_OWORD *)((char *)&v192[39] + 8) = 0u;
          *(_OWORD *)((char *)&v192[40] + 8) = 0u;
          *(_OWORD *)((char *)&v192[37] + 8) = 0u;
          *(_OWORD *)((char *)&v192[38] + 8) = 0u;
          memset(&v192[43], 0, 36);
          *((void *)&v192[45] + 1) = 0;
          *(void *)&v192[46] = 0;
          *(void *)((char *)&v192[46] + 5) = 0;
          *(void *)((char *)&v192[46] + 14) = 0;
          DWORD2(v192[56]) = 0;
          *(_OWORD *)((char *)&v192[54] + 8) = 0u;
          *(_OWORD *)((char *)&v192[55] + 8) = 0u;
          *(_OWORD *)((char *)&v192[52] + 8) = 0u;
          *(_OWORD *)((char *)&v192[53] + 8) = 0u;
          *(_OWORD *)((char *)&v192[50] + 8) = 0u;
          *(_OWORD *)((char *)&v192[51] + 8) = 0u;
          *(_OWORD *)((char *)&v192[48] + 8) = 0u;
          *(_OWORD *)((char *)&v192[49] + 8) = 0u;
          *(_OWORD *)((char *)&v192[47] + 8) = 0u;
          memset(&v192[57], 0, 100);
          *((void *)&v192[63] + 1) = 0;
          *(void *)&v192[64] = 0;
          DWORD2(v192[64]) = 0;
          memset(&v192[65], 0, 20);
          *((void *)&v192[66] + 1) = 0;
          memset(&v192[67], 0, 21);
          *((void *)&v192[69] + 1) = 0;
          *(void *)&v192[70] = 0;
          DWORD2(v192[70]) = 0;
          memset(&v192[71], 0, 28);
          memset(&v192[73], 0, 20);
          *((void *)&v192[74] + 1) = 0;
          memset(&v192[75], 0, 17);
          *((void *)&v192[76] + 1) = 0;
          *(void *)&v192[77] = 0;
          long long v187 = v165;
          *(_OWORD *)long long v188 = *(_OWORD *)v166;
          *(_OWORD *)uint64_t buf = *(_OWORD *)__p;
          *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&__p[16];
          *(_OWORD *)&v189[16] = *(_OWORD *)&v166[48];
          *(_OWORD *)&v189[32] = *(_OWORD *)&v166[64];
          *(_OWORD *)&v188[16] = *(_OWORD *)&v166[16];
          *(_OWORD *)long long v189 = *(_OWORD *)&v166[32];
          *(void *)&v192[23] = 0;
          long long v191 = v167;
          *(_OWORD *)long long v190 = *(_OWORD *)&v166[96];
          *(_OWORD *)&v190[16] = *(_OWORD *)&v166[112];
          double v81 = (const void *)(*(void *)(v3 + 40) + 112);
          *(_OWORD *)&v189[48] = *(_OWORD *)&v166[80];
          memcpy(v192, v81, 0x4D8uLL);
          double v82 = *(void *)(v3 + 440);
          if (v82) {
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v82 + 8))(v82, buf);
          }
          if (v45)
          {
            int v83 = *(void *)(v3 + 40);
            int v84 = *(double *)(v83 + 448);
            __int16 v85 = HIDWORD(v139);
            if (*(double *)(v83 + 408) != *(double *)(v83 + 416)) {
              __int16 v85 = HIDWORD(v139) + 1;
            }
            HIDWORD(v139) = v85;
            double v86 = v84 > 1.11847 || v84 == 0.0;
            __int16 v87 = HIDWORD(v137);
            if (v156 == 1) {
              __int16 v87 = HIDWORD(v137) + 1;
            }
            HIDWORD(v137) = v87;
            double v88 = v138;
            if (v156 == 3) {
              double v88 = v138 + 1;
            }
            LODWORD(v138) = v88;
            if (v156 == 2) {
              uint64_t v6 = (v6 + 1);
            }
            else {
              uint64_t v6 = v6;
            }
            if (v151.f32[0] != 0.0 && v151.f32[1] != 0.0) {
              uint64_t v130 = vcvt_f32_f64(vaddq_f64(vdivq_f64(vmulq_n_f64(vcvtq_f64_f32(vmul_n_f32(v151, *(float *)(v83 + 1364))), v140), (float64x2_t)vdupq_n_s64(0x40AC200000000000uLL)), vcvtq_f64_f32(v130)));
            }
            __int16 v89 = *(_DWORD *)(v83 + 700);
            if (v89 == 2)
            {
              ++HIDWORD(v131);
            }
            else if (v89 == 1)
            {
              LODWORD(v131) = v131 + 1;
            }
            if (*(_DWORD *)&v166[56] == 3)
            {
              LODWORD(v129) = v129 + 1;
            }
            else if (*(_DWORD *)&v166[56] == 1)
            {
              ++HIDWORD(v129);
            }
            __int16 v91 = v166[80];
            uint64_t v92 = *(_DWORD *)(v83 + 400);
            __int16 v93 = *(unsigned __int8 *)(v83 + 489);
            uint64_t v94 = sub_1001A58C0();
            sub_101431F4C(v94, v154);
            __int16 v95 = sub_1001A58C0();
            sub_1014327D8(v95, (uint64_t)v77);
            if (!(_BYTE)v200)
            {
              int v96 = sub_100C3AE20();
              sub_100C3B24C(v96, v77, v147);
            }
            __int16 v97 = (dispatch_queue_t *)sub_10019F4CC();
            sub_100F2AE2C(v97, v77);
            sub_10058CC88(v7, v98, *(void *)(v3 + 40), (uint64_t)v195, (uint64_t)__p, (int *)&v151);
            __int16 v99 = v6;
            double v100 = *(_DWORD *)(*(void *)(v3 + 40) + 1392);
            sub_100103240();
            __int16 v101 = sub_10010145C();
            ++HIDWORD(v138);
            LODWORD(v137) = v137 + v91;
            LODWORD(v139) = v139 + v93;
            v136 += v86;
            if (v100) {
              uint64_t v102 = v101;
            }
            else {
              uint64_t v102 = 0;
            }
            if (v102 == 1)
            {
              __int16 v103 = sub_100C3AE20();
              uint64_t v6 = v99;
              v162[12] = v199;
              v162[13] = v200;
              unint64_t v163 = v201;
              v162[8] = v195[8];
              v162[9] = v196;
              v162[10] = v197;
              v162[11] = v198;
              v162[4] = v195[4];
              v162[5] = v195[5];
              v162[6] = v195[6];
              v162[7] = v195[7];
              v162[0] = v195[0];
              v162[1] = v195[1];
              v162[2] = v195[2];
              v162[3] = v195[3];
              sub_100C3AF2C(v103, v92, (uint64_t)v162, (float)*(uint64_t *)v166, v155);
            }
            else
            {
              uint64_t v6 = v99;
            }
          }
          *(int64x2_t *)(v3 + 104) = vaddq_s64(*(int64x2_t *)(v3 + 104), (int64x2_t)xmmword_101D0A740);
          sub_10007F07C(v141, 1);
          uint64_t v12 = 0;
          uint64_t v90 = 1;
        }
        else
        {
          uint64_t v90 = 0;
          uint64_t v12 = 3;
        }
        if (v160) {
          sub_1000DB0A0(v160);
        }
        if ((v90 & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
        }
        BOOL v11 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Popping out an activity since there's no activity associated with current time.  This shouldn't happen", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
          }
          *(_WORD *)std::string __p = 0;
          uint64_t v104 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLCalorieController::updateCalorimetry(CFAbsoluteTime)", "%s\n", v104);
          if (v104 != buf) {
            free(v104);
          }
        }
        *(int64x2_t *)(v3 + 104) = vaddq_s64(*(int64x2_t *)(v3 + 104), (int64x2_t)xmmword_101D0A740);
        sub_10007F07C(v141, 1);
      }
      uint64_t v12 = 0;
LABEL_20:
      if (v12) {
        goto LABEL_133;
      }
    }
  }
}

void sub_10007D724(_Unwind_Exception *a1)
{
  if (STACK[0x288]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x288]);
  }
  _Unwind_Resume(a1);
}

float sub_10007D7D4(float a1, float a2)
{
  float v2 = a2;
  if (a1 < a2) {
    return v2;
  }
  double v3 = a1;
  if (a1 <= 30.0)
  {
    float v2 = a1;
    if (a1 > 20.0)
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
      }
      long long v5 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218240;
        double v9 = v3;
        __int16 v10 = 2048;
        double v11 = 20.0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "In-human MET spike,%f,setting to upper bound,%f", buf, 0x16u);
      }
      float v2 = 20.0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 == -1) {
          goto LABEL_18;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      double v9 = v3;
      __int16 v10 = 2048;
      double v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "MET spike,%f,setting to basal,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 == -1)
      {
LABEL_18:
        long long v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "float CLCalorieController::sanitizeMets(float, float)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return v2;
      }
LABEL_20:
      dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
      goto LABEL_18;
    }
  }
  return v2;
}

uint64_t sub_10007DADC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 48) + 48))(*(void *)(a2 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), v7, a3);
    if (result)
    {
      if (v7[208]) {
        return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 32))(a1, a2, a3);
      }
      uint64_t result = (*(uint64_t (**)(void, double))(**(void **)(a2 + 32) + 48))(*(void *)(a2 + 32), a3);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 32))(a1, a2, a3);
      }
    }
  }
  return result;
}

BOOL sub_10007DC10(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0x11uLL))
  }
                   + 232 * ((v4 + *(void *)(a1 + 56) - 1) % 0x11uLL));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_10007DE7C(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    uint64_t v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_10007DD64(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)a1 + 16))(a1, &v18, &v16);
  if (result)
  {
    uint64_t v4 = *((void *)&v19 + 1);
    if (*((void *)&v19 + 1) == *((void *)&v17 + 1))
    {
      return 0;
    }
    else
    {
      if (*(void *)v19 == *((void *)&v19 + 1)) {
        uint64_t v4 = *(void *)(v19 - 8) + 3944;
      }
      long long v5 = *(_OWORD *)(v4 - 232);
      long long v6 = *(_OWORD *)(v4 - 200);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(v4 - 216);
      *(_OWORD *)(a2 + 32) = v6;
      *(_OWORD *)a2 = v5;
      long long v7 = *(_OWORD *)(v4 - 184);
      long long v8 = *(_OWORD *)(v4 - 168);
      long long v9 = *(_OWORD *)(v4 - 136);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(v4 - 152);
      *(_OWORD *)(a2 + 96) = v9;
      *(_OWORD *)(a2 + 48) = v7;
      *(_OWORD *)(a2 + 64) = v8;
      long long v10 = *(_OWORD *)(v4 - 120);
      long long v11 = *(_OWORD *)(v4 - 104);
      long long v12 = *(_OWORD *)(v4 - 72);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(v4 - 88);
      *(_OWORD *)(a2 + 160) = v12;
      *(_OWORD *)(a2 + 112) = v10;
      *(_OWORD *)(a2 + 128) = v11;
      long long v13 = *(_OWORD *)(v4 - 56);
      long long v14 = *(_OWORD *)(v4 - 40);
      long long v15 = *(_OWORD *)(v4 - 24);
      *(void *)(a2 + 224) = *(void *)(v4 - 8);
      *(_OWORD *)(a2 + 192) = v14;
      *(_OWORD *)(a2 + 208) = v15;
      *(_OWORD *)(a2 + 176) = v13;
      return 1;
    }
  }
  return result;
}

BOOL sub_10007DE7C(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  unint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = (void *)(v5 + 8 * (v4 / 0x11));
  if (*(void *)(a1 + 40) == v5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *v6 + 232 * (v4 % 0x11);
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  long long v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  unint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = (uint64_t *)(v10 + 8 * (v9 / 0x11));
  if (*(void *)(a1 + 40) == v10) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v11 + 232 * (v9 % 0x11);
  }
  uint64_t v13 = a3[3];
  if (v12 != v13)
  {
    uint64_t v14 = *v11;
    double v15 = 1.79769313e308;
    unint64_t v16 = v12;
    long long v17 = v11;
    while (1)
    {
      uint64_t v18 = v16;
      if (v16 == v14) {
        uint64_t v18 = *(v17 - 1) + 3944;
      }
      double v19 = vabdd_f64(*(double *)(v18 - 232), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = v17;
        *(void *)(a2 + 24) = v16;
        uint64_t v14 = *v17;
        uint64_t v20 = v16;
        if (v16 == *v17) {
          uint64_t v20 = *(v17 - 1) + 3944;
        }
        double v15 = v19;
        if (*(double *)(v20 - 232) == a4) {
          break;
        }
      }
      if (v16 == v14)
      {
        uint64_t v21 = *--v17;
        uint64_t v14 = v21;
        unint64_t v16 = v21 + 3944;
      }
      v16 -= 232;
      uint64_t v13 = a3[3];
      if (v16 == v13) {
        return v13 != *(void *)(a2 + 24);
      }
    }
    uint64_t v13 = a3[3];
  }
  return v13 != *(void *)(a2 + 24);
}

uint64_t sub_10007DFC0(double a1, uint64_t a2, void **a3)
{
  (*(void (**)(void *, unsigned char *))(*a3[6] + 24))(a3[6], v9);
  int v5 = CLMotionActivity::isTypePedestrian() ^ 1;
  if (v9[208]) {
    int v6 = v5;
  }
  else {
    int v6 = 1;
  }
  unsigned int v7 = (*(uint64_t (**)(void *, double))(*a3[5] + 48))(a3[5], a1);
  uint64_t result = v6 & v7;
  if ((v6 & 1) == 0)
  {
    if (v7) {
      return (*(uint64_t (**)(void *, double))(*a3[3] + 48))(a3[3], a1);
    }
  }
  return result;
}

uint64_t sub_10007E0D4(uint64_t a1, double a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v6 = 24;
  if (v4) {
    uint64_t v6 = 8;
  }
  unsigned int v7 = *(uint64_t (**)(__n128))(**(void **)(a1 + v6) + 32);
  v5.n128_f64[0] = a2;

  return v7(v5);
}

BOOL sub_10007E174(uint64_t a1, uint64_t a2)
{
  return sub_10007E3A4(*(double *)(a2 + 448), *(float *)(a2 + 1360));
}

uint64_t sub_10007E184(uint64_t a1, _OWORD *a2)
{
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)a1 + 16))(a1, &v10, &v8);
  if (result)
  {
    uint64_t v4 = *((void *)&v11 + 1);
    if (*((void *)&v11 + 1) == *((void *)&v9 + 1))
    {
      return 0;
    }
    else
    {
      if (*(void *)v11 == *((void *)&v11 + 1)) {
        uint64_t v4 = *(void *)(v11 - 8) + 4096;
      }
      long long v5 = *(_OWORD *)(v4 - 64);
      long long v6 = *(_OWORD *)(v4 - 48);
      long long v7 = *(_OWORD *)(v4 - 16);
      a2[2] = *(_OWORD *)(v4 - 32);
      a2[3] = v7;
      *a2 = v5;
      a2[1] = v6;
      return 1;
    }
  }
  return result;
}

BOOL sub_10007E234(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = (void *)(v4 + 8 * (*(void *)(a1 + 56) >> 6));
  if (*(void *)(a1 + 40) == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5 + ((*(void *)(a1 + 56) & 0x3FLL) << 6);
  }
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  long long v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  unint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = (uint64_t *)(v9 + 8 * (v8 >> 6));
  if (*(void *)(a1 + 40) == v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *v10 + ((v8 & 0x3F) << 6);
  }
  uint64_t v12 = a3[3];
  if (v11 != v12)
  {
    uint64_t v13 = *v10;
    double v14 = 1.79769313e308;
    uint64_t v15 = v11;
    unint64_t v16 = v10;
    while (1)
    {
      uint64_t v17 = v15;
      if (v15 == v13) {
        uint64_t v17 = *(v16 - 1) + 4096;
      }
      double v18 = vabdd_f64(*(double *)(v17 - 24), a4);
      if (v18 < v14 && v18 < *(double *)(a1 + 16))
      {
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = v16;
        *(void *)(a2 + 24) = v15;
        uint64_t v13 = *v16;
        uint64_t v19 = v15;
        if (v15 == *v16) {
          uint64_t v19 = *(v16 - 1) + 4096;
        }
        double v14 = v18;
        if (*(double *)(v19 - 24) == a4) {
          break;
        }
      }
      if (v15 == v13)
      {
        uint64_t v20 = *--v16;
        uint64_t v13 = v20;
        uint64_t v15 = v20 + 4096;
      }
      v15 -= 64;
      uint64_t v12 = a3[3];
      if (v15 == v12) {
        return v12 != *(void *)(a2 + 24);
      }
    }
    uint64_t v12 = a3[3];
  }
  return v12 != *(void *)(a2 + 24);
}

void *sub_10007E358@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (*(unsigned char *)(a3 + 352)) {
    BOOL v4 = *(void *)(a3 + 328) == 2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v6 = result[7];
    uint64_t v5 = result[8];
  }
  else if (*(_DWORD *)(a2 + 8) == 5)
  {
    uint64_t v6 = result[1];
    uint64_t v5 = result[2];
  }
  else
  {
    uint64_t v6 = result[5];
    uint64_t v5 = result[6];
  }
  *a4 = v6;
  a4[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL sub_10007E3A4(double a1, double a2)
{
  float v2 = a2 * 39.3700981;
  double v3 = fmax((v2 + -59.0) * 0.0375 + 4.2, 4.2);
  double v4 = 2.23693991 / v3;
  BOOL v5 = v3 <= 4.8;
  double v6 = 0.466029147;
  if (v5) {
    double v6 = v4;
  }
  return v6 > a1 && a1 > 0.0;
}

double sub_10007E414(double a1, uint64_t a2, int a3, void *a4, float *a5)
{
  double v6 = a1;
  if (!a3)
  {
    uint64_t v13 = *(unsigned int *)a5;
    *(double *)&long long v39 = a1;
    *((void *)&v39 + 1) = v13;
    sub_10007E608(a4, &v39);
    double v14 = (void **)a4[1];
    double v6 = 0.0;
    unint64_t v15 = a4[2] - (void)v14;
    if (!v15) {
      return v6;
    }
    unint64_t v16 = a4[4];
    uint64_t v17 = &v14[v16 >> 8];
    double v18 = *v17;
    uint64_t v19 = (uint64_t)*v17 + 16 * v16;
    unint64_t v20 = a4[5] + v16;
    uint64_t v21 = (uint64_t)v14[v20 >> 8] + 16 * v20;
    if (v19 == v21) {
      return v6;
    }
    double v22 = 0.0;
    int v23 = (double *)*v17;
    long long v24 = (double *)((char *)*v17 + 16 * v16);
    __int16 v25 = &v14[v16 >> 8];
    do
    {
      double v26 = *v24;
      v24 += 2;
      double v27 = v26;
      if ((char *)v24 - (char *)v23 == 4096)
      {
        int v28 = (double *)v25[1];
        ++v25;
        int v23 = v28;
        long long v24 = v28;
      }
      double v22 = v22 + v27;
    }
    while (v24 != (double *)v21);
    double v6 = 0.0;
    if (v22 < 10.0) {
      return v6;
    }
    uint64_t v29 = (uint64_t)v14[v20 >> 8] + 16 * v20;
    if (v19 == v29)
    {
      double v34 = 0.0;
    }
    else
    {
      float v30 = 0.0;
      do
      {
        uint64_t v31 = v19 + 16;
        if (v19 + 16 - (void)v18 == 4096)
        {
          long long v32 = v17[1];
          ++v17;
          double v18 = v32;
          uint64_t v31 = (uint64_t)v32;
        }
        float v33 = *(double *)v19 * *(float *)(v19 + 8);
        float v30 = v30 + v33;
        uint64_t v19 = v31;
      }
      while (v31 != v29);
      double v34 = v30;
    }
    float v35 = v34 / v22;
    *a5 = v35;
    a4[5] = 0;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v14);
        uint64_t v36 = a4[2];
        double v14 = (void **)(a4[1] + 8);
        a4[1] = v14;
        unint64_t v15 = v36 - (void)v14;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      uint64_t v37 = 128;
    }
    else
    {
      if (v15 >> 3 != 2) {
        return v22;
      }
      uint64_t v37 = 256;
    }
    a4[4] = v37;
    return v22;
  }
  long long v7 = (void **)a4[1];
  uint64_t v8 = a4[2];
  a4[5] = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a4[2];
      long long v7 = (void **)(a4[1] + 8);
      a4[1] = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 128;
    goto LABEL_21;
  }
  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 256;
LABEL_21:
    a4[4] = v11;
  }
  return v6;
}

uint64_t sub_10007E608(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10058D570(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(_OWORD *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5] + 1;
  a1[5] = v9;
  unint64_t v10 = v8 + v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 8));
  uint64_t v13 = *v12 + 16 * v10;
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 16;
}

BOOL sub_10007E6C8(uint64_t a1, double a2)
{
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32)
  }
                               + (((unint64_t)(v4 + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v4 + *(unsigned char *)(a1 + 56) - 1));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2 && sub_1001850BC(a1, (uint64_t)v21, v20, a2)
    || (double v6 = *(double *)(a1 + 104), v6 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) >= a2)
    || *(unsigned char *)(a1 + 121))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v7 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 8);
      double v9 = (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2);
      *(_DWORD *)uint64_t buf = 136315650;
      uint64_t v29 = v8;
      __int16 v30 = 2048;
      double v31 = a2;
      __int16 v32 = 2048;
      double v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s is ready at, %f, timeout, %f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v17 = *(void *)(a1 + 8);
      double v18 = (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2);
      int v22 = 136315650;
      uint64_t v23 = v17;
      __int16 v24 = 2048;
      double v25 = a2;
      __int16 v26 = 2048;
      double v27 = v18;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLCoarseElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    return 1;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v11 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 8);
      double v13 = (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2);
      *(_DWORD *)uint64_t buf = 136315650;
      uint64_t v29 = v12;
      __int16 v30 = 2048;
      double v31 = a2;
      __int16 v32 = 2048;
      double v33 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s is not ready at, %f, timeout, %f", buf, 0x20u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v14 = *(void *)(a1 + 8);
      double v15 = (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2);
      int v22 = 136315650;
      uint64_t v23 = v14;
      __int16 v24 = 2048;
      double v25 = a2;
      __int16 v26 = 2048;
      double v27 = v15;
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLCoarseElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
  }
  return result;
}

double sub_10007EB84(uint64_t a1, double a2)
{
  double v2 = 2.0;
  if (*(unsigned char *)(a1 + 120) && !*(unsigned char *)(a1 + 123))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      double v4 = *(double *)(*(void *)(*(void *)(a1 + 32)
    }
                                 + (((unint64_t)(v3 + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v3 + *(unsigned char *)(a1 + 56) - 1))
         + 180.0
         + 20.0;
    else {
      double v4 = -1.79769313e308;
    }
    double v2 = v4 - a2;
  }
  *(double *)(a1 + 96) = v2;
  return v2;
}

BOOL sub_10007EBF8(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0x17uLL))
  }
                   + 176 * ((v4 + *(void *)(a1 + 56) - 1) % 0x17uLL)
                   + 8);
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_100185C30(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    double v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  double v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

double sub_10007ED58(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

double sub_10007ED60(uint64_t a1, double a2, double a3)
{
  double v7 = a3;
  if (a2 - *(double *)(a1 + 88) > 11.0) {
    sub_10041F400((void *)a1);
  }
  sub_10007EEB4(a1, &v7);
  *(double *)(a1 + 88) = a2;
  double v6 = -1.0;
  sub_10007EDE0((void *)a1, 2, &v6);
  return v6;
}

uint64_t sub_10007EDE0(void *a1, int a2, void *a3)
{
  unint64_t v3 = a1[10];
  if (!v3) {
    return 0;
  }
  if (a2 == 2)
  {
    float v10 = (double)v3 * 0.5;
    int v11 = vcvtms_s32_f32(v10);
    uint64_t v12 = (void *)a1[8];
    if (v11 < 1)
    {
      double v7 = (void *)a1[8];
    }
    else
    {
      for (int i = 0; i != v11; ++i)
      {
        uint64_t v14 = (void *)v12[1];
        if (v14)
        {
          do
          {
            double v7 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            double v7 = (void *)v12[2];
            BOOL v8 = *v7 == (void)v12;
            uint64_t v12 = v7;
          }
          while (!v8);
        }
        uint64_t v12 = v7;
      }
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      double v6 = (void *)a1[9];
      uint64_t v4 = a1 + 9;
      double v5 = v6;
      if (v6)
      {
        do
        {
          double v7 = v5;
          double v5 = (void *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          double v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (v8);
      }
      goto LABEL_22;
    }
    return 0;
  }
  double v7 = (void *)a1[8];
LABEL_22:
  *a3 = v7[4];
  return 1;
}

void sub_10007EEB4(uint64_t a1, double *a2)
{
  unint64_t v3 = (void *)(a1 + 16);
  uint64_t v4 = (uint64_t **)(a1 + 64);
  double v6 = sub_10007EF64((uint64_t **)(a1 + 64), a2);
  sub_10007EFF4(v3, &v6);
  if (*(void *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    double v5 = *(uint64_t **)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(a1 + 48) & 0x1FFLL));
    sub_1000F0A30(v4, v5);
    operator delete(v5);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_101D0A740);
    sub_10007F07C((uint64_t)v3, 1);
  }
}

uint64_t *sub_10007EF64(uint64_t **a1, double *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  double v5 = *a2;
  v4[4] = *(void *)a2;
  double v6 = a1 + 1;
  double v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        double v6 = (uint64_t **)v7;
        if (v5 >= *((double *)v7 + 4)) {
          break;
        }
        double v7 = (uint64_t *)*v7;
        BOOL v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      double v7 = (uint64_t *)v7[1];
    }
    while (v7);
    BOOL v8 = v6 + 1;
  }
  else
  {
    BOOL v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_10007EFF4(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10041F534(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t sub_10007F07C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_10007F0DC(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*a1);
  int v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10017A13C;
  void v5[3] = &unk_1022B8660;
  v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

void sub_10007F164(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = operator new(0x20uLL);
  int v135 = v6 + 2;
  *uint64_t v6 = xmmword_101DA52D0;
  v6[1] = unk_101DA52E0;
  uint64_t v133 = v6;
  double v134 = v6 + 2;
  __int16 v92 = 0;
  long long __dst = xmmword_101D1C570;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  memset(v91, 0, sizeof(v91));
  unint64_t v93 = 0xBFF0000000000000;
  int v94 = 0;
  memset(&v95[1], 0, 312);
  v95[0] = -1.0;
  double v96 = -1.0;
  uint64_t v97 = 0;
  unint64_t v98 = 0xBFF0000000000000;
  int v109 = 0;
  uint64_t v110 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  int v104 = 0;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  memset(v108, 0, sizeof(v108));
  unint64_t v111 = 0xBFF0000000000000;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v114 = 0x80000000800000;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  long long v117 = xmmword_101D1E260;
  uint64_t v118 = 0x80000000800000;
  unint64_t v119 = 0xBFF0000000000000;
  memset(v120, 0, sizeof(v120));
  double v121 = -1.0;
  memset(v122, 0, sizeof(v122));
  double v123 = -1.0;
  long long v124 = 0u;
  *(_OWORD *)uint64_t v125 = 0u;
  uint64_t v126 = 0;
  double v127 = -1.0;
  uint64_t v128 = 0x600000006;
  uint64_t v130 = 0;
  double v129 = 0;
  uint64_t v131 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v132 = _Q0;
  sub_100175610(*(void *)a1, (uint64_t)&v133, (char *)&__dst, a3);
  uint64_t v12 = &qword_102419000;
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10230E248);
  }
  double v13 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134219520;
    *(double *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v95[0] != -1.0;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = LODWORD(v95[4]);
    *(_WORD *)double v145 = 2048;
    *(double *)&v145[2] = v95[0];
    *(_WORD *)unsigned int v146 = 1024;
    *(_DWORD *)&v146[2] = *((double *)&__dst + 1) != -1.0;
    *(_WORD *)&v146[6] = 1024;
    *(_DWORD *)&v146[8] = DWORD2(v84);
    *(_WORD *)&v146[12] = 2048;
    *(void *)&v146[14] = *((void *)&__dst + 1);
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Steps/activity sync, updateTime, %f, hasSteps, %d, stepCount, %d, stepStartTime, %f, hasActivity, %d, activityType, %d, activityStartTime, %f", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    *(_DWORD *)int v136 = 134219520;
    *(double *)&v136[4] = a3;
    __int16 v137 = 1024;
    *(_DWORD *)double v138 = v95[0] != -1.0;
    *(_WORD *)&v138[4] = 1024;
    *(_DWORD *)&v138[6] = LODWORD(v95[4]);
    *(_WORD *)double v139 = 2048;
    *(double *)&v139[2] = v95[0];
    LOWORD(v140) = 1024;
    *(_DWORD *)((char *)&v140 + 2) = *((double *)&__dst + 1) != -1.0;
    HIWORD(v140) = 1024;
    LODWORD(v141) = DWORD2(v84);
    WORD2(v141) = 2048;
    *(void *)((char *)&v141 + 6) = *((void *)&__dst + 1);
    float v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  v14.n128_f64[0] = v96;
  if (v96 != -1.0)
  {
    sub_1007636BC(a1 + 3064, *(float *)&v97, *((float *)&v97 + 1));
    sub_101141EF4((float *)(a1 + 3136), *(float *)&v97, *((float *)&v97 + 1));
  }
  std::string __p = 0;
  double v81 = 0;
  uint64_t v82 = 0;
  double v15 = (void *)(*(uint64_t (**)(void, __n128))(**(void **)(*(void *)a1 + 24) + 24))(*(void *)(*(void *)a1 + 24), v14);
  sub_100019ECC(v15, &__p, *(double *)(a1 + 3192), a3);
  unint64_t v16 = __p;
  uint64_t v17 = v81;
  if (__p == v81)
  {
    uint64_t v20 = 0;
    int v18 = 0;
  }
  else
  {
    int v18 = *(v81 - 2);
    do
    {
      *(_OWORD *)uint64_t buf = *v16;
      sub_100080F6C(a1 + 3064, (uint64_t)buf, a3);
      uint64_t v19 = sub_1000812EC((void *)(a1 + 3136), (double *)buf, a3);
      ++v16;
    }
    while (v16 != v17);
    uint64_t v20 = v19;
    uint64_t v12 = &qword_102419000;
  }
  sub_10005DA08((void *)(a1 + 2960), *(double *)(a1 + 3200), *(double *)(a1 + 3456), a3);
  if (v95[0] != -1.0) {
    memcpy((void *)(a1 + 3200), v95, 0x140uLL);
  }
  float v21 = sub_1000814DC(a1 + 3064, a3);
  float v22 = sub_10005CF48(a1 + 2960, a3);
  sub_1000BC984(a1 + 8, (uint64_t)&v78, a3);
  if (v12[158] != -1) {
    dispatch_once(&qword_1024194F0, &stru_10230E248);
  }
  uint64_t v23 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134218496;
    *(double *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v22;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)double v145 = v78;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CoreMotion model estimates, alsOutdoorProb, %f, wifiIndoorProb, %f, gpsOutdoorProb, %f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    *(_DWORD *)int v136 = 134218496;
    *(double *)&v136[4] = v21;
    __int16 v137 = 2048;
    *(double *)double v138 = v22;
    *(_WORD *)&v138[8] = 2048;
    *(void *)double v139 = v78;
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  if (!*(unsigned char *)(a1 + 3760))
  {
    sub_101510D18(a1 + 3520, a3);
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    __int16 v24 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLOutdoorLabeler,CLOutdoorEstimator,Init,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
      uint64_t v12 = &qword_102419000;
    }
  }
  BOOL v25 = *(double *)&v78 <= 1.0 && *(double *)&v78 >= 0.0;
  BOOL v26 = v22 <= 1.0 && v22 >= 0.0;
  BOOL v27 = v21 >= 0.0;
  if (v21 > 1.0) {
    BOOL v27 = 0;
  }
  BOOL v77 = v27;
  if (!sub_10004F014(a1 + 3520, a3)) {
    goto LABEL_143;
  }
  if (*((double *)&__dst + 1) == -1.0)
  {
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    int v28 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoMotionActivity,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      BOOL v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
      uint64_t v12 = &qword_102419000;
    }
  }
  else
  {
    sub_100196E54(a1 + 3520, SDWORD2(v84), a3);
  }
  if (v123 != -1.0)
  {
    memset(buf, 0, sizeof(buf));
    uint64_t v29 = (void *)(*(uint64_t (**)(void, double))(**(void **)(*(void *)a1 + 24) + 80))(*(void *)(*(void *)a1 + 24), v123);
    sub_1010A0940(v29, (uint64_t *)buf, *(double *)(a1 + 3192), a3);
    uint64_t v30 = *(void *)buf;
    uint64_t v31 = *(void *)&buf[8];
    while (v30 != v31)
    {
      sub_10134D2EC(a1 + 3520, v30, a3);
      v30 += 48;
    }
    *(void *)int v136 = buf;
    sub_1010A0B58((void ***)v136);
LABEL_47:
    uint64_t v12 = &qword_102419000;
    goto LABEL_53;
  }
  if (v12[158] != -1) {
    dispatch_once(&qword_1024194F0, &stru_10230E248);
  }
  __int16 v32 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    *(double *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoGnssLeechLocation,currentTime,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    *(_DWORD *)int v136 = 134217984;
    *(double *)&v136[4] = a3;
    long long v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
    goto LABEL_47;
  }
LABEL_53:
  if (v121 == -1.0)
  {
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    double v33 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoGnssAvailability,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
      uint64_t v12 = &qword_102419000;
    }
  }
  else
  {
    sub_100196600(a1 + 3520, (uint64_t)v122, a3);
  }
  if (v127 == -1.0)
  {
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    double v34 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_OutdoorNoMapMatchingRouteHint,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      BOOL v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
      uint64_t v12 = &qword_102419000;
      if (v25) {
        goto LABEL_68;
      }
LABEL_101:
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      long long v42 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoCMGpsModelOutput,currentTime,%f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v12[158] != -1) {
          dispatch_once(&qword_1024194F0, &stru_10230E248);
        }
        *(_DWORD *)int v136 = 134217984;
        *(double *)&v136[4] = a3;
        char v74 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v74);
        if (v74 != (char *)buf) {
          free(v74);
        }
      }
      goto LABEL_106;
    }
  }
  else
  {
    sub_10134D840(a1 + 3520, &v128, a3);
  }
  if (!v25) {
    goto LABEL_101;
  }
LABEL_68:
  *(_OWORD *)&uint8_t buf[8] = v78;
  *(void *)uint64_t buf = 0;
  *(void *)double v145 = v79;
  sub_1001968CC(a1 + 3520, (long long *)buf, a3);
LABEL_106:
  if (v26)
  {
    *(void *)uint64_t buf = 0;
    *(double *)&uint8_t buf[8] = v22;
    sub_10134DC00(a1 + 3520, (long long *)buf, a3);
  }
  else
  {
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    long long v43 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoCMWiFiModelOutput,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      double v75 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v75);
      if (v75 != (char *)buf) {
        free(v75);
      }
    }
  }
  if (v77)
  {
    *(void *)uint64_t buf = 0;
    *(double *)&uint8_t buf[8] = v21;
    sub_100196B90(a1 + 3520, (long long *)buf, a3);
  }
  else
  {
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    BOOL v44 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoCMALSModelOutput,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v12[158] != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      id v76 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v76);
      if (v76 != (char *)buf) {
        free(v76);
      }
    }
  }
  BOOL v45 = sub_1000809AC(a1 + 3136);
  float v46 = *(float *)(a1 + 3144);
  double v47 = sub_10018466C(a1 + 3136);
  sub_100103240();
  uint64_t v12 = &qword_102419000;
  if (sub_10010145C())
  {
    if ((unint64_t)(v20 - 1) >= 3) {
      goto LABEL_138;
    }
  }
  else if (v20 != 3)
  {
LABEL_138:
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    long long v55 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoAlsEvidence,currentTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10230E248);
      }
      *(_DWORD *)int v136 = 134217984;
      *(double *)&v136[4] = a3;
      double v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v73);
      if (v73 != (char *)buf) {
        free(v73);
      }
      uint64_t v12 = &qword_102419000;
    }
    goto LABEL_143;
  }
  if (v46 <= 0.0 || !v45) {
    goto LABEL_138;
  }
  double v49 = 750.0;
  if (v47 <= 750.0) {
    goto LABEL_138;
  }
  *(_DWORD *)&uint8_t buf[8] = 0;
  double v50 = 15000.0;
  if (v47 <= 15000.0) {
    double v50 = v47;
  }
  if (v47 >= 750.0) {
    double v49 = v50;
  }
  float v51 = *(float *)(a1 + 3144);
  float v52 = 90.0;
  if (v51 < 90.0) {
    float v52 = *(float *)(a1 + 3144);
  }
  double v53 = v52;
  _NF = v51 < 0.0;
  double v54 = 0.0;
  if (!_NF) {
    double v54 = v53;
  }
  *(double *)&uint8_t buf[16] = v49;
  *(double *)double v145 = v54;
  v145[8] = v45;
  *(void *)&v146[6] = v20;
  *(double *)uint64_t buf = a3;
  sub_10134DEC4(a1 + 3520, (uint64_t)buf, a3);
LABEL_143:
  *(double *)a2 = a3;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = v20;
  *(unsigned char *)(a2 + 48) = sub_1000809AC(a1 + 3136);
  *(_DWORD *)(a2 + 52) = v18;
  sub_1001828DC(a1 + 3520, a2);
  if (v12[158] != -1) {
    dispatch_once(&qword_1024194F0, &stru_10230E248);
  }
  __int16 v56 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    double v57 = *(double *)a2;
    uint64_t v58 = *(void *)(a2 + 8);
    uint64_t v59 = *(void *)(a2 + 16);
    uint64_t v60 = *(void *)(a2 + 24);
    int v61 = *(unsigned __int8 *)(a2 + 48);
    uint64_t v62 = *(void *)(a2 + 32);
    uint64_t v63 = *(void *)(a2 + 40);
    *(_DWORD *)uint64_t buf = 134219521;
    *(double *)&uint8_t buf[4] = v57;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v58;
    *(_WORD *)&unsigned char buf[22] = 2049;
    *(void *)double v145 = v59;
    *(_WORD *)&v145[8] = 2049;
    *(void *)unsigned int v146 = v60;
    *(_WORD *)&v146[8] = 2049;
    *(void *)&v146[10] = v62;
    *(_WORD *)&v146[18] = 1025;
    *(_DWORD *)&v146[20] = v61;
    __int16 v147 = 2049;
    uint64_t v148 = v63;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "CLOutdoorEstimator_HMM Estimate,startTime,%f,mctTimestampSec,%{private}f,type, %{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v12[158] != -1) {
      dispatch_once(&qword_1024194F0, &stru_10230E248);
    }
    double v65 = *(double *)a2;
    uint64_t v66 = *(void *)(a2 + 8);
    uint64_t v67 = *(void *)(a2 + 16);
    uint64_t v68 = *(void *)(a2 + 24);
    int v69 = *(unsigned __int8 *)(a2 + 48);
    uint64_t v70 = *(void *)(a2 + 32);
    uint64_t v71 = *(void *)(a2 + 40);
    *(_DWORD *)int v136 = 134219521;
    *(double *)&v136[4] = v65;
    __int16 v137 = 2049;
    *(void *)double v138 = v66;
    *(_WORD *)&v138[8] = 2049;
    *(void *)double v139 = v67;
    *(_WORD *)&v139[8] = 2049;
    uint64_t v140 = v68;
    LOWORD(v141) = 2049;
    *(void *)((char *)&v141 + 2) = v70;
    WORD5(v141) = 1025;
    HIDWORD(v141) = v69;
    __int16 v142 = 2049;
    uint64_t v143 = v71;
    int v72 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v72);
    if (v72 != (char *)buf) {
      free(v72);
    }
  }
  uint64_t v64 = *(int *)(a1 + 3788);
  if (v64 != 3) {
    *(void *)(a2 + 16) = v64;
  }
  *(double *)(a1 + 3192) = a3;
  if (__p)
  {
    double v81 = __p;
    operator delete(__p);
  }
  if (v129)
  {
    uint64_t v130 = v129;
    operator delete(v129);
  }
  if (v125[0])
  {
    v125[1] = v125[0];
    operator delete(v125[0]);
  }
  *(void *)uint64_t buf = v120;
  sub_1000D7F78((void ***)buf);
  if (v133)
  {
    double v134 = v133;
    operator delete(v133);
  }
}

void sub_1000808F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (__p) {
    operator delete(__p);
  }
  sub_100AD787C((uint64_t)va);
  float v10 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000809AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return *(unsigned char *)(a1 + 49) != 0;
  }
  else {
    return *(float *)(a1 + 8) > 0.0;
  }
}

uint64_t sub_1000809D4(uint64_t a1)
{
  uint64_t v1 = 0;
  float v2 = *(float *)(a1 + 8);
  unint64_t v3 = (float *)&unk_101DA9660;
  while (*(float *)&dword_101DA9624[v1] >= v2 || *(float *)&dword_101DA9624[v1 + 1] < v2)
  {
    v1 += 5;
    if (v1 == 20) {
      goto LABEL_7;
    }
  }
  unint64_t v3 = (float *)&dword_101DA9624[v1];
LABEL_7:
  float v5 = v3[2];
  float v4 = v3[3];
  float v6 = v3[4];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 - 16);
  float v9 = *(float *)(v7 - 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024859E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v25 = a1;
    float v37 = v6;
    float v40 = v4;
    float v34 = v5;
    int v26 = __cxa_guard_acquire(&qword_1024859E0);
    float v5 = v34;
    float v6 = v37;
    float v4 = v40;
    int v27 = v26;
    a1 = v25;
    if (v27)
    {
      *(_DWORD *)uint64_t buf = -1082130432;
      sub_101A22680((unsigned __int8 *)&byte_1024859D0, "DaylightLowConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_1024859E0);
      a1 = v25;
      float v6 = v37;
      float v4 = v40;
      float v5 = v34;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024859F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v28 = a1;
    float v38 = v6;
    float v41 = v4;
    float v35 = v5;
    int v29 = __cxa_guard_acquire(&qword_1024859F8);
    float v5 = v35;
    float v6 = v38;
    float v4 = v41;
    int v30 = v29;
    a1 = v28;
    if (v30)
    {
      *(_DWORD *)uint64_t buf = -1082130432;
      sub_101A22680((unsigned __int8 *)&byte_1024859E8, "DaylightMedConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_1024859F8);
      a1 = v28;
      float v6 = v38;
      float v4 = v41;
      float v5 = v35;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485A10, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = a1;
    float v39 = v6;
    float v42 = v4;
    float v36 = v5;
    int v32 = __cxa_guard_acquire(&qword_102485A10);
    float v5 = v36;
    float v6 = v39;
    float v4 = v42;
    int v33 = v32;
    a1 = v31;
    if (v33)
    {
      *(_DWORD *)uint64_t buf = -1082130432;
      sub_101A22680((unsigned __int8 *)&byte_102485A00, "DaylightHighConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_102485A10);
      a1 = v31;
      float v6 = v39;
      float v4 = v42;
      float v5 = v36;
    }
  }
  if (byte_1024859D0) {
    float v5 = *(float *)&dword_1024859D4;
  }
  if (byte_1024859E8) {
    float v4 = *(float *)&dword_1024859EC;
  }
  if (byte_102485A00) {
    float v6 = *(float *)&dword_102485A04;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v10 == v11)
  {
    int v14 = 0;
    int v13 = 0;
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    do
    {
      float v15 = *(float *)(v10 + 8);
      if (v15 > v5)
      {
        ++v14;
        int v16 = v15 <= v6 ? v12 : v12 + 1;
        if (v15 > v4)
        {
          ++v13;
          int v12 = v16;
        }
      }
      v10 += 16;
    }
    while (v10 != v11);
    if (v12 > 1)
    {
      uint64_t v17 = 3;
      goto LABEL_31;
    }
    if (v13 > 9)
    {
      uint64_t v17 = 2;
      goto LABEL_31;
    }
  }
  uint64_t v17 = v14 > 29;
LABEL_31:
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v18 = *(unsigned char *)(a1 + 49) != 0;
  }
  else {
    BOOL v18 = *(float *)(a1 + 8) > 0.0;
  }
  if (v18) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v2 == -9999.0) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = v19;
  }
  if (v9 <= v4) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102313BF8);
  }
  float v22 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134220032;
    double v44 = v9;
    __int16 v45 = 2048;
    double v46 = v2;
    __int16 v47 = 1024;
    int v48 = v14;
    __int16 v49 = 1024;
    int v50 = v13;
    __int16 v51 = 1024;
    int v52 = v12;
    __int16 v53 = 2048;
    uint64_t v54 = v20;
    __int16 v55 = 2048;
    uint64_t v56 = v21;
    __int16 v57 = 2048;
    uint64_t v58 = v8;
    __int16 v59 = 1024;
    BOOL v60 = v18;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "ALSDaylightDetectorEstimate,lux,%f,sunElevation,%f,lowCnt,%d,medCnt,%d,highCnt,%d,conf,%ld,confFilt,%ld,startTime,%f, isAstronomicalDaytime, %d", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102313BF8);
    }
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMIndoorOutdoorConfidence CLALSDaylightDetector::estimateIsDaylight() const", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  return v21;
}

void sub_100080F2C(_Unwind_Exception *a1)
{
}

void sub_100080F6C(uint64_t a1, uint64_t a2, double a3)
{
  sub_10008126C(a1 + 48, *(double *)a2);
  unint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      int v14 = (char *)sub_1000C571C(a1 + 40, v13);
    }
    else {
      int v14 = 0;
    }
    float v15 = &v14[16 * v10];
    int v16 = &v14[16 * v13];
    *(_OWORD *)float v15 = *(_OWORD *)a2;
    uint64_t v8 = v15 + 16;
    BOOL v18 = *(char **)(a1 + 24);
    uint64_t v17 = *(char **)(a1 + 32);
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = *(char **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v15;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = v7 + 1;
  }
  *(void *)(a1 + 32) = v8;
  sub_1000818D0(a1, a3);
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1022C75D8);
  }
  uint64_t v19 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v20 = *(void *)a1;
    }
    double v21 = *(float *)(a2 + 8);
    double v22 = *(double *)a2;
    *(_DWORD *)uint64_t buf = 136315650;
    uint64_t v25 = v20;
    __int16 v26 = 2050;
    double v27 = v21;
    __int16 v28 = 2050;
    double v29 = v22;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "IndoorOutdoor,ALSScan,context,%s,lux,%{public}.0f,t,%{public}f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022C75D8);
    }
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLALSIndoorOutdoorDetector::feedALSScanResult(const CLAmbientLightSensor_Type::CLALSLuxResult &, CFAbsoluteTime)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
}

void sub_10008126C(uint64_t a1, double a2)
{
  if (*(float *)a1 != -9999.0)
  {
    float v4 = *(float *)(a1 + 4);
    if (v4 != -9999.0 && (vabdd_f64(a2, *(double *)(a1 + 16)) > 300.0 || *(float *)(a1 + 8) == -9999.0))
    {
      *(float *)(a1 + 8) = sub_100AFFA40(a2, *(float *)a1, v4);
      *(double *)(a1 + 16) = a2;
    }
  }
}

uint64_t sub_1000812EC(void *a1, double *a2, double a3)
{
  sub_10008126C((uint64_t)a1, *a2);
  unint64_t v6 = a1[5];
  uint64_t v7 = (_OWORD *)a1[4];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[3];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      int v14 = (char *)sub_1000C571C((uint64_t)(a1 + 5), v13);
    }
    else {
      int v14 = 0;
    }
    float v15 = &v14[16 * v10];
    int v16 = &v14[16 * v13];
    *(_OWORD *)float v15 = *(_OWORD *)a2;
    uint64_t v8 = v15 + 16;
    BOOL v18 = (char *)a1[3];
    uint64_t v17 = (char *)a1[4];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)a1[3];
    }
    a1[3] = v15;
    a1[4] = v8;
    a1[5] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = v7 + 1;
  }
  a1[4] = v8;
  sub_100081418((uint64_t)a1, a3);

  return sub_1000809D4((uint64_t)a1);
}

uint64_t sub_100081418(uint64_t result, double a2)
{
  unint64_t v3 = *(double **)(result + 24);
  float v2 = *(double **)(result + 32);
  if (v3 != v2)
  {
    while (a2 - *v3 <= 150.0)
    {
      v3 += 2;
      if (v3 == v2) {
        return result;
      }
    }
    if (v3 != v2)
    {
      float v4 = v3 + 2;
      if (v3 + 2 != v2)
      {
        do
        {
          if (a2 - *v4 <= 150.0)
          {
            *(_OWORD *)unint64_t v3 = *(_OWORD *)v4;
            v3 += 2;
          }
          v4 += 2;
        }
        while (v4 != v2);
        float v2 = *(double **)(result + 32);
      }
    }
    if (v3 != v2) {
      *(void *)(result + 32) = v3;
    }
  }
  return result;
}

float sub_1000814DC(uint64_t a1, double a2)
{
  unint64_t v3 = sub_100081820(a1, a2);
  float v4 = *(float *)&v3;
  int v6 = v5;
  unint64_t v7 = HIDWORD(v3);
  unint64_t v24 = 0xBA4F9E383FC07C8DLL;
  int v23 = HIDWORD(v3);
  sub_100081994((uint64_t)&v23, &v57, (int *)&v24, 2, 1);
  float v8 = v58;
  float v9 = *(float *)(a1 + 56);
  if (v6 <= 6 || v9 <= 15.0 || v9 == -9999.0) {
    float v12 = -1.0;
  }
  else {
    float v12 = v58;
  }
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1022C75D8);
  }
  float v13 = v4;
  int v14 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v15 = *(void *)a1;
    }
    double v16 = *(float *)(a1 + 56);
    BOOL v17 = *(float *)(a1 + 48) != -9999.0 && *(float *)(a1 + 52) != -9999.0;
    *(_DWORD *)uint64_t buf = 136316930;
    uint64_t v42 = v15;
    __int16 v43 = 2050;
    double v44 = v12;
    __int16 v45 = 2050;
    double v46 = v8;
    __int16 v47 = 2050;
    double v48 = *(float *)&v7;
    __int16 v49 = 2050;
    double v50 = v13;
    __int16 v51 = 1026;
    int v52 = v6;
    __int16 v53 = 2050;
    double v54 = v16;
    __int16 v55 = 1026;
    BOOL v56 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "IndoorOutdoor,ALSResult,context,%s,outputProb,%{public}.2f,rawProb,%{public}.2f,meanLux,%{public}.2f,stdLux,%{public}.2f,n,%{public}d,elevation,%{public}.2f,hasLatLon,%{public}d", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022C75D8);
    }
    uint64_t v19 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v19 = *(void *)a1;
    }
    double v20 = *(float *)(a1 + 56);
    BOOL v21 = *(float *)(a1 + 48) != -9999.0 && *(float *)(a1 + 52) != -9999.0;
    int v25 = 136316930;
    uint64_t v26 = v19;
    __int16 v27 = 2050;
    double v28 = v12;
    __int16 v29 = 2050;
    double v30 = v8;
    __int16 v31 = 2050;
    double v32 = *(float *)&v7;
    __int16 v33 = 2050;
    double v34 = v13;
    __int16 v35 = 1026;
    int v36 = v6;
    __int16 v37 = 2050;
    double v38 = v20;
    __int16 v39 = 1026;
    BOOL v40 = v21;
    double v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLALSIndoorOutdoorDetector::computeOutdoorProbability(CFAbsoluteTime)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  return v12;
}

unint64_t sub_100081820(uint64_t a1, double a2)
{
  sub_1000818D0(a1, a2);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == v4)
  {
    unint64_t v10 = 0;
    float v11 = 0.0;
  }
  else
  {
    float v5 = 0.0;
    unint64_t v6 = -1;
    float v7 = 0.0;
    do
    {
      float v8 = *(float *)(v3 + 8);
      float v9 = v8 - v7;
      float v7 = v7 + (float)((float)(v8 - v7) / (float)(v6 + 2));
      float v5 = v5 + (float)(v9 * (float)(v8 - v7));
      v3 += 16;
      ++v6;
    }
    while (v3 != v4);
    unint64_t v10 = (unint64_t)LODWORD(v7) << 32;
    if (v6) {
      float v11 = v5 / (float)v6;
    }
    else {
      float v11 = 0.0;
    }
  }
  return v10 | COERCE_UNSIGNED_INT(sqrtf(v11));
}

uint64_t sub_1000818D0(uint64_t result, double a2)
{
  uint64_t v3 = *(double **)(result + 24);
  float v2 = *(double **)(result + 32);
  if (v3 != v2)
  {
    while (vabdd_f64(a2, *v3) <= 150.0)
    {
      v3 += 2;
      if (v3 == v2) {
        return result;
      }
    }
    if (v3 != v2)
    {
      uint64_t v4 = v3 + 2;
      if (v3 + 2 != v2)
      {
        do
        {
          if (vabdd_f64(a2, *v4) <= 150.0)
          {
            *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
            v3 += 2;
          }
          v4 += 2;
        }
        while (v4 != v2);
        float v2 = *(double **)(result + 32);
      }
    }
    if (v3 != v2) {
      *(void *)(result + 32) = v3;
    }
  }
  return result;
}

void sub_100081994(uint64_t a1, float *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a4 - 1;
  if (a4 != 1)
  {
    float v8 = a3;
    float v9 = a2;
    uint64_t v10 = a4 - 1;
    do
    {
      int v11 = *v8++;
      *(_DWORD *)v9++ = v11;
      --v10;
    }
    while (v10);
  }
  if (a5)
  {
    uint64_t v12 = 0;
    do
    {
      if (a4 == 1)
      {
        uint64_t v13 = v12 + 1;
      }
      else
      {
        uint64_t v13 = v12 + 1;
        int v14 = (float *)((char *)a3 + 4 * v7 * (v12 + 1));
        uint64_t v15 = a2;
        uint64_t v16 = a4 - 1;
        do
        {
          float v17 = *v14++;
          float *v15 = *v15 + (float)(*(float *)(a1 + 4 * v12) * v17);
          ++v15;
          --v16;
        }
        while (v16);
      }
      uint64_t v12 = v13;
    }
    while (v13 != a5);
  }
  a2[v7] = 1.0;
  if (a4 == 1)
  {
    float v19 = 1.0;
    do
    {
LABEL_18:
      *unint64_t v6 = *v6 / v19;
      ++v6;
      --v5;
    }
    while (v5);
    return;
  }
  uint64_t v18 = 0;
  float v19 = 1.0;
  do
  {
    float v20 = expf(v6[v18]);
    v6[v18] = v20;
    float v19 = v19 + v20;
    ++v18;
  }
  while (v7 != v18);
  if (v5) {
    goto LABEL_18;
  }
}

uint64_t sub_100081A8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = result;
    if (*(void *)(*(void *)(result + 32) + 24))
    {
      BOOL result = IOHIDEventGetType();
      if (result == 12)
      {
        BOOL result = IOHIDEventGetIntegerValue();
        if (result == 1)
        {
          uint64_t v6 = *(void *)(*(void *)(v5 + 32) + 24);
          return sub_1000987A8(v6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100081B10(uint64_t a1, int a2, uint64_t a3)
{
  if (!sub_100082064(a1 + 72)) {
    return 109;
  }
  sub_100082068((void *)(a1 + 488), &v32);
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v32);
  if (sub_10014D1A4(v6, 1, a2))
  {
    uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v32);
    if (sqlite3_step(v7) == 100)
    {
      float v8 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(void *)a3 = sqlite3_column_int(v8, 0);
      float v9 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 8) = sqlite3_column_double(v9, 1);
      uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 16) = sqlite3_column_int(v10, 2);
      int v11 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 20) = sqlite3_column_int(v11, 3);
      uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 24) = sqlite3_column_double(v12, 4);
      uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 40) = sqlite3_column_double(v13, 5);
      int v14 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 56) = sqlite3_column_double(v14, 6);
      uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(v32);
      uint64_t v16 = sqlite3_column_text(v15, 7);
      uuid_parse((const char *)v16, (unsigned __int8 *)(a3 + 64));
      float v17 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 80) = sqlite3_column_double(v17, 8);
      uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 48) = sqlite3_column_double(v18, 9);
      float v19 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 96) = sqlite3_column_int(v19, 10);
      float v20 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 100) = sqlite3_column_int(v20, 11);
      BOOL v21 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 104) = sqlite3_column_int(v21, 12);
      double v22 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 108) = sqlite3_column_int(v22, 13);
      int v23 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 32) = sqlite3_column_double(v23, 14);
      unint64_t v24 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 112) = sqlite3_column_double(v24, 15);
      int v25 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 88) = sqlite3_column_double(v25, 16);
      uint64_t v26 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 120) = sqlite3_column_double(v26, 17);
      __int16 v27 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 128) = sqlite3_column_double(v27, 18);
      double v28 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(_DWORD *)(a3 + 136) = sqlite3_column_int(v28, 19);
      __int16 v29 = (sqlite3_stmt *)sub_10014D19C(v32);
      *(double *)(a3 + 144) = sqlite3_column_double(v29, 20);
    }
  }
  uint64_t v30 = v32;
  uint64_t v32 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  return 100;
}

void sub_100081D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100081D90(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 448), &v7);
  uint64_t v4 = sub_10008224C(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_100081E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100081E3C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current < 441763200.0 || Current > 3628972800.0)
  {
    if ((byte_1024863EC & 1) == 0) {
      byte_1024863EC = 1;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023180C0);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 1026;
      int v12 = (int)Current;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error\", \"CFAbsoluteTimeGetCurrent\":%{public}d}", (uint8_t *)&v7, 0x18u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    uint64_t v6 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 1026;
      int v12 = (int)Current;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error", "{\"msg%{public}.0s\":\"CL database error\", \"CFAbsoluteTimeGetCurrent\":%{public}d}", (uint8_t *)&v7, 0x18u);
    }
    return 0;
  }
  byte_1024863EC = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }

  return sub_10014C3C0(v3);
}

void *sub_100082068@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result && result[1]) {
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_1000820D4()
{
}

void *sub_1000820F8(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_102303570;
  a1[1] = a2;
  a1[2] = a3;
  sub_10014DB1C(a2);
  *a1 = off_1023035B0;
  return a1;
}

void sub_100082160(uint64_t a1)
{
  sub_100082198(a1);

  operator delete();
}

void *sub_100082198(uint64_t a1)
{
  *(void *)a1 = off_1023035B0;
  int v2 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
  if (v2)
  {
    sub_1005F93F0(*(void *)(a1 + 8), (uint64_t)"sqlite3_reset()", v2, *(sqlite3_stmt **)(a1 + 16));
    sub_1005F7AF4(*(void *)(a1 + 8), v2);
  }
  int v3 = sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 16));
  if (v3)
  {
    sub_1005F93F0(*(void *)(a1 + 8), (uint64_t)"sqlite3_clear_bindings()", v3, *(sqlite3_stmt **)(a1 + 16));
    sub_1005F7AF4(*(void *)(a1 + 8), v3);
  }

  return sub_10014D414((void *)a1);
}

uint64_t sub_10008224C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  int v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 2);
  __int16 v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 40) = sqlite3_column_int(v9, 3);
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 44) = sqlite3_column_int(v10, 4);
  __int16 v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v12 = sqlite3_column_double(v11, 5);
  uint64_t result = 0;
  *(double *)(a2 + 48) = v12;
  return result;
}

uint64_t sub_100082318(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 52))
  {
    int v3 = 0;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248D2B8 + 32);
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000823F4(v4, a2);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  }
  else {
    int v7 = 1;
  }
  int v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 52) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 40);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D2B8 + 40);
    }
    __int16 v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100082464(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    v3 += v11 + v12 + 1;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8))
         + v3;
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000823F4(uint64_t a1, unint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  if (*(unsigned char *)(a1 + 44))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 8) != 0) {
      uint64_t v5 = v5
    }
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

uint64_t sub_100082464(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_61;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A400 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003DF658(v5);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  }
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248A400 + 16);
    }
    unsigned int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003E0708(v9);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_10248A400 + 24);
    }
    int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003E16E4(v13);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    }
    else {
      int v16 = 1;
    }
    uint64_t v4 = (v4 + v15 + v16 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248A400 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10000E864(v17, a2);
  int v19 = (int)v18;
  if (v18 >= 0x80) {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  }
  else {
    int v20 = 1;
  }
  uint64_t v4 = (v4 + v19 + v20 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_37:
  uint64_t v21 = *(void *)(a1 + 40);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_10248A400 + 40);
  }
  double v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003ECCF4(v21, a2);
  int v23 = (int)v22;
  if (v22 >= 0x80) {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  }
  else {
    int v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_43:
  uint64_t v25 = *(void *)(a1 + 48);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_10248A400 + 48);
  }
  uint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003EDF94(v25, a2);
  int v27 = (int)v26;
  if (v26 >= 0x80) {
    int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
  }
  else {
    int v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
LABEL_49:
  uint64_t v29 = *(void *)(a1 + 56);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_10248A400 + 56);
  }
  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F1D00(v29, a2);
  int v31 = (int)v30;
  if (v30 >= 0x80) {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
  }
  else {
    int v32 = 1;
  }
  uint64_t v4 = (v4 + v31 + v32 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v33 = *(void *)(a1 + 64);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_10248A400 + 64);
    }
    double v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F2314(v33);
    int v35 = (int)v34;
    if (v34 >= 0x80) {
      int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
    }
    else {
      int v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_61:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v37 = *(void *)(a1 + 72);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_10248A400 + 72);
    }
    double v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F2CC0(v37, a2);
    int v39 = (int)v38;
    if (v38 >= 0x80) {
      int v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2);
    }
    else {
      int v40 = 1;
    }
    uint64_t v4 = (v4 + v39 + v40 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  uint64_t v41 = *(void *)(a1 + 80);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_10248A400 + 80);
  }
  uint64_t v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F45A0(v41, a2);
  int v43 = (int)v42;
  if (v42 >= 0x80) {
    int v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42, a2);
  }
  else {
    int v44 = 1;
  }
  uint64_t v4 = (v4 + v43 + v44 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }
LABEL_83:
  uint64_t v45 = *(void *)(a1 + 88);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_10248A400 + 88);
  }
  double v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FBDE0(v45, a2);
  int v47 = (int)v46;
  if (v46 >= 0x80) {
    int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
  }
  else {
    int v48 = 1;
  }
  uint64_t v4 = (v4 + v47 + v48 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }
LABEL_89:
  uint64_t v49 = *(void *)(a1 + 96);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_10248A400 + 96);
  }
  double v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FC824(v49, a2);
  int v51 = (int)v50;
  if (v50 >= 0x80) {
    int v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50, a2);
  }
  else {
    int v52 = 1;
  }
  uint64_t v4 = (v4 + v51 + v52 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }
LABEL_95:
  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    uint64_t v53 = *(void *)(qword_10248A400 + 104);
  }
  double v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E38668(v53, a2);
  int v55 = (int)v54;
  if (v54 >= 0x80) {
    int v56 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54, a2);
  }
  else {
    int v56 = 1;
  }
  uint64_t v4 = (v4 + v55 + v56 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }
LABEL_101:
  uint64_t v57 = *(void *)(a1 + 112);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_10248A400 + 112);
  }
  float v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FDE90(v57);
  int v59 = (int)v58;
  if (v58 >= 0x80) {
    int v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58, a2);
  }
  else {
    int v60 = 1;
  }
  uint64_t v4 = (v4 + v59 + v60 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }
LABEL_107:
  uint64_t v61 = *(void *)(a1 + 120);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_10248A400 + 120);
  }
  uint64_t v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FE46C(v61);
  int v63 = (int)v62;
  if (v62 >= 0x80) {
    int v64 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62, a2);
  }
  else {
    int v64 = 1;
  }
  uint64_t v4 = (v4 + v63 + v64 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    uint64_t v65 = *(void *)(a1 + 128);
    if (!v65) {
      uint64_t v65 = *(void *)(qword_10248A400 + 128);
    }
    uint64_t v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100401E2C(v65, a2);
    int v67 = (int)v66;
    if (v66 >= 0x80) {
      int v68 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
    }
    else {
      int v68 = 1;
    }
    uint64_t v4 = (v4 + v67 + v68 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_119:
  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_177;
  }
  if ((v3 & 0x10000) != 0)
  {
    uint64_t v69 = *(void *)(a1 + 136);
    if (!v69) {
      uint64_t v69 = *(void *)(qword_10248A400 + 136);
    }
    uint64_t v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100404560(v69, a2);
    int v71 = (int)v70;
    if (v70 >= 0x80) {
      int v72 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70, a2);
    }
    else {
      int v72 = 1;
    }
    uint64_t v4 = (v4 + v71 + v72 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_141;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  uint64_t v73 = *(void *)(a1 + 144);
  if (!v73) {
    uint64_t v73 = *(void *)(qword_10248A400 + 144);
  }
  char v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10000E864(v73, a2);
  int v75 = (int)v74;
  if (v74 >= 0x80) {
    int v76 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74, a2);
  }
  else {
    int v76 = 1;
  }
  uint64_t v4 = (v4 + v75 + v76 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_147;
  }
LABEL_141:
  uint64_t v77 = *(void *)(a1 + 152);
  if (!v77) {
    uint64_t v77 = *(void *)(qword_10248A400 + 152);
  }
  long long v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004072C4(v77, a2);
  int v79 = (int)v78;
  if (v78 >= 0x80) {
    int v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78, a2);
  }
  else {
    int v80 = 1;
  }
  uint64_t v4 = (v4 + v79 + v80 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_153;
  }
LABEL_147:
  uint64_t v81 = *(void *)(a1 + 160);
  if (!v81) {
    uint64_t v81 = *(void *)(qword_10248A400 + 160);
  }
  uint64_t v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100408D40(v81);
  int v83 = (int)v82;
  if (v82 >= 0x80) {
    int v84 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82, a2);
  }
  else {
    int v84 = 1;
  }
  uint64_t v4 = (v4 + v83 + v84 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_159;
  }
LABEL_153:
  uint64_t v85 = *(void *)(a1 + 168);
  if (!v85) {
    uint64_t v85 = *(void *)(qword_10248A400 + 168);
  }
  long long v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F5A60(v85, a2);
  int v87 = (int)v86;
  if (v86 >= 0x80) {
    int v88 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v86, a2);
  }
  else {
    int v88 = 1;
  }
  uint64_t v4 = (v4 + v87 + v88 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x200000) == 0)
  {
LABEL_126:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_165;
  }
LABEL_159:
  uint64_t v89 = *(void *)(a1 + 176);
  if (!v89) {
    uint64_t v89 = *(void *)(qword_10248A400 + 176);
  }
  long long v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10040BA60(v89, a2);
  int v91 = (int)v90;
  if (v90 >= 0x80) {
    int v92 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v90, a2);
  }
  else {
    int v92 = 1;
  }
  uint64_t v4 = (v4 + v91 + v92 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x400000) == 0)
  {
LABEL_127:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_171;
  }
LABEL_165:
  uint64_t v93 = *(void *)(a1 + 184);
  if (!v93) {
    uint64_t v93 = *(void *)(qword_10248A400 + 184);
  }
  int v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F740C(v93, a2);
  int v95 = (int)v94;
  if (v94 >= 0x80) {
    int v96 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94, a2);
  }
  else {
    int v96 = 1;
  }
  uint64_t v4 = (v4 + v95 + v96 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x800000) != 0)
  {
LABEL_171:
    uint64_t v97 = *(void *)(a1 + 192);
    if (!v97) {
      uint64_t v97 = *(void *)(qword_10248A400 + 192);
    }
    unint64_t v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F9A2C(v97, a2);
    int v99 = (int)v98;
    if (v98 >= 0x80) {
      int v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v98, a2);
    }
    else {
      int v100 = 1;
    }
    uint64_t v4 = (v4 + v99 + v100 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_177:
  if (!HIBYTE(v3)) {
    goto LABEL_235;
  }
  if ((v3 & 0x1000000) != 0)
  {
    uint64_t v101 = *(void *)(a1 + 200);
    if (!v101) {
      uint64_t v101 = *(void *)(qword_10248A400 + 200);
    }
    long long v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F8840(v101, a2);
    int v103 = (int)v102;
    if (v102 >= 0x80) {
      int v104 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v102, a2);
    }
    else {
      int v104 = 1;
    }
    uint64_t v4 = (v4 + v103 + v104 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v3 & 0x4000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_199;
    }
  }
  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }
  uint64_t v105 = *(void *)(a1 + 208);
  if (!v105) {
    uint64_t v105 = *(void *)(qword_10248A400 + 208);
  }
  long long v106 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100404E8C(v105, a2);
  int v107 = (int)v106;
  if (v106 >= 0x80) {
    int v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v106, a2);
  }
  else {
    int v108 = 1;
  }
  uint64_t v4 = (v4 + v107 + v108 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_205;
  }
LABEL_199:
  uint64_t v109 = *(void *)(a1 + 216);
  if (!v109) {
    uint64_t v109 = *(void *)(qword_10248A400 + 216);
  }
  uint64_t v110 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100407CD8(v109, a2);
  int v111 = (int)v110;
  if (v110 >= 0x80) {
    int v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v110, a2);
  }
  else {
    int v112 = 1;
  }
  uint64_t v4 = (v4 + v111 + v112 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v3 & 0x10000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }
LABEL_205:
  uint64_t v113 = *(void *)(a1 + 224);
  if (!v113) {
    uint64_t v113 = *(void *)(qword_10248A400 + 224);
  }
  uint64_t v114 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100085184(v113, a2);
  int v115 = (int)v114;
  if (v114 >= 0x80) {
    int v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v114, a2);
  }
  else {
    int v116 = 1;
  }
  uint64_t v4 = (v4 + v115 + v116 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_217;
  }
LABEL_211:
  uint64_t v117 = *(void *)(a1 + 232);
  if (!v117) {
    uint64_t v117 = *(void *)(qword_10248A400 + 232);
  }
  uint64_t v118 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10040E8A0(v117, a2);
  int v119 = (int)v118;
  if (v118 >= 0x80) {
    int v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v118, a2);
  }
  else {
    int v120 = 1;
  }
  uint64_t v4 = (v4 + v119 + v120 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v3 & 0x40000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_223;
  }
LABEL_217:
  uint64_t v121 = *(void *)(a1 + 240);
  if (!v121) {
    uint64_t v121 = *(void *)(qword_10248A400 + 240);
  }
  unint64_t v122 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100411A80(v121, a2);
  int v123 = (int)v122;
  if (v122 >= 0x80) {
    int v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v122, a2);
  }
  else {
    int v124 = 1;
  }
  uint64_t v4 = (v4 + v123 + v124 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_229;
  }
LABEL_223:
  uint64_t v125 = *(void *)(a1 + 248);
  if (!v125) {
    uint64_t v125 = *(void *)(qword_10248A400 + 248);
  }
  uint64_t v126 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004136C0(v125, a2);
  int v127 = (int)v126;
  if (v126 >= 0x80) {
    int v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v126, a2);
  }
  else {
    int v128 = 1;
  }
  uint64_t v4 = (v4 + v127 + v128 + 2);
  if ((*(_DWORD *)(a1 + 488) & 0x80000000) != 0)
  {
LABEL_229:
    uint64_t v129 = *(void *)(a1 + 256);
    if (!v129) {
      uint64_t v129 = *(void *)(qword_10248A400 + 256);
    }
    uint64_t v130 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F0254(v129, a2);
    int v131 = (int)v130;
    if (v130 >= 0x80) {
      int v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v130, a2);
    }
    else {
      int v132 = 1;
    }
    uint64_t v4 = (v4 + v131 + v132 + 2);
  }
LABEL_235:
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if (!(_BYTE)v133) {
    goto LABEL_293;
  }
  if (v133)
  {
    uint64_t v134 = *(void *)(a1 + 264);
    if (!v134) {
      uint64_t v134 = *(void *)(qword_10248A400 + 264);
    }
    int v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004152E0(v134, a2);
    int v136 = (int)v135;
    if (v135 >= 0x80) {
      int v137 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v135, a2);
    }
    else {
      int v137 = 1;
    }
    uint64_t v4 = (v4 + v136 + v137 + 2);
    unsigned int v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 2) == 0)
    {
LABEL_238:
      if ((v133 & 4) == 0) {
        goto LABEL_239;
      }
      goto LABEL_257;
    }
  }
  else if ((v133 & 2) == 0)
  {
    goto LABEL_238;
  }
  uint64_t v138 = *(void *)(a1 + 272);
  if (!v138) {
    uint64_t v138 = *(void *)(qword_10248A400 + 272);
  }
  double v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10149E744(v138, a2);
  int v140 = (int)v139;
  if (v139 >= 0x80) {
    int v141 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v139, a2);
  }
  else {
    int v141 = 1;
  }
  uint64_t v4 = (v4 + v140 + v141 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 4) == 0)
  {
LABEL_239:
    if ((v133 & 8) == 0) {
      goto LABEL_240;
    }
    goto LABEL_263;
  }
LABEL_257:
  uint64_t v142 = *(void *)(a1 + 280);
  if (!v142) {
    uint64_t v142 = *(void *)(qword_10248A400 + 280);
  }
  uint64_t v143 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181E74(v142, a2);
  int v144 = (int)v143;
  if (v143 >= 0x80) {
    int v145 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v143, a2);
  }
  else {
    int v145 = 1;
  }
  uint64_t v4 = (v4 + v144 + v145 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 8) == 0)
  {
LABEL_240:
    if ((v133 & 0x10) == 0) {
      goto LABEL_241;
    }
    goto LABEL_269;
  }
LABEL_263:
  uint64_t v146 = *(void *)(a1 + 288);
  if (!v146) {
    uint64_t v146 = *(void *)(qword_10248A400 + 288);
  }
  __int16 v147 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100FE99D8(v146, a2);
  int v148 = (int)v147;
  if (v147 >= 0x80) {
    int v149 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v147, a2);
  }
  else {
    int v149 = 1;
  }
  uint64_t v4 = (v4 + v148 + v149 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x10) == 0)
  {
LABEL_241:
    if ((v133 & 0x20) == 0) {
      goto LABEL_242;
    }
    goto LABEL_275;
  }
LABEL_269:
  uint64_t v150 = *(void *)(a1 + 296);
  if (!v150) {
    uint64_t v150 = *(void *)(qword_10248A400 + 296);
  }
  long long v151 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A1482C(v150, a2);
  int v152 = (int)v151;
  if (v151 >= 0x80) {
    int v153 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v151, a2);
  }
  else {
    int v153 = 1;
  }
  uint64_t v4 = (v4 + v152 + v153 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x20) == 0)
  {
LABEL_242:
    if ((v133 & 0x40) == 0) {
      goto LABEL_243;
    }
    goto LABEL_281;
  }
LABEL_275:
  uint64_t v154 = *(void *)(a1 + 304);
  if (!v154) {
    uint64_t v154 = *(void *)(qword_10248A400 + 304);
  }
  double v155 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100C3A878(v154, a2);
  int v156 = (int)v155;
  if (v155 >= 0x80) {
    int v157 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v155, a2);
  }
  else {
    int v157 = 1;
  }
  uint64_t v4 = (v4 + v156 + v157 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x40) == 0)
  {
LABEL_243:
    if ((v133 & 0x80) == 0) {
      goto LABEL_293;
    }
    goto LABEL_287;
  }
LABEL_281:
  uint64_t v158 = *(void *)(a1 + 312);
  if (!v158) {
    uint64_t v158 = *(void *)(qword_10248A400 + 312);
  }
  long long v159 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1017BA4A8(v158, a2);
  int v160 = (int)v159;
  if (v159 >= 0x80) {
    int v161 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v159, a2);
  }
  else {
    int v161 = 1;
  }
  uint64_t v4 = (v4 + v160 + v161 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x80) != 0)
  {
LABEL_287:
    uint64_t v162 = *(void *)(a1 + 320);
    if (!v162) {
      uint64_t v162 = *(void *)(qword_10248A400 + 320);
    }
    unint64_t v163 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100AF9CAC(v162, a2);
    int v164 = (int)v163;
    if (v163 >= 0x80) {
      int v165 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v163, a2);
    }
    else {
      int v165 = 1;
    }
    uint64_t v4 = (v4 + v164 + v165 + 2);
    unsigned int v133 = *(_DWORD *)(a1 + 492);
  }
LABEL_293:
  if ((v133 & 0xFF00) == 0) {
    goto LABEL_351;
  }
  if ((v133 & 0x100) != 0)
  {
    uint64_t v166 = *(void *)(a1 + 328);
    if (!v166) {
      uint64_t v166 = *(void *)(qword_10248A400 + 328);
    }
    __int16 v167 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C2CCC(v166, a2);
    int v168 = (int)v167;
    if (v167 >= 0x80) {
      int v169 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v167, a2);
    }
    else {
      int v169 = 1;
    }
    uint64_t v4 = (v4 + v168 + v169 + 2);
    unsigned int v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 0x200) == 0)
    {
LABEL_296:
      if ((v133 & 0x400) == 0) {
        goto LABEL_297;
      }
      goto LABEL_315;
    }
  }
  else if ((v133 & 0x200) == 0)
  {
    goto LABEL_296;
  }
  uint64_t v170 = *(void *)(a1 + 336);
  if (!v170) {
    uint64_t v170 = *(void *)(qword_10248A400 + 336);
  }
  long long v171 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062A520(v170, a2);
  int v172 = (int)v171;
  if (v171 >= 0x80) {
    int v173 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v171, a2);
  }
  else {
    int v173 = 1;
  }
  uint64_t v4 = (v4 + v172 + v173 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x400) == 0)
  {
LABEL_297:
    if ((v133 & 0x800) == 0) {
      goto LABEL_298;
    }
    goto LABEL_321;
  }
LABEL_315:
  uint64_t v174 = *(void *)(a1 + 344);
  if (!v174) {
    uint64_t v174 = *(void *)(qword_10248A400 + 344);
  }
  long long v175 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101421FAC(v174, a2);
  int v176 = (int)v175;
  if (v175 >= 0x80) {
    int v177 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v175, a2);
  }
  else {
    int v177 = 1;
  }
  uint64_t v4 = (v4 + v176 + v177 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x800) == 0)
  {
LABEL_298:
    if ((v133 & 0x1000) == 0) {
      goto LABEL_299;
    }
    goto LABEL_327;
  }
LABEL_321:
  uint64_t v178 = *(void *)(a1 + 352);
  if (!v178) {
    uint64_t v178 = *(void *)(qword_10248A400 + 352);
  }
  unsigned int v179 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083698(v178, a2);
  int v180 = (int)v179;
  if (v179 >= 0x80) {
    int v181 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v179, a2);
  }
  else {
    int v181 = 1;
  }
  uint64_t v4 = (v4 + v180 + v181 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x1000) == 0)
  {
LABEL_299:
    if ((v133 & 0x2000) == 0) {
      goto LABEL_300;
    }
    goto LABEL_333;
  }
LABEL_327:
  uint64_t v182 = *(void *)(a1 + 360);
  if (!v182) {
    uint64_t v182 = *(void *)(qword_10248A400 + 360);
  }
  uint64_t v183 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BB078(v182, a2);
  int v184 = (int)v183;
  if (v183 >= 0x80) {
    int v185 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v183, a2);
  }
  else {
    int v185 = 1;
  }
  uint64_t v4 = (v4 + v184 + v185 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x2000) == 0)
  {
LABEL_300:
    if ((v133 & 0x4000) == 0) {
      goto LABEL_301;
    }
    goto LABEL_339;
  }
LABEL_333:
  uint64_t v186 = *(void *)(a1 + 368);
  if (!v186) {
    uint64_t v186 = *(void *)(qword_10248A400 + 368);
  }
  long long v187 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BB92C(v186, a2);
  int v188 = (int)v187;
  if (v187 >= 0x80) {
    int v189 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v187, a2);
  }
  else {
    int v189 = 1;
  }
  uint64_t v4 = (v4 + v188 + v189 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x4000) == 0)
  {
LABEL_301:
    if ((v133 & 0x8000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_345;
  }
LABEL_339:
  uint64_t v190 = *(void *)(a1 + 376);
  if (!v190) {
    uint64_t v190 = *(void *)(qword_10248A400 + 376);
  }
  long long v191 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BC1D8(v190, a2);
  int v192 = (int)v191;
  if (v191 >= 0x80) {
    int v193 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v191, a2);
  }
  else {
    int v193 = 1;
  }
  uint64_t v4 = (v4 + v192 + v193 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x8000) != 0)
  {
LABEL_345:
    long long v194 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 480);
    if ((v194 & 0x80000000) != 0)
    {
      int v195 = 10;
    }
    else if (v194 >= 0x80)
    {
      int v195 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v194, a2);
      unsigned int v133 = *(_DWORD *)(a1 + 492);
    }
    else
    {
      int v195 = 1;
    }
    uint64_t v4 = (v4 + v195 + 2);
  }
LABEL_351:
  if ((v133 & 0xFF0000) == 0) {
    goto LABEL_409;
  }
  if ((v133 & 0x10000) != 0)
  {
    uint64_t v196 = *(void *)(a1 + 384);
    if (!v196) {
      uint64_t v196 = *(void *)(qword_10248A400 + 384);
    }
    int v197 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BC944(v196, a2);
    int v198 = (int)v197;
    if (v197 >= 0x80) {
      int v199 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v197, a2);
    }
    else {
      int v199 = 1;
    }
    uint64_t v4 = (v4 + v198 + v199 + 2);
    unsigned int v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 0x20000) == 0)
    {
LABEL_354:
      if ((v133 & 0x40000) == 0) {
        goto LABEL_355;
      }
      goto LABEL_373;
    }
  }
  else if ((v133 & 0x20000) == 0)
  {
    goto LABEL_354;
  }
  uint64_t v200 = *(void *)(a1 + 392);
  if (!v200) {
    uint64_t v200 = *(void *)(qword_10248A400 + 392);
  }
  int v201 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BD078(v200, a2);
  int v202 = (int)v201;
  if (v201 >= 0x80) {
    int v203 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v201, a2);
  }
  else {
    int v203 = 1;
  }
  uint64_t v4 = (v4 + v202 + v203 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x40000) == 0)
  {
LABEL_355:
    if ((v133 & 0x80000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_379;
  }
LABEL_373:
  uint64_t v204 = *(void *)(a1 + 400);
  if (!v204) {
    uint64_t v204 = *(void *)(qword_10248A400 + 400);
  }
  int v205 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BE078(v204, a2);
  int v206 = (int)v205;
  if (v205 >= 0x80) {
    int v207 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v205, a2);
  }
  else {
    int v207 = 1;
  }
  uint64_t v4 = (v4 + v206 + v207 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x80000) == 0)
  {
LABEL_356:
    if ((v133 & 0x100000) == 0) {
      goto LABEL_357;
    }
    goto LABEL_385;
  }
LABEL_379:
  uint64_t v208 = *(void *)(a1 + 408);
  if (!v208) {
    uint64_t v208 = *(void *)(qword_10248A400 + 408);
  }
  int v209 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BE95C(v208, a2);
  int v210 = (int)v209;
  if (v209 >= 0x80) {
    int v211 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v209, a2);
  }
  else {
    int v211 = 1;
  }
  uint64_t v4 = (v4 + v210 + v211 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x100000) == 0)
  {
LABEL_357:
    if ((v133 & 0x200000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_391;
  }
LABEL_385:
  uint64_t v212 = *(void *)(a1 + 416);
  if (!v212) {
    uint64_t v212 = *(void *)(qword_10248A400 + 416);
  }
  int v213 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BF15C(v212, a2);
  int v214 = (int)v213;
  if (v213 >= 0x80) {
    int v215 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v213, a2);
  }
  else {
    int v215 = 1;
  }
  uint64_t v4 = (v4 + v214 + v215 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x200000) == 0)
  {
LABEL_358:
    if ((v133 & 0x400000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_397;
  }
LABEL_391:
  uint64_t v216 = *(void *)(a1 + 424);
  if (!v216) {
    uint64_t v216 = *(void *)(qword_10248A400 + 424);
  }
  uint64_t v217 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BFDB0(v216, a2);
  int v218 = (int)v217;
  if (v217 >= 0x80) {
    int v219 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v217, a2);
  }
  else {
    int v219 = 1;
  }
  uint64_t v4 = (v4 + v218 + v219 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x400000) == 0)
  {
LABEL_359:
    if ((v133 & 0x800000) == 0) {
      goto LABEL_409;
    }
    goto LABEL_403;
  }
LABEL_397:
  uint64_t v220 = *(void *)(a1 + 432);
  if (!v220) {
    uint64_t v220 = *(void *)(qword_10248A400 + 432);
  }
  uint64_t v221 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009C0664(v220, a2);
  int v222 = (int)v221;
  if (v221 >= 0x80) {
    int v223 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v221, a2);
  }
  else {
    int v223 = 1;
  }
  uint64_t v4 = (v4 + v222 + v223 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x800000) != 0)
  {
LABEL_403:
    uint64_t v224 = *(void *)(a1 + 440);
    if (!v224) {
      uint64_t v224 = *(void *)(qword_10248A400 + 440);
    }
    double v225 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009C0C98(v224, a2);
    int v226 = (int)v225;
    if (v225 >= 0x80) {
      int v227 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v225, a2);
    }
    else {
      int v227 = 1;
    }
    uint64_t v4 = (v4 + v226 + v227 + 2);
    unsigned int v133 = *(_DWORD *)(a1 + 492);
  }
LABEL_409:
  if (!HIBYTE(v133)) {
    goto LABEL_439;
  }
  if ((v133 & 0x1000000) != 0)
  {
    uint64_t v228 = *(void *)(a1 + 448);
    if (!v228) {
      uint64_t v228 = *(void *)(qword_10248A400 + 448);
    }
    double v229 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009C134C(v228, a2);
    int v230 = (int)v229;
    if (v229 >= 0x80) {
      int v231 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v229, a2);
    }
    else {
      int v231 = 1;
    }
    uint64_t v4 = (v4 + v230 + v231 + 2);
    unsigned int v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 0x2000000) == 0)
    {
LABEL_412:
      if ((v133 & 0x4000000) == 0) {
        goto LABEL_413;
      }
      goto LABEL_427;
    }
  }
  else if ((v133 & 0x2000000) == 0)
  {
    goto LABEL_412;
  }
  uint64_t v232 = *(void *)(a1 + 456);
  if (!v232) {
    uint64_t v232 = *(void *)(qword_10248A400 + 456);
  }
  double v233 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009C1AC8(v232, a2);
  int v234 = (int)v233;
  if (v233 >= 0x80) {
    int v235 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v233, a2);
  }
  else {
    int v235 = 1;
  }
  uint64_t v4 = (v4 + v234 + v235 + 2);
  unsigned int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x4000000) == 0)
  {
LABEL_413:
    if ((v133 & 0x8000000) == 0) {
      goto LABEL_439;
    }
    goto LABEL_433;
  }
LABEL_427:
  uint64_t v236 = *(void *)(a1 + 464);
  if (!v236) {
    uint64_t v236 = *(void *)(qword_10248A400 + 464);
  }
  double v237 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001812F0(v236, a2);
  int v238 = (int)v237;
  if (v237 >= 0x80) {
    int v239 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v237, a2);
  }
  else {
    int v239 = 1;
  }
  uint64_t v4 = (v4 + v238 + v239 + 2);
  if ((*(_DWORD *)(a1 + 492) & 0x8000000) != 0)
  {
LABEL_433:
    uint64_t v240 = *(void *)(a1 + 472);
    if (!v240) {
      uint64_t v240 = *(void *)(qword_10248A400 + 472);
    }
    int v241 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009C293C(v240, a2);
    int v243 = (int)v241;
    if (v241 >= 0x80) {
      int v244 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v241, v242);
    }
    else {
      int v244 = 1;
    }
    uint64_t v4 = (v4 + v243 + v244 + 2);
  }
LABEL_439:
  *(_DWORD *)(a1 + 484) = v4;
  return v4;
}

uint64_t sub_100083698(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_61;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248AF70 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083E08(v5);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  }
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 176);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 10;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      int v3 = *(_DWORD *)(a1 + 184);
    }
    else
    {
      int v10 = 1;
    }
    uint64_t v4 = (v4 + v10 + 1);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      uint64_t v11 = *(void *)(qword_10248AF70 + 16);
    }
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083D5C(v11, a2);
    int v13 = (int)v12;
    if (v12 >= 0x80) {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    }
    else {
      int v14 = 1;
    }
    uint64_t v4 = (v4 + v13 + v14 + 1);
    int v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v15 = *(void *)(a1 + 24);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_10248AF70 + 24);
  }
  int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083D5C(v15, a2);
  int v17 = (int)v16;
  if (v16 >= 0x80) {
    int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
  }
  else {
    int v18 = 1;
  }
  uint64_t v4 = (v4 + v17 + v18 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_37:
  uint64_t v19 = *(void *)(a1 + 32);
  if (!v19) {
    uint64_t v19 = *(void *)(qword_10248AF70 + 32);
  }
  int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100084E88(v19, a2);
  int v21 = (int)v20;
  if (v20 >= 0x80) {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
  }
  else {
    int v22 = 1;
  }
  uint64_t v4 = (v4 + v21 + v22 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_43:
  uint64_t v23 = *(void *)(a1 + 40);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_10248AF70 + 40);
  }
  int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F184D4(v23, a2);
  int v25 = (int)v24;
  if (v24 >= 0x80) {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
  }
  else {
    int v26 = 1;
  }
  uint64_t v4 = (v4 + v25 + v26 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
LABEL_49:
  uint64_t v27 = *(void *)(a1 + 48);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_10248AF70 + 48);
  }
  int v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F19044(v27, a2);
  int v29 = (int)v28;
  if (v28 >= 0x80) {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
  }
  else {
    int v30 = 1;
  }
  uint64_t v4 = (v4 + v29 + v30 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v31 = *(void *)(a1 + 56);
    if (!v31) {
      uint64_t v31 = *(void *)(qword_10248AF70 + 56);
    }
    int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1A504(v31, a2);
    int v33 = (int)v32;
    if (v32 >= 0x80) {
      int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2);
    }
    else {
      int v34 = 1;
    }
    uint64_t v4 = (v4 + v33 + v34 + 1);
    int v3 = *(_DWORD *)(a1 + 184);
  }
LABEL_61:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v35 = *(void *)(a1 + 64);
    if (!v35) {
      uint64_t v35 = *(void *)(qword_10248AF70 + 64);
    }
    int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1B074(v35, a2);
    int v37 = (int)v36;
    if (v36 >= 0x80) {
      int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2);
    }
    else {
      int v38 = 1;
    }
    uint64_t v4 = (v4 + v37 + v38 + 1);
    int v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  uint64_t v39 = *(void *)(a1 + 72);
  if (!v39) {
    uint64_t v39 = *(void *)(qword_10248AF70 + 72);
  }
  int v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1CB4C(v39, a2);
  int v41 = (int)v40;
  if (v40 >= 0x80) {
    int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40, a2);
  }
  else {
    int v42 = 1;
  }
  uint64_t v4 = (v4 + v41 + v42 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }
LABEL_83:
  uint64_t v43 = *(void *)(a1 + 80);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_10248AF70 + 80);
  }
  int v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1D65C(v43, a2);
  int v45 = (int)v44;
  if (v44 >= 0x80) {
    int v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44, a2);
  }
  else {
    int v46 = 1;
  }
  uint64_t v4 = (v4 + v45 + v46 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }
LABEL_89:
  uint64_t v47 = *(void *)(a1 + 88);
  if (!v47) {
    uint64_t v47 = *(void *)(qword_10248AF70 + 88);
  }
  int v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1E354(v47, a2);
  int v49 = (int)v48;
  if (v48 >= 0x80) {
    int v50 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48, a2);
  }
  else {
    int v50 = 1;
  }
  uint64_t v4 = (v4 + v49 + v50 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }
LABEL_95:
  uint64_t v51 = *(void *)(a1 + 96);
  if (!v51) {
    uint64_t v51 = *(void *)(qword_10248AF70 + 96);
  }
  int v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1F064(v51, a2);
  int v53 = (int)v52;
  if (v52 >= 0x80) {
    int v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, a2);
  }
  else {
    int v54 = 1;
  }
  uint64_t v4 = (v4 + v53 + v54 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }
LABEL_101:
  uint64_t v55 = *(void *)(a1 + 104);
  if (!v55) {
    uint64_t v55 = *(void *)(qword_10248AF70 + 104);
  }
  int v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1FD74(v55, a2);
  int v57 = (int)v56;
  if (v56 >= 0x80) {
    int v58 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v56, a2);
  }
  else {
    int v58 = 1;
  }
  uint64_t v4 = (v4 + v57 + v58 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }
LABEL_107:
  uint64_t v59 = *(void *)(a1 + 112);
  if (!v59) {
    uint64_t v59 = *(void *)(qword_10248AF70 + 112);
  }
  int v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F202D0(v59, a2);
  int v61 = (int)v60;
  if (v60 >= 0x80) {
    int v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60, a2);
  }
  else {
    int v62 = 1;
  }
  uint64_t v4 = (v4 + v61 + v62 + 1);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    uint64_t v63 = *(void *)(a1 + 120);
    if (!v63) {
      uint64_t v63 = *(void *)(qword_10248AF70 + 120);
    }
    int v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181A04(v63, a2);
    int v65 = (int)v64;
    if (v64 >= 0x80) {
      int v66 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64, a2);
    }
    else {
      int v66 = 1;
    }
    uint64_t v4 = (v4 + v65 + v66 + 2);
    int v3 = *(_DWORD *)(a1 + 184);
  }
LABEL_119:
  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_163;
  }
  if ((v3 & 0x10000) != 0)
  {
    uint64_t v67 = *(void *)(a1 + 128);
    if (!v67) {
      uint64_t v67 = *(void *)(qword_10248AF70 + 128);
    }
    int v68 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083E40(v67, a2);
    int v69 = (int)v68;
    if (v68 >= 0x80) {
      int v70 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v68, a2);
    }
    else {
      int v70 = 1;
    }
    uint64_t v4 = (v4 + v69 + v70 + 2);
    int v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_139;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  uint64_t v71 = *(void *)(a1 + 136);
  if (!v71) {
    uint64_t v71 = *(void *)(qword_10248AF70 + 136);
  }
  int v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10018186C(v71, a2);
  int v73 = (int)v72;
  if (v72 >= 0x80) {
    int v74 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72, a2);
  }
  else {
    int v74 = 1;
  }
  uint64_t v4 = (v4 + v73 + v74 + 2);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_145;
  }
LABEL_139:
  uint64_t v75 = *(void *)(a1 + 144);
  if (!v75) {
    uint64_t v75 = *(void *)(qword_10248AF70 + 144);
  }
  int v76 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F248E0(v75, a2);
  int v77 = (int)v76;
  if (v76 >= 0x80) {
    int v78 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v76, a2);
  }
  else {
    int v78 = 1;
  }
  uint64_t v4 = (v4 + v77 + v78 + 2);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_151;
  }
LABEL_145:
  uint64_t v79 = *(void *)(a1 + 152);
  if (!v79) {
    uint64_t v79 = *(void *)(qword_10248AF70 + 152);
  }
  int v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F25664(v79, a2);
  int v81 = (int)v80;
  if (v80 >= 0x80) {
    int v82 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80, a2);
  }
  else {
    int v82 = 1;
  }
  uint64_t v4 = (v4 + v81 + v82 + 2);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_157;
  }
LABEL_151:
  uint64_t v83 = *(void *)(a1 + 160);
  if (!v83) {
    uint64_t v83 = *(void *)(qword_10248AF70 + 160);
  }
  int v84 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181770(v83, a2);
  int v85 = (int)v84;
  if (v84 >= 0x80) {
    int v86 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v84, a2);
  }
  else {
    int v86 = 1;
  }
  uint64_t v4 = (v4 + v85 + v86 + 2);
  if ((*(_DWORD *)(a1 + 184) & 0x200000) != 0)
  {
LABEL_157:
    uint64_t v87 = *(void *)(a1 + 168);
    if (!v87) {
      uint64_t v87 = *(void *)(qword_10248AF70 + 168);
    }
    int v88 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F26EBC(v87, a2);
    int v90 = (int)v88;
    if (v88 >= 0x80) {
      int v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v88, v89);
    }
    else {
      int v91 = 1;
    }
    uint64_t v4 = (v4 + v90 + v91 + 2);
  }
LABEL_163:
  *(_DWORD *)(a1 + 180) = v4;
  return v4;
}

uint64_t sub_100083D5C(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 20);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
        goto LABEL_19;
      }
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      int v7 = 2;
    }
    uint64_t v4 = (v7 + v4);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

uint64_t sub_100083E08(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

uint64_t sub_100083E40(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 36);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 36) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AF00 + 16);
  }
  uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083F8C(v8, a2);
  int v10 = (int)v9;
  if (v9 >= 0x80) {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
  }
  else {
    int v11 = 1;
  }
  uint64_t v4 = (v4 + v10 + v11 + 1);
  if ((*(_DWORD *)(a1 + 36) & 8) != 0)
  {
LABEL_28:
    int v12 = *(unsigned int **)(a1 + 24);
    if (!v12) {
      int v12 = *(unsigned int **)(qword_10248AF00 + 24);
    }
    int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181640(v12, a2);
    int v15 = (int)v13;
    if (v13 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, v14);
    }
    else {
      int v16 = 1;
    }
    uint64_t v4 = (v4 + v15 + v16 + 1);
  }
LABEL_34:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

uint64_t sub_100083F8C(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 112);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_52;
  }
  if ((v3 & 1) == 0)
  {
    int v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248AF08 + 8);
  }
  int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000843B0(v6, a2);
  int v8 = (int)v7;
  if (v7 >= 0x80) {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  }
  else {
    int v9 = 1;
  }
  int v4 = v8 + v9 + 1;
  int v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AF08 + 16);
    }
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008471C(v10, a2);
    int v12 = (int)v11;
    if (v11 >= 0x80) {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    }
    else {
      int v13 = 1;
    }
    v4 += v12 + v13 + 1;
    int v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      uint64_t v14 = *(void *)(qword_10248AF08 + 24);
    }
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003EA838(v14, a2);
    int v16 = (int)v15;
    if (v15 >= 0x80) {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    }
    else {
      int v17 = 1;
    }
    v4 += v16 + v17 + 1;
    int v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  if ((v3 & 8) != 0)
  {
LABEL_27:
    uint64_t v18 = *(void *)(a1 + 32);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_10248AF08 + 32);
    }
    uint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181B00(v18, a2);
    int v20 = (int)v19;
    if (v19 >= 0x80) {
      int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
    }
    else {
      int v21 = 1;
    }
    v4 += v20 + v21 + 1;
    int v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_33:
  unsigned int v22 = v4 + 2;
  if ((v3 & 0x10) == 0) {
    unsigned int v22 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t v5 = v22 + 9;
  }
  else {
    uint64_t v5 = v22;
  }
  if ((v3 & 0x40) != 0)
  {
    uint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v23 & 0x80000000) != 0)
    {
      int v24 = 10;
    }
    else if (v23 >= 0x80)
    {
      int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      int v3 = *(_DWORD *)(a1 + 112);
    }
    else
    {
      int v24 = 1;
    }
    uint64_t v5 = (v5 + v24 + 1);
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v25 = *(void *)(a1 + 56);
    if (!v25) {
      uint64_t v25 = *(void *)(qword_10248AF08 + 56);
    }
    int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000846D8(v25);
    int v27 = (int)v26;
    if (v26 >= 0x80) {
      int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
    }
    else {
      int v28 = 1;
    }
    uint64_t v5 = (v5 + v27 + v28 + 1);
    int v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_52:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_96;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v29 = *(void *)(a1 + 64);
    if (!v29) {
      uint64_t v29 = *(void *)(qword_10248AF08 + 64);
    }
    int v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100084384(v29);
    int v31 = (int)v30;
    if (v30 >= 0x80) {
      int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    }
    else {
      int v32 = 1;
    }
    uint64_t v5 = (v5 + v31 + v32 + 1);
    int v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 0x200) == 0)
    {
LABEL_55:
      if ((v3 & 0x400) == 0) {
        goto LABEL_56;
      }
      goto LABEL_72;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_55;
  }
  int v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 104);
  if ((v33 & 0x80000000) != 0)
  {
    int v34 = 11;
  }
  else if (v33 >= 0x80)
  {
    int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 112);
  }
  else
  {
    int v34 = 2;
  }
  uint64_t v5 = (v34 + v5);
  if ((v3 & 0x400) == 0)
  {
LABEL_56:
    if ((v3 & 0x800) == 0) {
      goto LABEL_57;
    }
    goto LABEL_78;
  }
LABEL_72:
  uint64_t v35 = *(void *)(a1 + 72);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_10248AF08 + 72);
  }
  int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008434C(v35);
  int v37 = (int)v36;
  if (v36 >= 0x80) {
    int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2);
  }
  else {
    int v38 = 1;
  }
  uint64_t v5 = (v5 + v37 + v38 + 1);
  int v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x800) == 0)
  {
LABEL_57:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_84;
  }
LABEL_78:
  uint64_t v39 = *(void *)(a1 + 80);
  if (!v39) {
    uint64_t v39 = *(void *)(qword_10248AF08 + 80);
  }
  int v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100085184(v39, a2);
  int v41 = (int)v40;
  if (v40 >= 0x80) {
    int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40, a2);
  }
  else {
    int v42 = 1;
  }
  uint64_t v5 = (v5 + v41 + v42 + 1);
  int v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x1000) == 0)
  {
LABEL_58:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_90;
  }
LABEL_84:
  uint64_t v43 = *(void *)(a1 + 88);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_10248AF08 + 88);
  }
  int v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003EB030(v43, a2);
  int v46 = (int)v44;
  if (v44 >= 0x80) {
    int v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44, v45);
  }
  else {
    int v47 = 1;
  }
  uint64_t v5 = (v5 + v46 + v47 + 1);
  if ((*(_DWORD *)(a1 + 112) & 0x2000) != 0)
  {
LABEL_90:
    uint64_t v48 = *(void *)(a1 + 96);
    if (!v48) {
      uint64_t v48 = *(void *)(qword_10248AF08 + 96);
    }
    int v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003EB498(v48);
    int v51 = (int)v49;
    if (v49 >= 0x80) {
      int v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49, v50);
    }
    else {
      int v52 = 1;
    }
    uint64_t v5 = (v5 + v51 + v52 + 1);
  }
LABEL_96:
  *(_DWORD *)(a1 + 108) = v5;
  return v5;
}

uint64_t sub_10008434C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

uint64_t sub_100084384(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

uint64_t sub_1000843B0(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 152);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_32;
  }
  if (v3)
  {
    uint64_t v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 10;
    }
    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      int v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      int v7 = 1;
    }
    unsigned int v4 = v7 + 1;
    if ((v3 & 2) == 0) {
      goto LABEL_19;
    }
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_102489CE0 + 8);
    }
    int v9 = *(unsigned __int8 *)(v8 + 28);
    if (*(unsigned char *)(v8 + 28))
    {
      if ((v9 & 2) != 0) {
        int v9 = ((v9 << 31 >> 31) & 9) + 9;
      }
      else {
        int v9 = (v9 << 31 >> 31) & 9;
      }
    }
    *(_DWORD *)(v8 + 24) = v9;
    v4 += v9 + 2;
    int v3 = *(_DWORD *)(a1 + 152);
    goto LABEL_19;
  }
  unsigned int v4 = 0;
  if ((v3 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_19:
  if ((v3 & 4) != 0) {
    v4 += 9;
  }
  if ((v3 & 8) != 0) {
    v4 += 9;
  }
  if ((v3 & 0x10) != 0) {
    v4 += 9;
  }
  if ((v3 & 0x20) != 0) {
    v4 += 9;
  }
  if ((v3 & 0x40) != 0) {
    v4 += 9;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
LABEL_32:
  if ((v3 & 0xFF00) != 0)
  {
    int v10 = v5 + 9;
    if ((v3 & 0x100) == 0) {
      int v10 = v5;
    }
    if ((v3 & 0x200) != 0) {
      LODWORD(v5) = v10 + 9;
    }
    else {
      LODWORD(v5) = v10;
    }
    if ((v3 & 0x400) != 0)
    {
      int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
      if ((v11 & 0x80000000) != 0)
      {
        int v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        int v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        int v12 = 1;
      }
      LODWORD(v5) = v5 + v12 + 1;
    }
    if ((v3 & 0x800) != 0) {
      LODWORD(v5) = v5 + 9;
    }
    if ((v3 & 0x1000) != 0)
    {
      int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 104);
      if ((v13 & 0x80000000) != 0)
      {
        int v14 = 10;
      }
      else if (v13 >= 0x80)
      {
        int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
        int v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        int v14 = 1;
      }
      LODWORD(v5) = v5 + v14 + 1;
    }
    if ((v3 & 0x2000) != 0)
    {
      uint64_t v15 = *(void *)(a1 + 96);
      if (!v15) {
        uint64_t v15 = *(void *)(qword_102489CE0 + 96);
      }
      int v16 = *(unsigned __int8 *)(v15 + 28);
      int v17 = (v16 << 31 >> 31) & 9;
      if ((v16 & 2) != 0) {
        v17 += 9;
      }
      if (*(unsigned char *)(v15 + 28)) {
        int v18 = v17;
      }
      else {
        int v18 = 0;
      }
      *(_DWORD *)(v15 + 24) = v18;
      LODWORD(v5) = v5 + v18 + 2;
      int v3 = *(_DWORD *)(a1 + 152);
    }
    if ((v3 & 0x4000) != 0) {
      uint64_t v5 = (v5 + 9);
    }
    else {
      uint64_t v5 = v5;
    }
    if ((v3 & 0x8000) != 0)
    {
      uint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 108);
      if ((v19 & 0x80000000) != 0)
      {
        int v20 = 12;
      }
      else if (v19 >= 0x80)
      {
        int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 2;
        int v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        int v20 = 3;
      }
      uint64_t v5 = (v20 + v5);
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 120);
      if ((v21 & 0x80000000) != 0)
      {
        int v22 = 12;
      }
      else if (v21 >= 0x80)
      {
        int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 2;
        int v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        int v22 = 3;
      }
      LODWORD(v5) = v22 + v5;
      if ((v3 & 0x20000) == 0)
      {
LABEL_76:
        if ((v3 & 0x40000) == 0) {
          goto LABEL_77;
        }
        goto LABEL_91;
      }
    }
    else if ((v3 & 0x20000) == 0)
    {
      goto LABEL_76;
    }
    uint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 124);
    if ((v23 & 0x80000000) != 0)
    {
      int v24 = 12;
    }
    else if (v23 >= 0x80)
    {
      int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 2;
      int v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      int v24 = 3;
    }
    LODWORD(v5) = v24 + v5;
    if ((v3 & 0x40000) == 0)
    {
LABEL_77:
      if ((v3 & 0x80000) == 0) {
        goto LABEL_103;
      }
      goto LABEL_97;
    }
LABEL_91:
    uint64_t v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
    if ((v25 & 0x80000000) != 0)
    {
      int v26 = 12;
    }
    else if (v25 >= 0x80)
    {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 2;
      int v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      int v26 = 3;
    }
    LODWORD(v5) = v26 + v5;
    if ((v3 & 0x80000) == 0)
    {
LABEL_103:
      unsigned int v29 = v5 + 10;
      if ((v3 & 0x100000) == 0) {
        unsigned int v29 = v5;
      }
      if ((v3 & 0x200000) != 0) {
        uint64_t v5 = v29 + 3;
      }
      else {
        uint64_t v5 = v29;
      }
      goto LABEL_108;
    }
LABEL_97:
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v27 & 0x80000000) != 0)
    {
      int v28 = 12;
    }
    else if (v27 >= 0x80)
    {
      int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 2;
      int v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      int v28 = 3;
    }
    LODWORD(v5) = v28 + v5;
    goto LABEL_103;
  }
LABEL_108:
  *(_DWORD *)(a1 + 148) = v5;
  return v5;
}

uint64_t sub_1000846D8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 44);
  if (*(unsigned char *)(a1 + 44))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      v2 += 9;
    }
    if ((v1 & 8) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 40) = v1;
  return v1;
}

uint64_t sub_10008471C(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 364);
  if ((_BYTE)v3)
  {
    int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x20) != 0) {
      v4 += 5;
    }
    if ((v3 & 0x40) != 0) {
      v4 += 5;
    }
    if ((v3 & 0x80) != 0) {
      int v5 = v4 + 5;
    }
    else {
      int v5 = v4;
    }
  }
  else
  {
    int v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0) {
      int v6 = v5 + 2;
    }
    else {
      int v6 = v5;
    }
    if ((v3 & 0x200) != 0)
    {
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
      if ((v7 & 0x80000000) != 0)
      {
        int v8 = 10;
      }
      else if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        int v8 = 1;
      }
      v6 += v8 + 1;
    }
    if ((v3 & 0x400) != 0)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_102489D00 + 64);
      }
      int v10 = *(unsigned __int8 *)(v9 + 28);
      int v11 = (v10 << 31 >> 31) & 9;
      if ((v10 & 2) != 0) {
        v11 += 9;
      }
      if (*(unsigned char *)(v9 + 28)) {
        int v12 = v11;
      }
      else {
        int v12 = 0;
      }
      *(_DWORD *)(v9 + 24) = v12;
      v6 += v12 + 2;
      int v3 = *(_DWORD *)(a1 + 364);
    }
    if ((v3 & 0x800) != 0) {
      v6 += 9;
    }
    if ((v3 & 0x1000) != 0)
    {
      int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 80);
      if ((v13 & 0x80000000) != 0)
      {
        int v14 = 10;
      }
      else if (v13 >= 0x80)
      {
        int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
        int v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        int v14 = 1;
      }
      v6 += v14 + 1;
    }
    if ((v3 & 0x2000) != 0)
    {
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 84);
      if ((v15 & 0x80000000) != 0)
      {
        int v16 = 10;
      }
      else if (v15 >= 0x80)
      {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        int v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        int v16 = 1;
      }
      v6 += v16 + 1;
    }
    if ((v3 & 0x4000) != 0) {
      int v5 = v6 + 2;
    }
    else {
      int v5 = v6;
    }
    if ((v3 & 0x8000) != 0)
    {
      uint64_t v17 = *(void *)(a1 + 88);
      if (!v17) {
        uint64_t v17 = *(void *)(qword_102489D00 + 88);
      }
      int v18 = *(unsigned __int8 *)(v17 + 28);
      int v19 = (v18 << 31 >> 31) & 9;
      if ((v18 & 2) != 0) {
        v19 += 9;
      }
      if (*(unsigned char *)(v17 + 28)) {
        int v20 = v19;
      }
      else {
        int v20 = 0;
      }
      *(_DWORD *)(v17 + 24) = v20;
      v5 += v20 + 3;
      int v3 = *(_DWORD *)(a1 + 364);
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 96);
      if ((v21 & 0x80000000) != 0)
      {
        int v22 = 10;
      }
      else if (v21 >= 0x80)
      {
        int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
        int v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        int v22 = 1;
      }
      v5 += v22 + 2;
    }
    int v23 = v5 + 6;
    if ((v3 & 0x20000) == 0) {
      int v23 = v5;
    }
    if ((v3 & 0x40000) != 0)
    {
      uint64_t v24 = *(void *)(a1 + 104);
      if (!v24) {
        uint64_t v24 = *(void *)(qword_102489D00 + 104);
      }
      int v25 = *(unsigned __int8 *)(v24 + 28);
      int v26 = (v25 << 31 >> 31) & 9;
      if ((v25 & 2) != 0) {
        v26 += 9;
      }
      if (*(unsigned char *)(v24 + 28)) {
        int v27 = v26;
      }
      else {
        int v27 = 0;
      }
      *(_DWORD *)(v24 + 24) = v27;
      v23 += v27 + 3;
      int v3 = *(_DWORD *)(a1 + 364);
    }
    if ((v3 & 0x80000) != 0) {
      v23 += 10;
    }
    if ((v3 & 0x100000) != 0) {
      int v28 = v23 + 10;
    }
    else {
      int v28 = v23;
    }
    if ((v3 & 0x200000) != 0)
    {
      unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 116);
      if ((v29 & 0x80000000) != 0)
      {
        int v30 = 10;
      }
      else if (v29 >= 0x80)
      {
        int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
        int v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        int v30 = 1;
      }
      v28 += v30 + 2;
    }
    if ((v3 & 0x400000) != 0) {
      int v5 = v28 + 3;
    }
    else {
      int v5 = v28;
    }
    if ((v3 & 0x800000) != 0)
    {
      uint64_t v31 = *(void *)(a1 + 136);
      if (!v31) {
        uint64_t v31 = *(void *)(qword_102489D00 + 136);
      }
      int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100084E44(v31);
      int v33 = (int)v32;
      if (v32 >= 0x80) {
        int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2);
      }
      else {
        int v34 = 1;
      }
      v5 += v33 + v34 + 2;
      int v3 = *(_DWORD *)(a1 + 364);
    }
  }
  if (HIBYTE(v3))
  {
    int v35 = v5 + 10;
    if ((v3 & 0x1000000) == 0) {
      int v35 = v5;
    }
    if ((v3 & 0x2000000) != 0) {
      v35 += 10;
    }
    if ((v3 & 0x4000000) != 0) {
      v35 += 10;
    }
    if ((v3 & 0x8000000) != 0) {
      v35 += 10;
    }
    if ((v3 & 0x10000000) != 0) {
      v35 += 10;
    }
    if ((v3 & 0x20000000) != 0) {
      v35 += 10;
    }
    if ((v3 & 0x40000000) != 0) {
      v35 += 3;
    }
    if (v3 >= 0) {
      int v5 = v35;
    }
    else {
      int v5 = v35 + 10;
    }
  }
  int v36 = *(_DWORD *)(a1 + 368);
  if ((_BYTE)v36)
  {
    int v37 = v5 + 10;
    if ((v36 & 1) == 0) {
      int v37 = v5;
    }
    if ((v36 & 2) != 0) {
      v37 += 3;
    }
    if ((v36 & 4) != 0)
    {
      uint64_t v38 = *(void *)(a1 + 208);
      if (!v38) {
        uint64_t v38 = *(void *)(qword_102489D00 + 208);
      }
      int v39 = *(unsigned __int8 *)(v38 + 28);
      int v40 = (v39 << 31 >> 31) & 9;
      if ((v39 & 2) != 0) {
        v40 += 9;
      }
      if (*(unsigned char *)(v38 + 28)) {
        int v41 = v40;
      }
      else {
        int v41 = 0;
      }
      *(_DWORD *)(v38 + 24) = v41;
      v37 += v41 + 3;
      int v36 = *(_DWORD *)(a1 + 368);
    }
    if ((v36 & 8) != 0) {
      int v42 = v37 + 10;
    }
    else {
      int v42 = v37;
    }
    if ((v36 & 0x10) != 0)
    {
      uint64_t v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 272);
      if ((v43 & 0x80000000) != 0)
      {
        int v44 = 10;
      }
      else if (v43 >= 0x80)
      {
        int v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43, a2);
        int v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        int v44 = 1;
      }
      v42 += v44 + 2;
    }
    int v45 = v42 + 10;
    if ((v36 & 0x20) == 0) {
      int v45 = v42;
    }
    if ((v36 & 0x40) != 0) {
      v45 += 10;
    }
    if ((v36 & 0x80) != 0) {
      int v5 = v45 + 10;
    }
    else {
      int v5 = v45;
    }
  }
  if ((v36 & 0xFF00) != 0)
  {
    int v46 = v5 + 10;
    if ((v36 & 0x100) == 0) {
      int v46 = v5;
    }
    if ((v36 & 0x200) != 0) {
      v46 += 10;
    }
    if ((v36 & 0x400) != 0) {
      v46 += 3;
    }
    if ((v36 & 0x800) != 0) {
      v46 += 10;
    }
    if ((v36 & 0x1000) != 0) {
      int v5 = v46 + 10;
    }
    else {
      int v5 = v46;
    }
    if ((v36 & 0x4000) != 0)
    {
      int v47 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 312);
      if ((v47 & 0x80000000) != 0)
      {
        int v48 = 10;
      }
      else if (v47 >= 0x80)
      {
        int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47, a2);
        int v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        int v48 = 1;
      }
      v5 += v48 + 2;
    }
    if ((v36 & 0x8000) != 0)
    {
      uint64_t v49 = *(void *)(a1 + 320);
      if (!v49) {
        uint64_t v49 = *(void *)(qword_102489D00 + 320);
      }
      unsigned int v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100084DB8(v49, a2);
      int v51 = (int)v50;
      if (v50 >= 0x80) {
        int v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50, a2);
      }
      else {
        int v52 = 1;
      }
      v5 += v51 + v52 + 2;
      int v36 = *(_DWORD *)(a1 + 368);
    }
  }
  if ((v36 & 0xFF0000) != 0)
  {
    if ((v36 & 0x10000) != 0)
    {
      int v53 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 316);
      if ((v53 & 0x80000000) != 0)
      {
        int v54 = 12;
      }
      else if (v53 >= 0x80)
      {
        int v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53, a2) + 2;
        int v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        int v54 = 3;
      }
      v5 += v54;
    }
    int v55 = v5 + 10;
    if ((v36 & 0x20000) == 0) {
      int v55 = v5;
    }
    if ((v36 & 0x40000) != 0) {
      int v56 = v55 + 10;
    }
    else {
      int v56 = v55;
    }
    if ((v36 & 0x80000) != 0)
    {
      int v57 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 344);
      if ((v57 & 0x80000000) != 0)
      {
        int v58 = 12;
      }
      else if (v57 >= 0x80)
      {
        int v58 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v57, a2) + 2;
        int v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        int v58 = 3;
      }
      v56 += v58;
    }
    if ((v36 & 0x100000) != 0) {
      v56 += 3;
    }
    if ((v36 & 0x200000) != 0)
    {
      uint64_t v59 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 348);
      if ((v59 & 0x80000000) != 0)
      {
        int v60 = 12;
      }
      else if (v59 >= 0x80)
      {
        int v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v59, a2) + 2;
        int v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        int v60 = 3;
      }
      v56 += v60;
    }
    if ((v36 & 0x400000) != 0)
    {
      int v61 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 352);
      if ((v61 & 0x80000000) != 0)
      {
        int v62 = 12;
      }
      else if (v61 >= 0x80)
      {
        int v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v61, a2) + 2;
        int v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        int v62 = 3;
      }
      v56 += v62;
    }
    if ((v36 & 0x800000) != 0) {
      int v5 = v56 + 3;
    }
    else {
      int v5 = v56;
    }
  }
  if ((v36 & 0x1000000) != 0) {
    int v63 = v5 + 3;
  }
  else {
    int v63 = v5;
  }
  int v64 = *(_DWORD *)(a1 + 296);
  uint64_t v65 = (v63 + 2 * v64);
  if (v64 >= 1)
  {
    uint64_t v66 = 0;
    do
    {
      uint64_t v67 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003E3F7C(*(void *)(*(void *)(a1 + 288)+ 8 * v66), a2);
      int v68 = (int)v67;
      if (v67 >= 0x80) {
        int v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v67, a2);
      }
      else {
        int v69 = 1;
      }
      uint64_t v65 = (v68 + v65 + v69);
      ++v66;
    }
    while (v66 < *(int *)(a1 + 296));
  }
  *(_DWORD *)(a1 + 360) = v65;
  return v65;
}

uint64_t sub_100084DB8(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 8) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        int v7 = 2;
      }
      uint64_t v5 = (v7 + v5);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

uint64_t sub_100084E44(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      uint64_t v1 = v2 + 2;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 28) = v1;
  return v1;
}

uint64_t sub_100084E88(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE38 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100084F84(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

uint64_t sub_100084F84(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    int v5 = 0;
    goto LABEL_46;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AE48 + 8);
    }
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100083E08(v6);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    }
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    int v4 = 0;
  }
  if ((v3 & 2) != 0) {
    int v5 = v4 + 2;
  }
  else {
    int v5 = v4;
  }
  if ((v3 & 4) != 0)
  {
    unsigned int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      int v11 = 2;
    }
    v5 += v11;
    if ((v3 & 0x10) == 0)
    {
LABEL_16:
      if ((v3 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_16;
  }
  int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
  if ((v12 & 0x80000000) != 0)
  {
    int v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    int v13 = 2;
  }
  v5 += v13;
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0) {
      goto LABEL_46;
    }
    goto LABEL_40;
  }
LABEL_31:
  uint64_t v14 = *(void *)(a1 + 48);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 72);
    char v16 = *(unsigned char *)(v14 + 23);
  }
  else
  {
    int v19 = 1;
  }
  if (v16 < 0) {
    int v15 = v17;
  }
  v5 += v19 + v15 + 1;
  if ((v3 & 0x40) != 0)
  {
LABEL_40:
    uint64_t v20 = *(void *)(a1 + 56);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_10248AE48 + 56);
    }
    int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F15DC4(v20, a2);
    int v22 = (int)v21;
    if (v21 >= 0x80) {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    }
    else {
      int v23 = 1;
    }
    v5 += v22 + v23 + 1;
  }
LABEL_46:
  int v24 = *(_DWORD *)(a1 + 32);
  uint64_t v25 = (v24 + v5);
  if (v24 >= 1)
  {
    uint64_t v26 = 0;
    do
    {
      int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F146E4(*(void *)(*(void *)(a1 + 24) + 8 * v26), a2);
      int v28 = (int)v27;
      if (v27 >= 0x80) {
        int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
      }
      else {
        int v29 = 1;
      }
      uint64_t v25 = (v28 + v25 + v29);
      ++v26;
    }
    while (v26 < *(int *)(a1 + 32));
  }
  *(_DWORD *)(a1 + 68) = v25;
  return v25;
}

uint64_t sub_100085184(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_102489ED8 + 8);
    }
    int v6 = *(unsigned __int8 *)(v5 + 36);
    if (*(unsigned char *)(v5 + 36))
    {
      int v7 = (v6 << 31 >> 31) & 9;
      if ((v6 & 2) != 0) {
        v7 += 9;
      }
      if ((v6 & 4) != 0) {
        int v6 = v7 + 9;
      }
      else {
        int v6 = v7;
      }
    }
    *(_DWORD *)(v5 + 32) = v6;
    LODWORD(v4) = v6 + 2;
    int v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    LODWORD(v4) = 0;
    if ((*(unsigned char *)(a1 + 36) & 2) == 0) {
      goto LABEL_21;
    }
  }
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v8 & 0x80000000) != 0)
  {
    int v9 = 11;
  }
  else if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    int v9 = 2;
  }
  LODWORD(v4) = v9 + v4;
LABEL_21:
  if ((v3 & 4) != 0) {
    uint64_t v4 = (v4 + 9);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 8) != 0)
  {
    unsigned int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    }
    else
    {
      int v11 = 2;
    }
    uint64_t v4 = (v11 + v4);
  }
LABEL_31:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

uint64_t sub_100085288(uint64_t a1, char **a2, double a3)
{
  long long v255 = 0u;
  long long v256 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  uint64_t v5 = a1 + 528;
  if (!sub_1001856E8(a1 + 528, (uint64_t)&v255, &v253, a3))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    uint64_t v14 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Inconsistency found between steps and clock. Ignoring.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      *(_WORD *)int v271 = 0;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    return 1;
  }
  uint64_t v6 = *((void *)&v256 + 1);
  uint64_t v7 = v256;
  uint64_t v8 = *(void *)v256;
  uint64_t v9 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v9 = *(void *)(v256 - 8) + 5120;
  }
  if (*(unsigned char *)(v9 - 72))
  {
    sub_1001BEB94(a1 + 800);
    uint64_t v6 = *((void *)&v256 + 1);
    uint64_t v7 = v256;
    uint64_t v8 = *(void *)v256;
  }
  if (v6 == v8)
  {
    uint64_t v16 = *(void *)(v7 - 8);
    unsigned int v10 = (double *)(v16 + 4840);
    int v11 = (double *)(v16 + 4856);
    int v12 = (double *)(v16 + 4880);
    int v13 = (char *)(v16 + 4974);
    uint64_t v6 = v16 + 5120;
  }
  else
  {
    unsigned int v10 = (double *)(v6 - 280);
    int v11 = (double *)(v6 - 264);
    int v12 = (double *)(v6 - 240);
    int v13 = (char *)(v6 - 146);
  }
  double v17 = *v12;
  double v18 = *v10;
  double v19 = *v11;
  char type = *v13;
  if (sub_1001BEAA8(v6 - 312)) {
    int v20 = 1;
  }
  else {
    int v20 = sub_100087EE8(a1 + 160);
  }
  double v252 = 0.0;
  double v251 = 0.0;
  double v250 = 0.0;
  __int16 v249 = 0;
  int v248 = 0;
  if (!sub_100087E8C(a1))
  {
    sub_100103240();
    uint64_t v27 = sub_10010145C();
    double v212 = 0.0;
    if ((v27 & 1) != 0
      || (v247[0] = v255,
          v247[1] = v256,
          v246[0] = v253,
          v246[1] = v254,
          !sub_1001A3F00(v27, (uint64_t)v247, (uint64_t)v246)))
    {
      int v28 = 0;
      uint64_t v213 = 0;
      uint64_t v29 = 0;
      int v23 = 0;
      goto LABEL_57;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, double))(**(void **)(a1 + 656) + 48))(*(void *)(a1 + 656), a3);
  if (!result) {
    return result;
  }
  BOOL v22 = v17 < 0.447387993 && v17 > 0.0;
  HIDWORD(v213) = sub_100D3FF74(a1, 1);
  LODWORD(v213) = sub_100D3FF74(a1, 0);
  if (v22) {
    int v23 = HIDWORD(v213);
  }
  else {
    int v23 = v213;
  }
  uint64_t v24 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256)
  {
    int v30 = *(double **)(v256 - 8);
    double v25 = v30[639];
    if (v25 <= *(double *)(a1 + 2008)) {
      double v25 = *(double *)(a1 + 2008);
    }
    if (v20)
    {
      double v26 = v30[602] + -10.24;
      if (v25 > v26) {
        double v26 = v25;
      }
      uint64_t v24 = *(void *)(v256 - 8) + 5120;
      goto LABEL_44;
    }
    uint64_t v31 = v30 + 629;
  }
  else
  {
    double v25 = *(double *)(*((void *)&v256 + 1) - 8);
    if (v25 <= *(double *)(a1 + 2008)) {
      double v25 = *(double *)(a1 + 2008);
    }
    if (v20)
    {
      double v26 = *(double *)(*((void *)&v256 + 1) - 304) + -10.24;
      if (v25 > v26) {
        double v26 = v25;
      }
LABEL_44:
      uint64_t v31 = (double *)(v24 - 304);
      double v25 = v26;
      goto LABEL_47;
    }
    uint64_t v31 = (double *)(*((void *)&v256 + 1) - 88);
  }
LABEL_47:
  double v32 = *v31;
  *(double *)(a1 + 2008) = *v31;
  BOOL v33 = sub_100184990(a1, &v252, v25, v32);
  if (v33 & v23)
  {
    v245[0] = v255;
    v245[1] = v256;
    v244[0] = v253;
    v244[1] = v254;
    if ((sub_100D40968(v33, (uint64_t)v245, (uint64_t)v244) & 1) != 0
      || (sub_100D40A70(a1, v22, v20, &v250, &v251, a3) | v22) != 1)
    {
      goto LABEL_55;
    }
    uint64_t v34 = *((void *)&v256 + 1);
    if (*((void *)&v256 + 1) == *(void *)v256) {
      uint64_t v34 = *(void *)(v256 - 8) + 5120;
    }
    if (*(double *)(v34 - 80) <= 0.0)
    {
LABEL_55:
      uint64_t v29 = 0;
      int v28 = 1;
      double v212 = a3;
    }
    else
    {
      int v28 = 1;
      double v212 = a3;
      uint64_t v29 = 1;
    }
    int v23 = 1;
  }
  else
  {
    int v28 = 0;
    uint64_t v29 = 0;
    double v212 = a3;
  }
LABEL_57:
  uint64_t v220 = a1 + 800;
  if (sub_1001BEACC(a1 + 800, v29)) {
    int v35 = 2;
  }
  else {
    int v35 = v28;
  }
  int v221 = v35;
  double v243 = 0.0;
  BOOL v36 = sub_100184990(a1, &v243, a3 + -20.0, a3);
  int v218 = 0;
  double v37 = v243;
  BOOL v38 = v243 < 11.9210824 && v36;
  if (!v38 || !v221)
  {
    BOOL v210 = 0;
    double v42 = 0.0;
    goto LABEL_86;
  }
  memset(buf, 0, 32);
  memset(v271, 0, 32);
  if (!sub_1001856E8(v5, (uint64_t)buf, v271, a3 + -20.0))
  {
    BOOL v45 = 0;
    double v42 = 0.0;
LABEL_84:
    int v218 = 1;
    int v221 = -1;
    goto LABEL_85;
  }
  uint64_t v39 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)&buf[24])
  {
    double v42 = 0.0;
  }
  else
  {
    uint64_t v40 = v256;
    uint64_t v41 = *(void *)v256;
    double v42 = 0.0;
    do
    {
      if (v39 == v41)
      {
        uint64_t v44 = *(void *)(v40 - 8);
        v40 -= 8;
        uint64_t v41 = v44;
        uint64_t v43 = (double *)(v44 + 4848);
        uint64_t v39 = v44 + 5120;
      }
      else
      {
        uint64_t v43 = (double *)(v39 - 272);
      }
      double v42 = v42 + *v43;
      v39 -= 320;
    }
    while (v39 != *(void *)&buf[24]);
  }
  BOOL v45 = v37 < 4.4704 && v42 > 0.0;
  BOOL v46 = sub_100087E40(a1 + 160);
  if (v42 < 2.22044605e-16 || !v46) {
    goto LABEL_84;
  }
  int v218 = 0;
LABEL_85:
  BOOL v210 = v45;
LABEL_86:
  if (v23) {
    double v48 = v252;
  }
  else {
    double v48 = 0.0;
  }
  uint64_t v49 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v49 = *(void *)(v256 - 8) + 5120;
  }
  BOOL v214 = sub_1001A3A34(a1, v18, v48, *(double *)(v49 - 96));
  if (v214)
  {
    BOOL v50 = sub_100087E8C(a1);
    int v51 = v221;
    if (!v50) {
      int v51 = -1;
    }
    int v221 = v51;
    int v52 = v218;
    if (!v50) {
      int v52 = 2;
    }
    int v218 = v52;
  }
  if ((sub_100087EE8(a1 + 160) & 1) != 0 || sub_100087E40(a1 + 160))
  {
    uint64_t v53 = *((void *)&v256 + 1);
    if (*((void *)&v256 + 1) == *(void *)v256) {
      uint64_t v53 = *(void *)(v256 - 8) + 5120;
    }
    if (sub_100D411CC(a1, v53 - 320))
    {
      uint64_t v55 = v54;
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v56 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = *(void *)(a1 + 304);
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v55;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Rejecting fusion due to gps-speed based driving detection, %{public}f, workout, %{public}ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022F3BA0);
        }
        uint64_t v183 = *(void *)(a1 + 304);
        *(_DWORD *)int v271 = 134349312;
        *(void *)&v271[4] = v55;
        *(_WORD *)&v271[12] = 2050;
        *(void *)&v271[14] = v183;
        int v184 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v184);
        if (v184 != buf) {
          free(v184);
        }
      }
      int v218 = 3;
      int v221 = -1;
    }
    int v58 = sub_10007DD64(a1 + 664, (uint64_t)buf);
    int v59 = *(_DWORD *)v408 == 5 ? v58 : 0;
    if (v59 == 1)
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v60 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v61 = *(void *)(a1 + 304);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Rejecting fusion due to activity based driving detection, workout, %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022F3BA0);
        }
        uint64_t v185 = *(void *)(a1 + 304);
        *(_DWORD *)int v271 = 134349056;
        *(void *)&v271[4] = v185;
        uint64_t v186 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v186);
        if (v186 != buf) {
          free(v186);
        }
      }
      sub_100087E40(a1 + 160);
      int v62 = 4;
      goto LABEL_139;
    }
  }
  BOOL v63 = sub_100087E40(a1 + 160);
  if (v221 > 0 && v63)
  {
    uint64_t v66 = *((void *)&v256 + 1);
    uint64_t v65 = (uint64_t *)v256;
    if (*((void *)&v256 + 1) == *((void *)&v254 + 1)) {
      LODWORD(v67) = 0;
    }
    else {
      unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v256 + 1) - *(void *)v256) >> 6)
    }
          + 2 * (v256 - v254)
          + 0x3333333333333333 * ((uint64_t)(*((void *)&v254 + 1) - *(void *)v254) >> 6);
    if ((int)v67 >= 5) {
      LODWORD(v67) = 5;
    }
    *(_OWORD *)uint64_t buf = v256;
    sub_1000BACE4((uint64_t **)buf, -(uint64_t)(int)v67);
    uint64_t v68 = *(void *)&buf[8];
    if (v66 == *(void *)&buf[8]) {
      goto LABEL_138;
    }
    unsigned int v69 = 0;
    uint64_t v70 = *v65;
    do
    {
      uint64_t v71 = v66;
      if (v66 == v70) {
        uint64_t v71 = *(v65 - 1) + 5120;
      }
      int v72 = sub_100D42B88(a1);
      if (*(_DWORD *)(v71 - 104)) {
        int v73 = 1;
      }
      else {
        int v73 = v72;
      }
      uint64_t v70 = *v65;
      if (v66 == *v65)
      {
        uint64_t v74 = *--v65;
        uint64_t v70 = v74;
        uint64_t v66 = v74 + 5120;
      }
      v69 += v73;
      v66 -= 320;
    }
    while (v66 != v68);
    if (v69 <= 2)
    {
LABEL_138:
      int v62 = 5;
LABEL_139:
      int v218 = v62;
      int v221 = -1;
    }
  }
  sub_1001BEBA4(v220, v221);
  uint64_t v75 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v75 = *(void *)(v256 - 8) + 5120;
  }
  sub_1001BEBAC(v220, (double *)(v75 - 320));
  if (v221 < 1)
  {
    int v219 = 0;
    double v77 = v18;
  }
  else
  {
    if (*(unsigned char *)(a1 + 2128)) {
      int v76 = 1;
    }
    else {
      int v76 = v20;
    }
    int v219 = v76;
    if (v76) {
      double v77 = v252;
    }
    else {
      double v77 = v18;
    }
  }
  *(double *)(a1 + 2088) = v77 + *(double *)(a1 + 2088);
  *(double *)(a1 + 2096) = v18 + *(double *)(a1 + 2096);
  *(double *)(a1 + 2104) = v19 + *(double *)(a1 + 2104);
  double v78 = *(double *)(a1 + 2120);
  uint64_t v80 = *((void *)&v256 + 1);
  uint64_t v79 = (void *)v256;
  if (*(double *)(a1 + 2112) < 0.0) {
    goto LABEL_154;
  }
  uint64_t v81 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v81 = *(void *)(v256 - 8) + 5120;
  }
  if (v78 > *(double *)(v81 - 224)) {
LABEL_154:
  }
    *(double *)(a1 + 2112) = v78;
  long long v241 = 0u;
  long long v242 = 0u;
  long long v239 = 0u;
  long long v240 = 0u;
  long long v237 = 0u;
  *(_OWORD *)theString = 0u;
  long long v235 = 0u;
  long long v236 = 0u;
  long long v233 = 0u;
  long long v234 = 0u;
  long long __src = 0u;
  if (v80 == *v79) {
    uint64_t v80 = *(v79 - 1) + 5120;
  }
  double v82 = sub_100187E84(v220);
  uint64_t v83 = sub_100087DF0(v220);
  int v84 = v83;
  long long v85 = *(_OWORD *)(v80 - 312);
  long long v86 = *(_OWORD *)(v80 - 296);
  long long v234 = *(_OWORD *)(v80 - 280);
  long long v87 = *(_OWORD *)(v80 - 264);
  long long v88 = *(_OWORD *)(v80 - 232);
  long long v89 = *(_OWORD *)(v80 - 216);
  long long v236 = *(_OWORD *)(v80 - 248);
  long long v90 = *(_OWORD *)(v80 - 184);
  long long v91 = *(_OWORD *)(v80 - 152);
  long long v92 = *(_OWORD *)(v80 - 200);
  long long v241 = *(_OWORD *)(v80 - 168);
  long long v242 = v91;
  long long v239 = v92;
  long long v240 = v90;
  long long __src = v85;
  long long v233 = v86;
  long long v237 = v88;
  *(_OWORD *)theString = v89;
  long long v235 = v87;
  *(double *)&long long v234 = v77;
  *((double *)&v236 + 1) = v82;
  LOBYTE(v239) = v219;
  BYTE1(v239) = sub_100087A0C(v83, v83);
  char v93 = type;
  if (v219) {
    char v93 = 1;
  }
  BYTE6(v242) = v93;
  DWORD2(v242) = v84;
  *(void *)uint64_t buf = 0xBFF0000000000000;
  sub_100174C74(a1, (double *)buf, a3);
  uint64_t v94 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v94 = *(void *)(v256 - 8) + 5120;
  }
  double v95 = *(double *)buf;
  double v96 = sub_1001BF26C(1.5, 0.15, 3.5, 0.35, *(double *)(v94 - 80));
  sub_100103240();
  if ((sub_10010145C() & 1) != 0 || (sub_100103240(), sub_100106424()))
  {
    int v97 = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a1 + 656) + 24))(*(void *)(a1 + 656), buf, a3);
    if (*(_DWORD *)v397 == 2) {
      int v98 = v97;
    }
    else {
      int v98 = 0;
    }
    sub_10003C298(*(void *)(a1 + 2136), SDWORD2(v233), v98, *(double *)(a1 + 2096), *(double *)(a1 + 2104), v95, *(double *)(a1 + 2088), v17, *((double *)&v236 + 1));
  }
  int v211 = (double *)(a1 + 2088);
  double v99 = fmin(fmax(v96, 0.15), 0.35);
  if (*(unsigned char *)(a1 + 2129))
  {
    sub_10173CBA8((uint64_t)v271);
    operator new();
  }
  *(_DWORD *)typea = sub_100184BB4(a1) ^ 1;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  int v100 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, typea[0]))
  {
    uint64_t v101 = *((void *)&v256 + 1);
    uint64_t v102 = *((void *)&v256 + 1);
    if (*((void *)&v256 + 1) == *(void *)v256)
    {
      uint64_t v102 = *(void *)(v256 - 8) + 5120;
      uint64_t v101 = v102;
    }
    double v103 = v252;
    int v104 = *(_DWORD *)(v102 - 104);
    double v105 = *(double *)(a1 + 2096);
    uint64_t v106 = *(void *)(a1 + 2104);
    uint64_t v206 = *(void *)(a1 + 2088);
    uint64_t v208 = *(void *)(v101 - 112);
    unsigned __int8 v107 = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a1 + 656) + 24))(*(void *)(a1 + 656), v271, a3);
    if ((v107 & (v273 > 0.0)) != 0) {
      double v108 = 1.0 / v273;
    }
    else {
      double v108 = -1.0;
    }
    double v205 = v108;
    uint64_t v109 = sub_100087DF0(v220);
    int v110 = sub_100087A0C(v109, v109);
    uint64_t v111 = *((void *)&v256 + 1);
    if (*((void *)&v256 + 1) == *(void *)v256) {
      double v112 = *(double *)(*(void *)(v256 - 8) + 4896);
    }
    else {
      double v112 = *(double *)(*((void *)&v256 + 1) - 224);
    }
    double v113 = 0.0;
    if (*v211 != 0.0) {
      double v113 = (v112 - *(double *)(a1 + 2112)) / *v211;
    }
    double v114 = v103 / v18;
    if (v18 <= 0.0) {
      double v114 = 0.0;
    }
    if (*((void *)&v256 + 1) == *(void *)v256)
    {
      uint64_t v116 = *(void *)(v256 - 8);
      int v115 = (uint64_t *)(v116 + 5112);
      uint64_t v111 = v116 + 5120;
    }
    else
    {
      int v115 = (uint64_t *)(*((void *)&v256 + 1) - 8);
    }
    uint64_t v117 = *v115;
    uint64_t v118 = *(void *)(v111 - 88);
    *(_DWORD *)uint64_t buf = 136332034;
    *(void *)&uint8_t buf[4] = "time";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = a3;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&uint8_t buf[24] = "count";
    *(_WORD *)&unsigned char buf[32] = 1024;
    *(_DWORD *)v387 = DWORD2(v233);
    *(_WORD *)&v387[4] = 2080;
    v388 = "deltaCount";
    __int16 v389 = 1024;
    int v390 = v104;
    __int16 v391 = 2080;
    v392 = "deltaDist(m)";
    __int16 v393 = 2080;
    v394 = "ped";
    __int16 v395 = 2048;
    v396 = (const char *)*((void *)&v234 + 1);
    *(_WORD *)v397 = 2080;
    *(void *)&v397[2] = "calPed";
    __int16 v398 = 2048;
    v399 = *(const char **)&v18;
    __int16 v400 = 2080;
    v401 = "gps";
    __int16 v402 = 2048;
    v403 = *(const char **)&v103;
    __int16 v404 = 2080;
    v405 = "fused";
    __int16 v406 = 2048;
    v407 = (const char *)v234;
    *(_WORD *)v408 = 2080;
    *(void *)&v408[2] = "totalDist(m)";
    __int16 v409 = 2080;
    v410 = "calPed";
    __int16 v411 = 2048;
    double v412 = v105;
    __int16 v413 = 2080;
    v414 = "calPedMobility";
    __int16 v415 = 2048;
    *(void *)v416 = v106;
    *(_WORD *)&v416[8] = 2080;
    *(void *)&v416[10] = "gps";
    *(_WORD *)&v416[18] = 2048;
    *(double *)&v416[20] = v95;
    *(_WORD *)&v416[28] = 2080;
    *(void *)&v416[30] = "fused";
    *(_WORD *)&v416[38] = 2048;
    *(void *)&v416[40] = v206;
    *(_WORD *)&v416[48] = 2080;
    *(void *)&v416[50] = "usedGps";
    *(_WORD *)&v416[58] = 1024;
    *(_DWORD *)&v416[60] = v219;
    __int16 v417 = 2080;
    v418 = "pace(s/m)";
    __int16 v419 = 2080;
    v420 = "ped";
    __int16 v421 = 2048;
    uint64_t v422 = v208;
    __int16 v423 = 2080;
    v424 = "calPed";
    __int16 v425 = 2048;
    double v426 = v17;
    __int16 v427 = 2080;
    v428 = "StepDistancePedometerFusedPace";
    __int16 v429 = 2048;
    uint64_t v430 = *((void *)&v236 + 1);
    __int16 v431 = 2080;
    v432 = "rawGps";
    __int16 v433 = 2048;
    double v434 = v205;
    __int16 v435 = 2080;
    v436 = "StepDistanceFinalFusedPace";
    __int16 v437 = 2048;
    uint64_t v438 = *((void *)&v236 + 1);
    __int16 v439 = 2080;
    v440 = "StepDistanceUsedOdometerPace";
    __int16 v441 = 1024;
    int v442 = v110;
    __int16 v443 = 2080;
    v444 = "odometerPaceStdError";
    __int16 v445 = 2048;
    double v446 = v250;
    __int16 v447 = 2080;
    v448 = "pedometerPaceStdError";
    __int16 v449 = 2048;
    double v450 = v251;
    __int16 v451 = 2080;
    v452 = "residual";
    __int16 v453 = 2048;
    double v454 = v250 - v251;
    __int16 v455 = 2080;
    v456 = "output";
    __int16 v457 = 2048;
    uint64_t v458 = *((void *)&v236 + 1);
    __int16 v459 = 2080;
    v460 = "tolerance";
    __int16 v461 = 2048;
    double v462 = v99;
    __int16 v463 = 2080;
    v464 = "activeTime";
    __int16 v465 = 2048;
    double v466 = v112;
    __int16 v467 = 2080;
    v468 = "averageActivePace";
    __int16 v469 = 2048;
    double v470 = v113;
    __int16 v471 = 2080;
    v472 = "ratio";
    __int16 v473 = 2048;
    double v474 = v114;
    __int16 v475 = 2080;
    v476 = "vehicular";
    __int16 v477 = 1024;
    BOOL v478 = v214;
    __int16 v479 = 2080;
    v480 = "firstStepTime";
    __int16 v481 = 2048;
    uint64_t v482 = v117;
    __int16 v483 = 2080;
    v484 = "lastStepTime";
    __int16 v485 = 2048;
    uint64_t v486 = v118;
    __int16 v487 = 2080;
    v488 = "pedometerArmConstrainedState";
    __int16 v489 = 1024;
    int v490 = BYTE8(v241);
    __int16 v491 = 2080;
    v492 = "distanceSource";
    __int16 v493 = 1024;
    int v494 = BYTE6(v242);
    __int16 v495 = 2080;
    v496 = "paceSource";
    __int16 v497 = 1024;
    int v498 = DWORD2(v242);
    _os_log_impl((void *)&_mh_execute_header, v100, typea[0], "unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d,%s,%d,%s,%d", buf, 0x280u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    uint64_t v164 = *((void *)&v256 + 1);
    uint64_t v165 = *((void *)&v256 + 1);
    if (*((void *)&v256 + 1) == *(void *)v256)
    {
      uint64_t v165 = *(void *)(v256 - 8) + 5120;
      uint64_t v164 = v165;
    }
    double v166 = v252;
    int v167 = *(_DWORD *)(v165 - 104);
    double v168 = *(double *)(a1 + 2096);
    uint64_t v169 = *(void *)(a1 + 2104);
    uint64_t v207 = *(void *)(v164 - 112);
    uint64_t v209 = *(void *)(a1 + 2088);
    unsigned __int8 v170 = (*(uint64_t (**)(void, _OWORD *, double))(**(void **)(a1 + 656) + 24))(*(void *)(a1 + 656), v257, a3);
    if ((v170 & (*((double *)&v258 + 1) > 0.0)) != 0) {
      double v171 = 1.0 / *((double *)&v258 + 1);
    }
    else {
      double v171 = -1.0;
    }
    uint64_t v172 = sub_100087DF0(v220);
    int v173 = sub_100087A0C(v172, v172);
    uint64_t v174 = *((void *)&v256 + 1);
    if (*((void *)&v256 + 1) == *(void *)v256) {
      double v175 = *(double *)(*(void *)(v256 - 8) + 4896);
    }
    else {
      double v175 = *(double *)(*((void *)&v256 + 1) - 224);
    }
    double v187 = 0.0;
    if (*v211 != 0.0) {
      double v187 = (v175 - *(double *)(a1 + 2112)) / *v211;
    }
    double v188 = v166 / v18;
    if (v18 <= 0.0) {
      double v188 = 0.0;
    }
    if (*((void *)&v256 + 1) == *(void *)v256)
    {
      uint64_t v190 = *(void *)(v256 - 8);
      int v189 = (uint64_t *)(v190 + 5112);
      uint64_t v174 = v190 + 5120;
    }
    else
    {
      int v189 = (uint64_t *)(*((void *)&v256 + 1) - 8);
    }
    uint64_t v191 = *v189;
    uint64_t v192 = *(void *)(v174 - 88);
    *(_DWORD *)int v271 = 136332034;
    *(void *)&v271[4] = "time";
    *(_WORD *)&v271[12] = 2048;
    *(double *)&v271[14] = a3;
    *(_WORD *)&v271[22] = 2080;
    *(void *)&v271[24] = "count";
    *(_WORD *)&v271[32] = 1024;
    *(_DWORD *)__int16 v272 = DWORD2(v233);
    *(_WORD *)&v272[4] = 2080;
    double v273 = COERCE_DOUBLE("deltaCount");
    __int16 v274 = 1024;
    int v275 = v167;
    __int16 v276 = 2080;
    uint64_t v277 = "deltaDist(m)";
    __int16 v278 = 2080;
    uint64_t v279 = "ped";
    __int16 v280 = 2048;
    std::string v281 = (const char *)*((void *)&v234 + 1);
    __int16 v282 = 2080;
    int v283 = "calPed";
    __int16 v284 = 2048;
    __int16 v285 = *(const char **)&v18;
    __int16 v286 = 2080;
    __int16 v287 = "gps";
    __int16 v288 = 2048;
    uint64_t v289 = *(const char **)&v166;
    __int16 v290 = 2080;
    int v291 = "fused";
    __int16 v292 = 2048;
    double v293 = (const char *)v234;
    __int16 v294 = 2080;
    int v295 = "totalDist(m)";
    __int16 v296 = 2080;
    double v297 = "calPed";
    __int16 v298 = 2048;
    double v299 = v168;
    __int16 v300 = 2080;
    double v301 = "calPedMobility";
    __int16 v302 = 2048;
    *(void *)double v303 = v169;
    *(_WORD *)&v303[8] = 2080;
    *(void *)&v303[10] = "gps";
    *(_WORD *)&v303[18] = 2048;
    *(double *)&v303[20] = v95;
    *(_WORD *)&v303[28] = 2080;
    *(void *)&v303[30] = "fused";
    *(_WORD *)&v303[38] = 2048;
    *(void *)&v303[40] = v209;
    *(_WORD *)&v303[48] = 2080;
    *(void *)&v303[50] = "usedGps";
    *(_WORD *)&v303[58] = 1024;
    *(_DWORD *)&v303[60] = v219;
    __int16 v304 = 2080;
    double v305 = "pace(s/m)";
    __int16 v306 = 2080;
    double v307 = "ped";
    __int16 v308 = 2048;
    uint64_t v309 = v207;
    __int16 v310 = 2080;
    int v311 = "calPed";
    __int16 v312 = 2048;
    double v313 = v17;
    __int16 v314 = 2080;
    unsigned int v315 = "StepDistancePedometerFusedPace";
    __int16 v316 = 2048;
    uint64_t v317 = *((void *)&v236 + 1);
    __int16 v318 = 2080;
    int v319 = "rawGps";
    __int16 v320 = 2048;
    double v321 = v171;
    __int16 v322 = 2080;
    int v323 = "StepDistanceFinalFusedPace";
    __int16 v324 = 2048;
    uint64_t v325 = *((void *)&v236 + 1);
    __int16 v326 = 2080;
    int v327 = "StepDistanceUsedOdometerPace";
    __int16 v328 = 1024;
    int v329 = v173;
    __int16 v330 = 2080;
    int v331 = "odometerPaceStdError";
    __int16 v332 = 2048;
    double v333 = v250;
    __int16 v334 = 2080;
    uint64_t v335 = "pedometerPaceStdError";
    __int16 v336 = 2048;
    double v337 = v251;
    __int16 v338 = 2080;
    int v339 = "residual";
    __int16 v340 = 2048;
    double v341 = v250 - v251;
    __int16 v342 = 2080;
    int v343 = "output";
    __int16 v344 = 2048;
    uint64_t v345 = *((void *)&v236 + 1);
    __int16 v346 = 2080;
    __int16 v347 = "tolerance";
    __int16 v348 = 2048;
    double v349 = v99;
    __int16 v350 = 2080;
    __int16 v351 = "activeTime";
    __int16 v352 = 2048;
    double v353 = v175;
    __int16 v354 = 2080;
    __int16 v355 = "averageActivePace";
    __int16 v356 = 2048;
    double v357 = v187;
    __int16 v358 = 2080;
    v359 = "ratio";
    __int16 v360 = 2048;
    double v361 = v188;
    __int16 v362 = 2080;
    v363 = "vehicular";
    __int16 v364 = 1024;
    BOOL v365 = v214;
    __int16 v366 = 2080;
    v367 = "firstStepTime";
    __int16 v368 = 2048;
    uint64_t v369 = v191;
    __int16 v370 = 2080;
    v371 = "lastStepTime";
    __int16 v372 = 2048;
    uint64_t v373 = v192;
    __int16 v374 = 2080;
    v375 = "pedometerArmConstrainedState";
    __int16 v376 = 1024;
    int v377 = BYTE8(v241);
    __int16 v378 = 2080;
    v379 = "distanceSource";
    __int16 v380 = 1024;
    int v381 = BYTE6(v242);
    __int16 v382 = 2080;
    v383 = "paceSource";
    __int16 v384 = 1024;
    int v385 = DWORD2(v242);
    int v193 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v193);
    if (v193 != buf) {
      free(v193);
    }
  }
  uint64_t v270 = 0;
  long long v268 = 0u;
  long long v269 = 0u;
  long long v266 = 0u;
  long long v267 = 0u;
  long long v264 = 0u;
  long long v265 = 0u;
  long long v262 = 0u;
  long long v263 = 0u;
  long long v260 = 0u;
  long long v261 = 0u;
  long long v258 = 0u;
  long long v259 = 0u;
  memset(v257, 0, sizeof(v257));
  sub_10007DD64(a1 + 664, (uint64_t)v257);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  int v119 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, typea[0]))
  {
    double v120 = sub_10007ED58(v220);
    int v121 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)uint64_t buf = 134219264;
    *(double *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v120;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = v121;
    *(_WORD *)&unsigned char buf[28] = 1024;
    *(_DWORD *)&buf[30] = v221;
    *(_WORD *)v387 = 1024;
    *(_DWORD *)&v387[2] = v218;
    LOWORD(v388) = 1024;
    *(_DWORD *)((char *)&v388 + 2) = v265;
    _os_log_impl((void *)&_mh_execute_header, v119, typea[0], "unified2,time,%f,odometerSmoothMeanPace,%.3f,estimatedOdometerQuality,%d,odometerFusionQuality,%d,odometerFusionRejectionReason,%d,activityType,%d", buf, 0x2Eu);
  }
  unint64_t v122 = a2;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    double v176 = sub_10007ED58(v220);
    int v177 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)int v271 = 134219264;
    *(double *)&v271[4] = a3;
    *(_WORD *)&v271[12] = 2048;
    *(double *)&v271[14] = v176;
    *(_WORD *)&v271[22] = 1024;
    *(_DWORD *)&v271[24] = v177;
    *(_WORD *)&v271[28] = 1024;
    *(_DWORD *)&v271[30] = v221;
    *(_WORD *)__int16 v272 = 1024;
    *(_DWORD *)&v272[2] = v218;
    LOWORD(v273) = 1024;
    *(_DWORD *)((char *)&v273 + 2) = v265;
    uint64_t v178 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v178);
    if (v178 != buf) {
      free(v178);
    }
    unint64_t v122 = a2;
  }
  long long v229 = v240;
  long long v230 = v241;
  long long v231 = v242;
  long long v226 = v236;
  long long v227 = v237;
  long long v228 = *(_OWORD *)theString;
  long long v222 = __src;
  long long v223 = v233;
  long long v224 = v234;
  long long v225 = v235;
  int v123 = v122[2];
  int v124 = v122[1];
  if (v124 >= v123)
  {
    unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * ((v124 - *v122) >> 6);
    if (v126 + 1 > 0x155555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((v123 - *v122) >> 6);
    uint64_t v128 = 2 * v127;
    if (2 * v127 <= v126 + 1) {
      uint64_t v128 = v126 + 1;
    }
    if (v127 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v129 = 0x155555555555555;
    }
    else {
      unint64_t v129 = v128;
    }
    if (v129)
    {
      uint64_t v130 = (char *)sub_10017EB28((uint64_t)(v122 + 2), v129);
      unint64_t v122 = a2;
    }
    else
    {
      uint64_t v130 = 0;
    }
    int v131 = &v130[192 * v126];
    int v132 = &v130[192 * v129];
    *((_OWORD *)v131 + 7) = v239;
    *((_OWORD *)v131 + 8) = v229;
    *((_OWORD *)v131 + 9) = v230;
    *((_OWORD *)v131 + 10) = v231;
    *((_OWORD *)v131 + 3) = v225;
    *((_OWORD *)v131 + 4) = v226;
    *((_OWORD *)v131 + 5) = v227;
    *((_OWORD *)v131 + 6) = v228;
    *(_OWORD *)int v131 = v222;
    *((_OWORD *)v131 + 1) = v223;
    *((_OWORD *)v131 + 2) = v224;
    *((double *)v131 + 22) = v212;
    v131[184] = BYTE4(v213);
    v131[185] = v213;
    *(_DWORD *)(v131 + 186) = v248;
    *((_WORD *)v131 + 95) = v249;
    uint64_t v125 = v131 + 192;
    uint64_t v134 = *v122;
    unsigned int v133 = v122[1];
    if (v133 != *v122)
    {
      do
      {
        long long v135 = *((_OWORD *)v133 - 12);
        long long v136 = *((_OWORD *)v133 - 11);
        long long v137 = *((_OWORD *)v133 - 9);
        *((_OWORD *)v131 - 10) = *((_OWORD *)v133 - 10);
        *((_OWORD *)v131 - 9) = v137;
        *((_OWORD *)v131 - 12) = v135;
        *((_OWORD *)v131 - 11) = v136;
        long long v138 = *((_OWORD *)v133 - 8);
        long long v139 = *((_OWORD *)v133 - 7);
        long long v140 = *((_OWORD *)v133 - 5);
        *((_OWORD *)v131 - 6) = *((_OWORD *)v133 - 6);
        *((_OWORD *)v131 - 5) = v140;
        *((_OWORD *)v131 - 8) = v138;
        *((_OWORD *)v131 - 7) = v139;
        long long v141 = *((_OWORD *)v133 - 4);
        long long v142 = *((_OWORD *)v133 - 3);
        long long v143 = *((_OWORD *)v133 - 1);
        *((_OWORD *)v131 - 2) = *((_OWORD *)v133 - 2);
        *((_OWORD *)v131 - 1) = v143;
        *((_OWORD *)v131 - 4) = v141;
        *((_OWORD *)v131 - 3) = v142;
        v131 -= 192;
        v133 -= 192;
      }
      while (v133 != v134);
      unsigned int v133 = *v122;
    }
    *unint64_t v122 = v131;
    v122[1] = v125;
    v122[2] = v132;
    if (v133) {
      operator delete(v133);
    }
  }
  else
  {
    memmove(v122[1], &__src, 0xB0uLL);
    *((double *)v124 + 22) = v212;
    v124[184] = BYTE4(v213);
    v124[185] = v213;
    *(_DWORD *)(v124 + 186) = v248;
    *((_WORD *)v124 + 95) = v249;
    uint64_t v125 = v124 + 192;
  }
  v122[1] = v125;
  int v144 = (double *)*((void *)&v256 + 1);
  uint64_t v145 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v145 = *(void *)(v256 - 8) + 5120;
  }
  if (!*(_DWORD *)(v145 - 104)) {
    goto LABEL_242;
  }
  if (v210) {
    goto LABEL_229;
  }
  if (*((void *)&v256 + 1) == *(void *)v256)
  {
    __int16 v147 = *(double **)(v256 - 8);
    if (v147[606] < 0.5722112) {
      goto LABEL_229;
    }
    if (v147[632] < 0.5722112) {
      goto LABEL_229;
    }
    if (*(double *)&v234 < 0.5722112) {
      goto LABEL_229;
    }
    if (v147[616] > 4.47387258) {
      goto LABEL_229;
    }
    double v146 = *((double *)&v236 + 1);
    if (*((double *)&v236 + 1) > 4.47387258) {
      goto LABEL_229;
    }
    int v144 = v147 + 640;
  }
  else
  {
    if (*(double *)(*((void *)&v256 + 1) - 272) < 0.5722112) {
      goto LABEL_229;
    }
    if (*(double *)(*((void *)&v256 + 1) - 64) < 0.5722112) {
      goto LABEL_229;
    }
    if (*(double *)&v234 < 0.5722112) {
      goto LABEL_229;
    }
    if (*(double *)(*((void *)&v256 + 1) - 192) > 4.47387258) {
      goto LABEL_229;
    }
    double v146 = *((double *)&v236 + 1);
    if (*((double *)&v236 + 1) > 4.47387258) {
      goto LABEL_229;
    }
  }
  if (*(v144 - 24) != 0.0 && v146 == 0.0)
  {
LABEL_229:
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    int v148 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      if (*((void *)&v256 + 1) == *(void *)v256)
      {
        uint64_t v153 = *(void *)(v256 - 8);
        int v149 = (int *)(v153 + 4832);
        uint64_t v150 = (int *)(v153 + 5016);
        long long v151 = (const char **)(v153 + 4848);
        uint64_t v152 = v153 + 5120;
      }
      else
      {
        int v149 = (int *)(*((void *)&v256 + 1) - 288);
        uint64_t v150 = (int *)(*((void *)&v256 + 1) - 104);
        long long v151 = (const char **)(*((void *)&v256 + 1) - 272);
        uint64_t v152 = *((void *)&v256 + 1);
      }
      int v154 = *v150;
      int v155 = *v149;
      int v156 = *v151;
      uint64_t v157 = *(void *)(v152 - 64);
      if (*((void *)&v256 + 1) == *(void *)v256)
      {
        uint64_t v161 = *(void *)(v256 - 8);
        uint64_t v158 = *(void *)(v161 + 5008);
        uint64_t v159 = *(void *)(v161 + 4928);
        double v160 = *(double *)(v161 + 5040);
      }
      else
      {
        uint64_t v158 = *(void *)(*((void *)&v256 + 1) - 112);
        uint64_t v159 = *(void *)(*((void *)&v256 + 1) - 192);
        double v160 = *(double *)(*((void *)&v256 + 1) - 80);
      }
      double v162 = 0.0;
      if (v160 != 0.0) {
        double v162 = 1.0 / v160;
      }
      *(_DWORD *)uint64_t buf = 136322050;
      *(void *)&uint8_t buf[4] = "time";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = a3;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&uint8_t buf[24] = "count";
      *(_WORD *)&unsigned char buf[32] = 1024;
      *(_DWORD *)v387 = v155;
      *(_WORD *)&v387[4] = 2080;
      v388 = "deltaCount";
      __int16 v389 = 1024;
      int v390 = v154;
      __int16 v391 = 2080;
      v392 = "rawDistance";
      __int16 v393 = 2048;
      v394 = v156;
      __int16 v395 = 2080;
      v396 = "calDistance";
      *(_WORD *)v397 = 2048;
      *(void *)&v397[2] = v157;
      __int16 v398 = 2080;
      v399 = "odomDistance";
      __int16 v400 = 2048;
      v401 = *(const char **)&v252;
      __int16 v402 = 2080;
      v403 = "fusedDistance";
      __int16 v404 = 2048;
      v405 = (const char *)v234;
      __int16 v406 = 2080;
      v407 = "odometerDistanceForSlowPaceCheckWindow";
      *(_WORD *)v408 = 2048;
      *(double *)&v408[2] = v243;
      __int16 v409 = 2080;
      v410 = "pedometerRawDistanceForSlowPaceCheckWindow";
      __int16 v411 = 2048;
      double v412 = v42;
      __int16 v413 = 2080;
      v414 = "odometerError";
      __int16 v415 = 1024;
      *(_DWORD *)v416 = v210;
      *(_WORD *)&v416[4] = 2080;
      *(void *)&v416[6] = "rawPace";
      *(_WORD *)&v416[14] = 2048;
      *(void *)&v416[16] = v158;
      *(_WORD *)&v416[24] = 2080;
      *(void *)&v416[26] = "calPace";
      *(_WORD *)&v416[34] = 2048;
      *(void *)&v416[36] = v159;
      *(_WORD *)&v416[44] = 2080;
      *(void *)&v416[46] = "odomPace";
      *(_WORD *)&v416[54] = 2048;
      *(double *)&v416[56] = v162;
      __int16 v417 = 2080;
      v418 = "fusedPace";
      __int16 v419 = 2048;
      v420 = (const char *)*((void *)&v236 + 1);
      _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f", buf, 0x10Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      if (*((void *)&v256 + 1) == *(void *)v256)
      {
        uint64_t v194 = *(void *)(v256 - 8);
        unsigned int v179 = (int *)(v194 + 4832);
        int v180 = (int *)(v194 + 5016);
        int v181 = (const char **)(v194 + 4848);
        uint64_t v182 = v194 + 5120;
      }
      else
      {
        unsigned int v179 = (int *)(*((void *)&v256 + 1) - 288);
        int v180 = (int *)(*((void *)&v256 + 1) - 104);
        int v181 = (const char **)(*((void *)&v256 + 1) - 272);
        uint64_t v182 = *((void *)&v256 + 1);
      }
      int v195 = *v180;
      int v196 = *v179;
      int v197 = *v181;
      int v198 = *(const char **)(v182 - 64);
      if (*((void *)&v256 + 1) == *(void *)v256)
      {
        uint64_t v202 = *(void *)(v256 - 8);
        uint64_t v199 = *(void *)(v202 + 5008);
        uint64_t v200 = *(void *)(v202 + 4928);
        double v201 = *(double *)(v202 + 5040);
      }
      else
      {
        uint64_t v199 = *(void *)(*((void *)&v256 + 1) - 112);
        uint64_t v200 = *(void *)(*((void *)&v256 + 1) - 192);
        double v201 = *(double *)(*((void *)&v256 + 1) - 80);
      }
      double v203 = 0.0;
      if (v201 != 0.0) {
        double v203 = 1.0 / v201;
      }
      *(_DWORD *)int v271 = 136322050;
      *(void *)&v271[4] = "time";
      *(_WORD *)&v271[12] = 2048;
      *(double *)&v271[14] = a3;
      *(_WORD *)&v271[22] = 2080;
      *(void *)&v271[24] = "count";
      *(_WORD *)&v271[32] = 1024;
      *(_DWORD *)__int16 v272 = v196;
      *(_WORD *)&v272[4] = 2080;
      double v273 = COERCE_DOUBLE("deltaCount");
      __int16 v274 = 1024;
      int v275 = v195;
      __int16 v276 = 2080;
      uint64_t v277 = "rawDistance";
      __int16 v278 = 2048;
      uint64_t v279 = v197;
      __int16 v280 = 2080;
      std::string v281 = "calDistance";
      __int16 v282 = 2048;
      int v283 = v198;
      __int16 v284 = 2080;
      __int16 v285 = "odomDistance";
      __int16 v286 = 2048;
      __int16 v287 = *(const char **)&v252;
      __int16 v288 = 2080;
      uint64_t v289 = "fusedDistance";
      __int16 v290 = 2048;
      int v291 = (const char *)v234;
      __int16 v292 = 2080;
      double v293 = "odometerDistanceForSlowPaceCheckWindow";
      __int16 v294 = 2048;
      int v295 = *(const char **)&v243;
      __int16 v296 = 2080;
      double v297 = "pedometerRawDistanceForSlowPaceCheckWindow";
      __int16 v298 = 2048;
      double v299 = v42;
      __int16 v300 = 2080;
      double v301 = "odometerError";
      __int16 v302 = 1024;
      *(_DWORD *)double v303 = v210;
      *(_WORD *)&v303[4] = 2080;
      *(void *)&v303[6] = "rawPace";
      *(_WORD *)&v303[14] = 2048;
      *(void *)&v303[16] = v199;
      *(_WORD *)&v303[24] = 2080;
      *(void *)&v303[26] = "calPace";
      *(_WORD *)&v303[34] = 2048;
      *(void *)&v303[36] = v200;
      *(_WORD *)&v303[44] = 2080;
      *(void *)&v303[46] = "odomPace";
      *(_WORD *)&v303[54] = 2048;
      *(double *)&v303[56] = v203;
      __int16 v304 = 2080;
      double v305 = "fusedPace";
      __int16 v306 = 2048;
      double v307 = (const char *)*((void *)&v236 + 1);
      uint64_t v204 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v204);
      if (v204 != buf) {
        free(v204);
      }
    }
  }
LABEL_242:
  uint64_t v163 = *((void *)&v256 + 1);
  if (*((void *)&v256 + 1) == *(void *)v256) {
    uint64_t v163 = *(void *)(v256 - 8) + 5120;
  }
  *(void *)(a1 + 2120) = *(void *)(v163 - 224);
  *(unsigned char *)(a1 + 2128) = v221 > 0;
  if ((v219 & 1) == 0) {
    *(double *)(a1 + 2000) = a3;
  }
  return 1;
}

void sub_10008795C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x657]) < 0) {
    operator delete((void *)STACK[0x640]);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_10173CC80((PB::Base *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100087A0C(uint64_t a1, int a2)
{
  if ((a2 - 2) < 3) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  int v3 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[PaceController] isUsingOdometer - Requested while uninitialized", buf, 2u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLStepDistanceFusion::isUsingOdometer(CLPedometer::PaceOutputType) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100087BB4(uint64_t a1, _OWORD *a2)
{
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)a1 + 16))(a1, &v16, &v14);
  if (result)
  {
    uint64_t v4 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1) == *((void *)&v15 + 1))
    {
      return 0;
    }
    else
    {
      if (*(void *)v17 == *((void *)&v17 + 1)) {
        uint64_t v4 = *(void *)(v17 - 8) + 4032;
      }
      long long v5 = *(_OWORD *)(v4 - 192);
      long long v6 = *(_OWORD *)(v4 - 176);
      long long v7 = *(_OWORD *)(v4 - 144);
      a2[2] = *(_OWORD *)(v4 - 160);
      a2[3] = v7;
      *a2 = v5;
      a2[1] = v6;
      long long v8 = *(_OWORD *)(v4 - 128);
      long long v9 = *(_OWORD *)(v4 - 112);
      long long v10 = *(_OWORD *)(v4 - 80);
      a2[6] = *(_OWORD *)(v4 - 96);
      a2[7] = v10;
      a2[4] = v8;
      a2[5] = v9;
      long long v11 = *(_OWORD *)(v4 - 64);
      long long v12 = *(_OWORD *)(v4 - 48);
      long long v13 = *(_OWORD *)(v4 - 16);
      a2[10] = *(_OWORD *)(v4 - 32);
      a2[11] = v13;
      a2[8] = v11;
      a2[9] = v12;
      return 1;
    }
  }
  return result;
}

BOOL sub_100087C94(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  unint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = (void *)(v5 + 8 * (v4 / 0x15));
  if (*(void *)(a1 + 40) == v5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *v6 + 192 * (v4 % 0x15);
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  long long v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  unint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = (uint64_t *)(v10 + 8 * (v9 / 0x15));
  if (*(void *)(a1 + 40) == v10) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v11 + 192 * (v9 % 0x15);
  }
  uint64_t v13 = a3[3];
  if (v12 != v13)
  {
    uint64_t v14 = *v11;
    double v15 = 1.79769313e308;
    unint64_t v16 = v12;
    long long v17 = v11;
    while (1)
    {
      uint64_t v18 = v16;
      if (v16 == v14) {
        uint64_t v18 = *(v17 - 1) + 4032;
      }
      double v19 = vabdd_f64(*(double *)(v18 - 192), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = v17;
        *(void *)(a2 + 24) = v16;
        uint64_t v14 = *v17;
        uint64_t v20 = v16;
        if (v16 == *v17) {
          uint64_t v20 = *(v17 - 1) + 4032;
        }
        double v15 = v19;
        if (*(double *)(v20 - 192) == a4) {
          break;
        }
      }
      if (v16 == v14)
      {
        uint64_t v21 = *--v17;
        uint64_t v14 = v21;
        unint64_t v16 = v21 + 4032;
      }
      v16 -= 192;
      uint64_t v13 = a3[3];
      if (v16 == v13) {
        return v13 != *(void *)(a2 + 24);
      }
    }
    uint64_t v13 = a3[3];
  }
  return v13 != *(void *)(a2 + 24);
}

uint64_t sub_100087DF0(uint64_t a1)
{
  if (sub_10010145C() && sub_100DE6158(a1 + 912)) {
    return 3;
  }
  if (*(int *)(a1 + 132) < 1) {
    return 1;
  }
  return 2;
}

BOOL sub_100087E40(uint64_t a1)
{
  sub_100103240();
  int v2 = sub_10010145C();
  BOOL result = 0;
  if (v2)
  {
    if (*(_DWORD *)a1 == 1) {
      return *(void *)(a1 + 144) == 27;
    }
  }
  return result;
}

BOOL sub_100087E8C(uint64_t a1)
{
  uint64_t v1 = a1 + 160;
  if (sub_100087F44((_DWORD *)(a1 + 160)) & 1) != 0 || (sub_100087EE8(v1)) {
    return 1;
  }

  return sub_100087E40(v1);
}

uint64_t sub_100087EE8(uint64_t a1)
{
  sub_100103240();
  int v2 = sub_10010145C();
  uint64_t result = 0;
  if (v2 && *(_DWORD *)a1 == 1)
  {
    unint64_t v4 = *(void *)(a1 + 144);
    BOOL v5 = v4 > 0x31;
    unint64_t v6 = (0x23E8000000000uLL >> v4) & 1;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  return result;
}

uint64_t sub_100087F44(_DWORD *a1)
{
  if (*a1 == 1) {
    return CLMotionActivity::isTypePedestrian();
  }
  else {
    return 0;
  }
}

uint64_t sub_100087F60()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = (_OWORD *)v1;
  int v3 = (unsigned char *)v0;
  if (*(unsigned char *)(v1 + 176))
  {
    sub_10129B480(v0 + 144, v1);
    double Current = CFAbsoluteTimeGetCurrent();
    if (v3[353]) {
      BOOL v5 = *((unsigned char *)v2 + 28) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      double v6 = Current;
      sub_10170140C(&v35);
      sub_101727518((uint64_t)&v35);
      v39 |= 1u;
      *(double *)&v37[74] = v6;
      uint64_t v7 = v38;
      uint64_t v8 = *((void *)v2 + 2);
      *(_WORD *)(v38 + 68) |= 0x10u;
      *(void *)(v7 + 40) = v8;
      uint64_t v9 = v38;
      int v10 = *((_DWORD *)v2 + 6);
      *(_WORD *)(v38 + 68) |= 0x20u;
      *(_DWORD *)(v9 + 48) = v10;
      uint64_t v11 = v38;
      LOBYTE(v10) = *((unsigned char *)v2 + 29);
      *(_WORD *)(v38 + 68) |= 0x400u;
      *(unsigned char *)(v11 + 65) = v10;
      uint64_t v12 = v38;
      uint64_t v13 = *((void *)v2 + 12);
      *(_WORD *)(v38 + 68) |= 2u;
      *(void *)(v12 + 16) = v13;
      uint64_t v14 = v38;
      int v15 = *((_DWORD *)v2 + 26);
      *(_WORD *)(v38 + 68) |= 0x40u;
      *(_DWORD *)(v14 + 52) = v15;
      uint64_t v16 = v38;
      int v17 = *((_DWORD *)v2 + 22);
      *(_WORD *)(v38 + 68) |= 0x80u;
      *(_DWORD *)(v16 + 56) = v17;
      uint64_t v18 = v38;
      uint64_t v19 = *((void *)v2 + 15);
      *(_WORD *)(v38 + 68) |= 4u;
      *(void *)(v18 + 24) = v19;
      uint64_t v20 = v38;
      uint64_t v21 = *((void *)v2 + 4);
      *(_WORD *)(v38 + 68) |= 8u;
      *(void *)(v20 + 32) = v21;
      uint64_t v22 = v38;
      uint64_t v23 = *((void *)v2 + 8);
      *(_WORD *)(v38 + 68) |= 1u;
      *(void *)(v22 + 8) = v23;
      uint64_t v24 = v38;
      LOBYTE(v17) = *((unsigned char *)v2 + 128);
      *(_WORD *)(v38 + 68) |= 0x200u;
      *(unsigned char *)(v24 + 64) = v17;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_10231C278);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)&v35);
      }
      sub_101706914((PB::Base *)&v35);
    }
    sub_1010B7B84((uint64_t)(v3 + 3168), *((_DWORD *)v2 + 26), *((unsigned __int8 *)v2 + 128), *((unsigned __int8 *)v2 + 152), (uint64_t)__dst, *((double *)v2 + 2), *((float *)v2 + 39), *((double *)v2 + 12), *((double *)v2 + 17), *((double *)v2 + 18));
    if (LOBYTE(__dst[0]))
    {
      int v33 = 7;
      bzero(&v36, 0x580uLL);
      long long v35 = *(_OWORD *)((char *)__dst + 8);
      (*(void (**)(unsigned char *, int *, long long *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, &v33, &v35, 1, 0xFFFFFFFFLL, 0);
    }
  }
  sub_1001A0C8C((uint64_t)(v3 + 5192), (uint64_t)v2 + 184);
  bzero(v37, 0x578uLL);
  uint64_t v25 = *((void *)v2 + 20);
  uint64_t v26 = *((void *)v2 + 21);
  *(void *)&long long v35 = *((void *)v2 + 2);
  *((void *)&v35 + 1) = v25;
  uint64_t v36 = v26;
  LODWORD(__dst[0]) = 5;
  (*(void (**)(unsigned char *, _OWORD *, long long *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, __dst, &v35, 1, 0xFFFFFFFFLL, 0);
  int v33 = 11;
  memcpy(__dst, v2, sizeof(__dst));
  (*(void (**)(unsigned char *, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, &v33, __dst, 1, 0xFFFFFFFFLL, 0);
  int v33 = 9;
  bzero((char *)&__dst[11] + 8, 0x4D8uLL);
  long long v27 = v2[9];
  __dst[8] = v2[8];
  __dst[9] = v27;
  __dst[10] = v2[10];
  *(void *)&__dst[11] = *((void *)v2 + 22);
  long long v28 = v2[5];
  __dst[4] = v2[4];
  __dst[5] = v28;
  long long v29 = v2[7];
  __dst[6] = v2[6];
  __dst[7] = v29;
  long long v30 = v2[1];
  __dst[0] = *v2;
  __dst[1] = v30;
  long long v31 = v2[3];
  __dst[2] = v2[2];
  __dst[3] = v31;
  return (*(uint64_t (**)(unsigned char *, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, &v33, __dst, 1, 0xFFFFFFFFLL, 0);
}

void sub_10008835C(_Unwind_Exception *a1)
{
}

void sub_10008837C(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  uint64_t v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)uint64_t v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    __int16 v27 = 2050;
    long long v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    long long v29 = v30;
    memset(v30, 0, sizeof(v30));
    long long v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    uint64_t v18 = (uint64_t *)operator new(0x5A8uLL);
    v18[1] = 0;
    v18[2] = 0;
    *uint64_t v18 = (uint64_t)off_10231CEF8;
    memcpy(v18 + 3, a3, 0x590uLL);
    uint64_t v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1012A9D48();
  }
  os_activity_scope_leave(&state);
}

void sub_100088968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

uint64_t sub_100088CD4(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending app status change notification\"}", (uint8_t *)v5, 0x12u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAppStatusChangedNotification, 0, 0, 0);
  v5[0] = 3;
  uint64_t result = (*(uint64_t (**)(unsigned char *, _DWORD *, void, uint64_t))(*(void *)v1 + 144))(v1, v5, 0, 0xFFFFFFFFLL);
  v1[1136] = 0;
  return result;
}

void sub_100088E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v8 = 0u;
  memset(v9, 0, sizeof(v9));
  long long v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)unint64_t v4 = 0u;
  *(_OWORD *)BOOL v5 = 0u;
  memset(__p, 0, 27);
  *(_OWORD *)int v10 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  char v14 = 0;
  int v15 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
  if ((v9[15] & 0x80000000) != 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  if (SHIBYTE(v5[0]) < 0) {
    operator delete(v4[0]);
  }
}

void sub_100088F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100088F20(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  uint64_t v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v10;
    __int16 v25 = 2050;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  char v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      char v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v27 = v28;
    memset(v28, 0, sizeof(v28));
    long long v29 = 0;
    sub_1007E46B4((uint64_t)buf, a2, (uint64_t)&v27);
    char v14 = sub_10078A368((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_10078A7B0((uint64_t)&buf[8], *(char **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_10078A7B0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1007E4764(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_10008992C();
  }
  os_activity_scope_leave(&state);
}

void sub_1000894F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10008953C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    BOOL v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1000EAAC4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        char v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            uint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                uint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              double v48 = v19;
              sub_1000EA9CC(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              long long v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  double v32 = (uint64_t *)v27;
                }
                else {
                  double v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  long long v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              char v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                long long v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    char v39 = (uint64_t *)v36;
                  }
                  else {
                    char v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    long long v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      double v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      double v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      char v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      char v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      char v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      long long v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              double v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C9828);
              }
              uint64_t v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C9828);
                }
                BOOL v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  BOOL v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

void sub_10008992C()
{
}

void sub_1000899E4()
{
}

void sub_100089ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100089AE0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_1000DC48C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  __int16 v8 = *((_WORD *)a2 + 48);
  __dst[98] = *((unsigned char *)a2 + 98);
  *((_WORD *)__dst + 48) = v8;
  if (*((char *)a2 + 127) < 0)
  {
    sub_1000DC48C(__dst + 104, *((void **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 104);
    *((void *)__dst + 15) = *((void *)a2 + 15);
    *(_OWORD *)(__dst + 104) = v9;
  }
  if (*((char *)a2 + 151) < 0)
  {
    sub_1000DC48C(__dst + 128, *((void **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v10 = a2[8];
    *((void *)__dst + 18) = *((void *)a2 + 18);
    *((_OWORD *)__dst + 8) = v10;
  }
  BOOL v11 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_1000DC48C(v11, *((void **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v12 = *(long long *)((char *)a2 + 152);
    *((void *)__dst + 21) = *((void *)a2 + 21);
    *(_OWORD *)BOOL v11 = v12;
  }
  __int16 v13 = *((_WORD *)a2 + 88);
  __dst[178] = *((unsigned char *)a2 + 178);
  *((_WORD *)__dst + 88) = v13;
  return __dst;
}

void sub_100089C84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100089ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100089EF0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

BOOL sub_100089F38(uint64_t a1, int a2, int *a3)
{
  int v11 = a2;
  BOOL v6 = sub_1000ED620((char *)a1, a2, a3);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  long long v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t buf = &v11;
    id v8 = [[sub_10008A098((uint64_t **)(a1 + 80), &v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
    long long v9 = sub_10008A168(*a3);
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    char v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = a2;
    __int16 v17 = 2114;
    id v18 = v8;
    __int16 v19 = 2082;
    int v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp unregistration\", \"client-Id\":%{public}ld, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  return v6;
}

uint64_t **sub_10008A098(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x48uLL);
    void v11[8] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 12;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

const char *sub_10008A168(unsigned int a1)
{
  if (a1 < 0x30) {
    return off_10232D0B8[a1];
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10232D238);
  }
  int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "toString,Invalid CLLocationProvider notification,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10232D238);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const char *CLLocationProvider_Type::toString(CLLocationProvider_Type::Notification)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return "Unknown";
}

BOOL sub_10008A334(uint64_t a1, int a2, int *a3)
{
  v14.i32[2] = a2;
  BOOL v5 = 1;
  if (sub_1000ED39C(a1, a2, a3))
  {
    uint64_t v6 = sub_10016BA10();
    sub_10016BC44((uint64_t)buf);
    sub_10016BE74(v6, (uint64_t *)buf);
    *(_DWORD *)uint64_t buf = 1;
    v14.i32[0] = 1;
    v14.i32[1] = sub_10016A9AC((int *)buf);
    uint64_t v7 = sub_10016AB88();
    *(_DWORD *)uint64_t buf = 3;
    sub_100164CAC(v7, (unsigned int *)buf, &v14, (int *)(a1 + 5124), &v14.i32[2], a3);
    BOOL v5 = sub_1000ED620((char *)a1, v14.i32[2], a3);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    int v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      __int32 v9 = v14.i32[2];
      *(void *)uint64_t buf = &v14.i64[1];
      int v10 = sub_10008A098((uint64_t **)(a1 + 80), &v14.i32[2], (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      id v11 = [v10[8] description:v14.i64[0]];
      uint64_t v12 = *a3;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1026;
      __int32 v19 = v9;
      __int16 v20 = 2114;
      id v21 = v11;
      __int16 v22 = 2050;
      uint64_t v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocationController,unregistration\", \"id\":%{public}d, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x2Cu);
    }
    if (*a3 == 15 || !*a3)
    {
      *(_DWORD *)uint64_t buf = *a3;
      if (sub_1001072EC(a1, (int *)buf, 1)) {
        sub_100674ACC((uint64_t **)a1, a3);
      }
    }
  }
  return v5;
}

void sub_10008A534(void *a1)
{
  uint64_t v1 = a1[4];
  if (*(unsigned char *)(v1 + 736))
  {
    long long __p = 0uLL;
    BOOL v38 = 0;
    sub_10008AB10((unint64_t *)&__p, a1[5] + 16);
    sub_10008ABCC(&__p, *(char **)(v1 + 712), *(char **)(v1 + 720), *(void *)(v1 + 720) - *(void *)(v1 + 712));
    uint64_t v3 = a1[6];
    if (a1[7] != v3)
    {
      unint64_t v4 = 0;
      BOOL v5 = 0;
      do
      {
        if (v5 && (*(unsigned __int8 *)(v3 + v4) | 0x20) == 0x7D)
        {
          uint64_t v6 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v38)
          {
            unint64_t v8 = __p;
            uint64_t v9 = *((void *)&__p + 1) - __p;
            uint64_t v10 = *((void *)&__p + 1) - __p + 1;
            if (v10 < 0) {
              goto LABEL_74;
            }
            unint64_t v11 = (unint64_t)&v38[-__p];
            if (2 * (uint64_t)&v38[-__p] > (unint64_t)v10) {
              uint64_t v10 = 2 * v11;
            }
            if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v12 = v10;
            }
            if (v12) {
              __int16 v13 = (char *)operator new(v12);
            }
            else {
              __int16 v13 = 0;
            }
            int32x4_t v14 = &v13[v9];
            __int16 v15 = &v13[v9];
            char *v15 = 93;
            uint64_t v7 = v15 + 1;
            if (v6 != (char *)v8)
            {
              __int16 v16 = &v6[~v8];
              do
              {
                char v17 = *--v6;
                (v16--)[(void)v13] = v17;
              }
              while (v6 != (char *)v8);
              uint64_t v6 = (char *)__p;
              int32x4_t v14 = v13;
            }
            *(void *)&long long __p = v14;
            *((void *)&__p + 1) = v7;
            BOOL v38 = &v13[v12];
            if (v6) {
              operator delete(v6);
            }
          }
          else
          {
            **((unsigned char **)&__p + 1) = 93;
            uint64_t v7 = v6 + 1;
          }
          *((void *)&__p + 1) = v7;
          uint64_t v3 = a1[6];
        }
        __int16 v18 = (char *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) >= (unint64_t)v38)
        {
          unint64_t v20 = __p;
          uint64_t v21 = *((void *)&__p + 1) - __p;
          uint64_t v22 = *((void *)&__p + 1) - __p + 1;
          if (v22 < 0) {
LABEL_74:
          }
            sub_1001D7FD4();
          unint64_t v23 = (unint64_t)&v38[-__p];
          if (2 * (uint64_t)&v38[-__p] > (unint64_t)v22) {
            uint64_t v22 = 2 * v23;
          }
          if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v24 = v22;
          }
          if (v24) {
            __int16 v25 = (char *)operator new(v24);
          }
          else {
            __int16 v25 = 0;
          }
          int v26 = &v25[v21];
          v25[v21] = *(unsigned char *)(v3 + v4);
          uint64_t v19 = (uint64_t)&v25[v21 + 1];
          if (v18 != (char *)v20)
          {
            uint64_t v27 = &v18[~v20];
            do
            {
              char v28 = *--v18;
              (v27--)[(void)v25] = v28;
            }
            while (v18 != (char *)v20);
            __int16 v18 = (char *)__p;
            int v26 = v25;
          }
          *(void *)&long long __p = v26;
          *((void *)&__p + 1) = &v25[v21 + 1];
          BOOL v38 = &v25[v24];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          **((unsigned char **)&__p + 1) = *(unsigned char *)(v3 + v4);
          uint64_t v19 = (uint64_t)(v18 + 1);
        }
        *((void *)&__p + 1) = v19;
        uint64_t v3 = a1[6];
        BOOL v5 = *(unsigned char *)(v3 + v4++) == 126;
      }
      while (a1[7] - v3 > v4);
    }
    uint64_t v29 = *(void *)(v1 + 704);
    if (v29)
    {
      sub_1012132F4(v29, __p, *((void *)&__p + 1) - __p, (void *)(v1 + 136));
    }
    else if ((*(unsigned char *)(v1 + 136 + *(void *)(*(void *)(v1 + 136) - 24) + 32) & 5) != 0 || !*(void *)(v1 + 264))
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      uint64_t v34 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEFAULT))
      {
        long long v35 = (void *)(v1 + 8);
        if (*(char *)(v1 + 31) < 0) {
          long long v35 = (void *)*v35;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        int v40 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,append,bad stream", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)_block_invoke", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
    }
    else
    {
      std::ostream::write();
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    int v30 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v31 = (void *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0) {
        BOOL v31 = (void *)*v31;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v40 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,#p%{public}s,append dropped since closed", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      double v32 = (void *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0) {
        double v32 = (void *)*v32;
      }
      LODWORD(__p) = 136446210;
      *(void *)((char *)&__p + 4) = v32;
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)_block_invoke", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
}

void sub_10008AADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008AB10(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_1001D7FD4();
    }
    BOOL v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    unint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void *sub_10008ABCC(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_1001D7FD4();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_100169918(v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  size_t v12 = (unsigned char *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v15 = a3 - __src;
    if (v15) {
      uint64_t result = memmove(v9, __src, v15);
    }
    int32x4_t v14 = &v9[v15];
    goto LABEL_20;
  }
  __int16 v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v12 - v9);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v13) {
    uint64_t result = memmove(v9, v13, a3 - v13);
  }
  int32x4_t v14 = &v9[a3 - v13];
LABEL_20:
  v7[1] = v14;
  return result;
}

id sub_10008ACE0(uint64_t a1, int a2, void *a3)
{
  id result = sub_1000EAAC4(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10008AD30(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102323530);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBeaconFenceAuthorizationManager::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102323530);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      size_t v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBeaconFenceAuthorizationManager::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10008AF0C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008AEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008AF0C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  switch(*a3)
  {
    case 0:
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      int v6 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        LODWORD(v22[0]) = 0;
        WORD2(v22[0]) = 2082;
        *(void *)((char *)v22 + 6) = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"iB: Reset authorization by toggling beacon fences\"}", buf, 0x12u);
      }
      sub_1013BED60(a1);
    case 1:
      sub_1000A84C8(a4);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      uint64_t v9 = (uint64_t *)(a4 + 104);
      uint64_t v10 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a4 + 127) >= 0) {
          uint64_t v11 = a4 + 104;
        }
        else {
          uint64_t v11 = *(void *)(a4 + 104);
        }
        *(_DWORD *)uint64_t buf = 136380675;
        v22[0] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iB: Received uninstall for bundle,%{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102323550);
        }
        if (*(char *)(a4 + 127) >= 0) {
          uint64_t v14 = a4 + 104;
        }
        else {
          uint64_t v14 = *(void *)(a4 + 104);
        }
        *(_DWORD *)long long __p = 136380675;
        *(void *)&__p[4] = v14;
        size_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      sub_1013BE8A4(a1, v9);
    case 2:
      sub_1000A7FBC(a4, (uint64_t)__p);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      uint64_t v7 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v8 = __p;
        if (v20 < 0) {
          unint64_t v8 = *(unsigned char **)__p;
        }
        *(_DWORD *)uint64_t buf = 136380675;
        v22[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Received authorization for bundle,%{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102323550);
        }
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      sub_10008B550(a1, (uint64_t *)__p);
    case 4:
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102323550);
      }
      size_t v12 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        int v13 = *(_DWORD *)(a4 + 188);
        *(_DWORD *)uint64_t buf = 67240192;
        LODWORD(v22[0]) = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "iB: Received location services status,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102323550);
        }
        int v16 = *(_DWORD *)(a4 + 188);
        *(_DWORD *)long long __p = 67240192;
        *(_DWORD *)&__p[4] = v16;
        char v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      if (*(_DWORD *)(a4 + 188) == 1) {
        sub_1013BE4A4(a1, 1);
      }
      else {
        sub_1013BE698(a1, 1);
      }
      break;
    default:
      return;
  }
}

void sub_10008B528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008B550(uint64_t a1, uint64_t *a2)
{
  v2[0] = (uint64_t)v2;
  v2[1] = (uint64_t)v2;
  void v2[2] = 0;
  sub_100133310(a1 + 128, a2, v2);
}

void sub_10008BE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,char a32,void *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  sub_10013415C(&a55);
  sub_10013415C(&a48);
  _Unwind_Resume(a1);
}

void sub_10008BF3C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      size_t v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10008F4E0(*(void *)(a4 + 40), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008C108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008C128(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F75C0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceAuthorizationManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F75C0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      size_t v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceAuthorizationManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10008C304(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008C2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008C304(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(void *)(a1 + 112)) {
      goto LABEL_166;
    }
    unint64_t v4 = (uint8_t *)&qword_102419000;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F75E0);
    }
    BOOL v5 = (uint8_t *)&qword_102419000;
    uint64_t v10 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "onClientNotification";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F75E0);
      }
      LODWORD(v59) = 136446210;
      *(void *)((char *)&v59 + 4) = "onClientNotification";
      unint64_t v4 = buf;
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    if (*(void *)(a1 + 112))
    {
LABEL_166:
      sub_1000A7FBC(a4, (uint64_t)v53);
      switch(*a3)
      {
        case 0:
          if (!*(void *)(a1 + 112))
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            char v11 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)uint64_t buf = 136446210;
              *(void *)&uint8_t buf[4] = "kNotificationReset";
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F75E0);
              }
              LODWORD(v59) = 136446210;
              *(void *)((char *)&v59 + 4) = "kNotificationReset";
              BOOL v41 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v41);
              if (v41 != (char *)buf) {
                free(v41);
              }
            }
            if (!*(void *)(a1 + 112))
            {
              sub_101A8DDC8(buf);
              goto LABEL_116;
            }
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F75E0);
          }
          size_t v12 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Reset received; sending reset notification",
              buf,
              2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            LOWORD(v59) = 0;
            long long v35 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v35);
            if (v35 != (char *)buf) {
              free(v35);
            }
          }
          if (*(void *)(a1 + 176)) {
            [*(id *)(a1 + 192) setObject:0 forKeyedSubscript:];
          }
          *(_DWORD *)uint64_t buf = 2;
          (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
          goto LABEL_103;
        case 1:
          if (!*(void *)(a1 + 112))
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            unint64_t v4 = (uint8_t *)&qword_102419000;
            unint64_t v23 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)uint64_t buf = 136446210;
              *(void *)&uint8_t buf[4] = "kNotificationUninstallation";
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F75E0);
              }
              LODWORD(v59) = 136446210;
              *(void *)((char *)&v59 + 4) = "kNotificationUninstallation";
              double v42 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v42);
              if (v42 != (char *)buf) {
                free(v42);
              }
            }
            if (!*(void *)(a1 + 112))
            {
              sub_101A8E080(buf);
              goto LABEL_116;
            }
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F75E0);
          }
          size_t v24 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            sub_1000A84C8(a4);
            uint64_t v25 = a4 + 104;
            if (*(char *)(a4 + 127) < 0) {
              uint64_t v25 = *(void *)(a4 + 104);
            }
            *(_DWORD *)uint64_t buf = 136446210;
            *(void *)&uint8_t buf[4] = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Removing fences for uninstalled app %{public}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            sub_1000A84C8(a4);
            uint64_t v38 = a4 + 104;
            if (*(char *)(a4 + 127) < 0) {
              uint64_t v38 = *(void *)(a4 + 104);
            }
            LODWORD(v59) = 136446210;
            *(void *)((char *)&v59 + 4) = v38;
            char v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v39);
            if (v39 != (char *)buf) {
              free(v39);
            }
          }
          sub_1000A84C8(a4);
          sub_100DA7430(a1, a4 + 104);
          sub_100DA6AAC(a1, (long long *)v53, 0);
          goto LABEL_103;
        case 2:
          uint64_t v17 = *(void *)(a1 + 112);
          if (v17) {
            goto LABEL_40;
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F75E0);
          }
          unint64_t v4 = (uint8_t *)&qword_102419000;
          __int16 v18 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 136446210;
            *(void *)&uint8_t buf[4] = "kNotificationAuthorization";
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            LODWORD(v59) = 136446210;
            *(void *)((char *)&v59 + 4) = "kNotificationAuthorization";
            int v40 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v40);
            if (v40 != (char *)buf) {
              free(v40);
            }
          }
          uint64_t v17 = *(void *)(a1 + 112);
          if (v17)
          {
LABEL_40:
            memset(v52, 0, sizeof(v52));
            sub_100131C3C(v17, (uint64_t)v53, v52);
          }
          sub_101A8DF24(buf);
          goto LABEL_116;
        case 4:
          unint64_t v4 = (uint8_t *)&qword_102419000;
          if (*(void *)(a1 + 112)) {
            goto LABEL_80;
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F75E0);
          }
          int v26 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 136446210;
            *(void *)&uint8_t buf[4] = "kNotificationLocationServicesStatus";
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            LODWORD(v59) = 136446210;
            *(void *)((char *)&v59 + 4) = "kNotificationLocationServicesStatus";
            BOOL v5 = buf;
            uint64_t v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v43);
            if (v43 != (char *)buf) {
              free(v43);
            }
          }
          if (*(void *)(a1 + 112))
          {
LABEL_80:
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            uint64_t v27 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              if (*(_DWORD *)(a4 + 188) == 1) {
                char v28 = "enabled";
              }
              else {
                char v28 = "disabled";
              }
              *(_DWORD *)uint64_t buf = 136446210;
              *(void *)&uint8_t buf[4] = v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Location services is now %{public}s; sending enable/disable notification",
                buf,
                0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F75E0);
              }
              if (*(_DWORD *)(a4 + 188) == 1) {
                uint64_t v36 = "enabled";
              }
              else {
                uint64_t v36 = "disabled";
              }
              LODWORD(v59) = 136446210;
              *(void *)((char *)&v59 + 4) = v36;
              int v37 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v37);
              if (v37 != (char *)buf) {
                free(v37);
              }
            }
            if (*(void *)(a1 + 176)) {
              [*(id *)(a1 + 192) setObject:0 forKeyedSubscript:];
            }
            __int16 __p = 256;
            memset(buf, 0, sizeof(buf));
            if (*(_DWORD *)(a4 + 188) != 1)
            {
              HIBYTE(__p) = 0;
              sub_10095416C(*(void *)(a1 + 112));
            }
            LODWORD(v59) = 3;
            (*(void (**)(uint64_t, long long *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v59, buf, 1, 0xFFFFFFFFLL, 0);
            sub_100DA5C14(a1);
            *(void *)&long long v59 = buf;
            uint64_t v33 = (void ***)&v59;
            goto LABEL_102;
          }
          sub_101A8DC6C(buf);
LABEL_116:
          abort_report_np();
          break;
        default:
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F75E0);
          }
          uint64_t v29 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            int v30 = *a3;
            *(_DWORD *)uint64_t buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown client notification %{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F75E0);
            }
            int v31 = *a3;
            LODWORD(v59) = 67240192;
            DWORD1(v59) = v31;
            double v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v32);
            if (v32 != (char *)buf) {
              free(v32);
            }
          }
          goto LABEL_103;
      }
    }
    else
    {
      sub_101A8DAF4();
    }
    __break(1u);
    dispatch_once(&qword_1024193C0, &stru_1022F75E0);
    uint64_t v19 = *((void *)v5 + 121);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      char v20 = v53;
      if (v54 < 0) {
        char v20 = (void **)v53[0];
      }
      *(_DWORD *)uint64_t buf = 134349314;
      *(void *)&uint8_t buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)&v59 + 1) - v59) >> 3);
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: Removing denied fences,%{public}lu, for bundle,%{public}s.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((void *)v4 + 120) != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F75E0);
      }
      BOOL v44 = v53;
      if (v54 < 0) {
        BOOL v44 = (void **)v53[0];
      }
      int v55 = 134349314;
      unint64_t v56 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)&v59 + 1) - v59) >> 3);
      __int16 v57 = 2082;
      int v58 = v44;
      BOOL v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    if (v49[0] != v6) {
      sub_100954544(*(void *)(a1 + 112), (uint64_t *)(v49[0] + 32));
    }
    *(_DWORD *)uint64_t buf = 1;
    (*(void (**)(uint64_t, uint8_t *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v59, 0, 0xFFFFFFFFLL, 0);
    sub_100DA6AAC(a1, (long long *)v53, 0);
    if (v51 != v50)
    {
      if (*((void *)v4 + 120) != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F75E0);
      }
      uint64_t v21 = *((void *)v5 + 121);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v22 = v53;
        if (v54 < 0) {
          uint64_t v22 = (void **)v53[0];
        }
        *(_DWORD *)uint64_t buf = 134349314;
        *(void *)&uint8_t buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((v51 - v50) >> 3);
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Fence: Adding authorized fences,%{public}lu, for bundle,%{public}s.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (*((void *)v4 + 120) != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F75E0);
        }
        int v46 = v53;
        if (v54 < 0) {
          int v46 = (void **)v53[0];
        }
        int v55 = 134349314;
        unint64_t v56 = 0xEF7BDEF7BDEF7BDFLL * ((v51 - v50) >> 3);
        __int16 v57 = 2082;
        int v58 = v46;
        int v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
      *(_DWORD *)uint64_t buf = 0;
      (*(void (**)(uint64_t, uint8_t *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v50, 0, 0xFFFFFFFFLL, 0);
      sub_100DA6AAC(a1, (long long *)v53, 1);
    }
    sub_100DB0390((uint64_t)v48, (void *)v48[1]);
    sub_100DB0390((uint64_t)v49, (void *)v49[1]);
    *(void *)uint64_t buf = &v50;
    sub_10008DF5C((void ***)buf);
    *(void *)uint64_t buf = &v59;
    sub_10008DF5C((void ***)buf);
    *(void *)uint64_t buf = v52;
    uint64_t v33 = (void ***)buf;
LABEL_102:
    sub_10008DF5C(v33);
LABEL_103:
    if (v54 < 0)
    {
      __int16 v16 = v53[0];
      goto LABEL_105;
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F75E0);
    }
    int v13 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int8 *)(a1 + 136);
      sub_1000A7FBC(a4, (uint64_t)&v59);
      size_t v15 = v60 >= 0 ? &v59 : (long long *)v59;
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 1026;
      *(_DWORD *)&buf[20] = v14;
      __int16 __p = 2082;
      __p_2 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Ignoring notification\", \"WasUnlockedSinceBoot\":%{public}hhd, \"client\":%{public, location:escape_only}s}", buf, 0x22u);
      if (v60 < 0)
      {
        __int16 v16 = (void *)v59;
LABEL_105:
        operator delete(v16);
      }
    }
  }
}

void sub_10008DE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44)
{
  a44 = &a19;
  sub_10008DF5C((void ***)&a44);
  a44 = (char *)&a36;
  sub_10008DF5C((void ***)&a44);
  a44 = &a23;
  sub_10008DF5C((void ***)&a44);
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10008DF5C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 248;
        sub_10091F570((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10008DFF4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE870);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCachedLocationController::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      size_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCachedLocationController::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10008E1D0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008E1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E1D0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    size_t v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a4 + 188);
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v26) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLC: Received Location Services status %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      int v22 = *(_DWORD *)(a4 + 188);
      LODWORD(v27[0]) = 67240192;
      HIDWORD(v27[0]) = v22;
      unint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    if (*(_DWORD *)(a4 + 188) == 1)
    {
      sub_10088E41C(a1, 1);
    }
    else
    {
      sub_10088E0E0(a1, 1);
      [*(id *)(a1 + 544) clearLocationData];
      sub_10103E8E8(a1 + 568);
    }
  }
  else if (*a3 == 2)
  {
    sub_1000A7FBC(a4, (uint64_t)v27);
    if ((v28 & 0x80u) == 0) {
      size_t v6 = v28;
    }
    else {
      size_t v6 = (size_t)v27[1];
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v7 = v27;
    }
    else {
      uint64_t v7 = (void **)v27[0];
    }
    if (byte_10247E70F >= 0) {
      size_t v8 = byte_10247E70F;
    }
    else {
      size_t v8 = unk_10247E700;
    }
    if (byte_10247E70F >= 0) {
      uint64_t v9 = &qword_10247E6F8;
    }
    else {
      uint64_t v9 = (uint64_t *)qword_10247E6F8;
    }
    if (v8 >= v6) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = v8;
    }
    if (!memcmp(v7, v9, v10) && v8 == v6)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      size_t v12 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10247E70F >= 0) {
          int v13 = &qword_10247E6F8;
        }
        else {
          int v13 = (uint64_t *)qword_10247E6F8;
        }
        *(_DWORD *)uint64_t buf = 136380675;
        int v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLC: Recevied kNotificationAuthorization for %{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022CE8C8);
        }
        size_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      if ((v28 & 0x80u) == 0) {
        __int16 v14 = v27;
      }
      else {
        __int16 v14 = (void **)v27[0];
      }
      if ([*(id *)(a1 + 792) syncgetAuthorizationContextIfClientIsNonZonal:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14)].isAuthorizedForServiceTypeMask:16)sub_10088E41C(a1, 2); {
      else
      }
        sub_10088E0E0(a1, 2);
    }
    if ((char)v28 < 0) {
      operator delete(v27[0]);
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    __int16 v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v26) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Warning CLC: Received unknown notification, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      int v20 = *a3;
      LODWORD(v27[0]) = 67240192;
      HIDWORD(v27[0]) = v20;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

void sub_10008E75C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E784(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102308358);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    size_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102308358);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      size_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10008E960(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008E940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E960(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  if (*a3 == 4)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
    uint64_t v9 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v22 = 2082;
      *(void *)&v22[2] = "";
      __int16 v23 = 2082;
      size_t v24 = "ClientManager";
      __int16 v25 = 2082;
      int v26 = "Location services toggled";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    BOOL v10 = sub_1001198CC() == 1;
    sub_100310DB8(a1 + 584, v10);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
    char v11 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Updating Significant Locations from Location Services Toggle", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419450 == -1) {
      goto LABEL_51;
    }
    goto LABEL_53;
  }
  if (v5 == 2)
  {
    if (!*(unsigned char *)(a4 + 97)) {
      return;
    }
    if (_os_feature_enabled_impl()) {
      sub_1000A8320(a4, (uint64_t)buf);
    }
    else {
      sub_1000A7FBC(a4, (uint64_t)buf);
    }
    if (SBYTE3(v24) < 0)
    {
      __int16 v16 = *(void **)buf;
      if (*(void *)v22 != 73)
      {
        operator delete(*(void **)buf);
        return;
      }
      int v17 = memcmp(*(const void **)buf, "com.apple.locationd.bundle-/System/Library/LocationBundles/Routine.bundle", 0x49uLL);
      operator delete(v16);
      if (v17) {
        return;
      }
    }
    else if (SBYTE3(v24) != 73 {
           || memcmp(buf, "com.apple.locationd.bundle-/System/Library/LocationBundles/Routine.bundle", 0x49uLL))
    }
    {
      return;
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
    __int16 v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v22 = 2082;
      *(void *)&v22[2] = "";
      __int16 v23 = 2082;
      size_t v24 = "ClientManager";
      __int16 v25 = 2082;
      int v26 = "Authorization";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_102308378);
      }
    }
    uint64_t v19 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Updating Significant Locations from Auth Changed Notification", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419450 == -1)
    {
LABEL_51:
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
      return;
    }
LABEL_53:
    dispatch_once(&qword_102419450, &stru_102308378);
    goto LABEL_51;
  }
  if (!v5)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
    size_t v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v22 = 2082;
      *(void *)&v22[2] = "";
      __int16 v23 = 2082;
      size_t v24 = "ClientManager";
      __int16 v25 = 2082;
      int v26 = "Privacy reset";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_100311188(a1 + 584);
    sub_100FBCBB8(a1);
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLClientManager"];
    if (byte_1024827D7 >= 0) {
      size_t v8 = &qword_1024827C0;
    }
    else {
      size_t v8 = (uint64_t *)qword_1024827C0;
    }
    [v7 resetNotificationConsumedForIdentifier:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8)];
    return;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_102308378);
  }
  __int16 v14 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Unhandled manager notification %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 == -1) {
      goto LABEL_51;
    }
    goto LABEL_53;
  }
}

void sub_10008F078(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C26C8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    id v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C26C8);
    }
    size_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      __int16 v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_10008F24C(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008F22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10008F24C(id result, uint64_t a2, int *a3)
{
  if (*a3 <= 4 && ((1 << *a3) & 0x15) != 0)
  {
    id v5 = result;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C26A8);
    }
    uint64_t v6 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received an authorization notification %{public}d. Checking bundle permissions.", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C26A8);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateMediator::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    size_t v8 = (void *)*((void *)v5 + 1288);
    uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle"];
    *(void *)uint64_t buf = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    __int16 v15 = sub_1000367CC;
    __int16 v16 = &unk_1022C2590;
    id v17 = v5;
    id result = [v8 getAuthorizationContextOfNonZonalClient:v9 withReply:buf];
    if (!*a3)
    {
      id v10 = [objc_msgSend(*((id *)v5 + 4), "vendor") proxyForService:@"CLClientManager"];
      if (byte_10247C9B7 >= 0) {
        char v11 = &qword_10247C9A0;
      }
      else {
        char v11 = (uint64_t *)qword_10247C9A0;
      }
      return [v10 resetNotificationConsumedForIdentifier:[NSString stringWithUTF8String:v11]];
    }
  }
  return result;
}

void sub_10008F4E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  ++*(_DWORD *)(a1 + 360);
  switch(a3)
  {
    case 4:
      uint64_t v8 = qword_10247B350;
      uint64_t v9 = qword_10247B358;
      while (v8 != v9)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 56))(*(void *)(a1 + 48), v8);
        v8 += 24;
      }
      if (*(_DWORD *)(a4 + 188) != 1)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022BABA0);
        }
        __int16 v15 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          __int16 __p = (void *)68289026;
          __int16 v22 = 2082;
          __int16 v23 = "";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"location services disabled, clearing all local cache\"}", (uint8_t *)&__p, 0x12u);
        }
        sub_10054C634(a1);
      }
      break;
    case 2:
      if (*(unsigned char *)(a4 + 97))
      {
        sub_1000A7FBC(a4, (uint64_t)v19);
        if (sub_1000A7C40(qword_10247B350, qword_10247B358, (unsigned __int8 **)v19) == qword_10247B358)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022BABA0);
          }
          id v17 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            __int16 v18 = v19;
            if (v20 < 0) {
              __int16 v18 = (void **)v19[0];
            }
            __int16 __p = (void *)68289282;
            __int16 v22 = 2082;
            __int16 v23 = "";
            __int16 v24 = 2082;
            __int16 v25 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onManagerNotification: auth changed received for SS not used in harvesting. skip auth caching.\", \"SystemService\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
          }
        }
        else
        {
          uint64_t v10 = *(void *)(a1 + 48);
          sub_1000A7FBC(a4, (uint64_t)&__p);
          (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, &__p);
          if (SBYTE3(v25) < 0) {
            operator delete(__p);
          }
        }
        if (v20 < 0)
        {
          uint64_t v14 = v19[0];
          goto LABEL_40;
        }
      }
      else
      {
        __int16 v16 = *(void (**)(void))(*(void *)a1 + 40);
        v16();
      }
      break;
    case 0:
      uint64_t v6 = qword_10247B350;
      uint64_t v7 = qword_10247B358;
      while (v6 != v7)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 56))(*(void *)(a1 + 48), v6);
        v6 += 24;
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      char v11 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        __int16 __p = (void *)68289026;
        __int16 v22 = 2082;
        __int16 v23 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"location services reset, clearing all local cache\"}", (uint8_t *)&__p, 0x12u);
      }
      id v12 = [objc_msgSend(*(id *)(a1 + 40), "vendor", sub_10054C634(a1)) proxyForService:@"CLClientManager"];
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 48) + 416))(&__p);
      __int16 v13 = SBYTE3(v25) >= 0 ? &__p : (void **)__p;
      [v12 resetNotificationConsumedForIdentifier:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)];
      if (SBYTE3(v25) < 0)
      {
        uint64_t v14 = __p;
LABEL_40:
        operator delete(v14);
      }
      break;
  }
}

void sub_10008F948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008F998(uint64_t a1, void *a2, void *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138478083;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v17 = 2113;
    __int16 v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onCellInfoChanged context %{private}@, info %{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v12 = 138478083;
    __int16 v13 = a2;
    __int16 v14 = 2113;
    __int16 v15 = a3;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCellInfoChanged(CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v9);
    if (v9 != buf) {
      free(v9);
    }
  }
  sub_100090AA4(a1, a2);
  if (sub_10009103C(a2))
  {
    sub_100090650((id *)&v12, a3);
    int v11 = sub_100090424((uint64_t)[a2 slotID]);
    *(void *)uint64_t buf = &v11;
    uint64_t v7 = sub_1000FF948(a1 + 368, &v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_100100090((id *)v7 + 3, (id *)&v12);
    sub_1001005F8(&v12);
    [*(id *)(a1 + 112) sendNotificationToClients:@"kCellInfoNotification" notificationData:sub_10009156C(a1 + 368)];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,isCellInfoValid failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v12) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onCellInfoChanged(CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
  }
}

void sub_10008FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001005F8(va);
  _Unwind_Resume(a1);
}

void sub_10008FD48(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  [*(id *)(v6 + 104) silo];
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MNC failed,replacing with -1", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_WORD *)__int16 v24 = 0;
    goto LABEL_51;
  }
  if (!a2 || ![(__CFString *)a2 length])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MNC returned nil,replacing with -1", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_WORD *)__int16 v24 = 0;
    goto LABEL_51;
  }
  if ((unint64_t)[(__CFString *)a2 length] < 4) {
    goto LABEL_27;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,queryServingMccAndMnc,MNC is too many digits,replacing with -1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_WORD *)__int16 v24 = 0;
LABEL_51:
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
LABEL_26:
  a2 = @"-1";
LABEL_27:
  if (sub_100090CB0(*(void **)(a1 + 32), *(void **)(a1 + 40), a2))
  {
    uint64_t v10 = a2;
    sub_10009046C((uint64_t)buf, *(void **)(a1 + 40), a2);
    int v23 = sub_100090424((uint64_t)[*(id *)(a1 + 32) slotID]);
    *(void *)__int16 v24 = &v23;
    int v11 = sub_1000D22E4(v6 + 328, &v23, (uint64_t)&unk_101D0B290, (_DWORD **)v24);
    *(void *)((char *)v11 + 20) = *(void *)buf;
    *((unsigned char *)v11 + 28) = buf[8];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = [*(id *)(a1 + 40) UTF8String];
      id v15 = [(__CFString *)a2 UTF8String];
      *(_DWORD *)uint64_t buf = 138478339;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v30 = 2082;
      id v31 = v14;
      __int16 v32 = 2082;
      id v33 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#ctcl,queryServingMccAndMnc,context,%{private}@,mcc,%{public}s,mnc,%{public}s", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = [*(id *)(a1 + 40) UTF8String];
      id v19 = [(__CFString *)a2 UTF8String];
      *(_DWORD *)__int16 v24 = 138478339;
      *(void *)&v24[4] = v17;
      __int16 v25 = 2082;
      id v26 = v18;
      __int16 v27 = 2082;
      id v28 = v19;
      char v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    [*(id *)(v6 + 112) sendNotificationToClients:@"kServingMccAndMncNotification" notificationData:sub_1000913C8(v6 + 328)];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,MCC and MNC invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      *(_WORD *)__int16 v24 = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
  }
}

uint64_t sub_100090424(uint64_t a1)
{
  char v2 = sub_1000FFBA8();
  if ((unint64_t)(a1 - 1) <= 1) {
    unsigned int v3 = a1 != 1;
  }
  else {
    unsigned int v3 = 255;
  }
  if (a1 == 1) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = 255;
  }
  if (v2) {
    return v3;
  }
  else {
    return v4;
  }
}

uint64_t sub_10009046C(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = -1;
  *(unsigned char *)(a1 + 8) = 0;
  if (a2 && a3)
  {
    *(_DWORD *)a1 = [a2 integerValue];
    *(_DWORD *)(a1 + 4) = [a3 integerValue];
    if ([a3 length] == (id)3) {
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v5 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTMccAndMnc, mcc or mnc is nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMccAndMnc::CLCTMccAndMnc(NSString *, NSString *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return a1;
}

id *sub_100090650(id *a1, void *a2)
{
  *a1 = 0;
  if (!a2)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTCellInfo, cellInfo is null", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return a1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CTCellInfo *)", "%s\n", v8);
LABEL_30:
    if (v8 != (char *)buf) {
      free(v8);
    }
    return a1;
  }
  id v3 = [a2 legacyInfo];
  *a1 = v3;
  if (v3)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    unsigned int v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*a1 count];
      *(_DWORD *)uint64_t buf = 134217984;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clct,CLCTCellInfo, cellList size,%lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      [*a1 count];
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CTCellInfo *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    id v6 = *a1;
    return a1;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  uint64_t v9 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#clct,CLCTCellInfo, cellList size,0", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CTCellInfo *)", "%s\n", v8);
    goto LABEL_30;
  }
  return a1;
}

void sub_100090A7C(_Unwind_Exception *a1)
{
  sub_1001005C0(v1);
  _Unwind_Resume(a1);
}

id sub_100090AA4(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unsigned int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    id v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryServingMccAndMnc,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = 138477827;
    int v11 = a2;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  id v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100060CF0;
  v9[3] = &unk_1022D5210;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 copyMobileCountryCode:a2 completion:v9];
}

uint64_t sub_100090CB0(void *a1, void *a2, void *a3)
{
  if (a1 && a2 && a3 && [a2 length] && objc_msgSend(a3, "length"))
  {
    if ((char *)[a1 slotID] - 1 < (char *)2) {
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    uint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v13) = [a1 slotID];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,areMccAndMncValid,invalidSlot,%d", buf, 8u);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102320810);
      }
      [a1 slotID];
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::areMccAndMncValid(CTXPCServiceSubscriptionContext *, NSString *, NSString *)", "%s\n", v11);
      if (v11 == (char *)buf) {
        return 0;
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218496;
      id v13 = a1;
      __int16 v14 = 2048;
      id v15 = a2;
      __int16 v16 = 2048;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,areMccAndMncValid,invalid,context,%p,mccString,%p,mncString,%p", buf, 0x20u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102320810);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::areMccAndMncValid(CTXPCServiceSubscriptionContext *, NSString *, NSString *)", "%s\n", v11);
      if (v11 == (char *)buf) {
        return 0;
      }
LABEL_26:
      free(v11);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009103C(void *a1)
{
  if (!a1)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    id v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,cellInfo,invalid,context,%p", buf, 0xCu);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isCellInfoValid(const CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return 0;
    }
LABEL_12:
    free(v5);
    return 0;
  }
  if ((char *)[a1 slotID] - 1 < (char *)2) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102320810);
  }
  id v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v9) = [a1 slotID];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,cellInfo,invalidSlot,%d", buf, 8u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102320810);
    }
    [a1 slotID];
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isCellInfoValid(const CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return 0;
    }
    goto LABEL_12;
  }
  return result;
}

id sub_1000913C8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  BOOL v7 = &v6;
  id v3 = (unsigned int *)sub_1000D22E4(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_1000914A8(v3 + 5) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    BOOL v7 = &v6;
    BOOL v4 = (unsigned int *)sub_1000D22E4(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_1000914A8(v4 + 5) forKey:@"kSlotTwo"];
  }
  return v2;
}

NSDictionary *sub_1000914A8(unsigned int *a1)
{
  v3[0] = @"kMccKey";
  v4[0] = +[NSNumber numberWithInt:*a1];
  v3[1] = @"kMncKey";
  v4[1] = +[NSNumber numberWithInt:a1[1]];
  void v3[2] = @"kIs3DigitMnc";
  void v4[2] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 8)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

id sub_10009156C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = 0;
  BOOL v7 = &v6;
  id v3 = sub_1000FF948(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
  [v2 setObject:sub_10009164C((NSNull **)v3 + 3) forKey:@"kSlotOne"];
  if (sub_1000FFBA8())
  {
    int v6 = 1;
    BOOL v7 = &v6;
    BOOL v4 = sub_1000FF948(a1, &v6, (uint64_t)&unk_101D0B290, &v7);
    [v2 setObject:sub_10009164C((NSNull **)v4 + 3) forKey:@"kSlotTwo"];
  }
  return v2;
}

NSDictionary *sub_10009164C(NSNull **a1)
{
  CFStringRef v3 = @"kCellRefreshNotification";
  uint64_t v1 = *a1;
  if (!v1) {
    uint64_t v1 = +[NSNull null];
  }
  BOOL v4 = v1;
  return +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
}

uint64_t sub_1000916D0(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(a1 + 52))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248D2B8 + 32);
    }
    wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizes((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8), 2, 3, a2);
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248D2B8 + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, v8);
  }
  return result;
}

uint64_t sub_100091770(uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
      if ((*(_DWORD *)(v5 + 44) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v7 = *(void *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_100091818(uint64_t a1, unsigned int a2, const std::string *a3, uint64_t a4, double a5, double a6, double a7)
{
  unsigned int v167 = a2;
  if (a2)
  {
    sub_101AAAB68();
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  double v13 = a7;
  double v14 = a6;
  double v15 = a5;
  uint64_t v8 = a1;
  sub_10014F674((uint64_t)&v164, &v167);
  std::string __str = &v166;
  std::string::operator=(&v166, a3);
  long long v18 = *(_OWORD *)(a4 + 16);
  long long v161 = *(_OWORD *)a4;
  long long v162 = v18;
  uint64_t v163 = *(void *)(a4 + 32);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 224))(v8);
  uint64_t v9 = v19;
  uint64_t v7 = __p;
  if (!*(unsigned char *)v19)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    BOOL v44 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v45 = v167;
      int v46 = sub_100147F50(v167);
      *(_DWORD *)uint64_t buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v45;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, type, %d, %s, not active", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      unsigned int v47 = v167;
      double v48 = sub_100147F50(v167);
      *(_DWORD *)double v171 = 67109378;
      *(_DWORD *)&v171[4] = v47;
      *(_WORD *)&v171[8] = 2080;
      *(void *)&v171[10] = v48;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v49);
      if (v49 != buf) {
        free(v49);
      }
    }
    goto LABEL_265;
  }
  sub_100146674((uint64_t)&v164, -1, v15, v14, *(double *)(v19 + 152), *(double *)(v19 + 160));
  if (!sub_1001447B8((unsigned int *)&v164))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    uint64_t v50 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_100C094CC((uint64_t)&v164);
      uint64_t v51 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)double v171 = 136380675;
      *(void *)&v171[4] = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "WIFITILE: requestDownload, invalid tile ID: %{private}s, #CloneMe", v171, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_91;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    sub_100C094CC((uint64_t)&v164);
    if (v171[23] >= 0) {
      __int16 v52 = v171;
    }
    else {
      __int16 v52 = *(unsigned char **)v171;
    }
    *(_DWORD *)__int16 __p = 136380675;
    *(void *)&__p[4] = v52;
    int v53 = (char *)_os_log_send_and_compose_impl();
    if ((v171[23] & 0x80000000) != 0) {
      operator delete(*(void **)v171);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v53);
    if (v53 == buf) {
      goto LABEL_91;
    }
LABEL_272:
    free(v53);
LABEL_91:
    uint64_t v56 = 0;
    goto LABEL_266;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  char v20 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    double v21 = sub_10013DAC0((uint64_t)&v164);
    double v22 = sub_10013DA9C((uint64_t)&v164);
    *(_DWORD *)uint64_t buf = 134284033;
    *(double *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2049;
    uint64_t v7 = __p;
    *(double *)&buf[14] = v22;
    *(_WORD *)&unsigned char buf[22] = 1026;
    *(_DWORD *)&uint8_t buf[24] = v161;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "@TileDl, wifi, request, llsw, %{private}.2lf, %{private}.2lf, currOverCell, %{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    double v57 = sub_10013DAC0((uint64_t)&v164);
    double v58 = sub_10013DA9C((uint64_t)&v164);
    *(_DWORD *)double v171 = 134284033;
    *(double *)&v171[4] = v57;
    *(_WORD *)&v171[12] = 2049;
    uint64_t v7 = __p;
    *(double *)&v171[14] = v58;
    *(_WORD *)&v171[22] = 1026;
    LODWORD(v172.__r_.__value_.__l.__data_) = v161;
    LODWORD(v138) = 28;
    BOOL v10 = buf;
    long long v59 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v59);
    if (v59 != buf) {
      free(v59);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  int v23 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = buf;
    sub_1010496AC();
    __int16 v24 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)double v171 = 136446210;
    *(void *)&v171[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TileDl, wifi, %{public}s", v171, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t v25 = sub_10013D1A0(115, 2);
  if (v25)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    BOOL v10 = v171;
    sub_1010496AC();
    if (v171[23] >= 0) {
      char v60 = v171;
    }
    else {
      char v60 = *(unsigned char **)v171;
    }
    *(_DWORD *)__int16 __p = 136446210;
    *(void *)&__p[4] = v60;
    LODWORD(v138) = 12;
    uint64_t v61 = (char *)_os_log_send_and_compose_impl();
    if ((v171[23] & 0x80000000) != 0) {
      operator delete(*(void **)v171);
    }
    uint64_t v25 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v61);
    if (v61 != buf) {
      free(v61);
    }
  }
  uint64_t v157 = v8;
  if (!*(unsigned char *)(v8 + 217))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    char v54 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v55 = *(unsigned __int8 *)(v157 + 216);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_91;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    int v128 = *(unsigned __int8 *)(v157 + 216);
    *(_DWORD *)double v171 = 67109120;
    *(_DWORD *)&v171[4] = v128;
    int v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v53);
    if (v53 == buf) {
      goto LABEL_91;
    }
    goto LABEL_272;
  }
  if (*(unsigned char *)(v9 + 176))
  {
    sub_101AAAA10(v25, v26, v27, v28, v29, v30, v31, v32, v137, v138, v139, v140, v141, v143, v146, v147, v148, v149, v150,
      v151,
      v153,
      v154,
      v155,
      v156);
    abort_report_np();
    goto LABEL_107;
  }
  LODWORD(v10) = *(_DWORD *)(v8 + 408);
  uint64_t v155 = v8 + 128;
  int v11 = sub_100144248(v8 + 128, (uint64_t)&v164);
  uint64_t v156 = v9 + 184;
  BOOL v12 = sub_10013D858(v9 + 184, (unsigned int *)&v164);
  if (qword_102419630 != -1) {
LABEL_108:
  }
    dispatch_once(&qword_102419630, &stru_10231AE10);
  uint64_t v152 = (void *)(v8 + 136);
  id v33 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100C094CC((uint64_t)&v164);
    uint64_t v34 = v171[23] >= 0 ? v171 : *(unsigned char **)v171;
    *(_DWORD *)uint64_t buf = 136316162;
    *(void *)&uint8_t buf[4] = v34;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v152 != v11;
    *(_WORD *)&uint8_t buf[24] = 1024;
    uint64_t v7 = __p;
    *(_DWORD *)&buf[26] = 0;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&unsigned char buf[32] = v12;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d", buf, 0x24u);
    if ((v171[23] & 0x80000000) != 0) {
      operator delete(*(void **)v171);
    }
  }
  if (!sub_10013D1A0(115, 2))
  {
    if (v12) {
      goto LABEL_29;
    }
LABEL_119:
    if (v152 != v11)
    {
      uint64_t v64 = v11[10];
      uint64_t v65 = (unsigned char *)(v64 + 112);
      BOOL v39 = *(unsigned __int8 *)(v64 + 114) != BYTE2(v161)
         || *v65 != v161
         || *(unsigned __int8 *)(v64 + 113) != BYTE1(v161);
      if (*(unsigned char *)(v64 + 114)) {
        BYTE2(v161) = 1;
      }
      if (*v65) {
        LOBYTE(v161) = 1;
      }
      if (*(unsigned char *)(v64 + 113)) {
        BYTE1(v161) = 1;
      }
      long long v66 = v162;
      *(_OWORD *)uint64_t v65 = v161;
      *(_OWORD *)(v64 + 128) = v66;
      *(_WORD *)(v64 + 144) = v163;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      unint64_t v67 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v64 + 16))(v171, v64);
        int v68 = v171[23];
        unsigned int v69 = *(unsigned char **)v171;
        sub_1010496AC();
        uint64_t v70 = v171;
        if (v68 < 0) {
          uint64_t v70 = v69;
        }
        if (v170[1] >= 0) {
          uint64_t v71 = __p;
        }
        else {
          uint64_t v71 = *(unsigned char **)__p;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v70;
        *(_WORD *)&unsigned char buf[12] = 2080;
        uint64_t v7 = __p;
        *(void *)&buf[14] = v71;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v39;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileid, %s, will be downloaded, details, %s, updated, %d", buf, 0x1Cu);
        if ((v170[1] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v8 = v157;
        if ((v171[23] & 0x80000000) != 0) {
          operator delete(*(void **)v171);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v64 + 16))(__p, v64);
        int v72 = v170[1];
        int v73 = *(unsigned char **)__p;
        sub_1010496AC();
        uint64_t v74 = __p;
        if (v72 < 0) {
          uint64_t v74 = v73;
        }
        if (v174 >= 0) {
          uint64_t v75 = v173;
        }
        else {
          uint64_t v75 = (void **)v173[0];
        }
        *(_DWORD *)double v171 = 136315650;
        *(void *)&v171[4] = v74;
        *(_WORD *)&v171[12] = 2080;
        uint64_t v7 = __p;
        *(void *)&v171[14] = v75;
        *(_WORD *)&v171[22] = 1024;
        LODWORD(v172.__r_.__value_.__l.__data_) = v39;
        int v76 = (char *)_os_log_send_and_compose_impl();
        if (v174 < 0) {
          operator delete(v173[0]);
        }
        if ((v170[1] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v76);
        if (v76 != buf) {
          free(v76);
        }
        uint64_t v8 = v157;
      }
      goto LABEL_177;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    double v77 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_1010496AC();
      double v78 = v171[23] >= 0 ? v171 : *(unsigned char **)v171;
      *(_DWORD *)uint64_t buf = 134218498;
      *(double *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2048;
      uint64_t v7 = __p;
      *(double *)&buf[14] = v14;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&uint8_t buf[24] = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s", buf, 0x20u);
      if ((v171[23] & 0x80000000) != 0) {
        operator delete(*(void **)v171);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_167;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    sub_1010496AC();
    if (v170[1] >= 0) {
      long long v136 = __p;
    }
    else {
      long long v136 = *(unsigned char **)__p;
    }
    *(_DWORD *)double v171 = 134218498;
    *(double *)&v171[4] = v15;
    *(_WORD *)&v171[12] = 2048;
    uint64_t v7 = __p;
    *(double *)&v171[14] = v14;
    *(_WORD *)&v171[22] = 2080;
    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)v136;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    if ((v170[1] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_299;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  sub_100C094CC((uint64_t)&v164);
  if (v170[1] >= 0) {
    int v62 = __p;
  }
  else {
    int v62 = *(unsigned char **)__p;
  }
  *(_DWORD *)double v171 = 136316162;
  *(void *)&v171[4] = v62;
  *(_WORD *)&v171[12] = 1024;
  *(_DWORD *)&v171[14] = v12;
  *(_WORD *)&v171[18] = 1024;
  *(_DWORD *)&v171[20] = v152 != v11;
  LOWORD(v172.__r_.__value_.__l.__data_) = 1024;
  uint64_t v7 = __p;
  *(_DWORD *)&v172.__r_.__value_.__s.__data_[2] = 0;
  HIWORD(v172.__r_.__value_.__r.__words[0]) = 1024;
  LODWORD(v172.__r_.__value_.__r.__words[1]) = v12;
  BOOL v63 = (char *)_os_log_send_and_compose_impl();
  if ((v170[1] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v63);
  if (v63 != buf) {
    free(v63);
  }
  uint64_t v8 = v157;
  if (!v12) {
    goto LABEL_119;
  }
LABEL_29:
  uint64_t v35 = sub_100144000(v156, (unsigned int *)&v164);
  BOOL v36 = sub_100065380(v35, (int)v10 > 1, *(float *)(v9 + 128), v13);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  int v37 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v35 + 16))(v171, v35);
    uint64_t v38 = v171[23] >= 0 ? v171 : *(unsigned char **)v171;
    *(_DWORD *)uint64_t buf = 136315906;
    *(void *)&uint8_t buf[4] = v38;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = BYTE1(v163);
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v36;
    *(_WORD *)&uint8_t buf[24] = 1024;
    uint64_t v7 = __p;
    *(_DWORD *)&buf[26] = v152 != v11;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d", buf, 0x1Eu);
    if ((v171[23] & 0x80000000) != 0) {
      operator delete(*(void **)v171);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v35 + 16))(__p, v35);
    if (v170[1] >= 0) {
      unint64_t v129 = __p;
    }
    else {
      unint64_t v129 = *(unsigned char **)__p;
    }
    *(_DWORD *)double v171 = 136315906;
    *(void *)&v171[4] = v129;
    *(_WORD *)&v171[12] = 1024;
    *(_DWORD *)&v171[14] = BYTE1(v163);
    *(_WORD *)&v171[18] = 1024;
    *(_DWORD *)&v171[20] = v36;
    LOWORD(v172.__r_.__value_.__l.__data_) = 1024;
    uint64_t v7 = __p;
    *(_DWORD *)&v172.__r_.__value_.__s.__data_[2] = v152 != v11;
    uint64_t v130 = (char *)_os_log_send_and_compose_impl();
    if ((v170[1] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v130);
    if (v130 != buf) {
      free(v130);
    }
    uint64_t v8 = v157;
  }
  if (BYTE1(v163)) {
    sub_10127D338(v8, v35, buf, v13);
  }
  LOBYTE(v39) = 0;
  if (!v36 || v152 != v11) {
    goto LABEL_177;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  int v40 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v35 + 16))(buf, v35);
    BOOL v41 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)double v171 = 136315138;
    *(void *)(v7 + 52) = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, refresh download, %s", v171, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v35 + 16))(v171, v35);
    if (v171[23] >= 0) {
      double v42 = v171;
    }
    else {
      double v42 = *(unsigned char **)v171;
    }
    *(_DWORD *)__int16 __p = 136315138;
    *(void *)&__p[4] = v42;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    if ((v171[23] & 0x80000000) != 0) {
      operator delete(*(void **)v171);
    }
LABEL_299:
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v43);
    if (v43 != buf) {
      free(v43);
    }
    uint64_t v8 = v157;
  }
LABEL_167:
  sub_10125C090(*(_DWORD *)(v9 + 4), __p);
  uint64_t v79 = *(void *)__p;
  *(void *)__int16 __p = 0;
  uint64_t v160 = v79;
  sub_10127A4D8(v8, &v160, (uint64_t)&v164, &v161);
  uint64_t v80 = v160;
  uint64_t v160 = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  uint64_t v81 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    double v82 = sub_10013DAC0((uint64_t)&v164);
    double v83 = sub_10013DA9C((uint64_t)&v164);
    uint64_t v84 = *(void *)(v8 + 144);
    *(_DWORD *)uint64_t buf = 134284033;
    *(double *)&uint8_t buf[4] = v82;
    *(_WORD *)&unsigned char buf[12] = 2049;
    uint64_t v7 = __p;
    *(double *)&buf[14] = v83;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)&uint8_t buf[24] = v84;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    double v132 = sub_10013DAC0((uint64_t)&v164);
    double v133 = sub_10013DA9C((uint64_t)&v164);
    std::string::size_type v134 = *(void *)(v157 + 144);
    *(_DWORD *)double v171 = 134284033;
    *(double *)&v171[4] = v132;
    *(_WORD *)&v171[12] = 2049;
    uint64_t v7 = __p;
    *(double *)&v171[14] = v133;
    *(_WORD *)&v171[22] = 2050;
    v172.__r_.__value_.__r.__words[0] = v134;
    long long v135 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v135);
    if (v135 != buf) {
      free(v135);
    }
    uint64_t v8 = v157;
  }
  uint64_t v85 = *(void *)__p;
  *(void *)__int16 __p = 0;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  LOBYTE(v39) = 1;
LABEL_177:
  *(_OWORD *)double v171 = v164;
  *(void *)&v171[16] = v165;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v172, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  }
  else {
    std::string v172 = *__str;
  }
  char v86 = v39;
  LOWORD(v161) = 0;
  BYTE2(v161) = 0;
  if ((v162 & 0x80000000) == 0)
  {
    unsigned int v87 = -(int)v162;
    int v144 = (2 * v162) | 1;
    int v145 = -(int)v162;
    int v142 = v162;
    do
    {
      int v88 = v144;
      unsigned int v89 = v145;
      do
      {
        if (v89 | v87)
        {
          *(_OWORD *)double v171 = v164;
          *(void *)&v171[16] = v165;
          std::string::operator=(&v172, __str);
          double v90 = *(double *)(v9 + 160);
          float32_t v91 = *(double *)(v9 + 152);
          *(float *)&double v90 = v90;
          sub_100143FCC((uint64_t)v171, v87, v89, v91, *(float32x2_t *)&v90);
          if (sub_1001447B8((unsigned int *)v171))
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10231AE10);
            }
            long long v92 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              int v93 = *(_DWORD *)&v171[8];
              int v94 = *(_DWORD *)&v171[4];
              sub_100C094CC((uint64_t)v171);
              double v95 = __p;
              if (v170[1] < 0) {
                double v95 = *(unsigned char **)__p;
              }
              *(_DWORD *)uint64_t buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v87;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v89;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v93;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&unsigned char buf[22] = v94;
              *(_WORD *)&buf[26] = 2080;
              uint64_t v7 = __p;
              *(void *)&unsigned char buf[28] = v95;
              _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
              if ((v170[1] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              uint64_t v8 = v157;
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231AE10);
              }
              int v110 = *(_DWORD *)&v171[8];
              int v111 = *(_DWORD *)&v171[4];
              sub_100C094CC((uint64_t)v171);
              double v112 = v173;
              if (v174 < 0) {
                double v112 = (void **)v173[0];
              }
              *(_DWORD *)__int16 __p = 67110146;
              *(_DWORD *)&__p[4] = v87;
              *(_WORD *)&__p[8] = 1024;
              *(_DWORD *)&__p[10] = v89;
              LOWORD(v169) = 1024;
              *(_DWORD *)((char *)&v169 + 2) = v110;
              HIWORD(v169) = 1024;
              *(_DWORD *)unsigned __int8 v170 = v111;
              *(_WORD *)&v170[4] = 2080;
              uint64_t v7 = __p;
              *(void *)&v170[6] = v112;
              double v113 = (char *)_os_log_send_and_compose_impl();
              if (v174 < 0) {
                operator delete(v173[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v113);
              uint64_t v8 = v157;
              if (v113 != buf) {
                free(v113);
              }
            }
            double v96 = sub_100144248(v155, (uint64_t)v171);
            BOOL v97 = sub_10013D858(v156, (unsigned int *)v171);
            if (*(unsigned char *)(v8 + 216)) {
              char v98 = 1;
            }
            else {
              char v98 = v97;
            }
            if ((v98 & 1) == 0 && v152 == v96)
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231AE10);
              }
              double v99 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                sub_100C094CC((uint64_t)v171);
                int v100 = buf;
                if (buf[23] < 0) {
                  int v100 = *(unsigned char **)buf;
                }
                *(_DWORD *)__int16 __p = 136315138;
                *(void *)&__p[4] = v100;
                _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, adding neighbour, %s", __p, 0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10231AE10);
                }
                sub_100C094CC((uint64_t)v171);
                uint64_t v118 = __p;
                if (v170[1] < 0) {
                  uint64_t v118 = *(unsigned char **)__p;
                }
                LODWORD(v173[0]) = 136315138;
                *(void *)(v7 + 100) = v118;
                int v119 = (char *)_os_log_send_and_compose_impl();
                if ((v170[1] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v119);
                if (v119 != buf) {
                  free(v119);
                }
              }
              sub_10125C090(*(_DWORD *)(v9 + 4), &v159);
              sub_10127A4D8(v8, &v159, (uint64_t)v171, &v161);
              uint64_t v101 = v159;
              uint64_t v159 = 0;
              if (v101) {
                (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
              }
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_10231ADF0);
              }
              uint64_t v102 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
              {
                double v103 = sub_10013DAC0((uint64_t)v171);
                double v104 = sub_10013DA9C((uint64_t)v171);
                uint64_t v105 = *(void *)(v8 + 144);
                *(_DWORD *)uint64_t buf = 134284033;
                *(double *)&uint8_t buf[4] = v103;
                *(_WORD *)&unsigned char buf[12] = 2049;
                uint64_t v7 = __p;
                *(double *)&buf[14] = v104;
                *(_WORD *)&unsigned char buf[22] = 2050;
                *(void *)&uint8_t buf[24] = v105;
                _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", buf, 0x20u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_10231ADF0);
                }
                double v120 = sub_10013DAC0((uint64_t)v171);
                double v121 = sub_10013DA9C((uint64_t)v171);
                uint64_t v122 = *(void *)(v8 + 144);
                *(_DWORD *)__int16 __p = 134284033;
                *(double *)&__p[4] = v120;
                *(_WORD *)&unsigned char __p[12] = 2049;
                double v169 = v121;
                *(_WORD *)unsigned __int8 v170 = 2050;
                *(void *)&v170[2] = v122;
                int v123 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v123);
                if (v123 != buf) {
                  free(v123);
                }
              }
              char v86 = 1;
            }
          }
          else
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10231AE10);
            }
            uint64_t v106 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              int v107 = *(_DWORD *)&v171[8];
              int v108 = *(_DWORD *)&v171[4];
              sub_100C094CC((uint64_t)v171);
              uint64_t v109 = __p;
              if (v170[1] < 0) {
                uint64_t v109 = *(unsigned char **)__p;
              }
              *(_DWORD *)uint64_t buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v87;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v89;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v107;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&unsigned char buf[22] = v108;
              *(_WORD *)&buf[26] = 2080;
              uint64_t v7 = __p;
              *(void *)&unsigned char buf[28] = v109;
              _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
              if ((v170[1] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              uint64_t v8 = v157;
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231AE10);
              }
              int v114 = *(_DWORD *)&v171[8];
              int v115 = *(_DWORD *)&v171[4];
              sub_100C094CC((uint64_t)v171);
              uint64_t v116 = v173;
              if (v174 < 0) {
                uint64_t v116 = (void **)v173[0];
              }
              *(_DWORD *)__int16 __p = 67110146;
              *(_DWORD *)&__p[4] = v87;
              *(_WORD *)&__p[8] = 1024;
              *(_DWORD *)&__p[10] = v89;
              LOWORD(v169) = 1024;
              *(_DWORD *)((char *)&v169 + 2) = v114;
              HIWORD(v169) = 1024;
              *(_DWORD *)unsigned __int8 v170 = v115;
              *(_WORD *)&v170[4] = 2080;
              uint64_t v7 = __p;
              *(void *)&v170[6] = v116;
              uint64_t v117 = (char *)_os_log_send_and_compose_impl();
              if (v174 < 0) {
                operator delete(v173[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v117);
              uint64_t v8 = v157;
              if (v117 != buf) {
                free(v117);
              }
            }
          }
        }
        ++v89;
        --v88;
      }
      while (v88);
    }
    while (v87++ != v142);
  }
  if (v86)
  {
    int v125 = (*(uint64_t (**)(void))(**(void **)(v157 + 448) + 80))(*(void *)(v157 + 448));
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    unint64_t v126 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v125;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "@TileSched, wifi, set, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      *(_DWORD *)__int16 __p = 67240192;
      *(_DWORD *)&__p[4] = v125;
      int v131 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v131);
      if (v131 != buf) {
        free(v131);
      }
    }
    sub_1000209E0(v157, 0, v13);
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v172.__r_.__value_.__l.__data_);
  }
LABEL_265:
  uint64_t v56 = 1;
LABEL_266:
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  return v56;
}

void sub_100093B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000940B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  sub_1000DB0A0(v14);
  _Unwind_Resume(a1);
}

void sub_1000956DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18) {
    sub_1000DB0A0(a18);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (v74) {
    sub_1000DB0A0(v74);
  }
  _Unwind_Resume(a1);
}

void sub_100095870(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10113D074(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_100095F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1000DAF68(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000962A4(void *a1)
{
  unint64_t v2 = a1[4];
  CFStringRef v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    sub_1000DB0A0(v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;

  return sub_100096314((uint64_t)a1, 1);
}

uint64_t sub_100096314(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_100096374(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    int v11 = 0;
    BOOL v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    unint64_t v8 = (void *)(*(void *)v7 + 16 * v4);
    unint64_t v9 = a2[5] + v4;
    BOOL v10 = (char *)(v5 + 8 * (v9 >> 8));
    int v11 = (void *)(*(void *)v10 + 16 * v9);
  }
  sub_100096418((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100096404(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_100096418(void *a1, char *a2, void *a3, char *a4, void *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_10009644C(a1, a2, a3, v5);
}

void *sub_10009644C(void *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10009659C(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  double v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 16 * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  uint64_t result = sub_1000D9B0C((uint64_t)v22, a4);
  if (v14 != v16)
  {
    do
    {
      if (v13 == result) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = *v13 + 4096;
      }
      if (v14 == v17)
      {
        uint64_t v17 = v14;
      }
      else
      {
        long long v18 = (void *)v14;
        do
        {
          *long long v18 = *a3;
          uint64_t v19 = a3[1];
          v18[1] = v19;
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
          a3 += 2;
          if ((void *)((char *)a3 - *a2) == (void *)4096)
          {
            char v20 = (void *)a2[1];
            ++a2;
            a3 = v20;
          }
          v18 += 2;
        }
        while (v18 != (void *)v17);
      }
      a1[5] += (v17 - v14) >> 4;
      if (v13 == result) {
        break;
      }
      uint64_t v21 = v13[1];
      ++v13;
      uint64_t v14 = v21;
    }
    while (v21 != v16);
  }
  return result;
}

void sub_10009659C(void *a1, unint64_t a2)
{
  CFStringRef v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          CFStringRef v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            CFStringRef v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          int v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            CFStringRef v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            CFStringRef v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          CFStringRef v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)CFStringRef v3 = v18;
      CFStringRef v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 255;
          }
          else {
            uint64_t v64 = 256;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          unint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              double v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              unsigned int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              double v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      float32_t v91 = a1 + 3;
      if (v13) {
        double v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        double v15 = 0;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        BOOL v39 = (void *)a1[1];
        int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                char v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)char v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                int v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              unsigned int v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                int v40 = (char *)__p[1];
              }
              unsigned int v47 = &v40[-8 * (v44 >> 1)];
              int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)int v40 = *v39;
          int v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          BOOL v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      double v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      long long v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_100096AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100096B30(uint64_t a1, __n128 a2)
{
  unint64_t v2 = *(void **)(a1 + 16);
  CFStringRef v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    a2.n128_u64[0] = 68289282;
    __n128 v13 = a2;
    do
    {
      uint64_t v5 = v2[4];
      unint64_t v6 = (std::__shared_weak_count *)v2[5];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v7 = (void *)(v5 + 72);
      if (*(char *)(v5 + 95) < 0) {
        unint64_t v7 = (void *)*v7;
      }
      id v8 = sub_100103E24(*(void *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7, *(_OWORD *)&v13)));
      if (sub_100096D2C(a1, (uint64_t)v8))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        unint64_t v9 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = v13.n128_u32[0];
          int v15 = 0;
          __int16 v16 = 2082;
          uint64_t v17 = "";
          __int16 v18 = 2114;
          id v19 = v8;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_100103838(*(void *)(a1 + 8), (uint64_t)v8, 1, 0);
      }
      if (v6) {
        sub_1000DB0A0(v6);
      }
      uint64_t v10 = (void *)v2[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v2[2];
          BOOL v12 = *v11 == (void)v2;
          unint64_t v2 = v11;
        }
        while (!v12);
      }
      unint64_t v2 = v11;
    }
    while (v11 != v3);
  }
}

void sub_100096D14(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

id sub_100096D2C(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 8) + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v3 isValidCKP]) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 136);
  sub_100096DF8(__p);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  id v6 = [v4 hasValueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5) atKeyPath:v3];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_100096DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100096DF8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, off_10241BC98);
}

void sub_100096E0C(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  char v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)uint64_t v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int64_t v26 = v10;
    __int16 v27 = 2050;
    unint64_t v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  unint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      uint64_t v17 = (uint64_t *)v12;
    }
    else {
      uint64_t v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      unint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    unint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    __int16 v18 = (uint64_t *)operator new(0x158uLL);
    v18[1] = 0;
    v18[2] = 0;
    *__int16 v18 = (uint64_t)off_10232E7B8;
    memcpy(v18 + 3, a3, 0x140uLL);
    id v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  id v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10002F2B0();
  }
  os_activity_scope_leave(&state);
}

void sub_1000973F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100097444(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      char v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          char v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        sub_10009797C(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            id v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                id v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              unint64_t v48 = v19;
              sub_100097834(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  uint64_t v32 = (uint64_t *)v27;
                }
                else {
                  uint64_t v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    BOOL v39 = (uint64_t *)v36;
                  }
                  else {
                    BOOL v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      uint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      uint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              unint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232E520);
              }
              uint64_t v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232E520);
                }
                unsigned int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  unsigned int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                unsigned int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100097834(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    unint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32);
    sub_10009797C(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80;
    uint64_t v12 = (uint64_t **)(*(void *)a3 + 40);
    int v15 = (int *)(*(void *)a2 + 32);
    uint64_t v13 = sub_1000EB1B8(v12, v15, (uint64_t)&unk_101D0B290, &v15);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v14];
    }
  }
  return result;
}

void sub_10009792C(uint64_t a1, int a2, void *a3)
{
  sub_10009797C(a3);
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0, &v6, v5, *(void *)(a1 + 32));
  }
}

void sub_10009797C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_10158B930(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_100097A18(a1);
    }
  }
}

id sub_100097A18(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232E7F8);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E11023 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStepCountNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232E7F8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E11023 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10232E7F8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void *sub_100097DD8(void *a1, const void *a2)
{
  memcpy(__dst, a2, sizeof(__dst));
  uint64_t v3 = a1[55];
  if (v3) {
    (*(void (**)(uint64_t, double *))(*(void *)v3 + 48))(v3, __dst);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
    unint64_t v5 = v4 + a1[6] - 1;
    int v6 = (void **)a1[3];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 1) & 0x7FFFFFFFFFFFFFF8)))[40 * (v5 & 0xF)];
    if (v7 > __dst[0])
    {
      uint64_t v8 = a1[4];
      a1[7] = 0;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          uint64_t v10 = a1[4];
          int v6 = (void **)(a1[3] + 8);
          a1[3] = v6;
          unint64_t v9 = v10 - (void)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 8;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022C2688);
          }
          unint64_t v12 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 134218240;
            double v21 = __dst[0];
            __int16 v22 = 2048;
            double v23 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_1022C2688);
            }
            int v16 = 134218240;
            double v17 = __dst[0];
            __int16 v18 = 2048;
            double v19 = v7;
            uint64_t v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLExtendedStepCountEntry>::add(const T &) [T = CLExtendedStepCountEntry]", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
          goto LABEL_17;
        }
        uint64_t v11 = 16;
      }
      a1[6] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1000980A4(a1 + 2, __dst);
  return memcpy(a1 + 12, __dst, 0x140uLL);
}

void *sub_1000980A4(void *a1, void *__src)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10017DB00(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t result = memcpy((void *)(*(void *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (v7 & 0xF)), __src, 0x140uLL);
  ++a1[5];
  return result;
}

uint64_t sub_10009813C(void *a1)
{
  uint64_t v1 = a1[2];
  id v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_100098164(uint64_t *a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      uint64_t v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[39];
    uint64_t v8 = a2[26];
    int v9 = *((_DWORD *)a2 + 54);
    uint64_t v11 = a2[29];
    uint64_t v10 = a2[30];
    uint64_t v12 = a2[28];
    *(_DWORD *)uint64_t buf = 136316930;
    int v15 = v5;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v8;
    __int16 v24 = 1024;
    int v25 = v9;
    __int16 v26 = 2048;
    uint64_t v27 = v10;
    __int16 v28 = 2048;
    uint64_t v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ExtendedStep,context,%s,startTime,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f,incrementalActiveTime,%f", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logExtendedStep(const CLOutdoorExtendedStep &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

id sub_1000983E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStepCountNotification:a2 data:a3];
}

id sub_1000983F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStepCountNotification:a2 data:a3];
}

id sub_100098404(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStepCountNotification:a2 data:a3];
}

id sub_100098414(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStepCountNotification:a2 data:a3];
}

void sub_100098424(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  if (a2 == "ADDED")
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v6 = [[(id)(id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsagePage")] intValue];
      unsigned int v7 = [[(id)(id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsage") intValue];
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      uint64_t v8 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240448;
        unsigned int v17 = v6;
        __int16 v18 = 1026;
        unsigned int v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%{public}d, %{public}d} just became available.", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRegistration(void *, IOHIDServiceClientRef)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    int v9 = *(uint64_t **)(a1 + 8);
    for (uint64_t i = *(uint64_t **)(a1 + 16); v9 != i; v9 += 2)
    {
      uint64_t v11 = (std::__shared_weak_count *)v9[1];
      if (v11)
      {
        uint64_t v12 = *v9;
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = std::__shared_weak_count::lock(v11);
        if (v13)
        {
          uint64_t v14 = v13;
          if (v12 && (sub_100098750(v12, a3) & 1) != 0)
          {
            sub_1000689E4(v12, a3, 1);
            if (*(void *)(v12 + 80)) {
              IOHIDServiceClientRegisterRemovalCallback();
            }
          }
          sub_1000DB0A0(v14);
        }
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_10009872C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100098750(uint64_t a1, IOHIDServiceClientRef service)
{
  uint64_t result = IOHIDServiceClientConformsTo(service, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 16));
  if (result)
  {
    uint64_t v5 = *(void **)(a1 + 152);
    return sub_1001B13A0(service, v5);
  }
  return result;
}

uint64_t sub_1000987A8(uint64_t a1)
{
  unint64_t TimeStamp = IOHIDEventGetTimeStamp();
  double v3 = sub_1000D3D90(TimeStamp);
  IOHIDEventGetDoubleValue();
  double v5 = v4;
  IOHIDEventGetDoubleValue();
  double v7 = v6;
  IOHIDEventGetDoubleValue();
  int v9 = sub_100098858(v5, v7, v8);

  return sub_10016C08C(a1, v9, v3);
}

uint64_t sub_100098858(double a1, double a2, double a3)
{
  if (a2 >= 4.0)
  {
    if (a3 < a2 && a2 < 100.0 && a3 < a1)
    {
      uint64_t v6 = 1;
    }
    else
    {
      double v9 = a1 * 0.8;
      if (a2 >= 200.0 || v9 > a3)
      {
        if (a2 >= 1000.0 || v9 <= a3)
        {
          if (a2 >= 30000.0 || v9 <= a3)
          {
            if (a2 >= 10000.0) {
              uint64_t v6 = 6;
            }
            else {
              uint64_t v6 = 5;
            }
          }
          else
          {
            uint64_t v6 = 4;
          }
        }
        else
        {
          uint64_t v6 = 3;
        }
      }
      else
      {
        uint64_t v6 = 2;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F0428);
  }
  uint64_t v10 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349824;
    double v16 = a1;
    __int16 v17 = 2050;
    double v18 = a2;
    __int16 v19 = 2050;
    double v20 = a3;
    __int16 v21 = 1026;
    int v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "AmbientLight,DecisionTree,x,%{public}f,y,%{public}f,z,%{public}f,out,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F0428);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAmbientLightDecisionTreeOutput CLAmbientLightDecisionTree::decisionTree(const double, const double, const double) const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return v6;
}

void sub_100098B10(std::string *this@<X2>, void *a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char v10 = std::string::compare(this, "Location in use on paired watch by 3rd party app") == 0;
  sub_10009AFB0(&v14, a2);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string __p = *this;
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  sub_100098C1C(a5, &v14, (long long *)v12, (long long *)&__p, a4, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (v15) {
    sub_1000DB0A0(v15);
  }
}

void sub_100098BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A88A70((uint64_t)&a16, (uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t *sub_100098C1C(uint64_t *a1, uint64_t *a2, long long *a3, long long *a4, int a5, char a6)
{
  long long v8 = *a3;
  a1[2] = *((void *)a3 + 2);
  *(_OWORD *)a1 = v8;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v9 = *a4;
  a1[5] = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 3) = v9;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *((_DWORD *)a1 + 12) = a5;
  uint64_t v10 = *a2;
  a1[7] = *a2;
  uint64_t v11 = a2[1];
  a1[8] = v11;
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
    uint64_t v10 = *a2;
  }
  uint64_t v12 = a1 + 3;
  *((unsigned char *)a1 + 72) = a6;
  if (!v10)
  {
LABEL_12:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EFDD0);
    }
    uint64_t v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      BOOL v15 = *a2 != 0;
      double v16 = a1;
      if (*((char *)a1 + 23) < 0) {
        double v16 = (uint64_t *)*a1;
      }
      __int16 v17 = a1 + 3;
      if (*((char *)a1 + 47) < 0) {
        __int16 v17 = (uint64_t *)*v12;
      }
      *(_DWORD *)uint64_t buf = 68290307;
      int v27 = 0;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 1026;
      BOOL v31 = v15;
      __int16 v32 = 2082;
      uint64_t v33 = v16;
      __int16 v34 = 2082;
      uint64_t v35 = v17;
      __int16 v36 = 2082;
      int v37 = "assert";
      __int16 v38 = 2081;
      BOOL v39 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Required parameter missing\", \"logic\":%{public}hhd, \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x40u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    double v18 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      BOOL v19 = *a2 != 0;
      double v20 = a1;
      if (*((char *)a1 + 23) < 0) {
        double v20 = (uint64_t *)*a1;
      }
      __int16 v21 = a1 + 3;
      if (*((char *)a1 + 47) < 0) {
        __int16 v21 = (uint64_t *)*v12;
      }
      *(_DWORD *)uint64_t buf = 68290307;
      int v27 = 0;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 1026;
      BOOL v31 = v19;
      __int16 v32 = 2082;
      uint64_t v33 = v20;
      __int16 v34 = 2082;
      uint64_t v35 = v21;
      __int16 v36 = 2082;
      int v37 = "assert";
      __int16 v38 = 2081;
      BOOL v39 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Required parameter missing", "{\"msg%{public}.0s\":\"#CLIUA Required parameter missing\", \"logic\":%{public}hhd, \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x40u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    int v22 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      BOOL v23 = *a2 != 0;
      __int16 v24 = a1;
      if (*((char *)a1 + 23) < 0) {
        __int16 v24 = (uint64_t *)*a1;
      }
      int v25 = a1 + 3;
      if (*((char *)a1 + 47) < 0) {
        int v25 = (uint64_t *)*v12;
      }
      *(_DWORD *)uint64_t buf = 68290307;
      int v27 = 0;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 1026;
      BOOL v31 = v23;
      __int16 v32 = 2082;
      uint64_t v33 = v24;
      __int16 v34 = 2082;
      uint64_t v35 = v25;
      __int16 v36 = 2082;
      int v37 = "assert";
      __int16 v38 = 2081;
      BOOL v39 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Required parameter missing\", \"logic\":%{public}hhd, \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x40u);
    }
    abort_report_np();
    __break(1u);
  }
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      goto LABEL_12;
    }
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_12;
  }
  if (*((char *)a1 + 47) < 0)
  {
    if (!a1[4]) {
      goto LABEL_12;
    }
  }
  else if (!*((unsigned char *)a1 + 47))
  {
    goto LABEL_12;
  }
  sub_100099040(v10, (unsigned __int8 *)a1, a1 + 3, *((_DWORD *)a1 + 12), 1);
  return a1;
}

void sub_100099014(_Unwind_Exception *a1)
{
  double v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_101A8886C(v1, v2);
  _Unwind_Resume(a1);
}

void sub_100099040(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int a4, int a5)
{
  if (a4 - 6 <= 0xFFFFFFFA) {
    sub_101A888AC();
  }
  [objc_msgSend(*(id *)(a1 + 72), "silo") assertInside];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v12 = (uint64_t *)a2;
    }
    else {
      uint64_t v12 = *(uint64_t **)a2;
    }
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = (uint64_t *)*a3;
    }
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    double v20 = "";
    __int16 v21 = 2082;
    int v22 = v12;
    __int16 v23 = 2082;
    __int16 v24 = v13;
    __int16 v25 = 2050;
    uint64_t v26 = a4;
    __int16 v27 = 1026;
    int v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA Marking change\", \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"coming\":%{public}hhd}", buf, 0x36u);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  int v14[2] = sub_1000995B0;
  _DWORD v14[3] = &unk_1022EFDB0;
  char v16 = a5;
  unsigned int v15 = a4;
  sub_100099204(a1, a2, v11, (uint64_t)v14);
}

void sub_100099204(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  double v7 = (void *)(a1 + 16);
  *(void *)uint64_t buf = a2;
  long long v8 = sub_100099618(a1 + 16, a2, (uint64_t)&unk_101D0B290, (long long **)buf) + 40;
  uint64_t v9 = &dword_100000014;
  while (v9 != -4)
  {
    uint64_t v10 = *(unsigned int *)((char *)&unk_101D8A3E8 + v9);
    if (v10 >= 6) {
      sub_10000EDDC("array::at");
    }
    v9 -= 4;
    if (*(_DWORD *)&v8[4 * v10]) {
      goto LABEL_7;
    }
  }
  LODWORD(v10) = 0;
LABEL_7:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
  uint64_t v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v12 = (uint64_t *)a2;
    }
    else {
      uint64_t v12 = *(uint64_t **)a2;
    }
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2082;
    __int16 v25 = v12;
    __int16 v26 = 2050;
    uint64_t v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA updating AssertionRecord\", \"ClientKey\":%{public, location:escape_only}s, \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x26u);
  }
  (*(void (**)(uint64_t, unsigned __int8 *))(a4 + 16))(a4, v8);
  uint64_t v13 = &dword_100000014;
  while (v13 != -4)
  {
    uint64_t v14 = *(unsigned int *)((char *)&unk_101D8A3E8 + v13);
    if (v14 >= 6) {
      sub_10000EDDC("array::at");
    }
    v13 -= 4;
    if (*(_DWORD *)&v8[4 * v14]) {
      goto LABEL_20;
    }
  }
  uint64_t v14 = 0;
LABEL_20:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
  unsigned int v15 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      char v16 = (uint64_t *)a2;
    }
    else {
      char v16 = *(uint64_t **)a2;
    }
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2082;
    __int16 v25 = v16;
    __int16 v26 = 2050;
    uint64_t v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA AssertionRecord updated\", \"ClientKey\":%{public, location:escape_only}s, \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x26u);
  }
  if (!v14) {
    sub_1001052CC(v7, a2);
  }
  if (v14 != v10 && *(void *)(a1 + 56))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EFDD0);
    }
    __int16 v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2[23] & 0x80u) == 0) {
        int v18 = (uint64_t *)a2;
      }
      else {
        int v18 = *(uint64_t **)a2;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      __int16 v23 = "";
      __int16 v24 = 2082;
      __int16 v25 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA in-use level changed for client\", \"ClientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    uint64_t v19 = *(void *)(a1 + 56);
    if ((a2[23] & 0x80u) == 0) {
      double v20 = (uint64_t *)a2;
    }
    else {
      double v20 = *(uint64_t **)a2;
    }
    (*(void (**)(uint64_t, CLClientKeyPath *, uint64_t))(*(void *)v19 + 16))(v19, +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:v20]), v14);
  }
}

uint64_t sub_1000995B0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 32);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 6) {
      sub_10000EDDC("array::at");
    }
    ++*(_DWORD *)(a2 + 4 * v2);
  }
  else
  {
    return sub_100C6479C(a2, v2);
  }
  return result;
}

void sub_100099610(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unsigned __int8 *sub_100099618(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_1000998B0(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  __int16 v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *__int16 v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_10009988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10022251C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1000998B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  void v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100099944(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10022251C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100099960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v5 isValidCKP])
  {
    if (sub_100099A8C(a1, (uint64_t)v5, a3)) {
      [*(id *)(a1 + 136) persist];
    }
    id v6 = [objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5) dictionary];
    id v9 = [v5 legacyClientKey];
    id v10 = v6;
    sub_100105634((uint64_t)+[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1], (uint64_t)"clientStatus");
    sub_100134750(__p, "");
    sub_1001341F0(a1, v5, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100099A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100099A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = sub_100103E24(a1, a2);
  id v6 = *(void **)(a1 + 136);
  if (a3)
  {
    [v6 setInt:a3 forKey:@"InUseLevel" atKeyPath:v5];
    if ((int)a3 >= 3)
    {
      BOOL v7 = 0;
      *(void *)uint64_t buf = 0;
      *(void *)unsigned int v15 = buf;
      *(void *)&_OWORD v15[8] = 0x2020000000;
      v15[16] = 0;
      goto LABEL_13;
    }
  }
  else
  {
    [v6 removeValueForKey:@"InUseLevel" atKeyPath:v5];
  }
  unsigned int v8 = [*(id *)(a1 + 136) hasValueForKey:@"TemporaryAuthorization" atKeyPath:v5];
  char v9 = v8;
  if (v8)
  {
    [*(id *)(a1 + 136) removeValueForKey:@"TemporaryAuthorization" atKeyPath:v5];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unsigned int v15 = 2082;
      *(void *)&_DWORD v15[2] = "";
      *(_WORD *)&v15[10] = 2114;
      *(void *)&v15[12] = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth Client has dropped below in-use-ness threshold, losing WIU status\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  *(void *)uint64_t buf = 0;
  *(void *)unsigned int v15 = buf;
  *(void *)&_OWORD v15[8] = 0x2020000000;
  v15[16] = 0;
  long long v11 = *(void **)(a1 + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007AB578;
  v13[3] = &unk_1022C8EC0;
  v13[4] = buf;
  void v13[5] = a1;
  [v11 iterateIdentitiesRelatedToKeyPath:v5 withBlock:v13];
  BOOL v7 = (v9 & 1) != 0 || *(unsigned char *)(*(void *)v15 + 24) != 0;
LABEL_13:
  _Block_object_dispose(buf, 8);
  return v7;
}

void sub_100099CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100099CC4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 136) isAuthorizedForServiceType:12];
  if (sub_10009AD44((void *)a1, @"powerBudget")) {
    unsigned int v3 = [*(id *)(a1 + 136) isAuthorizedForServiceType:3];
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = v2 ^ 1;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10230E780);
  }
  id v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    int v7 = *(unsigned __int8 *)(a1 + 320);
    v8[0] = 68290050;
    __int16 v9 = 2082;
    v8[1] = 0;
    id v10 = "";
    __int16 v11 = 2114;
    uint64_t v12 = v6;
    __int16 v13 = 1026;
    unsigned int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v7;
    __int16 v17 = 1026;
    int v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Monitoring status\", \"client\":%{public, location:escape_only}@, \"shouldBeRegistered\":%{public}hhd, \"fRegisteredForSLC\":%{public}hhd, \"shouldEngageCorrectiveCompensation\":%{public}hhd}", (uint8_t *)v8, 0x2Eu);
  }
  if (*(unsigned __int8 *)(a1 + 320) != v3 || *(unsigned __int8 *)(a1 + 321) != v4)
  {
    if (v3) {
      sub_1001B03BC((void *)a1, v4);
    }
    sub_1000189FC(a1);
  }
}

void sub_100099E48(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v33, Dictionary);
  BOOL v32 = 0;
  if ((sub_1000D2988((uint64_t)v33, "kCLConnectionMessageSubscribeKey", &v32) & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    __int16 v9 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      std::string __p = (void *)68289026;
      __int16 v35 = 2082;
      __int16 v36 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", (uint8_t *)&__p, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10230E780);
      }
    }
    uint64_t v10 = qword_102419528;
    if (!os_signpost_enabled((os_log_t)qword_102419528)) {
      goto LABEL_40;
    }
    std::string __p = (void *)68289026;
    __int16 v35 = 2082;
    __int16 v36 = "";
    __int16 v11 = "Couldn't get value for kCLConnectionMessageSubscribeKey key";
    uint64_t v12 = "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}";
    __int16 v13 = v10;
    uint32_t v14 = 18;
LABEL_21:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, (uint8_t *)&__p, v14);
    goto LABEL_40;
  }
  if (!+[CLSignificantChangeManagerAdapter isSupported]) {
    goto LABEL_40;
  }
  if (!v32)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    __int16 v15 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 64);
      std::string __p = (void *)68289282;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2114;
      uint64_t v38 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client unsubscribing #SLC\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_1001960EC(a1);
    goto LABEL_39;
  }
  sub_100134750(&__p, "com.apple.locationd.slc_configurer");
  int isEntitled = CLConnectionMessage::isEntitled();
  if (SBYTE3(v38) < 0) {
    operator delete(__p);
  }
  double v31 = 500.0;
  if (((sub_1000A699C((uint64_t)v33, "kCLConnectionMessageSLCDistanceKey", &v31) ^ 1 | isEntitled) & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    __int16 v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v18 = *(void *)(a1 + 64);
      std::string __p = (void *)68289282;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2114;
      uint64_t v38 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLC configuration\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10230E780);
      }
    }
    uint64_t v19 = qword_102419528;
    if (!os_signpost_enabled((os_log_t)qword_102419528)) {
      goto LABEL_40;
    }
    goto LABEL_33;
  }
  unsigned int v29 = 0;
  unsigned int v30 = -1;
  if (!sub_10006EF84((uint64_t)v33, "kCLConnectionMessageSLCPowerBudgetKey", &v30))
  {
LABEL_10:
    sub_10009A6F0(a1, @"powerBudget", (uint64_t)+[NSNumber numberWithInt:v29]);
    sub_10009A6F0(a1, @"distanceThreshold", (uint64_t)+[NSNumber numberWithDouble:v31]);
    sub_100134750(&__p, "com.apple.locationd.private_info");
    int v7 = CLConnectionMessage::isEntitled();
    if (SBYTE3(v38) < 0) {
      operator delete(__p);
    }
    *(unsigned char *)(a1 + 306) = v7;
    if (v7) {
      unsigned int v8 = +[NSNumber numberWithBool:1];
    }
    else {
      unsigned int v8 = 0;
    }
    sub_10009A6F0(a1, @"includePrivateData", (uint64_t)v8);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    unint64_t v21 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 64);
      std::string __p = (void *)68289794;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2114;
      uint64_t v38 = v22;
      __int16 v39 = 2050;
      double v40 = v31;
      __int16 v41 = 1026;
      unsigned int v42 = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client subscribing to #SLC\", \"client\":%{public, location:escape_only}@, \"distance\":\"%{public}f\", \"powerBudget\":%{public}d}", (uint8_t *)&__p, 0x2Cu);
    }
LABEL_39:
    sub_100196178(a1);
    sub_100099CC4(a1);
    goto LABEL_40;
  }
  if ((isEntitled & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    __int16 v23 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v24 = *(void *)(a1 + 64);
      std::string __p = (void *)68289282;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2114;
      uint64_t v38 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLC configuration\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10230E780);
      }
    }
    uint64_t v19 = qword_102419528;
    if (!os_signpost_enabled((os_log_t)qword_102419528)) {
      goto LABEL_40;
    }
LABEL_33:
    uint64_t v20 = *(void *)(a1 + 64);
    std::string __p = (void *)68289282;
    __int16 v35 = 2082;
    __int16 v36 = "";
    __int16 v37 = 2114;
    uint64_t v38 = v20;
    __int16 v11 = "Client is not entitled to provide #SLC configuration";
    uint64_t v12 = "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLC configuration\", \"client\":%{public, location:escape_only}@}";
    __int16 v13 = v19;
    uint32_t v14 = 28;
    goto LABEL_21;
  }
  if (sub_100CF25DC(v30, &v29)) {
    goto LABEL_10;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10230E780);
  }
  __int16 v25 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v26 = *(void *)(a1 + 64);
    std::string __p = (void *)68289538;
    __int16 v35 = 2082;
    __int16 v36 = "";
    __int16 v37 = 2114;
    uint64_t v38 = v26;
    __int16 v39 = 1026;
    LODWORD(v40) = v30;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client provided invalid #SLC configuration\", \"client\":%{public, location:escape_only}@, \"desiredPowerBudgetRaw\":%{public}d}", (uint8_t *)&__p, 0x22u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
  }
  uint64_t v27 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v28 = *(void *)(a1 + 64);
    std::string __p = (void *)68289538;
    __int16 v35 = 2082;
    __int16 v36 = "";
    __int16 v37 = 2114;
    uint64_t v38 = v28;
    __int16 v39 = 1026;
    LODWORD(v40) = v30;
    __int16 v11 = "Client provided invalid #SLC configuration";
    uint64_t v12 = "{\"msg%{public}.0s\":\"Client provided invalid #SLC configuration\", \"client\":%{public, location:escape_only"
          "}@, \"desiredPowerBudgetRaw\":%{public}d}";
    __int16 v13 = v27;
    uint32_t v14 = 34;
    goto LABEL_21;
  }
LABEL_40:
  sub_10013F3C4(v33);
}

void sub_10009A688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a13);

  _Unwind_Resume(a1);
}

void sub_10009A6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10009AFF4(a1);
  uint64_t v6 = *(void *)(a1 + 48);
  sub_10009AFB0(&v7, (void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, &v7, a2, a3);
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_10009A77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009A794(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = *a2;
    if (*(char *)(*a2 + 95) < 0)
    {
      sub_1000DC48C(__dst, *(void **)(v8 + 72), *(void *)(v8 + 80));
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)(v8 + 72);
      uint64_t v21 = *(void *)(v8 + 88);
    }
    if (*(char *)(v8 + 119) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(v8 + 96), *(void *)(v8 + 104));
    }
    else
    {
      long long __p = *(_OWORD *)(v8 + 96);
      uint64_t v23 = *(void *)(v8 + 112);
    }
    uint64_t v24 = *(void *)(v8 + 120);
    if (v21 >= 0) {
      uint64_t v10 = __dst;
    }
    else {
      uint64_t v10 = (void **)__dst[0];
    }
    id v11 = sub_100103E24(*(void *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:v10]));
    if (v23 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    __int16 v13 = +[NSString stringWithUTF8String:p_p];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint32_t v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      id v15 = [a3 UTF8String];
      *(_DWORD *)uint64_t buf = 68290051;
      int v27 = 0;
      __int16 v28 = 2082;
      unsigned int v29 = "";
      __int16 v30 = 2114;
      id v31 = v11;
      __int16 v32 = 2114;
      uint64_t v33 = v13;
      __int16 v34 = 2081;
      id v35 = v15;
      __int16 v36 = 2113;
      uint64_t v37 = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#PersistentSubscription PersistenceBackend setObjectForKeyForSubscription\", \"client\":%{public, location:escape_only}@, \"storageName\":%{public, location:escape_only}@, \"storageKey\":%{private, location:escape_only}s, \"storageValue\":%{private, location:escape_only}@}", buf, 0x3Au);
    }
    uint64_t v16 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    uint64_t v19 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10009AB24((uint64_t **)(a1 + 16), (unint64_t *)&v18, &v18);
    if (v19) {
      sub_1000DB0A0(v19);
    }
    __int16 v17 = [NSMutableDictionary dictionaryWithDictionary:objc_msgSend(*(id *)(*(void *)(a1 + 8) + 136), "dictionaryForKey:atKeyPath:defaultValue:", v13, v11, &__NSDictionary0__struct, v18)];
    [(NSMutableDictionary *)v17 setObject:a4 forKeyedSubscript:a3];
    [*(id *)(*(void *)(a1 + 8) + 136) setDictionary:v17 forKey:v13 atKeyPath:v11];
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(__dst[0]);
    }
  }
  else
  {
    __int16 v9 = (std::__shared_weak_count *)a2[1];
    v25[0] = *a2;
    v25[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100024138(a1, v25, a3);
    if (v9)
    {
      sub_1000DB0A0(v9);
    }
  }
}

void sub_10009AABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10009AB24(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  id v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        id v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      id v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

uint64_t sub_10009AC4C(uint64_t a1)
{
  unsigned int v2 = (void *)sub_10009AD44((void *)a1, @"activeType");
  unsigned int v3 = [*(id *)(a1 + 136) isAuthorizedForServiceType:6];
  uint64_t v4 = sub_10009AD44((void *)a1, @"startDate");
  if (v2 && v3)
  {
    if (!v4)
    {
      id v5 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
      sub_10009A6F0(a1, @"startDate", (uint64_t)v5);
      sub_100196178(a1);
    }
    int v6 = [v2 intValue];
    return sub_1014FC70C(a1, v6);
  }
  else
  {
    if (v4)
    {
      sub_10009A6F0(a1, @"startDate", 0);
      sub_100196178(a1);
    }
    return sub_100195744(a1);
  }
}

uint64_t sub_10009AD44(void *a1, uint64_t a2)
{
  sub_10009AFF4((uint64_t)a1);
  uint64_t v4 = a1[6];
  sub_10009AFB0(&v15, a1 + 1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 32))(v4, &v15, a2);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
      int v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v7 = a1[8];
        uint64_t v8 = (objc_class *)objc_opt_class();
        unint64_t v9 = [NSStringFromClass(v8) UTF8String];
        *(_DWORD *)uint64_t buf = 68289538;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        __int16 v21 = 2114;
        uint64_t v22 = v7;
        __int16 v23 = 2082;
        uint64_t v24 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to downcast objc type\", \"clientKeyPath\":%{public, location:escape_only}@, \"foundClass\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102301BB8);
        }
      }
      uint64_t v10 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v11 = a1[8];
        uint64_t v12 = (objc_class *)objc_opt_class();
        __int16 v13 = [NSStringFromClass(v12) UTF8String];
        *(_DWORD *)uint64_t buf = 68289538;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        __int16 v21 = 2114;
        uint64_t v22 = v11;
        __int16 v23 = 2082;
        uint64_t v24 = v13;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to downcast objc type", "{\"msg%{public}.0s\":\"Failed to downcast objc type\", \"clientKeyPath\":%{public, location:escape_only}@, \"foundClass\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      return 0;
    }
  }
  return v5;
}

void sub_10009AF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10009AFB0(void *a1, void *a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_10070318C();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

uint64_t sub_10009AFF4(uint64_t result)
{
  if (!*(unsigned char *)(result + 248)) {
    sub_101A954A4();
  }
  return result;
}

id sub_10009B014(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  if (*(char *)(*a2 + 95) < 0)
  {
    sub_1000DC48C(v11, *(void **)(v5 + 72), *(void *)(v5 + 80));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)(v5 + 72);
    uint64_t v12 = *(void *)(v5 + 88);
  }
  if (*(char *)(v5 + 119) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(v5 + 96), *(void *)(v5 + 104));
  }
  else
  {
    long long __p = *(_OWORD *)(v5 + 96);
    uint64_t v14 = *(void *)(v5 + 112);
  }
  uint64_t v15 = *(void *)(v5 + 120);
  if (v12 >= 0) {
    int v6 = v11;
  }
  else {
    int v6 = (void **)v11[0];
  }
  id v7 = sub_100103E24(*(void *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, v11[0], v11[1], v12)));
  if (v14 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  id v9 = [[objc_msgSend(*(id *)(*(void *)(a1 + 8) + 136), "dictionaryForKey:atKeyPath:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), v7, &__NSDictionary0__struct) objectForKeyedSubscript:a3];
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  return v9;
}

void sub_10009B168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009B204(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C26C8);
  }
  id v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)uint64_t v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    __int16 v27 = 2050;
    __int16 v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      __int16 v17 = (uint64_t *)v12;
    }
    else {
      __int16 v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    unsigned int v29 = v30;
    memset(v30, 0, sizeof(v30));
    id v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    int v18 = (uint64_t *)operator new(0x158uLL);
    v18[1] = 0;
    v18[2] = 0;
    *int v18 = (uint64_t)off_1022C3D30;
    memcpy(v18 + 3, a3, 0x140uLL);
    __int16 v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  __int16 v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10002F6F4();
  }
  os_activity_scope_leave(&state);
}

void sub_10009B7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10009B83C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      id v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          id v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_10009BD74(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            __int16 v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                __int16 v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              unint64_t v48 = v19;
              sub_10009BC2C(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unsigned int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unsigned int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                id v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    id v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      unsigned int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      unsigned int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      id v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              unint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C26C8);
              }
              uint64_t v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C26C8);
                }
                unsigned int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  unsigned int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                unsigned int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_10009BC2C(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    id v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10009BD74(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

id sub_10009BD24(uint64_t a1, int a2, void *a3)
{
  id result = sub_10009BD74(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

id sub_10009BD74(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1006B40C4(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_10009BE10(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_10009BE10(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C3D70);
      }
      unsigned int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D29C82 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionStateMediator_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C3D70);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D29C82 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022C3D70);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_10009C1D0(uint64_t a1, int a2, void *a3)
{
  id v6 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v7 = [[objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDynamicAccuracyReductionKey") boolValue];
  id v8 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = a3;
  id v9 = a3;

  if ((sub_10009C834(a1) & 1) == 0) {
    goto LABEL_37;
  }
  sub_10009C834(a1);
  if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDesiredAccuracyKey"])
  {
    [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDesiredAccuracyKey") doubleValue];
    double v11 = v10;
  }
  else
  {
    double v11 = -1.0;
  }
  if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDistanceFilterKey"])
  {
    [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDistanceFilterKey") doubleValue];
    double v13 = v12;
    if (a2)
    {
LABEL_7:
      unsigned int v14 = [[objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDynamicAccuracyReductionKey") boolValue];
      unsigned int v15 = [[objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageAlteredAccessoryLocationsKey") boolValue];
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      BOOL v16 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 24);
        *(_DWORD *)uint64_t buf = 68290306;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&buf[20] = v17;
        *(_WORD *)&unsigned char buf[28] = 2050;
        *(double *)&buf[30] = v11;
        *(_WORD *)&unsigned char buf[38] = 2050;
        *(double *)&unsigned char buf[40] = v13;
        *(_WORD *)&unsigned char buf[48] = 1026;
        *(_DWORD *)&buf[50] = v14;
        *(_WORD *)&buf[54] = 1026;
        *(_DWORD *)&buf[56] = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client subscribing to location\", \"Client\":%{public, location:escape_only}@, \"desiredAccuracy\":\"%{public}f\", \"distanceFilter\":\"%{public}f\", \"dynamicAccuracyReductionEnabled\":%{public}d, \"allowsAlteredAccessoryLocations\":%{public}d}", buf, 0x3Cu);
      }
      if (*(double *)(a1 + 224) != -1.0) {
        *(double *)(a1 + 224) = sub_1004BE230();
      }
      if (v7 != v14) {
        sub_10012E3E4(a1 + 520);
      }
      sub_10012BA08(a1);
      sub_1001978C8(a1);
      goto LABEL_37;
    }
  }
  else
  {
    double v13 = -1.0;
    if (a2) {
      goto LABEL_7;
    }
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  int v18 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = a1;
    *(_WORD *)&unsigned char buf[28] = 2114;
    *(void *)&buf[30] = v19;
    *(_WORD *)&unsigned char buf[38] = 2050;
    *(double *)&unsigned char buf[40] = v11;
    *(_WORD *)&unsigned char buf[48] = 2050;
    *(double *)&buf[50] = v13;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationSubcription #pwrlog client unsubscribing\", \"this\":\"%{public}p\", \"ClientKeyPath\":%{public, location:escape_only}@, \"DesiredAccuracy\":\"%{public}f\", \"DistanceFilter\":\"%{public}f\"}", buf, 0x3Au);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023192D0);
  }
  int v20 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 138543362;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@ClxClient, unsubscribe, %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023192D0);
    }
    id v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::handleRequestLocation(BOOL, NSDictionary *)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  [*(id *)(a1 + 576) invalidate];

  *(void *)(a1 + 576) = 0;
  char v22 = *(unsigned char *)(a1 + 236);
  *(unsigned char *)(a1 + 236) = 0;
  sub_100129AB8(a1);
  sub_10012D234((id **)(a1 + 512), 0);
  if (*(unsigned char *)(a1 + 312))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    int v23 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ending metric session (LocationUpdateSession)\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    *(CFAbsoluteTime *)(a1 + 376) = CFAbsoluteTimeGetCurrent();
    *(unsigned char *)(a1 + 432) = v22;
    if (*(unsigned char *)(a1 + 58))
    {
      *(double *)(a1 + 504) = *(double *)(a1 + 504) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 64);
      *(void *)(a1 + 64) = 0xBFF0000000000000;
    }
    uint64_t v25 = sub_10071B604();
    sub_10071C074(v25, (unsigned __int8 *)(a1 + 312));
    memset(buf, 0, 71);
    long long v26 = 0uLL;
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0xBFF0000000000000;
    uint64_t v27 = (void **)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
    {
      operator delete(*v27);
      long long v26 = 0uLL;
    }
    *(_OWORD *)uint64_t v27 = v26;
    *(_OWORD *)(a1 + 344) = v26;
    *(_DWORD *)(a1 + 360) = 1000;
    *(_DWORD *)(a1 + 372) = 0;
    *(void *)(a1 + 364) = 0;
    *(void *)(a1 + 376) = 0xBFF0000000000000;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 384) = xmmword_101D1C570;
    *(_OWORD *)(a1 + 400) = _Q1;
    *(_OWORD *)(a1 + 416) = _Q1;
    *(unsigned char *)(a1 + 432) = 0;
    *(void *)(a1 + 496) = *(void *)&buf[63];
    *(void *)(a1 + 504) = 0xBFF0000000000000;
    long long v33 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 465) = *(_OWORD *)&buf[32];
    *(_OWORD *)(a1 + 481) = v33;
    long long v34 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 433) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 449) = v34;
  }
  *(unsigned char *)(a1 + 58) = 0;
LABEL_37:
}

void sub_10009C7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009C834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

void sub_10009C85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    uint64_t v14 = *(void *)(v6 + 16);
    *(_OWORD *)long long __p = v7;
  }
  if (v14 >= 0) {
    id v8 = __p;
  }
  else {
    id v8 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 32))(a1, v8, 1);
  id v9 = *(std::__shared_weak_count **)(a2 + 8);
  double v11 = *(CLConnectionMessage **)a2;
  double v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, CLConnectionMessage **, uint64_t, double))(*(void *)a1 + 16))(a1, &v11, a3, 0.0);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (v14 >= 0) {
    double v10 = __p;
  }
  else {
    double v10 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 32))(a1, v10, 0);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10009C9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009C9DC(uint64_t a1, char *__s, int a3)
{
  int v3 = a3;
  if (a3)
  {
    sub_100134750(__p, __s);
    uint64_t v6 = sub_1000F048C(a1, (uint64_t)__p);
    if (SHIBYTE(v50) < 0) {
      operator delete(*(void **)__p);
    }
    if ([*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:v6])
    {
LABEL_5:
      LODWORD(v7) = 0;
      uint64_t v8 = 1;
    }
    else
    {
      switch([*(id *)(a1 + 112) transientAwareRegistrationResult])
      {
        case 2u:
          if ((sub_1000F08D4() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v8 = 0;
LABEL_23:
          LODWORD(v7) = 1;
          break;
        case 3u:
          uint64_t v8 = 0;
          LODWORD(v7) = 0;
          break;
        case 4u:
        case 6u:
        case 7u:
          uint64_t v8 = 1;
          goto LABEL_23;
        case 5u:
          if ([*(id *)(a1 + 112) registrationResult] != 5) {
            goto LABEL_5;
          }
          sub_101A8189C();
          __break(1u);
LABEL_29:
          LODWORD(v7) = [*(id *)(a1 + 112) inUseLevelIsAtLeast:3];
          uint64_t v8 = 0;
          break;
        default:
          goto LABEL_5;
      }
    }
    if (sub_10009DBC8(__s))
    {
      if (!strncmp(__s, "kCLConnectionMessage", 0x14uLL)) {
        uint64_t v13 = 20;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = sub_100BEAF7C((const void *)a1, &__s[v13]);
    }
    else
    {
      uint64_t v14 = +[NSNull null];
    }
    unsigned int v15 = v14;
    [*(id *)(a1 + 152) setObject:v14 forKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s)];
    if (!strcmp(__s, "kCLConnectionMessageLocation")) {
      [*(id *)(a1 + 152) setObject:v15 forKeyedSubscript:@"kCLConnectionMessageCompensatedLocation"];
    }
    *(void *)(a1 + 160) |= v6;
  }
  else
  {
    id v9 = [(NSNull *)[*(id *)(a1 + 152) objectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s)];
    if (v9 && v9 != +[NSNull null]) {
      sub_1007D9F7C(*(void *)(a1 + 16));
    }
    [[*(id *)(a1 + 152) removeObjectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s)];
    if (!strcmp(__s, "kCLConnectionMessageLocation")) {
      [*(id *)(a1 + 152) removeObjectForKey:@"kCLConnectionMessageCompensatedLocation"];
    }
    *(void *)(a1 + 160) = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    double v10 = *(void **)(a1 + 152);
    id v7 = [v10 countByEnumeratingWithState:&v35 objects:v54 count:16];
    if (v7)
    {
      uint64_t v11 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v11) {
            objc_enumerationMutation(v10);
          }
          sub_100134750(__p, (char *)[*(id *)(*((void *)&v35 + 1) + 8 * i) UTF8String]);
          *(void *)(a1 + 160) |= sub_1000F048C(a1, (uint64_t)__p);
          if (SHIBYTE(v50) < 0) {
            operator delete(*(void **)__p);
          }
        }
        id v7 = [v10 countByEnumeratingWithState:&v35 objects:v54 count:16];
      }
      while (v7);
    }
    uint64_t v8 = 1;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  BOOL v16 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 48);
    int v18 = "un";
    *(_DWORD *)long long __p = 138544130;
    if (v3) {
      int v18 = "";
    }
    *(void *)&__p[4] = v17;
    __int16 v48 = 2050;
    uint64_t v49 = a1;
    __int16 v50 = 2082;
    uint64_t v51 = v18;
    __int16 v52 = 2082;
    int v53 = __s;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Client %{public}@ (%{public}p) is %{public}ssubscribing to notification %{public}s", __p, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v27 = "un";
    if (v3) {
      uint64_t v27 = "";
    }
    int v39 = 138544130;
    uint64_t v40 = v26;
    __int16 v41 = 2050;
    uint64_t v42 = a1;
    __int16 v43 = 2082;
    BOOL v44 = v27;
    __int16 v45 = 2082;
    int v46 = __s;
    int v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::modifySubscription(const char *const, BOOL)", "%s\n", v28);
    if (v28 != __p) {
      free(v28);
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    sub_100134750(__p, __s);
    if (!sub_1000F048C(a1, (uint64_t)__p)) {
      int v3 = 0;
    }
    if (SHIBYTE(v50) < 0)
    {
      operator delete(*(void **)__p);
      if (!v3) {
        goto LABEL_55;
      }
    }
    else if (!v3)
    {
      goto LABEL_55;
    }
    uint64_t v19 = *(void **)(a1 + 48);
    sub_100103D58(*(void *)(a1 + 16), (uint64_t)v19);
    if (!*(unsigned char *)(a1 + 104)) {
      sub_10009D93C(*(void *)(a1 + 16), v19, 1);
    }
LABEL_55:
    if (v7)
    {
      if (!*(unsigned char *)(a1 + 91)
        && ([*(id *)(a1 + 48) isAuthLimited] & 1) == 0
        && !sub_1007A5C78(*(void *)(a1 + 16))
        && !*(unsigned char *)(a1 + 73))
      {
        uint64_t v23 = *(void *)(a1 + 16);
        uint64_t v24 = *(void *)(a1 + 48);
        if (*(unsigned char *)(a1 + 369))
        {
          sub_100134750(&v32, "");
          sub_1007E1DB0((uint64_t)v34, 2, v24, 0, &v32);
          unsigned int v20 = sub_1007B8B90(v23, a1, v34, 0);
          sub_1007E1E64((uint64_t)v34);
          if ((v33 & 0x80000000) == 0) {
            goto LABEL_62;
          }
          uint64_t v25 = (void *)v32;
        }
        else
        {
          sub_100134750(v29, "");
          sub_1007E1DB0((uint64_t)v31, 5, v24, 0, (long long *)v29);
          unsigned int v20 = sub_1007B8B90(v23, a1, v31, 0);
          sub_1007E1E64((uint64_t)v31);
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_62;
          }
          uint64_t v25 = v29[0];
        }
        operator delete(v25);
        goto LABEL_62;
      }
      unsigned int v20 = [*(id *)(a1 + 112) registrationResult];
    }
    else
    {
      unsigned int v20 = 0;
    }
LABEL_62:
    if (sub_10009D110(__s))
    {
      sub_100148BB0(*(void *)(a1 + 16), *(void *)(a1 + 48), 0);
      sub_100148C40(*(void *)(a1 + 16), a1, 1);
    }
    if (v20 == 2) {
      int v21 = (int)v7;
    }
    else {
      int v21 = 0;
    }
    if (v21 == 1) {
      sub_100BD60B0((void *)a1);
    }
  }
  return v8;
}

void sub_10009D09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009D110(const char *a1)
{
  uint64_t result = strcmp(a1, "kCLConnectionMessageCollectMetricsForFunction");
  if (result)
  {
    uint64_t result = strcmp(a1, "kCLConnectionMessageGesture");
    if (result)
    {
      uint64_t result = strcmp(a1, "kCLConnectionMessageGyroBiasEstimation");
      if (result)
      {
        uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityUpdate");
        if (result)
        {
          uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityPeriodicUpdate");
          if (result)
          {
            uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityQuery");
            if (result)
            {
              uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityAvailable");
              if (result)
              {
                uint64_t result = strcmp(a1, "kCLConnectionMessageActivityAlarmStart");
                if (result)
                {
                  uint64_t result = strcmp(a1, "kCLConnectionMessageActivityAlarmAvailable");
                  if (result)
                  {
                    uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountUpdate");
                    if (result)
                    {
                      uint64_t result = strcmp(a1, "kCLConnectionMessagePedometerEvent");
                      if (result)
                      {
                        uint64_t result = strcmp(a1, "kCLConnectionMessageStartStepCountAvailable");
                        if (result)
                        {
                          uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountQuery");
                          if (result)
                          {
                            uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountRecordQuery");
                            if (result)
                            {
                              uint64_t result = strcmp(a1, "kCLConnectionMessageFloorCountAvailable");
                              if (result)
                              {
                                uint64_t result = strcmp(a1, "kCLConnectionMessagePaceAndCadenceAPIAvailable");
                                if (result)
                                {
                                  uint64_t result = strcmp(a1, "InUseAssertion/kCLConnectionMessage");
                                  if (result)
                                  {
                                    uint64_t result = strcmp(a1, "EmergencyEnablementAssertion/kCLConnectionMessage");
                                    if (result)
                                    {
                                      uint64_t result = strcmp(a1, "LocationIndependenceAssertion/kCLConnectionMessage");
                                      if (result)
                                      {
                                        uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountReset");
                                        if (result)
                                        {
                                          uint64_t result = strcmp(a1, "kCLConnectionMessageOdometerGpsAvailability");
                                          if (result)
                                          {
                                            uint64_t result = strcmp(a1, "kCLConnectionMessageStartOdometerUpdate");
                                            if (result)
                                            {
                                              uint64_t result = strcmp(a1, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
                                              if (result)
                                              {
                                                uint64_t result = strcmp(a1, "kCLConnectionMessageOdometerSuitabilityUpdate");
                                                if (result)
                                                {
                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerIsAvailable");
                                                  if (result)
                                                  {
                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerIsArmed");
                                                    if (result)
                                                    {
                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerStart");
                                                      if (result)
                                                      {
                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerStop");
                                                        if (result)
                                                        {
                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerQuery");
                                                          if (result)
                                                          {
                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerAlarm");
                                                            if (result)
                                                            {
                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageOnBodyDetection");
                                                              if (result)
                                                              {
                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageOnBodyDetectionParams");
                                                                if (result)
                                                                {
                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageSidebandSensorFusionEnable");
                                                                  if (result)
                                                                  {
                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageNatalimetryUpdate");
                                                                    if (result)
                                                                    {
                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageNatalimetryAvailable");
                                                                      if (result)
                                                                      {
                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageNatalimetryQuery");
                                                                        if (result)
                                                                        {
                                                                          uint64_t result = strcmp(a1, "Health/kCLConnectionMessageMetMinutesQuery");
                                                                          if (result)
                                                                          {
                                                                            uint64_t result = strcmp(a1, "Health/kCLConnectionMessageVO2MaxInputsQuery");
                                                                            if (result)
                                                                            {
                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageNatalimetryGetUserProfile");
                                                                              if (result)
                                                                              {
                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageNatalimetrySetUserProfile");
                                                                                if (result)
                                                                                {
                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageExerciseMinuteQuery");
                                                                                  if (result)
                                                                                  {
                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageExerciseMinuteUpdate");
                                                                                    if (result)
                                                                                    {
                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageWorkoutEvent");
                                                                                      if (result)
                                                                                      {
                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageBeginWorkoutSession");
                                                                                        if (result)
                                                                                        {
                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageEndWorkoutSession");
                                                                                          if (result)
                                                                                          {
                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageSetCurrentWorkoutType");
                                                                                            if (result)
                                                                                            {
                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessagePauseWorkout");
                                                                                              if (result)
                                                                                              {
                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageResumeWorkout");
                                                                                                if (result)
                                                                                                {
                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageVehicleStateIsAvailable");
                                                                                                  if (result)
                                                                                                  {
                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsAvailable");
                                                                                                    if (result)
                                                                                                    {
                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsSetEnabled");
                                                                                                      if (result)
                                                                                                      {
                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsSendStats");
                                                                                                        if (result)
                                                                                                        {
                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsGetConfig");
                                                                                                          if (result)
                                                                                                          {
                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEvent");
                                                                                                            if (result)
                                                                                                            {
                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEventCompleted");
                                                                                                              if (result)
                                                                                                              {
                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEventCompletedMostRecent");
                                                                                                                if (result)
                                                                                                                {
                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEventEnabled");
                                                                                                                  if (result)
                                                                                                                  {
                                                                                                                    uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerIsTracking");
                                                                                                                    if (result)
                                                                                                                    {
                                                                                                                      uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerStart");
                                                                                                                      if (result)
                                                                                                                      {
                                                                                                                        uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerStop");
                                                                                                                        if (result)
                                                                                                                        {
                                                                                                                          uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerQuery");
                                                                                                                          if (result)
                                                                                                                          {
                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoServiceEvent");
                                                                                                                            if (result)
                                                                                                                            {
                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoCreateService");
                                                                                                                              if (result)
                                                                                                                              {
                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoDeleteService");
                                                                                                                                if (result)
                                                                                                                                {
                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoQueryMyServices");
                                                                                                                                  if (result)
                                                                                                                                  {
                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoQueryConnectionStatus");
                                                                                                                                    if (result)
                                                                                                                                    {
                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoConnectToService");
                                                                                                                                      if (result)
                                                                                                                                      {
                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoPredictionEventUpdate");
                                                                                                                                        if (result)
                                                                                                                                        {
                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoServiceDebugResponse");
                                                                                                                                          if (result)
                                                                                                                                          {
                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoConnectionStatusEvent");
                                                                                                                                            if (result)
                                                                                                                                            {
                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoGenericEventResponse");
                                                                                                                                              if (result)
                                                                                                                                              {
                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation");
                                                                                                                                                if (result)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageRemoveCustomLOI");
                                                                                                                                                  if (result)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageAbsoluteAltitudeUpdate");
                                                                                                                                                    if (result)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageKappaStatsAvailable");
                                                                                                                                                      if (result)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageKappaSendAPCommand");
                                                                                                                                                        if (result)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageKappaGetStateRequest");
                                                                                                                                                          if (result)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageKappaGetState");
                                                                                                                                                            if (result)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageIndoorOutdoorUpdate");
                                                                                                                                                              if (result)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageIndoorOutdoorLastKnownState");
                                                                                                                                                                if (result)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferAssert");
                                                                                                                                                                  if (result)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferAssertError");
                                                                                                                                                                    if (result)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferMeasurement");
                                                                                                                                                                      if (result)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageGNSSHeatMap");
                                                                                                                                                                        if (result)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageGnssDisablementAssertReq");
                                                                                                                                                                          if (result)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageGnssDisablementAssertRsp");
                                                                                                                                                                            if (result)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageVO2MaxRetrocomputeStatusQuery");
                                                                                                                                                                              if (result)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageEclipseServiceRequest");
                                                                                                                                                                                if (result)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageEclipseViewObstructedStateRequest");
                                                                                                                                                                                  if (result)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageProxPDPUpdate");
                                                                                                                                                                                    if (result)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageALSPhoneUpdate");
                                                                                                                                                                                      if (result)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageWriteContextConfiguration");
                                                                                                                                                                                        if (result)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageMagicMountServiceRequest");
                                                                                                                                                                                          if (result)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageMagicMountAPWakesAllowed");
                                                                                                                                                                                            if (result)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageGnssExtensionsClient");
                                                                                                                                                                                              if (result)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageGnssExtensionsClientError");
                                                                                                                                                                                                if (result)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageGnssExtensionsData");
                                                                                                                                                                                                  if (result)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedAccelerometer");
                                                                                                                                                                                                    if (result)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedDeviceMotion");
                                                                                                                                                                                                      if (result)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
                                                                                                                                                                                                        if (result)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedSensorError");
                                                                                                                                                                                                          if (result)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageCLGNSSStateQueryAssertionResponse");
                                                                                                                                                                                                            if (result) {
                                                                                                                                                                                                              return strcmp(a1, "kCLConnectionMessageBBGnssStatusQuery") != 0;
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10009D93C(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if ([a2 website]) {
    id v4 = [v4 anchorKeyPath];
  }
  unsigned int v6 = [*(id *)(a1 + 136) BOOLForKey:@"SuppressShowingInSettings" atKeyPath:v4 defaultValue:0];
  [*(id *)(a1 + 136) removeValueForKey:@"SuppressShowingInSettings" atKeyPath:v4];
  [*(id *)(a1 + 136) setBool:1 forKey:@"Registered" atKeyPath:v4];
  if (v6)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2114;
      id v18 = v4;
      __int16 v19 = 1026;
      int v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client will now show up in settings\", \"Client\":%{public, location:escape_only}@, \"shouldSync\":%{public}hhd}", buf, 0x22u);
    }
    if (a3)
    {
      sub_100103240();
      if (sub_100106424() || (sub_100103240(), sub_10010145C()))
      {
        id v8 = [*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v4 defaultValue:0];
        unsigned int v9 = [*(id *)(a1 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:v4 defaultValue:0];
        double v10 = (char *)[v4 legacyClientKey];
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = "";
        }
        sub_100134750(buf, v11);
        sub_100134750(__p, "ShowingClientInSettings");
        sub_1007BEB1C(a1, (uint64_t)buf, 0, (uint64_t)v8, v9 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)__p);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (SBYTE3(v18) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
  }
}

void sub_10009DB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009DBC8(char *__s)
{
  sub_100134750(__p, __s);
  BOOL v2 = sub_1000F00D8(__p);
  BOOL v3 = v2;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return 0;
    }
  }
  else if (v2)
  {
    return 0;
  }
  uint64_t result = strcmp(__s, "kCLConnectionMessageLocation");
  if (result)
  {
    uint64_t result = strcmp(__s, "kCLConnectionMessageLocationUnavailable");
    if (result)
    {
      uint64_t result = strcmp(__s, "kCLConnectionMessageMotionActivityUpdate");
      if (result)
      {
        uint64_t result = strcmp(__s, "kCLConnectionMessageActivityAlarmStart");
        if (result)
        {
          uint64_t result = strcmp(__s, "kCLConnectionMessageSignificantLocationChange");
          if (result)
          {
            uint64_t result = strcmp(__s, "kCLConnectionMessageSignificantLocationVisit");
            if (result)
            {
              uint64_t result = strcmp(__s, "kCLConnectionMessageSignificantLocationVisitState");
              if (result)
              {
                uint64_t result = strcmp(__s, "kCLConnectionMessageStepCountUpdate");
                if (result)
                {
                  uint64_t result = strcmp(__s, "kCLConnectionMessageExerciseMinuteUpdate");
                  if (result)
                  {
                    uint64_t result = strcmp(__s, "kCLConnectionMessageWorkoutEvent");
                    if (result)
                    {
                      uint64_t result = strcmp(__s, "kCLConnectionMessageNatalimetryUpdate");
                      if (result)
                      {
                        uint64_t result = strcmp(__s, "kCLConnectionMessageKappaGetStateRequest");
                        if (result)
                        {
                          uint64_t result = strcmp(__s, "kCLConnectionMessageSedentaryTimerAlarm");
                          if (result)
                          {
                            uint64_t result = strcmp(__s, "kCLConnectionMessageLocationPush");
                            if (result)
                            {
                              uint64_t result = strcmp(__s, "kCLConnectionMessageMotionAlarmFire");
                              if (result)
                              {
                                uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoServiceEvent");
                                if (result)
                                {
                                  uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoPredictionEventUpdate");
                                  if (result)
                                  {
                                    uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoServiceDebugResponse");
                                    if (result)
                                    {
                                      uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoConnectionStatusEvent");
                                      if (result)
                                      {
                                        uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoGenericEventResponse");
                                        if (result)
                                        {
                                          uint64_t result = strcmp(__s, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
                                          if (result)
                                          {
                                            uint64_t result = strcmp(__s, "kCLConnectionMessageAnomalyEvent");
                                            if (result) {
                                              return strcmp(__s, "kCLConnectionMessageOdometerGpsAvailability") != 0;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_10009DE58(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (qword_102482208 != -1) {
    dispatch_once(&qword_102482208, &stru_102301018);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1024821E0);
  id v7 = (id)qword_1024821E8;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1024821E0);
  if (![v7 count]) {
    sub_101A94748();
  }
  id v8 = [v7 objectForKeyedSubscript:a2];
  if (v8)
  {
    unint64_t result = (unint64_t)[v8 BOOLValue];
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  unint64_t result = sub_10009DF30(a2);
  if ((result & 1) == 0)
  {
LABEL_6:
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return result;
}

unint64_t sub_10009DF30(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (qword_102482200 != -1) {
    dispatch_once(&qword_102482200, &stru_102300F30);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1024821F8);
  id v2 = [(id)qword_1024821F0 objectForKey:a1];
  if (v2)
  {
    unint64_t v3 = (unint64_t)[v2 BOOLValue];
  }
  else
  {
    CFBooleanRef v4 = (const __CFBoolean *)MGCopyAnswer();
    CFBooleanRef v5 = v4;
    if (v4)
    {
      CFTypeID v6 = CFGetTypeID(v4);
      unint64_t v3 = v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) != 0;
      CFRelease(v5);
      [objc_msgSend((id)qword_1024821F0, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3), a1);
    }
    else
    {
      unint64_t v3 = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1024821F8);
  return v3;
}

void sub_10009E040(_Unwind_Exception *a1)
{
}

void sub_10009E05C(uint64_t a1, long long ***a2)
{
  id v2 = **a2;
  if (v2 != (*a2)[1])
  {
    CFBooleanRef v5 = (unsigned __int16 *)(a1 + 944);
    uint64_t v6 = a1 + 1640;
    do
    {
      memset(&v22[4], 0, 128);
      long long v7 = *v2;
      long long v8 = v2[1];
      long long v9 = v2[3];
      void v22[2] = v2[2];
      v22[3] = v9;
      v22[0] = v7;
      v22[1] = v8;
      *(_DWORD *)uint64_t buf = 7;
      (*(void (**)(uint64_t, uint8_t *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v22, 0, 0xFFFFFFFFLL, 0);
      *(_DWORD *)uint64_t buf = 8;
      (*(void (**)(uint64_t, uint8_t *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v22, 0, 0xFFFFFFFFLL, 0);
      sub_1001952B8(v5, *((_DWORD *)v2 + 4), *((_DWORD *)v2 + 5), 0, *((double *)v2 + 1));
      *(void *)(a1 + 1680) = *(void *)(a1 + 1488);
      sub_1001952C0(*((double *)v2 + 1), (uint64_t)v5, v6);
      float v10 = *((float *)v2 + 14);
      *(double *)(a1 + 1688) = v10;
      *(unsigned char *)(a1 + 1696) = 0;
      if (v10 > 0.0)
      {
        double v11 = *(double *)(a1 + 928);
        if (v11 == 1.79769313e308 || vabdd_f64(*(double *)(a1 + 1664), v11) > *(double *)(a1 + 936))
        {
          sub_1001A796C(*(void *)(a1 + 128), v6);
          *(void *)(a1 + 928) = *(void *)(a1 + 1664);
          if (*(unsigned char *)(a1 + 1704))
          {
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_1022CF660);
            }
            double v12 = qword_1024190D8;
            if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v13 = *(void *)(a1 + 1664);
              int v14 = *(_DWORD *)(a1 + 1680);
              int v15 = *(_DWORD *)(a1 + 1684);
              uint64_t v16 = *(void *)(a1 + 1688);
              *(_DWORD *)uint64_t buf = 134218752;
              uint64_t v32 = v13;
              __int16 v33 = 1024;
              int v34 = v14;
              __int16 v35 = 1024;
              int v36 = v15;
              __int16 v37 = 2048;
              uint64_t v38 = v16;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "writing data to elevationDB for phone,startTime,%f,ascended,%d,descended,%d,pressure,%f", buf, 0x22u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190D0 != -1) {
                dispatch_once(&qword_1024190D0, &stru_1022CF660);
              }
              uint64_t v17 = *(void *)(a1 + 1664);
              int v18 = *(_DWORD *)(a1 + 1680);
              int v19 = *(_DWORD *)(a1 + 1684);
              uint64_t v20 = *(void *)(a1 + 1688);
              int v23 = 134218752;
              uint64_t v24 = v17;
              __int16 v25 = 1024;
              int v26 = v18;
              __int16 v27 = 1024;
              int v28 = v19;
              __int16 v29 = 2048;
              uint64_t v30 = v20;
              int v21 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierCompanion::pushElevation(std::shared_ptr<CLElevationVector>)", "%s\n", v21);
              if (v21 != (char *)buf) {
                free(v21);
              }
            }
          }
        }
      }
      v2 += 4;
    }
    while (v2 != (*a2)[1]);
  }
}

void sub_10009E3F8(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B4FC8);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    float v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      float v10 = (void *)*v10;
    }
    double v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v28 = 0;
    __int16 v29 = 2082;
    *(void *)uint64_t v30 = "";
    *(_WORD *)&v30[8] = 2082;
    *(void *)&v30[10] = "activity";
    __int16 v31 = 2082;
    uint64_t v32 = v10;
    __int16 v33 = 2050;
    int v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  int v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      uint64_t v17 = (uint64_t *)v12;
    }
    else {
      uint64_t v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      int v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v35 = v36;
    memset(v36, 0, sizeof(v36));
    __int16 v37 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v35);
    int v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v34) {
      sub_1000DB0A0(v34);
    }
    sub_1000F5BB0((uint64_t)&v29, *(void **)&v30[6]);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    sub_1000F5BB0((uint64_t)&v35, v36[0]);
  }
  if (a4)
  {
    int v18 = (char *)operator new(0xD8uLL);
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = a3[3];
    *(_OWORD *)(v18 + 56) = a3[2];
    *(_OWORD *)(v18 + 72) = v20;
    long long v21 = a3[6];
    *(_OWORD *)(v18 + 136) = a3[7];
    *(_OWORD *)(v18 + 120) = v21;
    long long v22 = a3[4];
    *(_OWORD *)(v18 + 104) = a3[5];
    *(_OWORD *)(v18 + 88) = v22;
    long long v23 = a3[10];
    *(_OWORD *)(v18 + 200) = a3[11];
    *(_OWORD *)(v18 + 184) = v23;
    long long v24 = a3[8];
    *(_OWORD *)(v18 + 168) = a3[9];
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)int v18 = off_1022B5468;
    *(_OWORD *)(v18 + 152) = v24;
    __int16 v25 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v25) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  __int16 v25 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v25) {
LABEL_27:
  }
    sub_1000DB0A0(v25);
LABEL_28:
  if (v14[7]) {
    sub_10009F4B4();
  }
  os_activity_scope_leave(&state);
}

void sub_10009EA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10009EA68(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    CFBooleanRef v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_10009EFA0(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                long long v22 = (uint64_t *)v17;
              }
              else {
                long long v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v48 = v19;
              sub_10009EE58(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  uint64_t v32 = (uint64_t *)v27;
                }
                else {
                  uint64_t v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int16 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int16 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      uint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      uint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int16 v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              __int16 v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B4FC8);
              }
              long long v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B4FC8);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                unsigned int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_10009EE58(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    long long v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10009EFA0(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    unint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

id sub_10009EF50(uint64_t a1, int a2, void *a3)
{
  id result = sub_10009EFA0(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

id sub_10009EFA0(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1004A3500(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_10009F03C(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_10009F03C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B54A8);
      }
      unint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2102CLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOdometerNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B54A8);
      }
      CFBooleanRef v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2102CLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022B54A8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

uint64_t sub_10009F3FC(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[48] assertInside];
  id v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

uint64_t sub_10009F478(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 | 4) == 7) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_10009F4B4()
{
}

void sub_10009F588(uint64_t a1, uint64_t a2, float a3)
{
  LOBYTE(a3) = *(unsigned char *)(a2 + 1);
  float v5 = (float)LODWORD(a3);
  int v6 = *(_DWORD *)(a2 + 44);
  if (!*(unsigned char *)(a1 + 360)
    || (int v7 = *(_DWORD *)(a1 + 396), v8 = (double)v7 * 2.56, *(unsigned char *)(a1 + 384))
    && v8 >= (double)(3600 * *(_DWORD *)(a1 + 388)))
  {
    double v104 = *(float *)(a2 + 28);
    unsigned int v106 = *(_DWORD *)(a2 + 4);
    double v108 = *(float *)(a2 + 32);
  }
  else
  {
    double v9 = (double)*(int *)(a1 + 364) / 3600.0;
    unsigned int v10 = (v9 * v8);
    double v108 = (double)v10 / v9;
    unsigned int v106 = v10;
    int v6 = (int)((double)(v10 - (int)(v9 * ((double)(v7 - 1) * 2.56))) / v9 * 1000000.0);
    double v104 = 1.0 / (v9 * (*(float *)(a1 + 376) / 100.0));
    if (*(unsigned char *)(a1 + 372)) {
      float v5 = *(float *)(a1 + 376);
    }
    *(_DWORD *)(a1 + 396) = v7 + 1;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v11 = *(_DWORD *)(a2 + 48);
  double v12 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653))
  {
    if (*(unsigned char *)(a1 + 652))
    {
      char v13 = 0;
      goto LABEL_13;
    }
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  char v13 = 1;
LABEL_13:
  double v14 = *(double *)(a1 + 664);
  if (v6)
  {
    double v15 = *(double *)(a1 + 352) + (double)v6 / -1000000.0;
    double v16 = *(double *)(a1 + 664);
    if ((v13 & 1) == 0)
    {
      double v16 = *(double *)(a1 + 664);
      if (!*(unsigned char *)(a1 + 652))
      {
        sub_1010CE1FC(a1);
        *(unsigned char *)(a1 + 653) = 0;
        double v16 = *(double *)(a1 + 664);
      }
    }
    double v17 = v15 + v16;
  }
  else
  {
    double v17 = 0.0;
  }
  double v102 = v17;
  if ((sub_1000A16E8() & 0x8000000) != 0) {
    int v18 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v18 = 0;
  }
  double v19 = v12 + v14;
  double v20 = v5;
  double v21 = (double)v11 / 1000000.0;
  if ((sub_1000A16E8() & 0x8000000) != 0) {
    int v22 = *(_DWORD *)(a2 + 12);
  }
  else {
    int v22 = 0;
  }
  double v23 = v12 - v21;
  double v24 = v19 - v21;
  double v25 = *(float *)(a2 + 40);
  memset(&buf[6], 0, 24);
  char v26 = *(unsigned char *)(a2 + 2);
  int v27 = *(_DWORD *)(a2 + 16);
  int v28 = *(_DWORD *)(a2 + 20);
  char v29 = *(unsigned char *)(a2 + 37);
  char v30 = *(unsigned char *)(a2 + 38);
  unint64_t v31 = *(void *)(a1 + 432);
  unint64_t v32 = *(void *)(a1 + 440);
  double v33 = v20 / 100.0;
  if (v31 >= v32)
  {
    uint64_t v36 = (void **)(a1 + 424);
    uint64_t v37 = *(void *)(a1 + 424);
    uint64_t v38 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v31 - v37) >> 4);
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) > 0x1745D1745D1745DLL) {
      sub_1001D7FD4();
    }
    unint64_t v40 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v37) >> 4);
    if (2 * v40 > v39) {
      unint64_t v39 = 2 * v40;
    }
    if (v40 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v41 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      int v42 = v22;
      __int16 v43 = (char *)sub_10017EBB8(a1 + 440, v41);
      int v22 = v42;
      uint64_t v36 = (void **)(a1 + 424);
    }
    else
    {
      __int16 v43 = 0;
    }
    BOOL v44 = &v43[176 * v38];
    *(double *)BOOL v44 = v23;
    *((double *)v44 + 1) = v24;
    *((double *)v44 + 2) = v102;
    *((_DWORD *)v44 + 6) = v106;
    __int16 v45 = &v43[176 * v41];
    *((void *)v44 + 4) = 0;
    *((double *)v44 + 5) = v33;
    *((void *)v44 + 6) = 0;
    *((void *)v44 + 7) = 0;
    *((_DWORD *)v44 + 16) = v18;
    *((_DWORD *)v44 + 17) = v22;
    *((double *)v44 + 9) = v104;
    *((double *)v44 + 10) = v25;
    *((double *)v44 + 11) = v108;
    *((_DWORD *)v44 + 24) = 0;
    *((void *)v44 + 13) = 0;
    *((_WORD *)v44 + 56) = 0;
    long long v46 = *(_OWORD *)buf;
    *((_OWORD *)v44 + 8) = *(_OWORD *)&buf[14];
    *(_OWORD *)(v44 + 114) = v46;
    *((void *)v44 + 18) = 0x1A00000000;
    v44[152] = v26;
    *((_DWORD *)v44 + 39) = v27;
    *((_DWORD *)v44 + 40) = v28;
    v44[164] = v29;
    v44[165] = v30;
    v44[166] = 0;
    *((_DWORD *)v44 + 42) = 0;
    __int16 v35 = v44 + 176;
    __int16 v48 = *(char **)(a1 + 424);
    unsigned int v47 = *(char **)(a1 + 432);
    if (v47 != v48)
    {
      do
      {
        long long v49 = *((_OWORD *)v47 - 11);
        long long v50 = *((_OWORD *)v47 - 9);
        *((_OWORD *)v44 - 10) = *((_OWORD *)v47 - 10);
        *((_OWORD *)v44 - 9) = v50;
        *((_OWORD *)v44 - 11) = v49;
        long long v51 = *((_OWORD *)v47 - 8);
        long long v52 = *((_OWORD *)v47 - 7);
        long long v53 = *((_OWORD *)v47 - 5);
        *((_OWORD *)v44 - 6) = *((_OWORD *)v47 - 6);
        *((_OWORD *)v44 - 5) = v53;
        *((_OWORD *)v44 - 8) = v51;
        *((_OWORD *)v44 - 7) = v52;
        long long v54 = *((_OWORD *)v47 - 4);
        long long v55 = *((_OWORD *)v47 - 3);
        long long v56 = *((_OWORD *)v47 - 1);
        *((_OWORD *)v44 - 2) = *((_OWORD *)v47 - 2);
        *((_OWORD *)v44 - 1) = v56;
        *((_OWORD *)v44 - 4) = v54;
        *((_OWORD *)v44 - 3) = v55;
        v44 -= 176;
        v47 -= 176;
      }
      while (v47 != v48);
      unsigned int v47 = (char *)*v36;
    }
    *(void *)(a1 + 424) = v44;
    *(void *)(a1 + 432) = v35;
    *(void *)(a1 + 440) = v45;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *(double *)unint64_t v31 = v23;
    *(double *)(v31 + 8) = v24;
    *(double *)(v31 + 16) = v102;
    *(_DWORD *)(v31 + 24) = v106;
    *(void *)(v31 + 32) = 0;
    *(double *)(v31 + 40) = v33;
    *(void *)(v31 + 48) = 0;
    *(void *)(v31 + 56) = 0;
    *(_DWORD *)(v31 + 64) = v18;
    *(_DWORD *)(v31 + 68) = v22;
    *(double *)(v31 + 72) = v104;
    *(double *)(v31 + 80) = v25;
    *(double *)(v31 + 88) = v108;
    *(_DWORD *)(v31 + 96) = 0;
    *(void *)(v31 + 104) = 0;
    *(_WORD *)(v31 + 112) = 0;
    long long v34 = *(_OWORD *)buf;
    *(_OWORD *)(v31 + 128) = *(_OWORD *)&buf[14];
    *(_OWORD *)(v31 + 114) = v34;
    *(void *)(v31 + 144) = 0x1A00000000;
    *(unsigned char *)(v31 + 152) = v26;
    *(_DWORD *)(v31 + 156) = v27;
    *(_DWORD *)(v31 + 160) = v28;
    *(unsigned char *)(v31 + 164) = v29;
    *(unsigned char *)(v31 + 165) = v30;
    *(unsigned char *)(v31 + 166) = 0;
    __int16 v35 = (char *)(v31 + 176);
    *(_DWORD *)(v31 + 168) = 0;
  }
  *(void *)(a1 + 432) = v35;
  int v57 = *(_DWORD *)(a2 + 16);
  if (v57 || *(_DWORD *)(a2 + 20))
  {
    double v58 = *(double *)(a1 + 352);
    if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      int v57 = *(_DWORD *)(a2 + 16);
    }
    double v59 = v58 + *(double *)(a1 + 664);
    int v60 = *(_DWORD *)(a2 + 20);
    int v61 = *(unsigned __int8 *)(a2 + 36);
    __int16 v62 = *(_WORD *)(a2 + 52);
    int v64 = *(_DWORD *)(a2 + 56);
    int v63 = *(_DWORD *)(a2 + 60);
    char v65 = *(unsigned char *)(a1 + 859);
    unint64_t v66 = *(void *)(a1 + 456);
    unint64_t v67 = *(void *)(a1 + 464);
    if (v66 >= v67)
    {
      uint64_t v69 = *(void *)(a1 + 448);
      uint64_t v70 = (uint64_t)(v66 - v69) >> 6;
      unint64_t v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 58) {
        sub_1001D7FD4();
      }
      uint64_t v72 = v67 - v69;
      if (v72 >> 5 > v71) {
        unint64_t v71 = v72 >> 5;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v73 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)sub_10017EAF0(a1 + 464, v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = (double *)&v74[64 * v70];
      *uint64_t v75 = v58;
      v75[1] = v59;
      *((_DWORD *)v75 + 4) = v57;
      *((_DWORD *)v75 + 5) = v60;
      int64_t v76 = &v74[64 * v73];
      *((_DWORD *)v75 + 6) = 0;
      v75[4] = 0.0;
      *((_DWORD *)v75 + 10) = 0;
      *((_DWORD *)v75 + 11) = v61;
      *((_DWORD *)v75 + 12) = v64;
      *((unsigned char *)v75 + 52) = 0;
      *((_WORD *)v75 + 27) = v62;
      *((_DWORD *)v75 + 14) = v63;
      *((unsigned char *)v75 + 60) = 0;
      *((unsigned char *)v75 + 61) = v65;
      int v68 = (char *)(v75 + 8);
      unint64_t v78 = *(char **)(a1 + 448);
      double v77 = *(char **)(a1 + 456);
      if (v77 != v78)
      {
        do
        {
          long long v79 = *((_OWORD *)v77 - 4);
          long long v80 = *((_OWORD *)v77 - 3);
          long long v81 = *((_OWORD *)v77 - 1);
          *((_OWORD *)v75 - 2) = *((_OWORD *)v77 - 2);
          *((_OWORD *)v75 - 1) = v81;
          *((_OWORD *)v75 - 4) = v79;
          *((_OWORD *)v75 - 3) = v80;
          v75 -= 8;
          v77 -= 64;
        }
        while (v77 != v78);
        double v77 = *(char **)(a1 + 448);
      }
      *(void *)(a1 + 448) = v75;
      *(void *)(a1 + 456) = v68;
      *(void *)(a1 + 464) = v76;
      if (v77) {
        operator delete(v77);
      }
    }
    else
    {
      *(double *)unint64_t v66 = v58;
      *(double *)(v66 + 8) = v59;
      *(_DWORD *)(v66 + 16) = v57;
      *(_DWORD *)(v66 + 20) = v60;
      *(_DWORD *)(v66 + 24) = 0;
      *(void *)(v66 + 32) = 0;
      *(_DWORD *)(v66 + 40) = 0;
      *(_DWORD *)(v66 + 44) = v61;
      *(_DWORD *)(v66 + 48) = v64;
      *(unsigned char *)(v66 + 52) = 0;
      *(_WORD *)(v66 + 54) = v62;
      *(_DWORD *)(v66 + 56) = v63;
      *(unsigned char *)(v66 + 60) = 0;
      int v68 = (char *)(v66 + 64);
      *(unsigned char *)(v66 + 61) = v65;
    }
    *(void *)(a1 + 456) = v68;
  }
  unsigned int v82 = *(unsigned __int16 *)(a2 + 52);
  unsigned int v83 = *(unsigned __int8 *)(a2 + 37);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102310470);
  }
  uint64_t v84 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    double v86 = *(double *)(a1 + 352);
    LOBYTE(v85) = *(unsigned char *)(a2 + 1);
    int v107 = *(_DWORD *)(a2 + 8);
    int v109 = *(_DWORD *)(a2 + 4);
    int v105 = *(_DWORD *)(a2 + 12);
    int v103 = *(_DWORD *)(a2 + 16);
    int v100 = *(_DWORD *)(a2 + 20);
    double v87 = (double)v85 / 100.0;
    double v88 = *(float *)(a2 + 28);
    double v89 = *(float *)(a2 + 32);
    int v90 = *(unsigned __int8 *)(a2 + 36);
    if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
    }
    double v91 = v86 + *(double *)(a1 + 664);
    double v92 = *(float *)(a2 + 40);
    uint64_t v93 = *(void *)(*(void *)(a1 + 432) - 160);
    int v94 = *(_DWORD *)(a2 + 44);
    unsigned int v95 = sub_1000A16E8();
    int v96 = *(_DWORD *)(a1 + 364);
    BOOL v179 = v96 > 0;
    int v183 = *(_DWORD *)(a1 + 388);
    *(_DWORD *)&buf[14] = v109;
    int v111 = v107;
    int v113 = v105;
    int v115 = v103;
    int v117 = v100;
    int v123 = v90;
    uint64_t v131 = v93;
    int v133 = v94;
    int v135 = (v95 >> 27) & 1;
    int v137 = *(unsigned __int8 *)(a2 + 2);
    int v139 = *(char *)(a2 + 3);
    int v141 = v82 & 1;
    int v143 = (v82 >> 12) & 1;
    int v145 = (v82 >> 2) & 1;
    int v147 = (v82 >> 8) & 1;
    int v149 = (v82 >> 9) & 1;
    int v151 = (v82 >> 10) & 1;
    int v153 = (v82 >> 11) & 1;
    int v159 = v83 & 1;
    int v163 = (v83 >> 2) & 1;
    int v167 = (v83 >> 4) & 1;
    int v171 = (v83 >> 6) & 1;
    int v175 = *(unsigned __int8 *)(a2 + 38);
    float v97 = *(float *)(a2 + 60);
    double v98 = *(float *)(a2 + 56);
    *(double *)&uint8_t buf[4] = v86;
    *(double *)&buf[20] = v87;
    double v119 = v88;
    double v127 = v91;
    double v129 = v92;
    double v155 = v98;
    int v157 = *(__int16 *)(a2 + 54);
    int v161 = (v83 >> 1) & 1;
    int v165 = (v83 >> 3) & 1;
    int v169 = (v83 >> 5) & 1;
    unsigned int v173 = v83 >> 7;
    *(_WORD *)&unsigned char buf[18] = 2048;
    __int16 v118 = 2048;
    __int16 v120 = 2048;
    __int16 v124 = 2048;
    __int16 v126 = 2048;
    __int16 v128 = 2048;
    __int16 v130 = 2048;
    __int16 v154 = 2048;
    __int16 v176 = 2048;
    int v181 = v96;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_WORD *)&unsigned char buf[28] = 1024;
    __int16 v112 = 1024;
    __int16 v114 = 1024;
    __int16 v116 = 1024;
    __int16 v122 = 1024;
    __int16 v132 = 1024;
    __int16 v134 = 1024;
    __int16 v136 = 1024;
    __int16 v138 = 1024;
    __int16 v140 = 1024;
    __int16 v142 = 1024;
    __int16 v144 = 1024;
    __int16 v146 = 1024;
    __int16 v148 = 1024;
    __int16 v150 = 1024;
    __int16 v152 = 1024;
    __int16 v156 = 1024;
    __int16 v158 = 1024;
    __int16 v160 = 1024;
    __int16 v162 = 1024;
    __int16 v164 = 1024;
    __int16 v166 = 1024;
    __int16 v168 = 1024;
    __int16 v170 = 1024;
    __int16 v172 = 1024;
    __int16 v174 = 1024;
    __int16 v178 = 1024;
    __int16 v180 = 1024;
    __int16 v182 = 1024;
    *(_DWORD *)uint64_t buf = 134227968;
    double v121 = v89;
    CFAbsoluteTime v125 = Current;
    double v177 = v97;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "Timestamp,%f,StepCount,%d,Stride,%0.2f,Ascended,%d,Descended,%d,ElevationUp,%d,ElevationDown,%d,Pace,%f,ActiveTime,%f,DeltaSteps,%d,locationdGpsTime,%20.20f,startTime,%f,currentCadence,%f,FirstStepTime,%f,RelativeTimeOfLastStep,%d,FloorCountingSupported,%d,pedometerArmConstrainedState,%d,FlightState,%d,FlightFailResetUnknown,%d,FlightFailResetWater,%d,FlightFailResetFrozen,%d,FlightFailInOutTrans,%u,FlightFailElevDelta,%u,FlightFailStepsPerElevRate,%u,FlightsFailElevRate,%u,PressureAmplitude,%f,PressureTemperature,%hd,FalseStepDetectorAccelPoseXHigh,%u,FalseStepDetectorAccelVarXYZLow,%u,FalseStepDetectorGyroNumSamplesSufficient,%u,FalseStepDetectorGyroVarXHigh,%u,FalseStepDetectorConsecutiveRequirement,%u,IsVehicularLowConfidence,%u,IsVehicularHighConfidence,%u,FalseStepDetectorConsistentStepsProtection,%u,FalseStepsSuppressed,%u,AverageFilteredPressure,%f,StepCountCurrentlySimulated,%d,DefaultStepsPerHour,%i,DefaultStepDurationHours,%i", buf, 0x11Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102310470);
    }
    if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
    }
    sub_1000A16E8();
    double v99 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitStepCountUpdate(const CMMotionCoprocessorReply::StepCountUpdate *)", "%s\n", v99);
    if (v99 != buf) {
      free(v99);
    }
  }
}

double sub_1000A0190(uint64_t a1, long long *a2)
{
  if (sub_1000A026C(a1 + 128, a2, v4)) {
    *(void *)&double result = sub_1000A01D4((void *)(a1 + 24), (uint64_t)v4).n128_u64[0];
  }
  return result;
}

__n128 sub_1000A01D4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006ABDD0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_1000A026C(uint64_t a1, long long *a2, long long *a3)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102307260);
  }
  uint64_t v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *((void *)a2 + 1);
    int v8 = *((_DWORD *)a2 + 4);
    int v9 = *((_DWORD *)a2 + 5);
    int v10 = *((_DWORD *)a2 + 10);
    int v11 = *((unsigned __int8 *)a2 + 60);
    *(_DWORD *)uint64_t buf = 68290307;
    *(_DWORD *)uint64_t v232 = 0;
    *(_WORD *)&v232[4] = 2082;
    *(void *)&v232[6] = "";
    *(_WORD *)&v232[14] = 2050;
    *(void *)&v232[16] = v7;
    *(_WORD *)&v232[24] = 1025;
    *(_DWORD *)&v232[26] = v8;
    *(_WORD *)&v232[30] = 1025;
    *(_DWORD *)&v232[32] = v9;
    *(_WORD *)&v232[36] = 1026;
    *(_DWORD *)&v232[38] = v10;
    *(_WORD *)&v232[42] = 1026;
    *(_DWORD *)long long v233 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Input, Elevation,\", \"startTime\":\"%{public}.2f\", \"elevationAscended\":%{private}d, \"elevationDescended\":%{private}d, \"source\":%{public}d, \"isWorkoutElevationFusion\":%{public}hhd}", buf, 0x34u);
  }
  if (*((_DWORD *)a2 + 10) == 1000) {
    return 0;
  }
  double v12 = *((double *)a2 + 1);
  double v13 = *(double *)(a1 + 8);
  double v14 = vabdd_f64(v12, v13);
  int v15 = *((unsigned __int8 *)a2 + 60);
  int v16 = *(unsigned __int8 *)(a1 + 60);
  if (v14 > 30.0 || (v13 >= 0.0 ? (BOOL v17 = v15 == v16) : (BOOL v17 = 0), !v17))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102307260);
    }
    char v29 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
    {
      double v30 = *(double *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)uint64_t v232 = 0;
      *(_WORD *)&v232[4] = 2082;
      *(void *)&v232[6] = "";
      *(_WORD *)&v232[14] = 1026;
      *(_DWORD *)&v232[16] = v14 > 30.0;
      *(_WORD *)&v232[20] = 1026;
      *(_DWORD *)&v232[22] = v30 < 0.0;
      *(_WORD *)&v232[26] = 1026;
      *(_DWORD *)&v232[28] = v15 == v16;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Input, Elevation, Reset\", \"isTimeout\":%{public}hhd, \"isUninitialized\":%{public}hhd, \"isSameFusionMode\":%{public}hhd}", buf, 0x24u);
    }
    long long v31 = a2[2];
    long long v32 = a2[3];
    long long v33 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v33;
    *(_OWORD *)(a1 + 32) = v31;
    *(_OWORD *)(a1 + 48) = v32;
    *(float *)&long long v31 = (float)((float)*(unsigned int *)(a1 + 16) - (float)*(unsigned int *)(a1 + 20)) * 0.01;
    *(_DWORD *)(a1 + 72) = v31;
    *(void *)(a1 + 64) = *(void *)(a1 + 8);
    long long v34 = *(void ***)(a1 + 168);
    uint64_t v35 = *(void *)(a1 + 176);
    *(void *)(a1 + 200) = 0;
    unint64_t v36 = v35 - (void)v34;
    if (v36 >= 0x11)
    {
      do
      {
        operator delete(*v34);
        uint64_t v37 = *(void *)(a1 + 176);
        long long v34 = (void **)(*(void *)(a1 + 168) + 8);
        *(void *)(a1 + 168) = v34;
        unint64_t v36 = v37 - (void)v34;
      }
      while (v36 > 0x10);
    }
    if (v36 >> 3 == 1)
    {
      uint64_t v38 = 512;
    }
    else
    {
      if (v36 >> 3 != 2) {
        goto LABEL_40;
      }
      uint64_t v38 = 1024;
    }
    *(void *)(a1 + 192) = v38;
LABEL_40:
    long long v49 = *(void ***)(a1 + 216);
    uint64_t v50 = *(void *)(a1 + 224);
    *(void *)(a1 + 248) = 0;
    unint64_t v51 = v50 - (void)v49;
    if (v51 >= 0x11)
    {
      do
      {
        operator delete(*v49);
        uint64_t v52 = *(void *)(a1 + 224);
        long long v49 = (void **)(*(void *)(a1 + 216) + 8);
        *(void *)(a1 + 216) = v49;
        unint64_t v51 = v52 - (void)v49;
      }
      while (v51 > 0x10);
    }
    if (v51 >> 3 == 1)
    {
      uint64_t v53 = 512;
    }
    else
    {
      if (v51 >> 3 != 2)
      {
LABEL_47:
        *(_DWORD *)uint64_t buf = 0;
        sub_1000A1600((void *)(a1 + 160), (float *)buf);
        *(_DWORD *)uint64_t buf = 0;
        sub_1000A1600((void *)(a1 + 208), (float *)buf);
        return 0;
      }
      uint64_t v53 = 1024;
    }
    *(void *)(a1 + 240) = v53;
    goto LABEL_47;
  }
  double v212 = a3;
  float v18 = -(*(float *)(a1 + 72) - (float)((float)*((unsigned int *)a2 + 4) - (float)*((unsigned int *)a2 + 5)) * 0.01);
  float v19 = v12 - *(double *)(a1 + 64);
  float v215 = v19;
  float v216 = v18;
  sub_1000A1600((void *)(a1 + 160), &v215);
  sub_1000A1600((void *)(a1 + 208), &v216);
  unint64_t v20 = *(void *)(a1 + 192);
  unint64_t v21 = *(void *)(a1 + 200);
  uint64_t v22 = *(void *)(a1 + 168);
  float v23 = *(float *)(*(void *)(v22 + (((v21 + v20 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v21 + v20 - 1) & 0x3FF))
      - *(float *)(*(void *)(v22 + ((v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
  if (v23 > 120.0)
  {
    while (v21 >= 2)
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102307260);
      }
      double v24 = v23;
      double v25 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *(void *)(a1 + 200);
        *(_DWORD *)uint64_t buf = 134218240;
        *(void *)uint64_t v232 = v26;
        *(_WORD *)&v232[8] = 2048;
        *(double *)&v232[10] = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_102307260);
        }
        uint64_t v27 = *(void *)(a1 + 200);
        int v217 = 134218240;
        *(void *)int v218 = v27;
        *(_WORD *)&v218[8] = 2048;
        *(double *)&v218[10] = v24;
        int v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), (int64x2_t)xmmword_101D0A740);
      sub_1000A1688(a1 + 160, 1);
      *(int64x2_t *)(a1 + 240) = vaddq_s64(*(int64x2_t *)(a1 + 240), (int64x2_t)xmmword_101D0A740);
      sub_1000A1688(a1 + 208, 1);
      unint64_t v21 = *(void *)(a1 + 200);
      unint64_t v20 = *(void *)(a1 + 192);
      uint64_t v22 = *(void *)(a1 + 168);
      float v23 = *(float *)(*(void *)(v22 + (((v21 + v20 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v21 + v20 - 1) & 0x3FF))
          - *(float *)(*(void *)(v22 + ((v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
      if (v23 <= 120.0) {
        goto LABEL_34;
      }
    }
    return 0;
  }
LABEL_34:
  if (v21 < 2) {
    return 0;
  }
  unint64_t v39 = *(void *)(a1 + 248);
  if (v39 < 2) {
    return 0;
  }
  unint64_t v40 = v21 + v20 - 1;
  uint64_t v41 = *(void *)(v22 + ((v40 >> 7) & 0x1FFFFFFFFFFFFF8));
  int v42 = *(float **)(a1 + 88);
  unint64_t v43 = v40 & 0x3FF;
  uint64_t v44 = *(void *)(a1 + 240);
  unint64_t v45 = v39 + v44 - 1;
  uint64_t v46 = *(void *)(a1 + 216);
  uint64_t v47 = *(void *)(a1 + 176);
  int v211 = (char *)(v22 + 8 * (v20 >> 10));
  if (v47 == v22) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = *(void *)(v22 + 8 * (v20 >> 10)) + 4 * (v20 & 0x3FF);
  }
  float v55 = *(float *)(v41 + 4 * v43);
  float v56 = *v42;
  float v57 = v42[1];
  uint64_t v213 = *(void *)(a1 + 88);
  uint64_t v58 = *(void *)(v46 + ((v45 >> 7) & 0x1FFFFFFFFFFFFF8));
  unint64_t v59 = v45 & 0x3FF;
  unint64_t v60 = *(void *)(a1 + 144);
  unint64_t v61 = v60 + *(void *)(a1 + 152);
  uint64_t v62 = *(void *)(a1 + 120);
  uint64_t v63 = *(void *)(a1 + 128);
  int v64 = (uint64_t *)(v62 + 8 * (v61 >> 10));
  if (v63 == v62) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = *v64 + 4 * (v61 & 0x3FF);
  }
  float v66 = *(float *)(v58 + 4 * v59);
  float v67 = v57 + (float)(v56 * v55);
  __int16 v68 = v44 + v39;
  uint64_t v69 = (uint64_t *)(v46 + 8 * ((v44 + v39) >> 10));
  if (*(void *)(a1 + 224) == v46) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = *v69 + 4 * (v68 & 0x3FF);
  }
  float v71 = v67 - v66;
  uint64_t v72 = (uint64_t *)(v22 + 8 * ((v20 + v21) >> 10));
  __int16 v208 = v20 + v21;
  if (v47 == v22) {
    uint64_t v73 = 0;
  }
  else {
    uint64_t v73 = *v72 + 4 * (((_WORD)v20 + (_WORD)v21) & 0x3FF);
  }
  uint64_t v209 = (uint64_t *)(v22 + 8 * ((v20 + v21) >> 10));
  uint64_t v210 = *(void *)(a1 + 176);
  float v74 = v71 * v71;
  if (v73 == v48)
  {
    float v79 = 0.0;
    float v78 = 0.0;
    float v77 = 0.0;
    float v76 = 0.0;
    float v75 = 0.0;
  }
  else
  {
    unint64_t v214 = v60 >> 10;
    float v75 = 0.0;
    float v76 = 0.0;
    float v77 = 0.0;
    float v78 = 0.0;
    float v79 = 0.0;
    do
    {
      if (v63 == v62) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = *(void *)(v62 + 8 * v214) + 4 * (*(void *)(a1 + 144) & 0x3FFLL);
      }
      if (v65 == v80) {
        break;
      }
      uint64_t v81 = *v64;
      uint64_t v82 = v65;
      if (v65 == *v64) {
        uint64_t v82 = *(v64 - 1) + 4096;
      }
      uint64_t v83 = *v69;
      uint64_t v84 = v70;
      if (v70 == *v69) {
        uint64_t v84 = *(v69 - 1) + 4096;
      }
      uint64_t v85 = *v72;
      uint64_t v86 = v73;
      if (v73 == *v72) {
        uint64_t v86 = *(v72 - 1) + 4096;
      }
      uint64_t v87 = v65;
      if (v65 == v81) {
        uint64_t v87 = *(v64 - 1) + 4096;
      }
      uint64_t v88 = v73;
      if (v73 == v85) {
        uint64_t v88 = *(v72 - 1) + 4096;
      }
      uint64_t v89 = v65;
      if (v65 == v81) {
        uint64_t v89 = *(v64 - 1) + 4096;
      }
      uint64_t v90 = v70;
      if (v70 == v83) {
        uint64_t v90 = *(v69 - 1) + 4096;
      }
      uint64_t v91 = v65;
      if (v65 == v81) {
        uint64_t v91 = *(v64 - 1) + 4096;
      }
      uint64_t v92 = v73;
      if (v73 == v85) {
        uint64_t v92 = *(v72 - 1) + 4096;
      }
      if (v65 == v81)
      {
        uint64_t v93 = *--v64;
        uint64_t v65 = v93 + 4096;
      }
      float v94 = *(float *)(v82 - 4);
      if (v70 == v83)
      {
        uint64_t v95 = *--v69;
        uint64_t v70 = v95 + 4096;
      }
      if (v73 == v85)
      {
        uint64_t v96 = *--v72;
        uint64_t v73 = v96 + 4096;
      }
      float v79 = v79 + v94;
      float v78 = v78 + (float)((float)(v94 * *(float *)(v84 - 4)) * *(float *)(v86 - 4));
      float v77 = v77 + (float)(*(float *)(v87 - 4) * *(float *)(v88 - 4));
      float v76 = v76 + (float)(*(float *)(v89 - 4) * *(float *)(v90 - 4));
      float v75 = v75 + (float)((float)(*(float *)(v91 - 4) * *(float *)(v92 - 4)) * *(float *)(v92 - 4));
      v65 -= 4;
      v70 -= 4;
      v73 -= 4;
    }
    while (v73 != v48);
  }
  double v97 = (float)((float)(v79 * v78) - (float)(v77 * v76));
  double v98 = (float)(v79 * v75) - v77 * v77;
  *(float *)&double v97 = v97 / v98;
  float v99 = (float)((float)(v75 * v76) - (float)(v77 * v78)) / v98;
  *(_DWORD *)uint64_t v213 = LODWORD(v97);
  *(float *)(v213 + 4) = v99;
  if (v74 > 2.0)
  {
    uint64_t v100 = *v209;
    if (v210 == v22)
    {
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      uint64_t v101 = v211;
    }
    else
    {
      uint64_t v101 = (char *)(v22 + 8 * (v20 >> 10));
      uint64_t v102 = *(void *)v211 + 4 * (v20 & 0x3FF);
      uint64_t v103 = v100 + 4 * (v208 & 0x3FF);
    }
    uint64_t v104 = v103 - v100;
    uint64_t v105 = (v103 - v100) >> 2;
    if (v104 < 9)
    {
      unint64_t v109 = 1025 - v105;
      int v107 = (char *)&v209[-(v109 >> 10)];
      uint64_t v108 = *(void *)v107 + 4 * (~(_WORD)v109 & 0x3FF);
    }
    else
    {
      unint64_t v106 = v105 - 2;
      int v107 = (char *)&v209[v106 >> 10];
      uint64_t v108 = *(void *)v107 + 4 * (v106 & 0x3FF);
    }
    sub_100F857D0((void *)(a1 + 160), v101, v102, v107, v108);
    unint64_t v110 = *(void *)(a1 + 240);
    uint64_t v111 = *(void *)(a1 + 216);
    __int16 v112 = (char *)(v111 + 8 * (v110 >> 10));
    if (*(void *)(a1 + 224) == v111)
    {
      uint64_t v113 = 0;
      uint64_t v117 = 0;
      int v115 = (uint64_t *)(v111 + 8 * ((*(void *)(a1 + 248) + v110) >> 10));
      uint64_t v116 = *v115;
    }
    else
    {
      uint64_t v113 = *(void *)v112 + 4 * (*(void *)(a1 + 240) & 0x3FFLL);
      unint64_t v114 = *(void *)(a1 + 248) + v110;
      int v115 = (uint64_t *)(v111 + 8 * (v114 >> 10));
      uint64_t v116 = *v115;
      uint64_t v117 = *v115 + 4 * (v114 & 0x3FF);
    }
    uint64_t v118 = v117 - v116;
    uint64_t v119 = v118 >> 2;
    if (v118 < 9)
    {
      unint64_t v124 = 1025 - v119;
      double v121 = (char *)&v115[-(v124 >> 10)];
      uint64_t v122 = *(void *)v121;
      uint64_t v123 = ~v124 & 0x3FFLL;
    }
    else
    {
      unint64_t v120 = v119 - 2;
      double v121 = (char *)&v115[v120 >> 10];
      uint64_t v122 = *(void *)v121;
      uint64_t v123 = v120 & 0x3FF;
    }
    sub_100F857D0((void *)(a1 + 208), v112, v113, v121, v122 + 4 * v123);
    unint64_t v125 = *(void *)(a1 + 192);
    unint64_t v126 = v125 >> 10;
    uint64_t v127 = *(void *)(a1 + 168);
    uint64_t v128 = *(void *)(a1 + 176);
    if (v128 == v127) {
      uint64_t v129 = 0;
    }
    else {
      uint64_t v129 = *(void *)(v127 + 8 * v126) + 4 * (*(void *)(a1 + 192) & 0x3FFLL);
    }
    unint64_t v130 = *(void *)(a1 + 240);
    unint64_t v131 = v130 + *(void *)(a1 + 248);
    uint64_t v132 = *(void *)(a1 + 216);
    int v133 = (void *)(v132 + 8 * (v131 >> 10));
    if (*(void *)(a1 + 224) == v132) {
      uint64_t v134 = 0;
    }
    else {
      uint64_t v134 = *v133 + 4 * (v131 & 0x3FF);
    }
    unint64_t v136 = *(void *)(a1 + 200) + v125;
    int v137 = (uint64_t *)(v127 + 8 * (v136 >> 10));
    if (v128 == v127) {
      uint64_t v138 = 0;
    }
    else {
      uint64_t v138 = *v137 + 4 * (v136 & 0x3FF);
    }
    float v139 = (float)((float)*(unsigned int *)(a1 + 16) - (float)*(unsigned int *)(a1 + 20)) * 0.01;
    float v135 = *(double *)(a1 + 8);
    double v140 = v135;
    if (v138 != v129)
    {
      double v141 = *(double *)(a1 + 64);
      uint64_t v142 = *v137;
      do
      {
        uint64_t v143 = v138;
        if (v138 == v142) {
          uint64_t v143 = *(v137 - 1) + 4096;
        }
        float v144 = v141 + *(float *)(v143 - 4) - v140;
        *(float *)(v143 - 4) = v144;
        if (v134 == *v133)
        {
          uint64_t v145 = *--v133;
          *(float *)(v145 + 4092) = (float)(*(float *)(v145 + 4092) + *(float *)(a1 + 72)) - v139;
          uint64_t v134 = v145 + 4096;
        }
        else
        {
          *(float *)(v134 - 4) = (float)(*(float *)(v134 - 4) + *(float *)(a1 + 72)) - v139;
        }
        if (v138 == v142)
        {
          uint64_t v146 = *--v137;
          uint64_t v142 = v146;
          uint64_t v138 = v146 + 4096;
        }
        v134 -= 4;
        v138 -= 4;
      }
      while (v138 != v129);
    }
    *(double *)(a1 + 64) = v140;
    *(float *)(a1 + 72) = v139;
    float v147 = *(float *)(*(void *)(v132 + (((v130 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v130 + 1) & 0x3FF));
    uint64_t v148 = *(void *)(v132 + ((v130 >> 7) & 0x1FFFFFFFFFFFFF8));
    uint64_t v149 = v130 & 0x3FF;
    uint64_t v150 = *(void *)(v127 + (((v125 + 1) >> 7) & 0x1FFFFFFFFFFFFF8));
    uint64_t v151 = (v125 + 1) & 0x3FF;
    uint64_t v152 = *(void *)(v127 + 8 * v126);
    uint64_t v153 = v125 & 0x3FF;
    float v154 = (float)(v147 - *(float *)(v148 + 4 * v149))
         / (float)(*(float *)(v150 + 4 * v151) - *(float *)(v152 + 4 * v153));
    double v155 = *(float **)(a1 + 88);
    *double v155 = v154;
    v155[1] = *(float *)(v148 + 4 * v149) - (float)(v154 * *(float *)(v152 + 4 * v153));
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102307260);
    }
    __int16 v156 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v157 = *((void *)a2 + 1);
      int v158 = *((_DWORD *)a2 + 4);
      int v159 = *((_DWORD *)a2 + 5);
      *(_DWORD *)uint64_t buf = 134219008;
      *(void *)uint64_t v232 = v157;
      *(_WORD *)&v232[8] = 1024;
      *(_DWORD *)&v232[10] = v158;
      *(_WORD *)&v232[14] = 1024;
      *(_DWORD *)&v232[16] = v159;
      *(_WORD *)&v232[20] = 2048;
      *(double *)&v232[22] = v216;
      *(_WORD *)&v232[30] = 2048;
      *(double *)&v232[32] = v74;
      _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_DEBUG, "Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102307260);
      }
      uint64_t v204 = *((void *)a2 + 1);
      int v205 = *((_DWORD *)a2 + 4);
      int v206 = *((_DWORD *)a2 + 5);
      int v217 = 134219008;
      *(void *)int v218 = v204;
      *(_WORD *)&v218[8] = 1024;
      *(_DWORD *)&v218[10] = v205;
      *(_WORD *)&v218[14] = 1024;
      *(_DWORD *)&v218[16] = v206;
      *(_WORD *)&v218[20] = 2048;
      *(double *)&v218[22] = v216;
      *(_WORD *)&v218[30] = 2048;
      *(double *)&v218[32] = v74;
      uint64_t v207 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v207);
      if (v207 != (char *)buf) {
        free(v207);
      }
    }
  }
  unint64_t v160 = *(void *)(a1 + 192);
  float v161 = **(float **)(a1 + 88);
  float v162 = v161
       * (float)(*(float *)(*(void *)(*(void *)(a1 + 168)
                                      + (((*(void *)(a1 + 200) + v160 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((*(void *)(a1 + 200) + v160 - 1) & 0x3FF))
               - *(float *)(*(void *)(*(void *)(a1 + 168) + ((v160 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v160 & 0x3FF)));
  double v163 = *((double *)a2 + 1);
  if (v163 - *(double *)(a1 + 80) > 15.0)
  {
    *(unsigned char *)(a1 + 76) = 0;
    *(void *)(a1 + 80) = 0xBFF0000000000000;
  }
  if (v162 <= 2.0)
  {
    if (v162 >= -2.0)
    {
      BOOL v164 = *(unsigned char *)(a1 + 76) != 0;
      if (*(unsigned char *)(a1 + 76)) {
        int v165 = 3;
      }
      else {
        int v165 = 2;
      }
    }
    else
    {
      *(double *)(a1 + 80) = v163;
      BOOL v164 = 1;
      *(unsigned char *)(a1 + 76) = 1;
      int v165 = 3;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 76) = 0;
    BOOL v164 = 1;
    int v165 = 1;
  }
  sub_100103240();
  uint64_t v166 = sub_1000A16E8();
  double v167 = v161;
  int v168 = *((_DWORD *)a2 + 10);
  if ((v166 & 0x1000000000) == 0)
  {
    BOOL v169 = v168 == 1 && v164;
    __int16 v170 = v212;
    if (v168 != 3 && !v169) {
      goto LABEL_147;
    }
    goto LABEL_146;
  }
  __int16 v170 = v212;
  if (v168 == 3) {
LABEL_146:
  }
    int v165 = 0;
LABEL_147:
  long long v171 = a2[3];
  long long v172 = *a2;
  long long v173 = a2[1];
  v170[2] = a2[2];
  v170[3] = v171;
  *__int16 v170 = v172;
  v170[1] = v173;
  *((_DWORD *)v170 + 6) = v165;
  *((double *)v170 + 4) = v167;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102307260);
  }
  double v174 = v162;
  int v175 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v176 = *((_DWORD *)v170 + 6);
    uint64_t v177 = *((void *)a2 + 1);
    __int16 v178 = *(float **)(a1 + 88);
    double v179 = *v178;
    double v180 = v178[1];
    uint64_t v181 = *(void *)(a1 + 168);
    double v182 = *(float *)(*(void *)(v181
                                + (((unint64_t)(*(void *)(a1 + 200) + *(void *)(a1 + 192) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((*(void *)(a1 + 200) + *(void *)(a1 + 192) - 1) & 0x3FF));
    double v183 = *(float *)(*(void *)(v181 + ((*(void *)(a1 + 192) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (*(void *)(a1 + 192) & 0x3FFLL));
    LODWORD(v178) = *((_DWORD *)a2 + 4);
    int v184 = *((_DWORD *)a2 + 5);
    *(_DWORD *)uint64_t buf = 67111680;
    *(_DWORD *)uint64_t v232 = v176;
    *(_WORD *)&v232[4] = 2048;
    *(void *)&v232[6] = v177;
    *(_WORD *)&v232[14] = 2048;
    *(double *)&v232[16] = v174;
    *(_WORD *)&v232[24] = 2048;
    *(double *)&v232[26] = v167;
    *(_WORD *)&v232[34] = 2048;
    *(double *)&v232[36] = v179;
    *(_WORD *)long long v233 = 2048;
    *(double *)&v233[2] = v180;
    __int16 v234 = 2048;
    double v235 = v182;
    __int16 v236 = 2048;
    double v237 = v183;
    __int16 v238 = 1024;
    int v239 = (int)v178;
    __int16 v240 = 1024;
    int v241 = v184;
    __int16 v242 = 2048;
    double v243 = v216;
    _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEBUG, "Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, fParam_m, %f, fParam_b, %f,fTimeBufferFront, %f,fTimeBufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f", buf, 0x64u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102307260);
    }
    int v191 = *((_DWORD *)v212 + 6);
    uint64_t v192 = *((void *)a2 + 1);
    int v193 = *(float **)(a1 + 88);
    double v194 = *v193;
    double v195 = v193[1];
    uint64_t v196 = *(void *)(a1 + 168);
    double v197 = *(float *)(*(void *)(v196
                                + (((unint64_t)(*(void *)(a1 + 200) + *(void *)(a1 + 192) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((*(void *)(a1 + 200) + *(void *)(a1 + 192) - 1) & 0x3FF));
    double v198 = *(float *)(*(void *)(v196 + ((*(void *)(a1 + 192) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (*(void *)(a1 + 192) & 0x3FFLL));
    LODWORD(v193) = *((_DWORD *)a2 + 4);
    int v199 = *((_DWORD *)a2 + 5);
    int v217 = 67111680;
    *(_DWORD *)int v218 = v191;
    *(_WORD *)&v218[4] = 2048;
    *(void *)&v218[6] = v192;
    *(_WORD *)&v218[14] = 2048;
    *(double *)&v218[16] = v174;
    *(_WORD *)&v218[24] = 2048;
    *(double *)&v218[26] = v167;
    *(_WORD *)&v218[34] = 2048;
    *(double *)&v218[36] = v194;
    __int16 v219 = 2048;
    double v220 = v195;
    __int16 v221 = 2048;
    double v222 = v197;
    __int16 v223 = 2048;
    double v224 = v198;
    __int16 v225 = 1024;
    int v226 = (int)v193;
    __int16 v227 = 1024;
    int v228 = v199;
    __int16 v229 = 2048;
    double v230 = v216;
    uint64_t v200 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v200);
    if (v200 != (char *)buf) {
      free(v200);
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102307260);
  }
  uint64_t v185 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v186 = *((_DWORD *)v212 + 6);
    uint64_t v187 = *((void *)v212 + 4);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)uint64_t v232 = v186;
    *(_WORD *)&v232[4] = 2048;
    *(void *)&v232[6] = v187;
    _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEBUG, "Input, Elevation, Hardware gradeTypeFilter, gradeType, %d, vspeed, %.4f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102307260);
    }
    int v201 = *((_DWORD *)v212 + 6);
    uint64_t v202 = *((void *)v212 + 4);
    int v217 = 67109376;
    *(_DWORD *)int v218 = v201;
    *(_WORD *)&v218[4] = 2048;
    *(void *)&v218[6] = v202;
    double v203 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v203);
    if (v203 != (char *)buf) {
      free(v203);
    }
  }
  long long v188 = *v212;
  long long v189 = v212[1];
  long long v190 = v212[3];
  *(_OWORD *)(a1 + 32) = v212[2];
  *(_OWORD *)(a1 + 48) = v190;
  *(_OWORD *)a1 = v188;
  *(_OWORD *)(a1 + 16) = v189;
  return 1;
}

float sub_1000A1600(void *a1, float *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1003A75FC(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  float result = *a2;
  *(float *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

uint64_t sub_1000A1688(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t sub_1000A16E8()
{
  if (qword_10247D5B8 != -1) {
    dispatch_once(&qword_10247D5B8, &stru_1022C68F0);
  }
  return qword_10247D5C0;
}

id sub_1000A172C(uint64_t a1, int a2, void *a3)
{
  id result = sub_1000A22CC(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000A177C(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BCE80);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v27 = 0;
    __int16 v28 = 2082;
    *(void *)char v29 = "";
    *(_WORD *)&v29[8] = 2082;
    *(void *)&v29[10] = "activity";
    __int16 v30 = 2082;
    long long v31 = v10;
    __int16 v32 = 2050;
    long long v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  double v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      BOOL v17 = (uint64_t *)v12;
    }
    else {
      BOOL v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      double v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    long long v34 = v35;
    memset(v35, 0, sizeof(v35));
    unint64_t v36 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v34);
    double v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v33) {
      sub_1000DB0A0(v33);
    }
    sub_1000F5BB0((uint64_t)&v28, *(void **)&v29[6]);
    if (v36) {
      sub_1000DB0A0(v36);
    }
    sub_1000F5BB0((uint64_t)&v34, v35[0]);
  }
  if (a4)
  {
    float v18 = (char *)operator new(0xB8uLL);
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = a3[4];
    *(_OWORD *)(v18 + 104) = a3[5];
    *(_OWORD *)(v18 + 88) = v20;
    long long v21 = a3[2];
    *(_OWORD *)(v18 + 72) = a3[3];
    *(_OWORD *)(v18 + 56) = v21;
    long long v22 = a3[8];
    *(_OWORD *)(v18 + 168) = a3[9];
    *(_OWORD *)(v18 + 152) = v22;
    long long v23 = a3[6];
    *(_OWORD *)(v18 + 136) = a3[7];
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)float v18 = off_1022BCFD0;
    *(_OWORD *)(v18 + 120) = v23;
    double v24 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v24) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  double v24 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v24) {
LABEL_27:
  }
    sub_1000DB0A0(v24);
LABEL_28:
  if (v14[7]) {
    sub_1000A2728();
  }
  os_activity_scope_leave(&state);
}

void sub_1000A1D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1000A1DE4(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_1000A22CC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        double v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                long long v22 = (uint64_t *)v17;
              }
              else {
                long long v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_1000A21D4(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              double v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    unint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    unint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      double v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  unint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      double v14 = v43;
                      unint64_t v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      double v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BCE80);
              }
              double v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                double v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  double v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                float v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BCE80);
                }
                unint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  unint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                unint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1000A21D4(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1000A22CC(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    double v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

id sub_1000A22CC(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1005B084C(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1000A2368(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1000A2368(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD010);
      }
      unint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23AD0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD010);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23AD0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD010);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1000A2728()
{
}

void sub_1000A27F4(uint64_t a1, const CLMotionActivity *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000A29D0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000A29B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A29D0(uint64_t a1, uint64_t a2, const CLMotionActivity *a3, int *a4)
{
  if (a3->type == 9)
  {
    sub_1000A2A3C(a1, (uint64_t)a4);
  }
  else if (a3->type == 1)
  {
    sub_1015403D0(a1, a4, a3);
  }
  sub_1000A32B8(a1);

  sub_1000A2E3C(a1);
}

void sub_1000A2A3C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 20) <= 150.0 && vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a2 + 76)) <= 30.0)
  {
    if (*(unsigned char *)(a1 + 1104))
    {
      double v4 = *(double *)(a1 + 1232) + 60.0;
      if (v4 < sub_1000A3D9C(*(double *)(a1 + 1240), *(double *)(a1 + 1248), *(double *)(a2 + 4), *(double *)(a2 + 12)))
      {
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        uint64_t v5 = qword_102419018;
        if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "VEHICULAR: too far from center of DNDLOI", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419010 != -1) {
            dispatch_once(&qword_102419010, &stru_10232CCD0);
          }
          __int16 v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVisitByLocation(const CLClientLocation &)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
        sub_10154087C(a1);
      }
    }
    else
    {
      int v6 = (double *)(a1 + 1256);
      if (sub_1000A3D9C(*(double *)(a1 + 1256), *(double *)(a1 + 1264), *(double *)(a2 + 4), *(double *)(a2 + 12)) >= 10.0
        || !*(unsigned char *)(a1 + 1209)
        || *(double *)(a1 + 1264) == kCLLocationCoordinate2DInvalid.longitude
        || *v6 == kCLLocationCoordinate2DInvalid.latitude)
      {
        *(_OWORD *)int v6 = *(_OWORD *)(a2 + 4);
        if (*(void *)(a1 + 1152) == 2 || *(unsigned char *)(a1 + 1208) || !*(unsigned char *)(a1 + 1209))
        {
          sub_1015416A8(a1, (_OWORD *)a2);
        }
      }
      else
      {
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        uint64_t v7 = qword_102419018;
        if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "VEHICULAR: skipping repeated nearby location", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419010 != -1) {
            dispatch_once(&qword_102419010, &stru_10232CCD0);
          }
          id v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVisitByLocation(const CLClientLocation &)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
      }
    }
  }
}

void sub_1000A2E3C(uint64_t a1)
{
  uint64_t v2 = sub_1000A387C(a1);
  int v3 = v2;
  if (v2)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    double v4 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[MotionCues] suppressed vehicular", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateMotionCues()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = sub_1000A3804(v2, (_DWORD *)(a1 + 936), (double *)(a1 + 144));
  }
  if (CLMotionActivity::isTypeInVehicle()) {
    uint64_t v6 = *(unsigned char *)(a1 + 1032) & 0x1F;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0) {
    uint64_t v7 = v6 | 0x10;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v9 = *(_DWORD *)(a1 + 1272) == 1 || *(void *)(a1 + 1280) == 1;
  if (v5 != *(void *)(a1 + 1184) || v7 != *(void *)(a1 + 1192) || *(void *)(a1 + 1200) != v9)
  {
    if (*(_DWORD *)(a1 + 1136) == 3)
    {
      uint64_t v10 = *(void *)(a1 + 1152);
      if (v5 != 2 || v10 == 2)
      {
        BOOL v13 = v5 == 2 || v10 != 2;
        if (v13 || *(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0) {
          int v11 = 0;
        }
        else {
          int v11 = 2;
        }
      }
      else
      {
        int v11 = 1;
      }
    }
    else
    {
      int v11 = 2;
    }
    sub_101540CBC((id *)a1, v11);
    *(void *)(a1 + 1184) = v5;
    *(void *)(a1 + 1192) = v7;
    *(void *)(a1 + 1200) = v9;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    __int16 v14 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(unsigned __int8 *)(a1 + 1104);
      int v16 = *(unsigned __int8 *)(a1 + 1208);
      int v17 = sub_100016E64(*(void *)(a1 + 1112));
      int v18 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)uint64_t buf = 134350592;
      uint64_t v22 = v5;
      __int16 v23 = 2050;
      uint64_t v24 = v7;
      __int16 v25 = 1026;
      int v26 = v3;
      __int16 v27 = 1026;
      int v28 = v15;
      __int16 v29 = 1026;
      int v30 = v16;
      __int16 v31 = 1026;
      int v32 = v17;
      __int16 v33 = 1026;
      int v34 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[MotionCues] VEHICULAR: motionCues, state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      sub_100016E64(*(void *)(a1 + 1112));
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateMotionCues()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    sub_101542118(a1);
  }
}

void sub_1000A32B8(uint64_t a1)
{
  uint64_t v2 = sub_1000A387C(a1);
  int v24 = v2;
  if (v2) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = sub_1000A3804(v2, (_DWORD *)(a1 + 936), (double *)(a1 + 144));
  }
  BOOL v4 = 0;
  if (*(double *)(a1 + 144) <= 0.0)
  {
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = v3;
    if (*(double *)(a1 + 152) < 0.0)
    {
      BOOL v4 = *(_DWORD *)(a1 + 1136) == 2;
      if (*(_DWORD *)(a1 + 1136) == 2) {
        uint64_t v5 = 2;
      }
      else {
        uint64_t v5 = v3;
      }
    }
  }
  if (CLMotionActivity::isTypeInVehicle()) {
    uint64_t v6 = *(unsigned char *)(a1 + 1032) & 0x1F;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0) {
    uint64_t v7 = v6 | 0x10;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v9 = *(_DWORD *)(a1 + 1272) == 1 || *(void *)(a1 + 1280) == 1;
  uint64_t v10 = *(void *)(a1 + 1152);
  if (v5 != *(void *)(a1 + 1144)
    || v3 != v10
    || (uint64_t v10 = v3, v7 != *(void *)(a1 + 1160))
    || (uint64_t v10 = v3, *(void *)(a1 + 1168) != v9))
  {
    if (*(_DWORD *)(a1 + 1136) == 3)
    {
      if (v3 != 2 || v10 == 2)
      {
        BOOL v13 = v3 == 2 || v10 != 2;
        if (v13 || *(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0) {
          int v11 = 0;
        }
        else {
          int v11 = 2;
        }
      }
      else
      {
        int v11 = 1;
      }
    }
    else
    {
      int v11 = 2;
    }
    sub_101540CBC((id *)a1, v11);
    *(void *)(a1 + 1144) = v5;
    *(void *)(a1 + 1152) = v3;
    *(void *)(a1 + 1160) = v7;
    *(void *)(a1 + 1168) = v9;
    __int16 v14 = &qword_102419000;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    int v15 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(unsigned __int8 *)(a1 + 1104);
      int v17 = *(unsigned __int8 *)(a1 + 1208);
      int v18 = sub_100016E64(*(void *)(a1 + 1112));
      int v19 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)uint64_t buf = 134350848;
      CFStringRef v26 = (const __CFString *)v3;
      __int16 v27 = 2050;
      uint64_t v28 = v7;
      __int16 v29 = 1026;
      int v30 = v24;
      __int16 v31 = 1026;
      int v32 = v16;
      __int16 v14 = &qword_102419000;
      __int16 v33 = 1026;
      int v34 = v17;
      __int16 v35 = 1026;
      int v36 = v18;
      __int16 v37 = 1026;
      int v38 = v19;
      __int16 v39 = 1026;
      BOOL v40 = v4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "VEHICULAR: state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u, dndOverride, %{public}u", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      sub_100016E64(*(void *)(a1 + 1112));
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVehicularDnd()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      __int16 v14 = &qword_102419000;
    }
    uint64_t v20 = *(void *)(a1 + 1568);
    if (v20)
    {
      sub_100D0CB2C(v20, v5, v9, v7);
      if (sub_100D0CA04(*(void *)(a1 + 1568)))
      {
        AnalyticsSendEvent();
        if (v14[2] != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        BOOL v21 = qword_102419018;
        if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 138412290;
          CFStringRef v26 = @"com.apple.carexperience.vehiclestate";
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "VEHICULAR: submitted metrics, %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v14[2] != -1) {
            dispatch_once(&qword_102419010, &stru_10232CCD0);
          }
          __int16 v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVehicularDnd()", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
      }
    }
    sub_10153FD98(a1);
    sub_101542400((void *)a1);
  }
}

uint64_t sub_1000A3804(uint64_t a1, _DWORD *a2, double *a3)
{
  BOOL v5 = a3[1] > 0.0 && *a3 > 0.0;
  if ((CLMotionActivity::isTypeInVehicle() & 1) != 0 || *a3 > 0.0 && a3[1] < 0.0) {
    return 2;
  }
  if (*a2) {
    return 1;
  }
  return v5;
}

uint64_t sub_1000A387C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1292)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 1104) && !*(unsigned char *)(a1 + 1208)) {
    return 0;
  }
  uint64_t result = sub_100016E64(*(void *)(a1 + 1112));
  if (result) {
    return *(unsigned char *)(a1 + 1140) == 0;
  }
  return result;
}

void sub_1000A38DC(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
}

void sub_1000A38E4(uint64_t a1, _DWORD *a2, unsigned char *a3)
{
  if (*a2 == 6)
  {
    *(unsigned char *)(a1 + 1417) = *a3;
    int v4 = *(unsigned __int8 *)(a1 + 1416);
    goto LABEL_5;
  }
  if (*a2 == 5)
  {
    int v4 = *a3;
    *(unsigned char *)(a1 + 1416) = v4;
LABEL_5:
    LOBYTE(v14) = 25;
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = *(unsigned char *)(a1 + 1417) != 0;
    }
    HIBYTE(v14) = v5;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    id v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int8 *)(a1 + 1417);
      int v10 = *(unsigned __int8 *)(a1 + 1416);
      *(_DWORD *)uint64_t buf = 67109632;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v10;
      __int16 v25 = 1024;
      BOOL v26 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending induced motion: touch, %d, vibe, %d, sum, %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      int v11 = *(unsigned __int8 *)(a1 + 1417);
      int v12 = *(unsigned __int8 *)(a1 + 1416);
      int v15 = 67109632;
      int v16 = v11;
      __int16 v17 = 1024;
      int v18 = v12;
      __int16 v19 = 1024;
      BOOL v20 = v5;
      BOOL v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onInducedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_1000A3C58(a1 + 192, &v14, 0);
    return;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Unhandled notification from CLMotionState in CLMotionCoprocessor.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    LOWORD(v15) = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::onInducedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1000A3C58(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    _DWORD v8[2] = 0x3812000000;
    void v8[3] = sub_100176938;
    v8[4] = nullsub_48;
    v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      int v4 = _Block_copy(aBlock);
    }
    else {
      int v4 = 0;
    }
    uint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100171FD4;
    v7[3] = &unk_1022BCA88;
    v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    BOOL v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1000A3D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

long double sub_1000A3DA0(double a1, double a2, double a3, double a4)
{
  if (sub_1000F1724(a1, a2, a3, a4))
  {
    return sub_101171810(a1, a2, a3, a4);
  }
  else
  {
    double v10 = 0.0;
    double v11 = 0.0;
    sub_1000A3E54(&v11, &v10, &v9, a1, a2, 0.0, a3, a4, 0.0);
    return sqrt(v10 * v10 + v11 * v11);
  }
}

double sub_1000A3E54(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v14 = 360.0;
  if (a5 < 0.0) {
    a5 = a5 + 360.0;
  }
  if (a8 < 0.0) {
    a8 = a8 + 360.0;
  }
  double v15 = a8 - a5;
  if (v15 > 180.0)
  {
    double v14 = -360.0;
LABEL_8:
    double v15 = v15 + v14;
    goto LABEL_9;
  }
  if (v15 < -180.0) {
    goto LABEL_8;
  }
LABEL_9:
  double v16 = (a7 - a4) * 0.0174532925;
  double v17 = (a6 + a9) * 0.5;
  double v18 = v15 * 0.0174532925;
  __double2 v19 = __sincos_stret((a4 + a7) * 0.0174532925 * 0.5);
  double v20 = sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
  *a1 = v16 * (v17 + 6335439.33 / (v20 * (v20 * v20)));
  *a2 = v19.__cosval * (v17 + 6378137.0 / v20) * v18;
  double result = a9 - a6;
  *a3 = a9 - a6;
  return result;
}

uint64_t sub_1000A3F84(uint64_t a1, int a2, double a3)
{
  int v6 = a2;
  double v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, double *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1000A3FE0(uint64_t a1, int *a2, double *a3)
{
  double v3 = *a3;
  int v4 = *(uint64_t **)(a1 + 8);
  sub_1000A4034(*v4, *a2, *a3);

  return sub_1000A4414(v4, v3);
}

uint64_t *sub_1000A4034(uint64_t a1, int a2, double a3)
{
  int v13 = a2;
  *(unsigned char *)a1 = 1;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C8090);
  }
  int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v19) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "AmbientLightDecisionTreeOutput,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C8090);
    }
    int v14 = 67240192;
    LODWORD(v15) = a2;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::ALSProcessor::measurementInput(const CLAmbientLightDecisionTreeOutput, const CFTimeInterval)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (vabdd_f64(a3, *(double *)(a1 + 16)) > 1.0)
  {
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)a1 = 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C8090);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 134349312;
      double v19 = a3;
      __int16 v20 = 2050;
      uint64_t v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "ALSProcessor,FilterReset,timestamp,%{public}.2f,lastTimestamp,%{public}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C8090);
      }
      uint64_t v11 = *(void *)(a1 + 16);
      int v14 = 134349312;
      double v15 = a3;
      __int16 v16 = 2050;
      uint64_t v17 = v11;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::ALSProcessor::measurementInput(const CLAmbientLightDecisionTreeOutput, const CFTimeInterval)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  *(double *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a2;
  double result = sub_1000A43BC((uint64_t)&unk_10248A398, &v13);
  *(double *)(a1 + 8) = *(double *)(a1 + 8) * 0.9 + *(double *)result * 0.1;
  return result;
}

uint64_t *sub_1000A43BC(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10000EDDC("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_1000A4414(uint64_t *a1, double a2)
{
  uint64_t result = a1[7];
  if (result)
  {
    int v13 = 0;
    double v14 = 0.0;
    int v16 = 0;
    double v15 = a2;
    uint64_t v4 = *a1;
    if (*a1)
    {
      double v5 = *(double *)(v4 + 16);
      double v6 = vabdd_f64(a2, v5);
      double v7 = 0.0;
      if (v6 <= 1.0 && *(unsigned char *)v4)
      {
        double v8 = *(double *)(v4 + 8);
        LODWORD(v4) = 2 * (v8 > 0.8);
        double v7 = v5;
      }
      else
      {
        LODWORD(v4) = 0;
        double v8 = 0.0;
      }
      int v13 = v4;
      double v14 = v8;
      double v15 = v7;
    }
    uint64_t v9 = a1[2];
    if (v9)
    {
      double v10 = *(double *)(v9 + 8);
      if (v10 > 0.65 && v4 != 2)
      {
        double v12 = *(double *)(v9 + 16);
        int v13 = 1;
        double v14 = v10;
        double v15 = v12;
        int v16 = 1;
      }
    }
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 48))(result, &v13);
  }
  return result;
}

void sub_1000A4500(uint64_t a1, uint64_t a2)
{
}

void sub_1000A4508(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 736);
  if (vabdd_f64(*(double *)(a2 + 16), v2) >= 1.0)
  {
    if (*(unsigned char *)(a1 + 752)) {
      *(unsigned char *)(a1 + 752) = 0;
    }
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 720) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 736) = v5;
    *(unsigned char *)(a1 + 752) = 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    double v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 720);
      uint64_t v8 = *(void *)(a1 + 728);
      uint64_t v9 = *(void *)(a1 + 736);
      uint64_t v10 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 67241216;
      int v26 = v7;
      __int16 v27 = 2050;
      uint64_t v28 = v8;
      __int16 v29 = 2050;
      uint64_t v30 = v9;
      __int16 v31 = 2050;
      double v32 = v2;
      __int16 v33 = 2050;
      double v34 = sub_10018202C(v10);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "LocationController,gnssPredictedAvailability,%{public}d,probability,%{public}.3f,timestamp,%{public}.3f,lastPredictionTimestamp,%{public}.3f,propagation_us,%{public}.3f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v11 = *(_DWORD *)(a1 + 720);
      uint64_t v12 = *(void *)(a1 + 728);
      uint64_t v13 = *(void *)(a1 + 736);
      uint64_t v14 = sub_10016BA10();
      v16[0] = 67241216;
      v16[1] = v11;
      __int16 v17 = 2050;
      uint64_t v18 = v12;
      __int16 v19 = 2050;
      uint64_t v20 = v13;
      __int16 v21 = 2050;
      double v22 = v2;
      __int16 v23 = 2050;
      double v24 = sub_10018202C(v14);
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::predictedGnssAvailabilityCallback(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_1000DB3D4((uint64_t)buf);
    int v42 = *(_DWORD *)(a1 + 720);
    long long v43 = *(_OWORD *)(a1 + 728);
    int v41 = *(_DWORD *)(a1 + 744);
    v16[0] = 36;
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v16, buf, 1, 0xFFFFFFFFLL, 0);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 288) + 248))(*(void *)(a1 + 288), a2);

    if (v39) {
      sub_1000DB0A0(v39);
    }
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v36) {
      sub_1000DB0A0(v36);
    }
    if (v35) {
      sub_1000DB0A0(v35);
    }
  }
}

void sub_1000A4854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1000A4884(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 3528))
  {
    uint64_t v2 = *(void *)(a1 + 3520);
    if (v2) {
      sub_1000A489C(v2, a2);
    }
  }
}

void sub_1000A489C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2388;
  BOOL v5 = sub_1000EF68C(*(double *)(a1 + 2388), *(double *)(a1 + 2396));
  uint64_t v6 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)uint64_t buf = sub_10016C458();
    double v7 = sub_1000A4CE8(v6, (double *)buf);
    BOOL v8 = sub_1000A4F34(v7, *(double *)(v4 + 72), 315360000.0) < 900.0;
  }
  else
  {
    BOOL v8 = 0;
  }
  if (sub_1000A4F84(a1))
  {
    uint64_t v9 = 236;
    if (!*(unsigned char *)(a1 + 237)) {
      uint64_t v9 = 360;
    }
    if (*(unsigned char *)(a1 + v9)) {
      BOOL v10 = !v5;
    }
    else {
      BOOL v10 = 1;
    }
    BOOL v11 = !v10 && v8;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345580);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v13 = *(_DWORD *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = 236;
      if (!*(unsigned char *)(a1 + 237)) {
        uint64_t v16 = 360;
      }
      int v17 = *(unsigned __int8 *)(a1 + v16);
      *(_DWORD *)uint64_t buf = 67241728;
      *(_DWORD *)&uint8_t buf[4] = v13;
      __int16 v22 = 2050;
      uint64_t v23 = v14;
      __int16 v24 = 2050;
      uint64_t v25 = v15;
      __int16 v26 = 1026;
      int v27 = v17;
      __int16 v28 = 1026;
      BOOL v29 = v5;
      __int16 v30 = 1026;
      BOOL v31 = v8;
      __int16 v32 = 1026;
      BOOL v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,gnssAvailability,%{public}d,probability,%{public}.3lf,timestamp,%{public}.3lf,refPresFeatureOn,%{public}d,locValid,%{public}d,locRecent,%{public}d,shouldHandleGnssAvlPredUpdate,%{public}d", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345580);
      }
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateGnssAvailabilityPred(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (v11) {
      sub_1000A58FC(a1, a2);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345580);
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Outdoor calibration trigger disabled or AVL file not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345580);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateGnssAvailabilityPred(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
}

double sub_1000A4CE8(uint64_t a1, double *a2)
{
  double v3 = *(double *)(a1 + 208);
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v3 <= 0.0
    || (double v4 = *(double *)(a1 + 200), (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v4 <= 0.0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    int v6 = 0;
  }
  else
  {
    double Current = v4 + *a2 - v3;
    int v6 = 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  double v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    double v8 = *a2;
    *(_DWORD *)uint64_t buf = 134349568;
    double v12 = v8;
    __int16 v13 = 1026;
    int v14 = v6;
    __int16 v15 = 2050;
    double v16 = Current;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,time,%{public}lf,getGpsTimeDerivedCFAbsoluteTimeOrSystemTime,success,%{public}d,cfAbsTime,%{public}lf", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFAbsoluteTime CLBarometricAltimeterCore::getGpsTimeDerivedCFAbsoluteTimeOrSystemTime(const CFTimeInterval &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return Current;
}

double sub_1000A4F34(double a1, double a2, double a3)
{
  double v3 = fabs(a1);
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v4 = v3 == 2.22044605e-16;
    BOOL v5 = v3 < 2.22044605e-16;
  }
  else
  {
    BOOL v4 = 1;
    BOOL v5 = 0;
  }
  uint64_t v6 = *(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL;
  double v7 = fabs(a2);
  if (v5 || v4)
  {
    BOOL v10 = 0;
    BOOL v8 = 0;
    BOOL v9 = 0;
  }
  else
  {
    BOOL v10 = __OFSUB__(v6, 0x7FEFFFFFFFFFFFFFLL);
    BOOL v8 = v6 == 0x7FEFFFFFFFFFFFFFLL;
    BOOL v9 = v6 - 0x7FEFFFFFFFFFFFFFLL < 0;
  }
  if (v9 ^ v10 | v8)
  {
    BOOL v11 = v7 == 2.22044605e-16;
    BOOL v12 = v7 < 2.22044605e-16;
  }
  else
  {
    BOOL v11 = 1;
    BOOL v12 = 0;
  }
  if (v12 || v11) {
    return a3;
  }
  else {
    return vabdd_f64(a1, a2);
  }
}

uint64_t sub_1000A4F84(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2240);
  if (result)
  {
    if (sub_1000A5140(result, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)))
    {
      if (*(unsigned char *)(a1 + 239)) {
        return *(unsigned __int8 *)(a1 + 238);
      }
      else {
        return *(unsigned __int8 *)(a1 + 362);
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      double v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Als Baro,pressure not available at location", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        BOOL v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLBarometricAltimeter::getBaroAlsOutDoorSupported() const", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000A5140(uint64_t a1, double a2, long double a3)
{
  uint64_t v6 = (char *)sub_1000A6958();
  sub_1000A5670(v6, (uint64_t)&v19);
  if (*(char *)(a1 + 599) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 576), *(void *)(a1 + 584));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 576);
    uint64_t v23 = *(void *)(a1 + 592);
  }
  if (v23 >= 0) {
    double v7 = __p;
  }
  else {
    double v7 = (void **)__p[0];
  }
  if (v23 >= 0) {
    std::string::size_type v8 = HIBYTE(v23);
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__p[1];
  }
  std::string::append(&v19, (const std::string::value_type *)v7, v8);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  BOOL v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    BOOL v10 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#CLPDM,isPressureAvailableForLocation,%s", (uint8_t *)__p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    double v16 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    int v20 = 136315138;
    __int16 v21 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::isPressureAvailableForLocation(double, double)", "%s\n", v17);
    if (v17 != (char *)__p) {
      free(v17);
    }
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v11 = &v19;
  }
  else {
    BOOL v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (!sub_1000A569C((const char *)v11))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1D0);
    }
    __int16 v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#CLPDM,Avl file not available", (uint8_t *)__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_37;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_48;
    }
LABEL_50:
    dispatch_once(&qword_102419380, &stru_10233C1D0);
LABEL_48:
    LOWORD(v20) = 0;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureDataManager::isPressureAvailableForLocation(double, double)", "%s\n", v18);
    if (v18 != (char *)__p) {
      free(v18);
    }
    goto LABEL_37;
  }
  if (sub_1000A56C8(a1 + 216, a2, a3))
  {
    uint64_t v12 = 1;
    goto LABEL_38;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1D0);
  }
  int v14 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#CLPDM,Pressure not available at location", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_48;
    }
    goto LABEL_50;
  }
LABEL_37:
  uint64_t v12 = 0;
LABEL_38:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1000A5624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000A5670@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[95] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 9), *((void *)result + 10));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 72);
  *(void *)(a2 + 16) = *((void *)result + 11);
  return result;
}

BOOL sub_1000A569C(const char *a1)
{
  return stat(a1, &v2) == 0;
}

uint64_t sub_1000A56C8(uint64_t a1, double a2, long double a3)
{
  unsigned int v6 = (int)(floor(a3 * 20.0) * 100000.0) + vcvtmd_s64_f64((a2 + 90.0) * 20.0);
  if (v6 == *(_DWORD *)a1) {
    return *(unsigned char *)(a1 + 4) != 0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233C1F0);
  }
  std::string::size_type v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67174657;
    unsigned int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLPDA,Tile not queried before,%{private}ul", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233C1F0);
    }
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailable(double, double)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  uint64_t result = sub_1017B4FDC(a1, a2, a3);
  if (!*(unsigned char *)(a1 + 64))
  {
    *(_DWORD *)a1 = v6;
    *(unsigned char *)(a1 + 4) = result;
  }
  return result;
}

void sub_1000A58FC(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 24))
  {
    double v4 = sub_10016C458();
    if (*(_DWORD *)a2 == 2
      && ((double v5 = *(double *)(a2 + 8), (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        ? (BOOL v6 = v5 <= 1.0)
        : (BOOL v6 = 0),
          v6
       && v5 >= 0.08
       && (double v8 = *(double *)(a2 + 16), (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
       && (v8 > 0.0 ? (BOOL v9 = v4 - v8 <= 5.0) : (BOOL v9 = 0), v9)))
    {
      if (sub_10191DA04(a1, v4))
      {
        sub_10191E3C8(a1, 0, v4);
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      double v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        double v12 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,gnssAvailability,not strong outdoor,time,%{public}lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        BOOL v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::handleGnssAvailabilityPredictionUpdate(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_1000A5B7C(uint64_t a1, int a2, double a3)
{
  if (*(_DWORD *)(a1 + 216) > 2u) {
    return;
  }
  if (sub_1000A68BC(*(void *)(a1 + 104)) > 0.0 && *(unsigned char *)(a1 + 32))
  {
    if (sub_100F6E748(a1, a3)) {
      return;
    }
    int v6 = *(_DWORD *)(a1 + 216);
    if (v6 == 2)
    {
      if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        double v12 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
        {
          int v14 = *(_DWORD *)(a1 + 232);
          int v13 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)uint64_t buf = 134349568;
          double v42 = a3;
          __int16 v43 = 1026;
          *(_DWORD *)BOOL v44 = v13;
          *(_WORD *)&v44[4] = 1026;
          *(_DWORD *)&v44[6] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{public}u, current floors Ascended, %{public}u", buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1023069F0);
          }
          __int16 v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v35);
          if (v35 != (char *)buf) {
            free(v35);
          }
        }
        *(double *)(a1 + 8) = a3;
        *(double *)(a1 + 224) = a3;
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        __int16 v15 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
        {
          double v16 = *(double *)(a1 + 8);
          *(_DWORD *)uint64_t buf = 134349056;
          double v42 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_51;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 == -1) {
          goto LABEL_87;
        }
        goto LABEL_101;
      }
      if (*(double *)(a1 + 224) + 180.0 >= a3) {
        return;
      }
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      uint64_t v23 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
      {
        double v24 = a3 - *(double *)(a1 + 48);
        int v25 = *(_DWORD *)(a1 + 240);
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 134350080;
        double v42 = a3;
        __int16 v43 = 2050;
        *(double *)BOOL v44 = v24;
        *(_WORD *)&v44[8] = 1026;
        int v45 = v25;
        __int16 v46 = 2050;
        uint64_t v47 = v26;
        __int16 v48 = 2050;
        uint64_t v49 = v27;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, escalation end time : %{public}f, escalation duration : %{public}f, total number of floors ascended : %{public}u, recoveryStart : %{public}f, recoveryEnd : %{public}f", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        char v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      *(double *)(a1 + 16) = a3;
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      __int16 v28 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
      {
        double v29 = *(double *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 134349056;
        double v42 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, HRRecovery endTime set to %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        __int16 v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      uint64_t v30 = a1;
      uint64_t v31 = 1;
    }
    else
    {
      if (v6 != 1)
      {
        if (!v6 && a2)
        {
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1023069F0);
          }
          double v7 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349056;
            double v42 = a3;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation triggered, timestamp : %{public}f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_1023069F0);
            }
            double v34 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v34);
            if (v34 != (char *)buf) {
              free(v34);
            }
          }
          (*(void (**)(void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104));
          *(_DWORD *)(a1 + 216) = 1;
          *(double *)(a1 + 48) = a3;
          *(unsigned char *)(a1 + 34) = 0;
          *(_DWORD *)uint64_t buf = 0;
          uint64_t v8 = sub_1000A6958();
          if (byte_10248262F >= 0) {
            BOOL v9 = (const char *)&qword_102482618;
          }
          else {
            BOOL v9 = (const char *)qword_102482618;
          }
          sub_10006EF84(v8, v9, buf);
          *(_DWORD *)(a1 + 336) = *(_DWORD *)buf;
          if (*(void *)(a1 + 176))
          {
            if (!*(unsigned char *)(a1 + 33))
            {
              double Current = CFAbsoluteTimeGetCurrent();
              sub_100F6DD70(a1 + 152, 0, 0, 11, Current);
              *(unsigned char *)(a1 + 33) = 1;
            }
          }
        }
        return;
      }
      if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        int v17 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
        {
          int v19 = *(_DWORD *)(a1 + 232);
          int v18 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)uint64_t buf = 134349568;
          double v42 = a3;
          __int16 v43 = 1026;
          *(_DWORD *)BOOL v44 = v18;
          *(_WORD *)&v44[4] = 1026;
          *(_DWORD *)&v44[6] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{public}u, current floors Ascended, %{public}u", buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1023069F0);
          }
          int v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v36);
          if (v36 != (char *)buf) {
            free(v36);
          }
        }
        *(_DWORD *)(a1 + 216) = 2;
        *(double *)(a1 + 8) = a3;
        *(double *)(a1 + 224) = a3;
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        int v20 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
        {
          double v21 = *(double *)(a1 + 8);
          *(_DWORD *)uint64_t buf = 134349056;
          double v42 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_51;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 == -1)
        {
LABEL_87:
          __int16 v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v37);
          if (v37 != (char *)buf) {
            free(v37);
          }
LABEL_51:
          int v22 = *(_DWORD *)(a1 + 240) + 1;
          *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 232);
          *(_DWORD *)(a1 + 240) = v22;
          return;
        }
LABEL_101:
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
        goto LABEL_87;
      }
      if (a3 - *(double *)(a1 + 48) <= 30.0) {
        return;
      }
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      __int16 v32 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 134349312;
        double v42 = a3;
        __int16 v43 = 2050;
        *(void *)BOOL v44 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, deescalated due to no confirmed flight, timestamp : %{public}f, escalationOnsetTime : %{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        id v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
      uint64_t v30 = a1;
      uint64_t v31 = 4;
    }
    sub_100195E54(v30, v31);
    return;
  }
  if (sub_1000A68BC(*(void *)(a1 + 104)) <= 0.0) {
    uint64_t v11 = 7;
  }
  else {
    uint64_t v11 = 6;
  }
  sub_100195E54(a1, v11);
  if (*(void *)(a1 + 208))
  {
    sub_100180260(a1 + 184, 0);
  }
}

double sub_1000A68BC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  double v3 = sub_1000A6908(a1);
  if (!v2) {
    return v3 - (sub_10016C458() - *(double *)(a1 + 16));
  }
  return v3;
}

double sub_1000A6908(uint64_t a1)
{
  double v5 = 0.0;
  uint64_t v2 = sub_1000A6958();
  double v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    double v3 = *(const char **)v3;
  }
  sub_1000A699C(v2, v3, &v5);
  return v5;
}

uint64_t sub_1000A6958()
{
  if (qword_10247B2A0 != -1) {
    dispatch_once(&qword_10247B2A0, &stru_1022B96E8);
  }
  return qword_102489FA8;
}

uint64_t sub_1000A699C(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1000A6A10(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1000A6A10(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1000A6DD8(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, double &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1000A6CAC(uint64_t a1, const __CFString *a2, void *a3, int a4)
{
  uint64_t v9 = a1 + 128;
  uint64_t v8 = *(void *)(a1 + 128);
  cf[1] = (CFTypeRef)(a1 + 128);
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 128);
  __int16 v15 = 256;
  cf[0] = 0;
  uint64_t v10 = sub_10013E8B8(a1, a2, (uint64_t *)cf, a4);
  if (v10)
  {
    CFTypeID v11 = CFGetTypeID(cf[0]);
    if (v11 == CFArrayGetTypeID() || v11 == CFDictionaryGetTypeID())
    {
      *a3 = [cf[0] cl_deepCopy];
    }
    else
    {
      CFTypeRef v12 = cf[0];
      *a3 = cf[0];
      CFRetain(v12);
    }
    CFRelease(cf[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  return v10;
}

void sub_1000A6DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6DD8(const void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      CFTypeID v12 = CFGetTypeID(a1);
      __int16 v13 = 2050;
      CFTypeID TypeID = CFNumberGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    BOOL v7 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    CFGetTypeID(a1);
    CFNumberGetTypeID();
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "%s\n", v8);
    if (v8 == (char *)buf) {
      return 0;
    }
LABEL_12:
    free(v8);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, a2)) {
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  uint64_t v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  BOOL v10 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "%s\n", v8);
    if (v8 == (char *)buf) {
      return 0;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1000A7130(uint64_t a1, const __CFDictionary *a2)
{
  sub_10013FA80((int)v34, a2);
  int v33 = 0;
  int v24 = 0;
  int v25 = -1;
  *(_OWORD *)uint64_t v26 = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)double v29 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v31 = 0u;
  __int16 v32 = 0;
  if (&BKSApplicationStateKey)
  {
    if (sub_10013E418((uint64_t)v34, BKSApplicationStateKey, &v24))
    {
      switch(v24)
      {
        case 0:
          int v3 = 0;
          int v33 = 0;
          goto LABEL_33;
        case 1:
          char v7 = 0;
          int v3 = 1;
          int v33 = 1;
          goto LABEL_34;
        case 2:
          int v3 = 2;
          goto LABEL_32;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_19;
        case 4:
          int v3 = 3;
          goto LABEL_32;
        case 8:
          int v3 = 4;
          goto LABEL_32;
        default:
          if (v24 == 16)
          {
            int v3 = 5;
            goto LABEL_32;
          }
          if (v24 == 32)
          {
            int v3 = 6;
LABEL_32:
            int v33 = v3;
            goto LABEL_33;
          }
LABEL_19:
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
          uint64_t v6 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 67240192;
            HIDWORD(buf) = v24;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "unknown application state %{public}d", (uint8_t *)&buf, 8u);
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_96;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
          v35[0] = 67240192;
          v35[1] = v24;
          CFStringRef v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v5);
          break;
      }
      goto LABEL_14;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    CFTypeID v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "cannot find BKSApplicationStateKey", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      LOWORD(v35[0]) = 0;
      CFStringRef v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v5);
LABEL_14:
      if (v5 != (char *)&buf) {
        free(v5);
      }
    }
  }
  else
  {
    int v3 = 0;
LABEL_33:
    char v7 = 1;
LABEL_34:
    if (&BKSApplicationStateProcessIDKey
      && (sub_10013E418((uint64_t)v34, BKSApplicationStateProcessIDKey, &v25) & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      uint64_t v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "failed to retrieve pid", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
        LOWORD(v35[0]) = 0;
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v22);
        if (v22 != (char *)&buf) {
          free(v22);
        }
      }
      int v25 = -1;
    }
    if (&BKSApplicationStateDisplayIDKey
      && !sub_1000A7CF8((uint64_t)v34, BKSApplicationStateDisplayIDKey, (std::string *)v26))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      uint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "failed to retrieve bundle ID", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
        LOWORD(v35[0]) = 0;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v23);
        if (v23 != (char *)&buf) {
          free(v23);
        }
      }
    }
    if (&BKSApplicationStateExitReasonKey) {
      char v10 = v7;
    }
    else {
      char v10 = 1;
    }
    if ((v10 & 1) == 0)
    {
      v35[0] = 5;
      sub_10013E418((uint64_t)v34, BKSApplicationStateExitReasonKey, v35);
      LOBYTE(v32) = v35[0] == 1;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      CFTypeID v11 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(v27[0]) >= 0) {
          CFTypeID v12 = v26;
        }
        else {
          CFTypeID v12 = (void **)v26[0];
        }
        uint64_t buf = (void *)68289794;
        __int16 v37 = 2082;
        char v38 = "";
        __int16 v39 = 1026;
        *(_DWORD *)id v40 = v25;
        *(_WORD *)&v40[4] = 2082;
        *(void *)&void v40[6] = v12;
        *(_WORD *)&v40[14] = 1026;
        *(_DWORD *)&v40[16] = v32;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic AppMonitor received Termination\", \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s, \"isUserKill\":%{public}hhd}", (uint8_t *)&buf, 0x28u);
      }
    }
    sub_1000A7BF0((void *)(a1 + 232), (unsigned __int8 *)v26);
    if ((v3 - 1) >= 3)
    {
      if (v3 == 4)
      {
        *(_DWORD *)(a1 + 120) = v25;
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)v26);
        std::string::operator=((std::string *)(a1 + 152), (const std::string *)&v27[1]);
        std::string::operator=((std::string *)(a1 + 176), (const std::string *)v29);
        std::string::operator=((std::string *)(a1 + 200), (const std::string *)&__p[1]);
        *(_WORD *)(a1 + 224) = v32;
        LODWORD(buf) = 9;
        if (sub_1001072EC(a1, (int *)&buf, 1)) {
          [*(id *)(a1 + 112) setNextFireDelay:5.0];
        }
        sub_1000A8B94(&buf, (long long *)v26, (uint64_t)&v25);
        sub_1000A8D60(a1 + 232, (unsigned __int8 *)&buf, (long long *)&buf);
        if (v47 < 0) {
          operator delete(v46);
        }
        if (v45 < 0) {
          operator delete(v44);
        }
        if (v43 < 0) {
          operator delete(v42);
        }
        if (v41 < 0) {
          operator delete(*(void **)&v40[12]);
        }
        if ((v40[3] & 0x80000000) != 0) {
          operator delete(buf);
        }
      }
    }
    else
    {
      if (*(char *)(a1 + 151) < 0)
      {
        __int16 v13 = *(const void **)(a1 + 128);
        size_t v14 = *(void *)(a1 + 136);
      }
      else
      {
        __int16 v13 = (const void *)(a1 + 128);
        size_t v14 = *(unsigned __int8 *)(a1 + 151);
      }
      if (SHIBYTE(v27[0]) >= 0) {
        __int16 v15 = (void *)HIBYTE(v27[0]);
      }
      else {
        __int16 v15 = v26[1];
      }
      if (SHIBYTE(v27[0]) >= 0) {
        uint64_t v16 = v26;
      }
      else {
        uint64_t v16 = (void **)v26[0];
      }
      if ((unint64_t)v15 >= v14) {
        size_t v17 = v14;
      }
      else {
        size_t v17 = (size_t)v15;
      }
      if (!memcmp(v13, v16, v17) && v15 == (void *)v14)
      {
        sub_101208904(a1 + 120);
        [*(id *)(a1 + 112) setNextFireDelay:1.79769313e308];
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v19 = sub_1000A7F94(&v33);
      if (SHIBYTE(v27[0]) >= 0) {
        uint64_t v20 = v26;
      }
      else {
        uint64_t v20 = (void **)v26[0];
      }
      uint64_t buf = (void *)68289794;
      __int16 v37 = 2082;
      char v38 = "";
      __int16 v39 = 2082;
      *(void *)id v40 = v19;
      *(_WORD *)&v40[8] = 1026;
      *(_DWORD *)&v40[10] = v25;
      *(_WORD *)&v40[14] = 2082;
      *(void *)&v40[16] = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Not Posting Application State Change Notification via legacy path\", \"notification\":%{public, location:escape_only}s, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x2Cu);
    }
  }
LABEL_96:
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[1]);
  }
  if (SHIBYTE(v27[0]) < 0) {
    operator delete(v26[0]);
  }
  return sub_10013F3C4(v34);
}

void sub_1000A7AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000A7B4C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000A7BA0((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000A7BA0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

unsigned __int8 *sub_1000A7BF0(void *a1, unsigned __int8 *a2)
{
  uint64_t result = sub_100103284(a1, a2);
  if (result)
  {
    sub_10017FA3C(a1, result, (uint64_t)v4);
    sub_1000A911C((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

uint64_t sub_1000A7C40(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      char v7 = (unsigned __int8 *)a3;
    }
    else {
      char v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

BOOL sub_1000A7CF8(uint64_t a1, uint64_t a2, std::string *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  BOOL v6 = sub_10013D274((const __CFString *)cf, a3);
  if (!v6)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    char v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, std::string &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

const char *sub_1000A7F94(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 0xB) {
    return "?";
  }
  else {
    return (&off_1023187E0)[v1];
  }
}

void sub_1000A7FBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000A8320(a1, (uint64_t)v23);
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)v23;
    *(void *)(a2 + 16) = v24;
    v23[1] = 0;
    uint64_t v24 = 0;
    v23[0] = 0;
    goto LABEL_49;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_4:
      if (*(char *)(a1 + 23) >= 0) {
        size_t v4 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v4 = *(void *)(a1 + 8);
      }
      char v5 = v25;
      sub_1001110E4((uint64_t)v25, v4 + 1);
      if (v25[23] < 0) {
        char v5 = *(unsigned char **)v25;
      }
      if (v4)
      {
        if (*(char *)(a1 + 23) >= 0) {
          BOOL v6 = (const void *)a1;
        }
        else {
          BOOL v6 = *(const void **)a1;
        }
        memmove(v5, v6, v4);
      }
      *(_WORD *)&v5[v4] = 58;
      if (v24 >= 0) {
        char v7 = v23;
      }
      else {
        char v7 = (void **)v23[0];
      }
      if (v24 >= 0) {
        std::string::size_type v8 = HIBYTE(v24);
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v23[1];
      }
      uint64_t v9 = std::string::append((std::string *)v25, (const std::string::value_type *)v7, v8);
      *(std::string *)a2 = *v9;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if ((v25[23] & 0x80000000) != 0)
      {
        uint64_t v10 = *(void **)v25;
LABEL_48:
        operator delete(v10);
        goto LABEL_49;
      }
      goto LABEL_49;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_4;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10232C318);
  }
  CFTypeID v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    CFTypeID v12 = v23;
    if (v24 < 0) {
      CFTypeID v12 = (void **)v23[0];
    }
    *(void *)int v25 = 68289282;
    *(_WORD *)&v25[8] = 2082;
    *(void *)&v25[10] = "";
    *(_WORD *)&v25[18] = 2082;
    *(void *)&_DWORD v25[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multi-User fUserName is empty\", \"userlessKey\":%{public, location:escape_only}s}", v25, 0x1Cu);
  }
  sub_100134750(&v22, "none");
  sub_100134750(__p, ":");
  if ((v21 & 0x80u) == 0) {
    int v13 = __p;
  }
  else {
    int v13 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v14 = v21;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  __int16 v15 = std::string::append(&v22, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v25[16] = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)int v25 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v24 >= 0) {
    size_t v17 = v23;
  }
  else {
    size_t v17 = (void **)v23[0];
  }
  if (v24 >= 0) {
    std::string::size_type v18 = HIBYTE(v24);
  }
  else {
    std::string::size_type v18 = (std::string::size_type)v23[1];
  }
  __int16 v19 = std::string::append((std::string *)v25, (const std::string::value_type *)v17, v18);
  *(std::string *)a2 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((v25[23] & 0x80000000) != 0) {
    operator delete(*(void **)v25);
  }
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)v22.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }
LABEL_49:
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
}

void sub_1000A8298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A8320(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000A84C8(a1);
  if (*(char *)(a1 + 175) < 0) {
    uint64_t v4 = *(void *)(a1 + 160);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 175);
  }
  sub_1000A84C8(a1);
  if (v4)
  {
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
    {
      uint64_t v5 = a1 + 152;
LABEL_11:
      *(_OWORD *)a2 = *(_OWORD *)v5;
      *(void *)(a2 + 16) = *(void *)(v5 + 16);
      return;
    }
    BOOL v6 = *(void **)(a1 + 152);
    unint64_t v7 = *(void *)(a1 + 160);
LABEL_24:
    sub_1000DC48C((unsigned char *)a2, v6, v7);
    return;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    if (*(void *)(a1 + 112)) {
      goto LABEL_9;
    }
  }
  else if (*(unsigned char *)(a1 + 127))
  {
LABEL_9:
    sub_1000A84C8(a1);
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
      uint64_t v5 = a1 + 104;
      goto LABEL_11;
    }
    BOOL v6 = *(void **)(a1 + 104);
    unint64_t v7 = *(void *)(a1 + 112);
    goto LABEL_24;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(void *)(a1 + 56)) {
      goto LABEL_17;
    }
  }
  else if (*(unsigned char *)(a1 + 71))
  {
LABEL_17:
    sub_100134750(&v17, "com.apple.locationd.bundle-");
    int v8 = *(char *)(a1 + 71);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)(a1 + 48);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)(a1 + 48);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      std::string::size_type v10 = *(void *)(a1 + 56);
    }
    goto LABEL_34;
  }
  sub_100134750(&v17, "com.apple.locationd.executable-");
  int v13 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v12 = a1 + 24;
  CFTypeID v11 = v13;
  int v14 = *(char *)(v12 + 23);
  if (v14 >= 0) {
    uint64_t v9 = (const std::string::value_type *)v12;
  }
  else {
    uint64_t v9 = v11;
  }
  if (v14 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(v12 + 8);
  }
LABEL_34:
  __int16 v15 = std::string::append(&v17, v9, v10);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1000A84A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A84C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 176) && *(unsigned char *)(a1 + 96))
  {
    uint64_t v33 = 0;
    double v34 = 0;
    uint64_t v3 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(void *)(a1 + 56)) {
        goto LABEL_12;
      }
      uint64_t v4 = *(const char **)v3;
    }
    else
    {
      uint64_t v4 = (const char *)(a1 + 48);
      if (!*(unsigned char *)(a1 + 71))
      {
LABEL_12:
        if (*(char *)(a1 + 127) < 0)
        {
          if (*(void *)(a1 + 112)) {
            goto LABEL_14;
          }
        }
        else if (*(unsigned char *)(a1 + 127))
        {
LABEL_14:
          int v8 = (void *)(a1 + 104);
          id v9 = objc_alloc((Class)LSApplicationExtensionRecord);
          if (*(char *)(a1 + 127) < 0) {
            int v8 = (void *)*v8;
          }
          unint64_t v7 = [v9 initWithBundleIdentifier:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8) error:&v34];
LABEL_17:
          std::string::size_type v10 = v7;
          if (v7)
          {
            if (*(char *)(a1 + 127) < 0)
            {
              if (!*(void *)(a1 + 112))
              {
LABEL_25:
                char v13 = 1;
                goto LABEL_53;
              }
            }
            else if (!*(unsigned char *)(a1 + 127))
            {
              goto LABEL_25;
            }
            std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a1 + 104));
            id v12 = [[-[NSObject containingBundleRecord](v10, "containingBundleRecord") bundleIdentifier];
            if (v12) {
              std::string::assign((std::string *)(a1 + 104), (const std::string::value_type *)[v12 UTF8String]);
            }
            goto LABEL_25;
          }
          int v11 = *(unsigned __int8 *)(a1 + 127);
LABEL_28:
          int v14 = (const char *)(a1 + 104);
          if ((v11 & 0x80) != 0)
          {
            if (*(void *)(a1 + 112) != 32)
            {
LABEL_52:
              char v13 = 0;
              std::string::size_type v10 = 0;
LABEL_53:
              *(unsigned char *)(a1 + 178) = 0;
              uint64_t v1 = (const char *)(a1 + 104);
              if (*(char *)(a1 + 127) < 0)
              {
                if (!*(void *)(a1 + 112)) {
                  goto LABEL_61;
                }
                int v25 = *(const char **)v1;
              }
              else
              {
                int v25 = (const char *)(a1 + 104);
                if (!*(unsigned char *)(a1 + 127)) {
                  goto LABEL_61;
                }
              }
              id v26 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25) allowPlaceholder:0 error:&v33];
              uint64_t v27 = v26;
              if (v26)
              {
                if ([v26 appClipMetadata]) {
                  *(unsigned char *)(a1 + 178) = 1;
                }
                goto LABEL_70;
              }
LABEL_61:
              if (v13)
              {
LABEL_69:
                uint64_t v27 = 0;
LABEL_70:

                *(unsigned char *)(a1 + 176) = 1;
                return;
              }
              if (qword_102419530 == -1)
              {
LABEL_63:
                long long v28 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
                {
                  if (*(char *)(a1 + 127) < 0) {
                    uint64_t v1 = *(const char **)v1;
                  }
                  if (*(char *)(a1 + 71) < 0) {
                    uint64_t v3 = *(const char **)v3;
                  }
                  *(_DWORD *)uint64_t buf = 68290050;
                  int v36 = 0;
                  __int16 v37 = 2082;
                  char v38 = "";
                  __int16 v39 = 2082;
                  id v40 = v1;
                  __int16 v41 = 2082;
                  double v42 = v3;
                  __int16 v43 = 2114;
                  BOOL v44 = v34;
                  __int16 v45 = 2114;
                  uint64_t v46 = v33;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The given bundleId or bundlePath is not a plugin or an app\", \"bundleId\":%{public, location:escape_only}s, \"bundlePath\":%{public, location:escape_only}s, \"errorExtensionRecord\":%{public, location:escape_only}@, \"errorApplicationRecord\":%{public, location:escape_only}@}", buf, 0x3Au);
                }
                goto LABEL_69;
              }
LABEL_89:
              dispatch_once(&qword_102419530, &stru_10232C318);
              goto LABEL_63;
            }
            __int16 v15 = *(const char **)v14;
          }
          else
          {
            __int16 v15 = (const char *)(a1 + 104);
            if (v11 != 32) {
              goto LABEL_52;
            }
          }
          uint64_t v16 = *(void *)v15;
          uint64_t v17 = *((void *)v15 + 1);
          uint64_t v19 = *((void *)v15 + 2);
          uint64_t v18 = *((void *)v15 + 3);
          if (v16 == 0x6C7070612E6D6F63
            && v17 == 0x472E7370614D2E65
            && v19 == 0x614D6C6172656E65
            && v18 == 0x7465676469577370)
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_10232C318);
            }
            uint64_t v23 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a1 + 127) < 0) {
                int v14 = *(const char **)v14;
              }
              uint64_t v24 = (const char *)(a1 + 48);
              if (*(char *)(a1 + 71) < 0) {
                uint64_t v24 = *(const char **)v3;
              }
              *(_DWORD *)uint64_t buf = 68289538;
              int v36 = 0;
              __int16 v37 = 2082;
              char v38 = "";
              __int16 v39 = 2082;
              id v40 = v14;
              __int16 v41 = 2082;
              double v42 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Map's widget didn't get auto-masquerade correctly.\", \"BundleId\":%{public, location:escape_only}s, \"BundlePath\":%{public, location:escape_only}s}", buf, 0x26u);
            }
          }
          goto LABEL_52;
        }
        int v11 = *(unsigned __int8 *)(a1 + 127);
        goto LABEL_28;
      }
    }
    if (!+[NSString stringWithUTF8String:v4])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232C318);
      }
      double v29 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        uint64_t v30 = (const char *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v30 = *(const char **)v3;
        }
        *(_DWORD *)uint64_t buf = 68289795;
        int v36 = 0;
        __int16 v37 = 2082;
        char v38 = "";
        __int16 v39 = 2082;
        id v40 = v30;
        __int16 v41 = 2082;
        double v42 = "assert";
        __int16 v43 = 2081;
        BOOL v44 = "@(fBundlePath.c_str())";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fBundlePath to NSString failed.\", \"fBundlePath\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10232C318);
        }
      }
      long long v31 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        __int16 v32 = (const char *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          __int16 v32 = *(const char **)v3;
        }
        *(_DWORD *)uint64_t buf = 68289795;
        int v36 = 0;
        __int16 v37 = 2082;
        char v38 = "";
        __int16 v39 = 2082;
        id v40 = v32;
        __int16 v41 = 2082;
        double v42 = "assert";
        __int16 v43 = 2081;
        BOOL v44 = "@(fBundlePath.c_str())";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fBundlePath to NSString failed.", "{\"msg%{public}.0s\":\"fBundlePath to NSString failed.\", \"fBundlePath\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10232C318);
        }
      }
      std::string::size_type v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v3 = *(const char **)v3;
        }
        *(_DWORD *)uint64_t buf = 68289795;
        int v36 = 0;
        __int16 v37 = 2082;
        char v38 = "";
        __int16 v39 = 2082;
        id v40 = v3;
        __int16 v41 = 2082;
        double v42 = "assert";
        __int16 v43 = 2081;
        BOOL v44 = "@(fBundlePath.c_str())";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fBundlePath to NSString failed.\", \"fBundlePath\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }
      abort_report_np();
      __break(1u);
      goto LABEL_89;
    }
    id v5 = objc_alloc((Class)LSApplicationExtensionRecord);
    BOOL v6 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      BOOL v6 = *(const char **)v3;
    }
    unint64_t v7 = [[v5 initWithURL:+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), 1) error:&v34];
    goto LABEL_17;
  }
}

void *sub_1000A8B94(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  sub_1000A8C10((uint64_t)(__dst + 3), a3);
  return __dst;
}

void sub_1000A8BF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A8C10(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  unint64_t v7 = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_1000DC48C(v7, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)unint64_t v7 = v8;
  }
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  return a1;
}

void sub_1000A8D14(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1000A8D60(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1000A8FE4(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1000A911C((uint64_t)v25, 0);
  return i;
}

void sub_1000A8FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A911C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1000A8FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x98uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = sub_1000A905C((char *)v8 + 16, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1000A9044(_Unwind_Exception *a1)
{
  sub_1000A911C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1000A905C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  long long v5 = a2[2];
  *((void *)__dst + 6) = *((void *)a2 + 6);
  *((_OWORD *)__dst + 2) = v5;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = 0;
  long long v6 = *(long long *)((char *)a2 + 56);
  *((void *)__dst + 9) = *((void *)a2 + 9);
  *(_OWORD *)(__dst + 56) = v6;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  long long v7 = a2[5];
  *((void *)__dst + 12) = *((void *)a2 + 12);
  *((_OWORD *)__dst + 5) = v7;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 10) = 0;
  long long v8 = *(long long *)((char *)a2 + 104);
  *((void *)__dst + 15) = *((void *)a2 + 15);
  *(_OWORD *)(__dst + 104) = v8;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((_WORD *)__dst + 64) = *((_WORD *)a2 + 64);
  return __dst;
}

void sub_1000A911C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10017FC38((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_1000A9174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 12) = 0;
  *(void *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 88) = 0xBFF0000000000000;
  *(void *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  if (*(unsigned char *)a2)
  {
    int v11 = *(_DWORD *)(a2 + 8);
    if ((v11 - 3) <= 2)
    {
      uint64_t v12 = sub_1006E58D4(a2);
      sub_1006E4370(a1, v12, a3);
    }
    switch(v11)
    {
      case 0:
      case 1:
      case 2:
      case 7:
        char v13 = (_OWORD *)sub_1006E6690(a2);
        sub_1006E5900(a1, v13, a3);
      case 6:
        uint64_t v17 = sub_100117098(a2);
        sub_1000A94E4(a1, v17, a3);
      case 9:
        BOOL v18 = (_OWORD *)sub_1006E744C(a2);
        sub_1006E66BC(a1, v18, a3);
      case 10:
        unint64_t v19 = (long long *)sub_1006E8278(a2);
        sub_1006E7474(a1, v19, a3);
      default:
        break;
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C5170);
  }
  int v14 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10142D00C(a2);
    unint64_t v15 = v31 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v23 = 1024;
    int v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CELL_LOC: best match cell, %s, bestMatch, %d", buf, 0x12u);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C5170);
    }
    sub_10142D00C(a2);
    if (v25 >= 0) {
      unint64_t v20 = buf;
    }
    else {
      unint64_t v20 = *(unsigned char **)buf;
    }
    int v26 = 136315394;
    uint64_t v27 = v20;
    __int16 v28 = 1024;
    int v29 = 0;
    size_t v21 = (char *)_os_log_send_and_compose_impl();
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation(const CLCell &, CLDaemonLocation &)", "%s\n", v21);
    if (v21 != (char *)__p) {
      free(v21);
    }
  }
  return 0;
}

void sub_1000A94E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v3;
  v10[4] = *(_OWORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v4;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 12) = 0;
  *(void *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 88) = 0xBFF0000000000000;
  *(void *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  sub_1000AA2F0(a1, v10, a3);
}

void sub_1000AA298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AA2F0(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v5 = a2[3];
  long long v16 = a2[2];
  long long v17 = v5;
  long long v18 = a2[4];
  uint64_t v19 = *((void *)a2 + 10);
  long long v6 = a2[1];
  long long v14 = *a2;
  long long v15 = v6;
  sub_1000AAEBC(&v13);
  *(void *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 12) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 88) = 0xBFF0000000000000;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  uint64_t v12 = sub_1000AB228(a1);
  sub_1000AB1AC(*(void *)(v12 + 32));
}

void sub_1000AAE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AAEBC@<X0>(void *a1@<X8>)
{
  sub_10010F274((uint64_t)v19);
  uint64_t v2 = sub_100132EFC(v20, (uint64_t)"[", 1);
  sub_100132EFC(v2, (uint64_t)" MCC=", 5);
  long long v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)" AND MNC=", 9);
  long long v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)" AND TAC=", 9);
  long long v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)" AND CI=", 8);
  long long v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)" AND UARFCN=", 12);
  long long v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)" AND PID=", 9);
  long long v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)" AND RSCP=", 10);
  unint64_t v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)" AND ECN0=", 10);
  unint64_t v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)" AND BANDINFO=", 14);
  uint64_t v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)" AND DEPLOYMENTTYPE=", 20);
  uint64_t v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)" AND BANDWIDTH=", 15);
  char v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)" ]", 2);
  std::stringbuf::str();
  if (v18 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  sub_100134750(a1, p_p);
  if (v18 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v19
  v20[0] = v15;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1000AB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1000AB1AC(uint64_t a1)
{
}

uint64_t sub_1000AB228(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 272);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1000AB290()
{
}

uint64_t sub_1000AB2B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 280);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1000AB31C()
{
}

uint64_t sub_1000AB340(uint64_t a1)
{
  sub_10010F274((uint64_t)v21);
  sub_100132EFC(v22, (uint64_t)"CLTypeLocation, ", 16);
  sub_100132EFC(v22, (uint64_t)", type, ", 8);
  uint64_t v2 = (void *)std::ostream::operator<<();
  long long v3 = sub_100132EFC(v2, (uint64_t)", ", 2);
  uint64_t v4 = *(unsigned int *)(a1 + 96);
  if (v4 <= 0xD) {
    long long v5 = (&off_1022E93A8)[v4];
  }
  else {
    long long v5 = "<error>";
  }
  size_t v6 = strlen(v5);
  sub_100132EFC(v3, (uint64_t)v5, v6);
  long long v7 = sub_100132EFC(v22, (uint64_t)", latitude, ", 12);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 12;
  *(uint64_t *)((char *)v7 + *(void *)(v8 - 24) + 16) = 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  unint64_t v9 = sub_100132EFC(v22, (uint64_t)", longitude, ", 13);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 12;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 24) + 16) = 8;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", altitude, ", 12);
  uint64_t v11 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v11 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", hAcc, ", 8);
  uint64_t v12 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v12 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", vAcc, ", 8);
  uint64_t v13 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v13 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", course, ", 10);
  uint64_t v14 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v14 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", speed, ", 9);
  uint64_t v15 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v15 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", timstamp, ", 12);
  uint64_t v16 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v16 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", lifespan, ", 12);
  uint64_t v17 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v17 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", confidence, ", 14);
  uint64_t v18 = v21[0];
  *(void *)((char *)&v21[2] + *(void *)(v21[0] - 24)) = 2;
  *(_DWORD *)((char *)&v21[1] + *(void *)(v18 - 24)) |= 4u;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v21
  v22[0] = v19;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1000ABA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000ABC60(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t result = (uint64_t)[*(id *)(v6 + 136) intForKey:@"Authorization" atKeyPath:a2 defaultValue:0];
  if ((result & 6) != 0)
  {
    uint64_t result = sub_10010423C([*(id *)(v6 + 136) readonlyStoreAtKeyPath:a2 dictionary]);
    if (result > 8 || ((1 << result) & 0x1A8) == 0)
    {
      *a3 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

id sub_1000ABF8C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B3240);
      }
      long long v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D51014 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationProvider_Type::RegInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B3240);
      }
      long long v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D51014 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022B3240);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

uint64_t sub_1000AC34C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1000AC400(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

id sub_1000AC400(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1000ABF8C(a1);
}

BOOL sub_1000AC4D0(uint64_t a1, int a2, unsigned int *a3, uint64_t *a4)
{
  int v42 = a2;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_21;
  }
  signed int v10 = *a3;
  uint64_t v11 = v6;
  do
  {
    signed int v12 = *(_DWORD *)(v7 + 32);
    BOOL v13 = v12 < v10;
    if (v12 >= v10) {
      uint64_t v14 = (uint64_t *)v7;
    }
    else {
      uint64_t v14 = (uint64_t *)(v7 + 8);
    }
    if (!v13) {
      uint64_t v11 = v7;
    }
    uint64_t v7 = *v14;
  }
  while (*v14);
  if (v11 == v6) {
    goto LABEL_21;
  }
  if (v10 < *(_DWORD *)(v11 + 32)) {
    goto LABEL_21;
  }
  uint64_t v17 = *(void *)(v11 + 48);
  uint64_t v15 = v11 + 48;
  uint64_t v16 = v17;
  if (!v17) {
    goto LABEL_21;
  }
  uint64_t v18 = (uint64_t **)(v15 - 8);
  uint64_t v19 = v15;
  do
  {
    int v20 = *(_DWORD *)(v16 + 32);
    BOOL v21 = v20 < a2;
    if (v20 >= a2) {
      std::string v22 = (uint64_t *)v16;
    }
    else {
      std::string v22 = (uint64_t *)(v16 + 8);
    }
    if (!v21) {
      uint64_t v19 = v16;
    }
    uint64_t v16 = *v22;
  }
  while (*v22);
  if (v19 != v15 && *(_DWORD *)(v19 + 32) <= a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    uint64_t v27 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v28 = *a3;
      int v29 = sub_10008A168(*a3);
      *(void *)uint64_t buf = &v42;
      uint64_t v30 = sub_1000EBC94(v18, &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
      uint64_t v31 = *a4;
      *(_DWORD *)uint64_t buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v53 = 1024;
      unsigned int v54 = v28;
      __int16 v55 = 2080;
      __int16 v56 = v29;
      __int16 v57 = 2048;
      uint64_t v58 = v30;
      __int16 v59 = 2048;
      uint64_t v60 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C4110);
      }
      int v36 = v42;
      unsigned int v37 = *a3;
      char v38 = sub_10008A168(v37);
      __int16 v43 = &v42;
      __int16 v39 = sub_1000EBC94(v18, &v42, (uint64_t)&unk_101D0B290, &v43)[5];
      uint64_t v40 = *a4;
      LODWORD(v43) = 67110146;
      HIDWORD(v43) = v36;
      __int16 v44 = 1024;
      unsigned int v45 = v37;
      __int16 v46 = 2080;
      char v47 = v38;
      __int16 v48 = 2048;
      uint64_t v49 = v39;
      __int16 v50 = 2048;
      uint64_t v51 = v40;
      __int16 v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    *(void *)uint64_t buf = &v42;
    __int16 v32 = sub_1000EBC94(v18, &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    long long v33 = *(_OWORD *)a4;
    *(_OWORD *)((char *)v32 + 52) = *(_OWORD *)((char *)a4 + 12);
    *(_OWORD *)(v32 + 5) = v33;
    return 1;
  }
  else
  {
LABEL_21:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    char v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v24 = *a3;
      char v25 = sub_10008A168(*a3);
      *(_DWORD *)uint64_t buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v53 = 1024;
      unsigned int v54 = v24;
      __int16 v55 = 2080;
      __int16 v56 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, no notification", buf, 0x18u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C4110);
      }
      unsigned int v34 = *a3;
      LODWORD(v43) = 67109634;
      HIDWORD(v43) = a2;
      __int16 v44 = 1024;
      unsigned int v45 = v34;
      __int16 v46 = 2080;
      char v47 = sub_10008A168(v34);
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1000AC9C4(uint64_t a1, __int32 a2, int *a3, long long *a4)
{
  v23.i32[2] = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)buf);
  sub_10016BE74(v7, (uint64_t *)buf);
  *(_DWORD *)uint64_t buf = 1;
  v23.i32[0] = 1;
  v23.i32[1] = sub_10016A9AC((int *)buf);
  int v8 = *(unsigned __int8 *)(a1 + 5168);
  uint64_t v9 = sub_10016AB88();
  signed int v10 = (int *)(a1 + 5124);
  *(_DWORD *)uint64_t buf = 2;
  if (v8) {
    sub_100164CAC(v9, (unsigned int *)buf, &v23, v10, &v23.i32[2], a3);
  }
  else {
    sub_10000C930(v9, (unsigned int *)buf, &v23, v10, &v23.i32[2], a3, (uint64_t)a4);
  }
  *(unsigned char *)(a1 + 5168) = 0;
  BOOL v11 = sub_1000AD0C8(a1, v23.i32[2], a3, a4);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  signed int v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    __int32 v13 = v23.i32[2];
    *(void *)uint64_t buf = &v23.i64[1];
    id v14 = [[sub_10008A098((uint64_t **)(a1 + 80), &v23.i32[2], (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
    uint64_t v15 = *a3;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v28 = 2082;
    int v29 = "";
    __int16 v30 = 1026;
    __int32 v31 = v13;
    __int16 v32 = 2114;
    id v33 = v14;
    __int16 v34 = 2050;
    uint64_t v35 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocationController,registration\", \"id\":%{public}d, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x2Cu);
  }
  if (!*a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C17C0);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      __int32 v17 = v23.i32[2];
      *(void *)uint64_t buf = &v23.i64[1];
      uint64_t v18 = (const char *)[[objc_msgSend(objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v23.i32[2], (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description"), "UTF8String");
      *(_DWORD *)uint64_t buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v17;
      __int16 v28 = 2082;
      int v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#wigo,on,LocationController,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022C17C0);
      }
      __int32 v20 = v23.i32[2];
      unsigned int v24 = &v23.i32[2];
      id v21 = [[objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v23.i32[2], (uint64_t)&unk_101D0B290, &v24)[8], "description") UTF8String];
      LODWORD(v24) = 67240450;
      HIDWORD(v24) = v20;
      __int16 v25 = 2082;
      id v26 = v21;
      std::string v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    AnalyticsSendEventLazy();
  }
  sub_1000ACDF4((uint64_t **)a1, a3);
  return v11;
}

uint64_t sub_1000ACDBC(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  a1[5168] = 1;
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241D230);
}

uint64_t **sub_1000ACDF4(uint64_t **result, int *a2)
{
  if (*a2 == 15 || *a2 == 0)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    BOOL result = (uint64_t **)sub_1001072EC((uint64_t)result, &v5, 1);
    if ((int)result >= 2) {
      return sub_100674ACC(v4, a2);
    }
  }
  return result;
}

BOOL sub_1000ACE54(uint64_t a1, int a2, unsigned int *a3, uint64_t *a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C4110);
  }
  int v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v9 = *a3;
    signed int v10 = sub_10008A168(*a3);
    uint64_t v11 = *a4;
    int v12 = *((_DWORD *)a4 + 5);
    *(_DWORD *)uint64_t buf = 67109890;
    unsigned int v19 = v9;
    __int16 v20 = 2080;
    id v21 = v10;
    __int16 v22 = 2048;
    uint64_t v23 = v11;
    __int16 v24 = 1024;
    int v25 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    sub_10008A168(*a3);
    __int32 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (*a3 - 1 > 1)
  {
    uint64_t v14 = a1;
    int v15 = a2;
    __int32 v13 = (int *)a3;
  }
  else
  {
    *(_DWORD *)uint64_t buf = 0;
    __int32 v13 = (int *)buf;
    uint64_t v14 = a1;
    int v15 = a2;
  }
  return sub_1000AD0C8(v14, v15, v13, (long long *)a4);
}

BOOL sub_1000AD0C8(uint64_t a1, int a2, int *a3, long long *a4)
{
  int v42 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        __int32 v13 = (uint64_t *)v7;
      }
      else {
        __int32 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v41 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          __int16 v28 = (uint64_t *)v24;
        }
        else {
          __int16 v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)__int16 v43 = v25;
        uint64_t v35 = *(void *)(v25 + 56);
        *(void *)uint64_t buf = &v42;
        int v36 = sub_1000EBC94((uint64_t **)(v25 + 40), &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v37 = *a4;
        *(_OWORD *)((char *)v36 + 52) = *(long long *)((char *)a4 + 12);
        *(_OWORD *)(v36 + 5) = v37;
        sub_1000DB3D4((uint64_t)buf);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1000B0A70();
        }

        if (v53) {
          sub_1000DB0A0(v53);
        }
        if (v52 < 0) {
          operator delete(v51);
        }
        if (v50) {
          sub_1000DB0A0(v50);
        }
        if (v49) {
          sub_1000DB0A0(v49);
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)__int16 v43 = a1 + 64;
        char v29 = byte_10241B4E0;
        int v40 = v16;
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v40 = *a3;
        *(void *)uint64_t buf = &v40;
        __int16 v30 = sub_10044715C((uint64_t **)(a1 + 56), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        __int32 v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        int v40 = *a3;
        *(void *)uint64_t buf = &v40;
        __int16 v32 = sub_10044715C((uint64_t **)(a1 + 56), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v42;
        id v33 = sub_1000EBC94(v32 + 5, &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v34 = *a4;
        *(_OWORD *)((char *)v33 + 52) = *(long long *)((char *)a4 + 12);
        *(_OWORD *)(v33 + 5) = v34;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B31A0);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B31A0);
    }
    char v38 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v38 = (void *)*v38;
    }
    *(_DWORD *)__int16 v43 = 136446466;
    *(void *)&v43[4] = v38;
    __int16 v44 = 1026;
    int v45 = v42;
    __int16 v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
    return 0;
  }
  return result;
}

void sub_1000AD5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AD5F4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000ADAAC(a1, a2, a3);
  if (v6)
  {
    if (*a2 <= 0x27 && ((1 << *a2) & 0x800000041FLL) != 0)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (*(unsigned char *)(a1 + 110))
      {
        double v9 = *(double *)(a3 + 88);
        if (v9 >= 0.0)
        {
          double v10 = v9 + *(double *)(a3 + 76);
          double v11 = v10 - Current;
          if (v10 < Current) {
            double v11 = 0.0;
          }
          else {
            double v10 = Current;
          }
          *(double *)(a3 + 76) = v10;
          *(double *)(a3 + 88) = v11;
        }
        else
        {
          *(double *)(a3 + 76) = Current;
        }
      }
      if (qword_102419650 != -1) {
        dispatch_once(&qword_102419650, &stru_1022C4130);
      }
      BOOL v12 = qword_102419658;
      if (os_log_type_enabled((os_log_t)qword_102419658, OS_LOG_TYPE_DEBUG))
      {
        sub_100134750(&v49, "Restored-");
        int v13 = *(char *)(a1 + 31);
        if (v13 >= 0) {
          uint64_t v14 = (const std::string::value_type *)(a1 + 8);
        }
        else {
          uint64_t v14 = *(const std::string::value_type **)(a1 + 8);
        }
        if (v13 >= 0) {
          std::string::size_type v15 = *(unsigned __int8 *)(a1 + 31);
        }
        else {
          std::string::size_type v15 = *(void *)(a1 + 16);
        }
        int v16 = std::string::append(&v49, v14, v15);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v16->__r_.__value_.__l + 2);
        *(_OWORD *)long long __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        int v18 = __p[23];
        uint64_t v19 = *(unsigned char **)__p;
        uint64_t v20 = *(void *)(a3 + 4);
        uint64_t v21 = *(void *)(a3 + 12);
        uint64_t v22 = *(void *)(a3 + 20);
        unsigned int v23 = *(_DWORD *)(a3 + 96);
        uint64_t v24 = sub_10003E9A4(v23);
        double v25 = *(double *)(a3 + 76);
        int v26 = __p;
        if (v18 < 0) {
          int v26 = v19;
        }
        uint64_t v27 = *(void *)(a3 + 88);
        *(_DWORD *)uint64_t buf = 136317442;
        float v66 = v26;
        __int16 v67 = 1024;
        int v68 = 1;
        __int16 v69 = 2048;
        uint64_t v70 = v20;
        __int16 v71 = 2048;
        uint64_t v72 = v21;
        __int16 v73 = 2048;
        uint64_t v74 = v22;
        __int16 v75 = 1024;
        unsigned int v76 = v23;
        __int16 v77 = 2080;
        float v78 = v24;
        __int16 v79 = 2048;
        double v80 = v25;
        __int16 v81 = 2048;
        double v82 = Current - v25;
        __int16 v83 = 2048;
        uint64_t v84 = v27;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,", buf, 0x5Eu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419650 != -1) {
          dispatch_once(&qword_102419650, &stru_1022C4130);
        }
        sub_100134750(&v48, "Restored-");
        __int32 v31 = *(const std::string::value_type **)(a1 + 8);
        uint64_t v30 = a1 + 8;
        char v29 = v31;
        int v32 = *(char *)(v30 + 23);
        if (v32 >= 0) {
          id v33 = (const std::string::value_type *)v30;
        }
        else {
          id v33 = v29;
        }
        if (v32 >= 0) {
          std::string::size_type v34 = *(unsigned __int8 *)(v30 + 23);
        }
        else {
          std::string::size_type v34 = *(void *)(v30 + 8);
        }
        uint64_t v35 = std::string::append(&v48, v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        int v37 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
        std::string::size_type v38 = v49.__r_.__value_.__r.__words[0];
        uint64_t v39 = *(void *)(a3 + 4);
        uint64_t v40 = *(void *)(a3 + 12);
        uint64_t v41 = *(void *)(a3 + 20);
        unsigned int v42 = *(_DWORD *)(a3 + 96);
        __int16 v43 = sub_10003E9A4(v42);
        double v44 = *(double *)(a3 + 76);
        int v45 = &v49;
        if (v37 < 0) {
          int v45 = (std::string *)v38;
        }
        uint64_t v46 = *(void *)(a3 + 88);
        *(_DWORD *)long long __p = 136317442;
        *(void *)&__p[4] = v45;
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&unsigned char __p[14] = 1;
        *(_WORD *)&unsigned char __p[18] = 2048;
        *(void *)&__p[20] = v39;
        __int16 v51 = 2048;
        uint64_t v52 = v40;
        __int16 v53 = 2048;
        uint64_t v54 = v41;
        __int16 v55 = 1024;
        unsigned int v56 = v42;
        __int16 v57 = 2080;
        uint64_t v58 = v43;
        __int16 v59 = 2048;
        double v60 = v44;
        __int16 v61 = 2048;
        double v62 = Current - v44;
        __int16 v63 = 2048;
        uint64_t v64 = v46;
        __int16 v47 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("LOCATION", 1, 0, 2, "virtual BOOL CLLocationProvider::getNotification(const CLLocationProvider_Type::Notification &, CLLocationProvider_Type::NotificationData &)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
    }
  }
  return v6;
}